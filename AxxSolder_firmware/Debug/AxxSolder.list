
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a9f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e38  0801abd8  0801abd8  0002abd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da10  0801da10  00030540  2**0
                  CONTENTS
  4 .ARM          00000008  0801da10  0801da10  0002da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da18  0801da18  00030540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801da18  0801da18  0002da18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801da1c  0801da1c  0002da1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  0801da20  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031b8  20000540  0801df60  00030540  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200036f8  0801df60  000336f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f604  00000000  00000000  000305b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065d7  00000000  00000000  0005fbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a8  00000000  00000000  00066190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ff1  00000000  00000000  00068b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028961  00000000  00000000  0006ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000355fb  00000000  00000000  0009348a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee7aa  00000000  00000000  000c8a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c738  00000000  00000000  001b7230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000540 	.word	0x20000540
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801abc0 	.word	0x0801abc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000544 	.word	0x20000544
 800021c:	0801abc0 	.word	0x0801abc0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f007 fc64 	bl	8008960 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001e78 	.word	0x20001e78

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000560 	.word	0x20000560
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2348      	movs	r3, #72	; 0x48
 800118c:	461a      	mov	r2, r3
 800118e:	f015 ffd8 	bl	8017142 <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000560 	.word	0x20000560

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2348      	movs	r3, #72	; 0x48
 80011e8:	461a      	mov	r2, r3
 80011ea:	f015 ffaa 	bl	8017142 <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f007 fbb2 	bl	8008960 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 f892 	bl	8009330 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 f95a 	bl	8009508 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f007 ffd1 	bl	8009258 <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 ffbc 	bl	8009258 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 f845 	bl	8009374 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 f838 	bl	8009374 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000055c 	.word	0x2000055c
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000560 	.word	0x20000560
 8001320:	20000000 	.word	0x20000000
 8001324:	20001e78 	.word	0x20001e78
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	200005a8 	.word	0x200005a8

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000628 	.word	0x20000628
 8001408:	2000062c 	.word	0x2000062c
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f002 ff25 	bl	80042d0 <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	20000a38 	.word	0x20000a38
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 faa7 	bl	8009a84 <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 faa1 	bl	8009a84 <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	200006a8 	.word	0x200006a8
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fea8 	bl	80042d0 <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000d64 	.word	0x20000d64
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_heater_current>:

void get_heater_current(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <get_heater_current+0x40>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <get_heater_current+0x44>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fe84 	bl	80042d0 <Moving_Average_Compute>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <get_heater_current+0x38>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb2b 	bl	8000c38 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <get_heater_current+0x48>)
 80015e6:	6153      	str	r3, [r2, #20]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	2000069e 	.word	0x2000069e
 80015fc:	20001090 	.word	0x20001090
 8001600:	20000038 	.word	0x20000038
 8001604:	00000000 	.word	0x00000000

08001608 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fec0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	4969      	ldr	r1, [pc, #420]	; (80017c8 <get_thermocouple_temperature+0x1c0>)
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fe53 	bl	80042d0 <Moving_Average_Compute>
 800162a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <get_thermocouple_temperature+0x1c4>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff f803 	bl	8000648 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a34d      	add	r3, pc, #308	; (adr r3, 8001780 <get_thermocouple_temperature+0x178>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fffa 	bl	8000648 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	a34a      	add	r3, pc, #296	; (adr r3, 8001788 <get_thermocouple_temperature+0x180>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe33 	bl	80002dc <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a344      	add	r3, pc, #272	; (adr r3, 8001790 <get_thermocouple_temperature+0x188>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe2a 	bl	80002dc <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4950      	ldr	r1, [pc, #320]	; (80017d0 <get_thermocouple_temperature+0x1c8>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001692:	e064      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <get_thermocouple_temperature+0x1c4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d12e      	bne.n	80016fa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a4:	f7fe ffd0 	bl	8000648 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a339      	add	r3, pc, #228	; (adr r3, 8001798 <get_thermocouple_temperature+0x190>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	a337      	add	r3, pc, #220	; (adr r3, 80017a0 <get_thermocouple_temperature+0x198>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fe00 	bl	80002dc <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a330      	add	r3, pc, #192	; (adr r3, 80017a8 <get_thermocouple_temperature+0x1a0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdf7 	bl	80002dc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4937      	ldr	r1, [pc, #220]	; (80017d0 <get_thermocouple_temperature+0x1c8>)
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f8:	e031      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <get_thermocouple_temperature+0x1c4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12d      	bne.n	800175e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a326      	add	r3, pc, #152	; (adr r3, 80017b0 <get_thermocouple_temperature+0x1a8>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	a323      	add	r3, pc, #140	; (adr r3, 80017b8 <get_thermocouple_temperature+0x1b0>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a31d      	add	r3, pc, #116	; (adr r3, 80017c0 <get_thermocouple_temperature+0x1b8>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	491d      	ldr	r1, [pc, #116]	; (80017d0 <get_thermocouple_temperature+0x1c8>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <get_thermocouple_temperature+0x1c8>)
 8001760:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <get_thermocouple_temperature+0x1cc>)
 8001766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4917      	ldr	r1, [pc, #92]	; (80017d0 <get_thermocouple_temperature+0x1c8>)
 8001774:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bdb0      	pop	{r4, r5, r7, pc}
 8001780:	92e63abf 	.word	0x92e63abf
 8001784:	3ee1b6ee 	.word	0x3ee1b6ee
 8001788:	1a8bcf67 	.word	0x1a8bcf67
 800178c:	3fd3ea38 	.word	0x3fd3ea38
 8001790:	ef80bf90 	.word	0xef80bf90
 8001794:	403810db 	.word	0x403810db
 8001798:	82fead10 	.word	0x82fead10
 800179c:	3ea7dc92 	.word	0x3ea7dc92
 80017a0:	c53ce03f 	.word	0xc53ce03f
 80017a4:	3fbd94aa 	.word	0x3fbd94aa
 80017a8:	34da2134 	.word	0x34da2134
 80017ac:	403a2648 	.word	0x403a2648
 80017b0:	202b3c5a 	.word	0x202b3c5a
 80017b4:	3f0edf88 	.word	0x3f0edf88
 80017b8:	15fb4706 	.word	0x15fb4706
 80017bc:	3fda2f75 	.word	0x3fda2f75
 80017c0:	53430524 	.word	0x53430524
 80017c4:	40381413 	.word	0x40381413
 80017c8:	2000070c 	.word	0x2000070c
 80017cc:	200005b8 	.word	0x200005b8
 80017d0:	20000038 	.word	0x20000038
 80017d4:	200006a8 	.word	0x200006a8

080017d8 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <set_heater_duty+0x48>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fec1 	bl	8000574 <__aeabi_i2d>
 80017f2:	a309      	add	r3, pc, #36	; (adr r3, 8001818 <set_heater_duty+0x40>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe ff26 	bl	8000648 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <set_heater_duty+0x48>)
 8001802:	680c      	ldr	r4, [r1, #0]
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9f6 	bl	8000bf8 <__aeabi_d2uiz>
 800180c:	4603      	mov	r3, r0
 800180e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	33333333 	.word	0x33333333
 800181c:	3fd33333 	.word	0x3fd33333
 8001820:	20001fb4 	.word	0x20001fb4
 8001824:	00000000 	.word	0x00000000

08001828 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <heater_on+0xa0>)
 800182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe feb1 	bl	8000598 <__aeabi_f2d>
 8001836:	a31e      	add	r3, pc, #120	; (adr r3, 80018b0 <heater_on+0x88>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe ff04 	bl	8000648 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <heater_on+0xa0>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fea3 	bl	8000598 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7ff f81f 	bl	800089c <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <heater_on+0xa4>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe feec 	bl	8000648 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4916      	ldr	r1, [pc, #88]	; (80018d0 <heater_on+0xa8>)
 8001876:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <heater_on+0xa8>)
 800187c:	ed93 7b00 	vldr	d7, [r3]
 8001880:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018b8 <heater_on+0x90>
 8001884:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018c0 <heater_on+0x98>
 8001888:	eeb0 0a47 	vmov.f32	s0, s14
 800188c:	eef0 0a67 	vmov.f32	s1, s15
 8001890:	f7ff fd50 	bl	8001334 <clamp>
 8001894:	ec53 2b10 	vmov	r2, r3, d0
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9ac 	bl	8000bf8 <__aeabi_d2uiz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff97 	bl	80017d8 <set_heater_duty>
}
 80018aa:	bf00      	nop
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	a5e353f8 	.word	0xa5e353f8
 80018b4:	3fc0c49b 	.word	0x3fc0c49b
 80018b8:	00000000 	.word	0x00000000
 80018bc:	407f4000 	.word	0x407f4000
	...
 80018c8:	20000038 	.word	0x20000038
 80018cc:	200006f0 	.word	0x200006f0
 80018d0:	20000700 	.word	0x20000700

080018d4 <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ff7d 	bl	80017d8 <set_heater_duty>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <show_popup>:

void show_popup(char * text[80]){
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]
	UG_FillFrame(10, 150, 225, 205, RGB_to_BRG(C_ORANGE));
 80018ec:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80018f0:	f7ff fdea 	bl	80014c8 <RGB_to_BRG>
 80018f4:	4603      	mov	r3, r0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	23cd      	movs	r3, #205	; 0xcd
 80018fa:	22e1      	movs	r2, #225	; 0xe1
 80018fc:	2196      	movs	r1, #150	; 0x96
 80018fe:	200a      	movs	r0, #10
 8001900:	f010 fca8 	bl	8012254 <UG_FillFrame>
	UG_FillFrame(15, 155, 220, 200, RGB_to_BRG(C_WHITE));
 8001904:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001908:	f7ff fdde 	bl	80014c8 <RGB_to_BRG>
 800190c:	4603      	mov	r3, r0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	23c8      	movs	r3, #200	; 0xc8
 8001912:	22dc      	movs	r2, #220	; 0xdc
 8001914:	219b      	movs	r1, #155	; 0x9b
 8001916:	200f      	movs	r0, #15
 8001918:	f010 fc9c 	bl	8012254 <UG_FillFrame>
	LCD_PutStr(20, 150, text, FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800191c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001920:	f7ff fdd2 	bl	80014c8 <RGB_to_BRG>
 8001924:	4603      	mov	r3, r0
 8001926:	461c      	mov	r4, r3
 8001928:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800192c:	f7ff fdcc 	bl	80014c8 <RGB_to_BRG>
 8001930:	4603      	mov	r3, r0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	9400      	str	r4, [sp, #0]
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <show_popup+0x80>)
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	2196      	movs	r1, #150	; 0x96
 800193c:	2014      	movs	r0, #20
 800193e:	f004 fa39 	bl	8005db4 <LCD_PutStr>
	HAL_Delay(2000);
 8001942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001946:	f004 fb4f 	bl	8005fe8 <HAL_Delay>
	LCD_draw_main_screen();
 800194a:	f000 fe0b 	bl	8002564 <LCD_draw_main_screen>
	standby_state_written_to_LCD = 0;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <show_popup+0x84>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
	sleep_state_written_to_LCD = 0;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <show_popup+0x88>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	0801be00 	.word	0x0801be00
 8001968:	200005e0 	.word	0x200005e0
 800196c:	200005df 	.word	0x200005df

08001970 <settings_menue>:

void settings_menue(){
 8001970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001974:	b08d      	sub	sp, #52	; 0x34
 8001976:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001978:	2120      	movs	r1, #32
 800197a:	48c1      	ldr	r0, [pc, #772]	; (8001c80 <settings_menue+0x310>)
 800197c:	f008 f86a 	bl	8009a54 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 82cb 	bne.w	8001f1e <settings_menue+0x5ae>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001988:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800198c:	f7ff fd9c 	bl	80014c8 <RGB_to_BRG>
 8001990:	4603      	mov	r3, r0
 8001992:	461c      	mov	r4, r3
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fd97 	bl	80014c8 <RGB_to_BRG>
 800199a:	4603      	mov	r3, r0
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9400      	str	r4, [sp, #0]
 80019a0:	4bb8      	ldr	r3, [pc, #736]	; (8001c84 <settings_menue+0x314>)
 80019a2:	4ab9      	ldr	r2, [pc, #740]	; (8001c88 <settings_menue+0x318>)
 80019a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019a8:	2000      	movs	r0, #0
 80019aa:	f004 fa03 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019ae:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019b2:	f7ff fd89 	bl	80014c8 <RGB_to_BRG>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461c      	mov	r4, r3
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fd84 	bl	80014c8 <RGB_to_BRG>
 80019c0:	4603      	mov	r3, r0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	9400      	str	r4, [sp, #0]
 80019c6:	4baf      	ldr	r3, [pc, #700]	; (8001c84 <settings_menue+0x314>)
 80019c8:	4ab0      	ldr	r2, [pc, #704]	; (8001c8c <settings_menue+0x31c>)
 80019ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ce:	2096      	movs	r0, #150	; 0x96
 80019d0:	f004 f9f0 	bl	8005db4 <LCD_PutStr>

		TIM2->CNT = 1000;
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80019f8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80019fc:	f7ff fd64 	bl	80014c8 <RGB_to_BRG>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461c      	mov	r4, r3
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fd5f 	bl	80014c8 <RGB_to_BRG>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	9400      	str	r4, [sp, #0]
 8001a10:	4b9c      	ldr	r3, [pc, #624]	; (8001c84 <settings_menue+0x314>)
 8001a12:	4a9f      	ldr	r2, [pc, #636]	; (8001c90 <settings_menue+0x320>)
 8001a14:	210c      	movs	r1, #12
 8001a16:	203c      	movs	r0, #60	; 0x3c
 8001a18:	f004 f9cc 	bl	8005db4 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001a1c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a20:	f7ff fd52 	bl	80014c8 <RGB_to_BRG>
 8001a24:	4603      	mov	r3, r0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2328      	movs	r3, #40	; 0x28
 8001a2a:	22f0      	movs	r2, #240	; 0xf0
 8001a2c:	2128      	movs	r1, #40	; 0x28
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f004 f982 	bl	8005d38 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001a34:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a38:	f7ff fd46 	bl	80014c8 <RGB_to_BRG>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2329      	movs	r3, #41	; 0x29
 8001a42:	22f0      	movs	r2, #240	; 0xf0
 8001a44:	2129      	movs	r1, #41	; 0x29
 8001a46:	2000      	movs	r0, #0
 8001a48:	f004 f976 	bl	8005d38 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001a4c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a50:	f7ff fd3a 	bl	80014c8 <RGB_to_BRG>
 8001a54:	4603      	mov	r3, r0
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	232a      	movs	r3, #42	; 0x2a
 8001a5a:	22f0      	movs	r2, #240	; 0xf0
 8001a5c:	212a      	movs	r1, #42	; 0x2a
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f004 f96a 	bl	8005d38 <LCD_DrawLine>

		HAL_Delay(500);
 8001a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a68:	f004 fabe 	bl	8005fe8 <HAL_Delay>
		while(menu_active == 1){
 8001a6c:	e253      	b.n	8001f16 <settings_menue+0x5a6>
			if(menue_level == 0){
 8001a6e:	8c3b      	ldrh	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d120      	bne.n	8001ab6 <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd6a 	bl	8000554 <__aeabi_ui2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8001c68 <settings_menue+0x2f8>
 8001a88:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001c70 <settings_menue+0x300>
 8001a8c:	ec43 2b10 	vmov	d0, r2, r3
 8001a90:	f7ff fc50 	bl	8001334 <clamp>
 8001a94:	ec53 2b10 	vmov	r2, r3, d0
 8001a98:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f8aa 	bl	8000bf8 <__aeabi_d2uiz>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001ab6:	8c3b      	ldrh	r3, [r7, #32]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8091 	bne.w	8001be0 <settings_menue+0x270>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001abe:	69b8      	ldr	r0, [r7, #24]
 8001ac0:	f7fe fd6a 	bl	8000598 <__aeabi_f2d>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460d      	mov	r5, r1
 8001ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd40 	bl	8000554 <__aeabi_ui2d>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <settings_menue+0x324>)
 8001ada:	f7fe fbfd 	bl	80002d8 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f8a7 	bl	8000c38 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd53 	bl	8000598 <__aeabi_f2d>
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afa:	f7fe fecf 	bl	800089c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fbe9 	bl	80002dc <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fd3a 	bl	8000598 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001b2a:	00c9      	lsls	r1, r1, #3
 8001b2c:	485a      	ldr	r0, [pc, #360]	; (8001c98 <settings_menue+0x328>)
 8001b2e:	180c      	adds	r4, r1, r0
 8001b30:	4640      	mov	r0, r8
 8001b32:	4649      	mov	r1, r9
 8001b34:	f7fe fbd0 	bl	80002d8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d002      	beq.n	8001b4c <settings_menue+0x1dc>
 8001b46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d12c      	bne.n	8001ba6 <settings_menue+0x236>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001b4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <settings_menue+0x328>)
 8001b52:	4413      	add	r3, r2
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f824 	bl	8000ba8 <__aeabi_d2iz>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bfb8      	it	lt
 8001b66:	425b      	neglt	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fd03 	bl	8000574 <__aeabi_i2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001c78 <settings_menue+0x308>
 8001b76:	ec43 2b10 	vmov	d0, r2, r3
 8001b7a:	f018 fe9d 	bl	801a8b8 <fmod>
 8001b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b82:	eef0 7a60 	vmov.f32	s15, s1
 8001b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <settings_menue+0x328>)
 8001b8c:	189c      	adds	r4, r3, r2
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	eef0 0a67 	vmov.f32	s1, s15
 8001b96:	f018 febd 	bl	801a914 <round>
 8001b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b9e:	eef0 7a60 	vmov.f32	s15, s1
 8001ba2:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001ba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d019      	beq.n	8001be0 <settings_menue+0x270>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4a39      	ldr	r2, [pc, #228]	; (8001c98 <settings_menue+0x328>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7fe fff4 	bl	8000ba8 <__aeabi_d2iz>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bc6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4932      	ldr	r1, [pc, #200]	; (8001c98 <settings_menue+0x328>)
 8001bd0:	185c      	adds	r4, r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f7fe fcce 	bl	8000574 <__aeabi_i2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001be0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be2:	2b0b      	cmp	r3, #11
 8001be4:	d906      	bls.n	8001bf4 <settings_menue+0x284>
							menu_cursor_position = menu_length-1;
 8001be6:	230b      	movs	r3, #11
 8001be8:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 8001bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d903      	bls.n	8001c02 <settings_menue+0x292>
				menue_start = menu_cursor_position-7;
 8001bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bfc:	3b07      	subs	r3, #7
 8001bfe:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c00:	e001      	b.n	8001c06 <settings_menue+0x296>
			}
			else{
				menue_start = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001c06:	2120      	movs	r1, #32
 8001c08:	481d      	ldr	r0, [pc, #116]	; (8001c80 <settings_menue+0x310>)
 8001c0a:	f007 ff23 	bl	8009a54 <HAL_GPIO_ReadPin>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d143      	bne.n	8001c9c <settings_menue+0x32c>
 8001c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d840      	bhi.n	8001c9c <settings_menue+0x32c>
				if(menue_level == 0){
 8001c1a:	8c3b      	ldrh	r3, [r7, #32]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <settings_menue+0x2cc>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <settings_menue+0x328>)
 8001c26:	4413      	add	r3, r2
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7ff f802 	bl	8000c38 <__aeabi_d2f>
 8001c34:	4603      	mov	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001c3c:	8c3b      	ldrh	r3, [r7, #32]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d106      	bne.n	8001c50 <settings_menue+0x2e0>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c48:	005a      	lsls	r2, r3, #1
 8001c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001c50:	8c3b      	ldrh	r3, [r7, #32]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bfb8      	it	lt
 8001c58:	425b      	neglt	r3, r3
 8001c5a:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001c5c:	20c8      	movs	r0, #200	; 0xc8
 8001c5e:	f004 f9c3 	bl	8005fe8 <HAL_Delay>
 8001c62:	e04a      	b.n	8001cfa <settings_menue+0x38a>
 8001c64:	f3af 8000 	nop.w
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	412e8480 	.word	0x412e8480
 8001c70:	00000000 	.word	0x00000000
 8001c74:	408f4000 	.word	0x408f4000
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	40000000 	.word	0x40000000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	0801be00 	.word	0x0801be00
 8001c88:	0801abd8 	.word	0x0801abd8
 8001c8c:	0801abe4 	.word	0x0801abe4
 8001c90:	0801abec 	.word	0x0801abec
 8001c94:	408f4000 	.word	0x408f4000
 8001c98:	200006a8 	.word	0x200006a8
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	48a4      	ldr	r0, [pc, #656]	; (8001f30 <settings_menue+0x5c0>)
 8001ca0:	f007 fed8 	bl	8009a54 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d105      	bne.n	8001cb6 <settings_menue+0x346>
 8001caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	d102      	bne.n	8001cb6 <settings_menue+0x346>
				menu_active = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	83fb      	strh	r3, [r7, #30]
 8001cb4:	e021      	b.n	8001cfa <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	489d      	ldr	r0, [pc, #628]	; (8001f30 <settings_menue+0x5c0>)
 8001cba:	f007 fecb 	bl	8009a54 <HAL_GPIO_ReadPin>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d108      	bne.n	8001cd6 <settings_menue+0x366>
 8001cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d105      	bne.n	8001cd6 <settings_menue+0x366>
				menu_active = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001cce:	4899      	ldr	r0, [pc, #612]	; (8001f34 <settings_menue+0x5c4>)
 8001cd0:	f7ff fa68 	bl	80011a4 <FlashWrite>
 8001cd4:	e011      	b.n	8001cfa <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	4895      	ldr	r0, [pc, #596]	; (8001f30 <settings_menue+0x5c0>)
 8001cda:	f007 febb 	bl	8009a54 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10a      	bne.n	8001cfa <settings_menue+0x38a>
 8001ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ce6:	2b09      	cmp	r3, #9
 8001ce8:	d107      	bne.n	8001cfa <settings_menue+0x38a>
				flash_values = default_flash_values;
 8001cea:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <settings_menue+0x5c4>)
 8001cec:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <settings_menue+0x5c8>)
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2348      	movs	r3, #72	; 0x48
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f015 fa24 	bl	8017142 <memcpy>
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e104      	b.n	8001f0a <settings_menue+0x59a>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001d00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d12b      	bne.n	8001d60 <settings_menue+0x3f0>
 8001d08:	8c3b      	ldrh	r3, [r7, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d128      	bne.n	8001d60 <settings_menue+0x3f0>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	0091      	lsls	r1, r2, #2
 8001d20:	461a      	mov	r2, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	332d      	adds	r3, #45	; 0x2d
 8001d2a:	b29c      	uxth	r4, r3
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a81      	ldr	r2, [pc, #516]	; (8001f3c <settings_menue+0x5cc>)
 8001d38:	189d      	adds	r5, r3, r2
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fbc4 	bl	80014c8 <RGB_to_BRG>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461e      	mov	r6, r3
 8001d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d48:	f7ff fbbe 	bl	80014c8 <RGB_to_BRG>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	9600      	str	r6, [sp, #0]
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <settings_menue+0x5d0>)
 8001d54:	462a      	mov	r2, r5
 8001d56:	4621      	mov	r1, r4
 8001d58:	2005      	movs	r0, #5
 8001d5a:	f004 f82b 	bl	8005db4 <LCD_PutStr>
 8001d5e:	e027      	b.n	8001db0 <settings_menue+0x440>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	0091      	lsls	r1, r2, #2
 8001d72:	461a      	mov	r2, r3
 8001d74:	460b      	mov	r3, r1
 8001d76:	4413      	add	r3, r2
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	332d      	adds	r3, #45	; 0x2d
 8001d7c:	b29c      	uxth	r4, r3
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4a6c      	ldr	r2, [pc, #432]	; (8001f3c <settings_menue+0x5cc>)
 8001d8a:	189d      	adds	r5, r3, r2
 8001d8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d90:	f7ff fb9a 	bl	80014c8 <RGB_to_BRG>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461e      	mov	r6, r3
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fb95 	bl	80014c8 <RGB_to_BRG>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	9600      	str	r6, [sp, #0]
 8001da4:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <settings_menue+0x5d0>)
 8001da6:	462a      	mov	r2, r5
 8001da8:	4621      	mov	r1, r4
 8001daa:	2005      	movs	r0, #5
 8001dac:	f004 f802 	bl	8005db4 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001db0:	463b      	mov	r3, r7
 8001db2:	2214      	movs	r2, #20
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f015 f943 	bl	8017042 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4a5c      	ldr	r2, [pc, #368]	; (8001f34 <settings_menue+0x5c4>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	4638      	mov	r0, r7
 8001dca:	495e      	ldr	r1, [pc, #376]	; (8001f44 <settings_menue+0x5d4>)
 8001dcc:	f015 f8d6 	bl	8016f7c <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <settings_menue+0x5c4>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <settings_menue+0x5d8>)
 8001de2:	f7fe fea3 	bl	8000b2c <__aeabi_dcmplt>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <settings_menue+0x48e>
					str[1] = 32;
 8001dec:	2320      	movs	r3, #32
 8001dee:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001df0:	2320      	movs	r3, #32
 8001df2:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001df4:	2320      	movs	r3, #32
 8001df6:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	713b      	strb	r3, [r7, #4]
 8001dfc:	e011      	b.n	8001e22 <settings_menue+0x4b2>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4a4c      	ldr	r2, [pc, #304]	; (8001f34 <settings_menue+0x5c4>)
 8001e04:	4413      	add	r3, r2
 8001e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0a:	a347      	add	r3, pc, #284	; (adr r3, 8001f28 <settings_menue+0x5b8>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fe8c 	bl	8000b2c <__aeabi_dcmplt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <settings_menue+0x4b2>
					str[2] = 32;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	dc49      	bgt.n	8001ebc <settings_menue+0x54c>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d124      	bne.n	8001e7a <settings_menue+0x50a>
 8001e30:	8c3b      	ldrh	r3, [r7, #32]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d121      	bne.n	8001e7a <settings_menue+0x50a>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001e36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	0091      	lsls	r1, r2, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	332d      	adds	r3, #45	; 0x2d
 8001e52:	b29c      	uxth	r4, r3
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fb37 	bl	80014c8 <RGB_to_BRG>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e62:	f7ff fb31 	bl	80014c8 <RGB_to_BRG>
 8001e66:	4603      	mov	r3, r0
 8001e68:	463a      	mov	r2, r7
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	9500      	str	r5, [sp, #0]
 8001e6e:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <settings_menue+0x5d0>)
 8001e70:	4621      	mov	r1, r4
 8001e72:	20c8      	movs	r0, #200	; 0xc8
 8001e74:	f003 ff9e 	bl	8005db4 <LCD_PutStr>
 8001e78:	e020      	b.n	8001ebc <settings_menue+0x54c>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	0091      	lsls	r1, r2, #2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4413      	add	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	332d      	adds	r3, #45	; 0x2d
 8001e96:	b29c      	uxth	r4, r3
 8001e98:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e9c:	f7ff fb14 	bl	80014c8 <RGB_to_BRG>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fb0f 	bl	80014c8 <RGB_to_BRG>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	463a      	mov	r2, r7
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	9500      	str	r5, [sp, #0]
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <settings_menue+0x5d0>)
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	20c8      	movs	r0, #200	; 0xc8
 8001eb8:	f003 ff7c 	bl	8005db4 <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	dd20      	ble.n	8001f04 <settings_menue+0x594>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	0091      	lsls	r1, r2, #2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4413      	add	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	332d      	adds	r3, #45	; 0x2d
 8001ede:	b29c      	uxth	r4, r3
 8001ee0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ee4:	f7ff faf0 	bl	80014c8 <RGB_to_BRG>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461d      	mov	r5, r3
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff faeb 	bl	80014c8 <RGB_to_BRG>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	9500      	str	r5, [sp, #0]
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <settings_menue+0x5d0>)
 8001efa:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <settings_menue+0x5dc>)
 8001efc:	4621      	mov	r1, r4
 8001efe:	20c8      	movs	r0, #200	; 0xc8
 8001f00:	f003 ff58 	bl	8005db4 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f0c:	3307      	adds	r3, #7
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	f77f aef5 	ble.w	8001d00 <settings_menue+0x390>
		while(menu_active == 1){
 8001f16:	8bfb      	ldrh	r3, [r7, #30]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f43f ada8 	beq.w	8001a6e <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001f1e:	bf00      	nop
 8001f20:	372c      	adds	r7, #44	; 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	4058e000 	.word	0x4058e000
 8001f30:	48000400 	.word	0x48000400
 8001f34:	200006a8 	.word	0x200006a8
 8001f38:	20000088 	.word	0x20000088
 8001f3c:	200000d0 	.word	0x200000d0
 8001f40:	0801be00 	.word	0x0801be00
 8001f44:	0801abf8 	.word	0x0801abf8
 8001f48:	40230000 	.word	0x40230000
 8001f4c:	0801ac00 	.word	0x0801ac00

08001f50 <update_display>:

void update_display(){
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001f56:	2228      	movs	r2, #40	; 0x28
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4879      	ldr	r0, [pc, #484]	; (8002140 <update_display+0x1f0>)
 8001f5c:	f015 f871 	bl	8017042 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001f60:	4b78      	ldr	r3, [pc, #480]	; (8002144 <update_display+0x1f4>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	4978      	ldr	r1, [pc, #480]	; (8002148 <update_display+0x1f8>)
 8001f68:	4875      	ldr	r0, [pc, #468]	; (8002140 <update_display+0x1f0>)
 8001f6a:	f015 f807 	bl	8016f7c <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001f6e:	4b75      	ldr	r3, [pc, #468]	; (8002144 <update_display+0x1f4>)
 8001f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f74:	a370      	add	r3, pc, #448	; (adr r3, 8002138 <update_display+0x1e8>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fdd7 	bl	8000b2c <__aeabi_dcmplt>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <update_display+0x40>
		buffer[2] = 32;
 8001f84:	4b6e      	ldr	r3, [pc, #440]	; (8002140 <update_display+0x1f0>)
 8001f86:	2220      	movs	r2, #32
 8001f88:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <update_display+0x1f0>)
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f94:	f7ff fa98 	bl	80014c8 <RGB_to_BRG>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461c      	mov	r4, r3
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fa93 	bl	80014c8 <RGB_to_BRG>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	9400      	str	r4, [sp, #0]
 8001fa8:	4b68      	ldr	r3, [pc, #416]	; (800214c <update_display+0x1fc>)
 8001faa:	4a65      	ldr	r2, [pc, #404]	; (8002140 <update_display+0x1f0>)
 8001fac:	214b      	movs	r1, #75	; 0x4b
 8001fae:	200e      	movs	r0, #14
 8001fb0:	f003 ff00 	bl	8005db4 <LCD_PutStr>

	if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 8001fb4:	4b63      	ldr	r3, [pc, #396]	; (8002144 <update_display+0x1f4>)
 8001fb6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	d512      	bpl.n	8001fee <update_display+0x9e>
	  	LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001fc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fcc:	f7ff fa7c 	bl	80014c8 <RGB_to_BRG>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fa77 	bl	80014c8 <RGB_to_BRG>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9400      	str	r4, [sp, #0]
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <update_display+0x1fc>)
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <update_display+0x200>)
 8001fe4:	21a5      	movs	r1, #165	; 0xa5
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	f003 fee4 	bl	8005db4 <LCD_PutStr>
 8001fec:	e02e      	b.n	800204c <update_display+0xfc>
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8001fee:	2228      	movs	r2, #40	; 0x28
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4853      	ldr	r0, [pc, #332]	; (8002140 <update_display+0x1f0>)
 8001ff4:	f015 f825 	bl	8017042 <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <update_display+0x1f4>)
 8001ffa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ffe:	4952      	ldr	r1, [pc, #328]	; (8002148 <update_display+0x1f8>)
 8002000:	484f      	ldr	r0, [pc, #316]	; (8002140 <update_display+0x1f0>)
 8002002:	f014 ffbb 	bl	8016f7c <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 8002006:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <update_display+0x1f4>)
 8002008:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800200c:	a34a      	add	r3, pc, #296	; (adr r3, 8002138 <update_display+0x1e8>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe fd8b 	bl	8000b2c <__aeabi_dcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <update_display+0xd8>
			buffer[2] = 32;
 800201c:	4b48      	ldr	r3, [pc, #288]	; (8002140 <update_display+0x1f0>)
 800201e:	2220      	movs	r2, #32
 8002020:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <update_display+0x1f0>)
 8002024:	2220      	movs	r2, #32
 8002026:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002028:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800202c:	f7ff fa4c 	bl	80014c8 <RGB_to_BRG>
 8002030:	4603      	mov	r3, r0
 8002032:	461c      	mov	r4, r3
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fa47 	bl	80014c8 <RGB_to_BRG>
 800203a:	4603      	mov	r3, r0
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9400      	str	r4, [sp, #0]
 8002040:	4b42      	ldr	r3, [pc, #264]	; (800214c <update_display+0x1fc>)
 8002042:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <update_display+0x1f0>)
 8002044:	21a5      	movs	r1, #165	; 0xa5
 8002046:	200e      	movs	r0, #14
 8002048:	f003 feb4 	bl	8005db4 <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 800204c:	2228      	movs	r2, #40	; 0x28
 800204e:	2100      	movs	r1, #0
 8002050:	483b      	ldr	r0, [pc, #236]	; (8002140 <update_display+0x1f0>)
 8002052:	f014 fff6 	bl	8017042 <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <update_display+0x1f4>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa9c 	bl	8000598 <__aeabi_f2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	493b      	ldr	r1, [pc, #236]	; (8002154 <update_display+0x204>)
 8002066:	4836      	ldr	r0, [pc, #216]	; (8002140 <update_display+0x1f0>)
 8002068:	f014 ff88 	bl	8016f7c <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800206c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002070:	f7ff fa2a 	bl	80014c8 <RGB_to_BRG>
 8002074:	4603      	mov	r3, r0
 8002076:	461c      	mov	r4, r3
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fa25 	bl	80014c8 <RGB_to_BRG>
 800207e:	4603      	mov	r3, r0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	9400      	str	r4, [sp, #0]
 8002084:	4b34      	ldr	r3, [pc, #208]	; (8002158 <update_display+0x208>)
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <update_display+0x1f0>)
 8002088:	21ff      	movs	r1, #255	; 0xff
 800208a:	2064      	movs	r0, #100	; 0x64
 800208c:	f003 fe92 	bl	8005db4 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8002090:	2228      	movs	r2, #40	; 0x28
 8002092:	2100      	movs	r1, #0
 8002094:	482a      	ldr	r0, [pc, #168]	; (8002140 <update_display+0x1f0>)
 8002096:	f014 ffd4 	bl	8017042 <memset>
	sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <update_display+0x1f4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa7a 	bl	8000598 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	492a      	ldr	r1, [pc, #168]	; (8002154 <update_display+0x204>)
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <update_display+0x1f0>)
 80020ac:	f014 ff66 	bl	8016f7c <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020b4:	f7ff fa08 	bl	80014c8 <RGB_to_BRG>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461c      	mov	r4, r3
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fa03 	bl	80014c8 <RGB_to_BRG>
 80020c2:	4603      	mov	r3, r0
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	9400      	str	r4, [sp, #0]
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <update_display+0x208>)
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <update_display+0x1f0>)
 80020cc:	f240 1113 	movw	r1, #275	; 0x113
 80020d0:	2064      	movs	r0, #100	; 0x64
 80020d2:	f003 fe6f 	bl	8005db4 <LCD_PutStr>

	if(handle == T210){
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <update_display+0x20c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d112      	bne.n	8002104 <update_display+0x1b4>
		LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020e2:	f7ff f9f1 	bl	80014c8 <RGB_to_BRG>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461c      	mov	r4, r3
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff f9ec 	bl	80014c8 <RGB_to_BRG>
 80020f0:	4603      	mov	r3, r0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	9400      	str	r4, [sp, #0]
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <update_display+0x208>)
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <update_display+0x210>)
 80020fa:	21eb      	movs	r1, #235	; 0xeb
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	f003 fe59 	bl	8005db4 <LCD_PutStr>
 8002102:	e047      	b.n	8002194 <update_display+0x244>
	}
	else if(handle == T245){
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <update_display+0x20c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d12d      	bne.n	8002168 <update_display+0x218>
		LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800210c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002110:	f7ff f9da 	bl	80014c8 <RGB_to_BRG>
 8002114:	4603      	mov	r3, r0
 8002116:	461c      	mov	r4, r3
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff f9d5 	bl	80014c8 <RGB_to_BRG>
 800211e:	4603      	mov	r3, r0
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	9400      	str	r4, [sp, #0]
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <update_display+0x208>)
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <update_display+0x214>)
 8002128:	21eb      	movs	r1, #235	; 0xeb
 800212a:	2064      	movs	r0, #100	; 0x64
 800212c:	f003 fe42 	bl	8005db4 <LCD_PutStr>
 8002130:	e030      	b.n	8002194 <update_display+0x244>
 8002132:	bf00      	nop
 8002134:	f3af 8000 	nop.w
 8002138:	00000000 	.word	0x00000000
 800213c:	4058e000 	.word	0x4058e000
 8002140:	20000600 	.word	0x20000600
 8002144:	20000038 	.word	0x20000038
 8002148:	0801ac08 	.word	0x0801ac08
 800214c:	0801cdf0 	.word	0x0801cdf0
 8002150:	0801ac0c 	.word	0x0801ac0c
 8002154:	0801ac14 	.word	0x0801ac14
 8002158:	0801ae30 	.word	0x0801ae30
 800215c:	200005b8 	.word	0x200005b8
 8002160:	0801ac1c 	.word	0x0801ac1c
 8002164:	0801ac24 	.word	0x0801ac24
	}
	else if(handle == NT115){
 8002168:	4bab      	ldr	r3, [pc, #684]	; (8002418 <update_display+0x4c8>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <update_display+0x244>
		LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002170:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002174:	f7ff f9a8 	bl	80014c8 <RGB_to_BRG>
 8002178:	4603      	mov	r3, r0
 800217a:	461c      	mov	r4, r3
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff f9a3 	bl	80014c8 <RGB_to_BRG>
 8002182:	4603      	mov	r3, r0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	9400      	str	r4, [sp, #0]
 8002188:	4ba4      	ldr	r3, [pc, #656]	; (800241c <update_display+0x4cc>)
 800218a:	4aa5      	ldr	r2, [pc, #660]	; (8002420 <update_display+0x4d0>)
 800218c:	21eb      	movs	r1, #235	; 0xeb
 800218e:	2064      	movs	r0, #100	; 0x64
 8002190:	f003 fe10 	bl	8005db4 <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002194:	4ba3      	ldr	r3, [pc, #652]	; (8002424 <update_display+0x4d4>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d008      	beq.n	80021ae <update_display+0x25e>
 800219c:	4ba1      	ldr	r3, [pc, #644]	; (8002424 <update_display+0x4d4>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d004      	beq.n	80021ae <update_display+0x25e>
 80021a4:	4b9f      	ldr	r3, [pc, #636]	; (8002424 <update_display+0x4d4>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	f040 8098 	bne.w	80022de <update_display+0x38e>
 80021ae:	4b9e      	ldr	r3, [pc, #632]	; (8002428 <update_display+0x4d8>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 8093 	bne.w	80022de <update_display+0x38e>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 80021b8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021bc:	f7ff f984 	bl	80014c8 <RGB_to_BRG>
 80021c0:	4603      	mov	r3, r0
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80021c8:	22e6      	movs	r2, #230	; 0xe6
 80021ca:	2137      	movs	r1, #55	; 0x37
 80021cc:	20d2      	movs	r0, #210	; 0xd2
 80021ce:	f010 f841 	bl	8012254 <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff f978 	bl	80014c8 <RGB_to_BRG>
 80021d8:	4603      	mov	r3, r0
 80021da:	461c      	mov	r4, r3
 80021dc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021e0:	f7ff f972 	bl	80014c8 <RGB_to_BRG>
 80021e4:	4603      	mov	r3, r0
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	9400      	str	r4, [sp, #0]
 80021ea:	4b90      	ldr	r3, [pc, #576]	; (800242c <update_display+0x4dc>)
 80021ec:	4a90      	ldr	r2, [pc, #576]	; (8002430 <update_display+0x4e0>)
 80021ee:	213a      	movs	r1, #58	; 0x3a
 80021f0:	20d6      	movs	r0, #214	; 0xd6
 80021f2:	f003 fddf 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff f966 	bl	80014c8 <RGB_to_BRG>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461c      	mov	r4, r3
 8002200:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002204:	f7ff f960 	bl	80014c8 <RGB_to_BRG>
 8002208:	4603      	mov	r3, r0
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	9400      	str	r4, [sp, #0]
 800220e:	4b87      	ldr	r3, [pc, #540]	; (800242c <update_display+0x4dc>)
 8002210:	4a88      	ldr	r2, [pc, #544]	; (8002434 <update_display+0x4e4>)
 8002212:	215c      	movs	r1, #92	; 0x5c
 8002214:	20d8      	movs	r0, #216	; 0xd8
 8002216:	f003 fdcd 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff f954 	bl	80014c8 <RGB_to_BRG>
 8002220:	4603      	mov	r3, r0
 8002222:	461c      	mov	r4, r3
 8002224:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002228:	f7ff f94e 	bl	80014c8 <RGB_to_BRG>
 800222c:	4603      	mov	r3, r0
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	9400      	str	r4, [sp, #0]
 8002232:	4b7e      	ldr	r3, [pc, #504]	; (800242c <update_display+0x4dc>)
 8002234:	4a7e      	ldr	r2, [pc, #504]	; (8002430 <update_display+0x4e0>)
 8002236:	217e      	movs	r1, #126	; 0x7e
 8002238:	20d6      	movs	r0, #214	; 0xd6
 800223a:	f003 fdbb 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff f942 	bl	80014c8 <RGB_to_BRG>
 8002244:	4603      	mov	r3, r0
 8002246:	461c      	mov	r4, r3
 8002248:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800224c:	f7ff f93c 	bl	80014c8 <RGB_to_BRG>
 8002250:	4603      	mov	r3, r0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9400      	str	r4, [sp, #0]
 8002256:	4b75      	ldr	r3, [pc, #468]	; (800242c <update_display+0x4dc>)
 8002258:	4a76      	ldr	r2, [pc, #472]	; (8002434 <update_display+0x4e4>)
 800225a:	21a1      	movs	r1, #161	; 0xa1
 800225c:	20d8      	movs	r0, #216	; 0xd8
 800225e:	f003 fda9 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff f930 	bl	80014c8 <RGB_to_BRG>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002270:	f7ff f92a 	bl	80014c8 <RGB_to_BRG>
 8002274:	4603      	mov	r3, r0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9400      	str	r4, [sp, #0]
 800227a:	4b6c      	ldr	r3, [pc, #432]	; (800242c <update_display+0x4dc>)
 800227c:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <update_display+0x4e0>)
 800227e:	21c2      	movs	r1, #194	; 0xc2
 8002280:	20d6      	movs	r0, #214	; 0xd6
 8002282:	f003 fd97 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff f91e 	bl	80014c8 <RGB_to_BRG>
 800228c:	4603      	mov	r3, r0
 800228e:	461c      	mov	r4, r3
 8002290:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002294:	f7ff f918 	bl	80014c8 <RGB_to_BRG>
 8002298:	4603      	mov	r3, r0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	9400      	str	r4, [sp, #0]
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <update_display+0x4dc>)
 80022a0:	4a64      	ldr	r2, [pc, #400]	; (8002434 <update_display+0x4e4>)
 80022a2:	21e4      	movs	r1, #228	; 0xe4
 80022a4:	20d8      	movs	r0, #216	; 0xd8
 80022a6:	f003 fd85 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff f90c 	bl	80014c8 <RGB_to_BRG>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b8:	f7ff f906 	bl	80014c8 <RGB_to_BRG>
 80022bc:	4603      	mov	r3, r0
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	9400      	str	r4, [sp, #0]
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <update_display+0x4dc>)
 80022c4:	4a5a      	ldr	r2, [pc, #360]	; (8002430 <update_display+0x4e0>)
 80022c6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80022ca:	20d6      	movs	r0, #214	; 0xd6
 80022cc:	f003 fd72 	bl	8005db4 <LCD_PutStr>
		sleep_state_written_to_LCD = 1;
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <update_display+0x4d8>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
		standby_state_written_to_LCD = 0;
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <update_display+0x4e8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e128      	b.n	8002530 <update_display+0x5e0>
	}
	else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 80022de:	4b51      	ldr	r3, [pc, #324]	; (8002424 <update_display+0x4d4>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f040 80b8 	bne.w	8002458 <update_display+0x508>
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <update_display+0x4e8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 80b3 	bne.w	8002458 <update_display+0x508>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 80022f2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022f6:	f7ff f8e7 	bl	80014c8 <RGB_to_BRG>
 80022fa:	4603      	mov	r3, r0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002302:	22e6      	movs	r2, #230	; 0xe6
 8002304:	2137      	movs	r1, #55	; 0x37
 8002306:	20d2      	movs	r0, #210	; 0xd2
 8002308:	f00f ffa4 	bl	8012254 <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f8db 	bl	80014c8 <RGB_to_BRG>
 8002312:	4603      	mov	r3, r0
 8002314:	461c      	mov	r4, r3
 8002316:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800231a:	f7ff f8d5 	bl	80014c8 <RGB_to_BRG>
 800231e:	4603      	mov	r3, r0
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	9400      	str	r4, [sp, #0]
 8002324:	4b41      	ldr	r3, [pc, #260]	; (800242c <update_display+0x4dc>)
 8002326:	4a45      	ldr	r2, [pc, #276]	; (800243c <update_display+0x4ec>)
 8002328:	213a      	movs	r1, #58	; 0x3a
 800232a:	20d6      	movs	r0, #214	; 0xd6
 800232c:	f003 fd42 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff f8c9 	bl	80014c8 <RGB_to_BRG>
 8002336:	4603      	mov	r3, r0
 8002338:	461c      	mov	r4, r3
 800233a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800233e:	f7ff f8c3 	bl	80014c8 <RGB_to_BRG>
 8002342:	4603      	mov	r3, r0
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	9400      	str	r4, [sp, #0]
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <update_display+0x4dc>)
 800234a:	4a3d      	ldr	r2, [pc, #244]	; (8002440 <update_display+0x4f0>)
 800234c:	215c      	movs	r1, #92	; 0x5c
 800234e:	20d6      	movs	r0, #214	; 0xd6
 8002350:	f003 fd30 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff f8b7 	bl	80014c8 <RGB_to_BRG>
 800235a:	4603      	mov	r3, r0
 800235c:	461c      	mov	r4, r3
 800235e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002362:	f7ff f8b1 	bl	80014c8 <RGB_to_BRG>
 8002366:	4603      	mov	r3, r0
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <update_display+0x4dc>)
 800236e:	4a35      	ldr	r2, [pc, #212]	; (8002444 <update_display+0x4f4>)
 8002370:	217e      	movs	r1, #126	; 0x7e
 8002372:	20d6      	movs	r0, #214	; 0xd6
 8002374:	f003 fd1e 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff f8a5 	bl	80014c8 <RGB_to_BRG>
 800237e:	4603      	mov	r3, r0
 8002380:	461c      	mov	r4, r3
 8002382:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002386:	f7ff f89f 	bl	80014c8 <RGB_to_BRG>
 800238a:	4603      	mov	r3, r0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9400      	str	r4, [sp, #0]
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <update_display+0x4dc>)
 8002392:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <update_display+0x4f8>)
 8002394:	21a1      	movs	r1, #161	; 0xa1
 8002396:	20d6      	movs	r0, #214	; 0xd6
 8002398:	f003 fd0c 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff f893 	bl	80014c8 <RGB_to_BRG>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461c      	mov	r4, r3
 80023a6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023aa:	f7ff f88d 	bl	80014c8 <RGB_to_BRG>
 80023ae:	4603      	mov	r3, r0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <update_display+0x4dc>)
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <update_display+0x4fc>)
 80023b8:	21c2      	movs	r1, #194	; 0xc2
 80023ba:	20d6      	movs	r0, #214	; 0xd6
 80023bc:	f003 fcfa 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff f881 	bl	80014c8 <RGB_to_BRG>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461c      	mov	r4, r3
 80023ca:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ce:	f7ff f87b 	bl	80014c8 <RGB_to_BRG>
 80023d2:	4603      	mov	r3, r0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9400      	str	r4, [sp, #0]
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <update_display+0x4dc>)
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <update_display+0x500>)
 80023dc:	21e4      	movs	r1, #228	; 0xe4
 80023de:	20d6      	movs	r0, #214	; 0xd6
 80023e0:	f003 fce8 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff f86f 	bl	80014c8 <RGB_to_BRG>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461c      	mov	r4, r3
 80023ee:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023f2:	f7ff f869 	bl	80014c8 <RGB_to_BRG>
 80023f6:	4603      	mov	r3, r0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9400      	str	r4, [sp, #0]
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <update_display+0x4dc>)
 80023fe:	4a15      	ldr	r2, [pc, #84]	; (8002454 <update_display+0x504>)
 8002400:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002404:	20d6      	movs	r0, #214	; 0xd6
 8002406:	f003 fcd5 	bl	8005db4 <LCD_PutStr>
		standby_state_written_to_LCD = 1;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <update_display+0x4e8>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <update_display+0x4d8>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e08b      	b.n	8002530 <update_display+0x5e0>
 8002418:	200005b8 	.word	0x200005b8
 800241c:	0801ae30 	.word	0x0801ae30
 8002420:	0801ac2c 	.word	0x0801ac2c
 8002424:	2000001d 	.word	0x2000001d
 8002428:	200005df 	.word	0x200005df
 800242c:	0801be00 	.word	0x0801be00
 8002430:	0801ac34 	.word	0x0801ac34
 8002434:	0801ac38 	.word	0x0801ac38
 8002438:	200005e0 	.word	0x200005e0
 800243c:	0801ac3c 	.word	0x0801ac3c
 8002440:	0801ac40 	.word	0x0801ac40
 8002444:	0801ac44 	.word	0x0801ac44
 8002448:	0801ac48 	.word	0x0801ac48
 800244c:	0801ac4c 	.word	0x0801ac4c
 8002450:	0801ac50 	.word	0x0801ac50
 8002454:	0801ac54 	.word	0x0801ac54
	}
	else if(active_state == RUN){
 8002458:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <update_display+0x5f8>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d167      	bne.n	8002530 <update_display+0x5e0>
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <update_display+0x5fc>)
 8002462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <update_display+0x600>)
 800246c:	f7fe fa16 	bl	800089c <__aeabi_ddiv>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <update_display+0x604>)
 800247e:	f7fe f8e3 	bl	8000648 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	a12c      	add	r1, pc, #176	; (adr r1, 8002538 <update_display+0x5e8>)
 8002488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800248c:	f7fd ff24 	bl	80002d8 <__aeabi_dsub>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb86 	bl	8000ba8 <__aeabi_d2iz>
 800249c:	4603      	mov	r3, r0
 800249e:	b21c      	sxth	r4, r3
 80024a0:	f248 607e 	movw	r0, #34430	; 0x867e
 80024a4:	f7ff f810 	bl	80014c8 <RGB_to_BRG>
 80024a8:	4603      	mov	r3, r0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f240 131f 	movw	r3, #287	; 0x11f
 80024b0:	22e6      	movs	r2, #230	; 0xe6
 80024b2:	4621      	mov	r1, r4
 80024b4:	20d2      	movs	r0, #210	; 0xd2
 80024b6:	f00f fecd 	bl	8012254 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <update_display+0x5fc>)
 80024bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <update_display+0x600>)
 80024c6:	f7fe f9e9 	bl	800089c <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	a31b      	add	r3, pc, #108	; (adr r3, 8002540 <update_display+0x5f0>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe f8b6 	bl	8000648 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	a115      	add	r1, pc, #84	; (adr r1, 8002538 <update_display+0x5e8>)
 80024e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024e6:	f7fd fef7 	bl	80002d8 <__aeabi_dsub>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <update_display+0x608>)
 80024f8:	f7fd feee 	bl	80002d8 <__aeabi_dsub>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fb50 	bl	8000ba8 <__aeabi_d2iz>
 8002508:	4603      	mov	r3, r0
 800250a:	b21c      	sxth	r4, r3
 800250c:	2000      	movs	r0, #0
 800250e:	f7fe ffdb 	bl	80014c8 <RGB_to_BRG>
 8002512:	4603      	mov	r3, r0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4623      	mov	r3, r4
 8002518:	22e6      	movs	r2, #230	; 0xe6
 800251a:	2137      	movs	r1, #55	; 0x37
 800251c:	20d2      	movs	r0, #210	; 0xd2
 800251e:	f00f fe99 	bl	8012254 <UG_FillFrame>
		standby_state_written_to_LCD = 0;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <update_display+0x60c>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <update_display+0x610>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
	}
}
 800252e:	e7ff      	b.n	8002530 <update_display+0x5e0>
 8002530:	bf00      	nop
 8002532:	3704      	adds	r7, #4
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	00000000 	.word	0x00000000
 800253c:	4071f000 	.word	0x4071f000
 8002540:	00000000 	.word	0x00000000
 8002544:	406ce000 	.word	0x406ce000
 8002548:	2000001d 	.word	0x2000001d
 800254c:	200006f0 	.word	0x200006f0
 8002550:	407f4000 	.word	0x407f4000
 8002554:	406d0000 	.word	0x406d0000
 8002558:	3ff00000 	.word	0x3ff00000
 800255c:	200005e0 	.word	0x200005e0
 8002560:	200005df 	.word	0x200005df

08002564 <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b083      	sub	sp, #12
 8002568:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe ffac 	bl	80014c8 <RGB_to_BRG>
 8002570:	4603      	mov	r3, r0
 8002572:	4618      	mov	r0, r3
 8002574:	f00f fe4a 	bl	801220c <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002578:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800257c:	f7fe ffa4 	bl	80014c8 <RGB_to_BRG>
 8002580:	4603      	mov	r3, r0
 8002582:	461c      	mov	r4, r3
 8002584:	2000      	movs	r0, #0
 8002586:	f7fe ff9f 	bl	80014c8 <RGB_to_BRG>
 800258a:	4603      	mov	r3, r0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	9400      	str	r4, [sp, #0]
 8002590:	4bc3      	ldr	r3, [pc, #780]	; (80028a0 <LCD_draw_main_screen+0x33c>)
 8002592:	4ac4      	ldr	r2, [pc, #784]	; (80028a4 <LCD_draw_main_screen+0x340>)
 8002594:	210c      	movs	r1, #12
 8002596:	2035      	movs	r0, #53	; 0x35
 8002598:	f003 fc0c 	bl	8005db4 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 800259c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025a0:	f7fe ff92 	bl	80014c8 <RGB_to_BRG>
 80025a4:	4603      	mov	r3, r0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2328      	movs	r3, #40	; 0x28
 80025aa:	22f0      	movs	r2, #240	; 0xf0
 80025ac:	2128      	movs	r1, #40	; 0x28
 80025ae:	2000      	movs	r0, #0
 80025b0:	f003 fbc2 	bl	8005d38 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 80025b4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025b8:	f7fe ff86 	bl	80014c8 <RGB_to_BRG>
 80025bc:	4603      	mov	r3, r0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2329      	movs	r3, #41	; 0x29
 80025c2:	22f0      	movs	r2, #240	; 0xf0
 80025c4:	2129      	movs	r1, #41	; 0x29
 80025c6:	2000      	movs	r0, #0
 80025c8:	f003 fbb6 	bl	8005d38 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 80025cc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025d0:	f7fe ff7a 	bl	80014c8 <RGB_to_BRG>
 80025d4:	4603      	mov	r3, r0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	232a      	movs	r3, #42	; 0x2a
 80025da:	22f0      	movs	r2, #240	; 0xf0
 80025dc:	212a      	movs	r1, #42	; 0x2a
 80025de:	2000      	movs	r0, #0
 80025e0:	f003 fbaa 	bl	8005d38 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025e8:	f7fe ff6e 	bl	80014c8 <RGB_to_BRG>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461c      	mov	r4, r3
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe ff69 	bl	80014c8 <RGB_to_BRG>
 80025f6:	4603      	mov	r3, r0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	9400      	str	r4, [sp, #0]
 80025fc:	4baa      	ldr	r3, [pc, #680]	; (80028a8 <LCD_draw_main_screen+0x344>)
 80025fe:	4aab      	ldr	r2, [pc, #684]	; (80028ac <LCD_draw_main_screen+0x348>)
 8002600:	2132      	movs	r1, #50	; 0x32
 8002602:	200e      	movs	r0, #14
 8002604:	f003 fbd6 	bl	8005db4 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002608:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800260c:	f7fe ff5c 	bl	80014c8 <RGB_to_BRG>
 8002610:	4603      	mov	r3, r0
 8002612:	2205      	movs	r2, #5
 8002614:	2155      	movs	r1, #85	; 0x55
 8002616:	2078      	movs	r0, #120	; 0x78
 8002618:	f00f fed6 	bl	80123c8 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 800261c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002620:	f7fe ff52 	bl	80014c8 <RGB_to_BRG>
 8002624:	4603      	mov	r3, r0
 8002626:	2204      	movs	r2, #4
 8002628:	2155      	movs	r1, #85	; 0x55
 800262a:	2078      	movs	r0, #120	; 0x78
 800262c:	f00f fecc 	bl	80123c8 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002630:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002634:	f7fe ff48 	bl	80014c8 <RGB_to_BRG>
 8002638:	4603      	mov	r3, r0
 800263a:	2203      	movs	r2, #3
 800263c:	2155      	movs	r1, #85	; 0x55
 800263e:	2078      	movs	r0, #120	; 0x78
 8002640:	f00f fec2 	bl	80123c8 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002644:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002648:	f7fe ff3e 	bl	80014c8 <RGB_to_BRG>
 800264c:	4603      	mov	r3, r0
 800264e:	461c      	mov	r4, r3
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe ff39 	bl	80014c8 <RGB_to_BRG>
 8002656:	4603      	mov	r3, r0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	9400      	str	r4, [sp, #0]
 800265c:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <LCD_draw_main_screen+0x34c>)
 800265e:	4a95      	ldr	r2, [pc, #596]	; (80028b4 <LCD_draw_main_screen+0x350>)
 8002660:	214b      	movs	r1, #75	; 0x4b
 8002662:	2082      	movs	r0, #130	; 0x82
 8002664:	f003 fba6 	bl	8005db4 <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002668:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800266c:	f7fe ff2c 	bl	80014c8 <RGB_to_BRG>
 8002670:	4603      	mov	r3, r0
 8002672:	461c      	mov	r4, r3
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe ff27 	bl	80014c8 <RGB_to_BRG>
 800267a:	4603      	mov	r3, r0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	9400      	str	r4, [sp, #0]
 8002680:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <LCD_draw_main_screen+0x344>)
 8002682:	4a8d      	ldr	r2, [pc, #564]	; (80028b8 <LCD_draw_main_screen+0x354>)
 8002684:	218c      	movs	r1, #140	; 0x8c
 8002686:	200e      	movs	r0, #14
 8002688:	f003 fb94 	bl	8005db4 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 800268c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002690:	f7fe ff1a 	bl	80014c8 <RGB_to_BRG>
 8002694:	4603      	mov	r3, r0
 8002696:	2205      	movs	r2, #5
 8002698:	21af      	movs	r1, #175	; 0xaf
 800269a:	2078      	movs	r0, #120	; 0x78
 800269c:	f00f fe94 	bl	80123c8 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 80026a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026a4:	f7fe ff10 	bl	80014c8 <RGB_to_BRG>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2204      	movs	r2, #4
 80026ac:	21af      	movs	r1, #175	; 0xaf
 80026ae:	2078      	movs	r0, #120	; 0x78
 80026b0:	f00f fe8a 	bl	80123c8 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 80026b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026b8:	f7fe ff06 	bl	80014c8 <RGB_to_BRG>
 80026bc:	4603      	mov	r3, r0
 80026be:	2203      	movs	r2, #3
 80026c0:	21af      	movs	r1, #175	; 0xaf
 80026c2:	2078      	movs	r0, #120	; 0x78
 80026c4:	f00f fe80 	bl	80123c8 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026cc:	f7fe fefc 	bl	80014c8 <RGB_to_BRG>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461c      	mov	r4, r3
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fef7 	bl	80014c8 <RGB_to_BRG>
 80026da:	4603      	mov	r3, r0
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	9400      	str	r4, [sp, #0]
 80026e0:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <LCD_draw_main_screen+0x34c>)
 80026e2:	4a74      	ldr	r2, [pc, #464]	; (80028b4 <LCD_draw_main_screen+0x350>)
 80026e4:	21a5      	movs	r1, #165	; 0xa5
 80026e6:	2082      	movs	r0, #130	; 0x82
 80026e8:	f003 fb64 	bl	8005db4 <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 80026ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026f0:	f7fe feea 	bl	80014c8 <RGB_to_BRG>
 80026f4:	4603      	mov	r3, r0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	23dc      	movs	r3, #220	; 0xdc
 80026fa:	22b6      	movs	r2, #182	; 0xb6
 80026fc:	2186      	movs	r1, #134	; 0x86
 80026fe:	2006      	movs	r0, #6
 8002700:	f00f fe1a 	bl	8012338 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002704:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002708:	f7fe fede 	bl	80014c8 <RGB_to_BRG>
 800270c:	4603      	mov	r3, r0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	23dd      	movs	r3, #221	; 0xdd
 8002712:	22b7      	movs	r2, #183	; 0xb7
 8002714:	2185      	movs	r1, #133	; 0x85
 8002716:	2005      	movs	r0, #5
 8002718:	f00f fe0e 	bl	8012338 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800271c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002720:	f7fe fed2 	bl	80014c8 <RGB_to_BRG>
 8002724:	4603      	mov	r3, r0
 8002726:	461c      	mov	r4, r3
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe fecd 	bl	80014c8 <RGB_to_BRG>
 800272e:	4603      	mov	r3, r0
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	9400      	str	r4, [sp, #0]
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <LCD_draw_main_screen+0x358>)
 8002736:	4a62      	ldr	r2, [pc, #392]	; (80028c0 <LCD_draw_main_screen+0x35c>)
 8002738:	21eb      	movs	r1, #235	; 0xeb
 800273a:	2006      	movs	r0, #6
 800273c:	f003 fb3a 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002740:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002744:	f7fe fec0 	bl	80014c8 <RGB_to_BRG>
 8002748:	4603      	mov	r3, r0
 800274a:	461c      	mov	r4, r3
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe febb 	bl	80014c8 <RGB_to_BRG>
 8002752:	4603      	mov	r3, r0
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	9400      	str	r4, [sp, #0]
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <LCD_draw_main_screen+0x358>)
 800275a:	4a5a      	ldr	r2, [pc, #360]	; (80028c4 <LCD_draw_main_screen+0x360>)
 800275c:	21ff      	movs	r1, #255	; 0xff
 800275e:	2006      	movs	r0, #6
 8002760:	f003 fb28 	bl	8005db4 <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002764:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002768:	f7fe feae 	bl	80014c8 <RGB_to_BRG>
 800276c:	4603      	mov	r3, r0
 800276e:	461c      	mov	r4, r3
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe fea9 	bl	80014c8 <RGB_to_BRG>
 8002776:	4603      	mov	r3, r0
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	9400      	str	r4, [sp, #0]
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <LCD_draw_main_screen+0x358>)
 800277e:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <LCD_draw_main_screen+0x364>)
 8002780:	f240 1113 	movw	r1, #275	; 0x113
 8002784:	2006      	movs	r0, #6
 8002786:	f003 fb15 	bl	8005db4 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 800278a:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800278e:	f7fe fe9b 	bl	80014c8 <RGB_to_BRG>
 8002792:	4603      	mov	r3, r0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f44f 7394 	mov.w	r3, #296	; 0x128
 800279a:	22f0      	movs	r2, #240	; 0xf0
 800279c:	f44f 7194 	mov.w	r1, #296	; 0x128
 80027a0:	2002      	movs	r0, #2
 80027a2:	f00f fef7 	bl	8012594 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 80027a6:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80027aa:	f7fe fe8d 	bl	80014c8 <RGB_to_BRG>
 80027ae:	4603      	mov	r3, r0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	f240 1329 	movw	r3, #297	; 0x129
 80027b6:	22f0      	movs	r2, #240	; 0xf0
 80027b8:	f240 1129 	movw	r1, #297	; 0x129
 80027bc:	2002      	movs	r0, #2
 80027be:	f00f fee9 	bl	8012594 <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 80027c2:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80027c6:	f7fe fe7f 	bl	80014c8 <RGB_to_BRG>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461c      	mov	r4, r3
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fe7a 	bl	80014c8 <RGB_to_BRG>
 80027d4:	4603      	mov	r3, r0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	9400      	str	r4, [sp, #0]
 80027da:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <LCD_draw_main_screen+0x344>)
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <LCD_draw_main_screen+0x368>)
 80027de:	f240 112d 	movw	r1, #301	; 0x12d
 80027e2:	2006      	movs	r0, #6
 80027e4:	f003 fae6 	bl	8005db4 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 80027e8:	2228      	movs	r2, #40	; 0x28
 80027ea:	2100      	movs	r1, #0
 80027ec:	4838      	ldr	r0, [pc, #224]	; (80028d0 <LCD_draw_main_screen+0x36c>)
 80027ee:	f014 fc28 	bl	8017042 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <LCD_draw_main_screen+0x370>)
 80027f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027f8:	4937      	ldr	r1, [pc, #220]	; (80028d8 <LCD_draw_main_screen+0x374>)
 80027fa:	4835      	ldr	r0, [pc, #212]	; (80028d0 <LCD_draw_main_screen+0x36c>)
 80027fc:	f014 fbbe 	bl	8016f7c <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002800:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002804:	f7fe fe60 	bl	80014c8 <RGB_to_BRG>
 8002808:	4603      	mov	r3, r0
 800280a:	461c      	mov	r4, r3
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fe5b 	bl	80014c8 <RGB_to_BRG>
 8002812:	4603      	mov	r3, r0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	9400      	str	r4, [sp, #0]
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <LCD_draw_main_screen+0x344>)
 800281a:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <LCD_draw_main_screen+0x36c>)
 800281c:	f240 112d 	movw	r1, #301	; 0x12d
 8002820:	2082      	movs	r0, #130	; 0x82
 8002822:	f003 fac7 	bl	8005db4 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002826:	2228      	movs	r2, #40	; 0x28
 8002828:	2100      	movs	r1, #0
 800282a:	4829      	ldr	r0, [pc, #164]	; (80028d0 <LCD_draw_main_screen+0x36c>)
 800282c:	f014 fc09 	bl	8017042 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002830:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <LCD_draw_main_screen+0x370>)
 8002832:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002836:	4928      	ldr	r1, [pc, #160]	; (80028d8 <LCD_draw_main_screen+0x374>)
 8002838:	4825      	ldr	r0, [pc, #148]	; (80028d0 <LCD_draw_main_screen+0x36c>)
 800283a:	f014 fb9f 	bl	8016f7c <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 800283e:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002842:	f7fe fe41 	bl	80014c8 <RGB_to_BRG>
 8002846:	4603      	mov	r3, r0
 8002848:	461c      	mov	r4, r3
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe fe3c 	bl	80014c8 <RGB_to_BRG>
 8002850:	4603      	mov	r3, r0
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9400      	str	r4, [sp, #0]
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <LCD_draw_main_screen+0x344>)
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <LCD_draw_main_screen+0x36c>)
 800285a:	f240 112d 	movw	r1, #301	; 0x12d
 800285e:	20be      	movs	r0, #190	; 0xbe
 8002860:	f003 faa8 	bl	8005db4 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002864:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002868:	f7fe fe2e 	bl	80014c8 <RGB_to_BRG>
 800286c:	4603      	mov	r3, r0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f240 1321 	movw	r3, #289	; 0x121
 8002874:	22e8      	movs	r2, #232	; 0xe8
 8002876:	2135      	movs	r1, #53	; 0x35
 8002878:	20d0      	movs	r0, #208	; 0xd0
 800287a:	f00f fd5d 	bl	8012338 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 800287e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002882:	f7fe fe21 	bl	80014c8 <RGB_to_BRG>
 8002886:	4603      	mov	r3, r0
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800288e:	22e7      	movs	r2, #231	; 0xe7
 8002890:	2136      	movs	r1, #54	; 0x36
 8002892:	20d1      	movs	r0, #209	; 0xd1
 8002894:	f00f fd50 	bl	8012338 <UG_DrawFrame>
}
 8002898:	bf00      	nop
 800289a:	3704      	adds	r7, #4
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}
 80028a0:	0801bbcc 	.word	0x0801bbcc
 80028a4:	0801ac58 	.word	0x0801ac58
 80028a8:	0801be00 	.word	0x0801be00
 80028ac:	0801ac64 	.word	0x0801ac64
 80028b0:	0801cd10 	.word	0x0801cd10
 80028b4:	0801ac70 	.word	0x0801ac70
 80028b8:	0801ac74 	.word	0x0801ac74
 80028bc:	0801ae30 	.word	0x0801ae30
 80028c0:	0801ac80 	.word	0x0801ac80
 80028c4:	0801ac90 	.word	0x0801ac90
 80028c8:	0801acac 	.word	0x0801acac
 80028cc:	0801accc 	.word	0x0801accc
 80028d0:	20000600 	.word	0x20000600
 80028d4:	200006a8 	.word	0x200006a8
 80028d8:	0801abf8 	.word	0x0801abf8

080028dc <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b083      	sub	sp, #12
 80028e0:	af02      	add	r7, sp, #8
	heater_off();
 80028e2:	f7fe fff7 	bl	80018d4 <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 80028e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028ea:	f7fe fded 	bl	80014c8 <RGB_to_BRG>
 80028ee:	4603      	mov	r3, r0
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	23cd      	movs	r3, #205	; 0xcd
 80028f4:	22cd      	movs	r2, #205	; 0xcd
 80028f6:	2132      	movs	r1, #50	; 0x32
 80028f8:	200a      	movs	r0, #10
 80028fa:	f00f fcab 	bl	8012254 <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 80028fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002902:	f7fe fde1 	bl	80014c8 <RGB_to_BRG>
 8002906:	4603      	mov	r3, r0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	23c8      	movs	r3, #200	; 0xc8
 800290c:	22c8      	movs	r2, #200	; 0xc8
 800290e:	2137      	movs	r1, #55	; 0x37
 8002910:	200f      	movs	r0, #15
 8002912:	f00f fc9f 	bl	8012254 <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8002916:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800291a:	f7fe fdd5 	bl	80014c8 <RGB_to_BRG>
 800291e:	4603      	mov	r3, r0
 8002920:	461c      	mov	r4, r3
 8002922:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002926:	f7fe fdcf 	bl	80014c8 <RGB_to_BRG>
 800292a:	4603      	mov	r3, r0
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	9400      	str	r4, [sp, #0]
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <LCD_draw_earth_fault_popup+0x104>)
 8002932:	4a2c      	ldr	r2, [pc, #176]	; (80029e4 <LCD_draw_earth_fault_popup+0x108>)
 8002934:	213c      	movs	r1, #60	; 0x3c
 8002936:	2014      	movs	r0, #20
 8002938:	f003 fa3c 	bl	8005db4 <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800293c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002940:	f7fe fdc2 	bl	80014c8 <RGB_to_BRG>
 8002944:	4603      	mov	r3, r0
 8002946:	461c      	mov	r4, r3
 8002948:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800294c:	f7fe fdbc 	bl	80014c8 <RGB_to_BRG>
 8002950:	4603      	mov	r3, r0
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9400      	str	r4, [sp, #0]
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <LCD_draw_earth_fault_popup+0x104>)
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <LCD_draw_earth_fault_popup+0x10c>)
 800295a:	2150      	movs	r1, #80	; 0x50
 800295c:	2014      	movs	r0, #20
 800295e:	f003 fa29 	bl	8005db4 <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8002962:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002966:	f7fe fdaf 	bl	80014c8 <RGB_to_BRG>
 800296a:	4603      	mov	r3, r0
 800296c:	461c      	mov	r4, r3
 800296e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002972:	f7fe fda9 	bl	80014c8 <RGB_to_BRG>
 8002976:	4603      	mov	r3, r0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	9400      	str	r4, [sp, #0]
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <LCD_draw_earth_fault_popup+0x104>)
 800297e:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <LCD_draw_earth_fault_popup+0x110>)
 8002980:	2178      	movs	r1, #120	; 0x78
 8002982:	2014      	movs	r0, #20
 8002984:	f003 fa16 	bl	8005db4 <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8002988:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800298c:	f7fe fd9c 	bl	80014c8 <RGB_to_BRG>
 8002990:	4603      	mov	r3, r0
 8002992:	461c      	mov	r4, r3
 8002994:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002998:	f7fe fd96 	bl	80014c8 <RGB_to_BRG>
 800299c:	4603      	mov	r3, r0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	9400      	str	r4, [sp, #0]
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <LCD_draw_earth_fault_popup+0x104>)
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <LCD_draw_earth_fault_popup+0x114>)
 80029a6:	218c      	movs	r1, #140	; 0x8c
 80029a8:	2014      	movs	r0, #20
 80029aa:	f003 fa03 	bl	8005db4 <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80029ae:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029b2:	f7fe fd89 	bl	80014c8 <RGB_to_BRG>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461c      	mov	r4, r3
 80029ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029be:	f7fe fd83 	bl	80014c8 <RGB_to_BRG>
 80029c2:	4603      	mov	r3, r0
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	9400      	str	r4, [sp, #0]
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <LCD_draw_earth_fault_popup+0x104>)
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <LCD_draw_earth_fault_popup+0x118>)
 80029cc:	21a0      	movs	r1, #160	; 0xa0
 80029ce:	2014      	movs	r0, #20
 80029d0:	f003 f9f0 	bl	8005db4 <LCD_PutStr>

	Error_Handler();
 80029d4:	f001 fc46 	bl	8004264 <Error_Handler>
}
 80029d8:	bf00      	nop
 80029da:	3704      	adds	r7, #4
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	0801be00 	.word	0x0801be00
 80029e4:	0801acd4 	.word	0x0801acd4
 80029e8:	0801ace0 	.word	0x0801ace0
 80029ec:	0801ace8 	.word	0x0801ace8
 80029f0:	0801acf0 	.word	0x0801acf0
 80029f4:	0801acfc 	.word	0x0801acfc

080029f8 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 80029f8:	b598      	push	{r3, r4, r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <get_set_temperature+0x70>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12f      	bne.n	8002a64 <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8002a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fda2 	bl	8000554 <__aeabi_ui2d>
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <get_set_temperature+0x74>)
 8002a12:	ed93 7b00 	vldr	d7, [r3]
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <get_set_temperature+0x78>)
 8002a18:	ed93 6b00 	vldr	d6, [r3]
 8002a1c:	eeb0 2a46 	vmov.f32	s4, s12
 8002a20:	eef0 2a66 	vmov.f32	s5, s13
 8002a24:	eeb0 1a47 	vmov.f32	s2, s14
 8002a28:	eef0 1a67 	vmov.f32	s3, s15
 8002a2c:	ec41 0b10 	vmov	d0, r0, r1
 8002a30:	f7fe fc80 	bl	8001334 <clamp>
 8002a34:	ec53 2b10 	vmov	r2, r3, d0
 8002a38:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f8da 	bl	8000bf8 <__aeabi_d2uiz>
 8002a44:	4603      	mov	r3, r0
 8002a46:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 8002a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd8d 	bl	8000574 <__aeabi_i2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4905      	ldr	r1, [pc, #20]	; (8002a74 <get_set_temperature+0x7c>)
 8002a60:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8002a64:	bf00      	nop
 8002a66:	bd98      	pop	{r3, r4, r7, pc}
 8002a68:	200006a0 	.word	0x200006a0
 8002a6c:	20000028 	.word	0x20000028
 8002a70:	20000030 	.word	0x20000030
 8002a74:	20000038 	.word	0x20000038

08002a78 <beep>:

/* Beep the beeper */
void beep(){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <beep+0x30>)
 8002a7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <beep+0x34>)
 8002a88:	f7fe f846 	bl	8000b18 <__aeabi_dcmpeq>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 8002a92:	e006      	b.n	8002aa2 <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8002a94:	2104      	movs	r1, #4
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <beep+0x38>)
 8002a98:	f00a fcb8 	bl	800d40c <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <beep+0x3c>)
 8002a9e:	f00a fbc5 	bl	800d22c <HAL_TIM_Base_Start_IT>
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200006a8 	.word	0x200006a8
 8002aac:	3ff00000 	.word	0x3ff00000
 8002ab0:	2000204c 	.word	0x2000204c
 8002ab4:	200021c8 	.word	0x200021c8

08002ab8 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8002abc:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <handle_emergency_shutdown+0xe8>)
 8002abe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <handle_emergency_shutdown+0x20>
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <handle_emergency_shutdown+0xec>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8002ace:	f003 fa7f 	bl	8005fd0 <HAL_GetTick>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <handle_emergency_shutdown+0xf0>)
 8002ad6:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002ad8:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <handle_emergency_shutdown+0xe8>)
 8002ada:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f7fe f817 	bl	8000b18 <__aeabi_dcmpeq>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d024      	beq.n	8002b3a <handle_emergency_shutdown+0x82>
 8002af0:	f003 fa6e 	bl	8005fd0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <handle_emergency_shutdown+0xf0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd29 	bl	8000554 <__aeabi_ui2d>
 8002b02:	4604      	mov	r4, r0
 8002b04:	460d      	mov	r5, r1
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <handle_emergency_shutdown+0xf4>)
 8002b08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b0c:	a322      	add	r3, pc, #136	; (adr r3, 8002b98 <handle_emergency_shutdown+0xe0>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fd99 	bl	8000648 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fe f819 	bl	8000b54 <__aeabi_dcmpge>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <handle_emergency_shutdown+0x82>
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <handle_emergency_shutdown+0xec>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f7fe fcdf 	bl	80014f4 <change_state>
		beep();
 8002b36:	f7ff ff9f 	bl	8002a78 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <handle_emergency_shutdown+0xe8>)
 8002b3c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <handle_emergency_shutdown+0xf8>)
 8002b46:	f7fe f80f 	bl	8000b68 <__aeabi_dcmpgt>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <handle_emergency_shutdown+0xb0>
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <handle_emergency_shutdown+0xec>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <handle_emergency_shutdown+0xb0>
		show_popup("\n\n  NO tip detected");
 8002b58:	4816      	ldr	r0, [pc, #88]	; (8002bb4 <handle_emergency_shutdown+0xfc>)
 8002b5a:	f7fe fec3 	bl	80018e4 <show_popup>
		change_state(EMERGENCY_SLEEP);
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f7fe fcc8 	bl	80014f4 <change_state>
		beep();
 8002b64:	f7ff ff88 	bl	8002a78 <beep>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <handle_emergency_shutdown+0xe8>)
 8002b6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b6e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	d900      	bls.n	8002b7e <handle_emergency_shutdown+0xc6>
		show_popup("\n\n  Too Low voltage");
		change_state(EMERGENCY_SLEEP);
	}
}
 8002b7c:	e009      	b.n	8002b92 <handle_emergency_shutdown+0xda>
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <handle_emergency_shutdown+0xec>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <handle_emergency_shutdown+0xda>
		show_popup("\n\n  Too Low voltage");
 8002b86:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <handle_emergency_shutdown+0x100>)
 8002b88:	f7fe feac 	bl	80018e4 <show_popup>
		change_state(EMERGENCY_SLEEP);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f7fe fcb1 	bl	80014f4 <change_state>
}
 8002b92:	bf00      	nop
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	40ed4c00 	.word	0x40ed4c00
 8002ba0:	20000038 	.word	0x20000038
 8002ba4:	2000001d 	.word	0x2000001d
 8002ba8:	200005c8 	.word	0x200005c8
 8002bac:	200006a8 	.word	0x200006a8
 8002bb0:	407e0000 	.word	0x407e0000
 8002bb4:	0801ad08 	.word	0x0801ad08
 8002bb8:	0801ad1c 	.word	0x0801ad1c

08002bbc <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8002bbc:	b598      	push	{r3, r4, r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <handle_button_status+0x98>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d11e      	bne.n	8002c06 <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <handle_button_status+0x98>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <handle_button_status+0x9c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <handle_button_status+0x22>
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <handle_button_status+0x9c>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d103      	bne.n	8002be6 <handle_button_status+0x2a>
			change_state(HALTED);
 8002bde:	2004      	movs	r0, #4
 8002be0:	f7fe fc88 	bl	80014f4 <change_state>
 8002be4:	e00a      	b.n	8002bfc <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <handle_button_status+0x9c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d003      	beq.n	8002bf6 <handle_button_status+0x3a>
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <handle_button_status+0x9c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d102      	bne.n	8002bfc <handle_button_status+0x40>
			change_state(RUN);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fe fc7c 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8002bfc:	f003 f9e8 	bl	8005fd0 <HAL_GetTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <handle_button_status+0xa0>)
 8002c04:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 8002c06:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <handle_button_status+0xa4>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10d      	bne.n	8002c2a <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <handle_button_status+0xa4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <handle_button_status+0xa8>)
 8002c16:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c1a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffe9 	bl	8000bf8 <__aeabi_d2uiz>
 8002c26:	4603      	mov	r3, r0
 8002c28:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <handle_button_status+0xac>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10d      	bne.n	8002c4e <handle_button_status+0x92>
		SW_3_pressed = 0;
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <handle_button_status+0xac>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <handle_button_status+0xa8>)
 8002c3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c3e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd ffd7 	bl	8000bf8 <__aeabi_d2uiz>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 8002c4e:	bf00      	nop
 8002c50:	bd98      	pop	{r3, r4, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200005dc 	.word	0x200005dc
 8002c58:	2000001d 	.word	0x2000001d
 8002c5c:	200005c4 	.word	0x200005c4
 8002c60:	200005dd 	.word	0x200005dd
 8002c64:	200006a8 	.word	0x200006a8
 8002c68:	200005de 	.word	0x200005de
 8002c6c:	00000000 	.word	0x00000000

08002c70 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7c:	f006 feea 	bl	8009a54 <HAL_GPIO_ReadPin>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <get_stand_status+0x1c>
		stand_status = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e001      	b.n	8002c90 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	493b      	ldr	r1, [pc, #236]	; (8002d80 <get_stand_status+0x110>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 fb1b 	bl	80042d0 <Moving_Average_Compute>
 8002c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c9e:	eef0 7a60 	vmov.f32	s15, s1
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <get_stand_status+0x114>)
 8002ca4:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <get_stand_status+0x114>)
 8002caa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002cae:	a330      	add	r3, pc, #192	; (adr r3, 8002d70 <get_stand_status+0x100>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd ff4e 	bl	8000b54 <__aeabi_dcmpge>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d039      	beq.n	8002d32 <get_stand_status+0xc2>
		if(active_state == RUN){
 8002cbe:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <get_stand_status+0x118>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <get_stand_status+0x66>
			change_state(STANDBY);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7fe fc14 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8002ccc:	f003 f980 	bl	8005fd0 <HAL_GetTick>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <get_stand_status+0x11c>)
 8002cd4:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8002cd6:	f003 f97b 	bl	8005fd0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <get_stand_status+0x11c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fc36 	bl	8000554 <__aeabi_ui2d>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460d      	mov	r5, r1
 8002cec:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <get_stand_status+0x120>)
 8002cee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002cf2:	a321      	add	r3, pc, #132	; (adr r3, 8002d78 <get_stand_status+0x108>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fca6 	bl	8000648 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	f7fd ff26 	bl	8000b54 <__aeabi_dcmpge>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <get_stand_status+0xac>
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <get_stand_status+0x118>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <get_stand_status+0xac>
			change_state(SLEEP);
 8002d16:	2002      	movs	r0, #2
 8002d18:	f7fe fbec 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <get_stand_status+0x118>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <get_stand_status+0xbc>
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <get_stand_status+0x118>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d102      	bne.n	8002d32 <get_stand_status+0xc2>
			change_state(SLEEP);
 8002d2c:	2002      	movs	r0, #2
 8002d2e:	f7fe fbe1 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <get_stand_status+0x114>)
 8002d34:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d38:	a30d      	add	r3, pc, #52	; (adr r3, 8002d70 <get_stand_status+0x100>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd fef5 	bl	8000b2c <__aeabi_dcmplt>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d100      	bne.n	8002d4a <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 8002d48:	e00e      	b.n	8002d68 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <get_stand_status+0x118>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d007      	beq.n	8002d62 <get_stand_status+0xf2>
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <get_stand_status+0x118>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d003      	beq.n	8002d62 <get_stand_status+0xf2>
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <get_stand_status+0x118>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <get_stand_status+0xf8>
			change_state(RUN);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fe fbc6 	bl	80014f4 <change_state>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d70:	9999999a 	.word	0x9999999a
 8002d74:	3fc99999 	.word	0x3fc99999
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	40ed4c00 	.word	0x40ed4c00
 8002d80:	200013bc 	.word	0x200013bc
 8002d84:	20000038 	.word	0x20000038
 8002d88:	2000001d 	.word	0x2000001d
 8002d8c:	200005cc 	.word	0x200005cc
 8002d90:	200006a8 	.word	0x200006a8
 8002d94:	00000000 	.word	0x00000000

08002d98 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8002d98:	b5b0      	push	{r4, r5, r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8002d9e:	2110      	movs	r1, #16
 8002da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da4:	f006 fe56 	bl	8009a54 <HAL_GPIO_ReadPin>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <get_handle_type+0x1c>
		handle_status = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	71fb      	strb	r3, [r7, #7]
 8002db2:	e001      	b.n	8002db8 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	496f      	ldr	r1, [pc, #444]	; (8002f78 <get_handle_type+0x1e0>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fa87 	bl	80042d0 <Moving_Average_Compute>
 8002dc2:	eeb0 7a40 	vmov.f32	s14, s0
 8002dc6:	eef0 7a60 	vmov.f32	s15, s1
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <get_handle_type+0x1e4>)
 8002dcc:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8002dd0:	2120      	movs	r1, #32
 8002dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd6:	f006 fe3d 	bl	8009a54 <HAL_GPIO_ReadPin>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <get_handle_type+0x4e>
		handle_status = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	71fb      	strb	r3, [r7, #7]
 8002de4:	e001      	b.n	8002dea <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4964      	ldr	r1, [pc, #400]	; (8002f80 <get_handle_type+0x1e8>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fa6e 	bl	80042d0 <Moving_Average_Compute>
 8002df4:	eeb0 7a40 	vmov.f32	s14, s0
 8002df8:	eef0 7a60 	vmov.f32	s15, s1
 8002dfc:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <get_handle_type+0x1e4>)
 8002dfe:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8002e02:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <get_handle_type+0x1e4>)
 8002e04:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <get_handle_type+0x1ec>)
 8002e0e:	f7fd fea1 	bl	8000b54 <__aeabi_dcmpge>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d029      	beq.n	8002e6c <get_handle_type+0xd4>
 8002e18:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <get_handle_type+0x1e4>)
 8002e1a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <get_handle_type+0x1ec>)
 8002e24:	f7fd fe82 	bl	8000b2c <__aeabi_dcmplt>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01e      	beq.n	8002e6c <get_handle_type+0xd4>
		handle = NT115;
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <get_handle_type+0x1f0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 8002e34:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <get_handle_type+0x1e4>)
 8002e36:	4a55      	ldr	r2, [pc, #340]	; (8002f8c <get_handle_type+0x1f4>)
 8002e38:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 8002e3a:	4955      	ldr	r1, [pc, #340]	; (8002f90 <get_handle_type+0x1f8>)
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <get_handle_type+0x1fc>)
 8002e42:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 8002e46:	4954      	ldr	r1, [pc, #336]	; (8002f98 <get_handle_type+0x200>)
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <get_handle_type+0x204>)
 8002e4e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002e52:	4953      	ldr	r1, [pc, #332]	; (8002fa0 <get_handle_type+0x208>)
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <get_handle_type+0x20c>)
 8002e5a:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 100;
 8002e5e:	4952      	ldr	r1, [pc, #328]	; (8002fa8 <get_handle_type+0x210>)
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b51      	ldr	r3, [pc, #324]	; (8002fac <get_handle_type+0x214>)
 8002e66:	e9c1 2300 	strd	r2, r3, [r1]
 8002e6a:	e052      	b.n	8002f12 <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <get_handle_type+0x1e4>)
 8002e6e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <get_handle_type+0x1ec>)
 8002e78:	f7fd fe58 	bl	8000b2c <__aeabi_dcmplt>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d029      	beq.n	8002ed6 <get_handle_type+0x13e>
 8002e82:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <get_handle_type+0x1e4>)
 8002e84:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <get_handle_type+0x1ec>)
 8002e8e:	f7fd fe61 	bl	8000b54 <__aeabi_dcmpge>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01e      	beq.n	8002ed6 <get_handle_type+0x13e>
		handle = T210;
 8002e98:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <get_handle_type+0x1f0>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <get_handle_type+0x1e4>)
 8002ea0:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <get_handle_type+0x218>)
 8002ea2:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 8002ea4:	493a      	ldr	r1, [pc, #232]	; (8002f90 <get_handle_type+0x1f8>)
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <get_handle_type+0x21c>)
 8002eac:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8002eb0:	4939      	ldr	r1, [pc, #228]	; (8002f98 <get_handle_type+0x200>)
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <get_handle_type+0x21c>)
 8002eb8:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002ebc:	4938      	ldr	r1, [pc, #224]	; (8002fa0 <get_handle_type+0x208>)
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <get_handle_type+0x1ec>)
 8002ec4:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 125;
 8002ec8:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <get_handle_type+0x210>)
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <get_handle_type+0x220>)
 8002ed0:	e9c1 2300 	strd	r2, r3, [r1]
 8002ed4:	e01d      	b.n	8002f12 <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <get_handle_type+0x1f0>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <get_handle_type+0x1e4>)
 8002ede:	4a37      	ldr	r2, [pc, #220]	; (8002fbc <get_handle_type+0x224>)
 8002ee0:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 8002ee2:	492b      	ldr	r1, [pc, #172]	; (8002f90 <get_handle_type+0x1f8>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <get_handle_type+0x228>)
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8002eee:	492a      	ldr	r1, [pc, #168]	; (8002f98 <get_handle_type+0x200>)
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <get_handle_type+0x1fc>)
 8002ef6:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002efa:	4929      	ldr	r1, [pc, #164]	; (8002fa0 <get_handle_type+0x208>)
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <get_handle_type+0x1ec>)
 8002f02:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 8002f06:	4928      	ldr	r1, [pc, #160]	; (8002fa8 <get_handle_type+0x210>)
 8002f08:	a319      	add	r3, pc, #100	; (adr r3, 8002f70 <get_handle_type+0x1d8>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <get_handle_type+0x1f8>)
 8002f14:	ed93 7b00 	vldr	d7, [r3]
 8002f18:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <get_handle_type+0x200>)
 8002f1a:	ed93 6b00 	vldr	d6, [r3]
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <get_handle_type+0x208>)
 8002f20:	ed93 5b00 	vldr	d5, [r3]
 8002f24:	eeb0 2a45 	vmov.f32	s4, s10
 8002f28:	eef0 2a65 	vmov.f32	s5, s11
 8002f2c:	eeb0 1a46 	vmov.f32	s2, s12
 8002f30:	eef0 1a66 	vmov.f32	s3, s13
 8002f34:	eeb0 0a47 	vmov.f32	s0, s14
 8002f38:	eef0 0a67 	vmov.f32	s1, s15
 8002f3c:	4821      	ldr	r0, [pc, #132]	; (8002fc4 <get_handle_type+0x22c>)
 8002f3e:	f001 fc9e 	bl	800487e <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <get_handle_type+0x210>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	4614      	mov	r4, r2
 8002f4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <get_handle_type+0x210>)
 8002f50:	ed93 7b00 	vldr	d7, [r3]
 8002f54:	eeb0 1a47 	vmov.f32	s2, s14
 8002f58:	eef0 1a67 	vmov.f32	s3, s15
 8002f5c:	ec45 4b10 	vmov	d0, r4, r5
 8002f60:	4818      	ldr	r0, [pc, #96]	; (8002fc4 <get_handle_type+0x22c>)
 8002f62:	f001 fc6c 	bl	800483e <PID_SetILimits>

}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	00000000 	.word	0x00000000
 8002f74:	4062c000 	.word	0x4062c000
 8002f78:	200016e8 	.word	0x200016e8
 8002f7c:	20000038 	.word	0x20000038
 8002f80:	20001a14 	.word	0x20001a14
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	200005b8 	.word	0x200005b8
 8002f8c:	41a00000 	.word	0x41a00000
 8002f90:	200005e8 	.word	0x200005e8
 8002f94:	40080000 	.word	0x40080000
 8002f98:	200005f0 	.word	0x200005f0
 8002f9c:	3ff00000 	.word	0x3ff00000
 8002fa0:	200005f8 	.word	0x200005f8
 8002fa4:	3fd00000 	.word	0x3fd00000
 8002fa8:	20000020 	.word	0x20000020
 8002fac:	40590000 	.word	0x40590000
 8002fb0:	42700000 	.word	0x42700000
 8002fb4:	40140000 	.word	0x40140000
 8002fb8:	405f4000 	.word	0x405f4000
 8002fbc:	42f00000 	.word	0x42f00000
 8002fc0:	40200000 	.word	0x40200000
 8002fc4:	200022a8 	.word	0x200022a8

08002fc8 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d006      	beq.n	8002fe6 <HAL_GPIO_EXTI_Callback+0x1e>
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_EXTI_Callback+0x1e>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	d109      	bne.n	8002ffa <HAL_GPIO_EXTI_Callback+0x32>
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8002fee:	4806      	ldr	r0, [pc, #24]	; (8003008 <HAL_GPIO_EXTI_Callback+0x40>)
 8002ff0:	f00a f91c 	bl	800d22c <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    }
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000001c 	.word	0x2000001c
 8003008:	2000217c 	.word	0x2000217c

0800300c <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7f1b      	ldrb	r3, [r3, #28]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d003      	beq.n	8003024 <HAL_TIM_IC_CaptureCallback+0x18>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7f1b      	ldrb	r3, [r3, #28]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d101      	bne.n	8003028 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8003024:	f7ff fd28 	bl	8002a78 <beep>
	}
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d110      	bne.n	8003062 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7f1b      	ldrb	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10c      	bne.n	8003062 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d108      	bne.n	8003062 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 800305c:	4806      	ldr	r0, [pc, #24]	; (8003078 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800305e:	f003 fccf 	bl	8006a00 <HAL_ADC_Start_IT>
	}
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20001fb4 	.word	0x20001fb4
 8003070:	20000708 	.word	0x20000708
 8003074:	200001c0 	.word	0x200001c0
 8003078:	20001dac 	.word	0x20001dac

0800307c <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a35      	ldr	r2, [pc, #212]	; (800315c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10c      	bne.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 800308c:	f7fe fc22 	bl	80018d4 <heater_off>
		thermocouple_measurement_done = 0;
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 8003096:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d104      	bne.n	80030b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 80030ae:	2239      	movs	r2, #57	; 0x39
 80030b0:	492d      	ldr	r1, [pc, #180]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030b2:	482e      	ldr	r0, [pc, #184]	; (800316c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80030b4:	f003 fdd4 	bl	8006c60 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d106      	bne.n	80030ce <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 80030c0:	482b      	ldr	r0, [pc, #172]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030c2:	f00a f91d 	bl	800d300 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 80030c6:	2104      	movs	r1, #4
 80030c8:	482a      	ldr	r0, [pc, #168]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80030ca:	f00a faeb 	bl	800d6a4 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a29      	ldr	r2, [pc, #164]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d13d      	bne.n	8003152 <HAL_TIM_PeriodElapsedCallback+0xd6>
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d139      	bne.n	8003152 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 80030de:	2120      	movs	r1, #32
 80030e0:	4827      	ldr	r0, [pc, #156]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80030e2:	f006 fcb7 	bl	8009a54 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10b      	bne.n	8003104 <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
			beep();
 80030f8:	f7ff fcbe 	bl	8002a78 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 80030fc:	481e      	ldr	r0, [pc, #120]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80030fe:	f00a f8ff 	bl	800d300 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 8003102:	e026      	b.n	8003152 <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800310a:	f006 fca3 	bl	8009a54 <HAL_GPIO_ReadPin>
 800310e:	4603      	mov	r3, r0
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10b      	bne.n	800312c <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
			beep();
 8003120:	f7ff fcaa 	bl	8002a78 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003124:	4814      	ldr	r0, [pc, #80]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003126:	f00a f8eb 	bl	800d300 <HAL_TIM_Base_Stop_IT>
}
 800312a:	e012      	b.n	8003152 <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 800312c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003130:	4813      	ldr	r0, [pc, #76]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003132:	f006 fc8f 	bl	8009a54 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10a      	bne.n	8003152 <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
			beep();
 8003148:	f7ff fc96 	bl	8002a78 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 800314c:	480a      	ldr	r0, [pc, #40]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800314e:	f00a f8d7 	bl	800d300 <HAL_TIM_Base_Stop_IT>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20002098 	.word	0x20002098
 8003160:	200001c1 	.word	0x200001c1
 8003164:	200020e4 	.word	0x200020e4
 8003168:	2000062c 	.word	0x2000062c
 800316c:	20001d40 	.word	0x20001d40
 8003170:	200021c8 	.word	0x200021c8
 8003174:	2000204c 	.word	0x2000204c
 8003178:	2000217c 	.word	0x2000217c
 800317c:	2000001c 	.word	0x2000001c
 8003180:	48000400 	.word	0x48000400
 8003184:	200005dc 	.word	0x200005dc
 8003188:	200005dd 	.word	0x200005dd
 800318c:	200005de 	.word	0x200005de

08003190 <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a0:	d110      	bne.n	80031c4 <HAL_ADC_ConvCpltCallback+0x34>
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_ADC_ConvCpltCallback+0x74>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 80031aa:	f7fe fa2d 	bl	8001608 <get_thermocouple_temperature>
		heater_on();
 80031ae:	f7fe fb3b 	bl	8001828 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 80031b2:	4815      	ldr	r0, [pc, #84]	; (8003208 <HAL_ADC_ConvCpltCallback+0x78>)
 80031b4:	f001 f970 	bl	8004498 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 80031b8:	4814      	ldr	r0, [pc, #80]	; (800320c <HAL_ADC_ConvCpltCallback+0x7c>)
 80031ba:	f003 fe05 	bl	8006dc8 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_ADC_ConvCpltCallback+0x74>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_ADC_ConvCpltCallback+0x80>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d116      	bne.n	80031fc <HAL_ADC_ConvCpltCallback+0x6c>
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_ADC_ConvCpltCallback+0x84>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d112      	bne.n	80031fc <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 80031d6:	4810      	ldr	r0, [pc, #64]	; (8003218 <HAL_ADC_ConvCpltCallback+0x88>)
 80031d8:	f003 fe57 	bl	8006e8a <HAL_ADC_GetValue>
 80031dc:	4603      	mov	r3, r0
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_ADC_ConvCpltCallback+0x8c>)
 80031e2:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 80031e4:	480c      	ldr	r0, [pc, #48]	; (8003218 <HAL_ADC_ConvCpltCallback+0x88>)
 80031e6:	f003 fe50 	bl	8006e8a <HAL_ADC_GetValue>
 80031ea:	4603      	mov	r3, r0
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_ADC_ConvCpltCallback+0x90>)
 80031f0:	801a      	strh	r2, [r3, #0]
		heater_on();
 80031f2:	f7fe fb19 	bl	8001828 <heater_on>
		current_measurement_done = 1;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <HAL_ADC_ConvCpltCallback+0x84>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
	}
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200001c1 	.word	0x200001c1
 8003208:	200022a8 	.word	0x200022a8
 800320c:	20001d40 	.word	0x20001d40
 8003210:	50000100 	.word	0x50000100
 8003214:	200001c0 	.word	0x200001c0
 8003218:	20001dac 	.word	0x20001dac
 800321c:	20000038 	.word	0x20000038
 8003220:	2000069e 	.word	0x2000069e

08003224 <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 800322c:	f7ff fb56 	bl	80028dc <LCD_draw_earth_fault_popup>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	ed2d 8b06 	vpush	{d8-d10}
 8003240:	b08e      	sub	sp, #56	; 0x38
 8003242:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003244:	f002 fe60 	bl	8005f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003248:	f000 fa5e 	bl	8003708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800324c:	f000 ff5a 	bl	8004104 <MX_GPIO_Init>
  MX_DMA_Init();
 8003250:	f000 ff26 	bl	80040a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8003254:	f000 faa6 	bl	80037a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003258:	f000 fb3c 	bl	80038d4 <MX_ADC2_Init>
  MX_CRC_Init();
 800325c:	f000 fbd8 	bl	8003a10 <MX_CRC_Init>
  MX_TIM1_Init();
 8003260:	f000 fc76 	bl	8003b50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003264:	f000 fd14 	bl	8003c90 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003268:	f000 fd66 	bl	8003d38 <MX_TIM4_Init>
  MX_SPI2_Init();
 800326c:	f000 fc32 	bl	8003ad4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003270:	f000 fbf0 	bl	8003a54 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8003274:	f012 fa40 	bl	80156f8 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8003278:	f000 fe96 	bl	8003fa8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800327c:	f000 fec4 	bl	8004008 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003280:	f000 fdea 	bl	8003e58 <MX_TIM7_Init>
  MX_TIM8_Init();
 8003284:	f000 fe28 	bl	8003ed8 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003288:	f000 fdb0 	bl	8003dec <MX_TIM6_Init>
  MX_TIM16_Init();
 800328c:	f000 fe64 	bl	8003f58 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003290:	2000      	movs	r0, #0
 8003292:	f7fe faa1 	bl	80017d8 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8003296:	2108      	movs	r1, #8
 8003298:	488f      	ldr	r0, [pc, #572]	; (80034d8 <main+0x2a0>)
 800329a:	f00b fabb 	bl	800e814 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800329e:	213c      	movs	r1, #60	; 0x3c
 80032a0:	488e      	ldr	r0, [pc, #568]	; (80034dc <main+0x2a4>)
 80032a2:	f00a fbd9 	bl	800da58 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80032a6:	2100      	movs	r1, #0
 80032a8:	488b      	ldr	r0, [pc, #556]	; (80034d8 <main+0x2a0>)
 80032aa:	f00a f8af 	bl	800d40c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 80032ae:	4b8c      	ldr	r3, [pc, #560]	; (80034e0 <main+0x2a8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2205      	movs	r2, #5
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 80032b6:	488b      	ldr	r0, [pc, #556]	; (80034e4 <main+0x2ac>)
 80032b8:	f009 ffb8 	bl	800d22c <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80032bc:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <main+0x2b0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <main+0x2b0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80032cc:	217f      	movs	r1, #127	; 0x7f
 80032ce:	4887      	ldr	r0, [pc, #540]	; (80034ec <main+0x2b4>)
 80032d0:	f005 f89a 	bl	8008408 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80032d4:	217f      	movs	r1, #127	; 0x7f
 80032d6:	4886      	ldr	r0, [pc, #536]	; (80034f0 <main+0x2b8>)
 80032d8:	f005 f896 	bl	8008408 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 80032dc:	2239      	movs	r2, #57	; 0x39
 80032de:	4985      	ldr	r1, [pc, #532]	; (80034f4 <main+0x2bc>)
 80032e0:	4883      	ldr	r0, [pc, #524]	; (80034f0 <main+0x2b8>)
 80032e2:	f003 fcbd 	bl	8006c60 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 80032e6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80032ea:	4883      	ldr	r0, [pc, #524]	; (80034f8 <main+0x2c0>)
 80032ec:	f000 ffbf 	bl	800426e <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 80032f0:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80034fc <main+0x2c4>
 80032f4:	4882      	ldr	r0, [pc, #520]	; (8003500 <main+0x2c8>)
 80032f6:	f000 ffba 	bl	800426e <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 80032fa:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80032fe:	4881      	ldr	r0, [pc, #516]	; (8003504 <main+0x2cc>)
 8003300:	f000 ffb5 	bl	800426e <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,3);
 8003304:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003308:	487f      	ldr	r0, [pc, #508]	; (8003508 <main+0x2d0>)
 800330a:	f000 ffb0 	bl	800426e <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 800330e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003312:	487e      	ldr	r0, [pc, #504]	; (800350c <main+0x2d4>)
 8003314:	f000 ffab 	bl	800426e <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003318:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800331c:	487c      	ldr	r0, [pc, #496]	; (8003510 <main+0x2d8>)
 800331e:	f000 ffa6 	bl	800426e <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003322:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003326:	487b      	ldr	r0, [pc, #492]	; (8003514 <main+0x2dc>)
 8003328:	f000 ffa1 	bl	800426e <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 800332c:	20c8      	movs	r0, #200	; 0xc8
 800332e:	f002 fe5b 	bl	8005fe8 <HAL_Delay>
	LCD_init();
 8003332:	f002 fd7d 	bl	8005e30 <LCD_init>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003336:	f7fd fe91 	bl	800105c <FlashCheckCRC>
 800333a:	4603      	mov	r3, r0
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <main+0x114>
  	    	FlashWrite(&default_flash_values);
 8003346:	4874      	ldr	r0, [pc, #464]	; (8003518 <main+0x2e0>)
 8003348:	f7fd ff2c 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 800334c:	4873      	ldr	r0, [pc, #460]	; (800351c <main+0x2e4>)
 800334e:	f7fd ff0f 	bl	8001170 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 8003352:	2004      	movs	r0, #4
 8003354:	f7fe f8ce 	bl	80014f4 <change_state>

  		settings_menue();
 8003358:	f7fe fb0a 	bl	8001970 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <main+0x2e4>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f7fd fc45 	bl	8000bf8 <__aeabi_d2uiz>
 800336e:	4603      	mov	r3, r0
 8003370:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003372:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <main+0x2e8>)
 8003374:	ed93 7b00 	vldr	d7, [r3]
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <main+0x2ec>)
 800337a:	ed93 6b00 	vldr	d6, [r3]
 800337e:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <main+0x2f0>)
 8003380:	ed93 5b00 	vldr	d5, [r3]
 8003384:	2300      	movs	r3, #0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2301      	movs	r3, #1
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	eeb0 2a45 	vmov.f32	s4, s10
 8003390:	eef0 2a65 	vmov.f32	s5, s11
 8003394:	eeb0 1a46 	vmov.f32	s2, s12
 8003398:	eef0 1a66 	vmov.f32	s3, s13
 800339c:	eeb0 0a47 	vmov.f32	s0, s14
 80033a0:	eef0 0a67 	vmov.f32	s1, s15
 80033a4:	4b61      	ldr	r3, [pc, #388]	; (800352c <main+0x2f4>)
 80033a6:	4a62      	ldr	r2, [pc, #392]	; (8003530 <main+0x2f8>)
 80033a8:	4962      	ldr	r1, [pc, #392]	; (8003534 <main+0x2fc>)
 80033aa:	4863      	ldr	r0, [pc, #396]	; (8003538 <main+0x300>)
 80033ac:	f001 f828 	bl	8004400 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80033b0:	2101      	movs	r1, #1
 80033b2:	4861      	ldr	r0, [pc, #388]	; (8003538 <main+0x300>)
 80033b4:	f001 f9b7 	bl	8004726 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80033b8:	4b60      	ldr	r3, [pc, #384]	; (800353c <main+0x304>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	4619      	mov	r1, r3
 80033c0:	485d      	ldr	r0, [pc, #372]	; (8003538 <main+0x300>)
 80033c2:	f001 fb5f 	bl	8004a84 <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 80033c6:	ed9f 1b40 	vldr	d1, [pc, #256]	; 80034c8 <main+0x290>
 80033ca:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80034d0 <main+0x298>
 80033ce:	485a      	ldr	r0, [pc, #360]	; (8003538 <main+0x300>)
 80033d0:	f001 f9c7 	bl	8004762 <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 80033d4:	4b5a      	ldr	r3, [pc, #360]	; (8003540 <main+0x308>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	4690      	mov	r8, r2
 80033dc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80033e0:	4b57      	ldr	r3, [pc, #348]	; (8003540 <main+0x308>)
 80033e2:	ed93 7b00 	vldr	d7, [r3]
 80033e6:	eeb0 1a47 	vmov.f32	s2, s14
 80033ea:	eef0 1a67 	vmov.f32	s3, s15
 80033ee:	ec49 8b10 	vmov	d0, r8, r9
 80033f2:	4851      	ldr	r0, [pc, #324]	; (8003538 <main+0x300>)
 80033f4:	f001 fa23 	bl	800483e <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 80033f8:	f7ff f8b4 	bl	8002564 <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 80033fc:	2300      	movs	r3, #0
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	e010      	b.n	8003424 <main+0x1ec>
  			get_bus_voltage();
 8003402:	f7fe f8ad 	bl	8001560 <get_bus_voltage>
  			get_heater_current();
 8003406:	f7fe f8d7 	bl	80015b8 <get_heater_current>
  			get_mcu_temp();
 800340a:	f7fe f801 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 800340e:	f7fe f8fb 	bl	8001608 <get_thermocouple_temperature>
  			get_handle_type();
 8003412:	f7ff fcc1 	bl	8002d98 <get_handle_type>
  			get_stand_status();
 8003416:	f7ff fc2b 	bl	8002c70 <get_stand_status>
  			handle_button_status();
 800341a:	f7ff fbcf 	bl	8002bbc <handle_button_status>
  		for (int i = 0; i<200;i++){
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3301      	adds	r3, #1
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2bc7      	cmp	r3, #199	; 0xc7
 8003428:	ddeb      	ble.n	8003402 <main+0x1ca>
  		}

  		/* Start-up beep */
  		beep();
 800342a:	f7ff fb25 	bl	8002a78 <beep>
  		HAL_Delay(100);
 800342e:	2064      	movs	r0, #100	; 0x64
 8003430:	f002 fdda 	bl	8005fe8 <HAL_Delay>
  		beep();
 8003434:	f7ff fb20 	bl	8002a78 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003438:	f002 fdca 	bl	8005fd0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <main+0x30c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <main+0x310>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d30e      	bcc.n	800346a <main+0x232>
  				get_stand_status();
 800344c:	f7ff fc10 	bl	8002c70 <get_stand_status>
  				get_handle_type();
 8003450:	f7ff fca2 	bl	8002d98 <get_handle_type>
  				get_set_temperature();
 8003454:	f7ff fad0 	bl	80029f8 <get_set_temperature>
  				handle_button_status();
 8003458:	f7ff fbb0 	bl	8002bbc <handle_button_status>
  	  			handle_emergency_shutdown();
 800345c:	f7ff fb2c 	bl	8002ab8 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003460:	f002 fdb6 	bl	8005fd0 <HAL_GetTick>
 8003464:	4603      	mov	r3, r0
 8003466:	4a37      	ldr	r2, [pc, #220]	; (8003544 <main+0x30c>)
 8003468:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 800346a:	f002 fdb1 	bl	8005fd0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <main+0x314>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1ad2      	subs	r2, r2, r3
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <main+0x318>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d30a      	bcc.n	8003494 <main+0x25c>
  				get_bus_voltage();
 800347e:	f7fe f86f 	bl	8001560 <get_bus_voltage>
  				get_heater_current();
 8003482:	f7fe f899 	bl	80015b8 <get_heater_current>
  				get_mcu_temp();
 8003486:	f7fd ffc3 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 800348a:	f002 fda1 	bl	8005fd0 <HAL_GetTick>
 800348e:	4603      	mov	r3, r0
 8003490:	4a2e      	ldr	r2, [pc, #184]	; (800354c <main+0x314>)
 8003492:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003494:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <main+0x31c>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	dc67      	bgt.n	800356c <main+0x334>
 800349c:	2b02      	cmp	r3, #2
 800349e:	da5d      	bge.n	800355c <main+0x324>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <main+0x272>
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d007      	beq.n	80034b8 <main+0x280>
 80034a8:	e060      	b.n	800356c <main+0x334>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <main+0x320>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	491e      	ldr	r1, [pc, #120]	; (800352c <main+0x2f4>)
 80034b2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80034b6:	e059      	b.n	800356c <main+0x334>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 80034b8:	4b18      	ldr	r3, [pc, #96]	; (800351c <main+0x2e4>)
 80034ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034be:	491b      	ldr	r1, [pc, #108]	; (800352c <main+0x2f4>)
 80034c0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80034c4:	e052      	b.n	800356c <main+0x334>
 80034c6:	bf00      	nop
 80034c8:	00000000 	.word	0x00000000
 80034cc:	407f4000 	.word	0x407f4000
	...
 80034d8:	20001fb4 	.word	0x20001fb4
 80034dc:	20002000 	.word	0x20002000
 80034e0:	2000204c 	.word	0x2000204c
 80034e4:	20002098 	.word	0x20002098
 80034e8:	200020e4 	.word	0x200020e4
 80034ec:	20001dac 	.word	0x20001dac
 80034f0:	20001d40 	.word	0x20001d40
 80034f4:	2000062c 	.word	0x2000062c
 80034f8:	2000070c 	.word	0x2000070c
 80034fc:	42c80000 	.word	0x42c80000
 8003500:	20000a38 	.word	0x20000a38
 8003504:	20000d64 	.word	0x20000d64
 8003508:	20001090 	.word	0x20001090
 800350c:	200013bc 	.word	0x200013bc
 8003510:	200016e8 	.word	0x200016e8
 8003514:	20001a14 	.word	0x20001a14
 8003518:	20000088 	.word	0x20000088
 800351c:	200006a8 	.word	0x200006a8
 8003520:	200005e8 	.word	0x200005e8
 8003524:	200005f0 	.word	0x200005f0
 8003528:	200005f8 	.word	0x200005f8
 800352c:	200006f8 	.word	0x200006f8
 8003530:	200006f0 	.word	0x200006f0
 8003534:	20000040 	.word	0x20000040
 8003538:	200022a8 	.word	0x200022a8
 800353c:	2000000c 	.word	0x2000000c
 8003540:	20000020 	.word	0x20000020
 8003544:	200005d4 	.word	0x200005d4
 8003548:	20000014 	.word	0x20000014
 800354c:	200005d8 	.word	0x200005d8
 8003550:	20000018 	.word	0x20000018
 8003554:	2000001d 	.word	0x2000001d
 8003558:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 800355c:	4958      	ldr	r1, [pc, #352]	; (80036c0 <main+0x488>)
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800356a:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 800356c:	f002 fd30 	bl	8005fd0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <main+0x48c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <main+0x490>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d370      	bcc.n	8003662 <main+0x42a>
  				memset(&buffer, '\0', sizeof(buffer));
 8003580:	2228      	movs	r2, #40	; 0x28
 8003582:	2100      	movs	r1, #0
 8003584:	4851      	ldr	r0, [pc, #324]	; (80036cc <main+0x494>)
 8003586:	f013 fd5c 	bl	8017042 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <main+0x498>)
 800358c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <main+0x498>)
 8003592:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003596:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <main+0x49c>)
 8003598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <main+0x4a0>)
 80035a2:	f7fd f97b 	bl	800089c <__aeabi_ddiv>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <main+0x4a4>)
 80035b4:	f7fd f848 	bl	8000648 <__aeabi_dmul>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 80035c0:	4847      	ldr	r0, [pc, #284]	; (80036e0 <main+0x4a8>)
 80035c2:	f001 faa3 	bl	8004b0c <PID_GetPpart>
 80035c6:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <main+0x4ac>)
 80035d0:	f7fd f964 	bl	800089c <__aeabi_ddiv>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 80035dc:	4840      	ldr	r0, [pc, #256]	; (80036e0 <main+0x4a8>)
 80035de:	f001 faa7 	bl	8004b30 <PID_GetIpart>
 80035e2:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <main+0x4ac>)
 80035ec:	f7fd f956 	bl	800089c <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 80035f8:	4839      	ldr	r0, [pc, #228]	; (80036e0 <main+0x4a8>)
 80035fa:	f001 faab 	bl	8004b54 <PID_GetDpart>
 80035fe:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <main+0x4ac>)
 8003608:	f7fd f948 	bl	800089c <__aeabi_ddiv>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4614      	mov	r4, r2
 8003612:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003614:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <main+0x498>)
 8003616:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ffbd 	bl	8000598 <__aeabi_f2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003626:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800362a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800362e:	ed8d ab04 	vstr	d10, [sp, #16]
 8003632:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003636:	e9cd 8900 	strd	r8, r9, [sp]
 800363a:	4652      	mov	r2, sl
 800363c:	465b      	mov	r3, fp
 800363e:	492a      	ldr	r1, [pc, #168]	; (80036e8 <main+0x4b0>)
 8003640:	4822      	ldr	r0, [pc, #136]	; (80036cc <main+0x494>)
 8003642:	f013 fc9b 	bl	8016f7c <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 8003646:	4821      	ldr	r0, [pc, #132]	; (80036cc <main+0x494>)
 8003648:	f7fc fe3a 	bl	80002c0 <strlen>
 800364c:	4603      	mov	r3, r0
 800364e:	b29b      	uxth	r3, r3
 8003650:	4619      	mov	r1, r3
 8003652:	481e      	ldr	r0, [pc, #120]	; (80036cc <main+0x494>)
 8003654:	f012 f90e 	bl	8015874 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8003658:	f002 fcba 	bl	8005fd0 <HAL_GetTick>
 800365c:	4603      	mov	r3, r0
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <main+0x48c>)
 8003660:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003662:	f002 fcb5 	bl	8005fd0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <main+0x4b4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <main+0x4b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d311      	bcc.n	800369a <main+0x462>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <main+0x4bc>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10d      	bne.n	800369a <main+0x462>
						current_measurement_done = 0;
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <main+0x4c0>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8003684:	20fa      	movs	r0, #250	; 0xfa
 8003686:	f7fe f8a7 	bl	80017d8 <set_heater_duty>
						current_measurement_requested = 1;
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <main+0x4c4>)
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 8003690:	f002 fc9e 	bl	8005fd0 <HAL_GetTick>
 8003694:	4603      	mov	r3, r0
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <main+0x4b4>)
 8003698:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 800369a:	f002 fc99 	bl	8005fd0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <main+0x4c8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <main+0x4cc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	f4ff aec4 	bcc.w	8003438 <main+0x200>
  				update_display();
 80036b0:	f7fe fc4e 	bl	8001f50 <update_display>
  				previous_millis_display = HAL_GetTick();
 80036b4:	f002 fc8c 	bl	8005fd0 <HAL_GetTick>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4a11      	ldr	r2, [pc, #68]	; (8003700 <main+0x4c8>)
 80036bc:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 80036be:	e6bb      	b.n	8003438 <main+0x200>
 80036c0:	200006f8 	.word	0x200006f8
 80036c4:	200005c0 	.word	0x200005c0
 80036c8:	20000008 	.word	0x20000008
 80036cc:	20000600 	.word	0x20000600
 80036d0:	20000038 	.word	0x20000038
 80036d4:	200006f0 	.word	0x200006f0
 80036d8:	407f4000 	.word	0x407f4000
 80036dc:	40590000 	.word	0x40590000
 80036e0:	200022a8 	.word	0x200022a8
 80036e4:	40240000 	.word	0x40240000
 80036e8:	0801ad30 	.word	0x0801ad30
 80036ec:	200005d0 	.word	0x200005d0
 80036f0:	20000010 	.word	0x20000010
 80036f4:	200001c1 	.word	0x200001c1
 80036f8:	200001c0 	.word	0x200001c0
 80036fc:	20000708 	.word	0x20000708
 8003700:	200005bc 	.word	0x200005bc
 8003704:	20000004 	.word	0x20000004

08003708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b094      	sub	sp, #80	; 0x50
 800370c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370e:	f107 0318 	add.w	r3, r7, #24
 8003712:	2238      	movs	r2, #56	; 0x38
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f013 fc93 	bl	8017042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800372a:	2000      	movs	r0, #0
 800372c:	f008 f840 	bl	800b7b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003730:	2322      	movs	r3, #34	; 0x22
 8003732:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800373a:	2340      	movs	r3, #64	; 0x40
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800373e:	2301      	movs	r3, #1
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003742:	2302      	movs	r3, #2
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003746:	2302      	movs	r3, #2
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800374a:	2304      	movs	r3, #4
 800374c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800374e:	2355      	movs	r3, #85	; 0x55
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003752:	2302      	movs	r3, #2
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003756:	2302      	movs	r3, #2
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800375a:	2302      	movs	r3, #2
 800375c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375e:	f107 0318 	add.w	r3, r7, #24
 8003762:	4618      	mov	r0, r3
 8003764:	f008 f8d8 	bl	800b918 <HAL_RCC_OscConfig>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800376e:	f000 fd79 	bl	8004264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003772:	230f      	movs	r3, #15
 8003774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003776:	2303      	movs	r3, #3
 8003778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	2104      	movs	r1, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f008 fbd6 	bl	800bf3c <HAL_RCC_ClockConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003796:	f000 fd65 	bl	8004264 <Error_Handler>
  }
}
 800379a:	bf00      	nop
 800379c:	3750      	adds	r7, #80	; 0x50
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80037aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2220      	movs	r2, #32
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f013 fc40 	bl	8017042 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80037c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80037ca:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037d8:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80037de:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80037e4:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80037f0:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80037f6:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <MX_ADC1_Init+0x120>)
 80037fe:	2203      	movs	r2, #3
 8003800:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800380a:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <MX_ADC1_Init+0x120>)
 800380c:	2200      	movs	r2, #0
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003820:	2200      	movs	r2, #0
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800382c:	4825      	ldr	r0, [pc, #148]	; (80038c4 <MX_ADC1_Init+0x120>)
 800382e:	f002 ff63 	bl	80066f8 <HAL_ADC_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003838:	f000 fd14 	bl	8004264 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003844:	4619      	mov	r1, r3
 8003846:	481f      	ldr	r0, [pc, #124]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003848:	f004 fe72 	bl	8008530 <HAL_ADCEx_MultiModeConfigChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003852:	f000 fd07 	bl	8004264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003856:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <MX_ADC1_Init+0x124>)
 8003858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800385a:	2306      	movs	r3, #6
 800385c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800385e:	2306      	movs	r3, #6
 8003860:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003862:	237f      	movs	r3, #127	; 0x7f
 8003864:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003866:	2304      	movs	r3, #4
 8003868:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4814      	ldr	r0, [pc, #80]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003874:	f003 fd44 	bl	8007300 <HAL_ADC_ConfigChannel>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800387e:	f000 fcf1 	bl	8004264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_ADC1_Init+0x128>)
 8003884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003886:	230c      	movs	r3, #12
 8003888:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	4619      	mov	r1, r3
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <MX_ADC1_Init+0x120>)
 8003890:	f003 fd36 	bl	8007300 <HAL_ADC_ConfigChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800389a:	f000 fce3 	bl	8004264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <MX_ADC1_Init+0x12c>)
 80038a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80038a2:	2312      	movs	r3, #18
 80038a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <MX_ADC1_Init+0x120>)
 80038ac:	f003 fd28 	bl	8007300 <HAL_ADC_ConfigChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80038b6:	f000 fcd5 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038ba:	bf00      	nop
 80038bc:	3730      	adds	r7, #48	; 0x30
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20001d40 	.word	0x20001d40
 80038c8:	0c900008 	.word	0x0c900008
 80038cc:	10c00010 	.word	0x10c00010
 80038d0:	c3210000 	.word	0xc3210000

080038d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b090      	sub	sp, #64	; 0x40
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80038da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	611a      	str	r2, [r3, #16]
 80038ea:	615a      	str	r2, [r3, #20]
 80038ec:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	2220      	movs	r2, #32
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f013 fba4 	bl	8017042 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80038fa:	4b40      	ldr	r3, [pc, #256]	; (80039fc <MX_ADC2_Init+0x128>)
 80038fc:	4a40      	ldr	r2, [pc, #256]	; (8003a00 <MX_ADC2_Init+0x12c>)
 80038fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003900:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <MX_ADC2_Init+0x128>)
 8003902:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003906:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003908:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <MX_ADC2_Init+0x128>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <MX_ADC2_Init+0x128>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <MX_ADC2_Init+0x128>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <MX_ADC2_Init+0x128>)
 800391c:	2201      	movs	r2, #1
 800391e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <MX_ADC2_Init+0x128>)
 8003922:	2204      	movs	r2, #4
 8003924:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <MX_ADC2_Init+0x128>)
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <MX_ADC2_Init+0x128>)
 800392e:	2200      	movs	r2, #0
 8003930:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8003932:	4b32      	ldr	r3, [pc, #200]	; (80039fc <MX_ADC2_Init+0x128>)
 8003934:	2202      	movs	r2, #2
 8003936:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <MX_ADC2_Init+0x128>)
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <MX_ADC2_Init+0x128>)
 8003942:	2200      	movs	r2, #0
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <MX_ADC2_Init+0x128>)
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <MX_ADC2_Init+0x128>)
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003954:	4b29      	ldr	r3, [pc, #164]	; (80039fc <MX_ADC2_Init+0x128>)
 8003956:	2200      	movs	r2, #0
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800395a:	4b28      	ldr	r3, [pc, #160]	; (80039fc <MX_ADC2_Init+0x128>)
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003962:	4826      	ldr	r0, [pc, #152]	; (80039fc <MX_ADC2_Init+0x128>)
 8003964:	f002 fec8 	bl	80066f8 <HAL_ADC_Init>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 800396e:	f000 fc79 	bl	8004264 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <MX_ADC2_Init+0x130>)
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003976:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <MX_ADC2_Init+0x134>)
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 8003986:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8003990:	2300      	movs	r3, #0
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003998:	4619      	mov	r1, r3
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <MX_ADC2_Init+0x128>)
 800399c:	f004 f8a0 	bl	8007ae0 <HAL_ADC_AnalogWDGConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80039a6:	f000 fc5d 	bl	8004264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <MX_ADC2_Init+0x134>)
 80039ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039ae:	2306      	movs	r3, #6
 80039b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039b6:	237f      	movs	r3, #127	; 0x7f
 80039b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039ba:	2304      	movs	r3, #4
 80039bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	480d      	ldr	r0, [pc, #52]	; (80039fc <MX_ADC2_Init+0x128>)
 80039c8:	f003 fc9a 	bl	8007300 <HAL_ADC_ConfigChannel>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80039d2:	f000 fc47 	bl	8004264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <MX_ADC2_Init+0x138>)
 80039d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039da:	230c      	movs	r3, #12
 80039dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4806      	ldr	r0, [pc, #24]	; (80039fc <MX_ADC2_Init+0x128>)
 80039e4:	f003 fc8c 	bl	8007300 <HAL_ADC_ConfigChannel>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80039ee:	f000 fc39 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	3740      	adds	r7, #64	; 0x40
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20001dac 	.word	0x20001dac
 8003a00:	50000100 	.word	0x50000100
 8003a04:	7dc00000 	.word	0x7dc00000
 8003a08:	08600004 	.word	0x08600004
 8003a0c:	2a000400 	.word	0x2a000400

08003a10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <MX_CRC_Init+0x40>)
 8003a18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003a38:	4804      	ldr	r0, [pc, #16]	; (8003a4c <MX_CRC_Init+0x3c>)
 8003a3a:	f004 ff2d 	bl	8008898 <HAL_CRC_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003a44:	f000 fc0e 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20001e78 	.word	0x20001e78
 8003a50:	40023000 	.word	0x40023000

08003a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <MX_I2C1_Init+0x78>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <MX_I2C1_Init+0x7c>)
 8003a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a64:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a70:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a90:	f006 f828 	bl	8009ae4 <HAL_I2C_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a9a:	f000 fbe3 	bl	8004264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003aa2:	f006 f8ba 	bl	8009c1a <HAL_I2CEx_ConfigAnalogFilter>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003aac:	f000 fbda 	bl	8004264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003ab4:	f006 f8fc 	bl	8009cb0 <HAL_I2CEx_ConfigDigitalFilter>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003abe:	f000 fbd1 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20001e9c 	.word	0x20001e9c
 8003acc:	40005400 	.word	0x40005400
 8003ad0:	30a0a7fb 	.word	0x30a0a7fb

08003ad4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003ada:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <MX_SPI2_Init+0x78>)
 8003adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003ae8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003aec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003af0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003af4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b24:	2207      	movs	r2, #7
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b30:	2208      	movs	r2, #8
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b34:	4804      	ldr	r0, [pc, #16]	; (8003b48 <MX_SPI2_Init+0x74>)
 8003b36:	f008 fe0d 	bl	800c754 <HAL_SPI_Init>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003b40:	f000 fb90 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20001ef0 	.word	0x20001ef0
 8003b4c:	40003800 	.word	0x40003800

08003b50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b098      	sub	sp, #96	; 0x60
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	615a      	str	r2, [r3, #20]
 8003b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2234      	movs	r2, #52	; 0x34
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f013 fa60 	bl	8017042 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003b84:	4a41      	ldr	r2, [pc, #260]	; (8003c8c <MX_TIM1_Init+0x13c>)
 8003b86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8003b88:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003b8a:	2213      	movs	r2, #19
 8003b8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8003b94:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003b96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9c:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ba8:	4b37      	ldr	r3, [pc, #220]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bae:	4836      	ldr	r0, [pc, #216]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003bb0:	f009 fbd5 	bl	800d35e <HAL_TIM_PWM_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003bba:	f000 fb53 	bl	8004264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bce:	4619      	mov	r1, r3
 8003bd0:	482d      	ldr	r0, [pc, #180]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003bd2:	f00a ff27 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003bdc:	f000 fb42 	bl	8004264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003be0:	2360      	movs	r3, #96	; 0x60
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be8:	2300      	movs	r3, #0
 8003bea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bec:	2300      	movs	r3, #0
 8003bee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c00:	2200      	movs	r2, #0
 8003c02:	4619      	mov	r1, r3
 8003c04:	4820      	ldr	r0, [pc, #128]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003c06:	f00a f925 	bl	800de54 <HAL_TIM_PWM_ConfigChannel>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003c10:	f000 fb28 	bl	8004264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c18:	2208      	movs	r2, #8
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	481a      	ldr	r0, [pc, #104]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003c1e:	f00a f919 	bl	800de54 <HAL_TIM_PWM_ConfigChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003c28:	f000 fb1c 	bl	8004264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4807      	ldr	r0, [pc, #28]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003c6a:	f00a ff5d 	bl	800eb28 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003c74:	f000 faf6 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c78:	4803      	ldr	r0, [pc, #12]	; (8003c88 <MX_TIM1_Init+0x138>)
 8003c7a:	f001 faf3 	bl	8005264 <HAL_TIM_MspPostInit>

}
 8003c7e:	bf00      	nop
 8003c80:	3760      	adds	r7, #96	; 0x60
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001fb4 	.word	0x20001fb4
 8003c8c:	40012c00 	.word	0x40012c00

08003c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	; 0x30
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c96:	f107 030c 	add.w	r3, r7, #12
 8003c9a:	2224      	movs	r2, #36	; 0x24
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f013 f9cf 	bl	8017042 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	4619      	mov	r1, r3
 8003d00:	480c      	ldr	r0, [pc, #48]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003d02:	f009 fe03 	bl	800d90c <HAL_TIM_Encoder_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003d0c:	f000 faaa 	bl	8004264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d10:	2300      	movs	r3, #0
 8003d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <MX_TIM2_Init+0xa4>)
 8003d1e:	f00a fe81 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003d28:	f000 fa9c 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	3730      	adds	r7, #48	; 0x30
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20002000 	.word	0x20002000

08003d38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
 8003d58:	615a      	str	r2, [r3, #20]
 8003d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d5e:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <MX_TIM4_Init+0xb0>)
 8003d60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d64:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003d70:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d72:	220a      	movs	r2, #10
 8003d74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d82:	4818      	ldr	r0, [pc, #96]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003d84:	f009 faeb 	bl	800d35e <HAL_TIM_PWM_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003d8e:	f000 fa69 	bl	8004264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4810      	ldr	r0, [pc, #64]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003da2:	f00a fe3f 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003dac:	f000 fa5a 	bl	8004264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003db0:	2360      	movs	r3, #96	; 0x60
 8003db2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4807      	ldr	r0, [pc, #28]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003dc8:	f00a f844 	bl	800de54 <HAL_TIM_PWM_ConfigChannel>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003dd2:	f000 fa47 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003dd6:	4803      	ldr	r0, [pc, #12]	; (8003de4 <MX_TIM4_Init+0xac>)
 8003dd8:	f001 fa44 	bl	8005264 <HAL_TIM_MspPostInit>

}
 8003ddc:	bf00      	nop
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	2000204c 	.word	0x2000204c
 8003de8:	40000800 	.word	0x40000800

08003dec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003dfe:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <MX_TIM6_Init+0x68>)
 8003e00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003e04:	f244 2267 	movw	r2, #16999	; 0x4267
 8003e08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003e12:	22fa      	movs	r2, #250	; 0xfa
 8003e14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003e1c:	480c      	ldr	r0, [pc, #48]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003e1e:	f009 f9ad 	bl	800d17c <HAL_TIM_Base_Init>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003e28:	f000 fa1c 	bl	8004264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <MX_TIM6_Init+0x64>)
 8003e3a:	f00a fdf3 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003e44:	f000 fa0e 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20002098 	.word	0x20002098
 8003e54:	40001000 	.word	0x40001000

08003e58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <MX_TIM7_Init+0x7c>)
 8003e6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e70:	f242 1233 	movw	r2, #8499	; 0x2133
 8003e74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e7e:	2209      	movs	r2, #9
 8003e80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003e88:	4811      	ldr	r0, [pc, #68]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e8a:	f009 f977 	bl	800d17c <HAL_TIM_Base_Init>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003e94:	f000 f9e6 	bl	8004264 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003e98:	2108      	movs	r1, #8
 8003e9a:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003e9c:	f009 fce6 	bl	800d86c <HAL_TIM_OnePulse_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8003ea6:	f000 f9dd 	bl	8004264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <MX_TIM7_Init+0x78>)
 8003eb8:	f00a fdb4 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8003ec2:	f000 f9cf 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200020e4 	.word	0x200020e4
 8003ed4:	40001400 	.word	0x40001400

08003ed8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <MX_TIM8_Init+0x7c>)
 8003eec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003eee:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003f14:	2108      	movs	r1, #8
 8003f16:	480e      	ldr	r0, [pc, #56]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003f18:	f009 fca8 	bl	800d86c <HAL_TIM_OnePulse_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8003f22:	f000 f99f 	bl	8004264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4806      	ldr	r0, [pc, #24]	; (8003f50 <MX_TIM8_Init+0x78>)
 8003f38:	f00a fd74 	bl	800ea24 <HAL_TIMEx_MasterConfigSynchronization>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003f42:	f000 f98f 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20002130 	.word	0x20002130
 8003f54:	40013400 	.word	0x40013400

08003f58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f5e:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <MX_TIM16_Init+0x4c>)
 8003f60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f64:	f244 2267 	movw	r2, #16999	; 0x4267
 8003f68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f72:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003f76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_TIM16_Init+0x48>)
 8003f8c:	f009 f8f6 	bl	800d17c <HAL_TIM_Base_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003f96:	f000 f965 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000217c 	.word	0x2000217c
 8003fa4:	40014400 	.word	0x40014400

08003fa8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003fac:	4b14      	ldr	r3, [pc, #80]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <MX_TIM17_Init+0x5c>)
 8003fb0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fb4:	f244 2267 	movw	r2, #16999	; 0x4267
 8003fb8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fc2:	2231      	movs	r2, #49	; 0x31
 8003fc4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003fd8:	4809      	ldr	r0, [pc, #36]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fda:	f009 f8cf 	bl	800d17c <HAL_TIM_Base_Init>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003fe4:	f000 f93e 	bl	8004264 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003fe8:	2108      	movs	r1, #8
 8003fea:	4805      	ldr	r0, [pc, #20]	; (8004000 <MX_TIM17_Init+0x58>)
 8003fec:	f009 fc3e 	bl	800d86c <HAL_TIM_OnePulse_Init>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003ff6:	f000 f935 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200021c8 	.word	0x200021c8
 8004004:	40014800 	.word	0x40014800

08004008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <MX_USART1_UART_Init+0x90>)
 800400e:	4a23      	ldr	r2, [pc, #140]	; (800409c <MX_USART1_UART_Init+0x94>)
 8004010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004012:	4b21      	ldr	r3, [pc, #132]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800401a:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <MX_USART1_UART_Init+0x90>)
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <MX_USART1_UART_Init+0x90>)
 800402e:	220c      	movs	r2, #12
 8004030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <MX_USART1_UART_Init+0x90>)
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004040:	2200      	movs	r2, #0
 8004042:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <MX_USART1_UART_Init+0x90>)
 800404c:	2200      	movs	r2, #0
 800404e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004050:	4811      	ldr	r0, [pc, #68]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004052:	f00a fe60 	bl	800ed16 <HAL_UART_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800405c:	f000 f902 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004060:	2100      	movs	r1, #0
 8004062:	480d      	ldr	r0, [pc, #52]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004064:	f00b fbcc 	bl	800f800 <HAL_UARTEx_SetTxFifoThreshold>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800406e:	f000 f8f9 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004072:	2100      	movs	r1, #0
 8004074:	4808      	ldr	r0, [pc, #32]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004076:	f00b fc01 	bl	800f87c <HAL_UARTEx_SetRxFifoThreshold>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004080:	f000 f8f0 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004084:	4804      	ldr	r0, [pc, #16]	; (8004098 <MX_USART1_UART_Init+0x90>)
 8004086:	f00b fb82 	bl	800f78e <HAL_UARTEx_DisableFifoMode>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004090:	f000 f8e8 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004094:	bf00      	nop
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20002214 	.word	0x20002214
 800409c:	40013800 	.word	0x40013800

080040a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <MX_DMA_Init+0x60>)
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	4a15      	ldr	r2, [pc, #84]	; (8004100 <MX_DMA_Init+0x60>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6493      	str	r3, [r2, #72]	; 0x48
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <MX_DMA_Init+0x60>)
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <MX_DMA_Init+0x60>)
 80040c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c2:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <MX_DMA_Init+0x60>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6493      	str	r3, [r2, #72]	; 0x48
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <MX_DMA_Init+0x60>)
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	200b      	movs	r0, #11
 80040dc:	f004 fba7 	bl	800882e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040e0:	200b      	movs	r0, #11
 80040e2:	f004 fbbe 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	200d      	movs	r0, #13
 80040ec:	f004 fb9f 	bl	800882e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80040f0:	200d      	movs	r0, #13
 80040f2:	f004 fbb6 	bl	8008862 <HAL_NVIC_EnableIRQ>

}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000

08004104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411a:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <MX_GPIO_Init+0x154>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	4a4e      	ldr	r2, [pc, #312]	; (8004258 <MX_GPIO_Init+0x154>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004126:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <MX_GPIO_Init+0x154>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004132:	4b49      	ldr	r3, [pc, #292]	; (8004258 <MX_GPIO_Init+0x154>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	4a48      	ldr	r2, [pc, #288]	; (8004258 <MX_GPIO_Init+0x154>)
 8004138:	f043 0320 	orr.w	r3, r3, #32
 800413c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800413e:	4b46      	ldr	r3, [pc, #280]	; (8004258 <MX_GPIO_Init+0x154>)
 8004140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	4b43      	ldr	r3, [pc, #268]	; (8004258 <MX_GPIO_Init+0x154>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414e:	4a42      	ldr	r2, [pc, #264]	; (8004258 <MX_GPIO_Init+0x154>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004156:	4b40      	ldr	r3, [pc, #256]	; (8004258 <MX_GPIO_Init+0x154>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <MX_GPIO_Init+0x154>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <MX_GPIO_Init+0x154>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416e:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <MX_GPIO_Init+0x154>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800417a:	2200      	movs	r2, #0
 800417c:	f645 4107 	movw	r1, #23559	; 0x5c07
 8004180:	4836      	ldr	r0, [pc, #216]	; (800425c <MX_GPIO_Init+0x158>)
 8004182:	f005 fc7f 	bl	8009a84 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8004186:	2200      	movs	r2, #0
 8004188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800418c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004190:	f005 fc78 	bl	8009a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8004194:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	4619      	mov	r1, r3
 80041a8:	482d      	ldr	r0, [pc, #180]	; (8004260 <MX_GPIO_Init+0x15c>)
 80041aa:	f005 fad1 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 80041ae:	2370      	movs	r3, #112	; 0x70
 80041b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ba:	f107 0314 	add.w	r3, r7, #20
 80041be:	4619      	mov	r1, r3
 80041c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041c4:	f005 fac4 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80041d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	4619      	mov	r1, r3
 80041dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e0:	f005 fab6 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 80041e4:	f645 4307 	movw	r3, #23559	; 0x5c07
 80041e8:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f2:	2300      	movs	r3, #0
 80041f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4619      	mov	r1, r3
 80041fc:	4817      	ldr	r0, [pc, #92]	; (800425c <MX_GPIO_Init+0x158>)
 80041fe:	f005 faa7 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004208:	2301      	movs	r3, #1
 800420a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004210:	2300      	movs	r3, #0
 8004212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4619      	mov	r1, r3
 800421a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800421e:	f005 fa97 	bl	8009750 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004222:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004228:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800422c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4619      	mov	r1, r3
 8004238:	4808      	ldr	r0, [pc, #32]	; (800425c <MX_GPIO_Init+0x158>)
 800423a:	f005 fa89 	bl	8009750 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	2017      	movs	r0, #23
 8004244:	f004 faf3 	bl	800882e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004248:	2017      	movs	r0, #23
 800424a:	f004 fb0a 	bl	8008862 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800424e:	bf00      	nop
 8004250:	3728      	adds	r7, #40	; 0x28
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	48000400 	.word	0x48000400
 8004260:	48000800 	.word	0x48000800

08004264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004268:	b672      	cpsid	i
}
 800426a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800426c:	e7fe      	b.n	800426c <Error_Handler+0x8>

0800426e <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e008      	b.n	80042a8 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c0:	d4e9      	bmi.n	8004296 <Moving_Average_Init+0x28>
	}
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	441a      	add	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	edd3 7a00 	vldr	s15, [r3]
 800432a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	d507      	bpl.n	800434c <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 800434a:	e003      	b.n	8004354 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800436c:	ee16 0a90 	vmov	r0, s13
 8004370:	f7fc f912 	bl	8000598 <__aeabi_f2d>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	ec43 2b17 	vmov	d7, r2, r3
}
 800437c:	eeb0 0a47 	vmov.f32	s0, s14
 8004380:	eef0 0a67 	vmov.f32	s1, s15
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80043ba:	f7fc fbd5 	bl	8000b68 <__aeabi_dcmpgt>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80043d0:	e011      	b.n	80043f6 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80043de:	f7fc fba5 	bl	8000b2c <__aeabi_dcmplt>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d100      	bne.n	80043ea <PID_Init+0x60>
}
 80043e8:	e005      	b.n	80043f6 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6278      	str	r0, [r7, #36]	; 0x24
 8004408:	6239      	str	r1, [r7, #32]
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004412:	ed87 1b02 	vstr	d1, [r7, #8]
 8004416:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	2200      	movs	r2, #0
 8004430:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004432:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8004488 <PID+0x88>
 8004436:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004490 <PID+0x90>
 800443a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800443c:	f000 f991 	bl	8004762 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	2264      	movs	r2, #100	; 0x64
 8004444:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004446:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800444a:	4619      	mov	r1, r3
 800444c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800444e:	f000 fad9 	bl	8004a04 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8004452:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004456:	4619      	mov	r1, r3
 8004458:	ed97 2b00 	vldr	d2, [r7]
 800445c:	ed97 1b02 	vldr	d1, [r7, #8]
 8004460:	ed97 0b04 	vldr	d0, [r7, #16]
 8004464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004466:	f000 fa25 	bl	80048b4 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800446a:	f001 fdb1 	bl	8005fd0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	1ad2      	subs	r2, r2, r3
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	605a      	str	r2, [r3, #4]

}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	f3af 8000 	nop.w
 8004488:	00000000 	.word	0x00000000
 800448c:	406fe000 	.word	0x406fe000
	...

08004498 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b08c      	sub	sp, #48	; 0x30
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <PID_Compute+0x16>
	{
		return _FALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e136      	b.n	800471c <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80044ae:	f001 fd8f 	bl	8005fd0 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	6a3a      	ldr	r2, [r7, #32]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d204      	bcs.n	80044d2 <PID_Compute+0x3a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8124 	beq.w	800471a <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ea:	f7fb fef5 	bl	80002d8 <__aeabi_dsub>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80044fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004500:	f7fb feea 	bl	80002d8 <__aeabi_dsub>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800451c:	f7fc f894 	bl	8000648 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4650      	mov	r0, sl
 8004526:	4659      	mov	r1, fp
 8004528:	f7fb fed8 	bl	80002dc <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004542:	f7fc fb11 	bl	8000b68 <__aeabi_dcmpgt>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004558:	e010      	b.n	800457c <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004566:	f7fc fae1 	bl	8000b2c <__aeabi_dcmplt>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d114      	bne.n	80045ba <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800459c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a0:	f7fc f852 	bl	8000648 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4650      	mov	r0, sl
 80045aa:	4659      	mov	r1, fp
 80045ac:	f7fb fe94 	bl	80002d8 <__aeabi_dsub>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80045c6:	f7fc facf 	bl	8000b68 <__aeabi_dcmpgt>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80045dc:	e010      	b.n	8004600 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80045ea:	f7fc fa9f 	bl	8000b2c <__aeabi_dcmplt>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004606:	4690      	mov	r8, r2
 8004608:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800460c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004610:	4640      	mov	r0, r8
 8004612:	4649      	mov	r1, r9
 8004614:	f7fc f818 	bl	8000648 <__aeabi_dmul>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d017      	beq.n	800465a <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004634:	f7fc f808 	bl	8000648 <__aeabi_dmul>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004646:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800464a:	f7fb fffd 	bl	8000648 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004658:	e005      	b.n	8004666 <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004676:	f7fb ffe7 	bl	8000648 <__aeabi_dmul>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4640      	mov	r0, r8
 8004680:	4649      	mov	r1, r9
 8004682:	f7fb fe29 	bl	80002d8 <__aeabi_dsub>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800468e:	f7fb fe25 	bl	80002dc <__adddf3>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80046a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046a4:	f7fc fa60 	bl	8000b68 <__aeabi_dcmpgt>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80046b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80046b8:	e00e      	b.n	80046d8 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80046c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046c4:	f7fc fa32 	bl	8000b2c <__aeabi_dcmplt>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80046d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80046de:	4614      	mov	r4, r2
 80046e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80046e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e8:	4620      	mov	r0, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	f7fb ffac 	bl	8000648 <__aeabi_dmul>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80046fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004702:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 800471a:	2300      	movs	r3, #0
	}

}
 800471c:	4618      	mov	r0, r3
 800471e:	3730      	adds	r7, #48	; 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004726 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <PID_SetMode+0x2e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fe1b 	bl	800438a <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	705a      	strb	r2, [r3, #1]

}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	6178      	str	r0, [r7, #20]
 800476a:	ed87 0b02 	vstr	d0, [r7, #8]
 800476e:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8004772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800477a:	f7fc f9eb 	bl	8000b54 <__aeabi_dcmpge>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d158      	bne.n	8004836 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004794:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d04b      	beq.n	8004838 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80047ae:	f7fc f9db 	bl	8000b68 <__aeabi_dcmpgt>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80047c2:	e9c1 2300 	strd	r2, r3, [r1]
 80047c6:	e012      	b.n	80047ee <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80047d6:	f7fc f9a9 	bl	8000b2c <__aeabi_dcmplt>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80047ea:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80047fa:	f7fc f9b5 	bl	8000b68 <__aeabi_dcmpgt>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004810:	e012      	b.n	8004838 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800481e:	f7fc f985 	bl	8000b2c <__aeabi_dcmplt>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004834:	e000      	b.n	8004838 <PID_SetOutputLimits+0xd6>
		return;
 8004836:	bf00      	nop
		}
		else { }

	}

}
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6178      	str	r0, [r7, #20]
 8004846:	ed87 0b02 	vstr	d0, [r7, #8]
 800484a:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800484e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004856:	f7fc f97d 	bl	8000b54 <__aeabi_dcmpge>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004866:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004870:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8004874:	e000      	b.n	8004878 <PID_SetILimits+0x3a>
		return;
 8004876:	bf00      	nop
}
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af00      	add	r7, sp, #0
 8004884:	61f8      	str	r0, [r7, #28]
 8004886:	ed87 0b04 	vstr	d0, [r7, #16]
 800488a:	ed87 1b02 	vstr	d1, [r7, #8]
 800488e:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	789b      	ldrb	r3, [r3, #2]
 8004896:	4619      	mov	r1, r3
 8004898:	ed97 2b00 	vldr	d2, [r7]
 800489c:	ed97 1b02 	vldr	d1, [r7, #8]
 80048a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80048a4:	69f8      	ldr	r0, [r7, #28]
 80048a6:	f000 f805 	bl	80048b4 <PID_SetTunings2>
}
 80048aa:	bf00      	nop
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	61f8      	str	r0, [r7, #28]
 80048bc:	ed87 0b04 	vstr	d0, [r7, #16]
 80048c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80048c4:	ed87 2b00 	vstr	d2, [r7]
 80048c8:	460b      	mov	r3, r1
 80048ca:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048d8:	f7fc f928 	bl	8000b2c <__aeabi_dcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 8089 	bne.w	80049f6 <PID_SetTunings2+0x142>
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048f0:	f7fc f91c 	bl	8000b2c <__aeabi_dcmplt>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d17d      	bne.n	80049f6 <PID_SetTunings2+0x142>
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004906:	f7fc f911 	bl	8000b2c <__aeabi_dcmplt>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d172      	bne.n	80049f6 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	7efa      	ldrb	r2, [r7, #27]
 8004914:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8004916:	7efb      	ldrb	r3, [r7, #27]
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800492e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8004932:	69f9      	ldr	r1, [r7, #28]
 8004934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004938:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800493c:	69f9      	ldr	r1, [r7, #28]
 800493e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004942:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fb fe02 	bl	8000554 <__aeabi_ui2d>
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <PID_SetTunings2+0x14c>)
 8004956:	f7fb ffa1 	bl	800089c <__aeabi_ddiv>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8004962:	69f9      	ldr	r1, [r7, #28]
 8004964:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004968:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800496c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004974:	f7fb fe68 	bl	8000648 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	69f9      	ldr	r1, [r7, #28]
 800497e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8004982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498a:	f7fb ff87 	bl	800089c <__aeabi_ddiv>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	78db      	ldrb	r3, [r3, #3]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d12b      	bne.n	80049f8 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80049a6:	f04f 0000 	mov.w	r0, #0
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	f7fb fc93 	bl	80002d8 <__aeabi_dsub>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	f7fb fc85 	bl	80002d8 <__aeabi_dsub>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	69f9      	ldr	r1, [r7, #28]
 80049d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f7fb fc77 	bl	80002d8 <__aeabi_dsub>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80049f4:	e000      	b.n	80049f8 <PID_SetTunings2+0x144>
		return;
 80049f6:	bf00      	nop

	}

}
 80049f8:	3728      	adds	r7, #40	; 0x28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	408f4000 	.word	0x408f4000

08004a04 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02e      	beq.n	8004a76 <PID_SetControllerDirection+0x72>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d029      	beq.n	8004a76 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	f7fb fc52 	bl	80002d8 <__aeabi_dsub>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	f7fb fc44 	bl	80002d8 <__aeabi_dsub>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f7fb fc36 	bl	80002d8 <__aeabi_dsub>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	70da      	strb	r2, [r3, #3]

}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dd01      	ble.n	8004a9a <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 8004a96:	2301      	movs	r3, #1
 8004a98:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dd2e      	ble.n	8004b04 <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f7fb fd64 	bl	8000574 <__aeabi_i2d>
 8004aac:	4604      	mov	r4, r0
 8004aae:	460d      	mov	r5, r1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fd4d 	bl	8000554 <__aeabi_ui2d>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fb feeb 	bl	800089c <__aeabi_ddiv>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ad8:	f7fb fdb6 	bl	8000648 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	68f9      	ldr	r1, [r7, #12]
 8004ae2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004aec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004af0:	f7fb fed4 	bl	800089c <__aeabi_ddiv>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	609a      	str	r2, [r3, #8]

	}

}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bdb0      	pop	{r4, r5, r7, pc}

08004b0c <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004b1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b22:	eef0 0a67 	vmov.f32	s1, s15
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004b3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b42:	eeb0 0a47 	vmov.f32	s0, s14
 8004b46:	eef0 0a67 	vmov.f32	s1, s15
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b66:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6a:	eef0 0a67 	vmov.f32	s1, s15
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_MspInit+0x44>)
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_MspInit+0x44>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6613      	str	r3, [r2, #96]	; 0x60
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_MspInit+0x44>)
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_MspInit+0x44>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <HAL_MspInit+0x44>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_MspInit+0x44>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004bae:	f006 fea3 	bl	800b8f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000

08004bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b09e      	sub	sp, #120	; 0x78
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bd8:	f107 0320 	add.w	r3, r7, #32
 8004bdc:	2244      	movs	r2, #68	; 0x44
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f012 fa2e 	bl	8017042 <memset>
  if(hadc->Instance==ADC1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bee:	d171      	bne.n	8004cd4 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004bf6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bfc:	f107 0320 	add.w	r3, r7, #32
 8004c00:	4618      	mov	r0, r3
 8004c02:	f007 fbb7 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004c0c:	f7ff fb2a 	bl	8004264 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004c10:	4b64      	ldr	r3, [pc, #400]	; (8004da4 <HAL_ADC_MspInit+0x1e4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a63      	ldr	r2, [pc, #396]	; (8004da4 <HAL_ADC_MspInit+0x1e4>)
 8004c18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004c1a:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <HAL_ADC_MspInit+0x1e4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10b      	bne.n	8004c3a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004c22:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	4a60      	ldr	r2, [pc, #384]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004c28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c2e:	4b5e      	ldr	r3, [pc, #376]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3a:	4b5b      	ldr	r3, [pc, #364]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	4a5a      	ldr	r2, [pc, #360]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c46:	4b58      	ldr	r3, [pc, #352]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 8004c52:	230c      	movs	r3, #12
 8004c54:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c56:	2303      	movs	r3, #3
 8004c58:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c62:	4619      	mov	r1, r3
 8004c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c68:	f004 fd72 	bl	8009750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004c6c:	4b4f      	ldr	r3, [pc, #316]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c6e:	4a50      	ldr	r2, [pc, #320]	; (8004db0 <HAL_ADC_MspInit+0x1f0>)
 8004c70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004c72:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c74:	2205      	movs	r2, #5
 8004c76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c78:	4b4c      	ldr	r3, [pc, #304]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c7e:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c84:	4b49      	ldr	r3, [pc, #292]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c86:	2280      	movs	r2, #128	; 0x80
 8004c88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c8a:	4b48      	ldr	r3, [pc, #288]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c92:	4b46      	ldr	r3, [pc, #280]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c9a:	4b44      	ldr	r3, [pc, #272]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004ca0:	4b42      	ldr	r3, [pc, #264]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ca6:	4841      	ldr	r0, [pc, #260]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004ca8:	f003 fffc 	bl	8008ca4 <HAL_DMA_Init>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004cb2:	f7ff fad7 	bl	8004264 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a3c      	ldr	r2, [pc, #240]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
 8004cbc:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <HAL_ADC_MspInit+0x1ec>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	210a      	movs	r1, #10
 8004cc6:	2012      	movs	r0, #18
 8004cc8:	f003 fdb1 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004ccc:	2012      	movs	r0, #18
 8004cce:	f003 fdc8 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004cd2:	e062      	b.n	8004d9a <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a36      	ldr	r2, [pc, #216]	; (8004db4 <HAL_ADC_MspInit+0x1f4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d15d      	bne.n	8004d9a <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ce4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cea:	f107 0320 	add.w	r3, r7, #32
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f007 fb40 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004cfa:	f7ff fab3 	bl	8004264 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004cfe:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <HAL_ADC_MspInit+0x1e4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <HAL_ADC_MspInit+0x1e4>)
 8004d06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004d08:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_ADC_MspInit+0x1e4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10b      	bne.n	8004d28 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d28:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d2e:	f043 0320 	orr.w	r3, r3, #32
 8004d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d4c:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <HAL_ADC_MspInit+0x1e8>)
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8004d64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4813      	ldr	r0, [pc, #76]	; (8004db8 <HAL_ADC_MspInit+0x1f8>)
 8004d6c:	f004 fcf0 	bl	8009750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8004d70:	2302      	movs	r3, #2
 8004d72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d74:	2303      	movs	r3, #3
 8004d76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 8004d7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d80:	4619      	mov	r1, r3
 8004d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d86:	f004 fce3 	bl	8009750 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	210a      	movs	r1, #10
 8004d8e:	2012      	movs	r0, #18
 8004d90:	f003 fd4d 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d94:	2012      	movs	r0, #18
 8004d96:	f003 fd64 	bl	8008862 <HAL_NVIC_EnableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3778      	adds	r7, #120	; 0x78
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20002340 	.word	0x20002340
 8004da8:	40021000 	.word	0x40021000
 8004dac:	20001e18 	.word	0x20001e18
 8004db0:	40020030 	.word	0x40020030
 8004db4:	50000100 	.word	0x50000100
 8004db8:	48001400 	.word	0x48001400

08004dbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <HAL_CRC_MspInit+0x38>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10b      	bne.n	8004de6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_CRC_MspInit+0x3c>)
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_CRC_MspInit+0x3c>)
 8004dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dd8:	6493      	str	r3, [r2, #72]	; 0x48
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_CRC_MspInit+0x3c>)
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40023000 	.word	0x40023000
 8004df8:	40021000 	.word	0x40021000

08004dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b09c      	sub	sp, #112	; 0x70
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e14:	f107 0318 	add.w	r3, r7, #24
 8004e18:	2244      	movs	r2, #68	; 0x44
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f012 f910 	bl	8017042 <memset>
  if(hi2c->Instance==I2C1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <HAL_I2C_MspInit+0xe4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d154      	bne.n	8004ed6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e2c:	2340      	movs	r3, #64	; 0x40
 8004e2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e30:	2300      	movs	r3, #0
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e34:	f107 0318 	add.w	r3, r7, #24
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f007 fa9b 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004e44:	f7ff fa0e 	bl	8004264 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e48:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4c:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e54:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e60:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e7e:	2312      	movs	r3, #18
 8004e80:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e86:	2300      	movs	r3, #0
 8004e88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e92:	4619      	mov	r1, r3
 8004e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e98:	f004 fc5a 	bl	8009750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea2:	2312      	movs	r3, #18
 8004ea4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004eae:	2304      	movs	r3, #4
 8004eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480b      	ldr	r0, [pc, #44]	; (8004ee8 <HAL_I2C_MspInit+0xec>)
 8004eba:	f004 fc49 	bl	8009750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_I2C_MspInit+0xe8>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ed6:	bf00      	nop
 8004ed8:	3770      	adds	r7, #112	; 0x70
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40005400 	.word	0x40005400
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	48000400 	.word	0x48000400

08004eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <HAL_SPI_MspInit+0xd0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d151      	bne.n	8004fb2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <HAL_SPI_MspInit+0xd4>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	4a2b      	ldr	r2, [pc, #172]	; (8004fc0 <HAL_SPI_MspInit+0xd4>)
 8004f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f18:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1a:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <HAL_SPI_MspInit+0xd4>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <HAL_SPI_MspInit+0xd4>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <HAL_SPI_MspInit+0xd4>)
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f32:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <HAL_SPI_MspInit+0xd4>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f3e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f44:	2302      	movs	r3, #2
 8004f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f50:	2305      	movs	r3, #5
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4619      	mov	r1, r3
 8004f5a:	481a      	ldr	r0, [pc, #104]	; (8004fc4 <HAL_SPI_MspInit+0xd8>)
 8004f5c:	f004 fbf8 	bl	8009750 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f62:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <HAL_SPI_MspInit+0xe0>)
 8004f64:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f68:	220d      	movs	r2, #13
 8004f6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f6c:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f6e:	2210      	movs	r2, #16
 8004f70:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f78:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f7a:	2280      	movs	r2, #128	; 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f84:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004f96:	480c      	ldr	r0, [pc, #48]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004f98:	f003 fe84 	bl	8008ca4 <HAL_DMA_Init>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004fa2:	f7ff f95f 	bl	8004264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a07      	ldr	r2, [pc, #28]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <HAL_SPI_MspInit+0xdc>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fb2:	bf00      	nop
 8004fb4:	3728      	adds	r7, #40	; 0x28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40003800 	.word	0x40003800
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	48000400 	.word	0x48000400
 8004fc8:	20001f54 	.word	0x20001f54
 8004fcc:	40020008 	.word	0x40020008

08004fd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <HAL_TIM_PWM_MspInit+0x98>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d12c      	bne.n	800503c <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <HAL_TIM_PWM_MspInit+0x9c>)
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	4a21      	ldr	r2, [pc, #132]	; (800506c <HAL_TIM_PWM_MspInit+0x9c>)
 8004fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fec:	6613      	str	r3, [r2, #96]	; 0x60
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_TIM_PWM_MspInit+0x9c>)
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2018      	movs	r0, #24
 8005000:	f003 fc15 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005004:	2018      	movs	r0, #24
 8005006:	f003 fc2c 	bl	8008862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	2019      	movs	r0, #25
 8005010:	f003 fc0d 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005014:	2019      	movs	r0, #25
 8005016:	f003 fc24 	bl	8008862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	2100      	movs	r1, #0
 800501e:	201a      	movs	r0, #26
 8005020:	f003 fc05 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005024:	201a      	movs	r0, #26
 8005026:	f003 fc1c 	bl	8008862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800502a:	2200      	movs	r2, #0
 800502c:	2100      	movs	r1, #0
 800502e:	201b      	movs	r0, #27
 8005030:	f003 fbfd 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005034:	201b      	movs	r0, #27
 8005036:	f003 fc14 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800503a:	e010      	b.n	800505e <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <HAL_TIM_PWM_MspInit+0xa0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10b      	bne.n	800505e <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_TIM_PWM_MspInit+0x9c>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <HAL_TIM_PWM_MspInit+0x9c>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	6593      	str	r3, [r2, #88]	; 0x58
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_TIM_PWM_MspInit+0x9c>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40021000 	.word	0x40021000
 8005070:	40000800 	.word	0x40000800

08005074 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d144      	bne.n	8005120 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	4a23      	ldr	r2, [pc, #140]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6593      	str	r3, [r2, #88]	; 0x58
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050d2:	4b15      	ldr	r3, [pc, #84]	; (8005128 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 80050de:	2301      	movs	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e2:	2302      	movs	r3, #2
 80050e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	4619      	mov	r1, r3
 80050f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050fc:	f004 fb28 	bl	8009750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8005100:	2308      	movs	r3, #8
 8005102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005104:	2302      	movs	r3, #2
 8005106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510c:	2300      	movs	r3, #0
 800510e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005110:	2301      	movs	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	4619      	mov	r1, r3
 800511a:	4804      	ldr	r0, [pc, #16]	; (800512c <HAL_TIM_Encoder_MspInit+0xb8>)
 800511c:	f004 fb18 	bl	8009750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005120:	bf00      	nop
 8005122:	3728      	adds	r7, #40	; 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	48000400 	.word	0x48000400

08005130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a34      	ldr	r2, [pc, #208]	; (8005210 <HAL_TIM_Base_MspInit+0xe0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d114      	bne.n	800516c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	4a33      	ldr	r2, [pc, #204]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 8005148:	f043 0310 	orr.w	r3, r3, #16
 800514c:	6593      	str	r3, [r2, #88]	; 0x58
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	2036      	movs	r0, #54	; 0x36
 8005160:	f003 fb65 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005164:	2036      	movs	r0, #54	; 0x36
 8005166:	f003 fb7c 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800516a:	e04c      	b.n	8005206 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <HAL_TIM_Base_MspInit+0xe8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d114      	bne.n	80051a0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005176:	4b27      	ldr	r3, [pc, #156]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	4a26      	ldr	r2, [pc, #152]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 800517c:	f043 0320 	orr.w	r3, r3, #32
 8005180:	6593      	str	r3, [r2, #88]	; 0x58
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800518e:	2200      	movs	r2, #0
 8005190:	2100      	movs	r1, #0
 8005192:	2037      	movs	r0, #55	; 0x37
 8005194:	f003 fb4b 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005198:	2037      	movs	r0, #55	; 0x37
 800519a:	f003 fb62 	bl	8008862 <HAL_NVIC_EnableIRQ>
}
 800519e:	e032      	b.n	8005206 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <HAL_TIM_Base_MspInit+0xec>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d114      	bne.n	80051d4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b4:	6613      	str	r3, [r2, #96]	; 0x60
 80051b6:	4b17      	ldr	r3, [pc, #92]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	2019      	movs	r0, #25
 80051c8:	f003 fb31 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80051cc:	2019      	movs	r0, #25
 80051ce:	f003 fb48 	bl	8008862 <HAL_NVIC_EnableIRQ>
}
 80051d2:	e018      	b.n	8005206 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a11      	ldr	r2, [pc, #68]	; (8005220 <HAL_TIM_Base_MspInit+0xf0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d113      	bne.n	8005206 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 80051e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e8:	6613      	str	r3, [r2, #96]	; 0x60
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_TIM_Base_MspInit+0xe4>)
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	201a      	movs	r0, #26
 80051fc:	f003 fb17 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005200:	201a      	movs	r0, #26
 8005202:	f003 fb2e 	bl	8008862 <HAL_NVIC_EnableIRQ>
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40001000 	.word	0x40001000
 8005214:	40021000 	.word	0x40021000
 8005218:	40001400 	.word	0x40001400
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <HAL_TIM_OnePulse_MspInit+0x38>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d10b      	bne.n	800524e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800523c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005240:	6613      	str	r3, [r2, #96]	; 0x60
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40013400 	.word	0x40013400
 8005260:	40021000 	.word	0x40021000

08005264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	609a      	str	r2, [r3, #8]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_TIM_MspPostInit+0xa8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d11c      	bne.n	80052c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005286:	4b22      	ldr	r3, [pc, #136]	; (8005310 <HAL_TIM_MspPostInit+0xac>)
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_TIM_MspPostInit+0xac>)
 800528c:	f043 0320 	orr.w	r3, r3, #32
 8005290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005292:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <HAL_TIM_MspPostInit+0xac>)
 8005294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a2:	2302      	movs	r3, #2
 80052a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052aa:	2300      	movs	r3, #0
 80052ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80052ae:	2306      	movs	r3, #6
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80052b2:	f107 0314 	add.w	r3, r7, #20
 80052b6:	4619      	mov	r1, r3
 80052b8:	4816      	ldr	r0, [pc, #88]	; (8005314 <HAL_TIM_MspPostInit+0xb0>)
 80052ba:	f004 fa49 	bl	8009750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80052be:	e020      	b.n	8005302 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a14      	ldr	r2, [pc, #80]	; (8005318 <HAL_TIM_MspPostInit+0xb4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d11b      	bne.n	8005302 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_TIM_MspPostInit+0xac>)
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	4a10      	ldr	r2, [pc, #64]	; (8005310 <HAL_TIM_MspPostInit+0xac>)
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052d6:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <HAL_TIM_MspPostInit+0xac>)
 80052d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e6:	2302      	movs	r3, #2
 80052e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ee:	2300      	movs	r3, #0
 80052f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80052f2:	2302      	movs	r3, #2
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80052f6:	f107 0314 	add.w	r3, r7, #20
 80052fa:	4619      	mov	r1, r3
 80052fc:	4807      	ldr	r0, [pc, #28]	; (800531c <HAL_TIM_MspPostInit+0xb8>)
 80052fe:	f004 fa27 	bl	8009750 <HAL_GPIO_Init>
}
 8005302:	bf00      	nop
 8005304:	3728      	adds	r7, #40	; 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40021000 	.word	0x40021000
 8005314:	48001400 	.word	0x48001400
 8005318:	40000800 	.word	0x40000800
 800531c:	48000400 	.word	0x48000400

08005320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b09a      	sub	sp, #104	; 0x68
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005338:	f107 0310 	add.w	r3, r7, #16
 800533c:	2244      	movs	r2, #68	; 0x44
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f011 fe7e 	bl	8017042 <memset>
  if(huart->Instance==USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <HAL_UART_MspInit+0xa8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d137      	bne.n	80053c0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005350:	2301      	movs	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005358:	f107 0310 	add.w	r3, r7, #16
 800535c:	4618      	mov	r0, r3
 800535e:	f007 f809 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005368:	f7fe ff7c 	bl	8004264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800536c:	4b17      	ldr	r3, [pc, #92]	; (80053cc <HAL_UART_MspInit+0xac>)
 800536e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <HAL_UART_MspInit+0xac>)
 8005372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005376:	6613      	str	r3, [r2, #96]	; 0x60
 8005378:	4b14      	ldr	r3, [pc, #80]	; (80053cc <HAL_UART_MspInit+0xac>)
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005384:	4b11      	ldr	r3, [pc, #68]	; (80053cc <HAL_UART_MspInit+0xac>)
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	4a10      	ldr	r2, [pc, #64]	; (80053cc <HAL_UART_MspInit+0xac>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <HAL_UART_MspInit+0xac>)
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800539c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053a0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	2302      	movs	r3, #2
 80053a4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053aa:	2300      	movs	r3, #0
 80053ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053ae:	2307      	movs	r3, #7
 80053b0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053b6:	4619      	mov	r1, r3
 80053b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053bc:	f004 f9c8 	bl	8009750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053c0:	bf00      	nop
 80053c2:	3768      	adds	r7, #104	; 0x68
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40013800 	.word	0x40013800
 80053cc:	40021000 	.word	0x40021000

080053d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053d4:	e7fe      	b.n	80053d4 <NMI_Handler+0x4>

080053d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053d6:	b480      	push	{r7}
 80053d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053da:	e7fe      	b.n	80053da <HardFault_Handler+0x4>

080053dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053e0:	e7fe      	b.n	80053e0 <MemManage_Handler+0x4>

080053e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053e2:	b480      	push	{r7}
 80053e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053e6:	e7fe      	b.n	80053e6 <BusFault_Handler+0x4>

080053e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053ec:	e7fe      	b.n	80053ec <UsageFault_Handler+0x4>

080053ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800541c:	f000 fdc6 	bl	8005fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}

08005424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <DMA1_Channel1_IRQHandler+0x10>)
 800542a:	f003 fdb7 	bl	8008f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20001f54 	.word	0x20001f54

08005438 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800543c:	4802      	ldr	r0, [pc, #8]	; (8005448 <DMA1_Channel3_IRQHandler+0x10>)
 800543e:	f003 fdad 	bl	8008f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20001e18 	.word	0x20001e18

0800544c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005450:	4803      	ldr	r0, [pc, #12]	; (8005460 <ADC1_2_IRQHandler+0x14>)
 8005452:	f001 fd27 	bl	8006ea4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005456:	4803      	ldr	r0, [pc, #12]	; (8005464 <ADC1_2_IRQHandler+0x18>)
 8005458:	f001 fd24 	bl	8006ea4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800545c:	bf00      	nop
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20001d40 	.word	0x20001d40
 8005464:	20001dac 	.word	0x20001dac

08005468 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <USB_LP_IRQHandler+0x10>)
 800546e:	f004 fd5b 	bl	8009f28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200030b0 	.word	0x200030b0

0800547c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005480:	2020      	movs	r0, #32
 8005482:	f004 fb17 	bl	8009ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8005486:	2080      	movs	r0, #128	; 0x80
 8005488:	f004 fb14 	bl	8009ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 800548c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005490:	f004 fb10 	bl	8009ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005494:	bf00      	nop
 8005496:	bd80      	pop	{r7, pc}

08005498 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800549e:	f008 fb89 	bl	800dbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20001fb4 	.word	0x20001fb4

080054ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054b0:	4803      	ldr	r0, [pc, #12]	; (80054c0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80054b2:	f008 fb7f 	bl	800dbb4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80054b6:	4803      	ldr	r0, [pc, #12]	; (80054c4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80054b8:	f008 fb7c 	bl	800dbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80054bc:	bf00      	nop
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20001fb4 	.word	0x20001fb4
 80054c4:	2000217c 	.word	0x2000217c

080054c8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054cc:	4803      	ldr	r0, [pc, #12]	; (80054dc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80054ce:	f008 fb71 	bl	800dbb4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80054d2:	4803      	ldr	r0, [pc, #12]	; (80054e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80054d4:	f008 fb6e 	bl	800dbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80054d8:	bf00      	nop
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20001fb4 	.word	0x20001fb4
 80054e0:	200021c8 	.word	0x200021c8

080054e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054e8:	4802      	ldr	r0, [pc, #8]	; (80054f4 <TIM1_CC_IRQHandler+0x10>)
 80054ea:	f008 fb63 	bl	800dbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20001fb4 	.word	0x20001fb4

080054f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054fc:	4802      	ldr	r0, [pc, #8]	; (8005508 <TIM6_DAC_IRQHandler+0x10>)
 80054fe:	f008 fb59 	bl	800dbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20002098 	.word	0x20002098

0800550c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005510:	4802      	ldr	r0, [pc, #8]	; (800551c <TIM7_IRQHandler+0x10>)
 8005512:	f008 fb4f 	bl	800dbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200020e4 	.word	0x200020e4

08005520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return 1;
 8005524:	2301      	movs	r3, #1
}
 8005526:	4618      	mov	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_kill>:

int _kill(int pid, int sig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800553a:	f011 fdd5 	bl	80170e8 <__errno>
 800553e:	4603      	mov	r3, r0
 8005540:	2216      	movs	r2, #22
 8005542:	601a      	str	r2, [r3, #0]
  return -1;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <_exit>:

void _exit (int status)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005558:	f04f 31ff 	mov.w	r1, #4294967295
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ffe7 	bl	8005530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005562:	e7fe      	b.n	8005562 <_exit+0x12>

08005564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e00a      	b.n	800558c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005576:	f3af 8000 	nop.w
 800557a:	4601      	mov	r1, r0
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	60ba      	str	r2, [r7, #8]
 8005582:	b2ca      	uxtb	r2, r1
 8005584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3301      	adds	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	dbf0      	blt.n	8005576 <_read+0x12>
  }

  return len;
 8005594:	687b      	ldr	r3, [r7, #4]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e009      	b.n	80055c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	60ba      	str	r2, [r7, #8]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	3301      	adds	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	dbf1      	blt.n	80055b0 <_write+0x12>
  }
  return len;
 80055cc:	687b      	ldr	r3, [r7, #4]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <_close>:

int _close(int file)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055fe:	605a      	str	r2, [r3, #4]
  return 0;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <_isatty>:

int _isatty(int file)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005616:	2301      	movs	r3, #1
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005648:	4a14      	ldr	r2, [pc, #80]	; (800569c <_sbrk+0x5c>)
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <_sbrk+0x60>)
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005654:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <_sbrk+0x64>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <_sbrk+0x64>)
 800565e:	4a12      	ldr	r2, [pc, #72]	; (80056a8 <_sbrk+0x68>)
 8005660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <_sbrk+0x64>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4413      	add	r3, r2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d207      	bcs.n	8005680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005670:	f011 fd3a 	bl	80170e8 <__errno>
 8005674:	4603      	mov	r3, r0
 8005676:	220c      	movs	r2, #12
 8005678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	e009      	b.n	8005694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <_sbrk+0x64>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <_sbrk+0x64>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <_sbrk+0x64>)
 8005690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20008000 	.word	0x20008000
 80056a0:	00000400 	.word	0x00000400
 80056a4:	20002344 	.word	0x20002344
 80056a8:	200036f8 	.word	0x200036f8

080056ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <SystemInit+0x20>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	4a05      	ldr	r2, [pc, #20]	; (80056cc <SystemInit+0x20>)
 80056b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056d0:	480d      	ldr	r0, [pc, #52]	; (8005708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80056d4:	f7ff ffea 	bl	80056ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 80056d8:	480c      	ldr	r0, [pc, #48]	; (800570c <LoopForever+0x6>)
  ldr r1, =_edata
 80056da:	490d      	ldr	r1, [pc, #52]	; (8005710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056dc:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <LoopForever+0xe>)
  movs r3, #0
 80056de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80056e0:	e002      	b.n	80056e8 <LoopCopyDataInit>

080056e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056e6:	3304      	adds	r3, #4

080056e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056ec:	d3f9      	bcc.n	80056e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056f0:	4c0a      	ldr	r4, [pc, #40]	; (800571c <LoopForever+0x16>)
  movs r3, #0
 80056f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056f4:	e001      	b.n	80056fa <LoopFillZerobss>

080056f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056f8:	3204      	adds	r2, #4

080056fa <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 80056fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056fc:	d3fb      	bcc.n	80056f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80056fe:	f011 fcf9 	bl	80170f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005702:	f7fd fd99 	bl	8003238 <main>

08005706 <LoopForever>:

LoopForever:
    b LoopForever
 8005706:	e7fe      	b.n	8005706 <LoopForever>
  ldr   r0, =_estack
 8005708:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 800570c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005710:	20000540 	.word	0x20000540
  ldr r2, =_sidata
 8005714:	0801da20 	.word	0x0801da20
  ldr r2, =_sbss
 8005718:	20000540 	.word	0x20000540
  ldr r4, =_ebss
 800571c:	200036f8 	.word	0x200036f8

08005720 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005720:	e7fe      	b.n	8005720 <COMP1_2_3_IRQHandler>
	...

08005724 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <setSPI_Size+0x54>)
 8005730:	f993 3000 	ldrsb.w	r3, [r3]
 8005734:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005738:	429a      	cmp	r2, r3
 800573a:	d017      	beq.n	800576c <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <setSPI_Size+0x58>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b0e      	ldr	r3, [pc, #56]	; (800577c <setSPI_Size+0x58>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574a:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <setSPI_Size+0x54>)
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8005752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d104      	bne.n	8005764 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <setSPI_Size+0x58>)
 800575c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005760:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8005762:	e003      	b.n	800576c <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <setSPI_Size+0x58>)
 8005766:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800576a:	60da      	str	r2, [r3, #12]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200001c8 	.word	0x200001c8
 800577c:	20001ef0 	.word	0x20001ef0

08005780 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	460a      	mov	r2, r1
 800578a:	71fb      	strb	r3, [r7, #7]
 800578c:	4613      	mov	r3, r2
 800578e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8005790:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ffc5 	bl	8005724 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800579a:	4b3c      	ldr	r3, [pc, #240]	; (800588c <setDMAMemMode+0x10c>)
 800579c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80057a0:	461a      	mov	r2, r3
 80057a2:	79bb      	ldrb	r3, [r7, #6]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d106      	bne.n	80057b6 <setDMAMemMode+0x36>
 80057a8:	4b38      	ldr	r3, [pc, #224]	; (800588c <setDMAMemMode+0x10c>)
 80057aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80057ae:	461a      	mov	r2, r3
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d066      	beq.n	8005884 <setDMAMemMode+0x104>
    config.dma_sz =size;
 80057b6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <setDMAMemMode+0x10c>)
 80057bc:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80057be:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80057c2:	4b32      	ldr	r3, [pc, #200]	; (800588c <setDMAMemMode+0x10c>)
 80057c4:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80057c6:	4b32      	ldr	r3, [pc, #200]	; (8005890 <setDMAMemMode+0x110>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b30      	ldr	r3, [pc, #192]	; (8005890 <setDMAMemMode+0x110>)
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 80057da:	bf00      	nop
 80057dc:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <setDMAMemMode+0x110>)
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f7      	bne.n	80057dc <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d10e      	bne.n	8005810 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80057f2:	4b27      	ldr	r3, [pc, #156]	; (8005890 <setDMAMemMode+0x110>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80057fa:	4b25      	ldr	r3, [pc, #148]	; (8005890 <setDMAMemMode+0x110>)
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b23      	ldr	r3, [pc, #140]	; (8005890 <setDMAMemMode+0x110>)
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e00d      	b.n	800582c <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <setDMAMemMode+0x110>)
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	2200      	movs	r2, #0
 8005816:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <setDMAMemMode+0x110>)
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <setDMAMemMode+0x110>)
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800582a:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 800582c:	79bb      	ldrb	r3, [r7, #6]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d116      	bne.n	8005860 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <setDMAMemMode+0x110>)
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800583a:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800583c:	4b14      	ldr	r3, [pc, #80]	; (8005890 <setDMAMemMode+0x110>)
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005844:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <setDMAMemMode+0x110>)
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <setDMAMemMode+0x110>)
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 800585c:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800585e:	e011      	b.n	8005884 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <setDMAMemMode+0x110>)
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	2200      	movs	r2, #0
 8005866:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <setDMAMemMode+0x110>)
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	2200      	movs	r2, #0
 800586e:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <setDMAMemMode+0x110>)
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <setDMAMemMode+0x110>)
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200001c8 	.word	0x200001c8
 8005890:	20001ef0 	.word	0x20001ef0

08005894 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7ff ff3f 	bl	8005724 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80058a6:	2200      	movs	r2, #0
 80058a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058ac:	4815      	ldr	r0, [pc, #84]	; (8005904 <LCD_WriteCommand+0x70>)
 80058ae:	f004 f8e9 	bl	8009a84 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058b8:	4812      	ldr	r0, [pc, #72]	; (8005904 <LCD_WriteCommand+0x70>)
 80058ba:	f004 f8e3 	bl	8009a84 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	2201      	movs	r2, #1
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4810      	ldr	r0, [pc, #64]	; (8005908 <LCD_WriteCommand+0x74>)
 80058c8:	f006 ffef 	bl	800c8aa <HAL_SPI_Transmit>
  if(argc){
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80058d2:	2201      	movs	r2, #1
 80058d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058d8:	480a      	ldr	r0, [pc, #40]	; (8005904 <LCD_WriteCommand+0x70>)
 80058da:	f004 f8d3 	bl	8009a84 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	4807      	ldr	r0, [pc, #28]	; (8005908 <LCD_WriteCommand+0x74>)
 80058ec:	f006 ffdd 	bl	800c8aa <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80058f0:	2201      	movs	r2, #1
 80058f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f6:	4803      	ldr	r0, [pc, #12]	; (8005904 <LCD_WriteCommand+0x70>)
 80058f8:	f004 f8c4 	bl	8009a84 <HAL_GPIO_WritePin>
#endif
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	48000400 	.word	0x48000400
 8005908:	20001ef0 	.word	0x20001ef0

0800590c <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005916:	2201      	movs	r2, #1
 8005918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800591c:	4830      	ldr	r0, [pc, #192]	; (80059e0 <LCD_WriteData+0xd4>)
 800591e:	f004 f8b1 	bl	8009a84 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8005922:	2200      	movs	r2, #0
 8005924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005928:	482d      	ldr	r0, [pc, #180]	; (80059e0 <LCD_WriteData+0xd4>)
 800592a:	f004 f8ab 	bl	8009a84 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800592e:	e049      	b.n	80059c4 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005936:	4293      	cmp	r3, r2
 8005938:	bf28      	it	cs
 800593a:	4613      	movcs	r3, r2
 800593c:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b20      	cmp	r3, #32
 8005942:	d924      	bls.n	800598e <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	461a      	mov	r2, r3
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4826      	ldr	r0, [pc, #152]	; (80059e4 <LCD_WriteData+0xd8>)
 800594c:	f007 f922 	bl	800cb94 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8005950:	bf00      	nop
 8005952:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <LCD_WriteData+0xd8>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	4618      	mov	r0, r3
 8005958:	f003 fbcf 	bl	80090fa <HAL_DMA_GetState>
 800595c:	4603      	mov	r3, r0
 800595e:	2b01      	cmp	r3, #1
 8005960:	d1f7      	bne.n	8005952 <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <LCD_WriteData+0xdc>)
 8005964:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d127      	bne.n	80059bc <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <LCD_WriteData+0xdc>)
 800596e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d104      	bne.n	8005980 <LCD_WriteData+0x74>
          buff += chunk_size;
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4413      	add	r3, r2
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	e01d      	b.n	80059bc <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8005980:	89fb      	ldrh	r3, [r7, #14]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	e016      	b.n	80059bc <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800598e:	89fa      	ldrh	r2, [r7, #14]
 8005990:	f04f 33ff 	mov.w	r3, #4294967295
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4813      	ldr	r0, [pc, #76]	; (80059e4 <LCD_WriteData+0xd8>)
 8005998:	f006 ff87 	bl	800c8aa <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 800599c:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <LCD_WriteData+0xdc>)
 800599e:	f993 3000 	ldrsb.w	r3, [r3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d104      	bne.n	80059b0 <LCD_WriteData+0xa4>
        buff += chunk_size;
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	e005      	b.n	80059bc <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80059b0:	89fb      	ldrh	r3, [r7, #14]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	461a      	mov	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80059bc:	89fb      	ldrh	r3, [r7, #14]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1b2      	bne.n	8005930 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80059ca:	2201      	movs	r2, #1
 80059cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059d0:	4803      	ldr	r0, [pc, #12]	; (80059e0 <LCD_WriteData+0xd4>)
 80059d2:	f004 f857 	bl	8009a84 <HAL_GPIO_WritePin>
#endif
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	48000400 	.word	0x48000400
 80059e4:	20001ef0 	.word	0x20001ef0
 80059e8:	200001c8 	.word	0x200001c8

080059ec <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b08b      	sub	sp, #44	; 0x2c
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4623      	mov	r3, r4
 80059fc:	80fb      	strh	r3, [r7, #6]
 80059fe:	4603      	mov	r3, r0
 8005a00:	80bb      	strh	r3, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	807b      	strh	r3, [r7, #2]
 8005a06:	4613      	mov	r3, r2
 8005a08:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a0e:	887b      	ldrh	r3, [r7, #2]
 8005a10:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8005a12:	88bb      	ldrh	r3, [r7, #4]
 8005a14:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a16:	883b      	ldrh	r3, [r7, #0]
 8005a18:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005a1a:	232a      	movs	r3, #42	; 0x2a
 8005a1c:	763b      	strb	r3, [r7, #24]
 8005a1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005a22:	121b      	asrs	r3, r3, #8
 8005a24:	b21b      	sxth	r3, r3
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	767b      	strb	r3, [r7, #25]
 8005a2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	76bb      	strb	r3, [r7, #26]
 8005a30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a34:	121b      	asrs	r3, r3, #8
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005a42:	f107 0318 	add.w	r3, r7, #24
 8005a46:	2104      	movs	r1, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ff23 	bl	8005894 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8005a4e:	232b      	movs	r3, #43	; 0x2b
 8005a50:	743b      	strb	r3, [r7, #16]
 8005a52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005a56:	121b      	asrs	r3, r3, #8
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	747b      	strb	r3, [r7, #17]
 8005a5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	74bb      	strb	r3, [r7, #18]
 8005a64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005a68:	121b      	asrs	r3, r3, #8
 8005a6a:	b21b      	sxth	r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	74fb      	strb	r3, [r7, #19]
 8005a70:	8c3b      	ldrh	r3, [r7, #32]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005a76:	f107 0310 	add.w	r3, r7, #16
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff ff09 	bl	8005894 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8005a82:	232c      	movs	r3, #44	; 0x2c
 8005a84:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005a86:	f107 030c 	add.w	r3, r7, #12
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff01 	bl	8005894 <LCD_WriteCommand>
  }
}
 8005a92:	bf00      	nop
 8005a94:	372c      	adds	r7, #44	; 0x2c
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd90      	pop	{r4, r7, pc}
	...

08005a9c <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	80fb      	strh	r3, [r7, #6]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	80bb      	strh	r3, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8005aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	db39      	blt.n	8005b2a <LCD_DrawPixel+0x8e>
 8005ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aba:	2bef      	cmp	r3, #239	; 0xef
 8005abc:	dc35      	bgt.n	8005b2a <LCD_DrawPixel+0x8e>
 8005abe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	db31      	blt.n	8005b2a <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8005ac6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005aca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ace:	da2c      	bge.n	8005b2a <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8005ad0:	887b      	ldrh	r3, [r7, #2]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	733b      	strb	r3, [r7, #12]
 8005ada:	887b      	ldrh	r3, [r7, #2]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8005ae0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ae4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ae8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005aec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005af0:	f7ff ff7c 	bl	80059ec <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005af4:	2201      	movs	r2, #1
 8005af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005afa:	480e      	ldr	r0, [pc, #56]	; (8005b34 <LCD_DrawPixel+0x98>)
 8005afc:	f003 ffc2 	bl	8009a84 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8005b00:	2200      	movs	r2, #0
 8005b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b06:	480b      	ldr	r0, [pc, #44]	; (8005b34 <LCD_DrawPixel+0x98>)
 8005b08:	f003 ffbc 	bl	8009a84 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005b0c:	f107 010c 	add.w	r1, r7, #12
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	2202      	movs	r2, #2
 8005b16:	4808      	ldr	r0, [pc, #32]	; (8005b38 <LCD_DrawPixel+0x9c>)
 8005b18:	f006 fec7 	bl	800c8aa <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b22:	4804      	ldr	r0, [pc, #16]	; (8005b34 <LCD_DrawPixel+0x98>)
 8005b24:	f003 ffae 	bl	8009a84 <HAL_GPIO_WritePin>
 8005b28:	e000      	b.n	8005b2c <LCD_DrawPixel+0x90>
    return;
 8005b2a:	bf00      	nop
#endif
}
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	48000400 	.word	0x48000400
 8005b38:	20001ef0 	.word	0x20001ef0

08005b3c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b094      	sub	sp, #80	; 0x50
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d905      	bls.n	8005b5a <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8005b4e:	1cbb      	adds	r3, r7, #2
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff feda 	bl	800590c <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8005b58:	e026      	b.n	8005ba8 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5e:	e009      	b.n	8005b74 <LCD_FillPixels+0x38>
      fill[t]=color;
 8005b60:	887a      	ldrh	r2, [r7, #2]
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	3350      	adds	r3, #80	; 0x50
 8005b68:	443b      	add	r3, r7
 8005b6a:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b70:	3301      	adds	r3, #1
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	bf28      	it	cs
 8005b7a:	2320      	movcs	r3, #32
 8005b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3ee      	bcc.n	8005b60 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8005b82:	e00e      	b.n	8005ba2 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	bf28      	it	cs
 8005b8a:	2320      	movcs	r3, #32
 8005b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff feb9 	bl	800590c <LCD_WriteData>
      pixels-=sz;
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ed      	bne.n	8005b84 <LCD_FillPixels+0x48>
}
 8005ba8:	bf00      	nop
 8005baa:	3750      	adds	r7, #80	; 0x50
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	80fb      	strh	r3, [r7, #6]
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	80bb      	strh	r3, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	807b      	strh	r3, [r7, #2]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8005bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d105      	bne.n	8005be4 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f7ff fdd0 	bl	8005780 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e014      	b.n	8005c0e <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8005be4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005be8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005bec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005bf0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005bf4:	f7ff fefa 	bl	80059ec <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f7ff fdc0 	bl	8005780 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005c00:	2201      	movs	r2, #1
 8005c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c06:	4804      	ldr	r0, [pc, #16]	; (8005c18 <LCD_FillArea+0x68>)
 8005c08:	f003 ff3c 	bl	8009a84 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005c0c:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <LCD_FillArea+0x6c>)
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd90      	pop	{r4, r7, pc}
 8005c16:	bf00      	nop
 8005c18:	48000400 	.word	0x48000400
 8005c1c:	08005b3d 	.word	0x08005b3d

08005c20 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4623      	mov	r3, r4
 8005c30:	80fb      	strh	r3, [r7, #6]
 8005c32:	4603      	mov	r3, r0
 8005c34:	80bb      	strh	r3, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	807b      	strh	r3, [r7, #2]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8005c3e:	887a      	ldrh	r2, [r7, #2]
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	3301      	adds	r3, #1
 8005c46:	4619      	mov	r1, r3
 8005c48:	883a      	ldrh	r2, [r7, #0]
 8005c4a:	88bb      	ldrh	r3, [r7, #4]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8005c56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005c62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c66:	f7ff fec1 	bl	80059ec <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f7ff fd87 	bl	8005780 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8005c72:	8c3b      	ldrh	r3, [r7, #32]
 8005c74:	4619      	mov	r1, r3
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff ff60 	bl	8005b3c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f7ff fd7e 	bl	8005780 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd90      	pop	{r4, r7, pc}

08005c8e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8005c8e:	b590      	push	{r4, r7, lr}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	603a      	str	r2, [r7, #0]
 8005c98:	80fb      	strh	r3, [r7, #6]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	889b      	ldrh	r3, [r3, #4]
 8005ca2:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	88db      	ldrh	r3, [r3, #6]
 8005ca8:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	2bef      	cmp	r3, #239	; 0xef
 8005cae:	d839      	bhi.n	8005d24 <LCD_DrawImage+0x96>
 8005cb0:	88bb      	ldrh	r3, [r7, #4]
 8005cb2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005cb6:	d235      	bcs.n	8005d24 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	89fb      	ldrh	r3, [r7, #14]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	2bf0      	cmp	r3, #240	; 0xf0
 8005cc0:	dc32      	bgt.n	8005d28 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8005cc2:	88ba      	ldrh	r2, [r7, #4]
 8005cc4:	89bb      	ldrh	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ccc:	dc2e      	bgt.n	8005d2c <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	7a1b      	ldrb	r3, [r3, #8]
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d12c      	bne.n	8005d30 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8005cd6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005cda:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	b21c      	sxth	r4, r3
 8005cec:	88ba      	ldrh	r2, [r7, #4]
 8005cee:	89bb      	ldrh	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	b21b      	sxth	r3, r3
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	f7ff fe76 	bl	80059ec <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005d00:	2101      	movs	r1, #1
 8005d02:	2001      	movs	r0, #1
 8005d04:	f7ff fd3c 	bl	8005780 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	89fb      	ldrh	r3, [r7, #14]
 8005d0e:	89ba      	ldrh	r2, [r7, #12]
 8005d10:	fb02 f303 	mul.w	r3, r2, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	f7ff fdf9 	bl	800590c <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f7ff fd2f 	bl	8005780 <setDMAMemMode>
 8005d22:	e006      	b.n	8005d32 <LCD_DrawImage+0xa4>
    return;
 8005d24:	bf00      	nop
 8005d26:	e004      	b.n	8005d32 <LCD_DrawImage+0xa4>
    return;
 8005d28:	bf00      	nop
 8005d2a:	e002      	b.n	8005d32 <LCD_DrawImage+0xa4>
    return;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <LCD_DrawImage+0xa4>
    return;
 8005d30:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd90      	pop	{r4, r7, pc}

08005d38 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	80fb      	strh	r3, [r7, #6]
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	80bb      	strh	r3, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	807b      	strh	r3, [r7, #2]
 8005d52:	4613      	mov	r3, r2
 8005d54:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	887b      	ldrh	r3, [r7, #2]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d10a      	bne.n	8005d74 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8005d5e:	88ba      	ldrh	r2, [r7, #4]
 8005d60:	883b      	ldrh	r3, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d918      	bls.n	8005d98 <LCD_DrawLine+0x60>
 8005d66:	88bb      	ldrh	r3, [r7, #4]
 8005d68:	81bb      	strh	r3, [r7, #12]
 8005d6a:	883b      	ldrh	r3, [r7, #0]
 8005d6c:	80bb      	strh	r3, [r7, #4]
 8005d6e:	89bb      	ldrh	r3, [r7, #12]
 8005d70:	803b      	strh	r3, [r7, #0]
 8005d72:	e011      	b.n	8005d98 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8005d74:	88ba      	ldrh	r2, [r7, #4]
 8005d76:	883b      	ldrh	r3, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d10a      	bne.n	8005d92 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	887b      	ldrh	r3, [r7, #2]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d909      	bls.n	8005d98 <LCD_DrawLine+0x60>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	81fb      	strh	r3, [r7, #14]
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	80fb      	strh	r3, [r7, #6]
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
 8005d8e:	807b      	strh	r3, [r7, #2]
 8005d90:	e002      	b.n	8005d98 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e009      	b.n	8005dac <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005d98:	883c      	ldrh	r4, [r7, #0]
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	88b9      	ldrh	r1, [r7, #4]
 8005d9e:	88f8      	ldrh	r0, [r7, #6]
 8005da0:	8c3b      	ldrh	r3, [r7, #32]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	4623      	mov	r3, r4
 8005da6:	f7ff ff3b 	bl	8005c20 <LCD_Fill>
  return UG_RESULT_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd90      	pop	{r4, r7, pc}

08005db4 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60ba      	str	r2, [r7, #8]
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	81fb      	strh	r3, [r7, #14]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f00c fa10 	bl	80121ec <UG_FontSelect>
  UG_SetForecolor(color);
 8005dcc:	8b3b      	ldrh	r3, [r7, #24]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f00c fd58 	bl	8012884 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8005dd4:	8bbb      	ldrh	r3, [r7, #28]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f00c fd66 	bl	80128a8 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005ddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005de0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f00c fcb4 	bl	8012754 <UG_PutString>
}
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <LCD_setPower+0x14>
 8005e04:	2329      	movs	r3, #41	; 0x29
 8005e06:	e000      	b.n	8005e0a <LCD_setPower+0x16>
 8005e08:	2328      	movs	r3, #40	; 0x28
 8005e0a:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005e0c:	f107 030c 	add.w	r3, r7, #12
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fd3e 	bl	8005894 <LCD_WriteCommand>
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <LCD_Update>:

static void LCD_Update(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005e24:	2100      	movs	r1, #0
 8005e26:	2001      	movs	r0, #1
 8005e28:	f7ff fcaa 	bl	8005780 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005e2c:	bf00      	nop
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005e36:	2201      	movs	r2, #1
 8005e38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e3c:	482a      	ldr	r0, [pc, #168]	; (8005ee8 <LCD_init+0xb8>)
 8005e3e:	f003 fe21 	bl	8009a84 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8005e42:	2200      	movs	r2, #0
 8005e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e48:	4827      	ldr	r0, [pc, #156]	; (8005ee8 <LCD_init+0xb8>)
 8005e4a:	f003 fe1b 	bl	8009a84 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f000 f8ca 	bl	8005fe8 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005e54:	2201      	movs	r2, #1
 8005e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e5a:	4823      	ldr	r0, [pc, #140]	; (8005ee8 <LCD_init+0xb8>)
 8005e5c:	f003 fe12 	bl	8009a84 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8005e60:	20c8      	movs	r0, #200	; 0xc8
 8005e62:	f000 f8c1 	bl	8005fe8 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005e66:	4921      	ldr	r1, [pc, #132]	; (8005eec <LCD_init+0xbc>)
 8005e68:	4821      	ldr	r0, [pc, #132]	; (8005ef0 <LCD_init+0xc0>)
 8005e6a:	f00c f925 	bl	80120b8 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8005e6e:	4921      	ldr	r1, [pc, #132]	; (8005ef4 <LCD_init+0xc4>)
 8005e70:	2000      	movs	r0, #0
 8005e72:	f00d fdaf 	bl	80139d4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005e76:	4920      	ldr	r1, [pc, #128]	; (8005ef8 <LCD_init+0xc8>)
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f00d fdab 	bl	80139d4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005e7e:	491f      	ldr	r1, [pc, #124]	; (8005efc <LCD_init+0xcc>)
 8005e80:	2002      	movs	r0, #2
 8005e82:	f00d fda7 	bl	80139d4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005e86:	491e      	ldr	r1, [pc, #120]	; (8005f00 <LCD_init+0xd0>)
 8005e88:	2003      	movs	r0, #3
 8005e8a:	f00d fda3 	bl	80139d4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f00c fd1c 	bl	80128cc <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005e94:	2000      	movs	r0, #0
 8005e96:	f00c fd2d 	bl	80128f4 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	80fb      	strh	r3, [r7, #6]
 8005e9e:	e013      	b.n	8005ec8 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <LCD_init+0xd4>)
 8005ea6:	441a      	add	r2, r3
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	4916      	ldr	r1, [pc, #88]	; (8005f04 <LCD_init+0xd4>)
 8005eac:	5ccb      	ldrb	r3, [r1, r3]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f7ff fcef 	bl	8005894 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <LCD_init+0xd4>)
 8005eba:	5cd3      	ldrb	r3, [r2, r3]
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b4b      	cmp	r3, #75	; 0x4b
 8005ecc:	d9e8      	bls.n	8005ea0 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f00c f99c 	bl	801220c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	f7ff ff8d 	bl	8005df4 <LCD_setPower>
  UG_Update();
 8005eda:	f00d fd9d 	bl	8013a18 <UG_Update>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	48000400 	.word	0x48000400
 8005eec:	200001cc 	.word	0x200001cc
 8005ef0:	20002348 	.word	0x20002348
 8005ef4:	08005d39 	.word	0x08005d39
 8005ef8:	08005c21 	.word	0x08005c21
 8005efc:	08005bb1 	.word	0x08005bb1
 8005f00:	08005c8f 	.word	0x08005c8f
 8005f04:	0801adbc 	.word	0x0801adbc

08005f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f12:	2003      	movs	r0, #3
 8005f14:	f002 fc80 	bl	8008818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f18:	200f      	movs	r0, #15
 8005f1a:	f000 f80d 	bl	8005f38 <HAL_InitTick>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	71fb      	strb	r3, [r7, #7]
 8005f28:	e001      	b.n	8005f2e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f2a:	f7fe fe25 	bl	8004b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f2e:	79fb      	ldrb	r3, [r7, #7]

}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005f44:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <HAL_InitTick+0x68>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d022      	beq.n	8005f92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <HAL_InitTick+0x6c>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <HAL_InitTick+0x68>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	4618      	mov	r0, r3
 8005f62:	f002 fc8c 	bl	800887e <HAL_SYSTICK_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10f      	bne.n	8005f8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d809      	bhi.n	8005f86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f72:	2200      	movs	r2, #0
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	f002 fc58 	bl	800882e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <HAL_InitTick+0x70>)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	e007      	b.n	8005f96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e004      	b.n	8005f96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	e001      	b.n	8005f96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	200001dc 	.word	0x200001dc
 8005fa4:	200001c4 	.word	0x200001c4
 8005fa8:	200001d8 	.word	0x200001d8

08005fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_IncTick+0x1c>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_IncTick+0x20>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	4a03      	ldr	r2, [pc, #12]	; (8005fc8 <HAL_IncTick+0x1c>)
 8005fbc:	6013      	str	r3, [r2, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	200023bc 	.word	0x200023bc
 8005fcc:	200001dc 	.word	0x200001dc

08005fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <HAL_GetTick+0x14>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	200023bc 	.word	0x200023bc

08005fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ff0:	f7ff ffee 	bl	8005fd0 <HAL_GetTick>
 8005ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d004      	beq.n	800600c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_Delay+0x40>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800600c:	bf00      	nop
 800600e:	f7ff ffdf 	bl	8005fd0 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	429a      	cmp	r2, r3
 800601c:	d8f7      	bhi.n	800600e <HAL_Delay+0x26>
  {
  }
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	200001dc 	.word	0x200001dc

0800602c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3360      	adds	r3, #96	; 0x60
 80060a6:	461a      	mov	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <LL_ADC_SetOffset+0x44>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80060cc:	bf00      	nop
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	03fff000 	.word	0x03fff000

080060dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3360      	adds	r3, #96	; 0x60
 80060ea:	461a      	mov	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3360      	adds	r3, #96	; 0x60
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	431a      	orrs	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3360      	adds	r3, #96	; 0x60
 800614e:	461a      	mov	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3360      	adds	r3, #96	; 0x60
 8006184:	461a      	mov	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	431a      	orrs	r2, r3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	615a      	str	r2, [r3, #20]
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3330      	adds	r3, #48	; 0x30
 8006206:	461a      	mov	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	4413      	add	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	211f      	movs	r1, #31
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	43db      	mvns	r3, r3
 8006228:	401a      	ands	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0e9b      	lsrs	r3, r3, #26
 800622e:	f003 011f 	and.w	r1, r3, #31
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	fa01 f303 	lsl.w	r3, r1, r3
 800623c:	431a      	orrs	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3314      	adds	r3, #20
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	0e5b      	lsrs	r3, r3, #25
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	4413      	add	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	0d1b      	lsrs	r3, r3, #20
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2107      	movs	r1, #7
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	401a      	ands	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	431a      	orrs	r2, r3
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0318 	and.w	r3, r3, #24
 80062ee:	4908      	ldr	r1, [pc, #32]	; (8006310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80062f0:	40d9      	lsrs	r1, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	400b      	ands	r3, r1
 80062f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fa:	431a      	orrs	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	0007ffff 	.word	0x0007ffff

08006314 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	330c      	adds	r3, #12
 8006324:	4618      	mov	r0, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	0d1b      	lsrs	r3, r3, #20
 800632a:	f003 0103 	and.w	r1, r3, #3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f003 0201 	and.w	r2, r3, #1
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4403      	add	r3, r0
 8006342:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800634e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006352:	43db      	mvns	r3, r3
 8006354:	401a      	ands	r2, r3
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	400b      	ands	r3, r1
 800635c:	431a      	orrs	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3320      	adds	r3, #32
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	0d1b      	lsrs	r3, r3, #20
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	4413      	add	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0419      	lsls	r1, r3, #16
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	430b      	orrs	r3, r1
 80063a0:	431a      	orrs	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 031f 	and.w	r3, r3, #31
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80063fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6093      	str	r3, [r2, #8]
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800641e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006422:	d101      	bne.n	8006428 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006446:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800644a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006472:	d101      	bne.n	8006478 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006496:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064c2:	f043 0202 	orr.w	r2, r3, #2
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <LL_ADC_IsEnabled+0x18>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <LL_ADC_IsEnabled+0x1a>
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b02      	cmp	r3, #2
 800650e:	d101      	bne.n	8006514 <LL_ADC_IsDisableOngoing+0x18>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <LL_ADC_IsDisableOngoing+0x1a>
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006532:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800655a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800655e:	f043 0210 	orr.w	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b04      	cmp	r3, #4
 8006584:	d101      	bne.n	800658a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d101      	bne.n	80065d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2280      	movs	r2, #128	; 0x80
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662a:	601a      	str	r2, [r3, #0]
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	605a      	str	r2, [r3, #4]
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	605a      	str	r2, [r3, #4]
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	605a      	str	r2, [r3, #4]
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	605a      	str	r2, [r3, #4]
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80066f8:	b590      	push	{r4, r7, lr}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e167      	b.n	80069e2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fe fa4d 	bl	8004bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fe68 	bl	800640e <LL_ADC_IsDeepPowerDownEnabled>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fe4e 	bl	80063ea <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fe83 	bl	800645e <LL_ADC_IsInternalRegulatorEnabled>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d115      	bne.n	800678a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fe67 	bl	8006436 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006768:	4ba0      	ldr	r3, [pc, #640]	; (80069ec <HAL_ADC_Init+0x2f4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	099b      	lsrs	r3, r3, #6
 800676e:	4aa0      	ldr	r2, [pc, #640]	; (80069f0 <HAL_ADC_Init+0x2f8>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	099b      	lsrs	r3, r3, #6
 8006776:	3301      	adds	r3, #1
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800677c:	e002      	b.n	8006784 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3b01      	subs	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f9      	bne.n	800677e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fe65 	bl	800645e <LL_ADC_IsInternalRegulatorEnabled>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679e:	f043 0210 	orr.w	r2, r3, #16
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067aa:	f043 0201 	orr.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fed9 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 80067c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 8100 	bne.w	80069d0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 80fc 	bne.w	80069d0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fe72 	bl	80064d6 <LL_ADC_IsEnabled>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d111      	bne.n	800681c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80067fc:	f7ff fe6b 	bl	80064d6 <LL_ADC_IsEnabled>
 8006800:	4604      	mov	r4, r0
 8006802:	487c      	ldr	r0, [pc, #496]	; (80069f4 <HAL_ADC_Init+0x2fc>)
 8006804:	f7ff fe67 	bl	80064d6 <LL_ADC_IsEnabled>
 8006808:	4603      	mov	r3, r0
 800680a:	4323      	orrs	r3, r4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4619      	mov	r1, r3
 8006816:	4878      	ldr	r0, [pc, #480]	; (80069f8 <HAL_ADC_Init+0x300>)
 8006818:	f7ff fc08 	bl	800602c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7f5b      	ldrb	r3, [r3, #29]
 8006820:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006826:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800682c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006832:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800683a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006846:	2b01      	cmp	r3, #1
 8006848:	d106      	bne.n	8006858 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	3b01      	subs	r3, #1
 8006850:	045b      	lsls	r3, r3, #17
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	4313      	orrs	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	4b60      	ldr	r3, [pc, #384]	; (80069fc <HAL_ADC_Init+0x304>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	69b9      	ldr	r1, [r7, #24]
 8006884:	430b      	orrs	r3, r1
 8006886:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fe8c 	bl	80065c0 <LL_ADC_INJ_IsConversionOngoing>
 80068a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d16d      	bne.n	800698c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d16a      	bne.n	800698c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d2:	f023 0302 	bic.w	r3, r3, #2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	69b9      	ldr	r1, [r7, #24]
 80068dc:	430b      	orrs	r3, r1
 80068de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d017      	beq.n	8006918 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80068f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006900:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6911      	ldr	r1, [r2, #16]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006916:	e013      	b.n	8006940 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006926:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800693c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006946:	2b01      	cmp	r3, #1
 8006948:	d118      	bne.n	800697c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006960:	4311      	orrs	r1, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800696c:	430a      	orrs	r2, r1
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0201 	orr.w	r2, r2, #1
 8006978:	611a      	str	r2, [r3, #16]
 800697a:	e007      	b.n	800698c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0201 	bic.w	r2, r2, #1
 800698a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d10c      	bne.n	80069ae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	f023 010f 	bic.w	r1, r3, #15
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	1e5a      	subs	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
 80069ac:	e007      	b.n	80069be <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 020f 	bic.w	r2, r2, #15
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c2:	f023 0303 	bic.w	r3, r3, #3
 80069c6:	f043 0201 	orr.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80069ce:	e007      	b.n	80069e0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d4:	f043 0210 	orr.w	r2, r3, #16
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80069e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3724      	adds	r7, #36	; 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd90      	pop	{r4, r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200001c4 	.word	0x200001c4
 80069f0:	053e2d63 	.word	0x053e2d63
 80069f4:	50000100 	.word	0x50000100
 80069f8:	50000300 	.word	0x50000300
 80069fc:	fff04007 	.word	0xfff04007

08006a00 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a08:	4893      	ldr	r0, [pc, #588]	; (8006c58 <HAL_ADC_Start_IT+0x258>)
 8006a0a:	f7ff fcd2 	bl	80063b2 <LL_ADC_GetMultimode>
 8006a0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fdac 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f040 8113 	bne.w	8006c48 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_ADC_Start_IT+0x30>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e10e      	b.n	8006c4e <HAL_ADC_Start_IT+0x24e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fb19 	bl	8008070 <ADC_Enable>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 80fa 	bne.w	8006c3e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7e      	ldr	r2, [pc, #504]	; (8006c5c <HAL_ADC_Start_IT+0x25c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d002      	beq.n	8006a6e <HAL_ADC_Start_IT+0x6e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	e001      	b.n	8006a72 <HAL_ADC_Start_IT+0x72>
 8006a6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d002      	beq.n	8006a80 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	f023 0206 	bic.w	r2, r3, #6
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	661a      	str	r2, [r3, #96]	; 0x60
 8006aa4:	e002      	b.n	8006aac <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	221c      	movs	r2, #28
 8006ab2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 021c 	bic.w	r2, r2, #28
 8006aca:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d108      	bne.n	8006ae6 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0208 	orr.w	r2, r2, #8
 8006ae2:	605a      	str	r2, [r3, #4]
          break;
 8006ae4:	e008      	b.n	8006af8 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0204 	orr.w	r2, r2, #4
 8006af4:	605a      	str	r2, [r3, #4]
          break;
 8006af6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0210 	orr.w	r2, r2, #16
 8006b0e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a51      	ldr	r2, [pc, #324]	; (8006c5c <HAL_ADC_Start_IT+0x25c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d002      	beq.n	8006b20 <HAL_ADC_Start_IT+0x120>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	e001      	b.n	8006b24 <HAL_ADC_Start_IT+0x124>
 8006b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d008      	beq.n	8006b3e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d002      	beq.n	8006b3e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b09      	cmp	r3, #9
 8006b3c:	d13a      	bne.n	8006bb4 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02d      	beq.n	8006ba8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d110      	bne.n	8006b86 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0220 	bic.w	r2, r2, #32
 8006b72:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b82:	605a      	str	r2, [r3, #4]
              break;
 8006b84:	e010      	b.n	8006ba8 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b94:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0220 	orr.w	r2, r2, #32
 8006ba4:	605a      	str	r2, [r3, #4]
              break;
 8006ba6:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fcb8 	bl	8006522 <LL_ADC_REG_StartConversion>
 8006bb2:	e04b      	b.n	8006c4c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <HAL_ADC_Start_IT+0x25c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d002      	beq.n	8006bd0 <HAL_ADC_Start_IT+0x1d0>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	e001      	b.n	8006bd4 <HAL_ADC_Start_IT+0x1d4>
 8006bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006bd4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d034      	beq.n	8006c4c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d110      	bne.n	8006c1c <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0220 	bic.w	r2, r2, #32
 8006c08:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c18:	605a      	str	r2, [r3, #4]
              break;
 8006c1a:	e017      	b.n	8006c4c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0220 	orr.w	r2, r2, #32
 8006c3a:	605a      	str	r2, [r3, #4]
              break;
 8006c3c:	e006      	b.n	8006c4c <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006c46:	e001      	b.n	8006c4c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	50000300 	.word	0x50000300
 8006c5c:	50000100 	.word	0x50000100

08006c60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c6c:	4851      	ldr	r0, [pc, #324]	; (8006db4 <HAL_ADC_Start_DMA+0x154>)
 8006c6e:	f7ff fba0 	bl	80063b2 <LL_ADC_GetMultimode>
 8006c72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fc7a 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 808f 	bne.w	8006da4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_ADC_Start_DMA+0x34>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e08a      	b.n	8006daa <HAL_ADC_Start_DMA+0x14a>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d002      	beq.n	8006cae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d173      	bne.n	8006d96 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f001 f9de 	bl	8008070 <ADC_Enable>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d166      	bne.n	8006d8c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a38      	ldr	r2, [pc, #224]	; (8006db8 <HAL_ADC_Start_DMA+0x158>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d002      	beq.n	8006ce2 <HAL_ADC_Start_DMA+0x82>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	e001      	b.n	8006ce6 <HAL_ADC_Start_DMA+0x86>
 8006ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d002      	beq.n	8006cf4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d10:	f023 0206 	bic.w	r2, r3, #6
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60
 8006d18:	e002      	b.n	8006d20 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <HAL_ADC_Start_DMA+0x15c>)
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <HAL_ADC_Start_DMA+0x160>)
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <HAL_ADC_Start_DMA+0x164>)
 8006d36:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	221c      	movs	r2, #28
 8006d3e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0210 	orr.w	r2, r2, #16
 8006d56:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3340      	adds	r3, #64	; 0x40
 8006d72:	4619      	mov	r1, r3
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f002 f83c 	bl	8008df4 <HAL_DMA_Start_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fbcc 	bl	8006522 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006d8a:	e00d      	b.n	8006da8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006d94:	e008      	b.n	8006da8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006da2:	e001      	b.n	8006da8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
 8006da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	50000300 	.word	0x50000300
 8006db8:	50000100 	.word	0x50000100
 8006dbc:	0800823b 	.word	0x0800823b
 8006dc0:	08008313 	.word	0x08008313
 8006dc4:	0800832f 	.word	0x0800832f

08006dc8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_ADC_Stop_DMA+0x16>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e051      	b.n	8006e82 <HAL_ADC_Stop_DMA+0xba>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006de6:	2103      	movs	r1, #3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f885 	bl	8007ef8 <ADC_ConversionStop>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d13f      	bne.n	8006e78 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d10f      	bne.n	8006e36 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f002 f865 	bl	8008eea <HAL_DMA_Abort>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0210 	bic.w	r2, r2, #16
 8006e44:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d105      	bne.n	8006e58 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f995 	bl	800817c <ADC_Disable>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
 8006e56:	e002      	b.n	8006e5e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f98f 	bl	800817c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	f043 0201 	orr.w	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006eac:	2300      	movs	r3, #0
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ec0:	4883      	ldr	r0, [pc, #524]	; (80070d0 <HAL_ADC_IRQHandler+0x22c>)
 8006ec2:	f7ff fa76 	bl	80063b2 <LL_ADC_GetMultimode>
 8006ec6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d017      	beq.n	8006f02 <HAL_ADC_IRQHandler+0x5e>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d012      	beq.n	8006f02 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eec:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fb11 	bl	800851c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2202      	movs	r2, #2
 8006f00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_ADC_IRQHandler+0x72>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8085 	beq.w	800702c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d07f      	beq.n	800702c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff f941 	bl	80061d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d064      	beq.n	800701e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a5e      	ldr	r2, [pc, #376]	; (80070d4 <HAL_ADC_IRQHandler+0x230>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d002      	beq.n	8006f64 <HAL_ADC_IRQHandler+0xc0>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	e001      	b.n	8006f68 <HAL_ADC_IRQHandler+0xc4>
 8006f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d008      	beq.n	8006f82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	d002      	beq.n	8006f82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d104      	bne.n	8006f8c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	e00d      	b.n	8006fa8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a50      	ldr	r2, [pc, #320]	; (80070d4 <HAL_ADC_IRQHandler+0x230>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d002      	beq.n	8006f9c <HAL_ADC_IRQHandler+0xf8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	e001      	b.n	8006fa0 <HAL_ADC_IRQHandler+0xfc>
 8006f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006fa0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d135      	bne.n	800701e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d12e      	bne.n	800701e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fad4 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d11a      	bne.n	8007006 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 020c 	bic.w	r2, r2, #12
 8006fde:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d112      	bne.n	800701e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffc:	f043 0201 	orr.w	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	65da      	str	r2, [r3, #92]	; 0x5c
 8007004:	e00b      	b.n	800701e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700a:	f043 0210 	orr.w	r2, r3, #16
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fc f8b6 	bl	8003190 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	220c      	movs	r2, #12
 800702a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <HAL_ADC_IRQHandler+0x19c>
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 809e 	beq.w	8007188 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8098 	beq.w	8007188 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	d105      	bne.n	8007070 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007068:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff f8ea 	bl	800624e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800707a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff f8a5 	bl	80061d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007086:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a11      	ldr	r2, [pc, #68]	; (80070d4 <HAL_ADC_IRQHandler+0x230>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d002      	beq.n	8007098 <HAL_ADC_IRQHandler+0x1f4>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	e001      	b.n	800709c <HAL_ADC_IRQHandler+0x1f8>
 8007098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d008      	beq.n	80070b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b06      	cmp	r3, #6
 80070ae:	d002      	beq.n	80070b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b07      	cmp	r3, #7
 80070b4:	d104      	bne.n	80070c0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	e011      	b.n	80070e4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a03      	ldr	r2, [pc, #12]	; (80070d4 <HAL_ADC_IRQHandler+0x230>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d006      	beq.n	80070d8 <HAL_ADC_IRQHandler+0x234>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	e005      	b.n	80070dc <HAL_ADC_IRQHandler+0x238>
 80070d0:	50000300 	.word	0x50000300
 80070d4:	50000100 	.word	0x50000100
 80070d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80070dc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d047      	beq.n	800717a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <HAL_ADC_IRQHandler+0x260>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d03f      	beq.n	800717a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13a      	bne.n	800717a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d133      	bne.n	800717a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d12e      	bne.n	800717a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff fa4d 	bl	80065c0 <LL_ADC_INJ_IsConversionOngoing>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11a      	bne.n	8007162 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800713a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007140:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007150:	2b00      	cmp	r3, #0
 8007152:	d112      	bne.n	800717a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	f043 0201 	orr.w	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007160:	e00b      	b.n	800717a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007166:	f043 0210 	orr.w	r2, r3, #16
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007172:	f043 0201 	orr.w	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f9a6 	bl	80084cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2260      	movs	r2, #96	; 0x60
 8007186:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b00      	cmp	r3, #0
 8007190:	d011      	beq.n	80071b6 <HAL_ADC_IRQHandler+0x312>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fc f83b 	bl	8003224 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2280      	movs	r2, #128	; 0x80
 80071b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d012      	beq.n	80071e6 <HAL_ADC_IRQHandler+0x342>
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00d      	beq.n	80071e6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 f98c 	bl	80084f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d012      	beq.n	8007216 <HAL_ADC_IRQHandler+0x372>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 f97e 	bl	8008508 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d036      	beq.n	800728e <HAL_ADC_IRQHandler+0x3ea>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	d031      	beq.n	800728e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007232:	2301      	movs	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
 8007236:	e014      	b.n	8007262 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800723e:	4825      	ldr	r0, [pc, #148]	; (80072d4 <HAL_ADC_IRQHandler+0x430>)
 8007240:	f7ff f8c5 	bl	80063ce <LL_ADC_GetMultiDMATransfer>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800724a:	2301      	movs	r3, #1
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
 800724e:	e008      	b.n	8007262 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800725e:	2301      	movs	r3, #1
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10e      	bne.n	8007286 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007278:	f043 0202 	orr.w	r2, r3, #2
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f833 	bl	80072ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2210      	movs	r2, #16
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007294:	2b00      	cmp	r3, #0
 8007296:	d018      	beq.n	80072ca <HAL_ADC_IRQHandler+0x426>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b2:	f043 0208 	orr.w	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f90b 	bl	80084e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80072ca:	bf00      	nop
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	50000300 	.word	0x50000300

080072d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b0b6      	sub	sp, #216	; 0xd8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_ADC_ConfigChannel+0x22>
 800731e:	2302      	movs	r3, #2
 8007320:	e3c8      	b.n	8007ab4 <HAL_ADC_ConfigChannel+0x7b4>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff f91f 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 83ad 	bne.w	8007a96 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	f7fe ff54 	bl	80061f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff f90d 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8007358:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff f92d 	bl	80065c0 <LL_ADC_INJ_IsConversionOngoing>
 8007366:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800736a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800736e:	2b00      	cmp	r3, #0
 8007370:	f040 81d9 	bne.w	8007726 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 81d4 	bne.w	8007726 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007386:	d10f      	bne.n	80073a8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2200      	movs	r2, #0
 8007392:	4619      	mov	r1, r3
 8007394:	f7fe ff6e 	bl	8006274 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe ff02 	bl	80061aa <LL_ADC_SetSamplingTimeCommonConfig>
 80073a6:	e00e      	b.n	80073c6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	6819      	ldr	r1, [r3, #0]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	461a      	mov	r2, r3
 80073b6:	f7fe ff5d 	bl	8006274 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fef2 	bl	80061aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695a      	ldr	r2, [r3, #20]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	08db      	lsrs	r3, r3, #3
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d022      	beq.n	800742e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	6919      	ldr	r1, [r3, #16]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073f8:	f7fe fe4c 	bl	8006094 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	6919      	ldr	r1, [r3, #16]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	461a      	mov	r2, r3
 800740a:	f7fe fe98 	bl	800613e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800741a:	2b01      	cmp	r3, #1
 800741c:	d102      	bne.n	8007424 <HAL_ADC_ConfigChannel+0x124>
 800741e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007422:	e000      	b.n	8007426 <HAL_ADC_ConfigChannel+0x126>
 8007424:	2300      	movs	r3, #0
 8007426:	461a      	mov	r2, r3
 8007428:	f7fe fea4 	bl	8006174 <LL_ADC_SetOffsetSaturation>
 800742c:	e17b      	b.n	8007726 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fe51 	bl	80060dc <LL_ADC_GetOffsetChannel>
 800743a:	4603      	mov	r3, r0
 800743c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <HAL_ADC_ConfigChannel+0x15a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fe46 	bl	80060dc <LL_ADC_GetOffsetChannel>
 8007450:	4603      	mov	r3, r0
 8007452:	0e9b      	lsrs	r3, r3, #26
 8007454:	f003 021f 	and.w	r2, r3, #31
 8007458:	e01e      	b.n	8007498 <HAL_ADC_ConfigChannel+0x198>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2100      	movs	r1, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fe3b 	bl	80060dc <LL_ADC_GetOffsetChannel>
 8007466:	4603      	mov	r3, r0
 8007468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007470:	fa93 f3a3 	rbit	r3, r3
 8007474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800747c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007488:	2320      	movs	r3, #32
 800748a:	e004      	b.n	8007496 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800748c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007490:	fab3 f383 	clz	r3, r3
 8007494:	b2db      	uxtb	r3, r3
 8007496:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_ADC_ConfigChannel+0x1b0>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	0e9b      	lsrs	r3, r3, #26
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	e018      	b.n	80074e2 <HAL_ADC_ConfigChannel+0x1e2>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074bc:	fa93 f3a3 	rbit	r3, r3
 80074c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80074c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80074cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80074d4:	2320      	movs	r3, #32
 80074d6:	e004      	b.n	80074e2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80074d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074dc:	fab3 f383 	clz	r3, r3
 80074e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d106      	bne.n	80074f4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fe0a 	bl	8006108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fdee 	bl	80060dc <LL_ADC_GetOffsetChannel>
 8007500:	4603      	mov	r3, r0
 8007502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x220>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2101      	movs	r1, #1
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fde3 	bl	80060dc <LL_ADC_GetOffsetChannel>
 8007516:	4603      	mov	r3, r0
 8007518:	0e9b      	lsrs	r3, r3, #26
 800751a:	f003 021f 	and.w	r2, r3, #31
 800751e:	e01e      	b.n	800755e <HAL_ADC_ConfigChannel+0x25e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2101      	movs	r1, #1
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fdd8 	bl	80060dc <LL_ADC_GetOffsetChannel>
 800752c:	4603      	mov	r3, r0
 800752e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007536:	fa93 f3a3 	rbit	r3, r3
 800753a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800753e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800754e:	2320      	movs	r3, #32
 8007550:	e004      	b.n	800755c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007556:	fab3 f383 	clz	r3, r3
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x276>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	0e9b      	lsrs	r3, r3, #26
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	e018      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x2a8>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007582:	fa93 f3a3 	rbit	r3, r3
 8007586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800758a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800758e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007592:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800759a:	2320      	movs	r3, #32
 800759c:	e004      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800759e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a2:	fab3 f383 	clz	r3, r3
 80075a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d106      	bne.n	80075ba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2101      	movs	r1, #1
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fda7 	bl	8006108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2102      	movs	r1, #2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fd8b 	bl	80060dc <LL_ADC_GetOffsetChannel>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x2e6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2102      	movs	r1, #2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fd80 	bl	80060dc <LL_ADC_GetOffsetChannel>
 80075dc:	4603      	mov	r3, r0
 80075de:	0e9b      	lsrs	r3, r3, #26
 80075e0:	f003 021f 	and.w	r2, r3, #31
 80075e4:	e01e      	b.n	8007624 <HAL_ADC_ConfigChannel+0x324>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2102      	movs	r1, #2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fd75 	bl	80060dc <LL_ADC_GetOffsetChannel>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075fc:	fa93 f3a3 	rbit	r3, r3
 8007600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800760c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007614:	2320      	movs	r3, #32
 8007616:	e004      	b.n	8007622 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800761c:	fab3 f383 	clz	r3, r3
 8007620:	b2db      	uxtb	r3, r3
 8007622:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <HAL_ADC_ConfigChannel+0x33c>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	0e9b      	lsrs	r3, r3, #26
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	e016      	b.n	800766a <HAL_ADC_ConfigChannel+0x36a>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007648:	fa93 f3a3 	rbit	r3, r3
 800764c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800764e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800765c:	2320      	movs	r3, #32
 800765e:	e004      	b.n	800766a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007664:	fab3 f383 	clz	r3, r3
 8007668:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800766a:	429a      	cmp	r2, r3
 800766c:	d106      	bne.n	800767c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	2102      	movs	r1, #2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fd46 	bl	8006108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2103      	movs	r1, #3
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fd2a 	bl	80060dc <LL_ADC_GetOffsetChannel>
 8007688:	4603      	mov	r3, r0
 800768a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <HAL_ADC_ConfigChannel+0x3a8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2103      	movs	r1, #3
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fd1f 	bl	80060dc <LL_ADC_GetOffsetChannel>
 800769e:	4603      	mov	r3, r0
 80076a0:	0e9b      	lsrs	r3, r3, #26
 80076a2:	f003 021f 	and.w	r2, r3, #31
 80076a6:	e017      	b.n	80076d8 <HAL_ADC_ConfigChannel+0x3d8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2103      	movs	r1, #3
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fd14 	bl	80060dc <LL_ADC_GetOffsetChannel>
 80076b4:	4603      	mov	r3, r0
 80076b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ba:	fa93 f3a3 	rbit	r3, r3
 80076be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80076c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80076c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80076ca:	2320      	movs	r3, #32
 80076cc:	e003      	b.n	80076d6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80076ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d0:	fab3 f383 	clz	r3, r3
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <HAL_ADC_ConfigChannel+0x3f0>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	0e9b      	lsrs	r3, r3, #26
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	e011      	b.n	8007714 <HAL_ADC_ConfigChannel+0x414>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076f8:	fa93 f3a3 	rbit	r3, r3
 80076fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80076fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007700:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007708:	2320      	movs	r3, #32
 800770a:	e003      	b.n	8007714 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800770c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800770e:	fab3 f383 	clz	r3, r3
 8007712:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007714:	429a      	cmp	r2, r3
 8007716:	d106      	bne.n	8007726 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	2103      	movs	r1, #3
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe fcf1 	bl	8006108 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fed3 	bl	80064d6 <LL_ADC_IsEnabled>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 8140 	bne.w	80079b8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	461a      	mov	r2, r3
 8007746:	f7fe fdc1 	bl	80062cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	4a8f      	ldr	r2, [pc, #572]	; (800798c <HAL_ADC_ConfigChannel+0x68c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	f040 8131 	bne.w	80079b8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <HAL_ADC_ConfigChannel+0x47e>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	0e9b      	lsrs	r3, r3, #26
 800776c:	3301      	adds	r3, #1
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2b09      	cmp	r3, #9
 8007774:	bf94      	ite	ls
 8007776:	2301      	movls	r3, #1
 8007778:	2300      	movhi	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	e019      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x4b2>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007786:	fa93 f3a3 	rbit	r3, r3
 800778a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800778c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800778e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8007796:	2320      	movs	r3, #32
 8007798:	e003      	b.n	80077a2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800779a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800779c:	fab3 f383 	clz	r3, r3
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	3301      	adds	r3, #1
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	bf94      	ite	ls
 80077ac:	2301      	movls	r3, #1
 80077ae:	2300      	movhi	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d079      	beq.n	80078aa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <HAL_ADC_ConfigChannel+0x4d2>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	0e9b      	lsrs	r3, r3, #26
 80077c8:	3301      	adds	r3, #1
 80077ca:	069b      	lsls	r3, r3, #26
 80077cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077d0:	e015      	b.n	80077fe <HAL_ADC_ConfigChannel+0x4fe>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077da:	fa93 f3a3 	rbit	r3, r3
 80077de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80077e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80077e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80077ea:	2320      	movs	r3, #32
 80077ec:	e003      	b.n	80077f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80077ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077f0:	fab3 f383 	clz	r3, r3
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3301      	adds	r3, #1
 80077f8:	069b      	lsls	r3, r3, #26
 80077fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <HAL_ADC_ConfigChannel+0x51e>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	0e9b      	lsrs	r3, r3, #26
 8007810:	3301      	adds	r3, #1
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	2101      	movs	r1, #1
 8007818:	fa01 f303 	lsl.w	r3, r1, r3
 800781c:	e017      	b.n	800784e <HAL_ADC_ConfigChannel+0x54e>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007826:	fa93 f3a3 	rbit	r3, r3
 800782a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8007836:	2320      	movs	r3, #32
 8007838:	e003      	b.n	8007842 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	fab3 f383 	clz	r3, r3
 8007840:	b2db      	uxtb	r3, r3
 8007842:	3301      	adds	r3, #1
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	2101      	movs	r1, #1
 800784a:	fa01 f303 	lsl.w	r3, r1, r3
 800784e:	ea42 0103 	orr.w	r1, r2, r3
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <HAL_ADC_ConfigChannel+0x574>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	0e9b      	lsrs	r3, r3, #26
 8007864:	3301      	adds	r3, #1
 8007866:	f003 021f 	and.w	r2, r3, #31
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	051b      	lsls	r3, r3, #20
 8007872:	e018      	b.n	80078a6 <HAL_ADC_ConfigChannel+0x5a6>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	fa93 f3a3 	rbit	r3, r3
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800788c:	2320      	movs	r3, #32
 800788e:	e003      	b.n	8007898 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007892:	fab3 f383 	clz	r3, r3
 8007896:	b2db      	uxtb	r3, r3
 8007898:	3301      	adds	r3, #1
 800789a:	f003 021f 	and.w	r2, r3, #31
 800789e:	4613      	mov	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	4413      	add	r3, r2
 80078a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078a6:	430b      	orrs	r3, r1
 80078a8:	e081      	b.n	80079ae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d107      	bne.n	80078c6 <HAL_ADC_ConfigChannel+0x5c6>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	0e9b      	lsrs	r3, r3, #26
 80078bc:	3301      	adds	r3, #1
 80078be:	069b      	lsls	r3, r3, #26
 80078c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80078c4:	e015      	b.n	80078f2 <HAL_ADC_ConfigChannel+0x5f2>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	fa93 f3a3 	rbit	r3, r3
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80078de:	2320      	movs	r3, #32
 80078e0:	e003      	b.n	80078ea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	fab3 f383 	clz	r3, r3
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	3301      	adds	r3, #1
 80078ec:	069b      	lsls	r3, r3, #26
 80078ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <HAL_ADC_ConfigChannel+0x612>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	0e9b      	lsrs	r3, r3, #26
 8007904:	3301      	adds	r3, #1
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2101      	movs	r1, #1
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	e017      	b.n	8007942 <HAL_ADC_ConfigChannel+0x642>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	fa93 f3a3 	rbit	r3, r3
 800791e:	61fb      	str	r3, [r7, #28]
  return result;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800792a:	2320      	movs	r3, #32
 800792c:	e003      	b.n	8007936 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	fab3 f383 	clz	r3, r3
 8007934:	b2db      	uxtb	r3, r3
 8007936:	3301      	adds	r3, #1
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	ea42 0103 	orr.w	r1, r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10d      	bne.n	800796e <HAL_ADC_ConfigChannel+0x66e>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	0e9b      	lsrs	r3, r3, #26
 8007958:	3301      	adds	r3, #1
 800795a:	f003 021f 	and.w	r2, r3, #31
 800795e:	4613      	mov	r3, r2
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	4413      	add	r3, r2
 8007964:	3b1e      	subs	r3, #30
 8007966:	051b      	lsls	r3, r3, #20
 8007968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800796c:	e01e      	b.n	80079ac <HAL_ADC_ConfigChannel+0x6ac>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	fa93 f3a3 	rbit	r3, r3
 800797a:	613b      	str	r3, [r7, #16]
  return result;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8007986:	2320      	movs	r3, #32
 8007988:	e006      	b.n	8007998 <HAL_ADC_ConfigChannel+0x698>
 800798a:	bf00      	nop
 800798c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	fab3 f383 	clz	r3, r3
 8007996:	b2db      	uxtb	r3, r3
 8007998:	3301      	adds	r3, #1
 800799a:	f003 021f 	and.w	r2, r3, #31
 800799e:	4613      	mov	r3, r2
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	3b1e      	subs	r3, #30
 80079a6:	051b      	lsls	r3, r3, #20
 80079a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079b2:	4619      	mov	r1, r3
 80079b4:	f7fe fc5e 	bl	8006274 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	4b3f      	ldr	r3, [pc, #252]	; (8007abc <HAL_ADC_ConfigChannel+0x7bc>)
 80079be:	4013      	ands	r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d071      	beq.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079c4:	483e      	ldr	r0, [pc, #248]	; (8007ac0 <HAL_ADC_ConfigChannel+0x7c0>)
 80079c6:	f7fe fb57 	bl	8006078 <LL_ADC_GetCommonPathInternalCh>
 80079ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a3c      	ldr	r2, [pc, #240]	; (8007ac4 <HAL_ADC_ConfigChannel+0x7c4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_ADC_ConfigChannel+0x6e2>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a3a      	ldr	r2, [pc, #232]	; (8007ac8 <HAL_ADC_ConfigChannel+0x7c8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d127      	bne.n	8007a32 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80079e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d121      	bne.n	8007a32 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079f6:	d157      	bne.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a00:	4619      	mov	r1, r3
 8007a02:	482f      	ldr	r0, [pc, #188]	; (8007ac0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007a04:	f7fe fb25 	bl	8006052 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a08:	4b30      	ldr	r3, [pc, #192]	; (8007acc <HAL_ADC_ConfigChannel+0x7cc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	099b      	lsrs	r3, r3, #6
 8007a0e:	4a30      	ldr	r2, [pc, #192]	; (8007ad0 <HAL_ADC_ConfigChannel+0x7d0>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	099b      	lsrs	r3, r3, #6
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	4613      	mov	r3, r2
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a22:	e002      	b.n	8007a2a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f9      	bne.n	8007a24 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a30:	e03a      	b.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a27      	ldr	r2, [pc, #156]	; (8007ad4 <HAL_ADC_ConfigChannel+0x7d4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d113      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10d      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a22      	ldr	r2, [pc, #136]	; (8007ad8 <HAL_ADC_ConfigChannel+0x7d8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d02a      	beq.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4818      	ldr	r0, [pc, #96]	; (8007ac0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007a5e:	f7fe faf8 	bl	8006052 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a62:	e021      	b.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1c      	ldr	r2, [pc, #112]	; (8007adc <HAL_ADC_ConfigChannel+0x7dc>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d11c      	bne.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d116      	bne.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <HAL_ADC_ConfigChannel+0x7d8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d011      	beq.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007a90:	f7fe fadf 	bl	8006052 <LL_ADC_SetCommonPathInternalCh>
 8007a94:	e008      	b.n	8007aa8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ab0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	37d8      	adds	r7, #216	; 0xd8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	80080000 	.word	0x80080000
 8007ac0:	50000300 	.word	0x50000300
 8007ac4:	c3210000 	.word	0xc3210000
 8007ac8:	90c00010 	.word	0x90c00010
 8007acc:	200001c4 	.word	0x200001c4
 8007ad0:	053e2d63 	.word	0x053e2d63
 8007ad4:	c7520000 	.word	0xc7520000
 8007ad8:	50000100 	.word	0x50000100
 8007adc:	cb840000 	.word	0xcb840000

08007ae0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08e      	sub	sp, #56	; 0x38
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007af8:	d003      	beq.n	8007b02 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007afe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_ADC_AnalogWDGConfig+0x30>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e1ea      	b.n	8007ee6 <HAL_ADC_AnalogWDGConfig+0x406>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fd28 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8007b22:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fd49 	bl	80065c0 <LL_ADC_INJ_IsConversionOngoing>
 8007b2e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f040 8175 	bne.w	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 8171 	bne.w	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a90      	ldr	r2, [pc, #576]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	f040 808d 	bne.w	8007c66 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007b54:	d034      	beq.n	8007bc0 <HAL_ADC_AnalogWDGConfig+0xe0>
 8007b56:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007b5a:	d856      	bhi.n	8007c0a <HAL_ADC_AnalogWDGConfig+0x12a>
 8007b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b60:	d04b      	beq.n	8007bfa <HAL_ADC_AnalogWDGConfig+0x11a>
 8007b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b66:	d850      	bhi.n	8007c0a <HAL_ADC_AnalogWDGConfig+0x12a>
 8007b68:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007b6c:	d01b      	beq.n	8007ba6 <HAL_ADC_AnalogWDGConfig+0xc6>
 8007b6e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007b72:	d84a      	bhi.n	8007c0a <HAL_ADC_AnalogWDGConfig+0x12a>
 8007b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b78:	d037      	beq.n	8007bea <HAL_ADC_AnalogWDGConfig+0x10a>
 8007b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b7e:	d844      	bhi.n	8007c0a <HAL_ADC_AnalogWDGConfig+0x12a>
 8007b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b84:	d029      	beq.n	8007bda <HAL_ADC_AnalogWDGConfig+0xfa>
 8007b86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b8a:	d13e      	bne.n	8007c0a <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007b98:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	497a      	ldr	r1, [pc, #488]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007ba0:	f7fe fbb8 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8007ba4:	e039      	b.n	8007c1a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bb2:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	4973      	ldr	r1, [pc, #460]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007bba:	f7fe fbab 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 8007bbe:	e02c      	b.n	8007c1a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bcc:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	496d      	ldr	r1, [pc, #436]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007bd4:	f7fe fb9e 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8007bd8:	e01f      	b.n	8007c1a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a6b      	ldr	r2, [pc, #428]	; (8007d8c <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8007be0:	4969      	ldr	r1, [pc, #420]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fb96 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007be8:	e017      	b.n	8007c1a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a68      	ldr	r2, [pc, #416]	; (8007d90 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8007bf0:	4965      	ldr	r1, [pc, #404]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fb8e 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007bf8:	e00f      	b.n	8007c1a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a65      	ldr	r2, [pc, #404]	; (8007d94 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007c00:	4961      	ldr	r1, [pc, #388]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fb86 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007c08:	e007      	b.n	8007c1a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	495d      	ldr	r1, [pc, #372]	; (8007d88 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fb7e 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007c18:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fcd0 	bl	80065e6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	7b1b      	ldrb	r3, [r3, #12]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d105      	bne.n	8007c5a <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fcf0 	bl	8006638 <LL_ADC_EnableIT_AWD1>
 8007c58:	e0e3      	b.n	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fd1a 	bl	8006698 <LL_ADC_DisableIT_AWD1>
 8007c64:	e0dd      	b.n	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007c6e:	d01d      	beq.n	8007cac <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007c70:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007c74:	f200 8092 	bhi.w	8007d9c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007c78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c7c:	d07b      	beq.n	8007d76 <HAL_ADC_AnalogWDGConfig+0x296>
 8007c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c82:	f200 808b 	bhi.w	8007d9c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007c86:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007c8a:	d00f      	beq.n	8007cac <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007c8c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007c90:	f200 8084 	bhi.w	8007d9c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c98:	d06d      	beq.n	8007d76 <HAL_ADC_AnalogWDGConfig+0x296>
 8007c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c9e:	d87d      	bhi.n	8007d9c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ca4:	d067      	beq.n	8007d76 <HAL_ADC_AnalogWDGConfig+0x296>
 8007ca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007caa:	d177      	bne.n	8007d9c <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a39      	ldr	r2, [pc, #228]	; (8007d98 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d12f      	bne.n	8007d16 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d108      	bne.n	8007cd4 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	0e9b      	lsrs	r3, r3, #26
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	2201      	movs	r2, #1
 8007cce:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd2:	e016      	b.n	8007d02 <HAL_ADC_AnalogWDGConfig+0x222>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	fa93 f3a3 	rbit	r3, r3
 8007ce0:	61bb      	str	r3, [r7, #24]
  return result;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8007cec:	2320      	movs	r3, #32
 8007cee:	e003      	b.n	8007cf8 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	fab3 f383 	clz	r3, r3
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8007d14:	e04b      	b.n	8007dae <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d108      	bne.n	8007d34 <HAL_ADC_AnalogWDGConfig+0x254>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	0e9b      	lsrs	r3, r3, #26
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	e016      	b.n	8007d62 <HAL_ADC_AnalogWDGConfig+0x282>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	fa93 f3a3 	rbit	r3, r3
 8007d40:	60fb      	str	r3, [r7, #12]
  return result;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8007d4c:	2320      	movs	r3, #32
 8007d4e:	e003      	b.n	8007d58 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	fab3 f383 	clz	r3, r3
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8007d74:	e01b      	b.n	8007dae <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8007d7e:	4a05      	ldr	r2, [pc, #20]	; (8007d94 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007d80:	4619      	mov	r1, r3
 8007d82:	f7fe fac7 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007d86:	e012      	b.n	8007dae <HAL_ADC_AnalogWDGConfig+0x2ce>
 8007d88:	7dc00000 	.word	0x7dc00000
 8007d8c:	0087ffff 	.word	0x0087ffff
 8007d90:	0107ffff 	.word	0x0107ffff
 8007d94:	0187ffff 	.word	0x0187ffff
 8007d98:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2200      	movs	r2, #0
 8007da6:	4619      	mov	r1, r3
 8007da8:	f7fe fab4 	bl	8006314 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007dac:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a4f      	ldr	r2, [pc, #316]	; (8007ef0 <HAL_ADC_AnalogWDGConfig+0x410>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d11a      	bne.n	8007dee <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fc19 	bl	8006600 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	7b1b      	ldrb	r3, [r3, #12]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d105      	bne.n	8007de2 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fc3c 	bl	8006658 <LL_ADC_EnableIT_AWD2>
 8007de0:	e01f      	b.n	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fc66 	bl	80066b8 <LL_ADC_DisableIT_AWD2>
 8007dec:	e019      	b.n	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fc0c 	bl	800661c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	7b1b      	ldrb	r3, [r3, #12]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d105      	bne.n	8007e18 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fc31 	bl	8006678 <LL_ADC_EnableIT_AWD3>
 8007e16:	e004      	b.n	8007e22 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fc5b 	bl	80066d8 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <HAL_ADC_AnalogWDGConfig+0x414>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d118      	bne.n	8007e5e <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	08db      	lsrs	r3, r3, #3
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	08db      	lsrs	r3, r3, #3
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e5c:	e035      	b.n	8007eca <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0318 	and.w	r3, r3, #24
 8007e68:	2b18      	cmp	r3, #24
 8007e6a:	d00f      	beq.n	8007e8c <HAL_ADC_AnalogWDGConfig+0x3ac>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	08db      	lsrs	r3, r3, #3
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	f1c3 0302 	rsb	r3, r3, #2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	f003 031e 	and.w	r3, r3, #30
 8007e86:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8a:	e002      	b.n	8007e92 <HAL_ADC_AnalogWDGConfig+0x3b2>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0318 	and.w	r3, r3, #24
 8007e9e:	2b18      	cmp	r3, #24
 8007ea0:	d00f      	beq.n	8007ec2 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	695a      	ldr	r2, [r3, #20]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	08db      	lsrs	r3, r3, #3
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	f1c3 0302 	rsb	r3, r3, #2
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	f003 031e 	and.w	r3, r3, #30
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec0:	e002      	b.n	8007ec8 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6819      	ldr	r1, [r3, #0]
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed6:	f7fe fa4a 	bl	800636e <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3738      	adds	r7, #56	; 0x38
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	0017ffff 	.word	0x0017ffff
 8007ef4:	7dc00000 	.word	0x7dc00000

08007ef8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fb2f 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8007f14:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fb50 	bl	80065c0 <LL_ADC_INJ_IsConversionOngoing>
 8007f20:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8098 	beq.w	8008060 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d02a      	beq.n	8007f94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7f5b      	ldrb	r3, [r3, #29]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d126      	bne.n	8007f94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	7f1b      	ldrb	r3, [r3, #28]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d122      	bne.n	8007f94 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007f52:	e014      	b.n	8007f7e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4a45      	ldr	r2, [pc, #276]	; (800806c <ADC_ConversionStop+0x174>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d90d      	bls.n	8007f78 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f60:	f043 0210 	orr.w	r2, r3, #16
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6c:	f043 0201 	orr.w	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e074      	b.n	8008062 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f88:	2b40      	cmp	r3, #64	; 0x40
 8007f8a:	d1e3      	bne.n	8007f54 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2240      	movs	r2, #64	; 0x40
 8007f92:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d014      	beq.n	8007fc4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fae7 	bl	8006572 <LL_ADC_REG_IsConversionOngoing>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe faa4 	bl	80064fc <LL_ADC_IsDisableOngoing>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fac3 	bl	800654a <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d014      	beq.n	8007ff4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe faf6 	bl	80065c0 <LL_ADC_INJ_IsConversionOngoing>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fa8c 	bl	80064fc <LL_ADC_IsDisableOngoing>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fad2 	bl	8006598 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d005      	beq.n	8008006 <ADC_ConversionStop+0x10e>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d105      	bne.n	800800c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008000:	230c      	movs	r3, #12
 8008002:	617b      	str	r3, [r7, #20]
        break;
 8008004:	e005      	b.n	8008012 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008006:	2308      	movs	r3, #8
 8008008:	617b      	str	r3, [r7, #20]
        break;
 800800a:	e002      	b.n	8008012 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800800c:	2304      	movs	r3, #4
 800800e:	617b      	str	r3, [r7, #20]
        break;
 8008010:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008012:	f7fd ffdd 	bl	8005fd0 <HAL_GetTick>
 8008016:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008018:	e01b      	b.n	8008052 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800801a:	f7fd ffd9 	bl	8005fd0 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b05      	cmp	r3, #5
 8008026:	d914      	bls.n	8008052 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00d      	beq.n	8008052 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803a:	f043 0210 	orr.w	r2, r3, #16
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008046:	f043 0201 	orr.w	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e007      	b.n	8008062 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1dc      	bne.n	800801a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	a33fffff 	.word	0xa33fffff

08008070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008078:	2300      	movs	r3, #0
 800807a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fa28 	bl	80064d6 <LL_ADC_IsEnabled>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d169      	bne.n	8008160 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	4b36      	ldr	r3, [pc, #216]	; (800816c <ADC_Enable+0xfc>)
 8008094:	4013      	ands	r3, r2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00d      	beq.n	80080b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809e:	f043 0210 	orr.w	r2, r3, #16
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	f043 0201 	orr.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e055      	b.n	8008162 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe f9e3 	bl	8006486 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80080c0:	482b      	ldr	r0, [pc, #172]	; (8008170 <ADC_Enable+0x100>)
 80080c2:	f7fd ffd9 	bl	8006078 <LL_ADC_GetCommonPathInternalCh>
 80080c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80080c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d013      	beq.n	80080f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80080d0:	4b28      	ldr	r3, [pc, #160]	; (8008174 <ADC_Enable+0x104>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	099b      	lsrs	r3, r3, #6
 80080d6:	4a28      	ldr	r2, [pc, #160]	; (8008178 <ADC_Enable+0x108>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	099b      	lsrs	r3, r3, #6
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	4613      	mov	r3, r2
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80080ea:	e002      	b.n	80080f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1f9      	bne.n	80080ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80080f8:	f7fd ff6a 	bl	8005fd0 <HAL_GetTick>
 80080fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080fe:	e028      	b.n	8008152 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe f9e6 	bl	80064d6 <LL_ADC_IsEnabled>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe f9b6 	bl	8006486 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800811a:	f7fd ff59 	bl	8005fd0 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d914      	bls.n	8008152 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b01      	cmp	r3, #1
 8008134:	d00d      	beq.n	8008152 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813a:	f043 0210 	orr.w	r2, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008146:	f043 0201 	orr.w	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e007      	b.n	8008162 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b01      	cmp	r3, #1
 800815e:	d1cf      	bne.n	8008100 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	8000003f 	.word	0x8000003f
 8008170:	50000300 	.word	0x50000300
 8008174:	200001c4 	.word	0x200001c4
 8008178:	053e2d63 	.word	0x053e2d63

0800817c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe f9b7 	bl	80064fc <LL_ADC_IsDisableOngoing>
 800818e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe f99e 	bl	80064d6 <LL_ADC_IsEnabled>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d047      	beq.n	8008230 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d144      	bne.n	8008230 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f003 030d 	and.w	r3, r3, #13
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10c      	bne.n	80081ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe f978 	bl	80064ae <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2203      	movs	r2, #3
 80081c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80081c6:	f7fd ff03 	bl	8005fd0 <HAL_GetTick>
 80081ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80081cc:	e029      	b.n	8008222 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d2:	f043 0210 	orr.w	r2, r3, #16
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081de:	f043 0201 	orr.w	r2, r3, #1
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e023      	b.n	8008232 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80081ea:	f7fd fef1 	bl	8005fd0 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d914      	bls.n	8008222 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00d      	beq.n	8008222 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820a:	f043 0210 	orr.w	r2, r3, #16
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008216:	f043 0201 	orr.w	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e007      	b.n	8008232 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1dc      	bne.n	80081ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008250:	2b00      	cmp	r3, #0
 8008252:	d14b      	bne.n	80082ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d021      	beq.n	80082b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd ffac 	bl	80061d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d032      	beq.n	80082e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d12b      	bne.n	80082e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11f      	bne.n	80082e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a8:	f043 0201 	orr.w	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80082b0:	e018      	b.n	80082e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d111      	bne.n	80082e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082dc:	f043 0201 	orr.w	r2, r3, #1
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7fa ff53 	bl	8003190 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80082ea:	e00e      	b.n	800830a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7fe fff7 	bl	80072ec <HAL_ADC_ErrorCallback>
}
 80082fe:	e004      	b.n	800830a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7fe ffd9 	bl	80072d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834c:	f043 0204 	orr.w	r2, r3, #4
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f7fe ffc9 	bl	80072ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <LL_ADC_IsEnabled>:
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <LL_ADC_IsEnabled+0x18>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <LL_ADC_IsEnabled+0x1a>
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <LL_ADC_StartCalibration>:
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800839a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	609a      	str	r2, [r3, #8]
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <LL_ADC_IsCalibrationOnGoing>:
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ce:	d101      	bne.n	80083d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d101      	bne.n	80083fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800841c:	2b01      	cmp	r3, #1
 800841e:	d101      	bne.n	8008424 <HAL_ADCEx_Calibration_Start+0x1c>
 8008420:	2302      	movs	r3, #2
 8008422:	e04d      	b.n	80084c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fea5 	bl	800817c <ADC_Disable>
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d136      	bne.n	80084aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008440:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008444:	f023 0302 	bic.w	r3, r3, #2
 8008448:	f043 0202 	orr.w	r2, r3, #2
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff ff96 	bl	8008388 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800845c:	e014      	b.n	8008488 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	3301      	adds	r3, #1
 8008462:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d90d      	bls.n	8008488 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008470:	f023 0312 	bic.w	r3, r3, #18
 8008474:	f043 0210 	orr.w	r2, r3, #16
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e01b      	b.n	80084c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff ff94 	bl	80083ba <LL_ADC_IsCalibrationOnGoing>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e2      	bne.n	800845e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	f043 0201 	orr.w	r2, r3, #1
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80084a8:	e005      	b.n	80084b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ae:	f043 0210 	orr.w	r2, r3, #16
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	0004de01 	.word	0x0004de01

080084cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b0a1      	sub	sp, #132	; 0x84
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800854a:	2302      	movs	r3, #2
 800854c:	e08b      	b.n	8008666 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008556:	2300      	movs	r3, #0
 8008558:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800855a:	2300      	movs	r3, #0
 800855c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008566:	d102      	bne.n	800856e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008568:	4b41      	ldr	r3, [pc, #260]	; (8008670 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	e001      	b.n	8008572 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10b      	bne.n	8008590 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857c:	f043 0220 	orr.w	r2, r3, #32
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e06a      	b.n	8008666 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff ff25 	bl	80083e2 <LL_ADC_REG_IsConversionOngoing>
 8008598:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff ff1f 	bl	80083e2 <LL_ADC_REG_IsConversionOngoing>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d14c      	bne.n	8008644 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80085aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d149      	bne.n	8008644 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80085b0:	4b30      	ldr	r3, [pc, #192]	; (8008674 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80085b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d028      	beq.n	800860e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80085bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	6859      	ldr	r1, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085ce:	035b      	lsls	r3, r3, #13
 80085d0:	430b      	orrs	r3, r1
 80085d2:	431a      	orrs	r2, r3
 80085d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80085d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80085dc:	f7ff fec1 	bl	8008362 <LL_ADC_IsEnabled>
 80085e0:	4604      	mov	r4, r0
 80085e2:	4823      	ldr	r0, [pc, #140]	; (8008670 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80085e4:	f7ff febd 	bl	8008362 <LL_ADC_IsEnabled>
 80085e8:	4603      	mov	r3, r0
 80085ea:	4323      	orrs	r3, r4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d133      	bne.n	8008658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80085f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80085f8:	f023 030f 	bic.w	r3, r3, #15
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	6811      	ldr	r1, [r2, #0]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	6892      	ldr	r2, [r2, #8]
 8008604:	430a      	orrs	r2, r1
 8008606:	431a      	orrs	r2, r3
 8008608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800860a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800860c:	e024      	b.n	8008658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800860e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008618:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800861a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800861e:	f7ff fea0 	bl	8008362 <LL_ADC_IsEnabled>
 8008622:	4604      	mov	r4, r0
 8008624:	4812      	ldr	r0, [pc, #72]	; (8008670 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008626:	f7ff fe9c 	bl	8008362 <LL_ADC_IsEnabled>
 800862a:	4603      	mov	r3, r0
 800862c:	4323      	orrs	r3, r4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d112      	bne.n	8008658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800863a:	f023 030f 	bic.w	r3, r3, #15
 800863e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008640:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008642:	e009      	b.n	8008658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008648:	f043 0220 	orr.w	r2, r3, #32
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008656:	e000      	b.n	800865a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008658:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008662:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008666:	4618      	mov	r0, r3
 8008668:	3784      	adds	r7, #132	; 0x84
 800866a:	46bd      	mov	sp, r7
 800866c:	bd90      	pop	{r4, r7, pc}
 800866e:	bf00      	nop
 8008670:	50000100 	.word	0x50000100
 8008674:	50000300 	.word	0x50000300

08008678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <__NVIC_SetPriorityGrouping+0x44>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008694:	4013      	ands	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086aa:	4a04      	ldr	r2, [pc, #16]	; (80086bc <__NVIC_SetPriorityGrouping+0x44>)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	60d3      	str	r3, [r2, #12]
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	e000ed00 	.word	0xe000ed00

080086c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086c4:	4b04      	ldr	r3, [pc, #16]	; (80086d8 <__NVIC_GetPriorityGrouping+0x18>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	f003 0307 	and.w	r3, r3, #7
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	e000ed00 	.word	0xe000ed00

080086dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	db0b      	blt.n	8008706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	f003 021f 	and.w	r2, r3, #31
 80086f4:	4907      	ldr	r1, [pc, #28]	; (8008714 <__NVIC_EnableIRQ+0x38>)
 80086f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	2001      	movs	r0, #1
 80086fe:	fa00 f202 	lsl.w	r2, r0, r2
 8008702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	e000e100 	.word	0xe000e100

08008718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008728:	2b00      	cmp	r3, #0
 800872a:	db0a      	blt.n	8008742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	490c      	ldr	r1, [pc, #48]	; (8008764 <__NVIC_SetPriority+0x4c>)
 8008732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008736:	0112      	lsls	r2, r2, #4
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	440b      	add	r3, r1
 800873c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008740:	e00a      	b.n	8008758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	b2da      	uxtb	r2, r3
 8008746:	4908      	ldr	r1, [pc, #32]	; (8008768 <__NVIC_SetPriority+0x50>)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	3b04      	subs	r3, #4
 8008750:	0112      	lsls	r2, r2, #4
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	440b      	add	r3, r1
 8008756:	761a      	strb	r2, [r3, #24]
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	e000e100 	.word	0xe000e100
 8008768:	e000ed00 	.word	0xe000ed00

0800876c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800876c:	b480      	push	{r7}
 800876e:	b089      	sub	sp, #36	; 0x24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f1c3 0307 	rsb	r3, r3, #7
 8008786:	2b04      	cmp	r3, #4
 8008788:	bf28      	it	cs
 800878a:	2304      	movcs	r3, #4
 800878c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	3304      	adds	r3, #4
 8008792:	2b06      	cmp	r3, #6
 8008794:	d902      	bls.n	800879c <NVIC_EncodePriority+0x30>
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3b03      	subs	r3, #3
 800879a:	e000      	b.n	800879e <NVIC_EncodePriority+0x32>
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43da      	mvns	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	401a      	ands	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087b4:	f04f 31ff 	mov.w	r1, #4294967295
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	fa01 f303 	lsl.w	r3, r1, r3
 80087be:	43d9      	mvns	r1, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087c4:	4313      	orrs	r3, r2
         );
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3724      	adds	r7, #36	; 0x24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
	...

080087d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3b01      	subs	r3, #1
 80087e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087e4:	d301      	bcc.n	80087ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087e6:	2301      	movs	r3, #1
 80087e8:	e00f      	b.n	800880a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087ea:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <SysTick_Config+0x40>)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087f2:	210f      	movs	r1, #15
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	f7ff ff8e 	bl	8008718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <SysTick_Config+0x40>)
 80087fe:	2200      	movs	r2, #0
 8008800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008802:	4b04      	ldr	r3, [pc, #16]	; (8008814 <SysTick_Config+0x40>)
 8008804:	2207      	movs	r2, #7
 8008806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	e000e010 	.word	0xe000e010

08008818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff29 	bl	8008678 <__NVIC_SetPriorityGrouping>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	4603      	mov	r3, r0
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
 800883a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800883c:	f7ff ff40 	bl	80086c0 <__NVIC_GetPriorityGrouping>
 8008840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	6978      	ldr	r0, [r7, #20]
 8008848:	f7ff ff90 	bl	800876c <NVIC_EncodePriority>
 800884c:	4602      	mov	r2, r0
 800884e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff ff5f 	bl	8008718 <__NVIC_SetPriority>
}
 800885a:	bf00      	nop
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	4603      	mov	r3, r0
 800886a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800886c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff ff33 	bl	80086dc <__NVIC_EnableIRQ>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff ffa4 	bl	80087d4 <SysTick_Config>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e054      	b.n	8008954 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	7f5b      	ldrb	r3, [r3, #29]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fc fa7e 	bl	8004dbc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	791b      	ldrb	r3, [r3, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10c      	bne.n	80088e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a22      	ldr	r2, [pc, #136]	; (800895c <HAL_CRC_Init+0xc4>)
 80088d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0218 	bic.w	r2, r2, #24
 80088e4:	609a      	str	r2, [r3, #8]
 80088e6:	e00c      	b.n	8008902 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6899      	ldr	r1, [r3, #8]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f948 	bl	8008b88 <HAL_CRCEx_Polynomial_Set>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e028      	b.n	8008954 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	795b      	ldrb	r3, [r3, #5]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	611a      	str	r2, [r3, #16]
 8008914:	e004      	b.n	8008920 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6912      	ldr	r2, [r2, #16]
 800891e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699a      	ldr	r2, [r3, #24]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	04c11db7 	.word	0x04c11db7

08008960 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2202      	movs	r2, #2
 8008974:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0201 	orr.w	r2, r2, #1
 8008984:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	2b03      	cmp	r3, #3
 800898c:	d006      	beq.n	800899c <HAL_CRC_Calculate+0x3c>
 800898e:	2b03      	cmp	r3, #3
 8008990:	d829      	bhi.n	80089e6 <HAL_CRC_Calculate+0x86>
 8008992:	2b01      	cmp	r3, #1
 8008994:	d019      	beq.n	80089ca <HAL_CRC_Calculate+0x6a>
 8008996:	2b02      	cmp	r3, #2
 8008998:	d01e      	beq.n	80089d8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800899a:	e024      	b.n	80089e6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e00a      	b.n	80089b8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6812      	ldr	r2, [r2, #0]
 80089b0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	3301      	adds	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d3f0      	bcc.n	80089a2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	613b      	str	r3, [r7, #16]
      break;
 80089c8:	e00e      	b.n	80089e8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f812 	bl	80089f8 <CRC_Handle_8>
 80089d4:	6138      	str	r0, [r7, #16]
      break;
 80089d6:	e007      	b.n	80089e8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f899 	bl	8008b14 <CRC_Handle_16>
 80089e2:	6138      	str	r0, [r7, #16]
      break;
 80089e4:	e000      	b.n	80089e8 <HAL_CRC_Calculate+0x88>
      break;
 80089e6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2201      	movs	r2, #1
 80089ec:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80089ee:	693b      	ldr	r3, [r7, #16]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b089      	sub	sp, #36	; 0x24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008a04:	2300      	movs	r3, #0
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	e023      	b.n	8008a52 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	440b      	add	r3, r1
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a24:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	440b      	add	r3, r1
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008a34:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	3303      	adds	r3, #3
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	440b      	add	r3, r1
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008a48:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	61fb      	str	r3, [r7, #28]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	089b      	lsrs	r3, r3, #2
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d3d6      	bcc.n	8008a0a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d04d      	beq.n	8008b02 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d107      	bne.n	8008a80 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	4413      	add	r3, r2
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	6812      	ldr	r2, [r2, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f003 0303 	and.w	r3, r3, #3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d116      	bne.n	8008ab8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	b21a      	sxth	r2, r3
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	440b      	add	r3, r1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b21b      	sxth	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b21b      	sxth	r3, r3
 8008aaa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	8b7a      	ldrh	r2, [r7, #26]
 8008ab6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d11f      	bne.n	8008b02 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	b21a      	sxth	r2, r3
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	440b      	add	r3, r1
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b21b      	sxth	r3, r3
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	8b7a      	ldrh	r2, [r7, #26]
 8008aee:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	3302      	adds	r3, #2
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4413      	add	r3, r2
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	6812      	ldr	r2, [r2, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3724      	adds	r7, #36	; 0x24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e013      	b.n	8008b4e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	041a      	lsls	r2, r3, #16
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	3302      	adds	r3, #2
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	440b      	add	r3, r1
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d3e6      	bcc.n	8008b26 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d009      	beq.n	8008b76 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	4413      	add	r3, r2
 8008b70:	881a      	ldrh	r2, [r3, #0]
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008b98:	231f      	movs	r3, #31
 8008b9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
 8008baa:	e063      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008bac:	bf00      	nop
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	613a      	str	r2, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d009      	beq.n	8008bcc <HAL_CRCEx_Polynomial_Set+0x44>
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f003 031f 	and.w	r3, r3, #31
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f0      	beq.n	8008bae <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b18      	cmp	r3, #24
 8008bd0:	d846      	bhi.n	8008c60 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008c67 	.word	0x08008c67
 8008bdc:	08008c61 	.word	0x08008c61
 8008be0:	08008c61 	.word	0x08008c61
 8008be4:	08008c61 	.word	0x08008c61
 8008be8:	08008c61 	.word	0x08008c61
 8008bec:	08008c61 	.word	0x08008c61
 8008bf0:	08008c61 	.word	0x08008c61
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008c55 	.word	0x08008c55
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008c61 	.word	0x08008c61
 8008c04:	08008c61 	.word	0x08008c61
 8008c08:	08008c61 	.word	0x08008c61
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008c61 	.word	0x08008c61
 8008c14:	08008c61 	.word	0x08008c61
 8008c18:	08008c49 	.word	0x08008c49
 8008c1c:	08008c61 	.word	0x08008c61
 8008c20:	08008c61 	.word	0x08008c61
 8008c24:	08008c61 	.word	0x08008c61
 8008c28:	08008c61 	.word	0x08008c61
 8008c2c:	08008c61 	.word	0x08008c61
 8008c30:	08008c61 	.word	0x08008c61
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	08008c3d 	.word	0x08008c3d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b06      	cmp	r3, #6
 8008c40:	d913      	bls.n	8008c6a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c46:	e010      	b.n	8008c6a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2b07      	cmp	r3, #7
 8008c4c:	d90f      	bls.n	8008c6e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c52:	e00c      	b.n	8008c6e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d90b      	bls.n	8008c72 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c5e:	e008      	b.n	8008c72 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	75fb      	strb	r3, [r7, #23]
        break;
 8008c64:	e006      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c66:	bf00      	nop
 8008c68:	e004      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e002      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c6e:	bf00      	nop
 8008c70:	e000      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c72:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10d      	bne.n	8008c96 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f023 0118 	bic.w	r1, r3, #24
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e08d      	b.n	8008dd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4b47      	ldr	r3, [pc, #284]	; (8008ddc <HAL_DMA_Init+0x138>)
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d80f      	bhi.n	8008ce2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	4b45      	ldr	r3, [pc, #276]	; (8008de0 <HAL_DMA_Init+0x13c>)
 8008cca:	4413      	add	r3, r2
 8008ccc:	4a45      	ldr	r2, [pc, #276]	; (8008de4 <HAL_DMA_Init+0x140>)
 8008cce:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	009a      	lsls	r2, r3, #2
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a42      	ldr	r2, [pc, #264]	; (8008de8 <HAL_DMA_Init+0x144>)
 8008cde:	641a      	str	r2, [r3, #64]	; 0x40
 8008ce0:	e00e      	b.n	8008d00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	4b40      	ldr	r3, [pc, #256]	; (8008dec <HAL_DMA_Init+0x148>)
 8008cea:	4413      	add	r3, r2
 8008cec:	4a3d      	ldr	r2, [pc, #244]	; (8008de4 <HAL_DMA_Init+0x140>)
 8008cee:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf2:	091b      	lsrs	r3, r3, #4
 8008cf4:	009a      	lsls	r2, r3, #2
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a3c      	ldr	r2, [pc, #240]	; (8008df0 <HAL_DMA_Init+0x14c>)
 8008cfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa1e 	bl	8009194 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d60:	d102      	bne.n	8008d68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d70:	b2d2      	uxtb	r2, r2
 8008d72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d010      	beq.n	8008da8 <HAL_DMA_Init+0x104>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d80c      	bhi.n	8008da8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa3e 	bl	8009210 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	e008      	b.n	8008dba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40020407 	.word	0x40020407
 8008de0:	bffdfff8 	.word	0xbffdfff8
 8008de4:	cccccccd 	.word	0xcccccccd
 8008de8:	40020000 	.word	0x40020000
 8008dec:	bffdfbf8 	.word	0xbffdfbf8
 8008df0:	40020400 	.word	0x40020400

08008df4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_DMA_Start_IT+0x20>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e066      	b.n	8008ee2 <HAL_DMA_Start_IT+0xee>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d155      	bne.n	8008ed4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0201 	bic.w	r2, r2, #1
 8008e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f962 	bl	8009116 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 020e 	orr.w	r2, r2, #14
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e00f      	b.n	8008e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0204 	bic.w	r2, r2, #4
 8008e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 020a 	orr.w	r2, r2, #10
 8008e8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ea8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ec0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0201 	orr.w	r2, r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	e005      	b.n	8008ee0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008edc:	2302      	movs	r3, #2
 8008ede:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d005      	beq.n	8008f0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2204      	movs	r2, #4
 8008f06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
 8008f0c:	e037      	b.n	8008f7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 020e 	bic.w	r2, r2, #14
 8008f1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 0201 	bic.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f42:	f003 021f 	and.w	r2, r3, #31
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8008f50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00c      	beq.n	8008f7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008f7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb8:	f003 031f 	and.w	r3, r3, #31
 8008fbc:	2204      	movs	r2, #4
 8008fbe:	409a      	lsls	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d026      	beq.n	8009016 <HAL_DMA_IRQHandler+0x7a>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d021      	beq.n	8009016 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d107      	bne.n	8008ff0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0204 	bic.w	r2, r2, #4
 8008fee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff4:	f003 021f 	and.w	r2, r3, #31
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffc:	2104      	movs	r1, #4
 8008ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8009002:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009008:	2b00      	cmp	r3, #0
 800900a:	d071      	beq.n	80090f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009014:	e06c      	b.n	80090f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901a:	f003 031f 	and.w	r3, r3, #31
 800901e:	2202      	movs	r2, #2
 8009020:	409a      	lsls	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d02e      	beq.n	8009088 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d029      	beq.n	8009088 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 020a 	bic.w	r2, r2, #10
 8009050:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	f003 021f 	and.w	r2, r3, #31
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	2102      	movs	r1, #2
 8009068:	fa01 f202 	lsl.w	r2, r1, r2
 800906c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	2b00      	cmp	r3, #0
 800907c:	d038      	beq.n	80090f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009086:	e033      	b.n	80090f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908c:	f003 031f 	and.w	r3, r3, #31
 8009090:	2208      	movs	r2, #8
 8009092:	409a      	lsls	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d02a      	beq.n	80090f2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d025      	beq.n	80090f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 020e 	bic.w	r2, r2, #14
 80090b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ba:	f003 021f 	and.w	r2, r3, #31
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	2101      	movs	r1, #1
 80090c4:	fa01 f202 	lsl.w	r2, r1, r2
 80090c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d004      	beq.n	80090f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
}
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009108:	b2db      	uxtb	r3, r3
}
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800912c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800913e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009144:	f003 021f 	and.w	r2, r3, #31
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	2101      	movs	r1, #1
 800914e:	fa01 f202 	lsl.w	r2, r1, r2
 8009152:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b10      	cmp	r3, #16
 8009162:	d108      	bne.n	8009176 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009174:	e007      	b.n	8009186 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	60da      	str	r2, [r3, #12]
}
 8009186:	bf00      	nop
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
	...

08009194 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	4b16      	ldr	r3, [pc, #88]	; (80091fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d802      	bhi.n	80091ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e001      	b.n	80091b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80091ae:	4b15      	ldr	r3, [pc, #84]	; (8009204 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80091b0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	3b08      	subs	r3, #8
 80091be:	4a12      	ldr	r2, [pc, #72]	; (8009208 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80091c0:	fba2 2303 	umull	r2, r3, r2, r3
 80091c4:	091b      	lsrs	r3, r3, #4
 80091c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091cc:	089b      	lsrs	r3, r3, #2
 80091ce:	009a      	lsls	r2, r3, #2
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4413      	add	r3, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80091de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	2201      	movs	r2, #1
 80091e8:	409a      	lsls	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091ee:	bf00      	nop
 80091f0:	371c      	adds	r7, #28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	40020407 	.word	0x40020407
 8009200:	40020800 	.word	0x40020800
 8009204:	40020820 	.word	0x40020820
 8009208:	cccccccd 	.word	0xcccccccd
 800920c:	40020880 	.word	0x40020880

08009210 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	461a      	mov	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a08      	ldr	r2, [pc, #32]	; (8009254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009232:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3b01      	subs	r3, #1
 8009238:	f003 031f 	and.w	r3, r3, #31
 800923c:	2201      	movs	r2, #1
 800923e:	409a      	lsls	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	1000823f 	.word	0x1000823f
 8009254:	40020940 	.word	0x40020940

08009258 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800926a:	4b2f      	ldr	r3, [pc, #188]	; (8009328 <HAL_FLASH_Program+0xd0>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d101      	bne.n	8009276 <HAL_FLASH_Program+0x1e>
 8009272:	2302      	movs	r3, #2
 8009274:	e053      	b.n	800931e <HAL_FLASH_Program+0xc6>
 8009276:	4b2c      	ldr	r3, [pc, #176]	; (8009328 <HAL_FLASH_Program+0xd0>)
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800927c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009280:	f000 f892 	bl	80093a8 <FLASH_WaitForLastOperation>
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d143      	bne.n	8009316 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800928e:	4b26      	ldr	r3, [pc, #152]	; (8009328 <HAL_FLASH_Program+0xd0>)
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009294:	4b25      	ldr	r3, [pc, #148]	; (800932c <HAL_FLASH_Program+0xd4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80092a0:	4b22      	ldr	r3, [pc, #136]	; (800932c <HAL_FLASH_Program+0xd4>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a21      	ldr	r2, [pc, #132]	; (800932c <HAL_FLASH_Program+0xd4>)
 80092a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092aa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80092ac:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <HAL_FLASH_Program+0xd0>)
 80092ae:	2202      	movs	r2, #2
 80092b0:	771a      	strb	r2, [r3, #28]
 80092b2:	e002      	b.n	80092ba <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80092b4:	4b1c      	ldr	r3, [pc, #112]	; (8009328 <HAL_FLASH_Program+0xd0>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d107      	bne.n	80092d0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	68b8      	ldr	r0, [r7, #8]
 80092c6:	f000 f8c3 	bl	8009450 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80092ca:	2301      	movs	r3, #1
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	e010      	b.n	80092f2 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d002      	beq.n	80092dc <HAL_FLASH_Program+0x84>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d10a      	bne.n	80092f2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	4619      	mov	r1, r3
 80092e0:	68b8      	ldr	r0, [r7, #8]
 80092e2:	f000 f8db 	bl	800949c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d102      	bne.n	80092f2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80092ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80092f0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80092f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092f6:	f000 f857 	bl	80093a8 <FLASH_WaitForLastOperation>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d006      	beq.n	8009312 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <HAL_FLASH_Program+0xd4>)
 8009306:	695a      	ldr	r2, [r3, #20]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	43db      	mvns	r3, r3
 800930c:	4907      	ldr	r1, [pc, #28]	; (800932c <HAL_FLASH_Program+0xd4>)
 800930e:	4013      	ands	r3, r2
 8009310:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009312:	f000 f9d3 	bl	80096bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009316:	4b04      	ldr	r3, [pc, #16]	; (8009328 <HAL_FLASH_Program+0xd0>)
 8009318:	2200      	movs	r2, #0
 800931a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	200001e0 	.word	0x200001e0
 800932c:	40022000 	.word	0x40022000

08009330 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <HAL_FLASH_Unlock+0x38>)
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	da0b      	bge.n	800935a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <HAL_FLASH_Unlock+0x38>)
 8009344:	4a09      	ldr	r2, [pc, #36]	; (800936c <HAL_FLASH_Unlock+0x3c>)
 8009346:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009348:	4b07      	ldr	r3, [pc, #28]	; (8009368 <HAL_FLASH_Unlock+0x38>)
 800934a:	4a09      	ldr	r2, [pc, #36]	; (8009370 <HAL_FLASH_Unlock+0x40>)
 800934c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <HAL_FLASH_Unlock+0x38>)
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	da01      	bge.n	800935a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800935a:	79fb      	ldrb	r3, [r7, #7]
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40022000 	.word	0x40022000
 800936c:	45670123 	.word	0x45670123
 8009370:	cdef89ab 	.word	0xcdef89ab

08009374 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <HAL_FLASH_Lock+0x30>)
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <HAL_FLASH_Lock+0x30>)
 8009384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009388:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <HAL_FLASH_Lock+0x30>)
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	da01      	bge.n	8009396 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009396:	79fb      	ldrb	r3, [r7, #7]
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	40022000 	.word	0x40022000

080093a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80093b0:	f7fc fe0e 	bl	8005fd0 <HAL_GetTick>
 80093b4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80093b6:	e009      	b.n	80093cc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80093b8:	f7fc fe0a 	bl	8005fd0 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d201      	bcs.n	80093cc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e038      	b.n	800943e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d8:	d0ee      	beq.n	80093b8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80093e2:	4013      	ands	r3, r2
 80093e4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d01e      	beq.n	800942a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80093ec:	4b17      	ldr	r3, [pc, #92]	; (800944c <FLASH_WaitForLastOperation+0xa4>)
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	4a15      	ldr	r2, [pc, #84]	; (800944c <FLASH_WaitForLastOperation+0xa4>)
 80093f6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <FLASH_WaitForLastOperation+0x6a>
 8009402:	4b11      	ldr	r3, [pc, #68]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800940c:	490e      	ldr	r1, [pc, #56]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 800940e:	4313      	orrs	r3, r2
 8009410:	618b      	str	r3, [r1, #24]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <FLASH_WaitForLastOperation+0x7e>
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009424:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e009      	b.n	800943e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800942a:	4b07      	ldr	r3, [pc, #28]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b01      	cmp	r3, #1
 8009434:	d102      	bne.n	800943c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009436:	4b04      	ldr	r3, [pc, #16]	; (8009448 <FLASH_WaitForLastOperation+0xa0>)
 8009438:	2201      	movs	r2, #1
 800943a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40022000 	.word	0x40022000
 800944c:	200001e0 	.word	0x200001e0

08009450 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800945c:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <FLASH_Program_DoubleWord+0x48>)
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	4a0d      	ldr	r2, [pc, #52]	; (8009498 <FLASH_Program_DoubleWord+0x48>)
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800946e:	f3bf 8f6f 	isb	sy
}
 8009472:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	000a      	movs	r2, r1
 8009482:	2300      	movs	r3, #0
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	3104      	adds	r1, #4
 8009488:	4613      	mov	r3, r2
 800948a:	600b      	str	r3, [r1, #0]
}
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	40022000 	.word	0x40022000

0800949c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800949c:	b480      	push	{r7}
 800949e:	b089      	sub	sp, #36	; 0x24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80094a6:	2340      	movs	r3, #64	; 0x40
 80094a8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80094b2:	4b14      	ldr	r3, [pc, #80]	; (8009504 <FLASH_Program_Fast+0x68>)
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	4a13      	ldr	r2, [pc, #76]	; (8009504 <FLASH_Program_Fast+0x68>)
 80094b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094be:	f3ef 8310 	mrs	r3, PRIMASK
 80094c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80094c4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80094c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80094c8:	b672      	cpsid	i
}
 80094ca:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	3304      	adds	r3, #4
 80094d8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	3304      	adds	r3, #4
 80094de:	617b      	str	r3, [r7, #20]
    row_index--;
 80094e0:	7ffb      	ldrb	r3, [r7, #31]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80094e6:	7ffb      	ldrb	r3, [r7, #31]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1ef      	bne.n	80094cc <FLASH_Program_Fast+0x30>
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f383 8810 	msr	PRIMASK, r3
}
 80094f6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80094f8:	bf00      	nop
 80094fa:	3724      	adds	r7, #36	; 0x24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	40022000 	.word	0x40022000

08009508 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009512:	4b47      	ldr	r3, [pc, #284]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <HAL_FLASHEx_Erase+0x16>
 800951a:	2302      	movs	r3, #2
 800951c:	e083      	b.n	8009626 <HAL_FLASHEx_Erase+0x11e>
 800951e:	4b44      	ldr	r3, [pc, #272]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 8009520:	2201      	movs	r2, #1
 8009522:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009528:	f7ff ff3e 	bl	80093a8 <FLASH_WaitForLastOperation>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d173      	bne.n	800961e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009536:	4b3e      	ldr	r3, [pc, #248]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 8009538:	2200      	movs	r2, #0
 800953a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800953c:	4b3d      	ldr	r3, [pc, #244]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009544:	2b00      	cmp	r3, #0
 8009546:	d013      	beq.n	8009570 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009548:	4b3a      	ldr	r3, [pc, #232]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009550:	2b00      	cmp	r3, #0
 8009552:	d009      	beq.n	8009568 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009554:	4b37      	ldr	r3, [pc, #220]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a36      	ldr	r2, [pc, #216]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 800955a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800955e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009560:	4b33      	ldr	r3, [pc, #204]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 8009562:	2203      	movs	r2, #3
 8009564:	771a      	strb	r2, [r3, #28]
 8009566:	e016      	b.n	8009596 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009568:	4b31      	ldr	r3, [pc, #196]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 800956a:	2201      	movs	r2, #1
 800956c:	771a      	strb	r2, [r3, #28]
 800956e:	e012      	b.n	8009596 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009570:	4b30      	ldr	r3, [pc, #192]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800957c:	4b2d      	ldr	r3, [pc, #180]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a2c      	ldr	r2, [pc, #176]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 8009582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009586:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009588:	4b29      	ldr	r3, [pc, #164]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 800958a:	2202      	movs	r2, #2
 800958c:	771a      	strb	r2, [r3, #28]
 800958e:	e002      	b.n	8009596 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009590:	4b27      	ldr	r3, [pc, #156]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 8009592:	2200      	movs	r2, #0
 8009594:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d111      	bne.n	80095c2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f848 	bl	8009638 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095ac:	f7ff fefc 	bl	80093a8 <FLASH_WaitForLastOperation>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80095b4:	4b1f      	ldr	r3, [pc, #124]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	4a1e      	ldr	r2, [pc, #120]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 80095ba:	f023 0304 	bic.w	r3, r3, #4
 80095be:	6153      	str	r3, [r2, #20]
 80095c0:	e02b      	b.n	800961a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295
 80095c8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	60bb      	str	r3, [r7, #8]
 80095d0:	e01b      	b.n	800960a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4619      	mov	r1, r3
 80095d8:	68b8      	ldr	r0, [r7, #8]
 80095da:	f000 f84b 	bl	8009674 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095e2:	f7ff fee1 	bl	80093a8 <FLASH_WaitForLastOperation>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80095ea:	4b12      	ldr	r3, [pc, #72]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	4a11      	ldr	r2, [pc, #68]	; (8009634 <HAL_FLASHEx_Erase+0x12c>)
 80095f0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80095f4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	601a      	str	r2, [r3, #0]
          break;
 8009602:	e00a      	b.n	800961a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	3301      	adds	r3, #1
 8009608:	60bb      	str	r3, [r7, #8]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	4413      	add	r3, r2
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	d3db      	bcc.n	80095d2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800961a:	f000 f84f 	bl	80096bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <HAL_FLASHEx_Erase+0x128>)
 8009620:	2200      	movs	r2, #0
 8009622:	701a      	strb	r2, [r3, #0]

  return status;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	200001e0 	.word	0x200001e0
 8009634:	40022000 	.word	0x40022000

08009638 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800964a:	4b09      	ldr	r3, [pc, #36]	; (8009670 <FLASH_MassErase+0x38>)
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	4a08      	ldr	r2, [pc, #32]	; (8009670 <FLASH_MassErase+0x38>)
 8009650:	f043 0304 	orr.w	r3, r3, #4
 8009654:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009656:	4b06      	ldr	r3, [pc, #24]	; (8009670 <FLASH_MassErase+0x38>)
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	4a05      	ldr	r2, [pc, #20]	; (8009670 <FLASH_MassErase+0x38>)
 800965c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009660:	6153      	str	r3, [r2, #20]
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40022000 	.word	0x40022000

08009674 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800967e:	4b0e      	ldr	r3, [pc, #56]	; (80096b8 <FLASH_PageErase+0x44>)
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800968e:	490a      	ldr	r1, [pc, #40]	; (80096b8 <FLASH_PageErase+0x44>)
 8009690:	4313      	orrs	r3, r2
 8009692:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <FLASH_PageErase+0x44>)
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	4a07      	ldr	r2, [pc, #28]	; (80096b8 <FLASH_PageErase+0x44>)
 800969a:	f043 0302 	orr.w	r3, r3, #2
 800969e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80096a0:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <FLASH_PageErase+0x44>)
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	4a04      	ldr	r2, [pc, #16]	; (80096b8 <FLASH_PageErase+0x44>)
 80096a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096aa:	6153      	str	r3, [r2, #20]
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	40022000 	.word	0x40022000

080096bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80096c2:	4b21      	ldr	r3, [pc, #132]	; (8009748 <FLASH_FlushCaches+0x8c>)
 80096c4:	7f1b      	ldrb	r3, [r3, #28]
 80096c6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d002      	beq.n	80096d4 <FLASH_FlushCaches+0x18>
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d117      	bne.n	8009704 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80096d4:	4b1d      	ldr	r3, [pc, #116]	; (800974c <FLASH_FlushCaches+0x90>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1c      	ldr	r2, [pc, #112]	; (800974c <FLASH_FlushCaches+0x90>)
 80096da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80096e0:	4b1a      	ldr	r3, [pc, #104]	; (800974c <FLASH_FlushCaches+0x90>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a19      	ldr	r2, [pc, #100]	; (800974c <FLASH_FlushCaches+0x90>)
 80096e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	4b17      	ldr	r3, [pc, #92]	; (800974c <FLASH_FlushCaches+0x90>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a16      	ldr	r2, [pc, #88]	; (800974c <FLASH_FlushCaches+0x90>)
 80096f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <FLASH_FlushCaches+0x90>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a13      	ldr	r2, [pc, #76]	; (800974c <FLASH_FlushCaches+0x90>)
 80096fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009702:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d002      	beq.n	8009710 <FLASH_FlushCaches+0x54>
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d111      	bne.n	8009734 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <FLASH_FlushCaches+0x90>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a0d      	ldr	r2, [pc, #52]	; (800974c <FLASH_FlushCaches+0x90>)
 8009716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	4b0b      	ldr	r3, [pc, #44]	; (800974c <FLASH_FlushCaches+0x90>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <FLASH_FlushCaches+0x90>)
 8009722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009726:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <FLASH_FlushCaches+0x90>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a07      	ldr	r2, [pc, #28]	; (800974c <FLASH_FlushCaches+0x90>)
 800972e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009732:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009734:	4b04      	ldr	r3, [pc, #16]	; (8009748 <FLASH_FlushCaches+0x8c>)
 8009736:	2200      	movs	r2, #0
 8009738:	771a      	strb	r2, [r3, #28]
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	200001e0 	.word	0x200001e0
 800974c:	40022000 	.word	0x40022000

08009750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800975e:	e15a      	b.n	8009a16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	2101      	movs	r1, #1
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	fa01 f303 	lsl.w	r3, r1, r3
 800976c:	4013      	ands	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 814c 	beq.w	8009a10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	2b01      	cmp	r3, #1
 8009782:	d005      	beq.n	8009790 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800978c:	2b02      	cmp	r3, #2
 800978e:	d130      	bne.n	80097f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	2203      	movs	r2, #3
 800979c:	fa02 f303 	lsl.w	r3, r2, r3
 80097a0:	43db      	mvns	r3, r3
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4013      	ands	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80097c6:	2201      	movs	r2, #1
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	fa02 f303 	lsl.w	r3, r2, r3
 80097ce:	43db      	mvns	r3, r3
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4013      	ands	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	091b      	lsrs	r3, r3, #4
 80097dc:	f003 0201 	and.w	r2, r3, #1
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	fa02 f303 	lsl.w	r3, r2, r3
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d017      	beq.n	800982e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	2203      	movs	r2, #3
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	43db      	mvns	r3, r3
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4013      	ands	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d123      	bne.n	8009882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	08da      	lsrs	r2, r3, #3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3208      	adds	r2, #8
 8009842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	220f      	movs	r2, #15
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	43db      	mvns	r3, r3
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4013      	ands	r3, r2
 800985c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f003 0307 	and.w	r3, r3, #7
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	fa02 f303 	lsl.w	r3, r2, r3
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	4313      	orrs	r3, r2
 8009872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	08da      	lsrs	r2, r3, #3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3208      	adds	r2, #8
 800987c:	6939      	ldr	r1, [r7, #16]
 800987e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	2203      	movs	r2, #3
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	43db      	mvns	r3, r3
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4013      	ands	r3, r2
 8009898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f003 0203 	and.w	r2, r3, #3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	fa02 f303 	lsl.w	r3, r2, r3
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 80a6 	beq.w	8009a10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098c4:	4b5b      	ldr	r3, [pc, #364]	; (8009a34 <HAL_GPIO_Init+0x2e4>)
 80098c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098c8:	4a5a      	ldr	r2, [pc, #360]	; (8009a34 <HAL_GPIO_Init+0x2e4>)
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	6613      	str	r3, [r2, #96]	; 0x60
 80098d0:	4b58      	ldr	r3, [pc, #352]	; (8009a34 <HAL_GPIO_Init+0x2e4>)
 80098d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	60bb      	str	r3, [r7, #8]
 80098da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80098dc:	4a56      	ldr	r2, [pc, #344]	; (8009a38 <HAL_GPIO_Init+0x2e8>)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	089b      	lsrs	r3, r3, #2
 80098e2:	3302      	adds	r3, #2
 80098e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	220f      	movs	r2, #15
 80098f4:	fa02 f303 	lsl.w	r3, r2, r3
 80098f8:	43db      	mvns	r3, r3
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	4013      	ands	r3, r2
 80098fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009906:	d01f      	beq.n	8009948 <HAL_GPIO_Init+0x1f8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a4c      	ldr	r2, [pc, #304]	; (8009a3c <HAL_GPIO_Init+0x2ec>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d019      	beq.n	8009944 <HAL_GPIO_Init+0x1f4>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a4b      	ldr	r2, [pc, #300]	; (8009a40 <HAL_GPIO_Init+0x2f0>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <HAL_GPIO_Init+0x1f0>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a4a      	ldr	r2, [pc, #296]	; (8009a44 <HAL_GPIO_Init+0x2f4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00d      	beq.n	800993c <HAL_GPIO_Init+0x1ec>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a49      	ldr	r2, [pc, #292]	; (8009a48 <HAL_GPIO_Init+0x2f8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d007      	beq.n	8009938 <HAL_GPIO_Init+0x1e8>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a48      	ldr	r2, [pc, #288]	; (8009a4c <HAL_GPIO_Init+0x2fc>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d101      	bne.n	8009934 <HAL_GPIO_Init+0x1e4>
 8009930:	2305      	movs	r3, #5
 8009932:	e00a      	b.n	800994a <HAL_GPIO_Init+0x1fa>
 8009934:	2306      	movs	r3, #6
 8009936:	e008      	b.n	800994a <HAL_GPIO_Init+0x1fa>
 8009938:	2304      	movs	r3, #4
 800993a:	e006      	b.n	800994a <HAL_GPIO_Init+0x1fa>
 800993c:	2303      	movs	r3, #3
 800993e:	e004      	b.n	800994a <HAL_GPIO_Init+0x1fa>
 8009940:	2302      	movs	r3, #2
 8009942:	e002      	b.n	800994a <HAL_GPIO_Init+0x1fa>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <HAL_GPIO_Init+0x1fa>
 8009948:	2300      	movs	r3, #0
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	f002 0203 	and.w	r2, r2, #3
 8009950:	0092      	lsls	r2, r2, #2
 8009952:	4093      	lsls	r3, r2
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800995a:	4937      	ldr	r1, [pc, #220]	; (8009a38 <HAL_GPIO_Init+0x2e8>)
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	089b      	lsrs	r3, r3, #2
 8009960:	3302      	adds	r3, #2
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009968:	4b39      	ldr	r3, [pc, #228]	; (8009a50 <HAL_GPIO_Init+0x300>)
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	43db      	mvns	r3, r3
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4013      	ands	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800998c:	4a30      	ldr	r2, [pc, #192]	; (8009a50 <HAL_GPIO_Init+0x300>)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009992:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <HAL_GPIO_Init+0x300>)
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	43db      	mvns	r3, r3
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4013      	ands	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099b6:	4a26      	ldr	r2, [pc, #152]	; (8009a50 <HAL_GPIO_Init+0x300>)
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80099bc:	4b24      	ldr	r3, [pc, #144]	; (8009a50 <HAL_GPIO_Init+0x300>)
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	43db      	mvns	r3, r3
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4013      	ands	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80099e0:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <HAL_GPIO_Init+0x300>)
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80099e6:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <HAL_GPIO_Init+0x300>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	43db      	mvns	r3, r3
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	4013      	ands	r3, r2
 80099f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a0a:	4a11      	ldr	r2, [pc, #68]	; (8009a50 <HAL_GPIO_Init+0x300>)
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3301      	adds	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f47f ae9d 	bne.w	8009760 <HAL_GPIO_Init+0x10>
  }
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40021000 	.word	0x40021000
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	48000400 	.word	0x48000400
 8009a40:	48000800 	.word	0x48000800
 8009a44:	48000c00 	.word	0x48000c00
 8009a48:	48001000 	.word	0x48001000
 8009a4c:	48001400 	.word	0x48001400
 8009a50:	40010400 	.word	0x40010400

08009a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	4013      	ands	r3, r2
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	e001      	b.n	8009a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	807b      	strh	r3, [r7, #2]
 8009a90:	4613      	mov	r3, r2
 8009a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a94:	787b      	ldrb	r3, [r7, #1]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a9a:	887a      	ldrh	r2, [r7, #2]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009aa0:	e002      	b.n	8009aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009aa2:	887a      	ldrh	r2, [r7, #2]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009abe:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ac0:	695a      	ldr	r2, [r3, #20]
 8009ac2:	88fb      	ldrh	r3, [r7, #6]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d006      	beq.n	8009ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009aca:	4a05      	ldr	r2, [pc, #20]	; (8009ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009acc:	88fb      	ldrh	r3, [r7, #6]
 8009ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009ad0:	88fb      	ldrh	r3, [r7, #6]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f9 fa78 	bl	8002fc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	40010400 	.word	0x40010400

08009ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e08d      	b.n	8009c12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d106      	bne.n	8009b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7fb f976 	bl	8004dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2224      	movs	r2, #36	; 0x24
 8009b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 0201 	bic.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d107      	bne.n	8009b5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b5a:	609a      	str	r2, [r3, #8]
 8009b5c:	e006      	b.n	8009b6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d108      	bne.n	8009b86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b82:	605a      	str	r2, [r3, #4]
 8009b84:	e007      	b.n	8009b96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6812      	ldr	r2, [r2, #0]
 8009ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691a      	ldr	r2, [r3, #16]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	69d9      	ldr	r1, [r3, #28]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0201 	orr.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d138      	bne.n	8009ca2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e032      	b.n	8009ca4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2224      	movs	r2, #36	; 0x24
 8009c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f042 0201 	orr.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2220      	movs	r2, #32
 8009c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e000      	b.n	8009ca4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ca2:	2302      	movs	r3, #2
  }
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d139      	bne.n	8009d3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e033      	b.n	8009d3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2224      	movs	r2, #36	; 0x24
 8009ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0201 	bic.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	021b      	lsls	r3, r3, #8
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f042 0201 	orr.w	r2, r2, #1
 8009d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d3a:	2302      	movs	r3, #2
  }
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e0c0      	b.n	8009edc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d106      	bne.n	8009d74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f00b fec8 	bl	8015b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2203      	movs	r2, #3
 8009d78:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f005 fe1e 	bl	800f9c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
 8009d8a:	e03e      	b.n	8009e0a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009d8c:	7bfa      	ldrb	r2, [r7, #15]
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	440b      	add	r3, r1
 8009d9a:	3311      	adds	r3, #17
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009da0:	7bfa      	ldrb	r2, [r7, #15]
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	440b      	add	r3, r1
 8009dae:	3310      	adds	r3, #16
 8009db0:	7bfa      	ldrb	r2, [r7, #15]
 8009db2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009db4:	7bfa      	ldrb	r2, [r7, #15]
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	440b      	add	r3, r1
 8009dc2:	3313      	adds	r3, #19
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009dc8:	7bfa      	ldrb	r2, [r7, #15]
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	440b      	add	r3, r1
 8009dd6:	3320      	adds	r3, #32
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ddc:	7bfa      	ldrb	r2, [r7, #15]
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	440b      	add	r3, r1
 8009dea:	3324      	adds	r3, #36	; 0x24
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	440b      	add	r3, r1
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	3301      	adds	r3, #1
 8009e08:	73fb      	strb	r3, [r7, #15]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	791b      	ldrb	r3, [r3, #4]
 8009e0e:	7bfa      	ldrb	r2, [r7, #15]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d3bb      	bcc.n	8009d8c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
 8009e18:	e044      	b.n	8009ea4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009e1a:	7bfa      	ldrb	r2, [r7, #15]
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	00db      	lsls	r3, r3, #3
 8009e26:	440b      	add	r3, r1
 8009e28:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009e30:	7bfa      	ldrb	r2, [r7, #15]
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	440b      	add	r3, r1
 8009e3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e42:	7bfa      	ldrb	r2, [r7, #15]
 8009e44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009e46:	7bfa      	ldrb	r2, [r7, #15]
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	440b      	add	r3, r1
 8009e54:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009e58:	2200      	movs	r2, #0
 8009e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009e5c:	7bfa      	ldrb	r2, [r7, #15]
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	440b      	add	r3, r1
 8009e6a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009e72:	7bfa      	ldrb	r2, [r7, #15]
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	440b      	add	r3, r1
 8009e80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009e88:	7bfa      	ldrb	r2, [r7, #15]
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	440b      	add	r3, r1
 8009e96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	73fb      	strb	r3, [r7, #15]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	791b      	ldrb	r3, [r3, #4]
 8009ea8:	7bfa      	ldrb	r2, [r7, #15]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d3b5      	bcc.n	8009e1a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009eba:	f005 fd9d 	bl	800f9f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7a9b      	ldrb	r3, [r3, #10]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d102      	bne.n	8009eda <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 fc41 	bl	800b75c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_PCD_Start+0x16>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e012      	b.n	8009f20 <HAL_PCD_Start+0x3c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f005 fd44 	bl	800f994 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f008 f804 	bl	8011f1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f008 f809 	bl	8011f4c <USB_ReadInterrupts>
 8009f3a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fb04 	bl	800a554 <PCD_EP_ISR_Handler>

    return;
 8009f4c:	e110      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d013      	beq.n	8009f80 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f6a:	b292      	uxth	r2, r2
 8009f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f00b fe58 	bl	8015c26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009f76:	2100      	movs	r1, #0
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f8fc 	bl	800a176 <HAL_PCD_SetAddress>

    return;
 8009f7e:	e0f7      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00c      	beq.n	8009fa4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009fa2:	e0e5      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fc0:	b292      	uxth	r2, r2
 8009fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009fc6:	e0d3      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d034      	beq.n	800a03c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0204 	bic.w	r2, r2, #4
 8009fe4:	b292      	uxth	r2, r2
 8009fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0208 	bic.w	r2, r2, #8
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d107      	bne.n	800a01c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f00b fff8 	bl	801600c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f00b fe3b 	bl	8015c98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a034:	b292      	uxth	r2, r2
 800a036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a03a:	e099      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a042:	2b00      	cmp	r3, #0
 800a044:	d027      	beq.n	800a096 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f042 0208 	orr.w	r2, r2, #8
 800a058:	b292      	uxth	r2, r2
 800a05a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a070:	b292      	uxth	r2, r2
 800a072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f042 0204 	orr.w	r2, r2, #4
 800a088:	b292      	uxth	r2, r2
 800a08a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f00b fde8 	bl	8015c64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a094:	e06c      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d040      	beq.n	800a122 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0b2:	b292      	uxth	r2, r2
 800a0b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d12b      	bne.n	800a11a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f042 0204 	orr.w	r2, r2, #4
 800a0d4:	b292      	uxth	r2, r2
 800a0d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0208 	orr.w	r2, r2, #8
 800a0ec:	b292      	uxth	r2, r2
 800a0ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a102:	b29b      	uxth	r3, r3
 800a104:	089b      	lsrs	r3, r3, #2
 800a106:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a110:	2101      	movs	r1, #1
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f00b ff7a 	bl	801600c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a118:	e02a      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f00b fda2 	bl	8015c64 <HAL_PCD_SuspendCallback>
    return;
 800a120:	e026      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00f      	beq.n	800a14c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a134:	b29a      	uxth	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a13e:	b292      	uxth	r2, r2
 800a140:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f00b fd60 	bl	8015c0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a14a:	e011      	b.n	800a170 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00c      	beq.n	800a170 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a15e:	b29a      	uxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a168:	b292      	uxth	r2, r2
 800a16a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a16e:	bf00      	nop
  }
}
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_PCD_SetAddress+0x1a>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e012      	b.n	800a1b6 <HAL_PCD_SetAddress+0x40>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f007 fea5 	bl	8011ef6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	70fb      	strb	r3, [r7, #3]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	803b      	strh	r3, [r7, #0]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da0e      	bge.n	800a202 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	f003 0207 	and.w	r2, r3, #7
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	00db      	lsls	r3, r3, #3
 800a1f2:	3310      	adds	r3, #16
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	705a      	strb	r2, [r3, #1]
 800a200:	e00e      	b.n	800a220 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	f003 0207 	and.w	r2, r3, #7
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	b2da      	uxtb	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a22c:	883a      	ldrh	r2, [r7, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	78ba      	ldrb	r2, [r7, #2]
 800a236:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a238:	78bb      	ldrb	r3, [r7, #2]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d102      	bne.n	800a244 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_PCD_EP_Open+0x94>
 800a24e:	2302      	movs	r3, #2
 800a250:	e00e      	b.n	800a270 <HAL_PCD_EP_Open+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	4618      	mov	r0, r3
 800a262:	f005 fbe7 	bl	800fa34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800a26e:	7afb      	ldrb	r3, [r7, #11]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	da0e      	bge.n	800a2aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	f003 0207 	and.w	r2, r3, #7
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	3310      	adds	r3, #16
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4413      	add	r3, r2
 800a2a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	705a      	strb	r2, [r3, #1]
 800a2a8:	e00e      	b.n	800a2c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	f003 0207 	and.w	r2, r3, #7
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	4413      	add	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_PCD_EP_Close+0x6a>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e00e      	b.n	800a300 <HAL_PCD_EP_Close+0x88>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68f9      	ldr	r1, [r7, #12]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f005 ff63 	bl	80101bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	607a      	str	r2, [r7, #4]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	460b      	mov	r3, r1
 800a316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	f003 0207 	and.w	r2, r3, #7
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2200      	movs	r2, #0
 800a340:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2200      	movs	r2, #0
 800a346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a348:	7afb      	ldrb	r3, [r7, #11]
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6979      	ldr	r1, [r7, #20]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f006 f91b 	bl	8010596 <USB_EPStartXfer>

  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	f003 0207 	and.w	r2, r3, #7
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	440b      	add	r3, r1
 800a388:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a38c:	681b      	ldr	r3, [r3, #0]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b086      	sub	sp, #24
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	603b      	str	r3, [r7, #0]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	f003 0207 	and.w	r2, r3, #7
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	3310      	adds	r3, #16
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4413      	add	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6979      	ldr	r1, [r7, #20]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f006 f8cc 	bl	8010596 <USB_EPStartXfer>

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	7912      	ldrb	r2, [r2, #4]
 800a41e:	4293      	cmp	r3, r2
 800a420:	d901      	bls.n	800a426 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e03e      	b.n	800a4a4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	da0e      	bge.n	800a44c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	f003 0207 	and.w	r2, r3, #7
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	3310      	adds	r3, #16
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4413      	add	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	705a      	strb	r2, [r3, #1]
 800a44a:	e00c      	b.n	800a466 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a44c:	78fa      	ldrb	r2, [r7, #3]
 800a44e:	4613      	mov	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	b2da      	uxtb	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <HAL_PCD_EP_SetStall+0x7e>
 800a482:	2302      	movs	r3, #2
 800a484:	e00e      	b.n	800a4a4 <HAL_PCD_EP_SetStall+0x9c>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	4618      	mov	r0, r3
 800a496:	f007 fc2f 	bl	8011cf8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	f003 030f 	and.w	r3, r3, #15
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	7912      	ldrb	r2, [r2, #4]
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d901      	bls.n	800a4ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e040      	b.n	800a54c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a4ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	da0e      	bge.n	800a4f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	f003 0207 	and.w	r2, r3, #7
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	3310      	adds	r3, #16
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	705a      	strb	r2, [r3, #1]
 800a4ee:	e00e      	b.n	800a50e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	f003 0207 	and.w	r2, r3, #7
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4413      	add	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_PCD_EP_ClrStall+0x82>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e00e      	b.n	800a54c <HAL_PCD_EP_ClrStall+0xa0>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f007 fc2c 	bl	8011d9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b096      	sub	sp, #88	; 0x58
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a55c:	e3ae      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a566:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a56a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a578:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f040 8170 	bne.w	800a862 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a586:	f003 0310 	and.w	r3, r3, #16
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d14d      	bne.n	800a62a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	b29b      	uxth	r3, r3
 800a596:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59e:	81fb      	strh	r3, [r7, #14]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	89fb      	ldrh	r3, [r7, #14]
 800a5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3310      	adds	r3, #16
 800a5b6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a5dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e2:	695a      	ldr	r2, [r3, #20]
 800a5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	441a      	add	r2, r3
 800a5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f00b faf0 	bl	8015bd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	7b1b      	ldrb	r3, [r3, #12]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 835d 	beq.w	800acbc <PCD_EP_ISR_Handler+0x768>
 800a602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	2b00      	cmp	r3, #0
 800a608:	f040 8358 	bne.w	800acbc <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7b1b      	ldrb	r3, [r3, #12]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a616:	b2da      	uxtb	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	b292      	uxth	r2, r2
 800a61e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	731a      	strb	r2, [r3, #12]
 800a628:	e348      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a630:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a63c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a644:	2b00      	cmp	r3, #0
 800a646:	d032      	beq.n	800a6ae <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a650:	b29b      	uxth	r3, r3
 800a652:	461a      	mov	r2, r3
 800a654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	4413      	add	r3, r2
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	4413      	add	r3, r2
 800a662:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a66c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a66e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800a67a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a67c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a680:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a682:	b29b      	uxth	r3, r3
 800a684:	f007 fcb4 	bl	8011ff0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	b29a      	uxth	r2, r3
 800a690:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a694:	4013      	ands	r3, r2
 800a696:	823b      	strh	r3, [r7, #16]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	8a3a      	ldrh	r2, [r7, #16]
 800a69e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6a2:	b292      	uxth	r2, r2
 800a6a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f00b fa68 	bl	8015b7c <HAL_PCD_SetupStageCallback>
 800a6ac:	e306      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a6ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f280 8302 	bge.w	800acbc <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	83fb      	strh	r3, [r7, #30]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	8bfa      	ldrh	r2, [r7, #30]
 800a6ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6d2:	b292      	uxth	r2, r2
 800a6d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	00db      	lsls	r3, r3, #3
 800a6e8:	4413      	add	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	6812      	ldr	r2, [r2, #0]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d019      	beq.n	800a73a <PCD_EP_ISR_Handler+0x1e6>
 800a706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d015      	beq.n	800a73a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a714:	6959      	ldr	r1, [r3, #20]
 800a716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a718:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a71e:	b29b      	uxth	r3, r3
 800a720:	f007 fc66 	bl	8011ff0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a726:	695a      	ldr	r2, [r3, #20]
 800a728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	441a      	add	r2, r3
 800a72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a730:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a732:	2100      	movs	r1, #0
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f00b fa33 	bl	8015ba0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a744:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 82b5 	bne.w	800acbc <PCD_EP_ISR_Handler+0x768>
 800a752:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a756:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a75a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a75e:	f000 82ad 	beq.w	800acbc <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	61bb      	str	r3, [r7, #24]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a770:	b29b      	uxth	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	4413      	add	r3, r2
 800a778:	61bb      	str	r3, [r7, #24]
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	b29b      	uxth	r3, r3
 800a788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b3e      	cmp	r3, #62	; 0x3e
 800a798:	d91d      	bls.n	800a7d6 <PCD_EP_ISR_Handler+0x282>
 800a79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f003 031f 	and.w	r3, r3, #31
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d102      	bne.n	800a7b4 <PCD_EP_ISR_Handler+0x260>
 800a7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	029b      	lsls	r3, r3, #10
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	801a      	strh	r2, [r3, #0]
 800a7d4:	e026      	b.n	800a824 <PCD_EP_ISR_Handler+0x2d0>
 800a7d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <PCD_EP_ISR_Handler+0x2a0>
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	e017      	b.n	800a824 <PCD_EP_ISR_Handler+0x2d0>
 800a7f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <PCD_EP_ISR_Handler+0x2ba>
 800a808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80a:	3301      	adds	r3, #1
 800a80c:	647b      	str	r3, [r7, #68]	; 0x44
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29a      	uxth	r2, r3
 800a814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a816:	b29b      	uxth	r3, r3
 800a818:	029b      	lsls	r3, r3, #10
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	4313      	orrs	r3, r2
 800a81e:	b29a      	uxth	r2, r3
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a834:	827b      	strh	r3, [r7, #18]
 800a836:	8a7b      	ldrh	r3, [r7, #18]
 800a838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a83c:	827b      	strh	r3, [r7, #18]
 800a83e:	8a7b      	ldrh	r3, [r7, #18]
 800a840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a844:	827b      	strh	r3, [r7, #18]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	8a7b      	ldrh	r3, [r7, #18]
 800a84c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	8013      	strh	r3, [r2, #0]
 800a860:	e22c      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a876:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f280 80f6 	bge.w	800aa6c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29a      	uxth	r2, r3
 800a892:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a896:	4013      	ands	r3, r2
 800a898:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a8ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8b2:	b292      	uxth	r2, r2
 800a8b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a8b6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ce:	7b1b      	ldrb	r3, [r3, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d123      	bne.n	800a91c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	4413      	add	r3, r2
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	6812      	ldr	r2, [r2, #0]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a8fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 808e 	beq.w	800aa22 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a90c:	6959      	ldr	r1, [r3, #20]
 800a90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a910:	88da      	ldrh	r2, [r3, #6]
 800a912:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a916:	f007 fb6b 	bl	8011ff0 <USB_ReadPMA>
 800a91a:	e082      	b.n	800aa22 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a91e:	78db      	ldrb	r3, [r3, #3]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d10a      	bne.n	800a93a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a928:	461a      	mov	r2, r3
 800a92a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f9d3 	bl	800acd8 <HAL_PCD_EP_DB_Receive>
 800a932:	4603      	mov	r3, r0
 800a934:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a938:	e073      	b.n	800aa22 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a954:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	441a      	add	r2, r3
 800a966:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d022      	beq.n	800a9de <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	4413      	add	r3, r2
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a9c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d02c      	beq.n	800aa22 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6818      	ldr	r0, [r3, #0]
 800a9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ce:	6959      	ldr	r1, [r3, #20]
 800a9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d2:	891a      	ldrh	r2, [r3, #8]
 800a9d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a9d8:	f007 fb0a 	bl	8011ff0 <USB_ReadPMA>
 800a9dc:	e021      	b.n	800aa22 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800aa06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d009      	beq.n	800aa22 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa14:	6959      	ldr	r1, [r3, #20]
 800aa16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa18:	895a      	ldrh	r2, [r3, #10]
 800aa1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa1e:	f007 fae7 	bl	8011ff0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800aa22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa24:	69da      	ldr	r2, [r3, #28]
 800aa26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa2a:	441a      	add	r2, r3
 800aa2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800aa30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa32:	695a      	ldr	r2, [r3, #20]
 800aa34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa38:	441a      	add	r2, r3
 800aa3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800aa3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <PCD_EP_ISR_Handler+0x4fe>
 800aa46:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800aa4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d206      	bcs.n	800aa60 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800aa52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f00b f8a1 	bl	8015ba0 <HAL_PCD_DataOutStageCallback>
 800aa5e:	e005      	b.n	800aa6c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa66:	4618      	mov	r0, r3
 800aa68:	f005 fd95 	bl	8010596 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800aa6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aa70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8121 	beq.w	800acbc <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800aa7a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	3310      	adds	r3, #16
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	461a      	mov	r2, r3
 800aab2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	441a      	add	r2, r3
 800aaba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aabe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800aaca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	f040 80a2 	bne.w	800ac18 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800aad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad6:	2200      	movs	r2, #0
 800aad8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800aada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aadc:	7b1b      	ldrb	r3, [r3, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8093 	beq.w	800ac0a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800aae4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d046      	beq.n	800ab7e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aaf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d126      	bne.n	800ab46 <PCD_EP_ISR_Handler+0x5f2>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	4413      	add	r3, r2
 800ab0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	00da      	lsls	r2, r3, #3
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	4413      	add	r3, r2
 800ab1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab1e:	623b      	str	r3, [r7, #32]
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	801a      	strh	r2, [r3, #0]
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	801a      	strh	r2, [r3, #0]
 800ab44:	e061      	b.n	800ac0a <PCD_EP_ISR_Handler+0x6b6>
 800ab46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab48:	785b      	ldrb	r3, [r3, #1]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d15d      	bne.n	800ac0a <PCD_EP_ISR_Handler+0x6b6>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	4413      	add	r3, r2
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	00da      	lsls	r2, r3, #3
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	4413      	add	r3, r2
 800ab70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab74:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	2200      	movs	r2, #0
 800ab7a:	801a      	strh	r2, [r3, #0]
 800ab7c:	e045      	b.n	800ac0a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d126      	bne.n	800abda <PCD_EP_ISR_Handler+0x686>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	637b      	str	r3, [r7, #52]	; 0x34
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba0:	4413      	add	r3, r2
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34
 800aba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	00da      	lsls	r2, r3, #3
 800abaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abac:	4413      	add	r3, r2
 800abae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abb2:	633b      	str	r3, [r7, #48]	; 0x30
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	801a      	strh	r2, [r3, #0]
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	e017      	b.n	800ac0a <PCD_EP_ISR_Handler+0x6b6>
 800abda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d113      	bne.n	800ac0a <PCD_EP_ISR_Handler+0x6b6>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abea:	b29b      	uxth	r3, r3
 800abec:	461a      	mov	r2, r3
 800abee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf0:	4413      	add	r3, r2
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	00da      	lsls	r2, r3, #3
 800abfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfc:	4413      	add	r3, r2
 800abfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac02:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	2200      	movs	r2, #0
 800ac08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f00a ffe0 	bl	8015bd6 <HAL_PCD_DataInStageCallback>
 800ac16:	e051      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ac18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ac1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d144      	bne.n	800acae <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	4413      	add	r3, r2
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6812      	ldr	r2, [r2, #0]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800ac4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac4e:	699a      	ldr	r2, [r3, #24]
 800ac50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d907      	bls.n	800ac68 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800ac58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac5a:	699a      	ldr	r2, [r3, #24]
 800ac5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac60:	1ad2      	subs	r2, r2, r3
 800ac62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac64:	619a      	str	r2, [r3, #24]
 800ac66:	e002      	b.n	800ac6e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800ac68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ac6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f00a ffaa 	bl	8015bd6 <HAL_PCD_DataInStageCallback>
 800ac82:	e01b      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ac84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac86:	695a      	ldr	r2, [r3, #20]
 800ac88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac8c:	441a      	add	r2, r3
 800ac8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac90:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ac92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac9a:	441a      	add	r2, r3
 800ac9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac9e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aca6:	4618      	mov	r0, r3
 800aca8:	f005 fc75 	bl	8010596 <USB_EPStartXfer>
 800acac:	e006      	b.n	800acbc <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800acae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800acb2:	461a      	mov	r2, r3
 800acb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f917 	bl	800aeea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	b21b      	sxth	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f6ff ac48 	blt.w	800a55e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3758      	adds	r7, #88	; 0x58
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d07c      	beq.n	800adea <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	461a      	mov	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	00db      	lsls	r3, r3, #3
 800ad02:	4413      	add	r3, r2
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	6812      	ldr	r2, [r2, #0]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad14:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	699a      	ldr	r2, [r3, #24]
 800ad1a:	8b7b      	ldrh	r3, [r7, #26]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d306      	bcc.n	800ad2e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	8b7b      	ldrh	r3, [r7, #26]
 800ad26:	1ad2      	subs	r2, r2, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	619a      	str	r2, [r3, #24]
 800ad2c:	e002      	b.n	800ad34 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2200      	movs	r2, #0
 800ad32:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d123      	bne.n	800ad84 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad56:	833b      	strh	r3, [r7, #24]
 800ad58:	8b3b      	ldrh	r3, [r7, #24]
 800ad5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad5e:	833b      	strh	r3, [r7, #24]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	461a      	mov	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	441a      	add	r2, r3
 800ad6e:	8b3b      	ldrh	r3, [r7, #24]
 800ad70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01f      	beq.n	800adce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ada4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada8:	82fb      	strh	r3, [r7, #22]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	441a      	add	r2, r3
 800adb8:	8afb      	ldrh	r3, [r7, #22]
 800adba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adca:	b29b      	uxth	r3, r3
 800adcc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800adce:	8b7b      	ldrh	r3, [r7, #26]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8085 	beq.w	800aee0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6959      	ldr	r1, [r3, #20]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	891a      	ldrh	r2, [r3, #8]
 800ade2:	8b7b      	ldrh	r3, [r7, #26]
 800ade4:	f007 f904 	bl	8011ff0 <USB_ReadPMA>
 800ade8:	e07a      	b.n	800aee0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	461a      	mov	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	4413      	add	r3, r2
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	4413      	add	r3, r2
 800ae04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	699a      	ldr	r2, [r3, #24]
 800ae14:	8b7b      	ldrh	r3, [r7, #26]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d306      	bcc.n	800ae28 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	8b7b      	ldrh	r3, [r7, #26]
 800ae20:	1ad2      	subs	r2, r2, r3
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	619a      	str	r2, [r3, #24]
 800ae26:	e002      	b.n	800ae2e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d123      	bne.n	800ae7e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae50:	83fb      	strh	r3, [r7, #30]
 800ae52:	8bfb      	ldrh	r3, [r7, #30]
 800ae54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae58:	83fb      	strh	r3, [r7, #30]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	441a      	add	r2, r3
 800ae68:	8bfb      	ldrh	r3, [r7, #30]
 800ae6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ae7e:	88fb      	ldrh	r3, [r7, #6]
 800ae80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d11f      	bne.n	800aec8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea2:	83bb      	strh	r3, [r7, #28]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	441a      	add	r2, r3
 800aeb2:	8bbb      	ldrh	r3, [r7, #28]
 800aeb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800aec8:	8b7b      	ldrh	r3, [r7, #26]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d008      	beq.n	800aee0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6818      	ldr	r0, [r3, #0]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6959      	ldr	r1, [r3, #20]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	895a      	ldrh	r2, [r3, #10]
 800aeda:	8b7b      	ldrh	r3, [r7, #26]
 800aedc:	f007 f888 	bl	8011ff0 <USB_ReadPMA>
    }
  }

  return count;
 800aee0:	8b7b      	ldrh	r3, [r7, #26]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3720      	adds	r7, #32
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b0a4      	sub	sp, #144	; 0x90
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	4613      	mov	r3, r2
 800aef6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800aef8:	88fb      	ldrh	r3, [r7, #6]
 800aefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 81db 	beq.w	800b2ba <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	4413      	add	r3, r2
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	6812      	ldr	r2, [r2, #0]
 800af1c:	4413      	add	r3, r2
 800af1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af28:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af34:	429a      	cmp	r2, r3
 800af36:	d907      	bls.n	800af48 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af40:	1ad2      	subs	r2, r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	619a      	str	r2, [r3, #24]
 800af46:	e002      	b.n	800af4e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2200      	movs	r2, #0
 800af4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f040 80b9 	bne.w	800b0ca <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	785b      	ldrb	r3, [r3, #1]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d126      	bne.n	800afae <HAL_PCD_EP_DB_Transmit+0xc4>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af6e:	b29b      	uxth	r3, r3
 800af70:	461a      	mov	r2, r3
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	4413      	add	r3, r2
 800af76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	00da      	lsls	r2, r3, #3
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	4413      	add	r3, r2
 800af82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af86:	62bb      	str	r3, [r7, #40]	; 0x28
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af92:	b29a      	uxth	r2, r3
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	801a      	strh	r2, [r3, #0]
 800afac:	e01a      	b.n	800afe4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d116      	bne.n	800afe4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	637b      	str	r3, [r7, #52]	; 0x34
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afca:	4413      	add	r3, r2
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	00da      	lsls	r2, r3, #3
 800afd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd6:	4413      	add	r3, r2
 800afd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afdc:	633b      	str	r3, [r7, #48]	; 0x30
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	2200      	movs	r2, #0
 800afe2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d126      	bne.n	800b040 <HAL_PCD_EP_DB_Transmit+0x156>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b000:	b29b      	uxth	r3, r3
 800b002:	461a      	mov	r2, r3
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	4413      	add	r3, r2
 800b008:	61fb      	str	r3, [r7, #28]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	00da      	lsls	r2, r3, #3
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	4413      	add	r3, r2
 800b014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b018:	61bb      	str	r3, [r7, #24]
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b024:	b29a      	uxth	r2, r3
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	801a      	strh	r2, [r3, #0]
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b038:	b29a      	uxth	r2, r3
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	801a      	strh	r2, [r3, #0]
 800b03e:	e017      	b.n	800b070 <HAL_PCD_EP_DB_Transmit+0x186>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d113      	bne.n	800b070 <HAL_PCD_EP_DB_Transmit+0x186>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b050:	b29b      	uxth	r3, r3
 800b052:	461a      	mov	r2, r3
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	4413      	add	r3, r2
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	00da      	lsls	r2, r3, #3
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	4413      	add	r3, r2
 800b064:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	2200      	movs	r2, #0
 800b06e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	4619      	mov	r1, r3
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f00a fdad 	bl	8015bd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b07c:	88fb      	ldrh	r3, [r7, #6]
 800b07e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 82fa 	beq.w	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0a2:	82fb      	strh	r3, [r7, #22]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	441a      	add	r2, r3
 800b0b2:	8afb      	ldrh	r3, [r7, #22]
 800b0b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	8013      	strh	r3, [r2, #0]
 800b0c8:	e2d8      	b.n	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b0ca:	88fb      	ldrh	r3, [r7, #6]
 800b0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d021      	beq.n	800b118 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	441a      	add	r2, r3
 800b100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b10c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b114:	b29b      	uxth	r3, r3
 800b116:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b11e:	2b01      	cmp	r3, #1
 800b120:	f040 82ac 	bne.w	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	695a      	ldr	r2, [r3, #20]
 800b128:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b12c:	441a      	add	r2, r3
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	69da      	ldr	r2, [r3, #28]
 800b136:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b13a:	441a      	add	r2, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	6a1a      	ldr	r2, [r3, #32]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d30b      	bcc.n	800b164 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6a1a      	ldr	r2, [r3, #32]
 800b158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b15c:	1ad2      	subs	r2, r2, r3
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	621a      	str	r2, [r3, #32]
 800b162:	e017      	b.n	800b194 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d108      	bne.n	800b17e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800b16c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b17c:	e00a      	b.n	800b194 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2200      	movs	r2, #0
 800b192:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	785b      	ldrb	r3, [r3, #1]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d165      	bne.n	800b268 <HAL_PCD_EP_DB_Transmit+0x37e>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b0:	4413      	add	r3, r2
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	00da      	lsls	r2, r3, #3
 800b1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1bc:	4413      	add	r3, r2
 800b1be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	801a      	strh	r2, [r3, #0]
 800b1d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1d8:	2b3e      	cmp	r3, #62	; 0x3e
 800b1da:	d91d      	bls.n	800b218 <HAL_PCD_EP_DB_Transmit+0x32e>
 800b1dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1e0:	095b      	lsrs	r3, r3, #5
 800b1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1e8:	f003 031f 	and.w	r3, r3, #31
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <HAL_PCD_EP_DB_Transmit+0x30c>
 800b1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	029b      	lsls	r3, r3, #10
 800b202:	b29b      	uxth	r3, r3
 800b204:	4313      	orrs	r3, r2
 800b206:	b29b      	uxth	r3, r3
 800b208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b210:	b29a      	uxth	r2, r3
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	801a      	strh	r2, [r3, #0]
 800b216:	e044      	b.n	800b2a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10a      	bne.n	800b236 <HAL_PCD_EP_DB_Transmit+0x34c>
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	b29b      	uxth	r3, r3
 800b226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b22a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b22e:	b29a      	uxth	r2, r3
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	801a      	strh	r2, [r3, #0]
 800b234:	e035      	b.n	800b2a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b23a:	085b      	lsrs	r3, r3, #1
 800b23c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b23e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <HAL_PCD_EP_DB_Transmit+0x366>
 800b24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b24c:	3301      	adds	r3, #1
 800b24e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	b29a      	uxth	r2, r3
 800b256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b258:	b29b      	uxth	r3, r3
 800b25a:	029b      	lsls	r3, r3, #10
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	b29a      	uxth	r2, r3
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	801a      	strh	r2, [r3, #0]
 800b266:	e01c      	b.n	800b2a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	785b      	ldrb	r3, [r3, #1]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d118      	bne.n	800b2a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	647b      	str	r3, [r7, #68]	; 0x44
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b27e:	b29b      	uxth	r3, r3
 800b280:	461a      	mov	r2, r3
 800b282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b284:	4413      	add	r3, r2
 800b286:	647b      	str	r3, [r7, #68]	; 0x44
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	00da      	lsls	r2, r3, #3
 800b28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b290:	4413      	add	r3, r2
 800b292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b296:	643b      	str	r3, [r7, #64]	; 0x40
 800b298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6959      	ldr	r1, [r3, #20]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	891a      	ldrh	r2, [r3, #8]
 800b2ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	f006 fe5a 	bl	8011f6c <USB_WritePMA>
 800b2b8:	e1e0      	b.n	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	4413      	add	r3, r2
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	6812      	ldr	r2, [r2, #0]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d307      	bcc.n	800b2fe <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	699a      	ldr	r2, [r3, #24]
 800b2f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b2f6:	1ad2      	subs	r2, r2, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	619a      	str	r2, [r3, #24]
 800b2fc:	e002      	b.n	800b304 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2200      	movs	r2, #0
 800b302:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f040 80c0 	bne.w	800b48e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	785b      	ldrb	r3, [r3, #1]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d126      	bne.n	800b364 <HAL_PCD_EP_DB_Transmit+0x47a>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b324:	b29b      	uxth	r3, r3
 800b326:	461a      	mov	r2, r3
 800b328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b32a:	4413      	add	r3, r2
 800b32c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	00da      	lsls	r2, r3, #3
 800b334:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b336:	4413      	add	r3, r2
 800b338:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b33c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b33e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b34c:	801a      	strh	r2, [r3, #0]
 800b34e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b360:	801a      	strh	r2, [r3, #0]
 800b362:	e01a      	b.n	800b39a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	785b      	ldrb	r3, [r3, #1]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d116      	bne.n	800b39a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	667b      	str	r3, [r7, #100]	; 0x64
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b380:	4413      	add	r3, r2
 800b382:	667b      	str	r3, [r7, #100]	; 0x64
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	00da      	lsls	r2, r3, #3
 800b38a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b38c:	4413      	add	r3, r2
 800b38e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b392:	663b      	str	r3, [r7, #96]	; 0x60
 800b394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b396:	2200      	movs	r2, #0
 800b398:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	677b      	str	r3, [r7, #116]	; 0x74
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	785b      	ldrb	r3, [r3, #1]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d12b      	bne.n	800b400 <HAL_PCD_EP_DB_Transmit+0x516>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3bc:	4413      	add	r3, r2
 800b3be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	00da      	lsls	r2, r3, #3
 800b3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3e4:	801a      	strh	r2, [r3, #0]
 800b3e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3f6:	b29a      	uxth	r2, r3
 800b3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3fc:	801a      	strh	r2, [r3, #0]
 800b3fe:	e017      	b.n	800b430 <HAL_PCD_EP_DB_Transmit+0x546>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	785b      	ldrb	r3, [r3, #1]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d113      	bne.n	800b430 <HAL_PCD_EP_DB_Transmit+0x546>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b410:	b29b      	uxth	r3, r3
 800b412:	461a      	mov	r2, r3
 800b414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b416:	4413      	add	r3, r2
 800b418:	677b      	str	r3, [r7, #116]	; 0x74
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	00da      	lsls	r2, r3, #3
 800b420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b422:	4413      	add	r3, r2
 800b424:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b428:	673b      	str	r3, [r7, #112]	; 0x70
 800b42a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b42c:	2200      	movs	r2, #0
 800b42e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	4619      	mov	r1, r3
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f00a fbcd 	bl	8015bd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b43c:	88fb      	ldrh	r3, [r7, #6]
 800b43e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b442:	2b00      	cmp	r3, #0
 800b444:	f040 811a 	bne.w	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b462:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	441a      	add	r2, r3
 800b474:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b47c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b488:	b29b      	uxth	r3, r3
 800b48a:	8013      	strh	r3, [r2, #0]
 800b48c:	e0f6      	b.n	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d121      	bne.n	800b4dc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	461a      	mov	r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	441a      	add	r2, r3
 800b4c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b4c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	f040 80ca 	bne.w	800b67c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	695a      	ldr	r2, [r3, #20]
 800b4ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b4f0:	441a      	add	r2, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	69da      	ldr	r2, [r3, #28]
 800b4fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b4fe:	441a      	add	r2, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	6a1a      	ldr	r2, [r3, #32]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d30b      	bcc.n	800b528 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	6a1a      	ldr	r2, [r3, #32]
 800b51c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b520:	1ad2      	subs	r2, r2, r3
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	621a      	str	r2, [r3, #32]
 800b526:	e017      	b.n	800b558 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d108      	bne.n	800b542 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b530:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b540:	e00a      	b.n	800b558 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2200      	movs	r2, #0
 800b54e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	657b      	str	r3, [r7, #84]	; 0x54
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d165      	bne.n	800b632 <HAL_PCD_EP_DB_Transmit+0x748>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b574:	b29b      	uxth	r3, r3
 800b576:	461a      	mov	r2, r3
 800b578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b57a:	4413      	add	r3, r2
 800b57c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	00da      	lsls	r2, r3, #3
 800b584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b586:	4413      	add	r3, r2
 800b588:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b58c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b58e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	b29b      	uxth	r3, r3
 800b594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b598:	b29a      	uxth	r2, r3
 800b59a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b59c:	801a      	strh	r2, [r3, #0]
 800b59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b5a4:	d91d      	bls.n	800b5e2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b5a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5aa:	095b      	lsrs	r3, r3, #5
 800b5ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5b2:	f003 031f 	and.w	r3, r3, #31
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d102      	bne.n	800b5c0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b5ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	029b      	lsls	r3, r3, #10
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5de:	801a      	strh	r2, [r3, #0]
 800b5e0:	e041      	b.n	800b666 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10a      	bne.n	800b600 <HAL_PCD_EP_DB_Transmit+0x716>
 800b5ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5fc:	801a      	strh	r2, [r3, #0]
 800b5fe:	e032      	b.n	800b666 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b604:	085b      	lsrs	r3, r3, #1
 800b606:	66bb      	str	r3, [r7, #104]	; 0x68
 800b608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <HAL_PCD_EP_DB_Transmit+0x730>
 800b614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b616:	3301      	adds	r3, #1
 800b618:	66bb      	str	r3, [r7, #104]	; 0x68
 800b61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	b29a      	uxth	r2, r3
 800b620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b622:	b29b      	uxth	r3, r3
 800b624:	029b      	lsls	r3, r3, #10
 800b626:	b29b      	uxth	r3, r3
 800b628:	4313      	orrs	r3, r2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b62e:	801a      	strh	r2, [r3, #0]
 800b630:	e019      	b.n	800b666 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	785b      	ldrb	r3, [r3, #1]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d115      	bne.n	800b666 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b642:	b29b      	uxth	r3, r3
 800b644:	461a      	mov	r2, r3
 800b646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b648:	4413      	add	r3, r2
 800b64a:	657b      	str	r3, [r7, #84]	; 0x54
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	00da      	lsls	r2, r3, #3
 800b652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b654:	4413      	add	r3, r2
 800b656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b65a:	653b      	str	r3, [r7, #80]	; 0x50
 800b65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b660:	b29a      	uxth	r2, r3
 800b662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b664:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	6959      	ldr	r1, [r3, #20]
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	895a      	ldrh	r2, [r3, #10]
 800b672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b676:	b29b      	uxth	r3, r3
 800b678:	f006 fc78 	bl	8011f6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b696:	82bb      	strh	r3, [r7, #20]
 800b698:	8abb      	ldrh	r3, [r7, #20]
 800b69a:	f083 0310 	eor.w	r3, r3, #16
 800b69e:	82bb      	strh	r3, [r7, #20]
 800b6a0:	8abb      	ldrh	r3, [r7, #20]
 800b6a2:	f083 0320 	eor.w	r3, r3, #32
 800b6a6:	82bb      	strh	r3, [r7, #20]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	441a      	add	r2, r3
 800b6b6:	8abb      	ldrh	r3, [r7, #20]
 800b6b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3790      	adds	r7, #144	; 0x90
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b087      	sub	sp, #28
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	607b      	str	r3, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	817b      	strh	r3, [r7, #10]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b6e8:	897b      	ldrh	r3, [r7, #10]
 800b6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00b      	beq.n	800b70c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6f4:	897b      	ldrh	r3, [r7, #10]
 800b6f6:	f003 0207 	and.w	r2, r3, #7
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	3310      	adds	r3, #16
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	4413      	add	r3, r2
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e009      	b.n	800b720 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b70c:	897a      	ldrh	r2, [r7, #10]
 800b70e:	4613      	mov	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	4413      	add	r3, r2
 800b71e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b720:	893b      	ldrh	r3, [r7, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d107      	bne.n	800b736 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2200      	movs	r2, #0
 800b72a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	b29a      	uxth	r2, r3
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	80da      	strh	r2, [r3, #6]
 800b734:	e00b      	b.n	800b74e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2201      	movs	r2, #1
 800b73a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	0c1b      	lsrs	r3, r3, #16
 800b748:	b29a      	uxth	r2, r3
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b780:	b29b      	uxth	r3, r3
 800b782:	f043 0301 	orr.w	r3, r3, #1
 800b786:	b29a      	uxth	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b794:	b29b      	uxth	r3, r3
 800b796:	f043 0302 	orr.w	r3, r3, #2
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d141      	bne.n	800b842 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b7be:	4b4b      	ldr	r3, [pc, #300]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b7c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ca:	d131      	bne.n	800b830 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b7cc:	4b47      	ldr	r3, [pc, #284]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7d2:	4a46      	ldr	r2, [pc, #280]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b7dc:	4b43      	ldr	r3, [pc, #268]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b7e4:	4a41      	ldr	r2, [pc, #260]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b7ec:	4b40      	ldr	r3, [pc, #256]	; (800b8f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2232      	movs	r2, #50	; 0x32
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	4a3f      	ldr	r2, [pc, #252]	; (800b8f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fc:	0c9b      	lsrs	r3, r3, #18
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b802:	e002      	b.n	800b80a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3b01      	subs	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b80a:	4b38      	ldr	r3, [pc, #224]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b816:	d102      	bne.n	800b81e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f2      	bne.n	800b804 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b81e:	4b33      	ldr	r3, [pc, #204]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b82a:	d158      	bne.n	800b8de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e057      	b.n	800b8e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b830:	4b2e      	ldr	r3, [pc, #184]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b836:	4a2d      	ldr	r2, [pc, #180]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b83c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b840:	e04d      	b.n	800b8de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b848:	d141      	bne.n	800b8ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b84a:	4b28      	ldr	r3, [pc, #160]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b856:	d131      	bne.n	800b8bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b858:	4b24      	ldr	r3, [pc, #144]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b85e:	4a23      	ldr	r2, [pc, #140]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b868:	4b20      	ldr	r3, [pc, #128]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b870:	4a1e      	ldr	r2, [pc, #120]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b876:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b878:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2232      	movs	r2, #50	; 0x32
 800b87e:	fb02 f303 	mul.w	r3, r2, r3
 800b882:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b884:	fba2 2303 	umull	r2, r3, r2, r3
 800b888:	0c9b      	lsrs	r3, r3, #18
 800b88a:	3301      	adds	r3, #1
 800b88c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b88e:	e002      	b.n	800b896 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3b01      	subs	r3, #1
 800b894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b896:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b89e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a2:	d102      	bne.n	800b8aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1f2      	bne.n	800b890 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b8aa:	4b10      	ldr	r3, [pc, #64]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b6:	d112      	bne.n	800b8de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	e011      	b.n	800b8e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c2:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b8cc:	e007      	b.n	800b8de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b8ce:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b8d6:	4a05      	ldr	r2, [pc, #20]	; (800b8ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b8dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	40007000 	.word	0x40007000
 800b8f0:	200001c4 	.word	0x200001c4
 800b8f4:	431bde83 	.word	0x431bde83

0800b8f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b8fc:	4b05      	ldr	r3, [pc, #20]	; (800b914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	4a04      	ldr	r2, [pc, #16]	; (800b914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b906:	6093      	str	r3, [r2, #8]
}
 800b908:	bf00      	nop
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	40007000 	.word	0x40007000

0800b918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e2fe      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0301 	and.w	r3, r3, #1
 800b932:	2b00      	cmp	r3, #0
 800b934:	d075      	beq.n	800ba22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b936:	4b97      	ldr	r3, [pc, #604]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 030c 	and.w	r3, r3, #12
 800b93e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b940:	4b94      	ldr	r3, [pc, #592]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	f003 0303 	and.w	r3, r3, #3
 800b948:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b0c      	cmp	r3, #12
 800b94e:	d102      	bne.n	800b956 <HAL_RCC_OscConfig+0x3e>
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b03      	cmp	r3, #3
 800b954:	d002      	beq.n	800b95c <HAL_RCC_OscConfig+0x44>
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	2b08      	cmp	r3, #8
 800b95a:	d10b      	bne.n	800b974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b95c:	4b8d      	ldr	r3, [pc, #564]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d05b      	beq.n	800ba20 <HAL_RCC_OscConfig+0x108>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d157      	bne.n	800ba20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	e2d9      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b97c:	d106      	bne.n	800b98c <HAL_RCC_OscConfig+0x74>
 800b97e:	4b85      	ldr	r3, [pc, #532]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a84      	ldr	r2, [pc, #528]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	e01d      	b.n	800b9c8 <HAL_RCC_OscConfig+0xb0>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b994:	d10c      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x98>
 800b996:	4b7f      	ldr	r3, [pc, #508]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a7e      	ldr	r2, [pc, #504]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b99c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	4b7c      	ldr	r3, [pc, #496]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a7b      	ldr	r2, [pc, #492]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	e00b      	b.n	800b9c8 <HAL_RCC_OscConfig+0xb0>
 800b9b0:	4b78      	ldr	r3, [pc, #480]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a77      	ldr	r2, [pc, #476]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	4b75      	ldr	r3, [pc, #468]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a74      	ldr	r2, [pc, #464]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d013      	beq.n	800b9f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d0:	f7fa fafe 	bl	8005fd0 <HAL_GetTick>
 800b9d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b9d6:	e008      	b.n	800b9ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b9d8:	f7fa fafa 	bl	8005fd0 <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b64      	cmp	r3, #100	; 0x64
 800b9e4:	d901      	bls.n	800b9ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e29e      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b9ea:	4b6a      	ldr	r3, [pc, #424]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0f0      	beq.n	800b9d8 <HAL_RCC_OscConfig+0xc0>
 800b9f6:	e014      	b.n	800ba22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f8:	f7fa faea 	bl	8005fd0 <HAL_GetTick>
 800b9fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b9fe:	e008      	b.n	800ba12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba00:	f7fa fae6 	bl	8005fd0 <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	2b64      	cmp	r3, #100	; 0x64
 800ba0c:	d901      	bls.n	800ba12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e28a      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba12:	4b60      	ldr	r3, [pc, #384]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1f0      	bne.n	800ba00 <HAL_RCC_OscConfig+0xe8>
 800ba1e:	e000      	b.n	800ba22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d075      	beq.n	800bb1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba2e:	4b59      	ldr	r3, [pc, #356]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f003 030c 	and.w	r3, r3, #12
 800ba36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba38:	4b56      	ldr	r3, [pc, #344]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	2b0c      	cmp	r3, #12
 800ba46:	d102      	bne.n	800ba4e <HAL_RCC_OscConfig+0x136>
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d002      	beq.n	800ba54 <HAL_RCC_OscConfig+0x13c>
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d11f      	bne.n	800ba94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba54:	4b4f      	ldr	r3, [pc, #316]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <HAL_RCC_OscConfig+0x154>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e25d      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba6c:	4b49      	ldr	r3, [pc, #292]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	061b      	lsls	r3, r3, #24
 800ba7a:	4946      	ldr	r1, [pc, #280]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ba80:	4b45      	ldr	r3, [pc, #276]	; (800bb98 <HAL_RCC_OscConfig+0x280>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fa fa57 	bl	8005f38 <HAL_InitTick>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d043      	beq.n	800bb18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e249      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d023      	beq.n	800bae4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ba9c:	4b3d      	ldr	r3, [pc, #244]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a3c      	ldr	r2, [pc, #240]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800baa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baa8:	f7fa fa92 	bl	8005fd0 <HAL_GetTick>
 800baac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800baae:	e008      	b.n	800bac2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bab0:	f7fa fa8e 	bl	8005fd0 <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	2b02      	cmp	r3, #2
 800babc:	d901      	bls.n	800bac2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e232      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bac2:	4b34      	ldr	r3, [pc, #208]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0f0      	beq.n	800bab0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bace:	4b31      	ldr	r3, [pc, #196]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	061b      	lsls	r3, r3, #24
 800badc:	492d      	ldr	r1, [pc, #180]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bade:	4313      	orrs	r3, r2
 800bae0:	604b      	str	r3, [r1, #4]
 800bae2:	e01a      	b.n	800bb1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bae4:	4b2b      	ldr	r3, [pc, #172]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a2a      	ldr	r2, [pc, #168]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800baea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baf0:	f7fa fa6e 	bl	8005fd0 <HAL_GetTick>
 800baf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800baf6:	e008      	b.n	800bb0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800baf8:	f7fa fa6a 	bl	8005fd0 <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d901      	bls.n	800bb0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	e20e      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb0a:	4b22      	ldr	r3, [pc, #136]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1f0      	bne.n	800baf8 <HAL_RCC_OscConfig+0x1e0>
 800bb16:	e000      	b.n	800bb1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 0308 	and.w	r3, r3, #8
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d041      	beq.n	800bbaa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d01c      	beq.n	800bb68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb2e:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bb30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb34:	4a17      	ldr	r2, [pc, #92]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bb36:	f043 0301 	orr.w	r3, r3, #1
 800bb3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb3e:	f7fa fa47 	bl	8005fd0 <HAL_GetTick>
 800bb42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb44:	e008      	b.n	800bb58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb46:	f7fa fa43 	bl	8005fd0 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e1e7      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb58:	4b0e      	ldr	r3, [pc, #56]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bb5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb5e:	f003 0302 	and.w	r3, r3, #2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0ef      	beq.n	800bb46 <HAL_RCC_OscConfig+0x22e>
 800bb66:	e020      	b.n	800bbaa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb68:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bb6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb6e:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <HAL_RCC_OscConfig+0x27c>)
 800bb70:	f023 0301 	bic.w	r3, r3, #1
 800bb74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb78:	f7fa fa2a 	bl	8005fd0 <HAL_GetTick>
 800bb7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bb7e:	e00d      	b.n	800bb9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb80:	f7fa fa26 	bl	8005fd0 <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d906      	bls.n	800bb9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e1ca      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
 800bb92:	bf00      	nop
 800bb94:	40021000 	.word	0x40021000
 800bb98:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bb9c:	4b8c      	ldr	r3, [pc, #560]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bb9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1ea      	bne.n	800bb80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 80a6 	beq.w	800bd04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bbbc:	4b84      	ldr	r3, [pc, #528]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bbbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <HAL_RCC_OscConfig+0x2b4>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e000      	b.n	800bbce <HAL_RCC_OscConfig+0x2b6>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00d      	beq.n	800bbee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbd2:	4b7f      	ldr	r3, [pc, #508]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd6:	4a7e      	ldr	r2, [pc, #504]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bbd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbdc:	6593      	str	r3, [r2, #88]	; 0x58
 800bbde:	4b7c      	ldr	r3, [pc, #496]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bbe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bbea:	2301      	movs	r3, #1
 800bbec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bbee:	4b79      	ldr	r3, [pc, #484]	; (800bdd4 <HAL_RCC_OscConfig+0x4bc>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d118      	bne.n	800bc2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbfa:	4b76      	ldr	r3, [pc, #472]	; (800bdd4 <HAL_RCC_OscConfig+0x4bc>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a75      	ldr	r2, [pc, #468]	; (800bdd4 <HAL_RCC_OscConfig+0x4bc>)
 800bc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc06:	f7fa f9e3 	bl	8005fd0 <HAL_GetTick>
 800bc0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc0c:	e008      	b.n	800bc20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc0e:	f7fa f9df 	bl	8005fd0 <HAL_GetTick>
 800bc12:	4602      	mov	r2, r0
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d901      	bls.n	800bc20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e183      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc20:	4b6c      	ldr	r3, [pc, #432]	; (800bdd4 <HAL_RCC_OscConfig+0x4bc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d0f0      	beq.n	800bc0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d108      	bne.n	800bc46 <HAL_RCC_OscConfig+0x32e>
 800bc34:	4b66      	ldr	r3, [pc, #408]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc3a:	4a65      	ldr	r2, [pc, #404]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc3c:	f043 0301 	orr.w	r3, r3, #1
 800bc40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc44:	e024      	b.n	800bc90 <HAL_RCC_OscConfig+0x378>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	2b05      	cmp	r3, #5
 800bc4c:	d110      	bne.n	800bc70 <HAL_RCC_OscConfig+0x358>
 800bc4e:	4b60      	ldr	r3, [pc, #384]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc54:	4a5e      	ldr	r2, [pc, #376]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc56:	f043 0304 	orr.w	r3, r3, #4
 800bc5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc5e:	4b5c      	ldr	r3, [pc, #368]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc64:	4a5a      	ldr	r2, [pc, #360]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc66:	f043 0301 	orr.w	r3, r3, #1
 800bc6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc6e:	e00f      	b.n	800bc90 <HAL_RCC_OscConfig+0x378>
 800bc70:	4b57      	ldr	r3, [pc, #348]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc76:	4a56      	ldr	r2, [pc, #344]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc80:	4b53      	ldr	r3, [pc, #332]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc86:	4a52      	ldr	r2, [pc, #328]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bc88:	f023 0304 	bic.w	r3, r3, #4
 800bc8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d016      	beq.n	800bcc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc98:	f7fa f99a 	bl	8005fd0 <HAL_GetTick>
 800bc9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc9e:	e00a      	b.n	800bcb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bca0:	f7fa f996 	bl	8005fd0 <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d901      	bls.n	800bcb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e138      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcb6:	4b46      	ldr	r3, [pc, #280]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bcb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0ed      	beq.n	800bca0 <HAL_RCC_OscConfig+0x388>
 800bcc4:	e015      	b.n	800bcf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcc6:	f7fa f983 	bl	8005fd0 <HAL_GetTick>
 800bcca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bccc:	e00a      	b.n	800bce4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcce:	f7fa f97f 	bl	8005fd0 <HAL_GetTick>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d901      	bls.n	800bce4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e121      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bce4:	4b3a      	ldr	r3, [pc, #232]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcea:	f003 0302 	and.w	r3, r3, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1ed      	bne.n	800bcce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bcf2:	7ffb      	ldrb	r3, [r7, #31]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d105      	bne.n	800bd04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bcf8:	4b35      	ldr	r3, [pc, #212]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bcfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcfc:	4a34      	ldr	r2, [pc, #208]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bcfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0320 	and.w	r3, r3, #32
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d03c      	beq.n	800bd8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d01c      	beq.n	800bd52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bd18:	4b2d      	ldr	r3, [pc, #180]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd1e:	4a2c      	ldr	r2, [pc, #176]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd20:	f043 0301 	orr.w	r3, r3, #1
 800bd24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd28:	f7fa f952 	bl	8005fd0 <HAL_GetTick>
 800bd2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bd2e:	e008      	b.n	800bd42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd30:	f7fa f94e 	bl	8005fd0 <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d901      	bls.n	800bd42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e0f2      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bd42:	4b23      	ldr	r3, [pc, #140]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd48:	f003 0302 	and.w	r3, r3, #2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0ef      	beq.n	800bd30 <HAL_RCC_OscConfig+0x418>
 800bd50:	e01b      	b.n	800bd8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bd52:	4b1f      	ldr	r3, [pc, #124]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd58:	4a1d      	ldr	r2, [pc, #116]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd5a:	f023 0301 	bic.w	r3, r3, #1
 800bd5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd62:	f7fa f935 	bl	8005fd0 <HAL_GetTick>
 800bd66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bd68:	e008      	b.n	800bd7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd6a:	f7fa f931 	bl	8005fd0 <HAL_GetTick>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d901      	bls.n	800bd7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e0d5      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bd7c:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd82:	f003 0302 	and.w	r3, r3, #2
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1ef      	bne.n	800bd6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80c9 	beq.w	800bf26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd94:	4b0e      	ldr	r3, [pc, #56]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f003 030c 	and.w	r3, r3, #12
 800bd9c:	2b0c      	cmp	r3, #12
 800bd9e:	f000 8083 	beq.w	800bea8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	69db      	ldr	r3, [r3, #28]
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d15e      	bne.n	800be68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a08      	ldr	r2, [pc, #32]	; (800bdd0 <HAL_RCC_OscConfig+0x4b8>)
 800bdb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdb6:	f7fa f90b 	bl	8005fd0 <HAL_GetTick>
 800bdba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdbc:	e00c      	b.n	800bdd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdbe:	f7fa f907 	bl	8005fd0 <HAL_GetTick>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d905      	bls.n	800bdd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e0ab      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
 800bdd0:	40021000 	.word	0x40021000
 800bdd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdd8:	4b55      	ldr	r3, [pc, #340]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1ec      	bne.n	800bdbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bde4:	4b52      	ldr	r3, [pc, #328]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800bde6:	68da      	ldr	r2, [r3, #12]
 800bde8:	4b52      	ldr	r3, [pc, #328]	; (800bf34 <HAL_RCC_OscConfig+0x61c>)
 800bdea:	4013      	ands	r3, r2
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6a11      	ldr	r1, [r2, #32]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bdf4:	3a01      	subs	r2, #1
 800bdf6:	0112      	lsls	r2, r2, #4
 800bdf8:	4311      	orrs	r1, r2
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bdfe:	0212      	lsls	r2, r2, #8
 800be00:	4311      	orrs	r1, r2
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be06:	0852      	lsrs	r2, r2, #1
 800be08:	3a01      	subs	r2, #1
 800be0a:	0552      	lsls	r2, r2, #21
 800be0c:	4311      	orrs	r1, r2
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be12:	0852      	lsrs	r2, r2, #1
 800be14:	3a01      	subs	r2, #1
 800be16:	0652      	lsls	r2, r2, #25
 800be18:	4311      	orrs	r1, r2
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800be1e:	06d2      	lsls	r2, r2, #27
 800be20:	430a      	orrs	r2, r1
 800be22:	4943      	ldr	r1, [pc, #268]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be24:	4313      	orrs	r3, r2
 800be26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be28:	4b41      	ldr	r3, [pc, #260]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a40      	ldr	r2, [pc, #256]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800be34:	4b3e      	ldr	r3, [pc, #248]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	4a3d      	ldr	r2, [pc, #244]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be40:	f7fa f8c6 	bl	8005fd0 <HAL_GetTick>
 800be44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be48:	f7fa f8c2 	bl	8005fd0 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e066      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be5a:	4b35      	ldr	r3, [pc, #212]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0f0      	beq.n	800be48 <HAL_RCC_OscConfig+0x530>
 800be66:	e05e      	b.n	800bf26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be68:	4b31      	ldr	r3, [pc, #196]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a30      	ldr	r2, [pc, #192]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be74:	f7fa f8ac 	bl	8005fd0 <HAL_GetTick>
 800be78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be7a:	e008      	b.n	800be8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be7c:	f7fa f8a8 	bl	8005fd0 <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b02      	cmp	r3, #2
 800be88:	d901      	bls.n	800be8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e04c      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be8e:	4b28      	ldr	r3, [pc, #160]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1f0      	bne.n	800be7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800be9a:	4b25      	ldr	r3, [pc, #148]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800be9c:	68da      	ldr	r2, [r3, #12]
 800be9e:	4924      	ldr	r1, [pc, #144]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800bea0:	4b25      	ldr	r3, [pc, #148]	; (800bf38 <HAL_RCC_OscConfig+0x620>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	60cb      	str	r3, [r1, #12]
 800bea6:	e03e      	b.n	800bf26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d101      	bne.n	800beb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e039      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800beb4:	4b1e      	ldr	r3, [pc, #120]	; (800bf30 <HAL_RCC_OscConfig+0x618>)
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f003 0203 	and.w	r2, r3, #3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d12c      	bne.n	800bf22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	3b01      	subs	r3, #1
 800bed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d123      	bne.n	800bf22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d11b      	bne.n	800bf22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d113      	bne.n	800bf22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf04:	085b      	lsrs	r3, r3, #1
 800bf06:	3b01      	subs	r3, #1
 800bf08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d109      	bne.n	800bf22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d001      	beq.n	800bf26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40021000 	.word	0x40021000
 800bf34:	019f800c 	.word	0x019f800c
 800bf38:	feeefffc 	.word	0xfeeefffc

0800bf3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e11e      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf54:	4b91      	ldr	r3, [pc, #580]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d910      	bls.n	800bf84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf62:	4b8e      	ldr	r3, [pc, #568]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f023 020f 	bic.w	r2, r3, #15
 800bf6a:	498c      	ldr	r1, [pc, #560]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf72:	4b8a      	ldr	r3, [pc, #552]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 030f 	and.w	r3, r3, #15
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d001      	beq.n	800bf84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e106      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d073      	beq.n	800c078 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d129      	bne.n	800bfec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf98:	4b81      	ldr	r3, [pc, #516]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e0f4      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bfa8:	f000 f99e 	bl	800c2e8 <RCC_GetSysClockFreqFromPLLSource>
 800bfac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	4a7c      	ldr	r2, [pc, #496]	; (800c1a4 <HAL_RCC_ClockConfig+0x268>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d93f      	bls.n	800c036 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bfb6:	4b7a      	ldr	r3, [pc, #488]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d009      	beq.n	800bfd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d033      	beq.n	800c036 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d12f      	bne.n	800c036 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bfd6:	4b72      	ldr	r3, [pc, #456]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfde:	4a70      	ldr	r2, [pc, #448]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800bfe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bfe6:	2380      	movs	r3, #128	; 0x80
 800bfe8:	617b      	str	r3, [r7, #20]
 800bfea:	e024      	b.n	800c036 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d107      	bne.n	800c004 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bff4:	4b6a      	ldr	r3, [pc, #424]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d109      	bne.n	800c014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e0c6      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c004:	4b66      	ldr	r3, [pc, #408]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e0be      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c014:	f000 f8ce 	bl	800c1b4 <HAL_RCC_GetSysClockFreq>
 800c018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	4a61      	ldr	r2, [pc, #388]	; (800c1a4 <HAL_RCC_ClockConfig+0x268>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d909      	bls.n	800c036 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c022:	4b5f      	ldr	r3, [pc, #380]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c02a:	4a5d      	ldr	r2, [pc, #372]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c030:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c032:	2380      	movs	r3, #128	; 0x80
 800c034:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c036:	4b5a      	ldr	r3, [pc, #360]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	f023 0203 	bic.w	r2, r3, #3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	4957      	ldr	r1, [pc, #348]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c044:	4313      	orrs	r3, r2
 800c046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c048:	f7f9 ffc2 	bl	8005fd0 <HAL_GetTick>
 800c04c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c04e:	e00a      	b.n	800c066 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c050:	f7f9 ffbe 	bl	8005fd0 <HAL_GetTick>
 800c054:	4602      	mov	r2, r0
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c05e:	4293      	cmp	r3, r2
 800c060:	d901      	bls.n	800c066 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	e095      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c066:	4b4e      	ldr	r3, [pc, #312]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f003 020c 	and.w	r2, r3, #12
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	429a      	cmp	r2, r3
 800c076:	d1eb      	bne.n	800c050 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d023      	beq.n	800c0cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0304 	and.w	r3, r3, #4
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d005      	beq.n	800c09c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c090:	4b43      	ldr	r3, [pc, #268]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	4a42      	ldr	r2, [pc, #264]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c09a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f003 0308 	and.w	r3, r3, #8
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d007      	beq.n	800c0b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c0a8:	4b3d      	ldr	r3, [pc, #244]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c0b0:	4a3b      	ldr	r2, [pc, #236]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c0b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c0b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0b8:	4b39      	ldr	r3, [pc, #228]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	4936      	ldr	r1, [pc, #216]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	608b      	str	r3, [r1, #8]
 800c0ca:	e008      	b.n	800c0de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	2b80      	cmp	r3, #128	; 0x80
 800c0d0:	d105      	bne.n	800c0de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c0d2:	4b33      	ldr	r3, [pc, #204]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	4a32      	ldr	r2, [pc, #200]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c0d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c0de:	4b2f      	ldr	r3, [pc, #188]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d21d      	bcs.n	800c128 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0ec:	4b2b      	ldr	r3, [pc, #172]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f023 020f 	bic.w	r2, r3, #15
 800c0f4:	4929      	ldr	r1, [pc, #164]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c0fc:	f7f9 ff68 	bl	8005fd0 <HAL_GetTick>
 800c100:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c102:	e00a      	b.n	800c11a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c104:	f7f9 ff64 	bl	8005fd0 <HAL_GetTick>
 800c108:	4602      	mov	r2, r0
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c112:	4293      	cmp	r3, r2
 800c114:	d901      	bls.n	800c11a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e03b      	b.n	800c192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c11a:	4b20      	ldr	r3, [pc, #128]	; (800c19c <HAL_RCC_ClockConfig+0x260>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 030f 	and.w	r3, r3, #15
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d1ed      	bne.n	800c104 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d008      	beq.n	800c146 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c134:	4b1a      	ldr	r3, [pc, #104]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	4917      	ldr	r1, [pc, #92]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c142:	4313      	orrs	r3, r2
 800c144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0308 	and.w	r3, r3, #8
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d009      	beq.n	800c166 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c152:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	490f      	ldr	r1, [pc, #60]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c162:	4313      	orrs	r3, r2
 800c164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c166:	f000 f825 	bl	800c1b4 <HAL_RCC_GetSysClockFreq>
 800c16a:	4602      	mov	r2, r0
 800c16c:	4b0c      	ldr	r3, [pc, #48]	; (800c1a0 <HAL_RCC_ClockConfig+0x264>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	091b      	lsrs	r3, r3, #4
 800c172:	f003 030f 	and.w	r3, r3, #15
 800c176:	490c      	ldr	r1, [pc, #48]	; (800c1a8 <HAL_RCC_ClockConfig+0x26c>)
 800c178:	5ccb      	ldrb	r3, [r1, r3]
 800c17a:	f003 031f 	and.w	r3, r3, #31
 800c17e:	fa22 f303 	lsr.w	r3, r2, r3
 800c182:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <HAL_RCC_ClockConfig+0x270>)
 800c184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c186:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <HAL_RCC_ClockConfig+0x274>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7f9 fed4 	bl	8005f38 <HAL_InitTick>
 800c190:	4603      	mov	r3, r0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3718      	adds	r7, #24
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	40022000 	.word	0x40022000
 800c1a0:	40021000 	.word	0x40021000
 800c1a4:	04c4b400 	.word	0x04c4b400
 800c1a8:	0801ada4 	.word	0x0801ada4
 800c1ac:	200001c4 	.word	0x200001c4
 800c1b0:	200001d8 	.word	0x200001d8

0800c1b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b087      	sub	sp, #28
 800c1b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c1ba:	4b2c      	ldr	r3, [pc, #176]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f003 030c 	and.w	r3, r3, #12
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d102      	bne.n	800c1cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c1c6:	4b2a      	ldr	r3, [pc, #168]	; (800c270 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c1c8:	613b      	str	r3, [r7, #16]
 800c1ca:	e047      	b.n	800c25c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c1cc:	4b27      	ldr	r3, [pc, #156]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f003 030c 	and.w	r3, r3, #12
 800c1d4:	2b08      	cmp	r3, #8
 800c1d6:	d102      	bne.n	800c1de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c1d8:	4b26      	ldr	r3, [pc, #152]	; (800c274 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c1da:	613b      	str	r3, [r7, #16]
 800c1dc:	e03e      	b.n	800c25c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c1de:	4b23      	ldr	r3, [pc, #140]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f003 030c 	and.w	r3, r3, #12
 800c1e6:	2b0c      	cmp	r3, #12
 800c1e8:	d136      	bne.n	800c258 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c1ea:	4b20      	ldr	r3, [pc, #128]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1f4:	4b1d      	ldr	r3, [pc, #116]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	091b      	lsrs	r3, r3, #4
 800c1fa:	f003 030f 	and.w	r3, r3, #15
 800c1fe:	3301      	adds	r3, #1
 800c200:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b03      	cmp	r3, #3
 800c206:	d10c      	bne.n	800c222 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c208:	4a1a      	ldr	r2, [pc, #104]	; (800c274 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c210:	4a16      	ldr	r2, [pc, #88]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c212:	68d2      	ldr	r2, [r2, #12]
 800c214:	0a12      	lsrs	r2, r2, #8
 800c216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c21a:	fb02 f303 	mul.w	r3, r2, r3
 800c21e:	617b      	str	r3, [r7, #20]
      break;
 800c220:	e00c      	b.n	800c23c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c222:	4a13      	ldr	r2, [pc, #76]	; (800c270 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22a:	4a10      	ldr	r2, [pc, #64]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c22c:	68d2      	ldr	r2, [r2, #12]
 800c22e:	0a12      	lsrs	r2, r2, #8
 800c230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c234:	fb02 f303 	mul.w	r3, r2, r3
 800c238:	617b      	str	r3, [r7, #20]
      break;
 800c23a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c23c:	4b0b      	ldr	r3, [pc, #44]	; (800c26c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	0e5b      	lsrs	r3, r3, #25
 800c242:	f003 0303 	and.w	r3, r3, #3
 800c246:	3301      	adds	r3, #1
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	fbb2 f3f3 	udiv	r3, r2, r3
 800c254:	613b      	str	r3, [r7, #16]
 800c256:	e001      	b.n	800c25c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c25c:	693b      	ldr	r3, [r7, #16]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	40021000 	.word	0x40021000
 800c270:	00f42400 	.word	0x00f42400
 800c274:	007a1200 	.word	0x007a1200

0800c278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c278:	b480      	push	{r7}
 800c27a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c27c:	4b03      	ldr	r3, [pc, #12]	; (800c28c <HAL_RCC_GetHCLKFreq+0x14>)
 800c27e:	681b      	ldr	r3, [r3, #0]
}
 800c280:	4618      	mov	r0, r3
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	200001c4 	.word	0x200001c4

0800c290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c294:	f7ff fff0 	bl	800c278 <HAL_RCC_GetHCLKFreq>
 800c298:	4602      	mov	r2, r0
 800c29a:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	0a1b      	lsrs	r3, r3, #8
 800c2a0:	f003 0307 	and.w	r3, r3, #7
 800c2a4:	4904      	ldr	r1, [pc, #16]	; (800c2b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c2a6:	5ccb      	ldrb	r3, [r1, r3]
 800c2a8:	f003 031f 	and.w	r3, r3, #31
 800c2ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	40021000 	.word	0x40021000
 800c2b8:	0801adb4 	.word	0x0801adb4

0800c2bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c2c0:	f7ff ffda 	bl	800c278 <HAL_RCC_GetHCLKFreq>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	0adb      	lsrs	r3, r3, #11
 800c2cc:	f003 0307 	and.w	r3, r3, #7
 800c2d0:	4904      	ldr	r1, [pc, #16]	; (800c2e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c2d2:	5ccb      	ldrb	r3, [r1, r3]
 800c2d4:	f003 031f 	and.w	r3, r3, #31
 800c2d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	40021000 	.word	0x40021000
 800c2e4:	0801adb4 	.word	0x0801adb4

0800c2e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c2ee:	4b1e      	ldr	r3, [pc, #120]	; (800c368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	f003 0303 	and.w	r3, r3, #3
 800c2f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c2f8:	4b1b      	ldr	r3, [pc, #108]	; (800c368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	091b      	lsrs	r3, r3, #4
 800c2fe:	f003 030f 	and.w	r3, r3, #15
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b03      	cmp	r3, #3
 800c30a:	d10c      	bne.n	800c326 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c30c:	4a17      	ldr	r2, [pc, #92]	; (800c36c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	fbb2 f3f3 	udiv	r3, r2, r3
 800c314:	4a14      	ldr	r2, [pc, #80]	; (800c368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c316:	68d2      	ldr	r2, [r2, #12]
 800c318:	0a12      	lsrs	r2, r2, #8
 800c31a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
 800c322:	617b      	str	r3, [r7, #20]
    break;
 800c324:	e00c      	b.n	800c340 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c326:	4a12      	ldr	r2, [pc, #72]	; (800c370 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32e:	4a0e      	ldr	r2, [pc, #56]	; (800c368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c330:	68d2      	ldr	r2, [r2, #12]
 800c332:	0a12      	lsrs	r2, r2, #8
 800c334:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c338:	fb02 f303 	mul.w	r3, r2, r3
 800c33c:	617b      	str	r3, [r7, #20]
    break;
 800c33e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c340:	4b09      	ldr	r3, [pc, #36]	; (800c368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	0e5b      	lsrs	r3, r3, #25
 800c346:	f003 0303 	and.w	r3, r3, #3
 800c34a:	3301      	adds	r3, #1
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c350:	697a      	ldr	r2, [r7, #20]
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	fbb2 f3f3 	udiv	r3, r2, r3
 800c358:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c35a:	687b      	ldr	r3, [r7, #4]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	371c      	adds	r7, #28
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	40021000 	.word	0x40021000
 800c36c:	007a1200 	.word	0x007a1200
 800c370:	00f42400 	.word	0x00f42400

0800c374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c37c:	2300      	movs	r3, #0
 800c37e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c380:	2300      	movs	r3, #0
 800c382:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8098 	beq.w	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c392:	2300      	movs	r3, #0
 800c394:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c396:	4b43      	ldr	r3, [pc, #268]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10d      	bne.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3a2:	4b40      	ldr	r3, [pc, #256]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a6:	4a3f      	ldr	r2, [pc, #252]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ac:	6593      	str	r3, [r2, #88]	; 0x58
 800c3ae:	4b3d      	ldr	r3, [pc, #244]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b6:	60bb      	str	r3, [r7, #8]
 800c3b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c3be:	4b3a      	ldr	r3, [pc, #232]	; (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a39      	ldr	r2, [pc, #228]	; (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c3c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c3ca:	f7f9 fe01 	bl	8005fd0 <HAL_GetTick>
 800c3ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c3d0:	e009      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3d2:	f7f9 fdfd 	bl	8005fd0 <HAL_GetTick>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d902      	bls.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	74fb      	strb	r3, [r7, #19]
        break;
 800c3e4:	e005      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c3e6:	4b30      	ldr	r3, [pc, #192]	; (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0ef      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c3f2:	7cfb      	ldrb	r3, [r7, #19]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d159      	bne.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c3f8:	4b2a      	ldr	r3, [pc, #168]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c402:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d01e      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	429a      	cmp	r2, r3
 800c412:	d019      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c414:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c41a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c41e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c420:	4b20      	ldr	r3, [pc, #128]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c426:	4a1f      	ldr	r2, [pc, #124]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c42c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c430:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c436:	4a1b      	ldr	r2, [pc, #108]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c43c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c440:	4a18      	ldr	r2, [pc, #96]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d016      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c452:	f7f9 fdbd 	bl	8005fd0 <HAL_GetTick>
 800c456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c458:	e00b      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c45a:	f7f9 fdb9 	bl	8005fd0 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	f241 3288 	movw	r2, #5000	; 0x1388
 800c468:	4293      	cmp	r3, r2
 800c46a:	d902      	bls.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	74fb      	strb	r3, [r7, #19]
            break;
 800c470:	e006      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c472:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d0ec      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c480:	7cfb      	ldrb	r3, [r7, #19]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10b      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c48c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c494:	4903      	ldr	r1, [pc, #12]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c496:	4313      	orrs	r3, r2
 800c498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c49c:	e008      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c49e:	7cfb      	ldrb	r3, [r7, #19]
 800c4a0:	74bb      	strb	r3, [r7, #18]
 800c4a2:	e005      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c4a4:	40021000 	.word	0x40021000
 800c4a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ac:	7cfb      	ldrb	r3, [r7, #19]
 800c4ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c4b0:	7c7b      	ldrb	r3, [r7, #17]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d105      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4b6:	4ba6      	ldr	r3, [pc, #664]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ba:	4aa5      	ldr	r2, [pc, #660]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00a      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c4ce:	4ba0      	ldr	r3, [pc, #640]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d4:	f023 0203 	bic.w	r2, r3, #3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	499c      	ldr	r1, [pc, #624]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00a      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c4f0:	4b97      	ldr	r3, [pc, #604]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f6:	f023 020c 	bic.w	r2, r3, #12
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	4994      	ldr	r1, [pc, #592]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c500:	4313      	orrs	r3, r2
 800c502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c512:	4b8f      	ldr	r3, [pc, #572]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	498b      	ldr	r1, [pc, #556]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c522:	4313      	orrs	r3, r2
 800c524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00a      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c534:	4b86      	ldr	r3, [pc, #536]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c53a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	4983      	ldr	r1, [pc, #524]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c544:	4313      	orrs	r3, r2
 800c546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 0320 	and.w	r3, r3, #32
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c556:	4b7e      	ldr	r3, [pc, #504]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c55c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	497a      	ldr	r1, [pc, #488]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c566:	4313      	orrs	r3, r2
 800c568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00a      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c578:	4b75      	ldr	r3, [pc, #468]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c57e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	699b      	ldr	r3, [r3, #24]
 800c586:	4972      	ldr	r1, [pc, #456]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c588:	4313      	orrs	r3, r2
 800c58a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00a      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c59a:	4b6d      	ldr	r3, [pc, #436]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c59c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	4969      	ldr	r1, [pc, #420]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00a      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c5bc:	4b64      	ldr	r3, [pc, #400]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	4961      	ldr	r1, [pc, #388]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00a      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c5de:	4b5c      	ldr	r3, [pc, #368]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ec:	4958      	ldr	r1, [pc, #352]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d015      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c600:	4b53      	ldr	r3, [pc, #332]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60e:	4950      	ldr	r1, [pc, #320]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c610:	4313      	orrs	r3, r2
 800c612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c61e:	d105      	bne.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c620:	4b4b      	ldr	r3, [pc, #300]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	4a4a      	ldr	r2, [pc, #296]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c62a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c634:	2b00      	cmp	r3, #0
 800c636:	d015      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c638:	4b45      	ldr	r3, [pc, #276]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c646:	4942      	ldr	r1, [pc, #264]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c648:	4313      	orrs	r3, r2
 800c64a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c656:	d105      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c658:	4b3d      	ldr	r3, [pc, #244]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	4a3c      	ldr	r2, [pc, #240]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c65e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c662:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d015      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c670:	4b37      	ldr	r3, [pc, #220]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c676:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67e:	4934      	ldr	r1, [pc, #208]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c680:	4313      	orrs	r3, r2
 800c682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c68e:	d105      	bne.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c690:	4b2f      	ldr	r3, [pc, #188]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	4a2e      	ldr	r2, [pc, #184]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c69a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d015      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6a8:	4b29      	ldr	r3, [pc, #164]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b6:	4926      	ldr	r1, [pc, #152]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6c6:	d105      	bne.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6c8:	4b21      	ldr	r3, [pc, #132]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	4a20      	ldr	r2, [pc, #128]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d015      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c6e0:	4b1b      	ldr	r3, [pc, #108]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	4918      	ldr	r1, [pc, #96]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6fe:	d105      	bne.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c700:	4b13      	ldr	r3, [pc, #76]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	4a12      	ldr	r2, [pc, #72]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c70a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d015      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c718:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c71e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c726:	490a      	ldr	r1, [pc, #40]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c728:	4313      	orrs	r3, r2
 800c72a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c736:	d105      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	4a04      	ldr	r2, [pc, #16]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c73e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c742:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c744:	7cbb      	ldrb	r3, [r7, #18]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	40021000 	.word	0x40021000

0800c754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d101      	bne.n	800c766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e09d      	b.n	800c8a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d108      	bne.n	800c780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c776:	d009      	beq.n	800c78c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	61da      	str	r2, [r3, #28]
 800c77e:	e005      	b.n	800c78c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d106      	bne.n	800c7ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7f8 fba0 	bl	8004eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7cc:	d902      	bls.n	800c7d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	e002      	b.n	800c7da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c7d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c7e2:	d007      	beq.n	800c7f4 <HAL_SPI_Init+0xa0>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7ec:	d002      	beq.n	800c7f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c804:	431a      	orrs	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	f003 0302 	and.w	r3, r3, #2
 800c80e:	431a      	orrs	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	431a      	orrs	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c822:	431a      	orrs	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	69db      	ldr	r3, [r3, #28]
 800c828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c836:	ea42 0103 	orr.w	r1, r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	430a      	orrs	r2, r1
 800c848:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	0c1b      	lsrs	r3, r3, #16
 800c850:	f003 0204 	and.w	r2, r3, #4
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c862:	f003 0308 	and.w	r3, r3, #8
 800c866:	431a      	orrs	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c870:	ea42 0103 	orr.w	r1, r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	69da      	ldr	r2, [r3, #28]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b088      	sub	sp, #32
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	603b      	str	r3, [r7, #0]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d101      	bne.n	800c8cc <HAL_SPI_Transmit+0x22>
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	e15f      	b.n	800cb8c <HAL_SPI_Transmit+0x2e2>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8d4:	f7f9 fb7c 	bl	8005fd0 <HAL_GetTick>
 800c8d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c8da:	88fb      	ldrh	r3, [r7, #6]
 800c8dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d002      	beq.n	800c8f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c8ee:	e148      	b.n	800cb82 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <HAL_SPI_Transmit+0x52>
 800c8f6:	88fb      	ldrh	r3, [r7, #6]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c900:	e13f      	b.n	800cb82 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2203      	movs	r2, #3
 800c906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	88fa      	ldrh	r2, [r7, #6]
 800c91a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	88fa      	ldrh	r2, [r7, #6]
 800c920:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c94c:	d10f      	bne.n	800c96e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c95c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c96c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c978:	2b40      	cmp	r3, #64	; 0x40
 800c97a:	d007      	beq.n	800c98c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c98a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c994:	d94f      	bls.n	800ca36 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <HAL_SPI_Transmit+0xfa>
 800c99e:	8afb      	ldrh	r3, [r7, #22]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d142      	bne.n	800ca2a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	881a      	ldrh	r2, [r3, #0]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b4:	1c9a      	adds	r2, r3, #2
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c9c8:	e02f      	b.n	800ca2a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d112      	bne.n	800c9fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9dc:	881a      	ldrh	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e8:	1c9a      	adds	r2, r3, #2
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c9fc:	e015      	b.n	800ca2a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9fe:	f7f9 fae7 	bl	8005fd0 <HAL_GetTick>
 800ca02:	4602      	mov	r2, r0
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d803      	bhi.n	800ca16 <HAL_SPI_Transmit+0x16c>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca14:	d102      	bne.n	800ca1c <HAL_SPI_Transmit+0x172>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d106      	bne.n	800ca2a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ca28:	e0ab      	b.n	800cb82 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1ca      	bne.n	800c9ca <HAL_SPI_Transmit+0x120>
 800ca34:	e080      	b.n	800cb38 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <HAL_SPI_Transmit+0x19a>
 800ca3e:	8afb      	ldrh	r3, [r7, #22]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d174      	bne.n	800cb2e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d912      	bls.n	800ca74 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca52:	881a      	ldrh	r2, [r3, #0]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5e:	1c9a      	adds	r2, r3, #2
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3b02      	subs	r3, #2
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca72:	e05c      	b.n	800cb2e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	330c      	adds	r3, #12
 800ca7e:	7812      	ldrb	r2, [r2, #0]
 800ca80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	3b01      	subs	r3, #1
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ca9a:	e048      	b.n	800cb2e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	f003 0302 	and.w	r3, r3, #2
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d12b      	bne.n	800cb02 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caae:	b29b      	uxth	r3, r3
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d912      	bls.n	800cada <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	881a      	ldrh	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac4:	1c9a      	adds	r2, r3, #2
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3b02      	subs	r3, #2
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cad8:	e029      	b.n	800cb2e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	330c      	adds	r3, #12
 800cae4:	7812      	ldrb	r2, [r2, #0]
 800cae6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	3b01      	subs	r3, #1
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb00:	e015      	b.n	800cb2e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb02:	f7f9 fa65 	bl	8005fd0 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	683a      	ldr	r2, [r7, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d803      	bhi.n	800cb1a <HAL_SPI_Transmit+0x270>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d102      	bne.n	800cb20 <HAL_SPI_Transmit+0x276>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800cb20:	2303      	movs	r3, #3
 800cb22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800cb2c:	e029      	b.n	800cb82 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1b1      	bne.n	800ca9c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f000 fad7 	bl	800d0f0 <SPI_EndRxTxTransaction>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2220      	movs	r2, #32
 800cb4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10a      	bne.n	800cb6c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb56:	2300      	movs	r3, #0
 800cb58:	613b      	str	r3, [r7, #16]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	613b      	str	r3, [r7, #16]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	613b      	str	r3, [r7, #16]
 800cb6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d002      	beq.n	800cb7a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	77fb      	strb	r3, [r7, #31]
 800cb78:	e003      	b.n	800cb82 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d101      	bne.n	800cbb4 <HAL_SPI_Transmit_DMA+0x20>
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e0d4      	b.n	800cd5e <HAL_SPI_Transmit_DMA+0x1ca>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d002      	beq.n	800cbce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbcc:	e0c2      	b.n	800cd54 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <HAL_SPI_Transmit_DMA+0x46>
 800cbd4:	88fb      	ldrh	r3, [r7, #6]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d102      	bne.n	800cbe0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbde:	e0b9      	b.n	800cd54 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2203      	movs	r2, #3
 800cbe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	88fa      	ldrh	r2, [r7, #6]
 800cbf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	88fa      	ldrh	r2, [r7, #6]
 800cbfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc2a:	d10f      	bne.n	800cc4c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc50:	4a45      	ldr	r2, [pc, #276]	; (800cd68 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cc52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc58:	4a44      	ldr	r2, [pc, #272]	; (800cd6c <HAL_SPI_Transmit_DMA+0x1d8>)
 800cc5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc60:	4a43      	ldr	r2, [pc, #268]	; (800cd70 <HAL_SPI_Transmit_DMA+0x1dc>)
 800cc62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc68:	2200      	movs	r2, #0
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685a      	ldr	r2, [r3, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc7a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc84:	d82d      	bhi.n	800cce2 <HAL_SPI_Transmit_DMA+0x14e>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc90:	d127      	bne.n	800cce2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10f      	bne.n	800ccc0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	085b      	lsrs	r3, r3, #1
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ccbe:	e010      	b.n	800cce2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ccce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	085b      	lsrs	r3, r3, #1
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	3301      	adds	r3, #1
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	4619      	mov	r1, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccf8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ccfa:	f7fc f87b 	bl	8008df4 <HAL_DMA_Start_IT>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d008      	beq.n	800cd16 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd08:	f043 0210 	orr.w	r2, r3, #16
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cd14:	e01e      	b.n	800cd54 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd20:	2b40      	cmp	r3, #64	; 0x40
 800cd22:	d007      	beq.n	800cd34 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd32:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0220 	orr.w	r2, r2, #32
 800cd42:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0202 	orr.w	r2, r2, #2
 800cd52:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	0800ce57 	.word	0x0800ce57
 800cd6c:	0800cdb1 	.word	0x0800cdb1
 800cd70:	0800ce73 	.word	0x0800ce73

0800cd74 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cda4:	bf00      	nop
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdbe:	f7f9 f907 	bl	8005fd0 <HAL_GetTick>
 800cdc2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 0320 	and.w	r3, r3, #32
 800cdce:	2b20      	cmp	r3, #32
 800cdd0:	d03b      	beq.n	800ce4a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f022 0220 	bic.w	r2, r2, #32
 800cde0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	685a      	ldr	r2, [r3, #4]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f022 0202 	bic.w	r2, r2, #2
 800cdf0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	2164      	movs	r1, #100	; 0x64
 800cdf6:	6978      	ldr	r0, [r7, #20]
 800cdf8:	f000 f97a 	bl	800d0f0 <SPI_EndRxTxTransaction>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce06:	f043 0220 	orr.w	r2, r3, #32
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10a      	bne.n	800ce2c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2201      	movs	r2, #1
 800ce36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ce42:	6978      	ldr	r0, [r7, #20]
 800ce44:	f7ff ffaa 	bl	800cd9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ce48:	e002      	b.n	800ce50 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ce4a:	6978      	ldr	r0, [r7, #20]
 800ce4c:	f7ff ff92 	bl	800cd74 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce62:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f7ff ff8f 	bl	800cd88 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce6a:	bf00      	nop
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0203 	bic.w	r2, r2, #3
 800ce8e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce94:	f043 0210 	orr.w	r2, r3, #16
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff ff79 	bl	800cd9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ceaa:	bf00      	nop
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
	...

0800ceb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	4613      	mov	r3, r2
 800cec2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cec4:	f7f9 f884 	bl	8005fd0 <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	4413      	add	r3, r2
 800ced2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ced4:	f7f9 f87c 	bl	8005fd0 <HAL_GetTick>
 800ced8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ceda:	4b39      	ldr	r3, [pc, #228]	; (800cfc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	015b      	lsls	r3, r3, #5
 800cee0:	0d1b      	lsrs	r3, r3, #20
 800cee2:	69fa      	ldr	r2, [r7, #28]
 800cee4:	fb02 f303 	mul.w	r3, r2, r3
 800cee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ceea:	e054      	b.n	800cf96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef2:	d050      	beq.n	800cf96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cef4:	f7f9 f86c 	bl	8005fd0 <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	69fa      	ldr	r2, [r7, #28]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d902      	bls.n	800cf0a <SPI_WaitFlagStateUntilTimeout+0x56>
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d13d      	bne.n	800cf86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf22:	d111      	bne.n	800cf48 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf2c:	d004      	beq.n	800cf38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf36:	d107      	bne.n	800cf48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf50:	d10f      	bne.n	800cf72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e017      	b.n	800cfb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	3b01      	subs	r3, #1
 800cf94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	bf0c      	ite	eq
 800cfa6:	2301      	moveq	r3, #1
 800cfa8:	2300      	movne	r3, #0
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	461a      	mov	r2, r3
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d19b      	bne.n	800ceec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3720      	adds	r7, #32
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	200001c4 	.word	0x200001c4

0800cfc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08a      	sub	sp, #40	; 0x28
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cfd6:	f7f8 fffb 	bl	8005fd0 <HAL_GetTick>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfde:	1a9b      	subs	r3, r3, r2
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cfe6:	f7f8 fff3 	bl	8005fd0 <HAL_GetTick>
 800cfea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	330c      	adds	r3, #12
 800cff2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cff4:	4b3d      	ldr	r3, [pc, #244]	; (800d0ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	00da      	lsls	r2, r3, #3
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	0d1b      	lsrs	r3, r3, #20
 800d004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d006:	fb02 f303 	mul.w	r3, r2, r3
 800d00a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d00c:	e060      	b.n	800d0d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d014:	d107      	bne.n	800d026 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d104      	bne.n	800d026 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	b2db      	uxtb	r3, r3
 800d022:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d024:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02c:	d050      	beq.n	800d0d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d02e:	f7f8 ffcf 	bl	8005fd0 <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d902      	bls.n	800d044 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	2b00      	cmp	r3, #0
 800d042:	d13d      	bne.n	800d0c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	685a      	ldr	r2, [r3, #4]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d052:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d05c:	d111      	bne.n	800d082 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d066:	d004      	beq.n	800d072 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d070:	d107      	bne.n	800d082 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d080:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d08a:	d10f      	bne.n	800d0ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d09a:	601a      	str	r2, [r3, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e010      	b.n	800d0e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	689a      	ldr	r2, [r3, #8]
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	4013      	ands	r3, r2
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d196      	bne.n	800d00e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3728      	adds	r7, #40	; 0x28
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	200001c4 	.word	0x200001c4

0800d0f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af02      	add	r7, sp, #8
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2200      	movs	r2, #0
 800d104:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f7ff ff5b 	bl	800cfc4 <SPI_WaitFifoStateUntilTimeout>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d007      	beq.n	800d124 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d118:	f043 0220 	orr.w	r2, r3, #32
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d120:	2303      	movs	r3, #3
 800d122:	e027      	b.n	800d174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	2180      	movs	r1, #128	; 0x80
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7ff fec0 	bl	800ceb4 <SPI_WaitFlagStateUntilTimeout>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d007      	beq.n	800d14a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d13e:	f043 0220 	orr.w	r2, r3, #32
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d146:	2303      	movs	r3, #3
 800d148:	e014      	b.n	800d174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2200      	movs	r2, #0
 800d152:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f7ff ff34 	bl	800cfc4 <SPI_WaitFifoStateUntilTimeout>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d166:	f043 0220 	orr.w	r2, r3, #32
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d16e:	2303      	movs	r3, #3
 800d170:	e000      	b.n	800d174 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e049      	b.n	800d222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7f7 ffc4 	bl	8005130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	f000 ff72 	bl	800e0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
	...

0800d22c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d001      	beq.n	800d244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e04a      	b.n	800d2da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f042 0201 	orr.w	r2, r2, #1
 800d25a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a21      	ldr	r2, [pc, #132]	; (800d2e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d018      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x6c>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d26e:	d013      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x6c>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a1d      	ldr	r2, [pc, #116]	; (800d2ec <HAL_TIM_Base_Start_IT+0xc0>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d00e      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x6c>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a1c      	ldr	r2, [pc, #112]	; (800d2f0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d009      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x6c>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a1a      	ldr	r2, [pc, #104]	; (800d2f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d004      	beq.n	800d298 <HAL_TIM_Base_Start_IT+0x6c>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a19      	ldr	r2, [pc, #100]	; (800d2f8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d115      	bne.n	800d2c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	4b17      	ldr	r3, [pc, #92]	; (800d2fc <HAL_TIM_Base_Start_IT+0xd0>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b06      	cmp	r3, #6
 800d2a8:	d015      	beq.n	800d2d6 <HAL_TIM_Base_Start_IT+0xaa>
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b0:	d011      	beq.n	800d2d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f042 0201 	orr.w	r2, r2, #1
 800d2c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c2:	e008      	b.n	800d2d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f042 0201 	orr.w	r2, r2, #1
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	e000      	b.n	800d2d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	40012c00 	.word	0x40012c00
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40000800 	.word	0x40000800
 800d2f4:	40013400 	.word	0x40013400
 800d2f8:	40014000 	.word	0x40014000
 800d2fc:	00010007 	.word	0x00010007

0800d300 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68da      	ldr	r2, [r3, #12]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f022 0201 	bic.w	r2, r2, #1
 800d316:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6a1a      	ldr	r2, [r3, #32]
 800d31e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d322:	4013      	ands	r3, r2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10f      	bne.n	800d348 <HAL_TIM_Base_Stop_IT+0x48>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6a1a      	ldr	r2, [r3, #32]
 800d32e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d332:	4013      	ands	r3, r2
 800d334:	2b00      	cmp	r3, #0
 800d336:	d107      	bne.n	800d348 <HAL_TIM_Base_Stop_IT+0x48>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f022 0201 	bic.w	r2, r2, #1
 800d346:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e049      	b.n	800d404 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7f7 fe23 	bl	8004fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2202      	movs	r2, #2
 800d38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	3304      	adds	r3, #4
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f000 fe81 	bl	800e0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d109      	bne.n	800d434 <HAL_TIM_PWM_Start_IT+0x28>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d426:	b2db      	uxtb	r3, r3
 800d428:	2b01      	cmp	r3, #1
 800d42a:	bf14      	ite	ne
 800d42c:	2301      	movne	r3, #1
 800d42e:	2300      	moveq	r3, #0
 800d430:	b2db      	uxtb	r3, r3
 800d432:	e03c      	b.n	800d4ae <HAL_TIM_PWM_Start_IT+0xa2>
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	2b04      	cmp	r3, #4
 800d438:	d109      	bne.n	800d44e <HAL_TIM_PWM_Start_IT+0x42>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b01      	cmp	r3, #1
 800d444:	bf14      	ite	ne
 800d446:	2301      	movne	r3, #1
 800d448:	2300      	moveq	r3, #0
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	e02f      	b.n	800d4ae <HAL_TIM_PWM_Start_IT+0xa2>
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2b08      	cmp	r3, #8
 800d452:	d109      	bne.n	800d468 <HAL_TIM_PWM_Start_IT+0x5c>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	bf14      	ite	ne
 800d460:	2301      	movne	r3, #1
 800d462:	2300      	moveq	r3, #0
 800d464:	b2db      	uxtb	r3, r3
 800d466:	e022      	b.n	800d4ae <HAL_TIM_PWM_Start_IT+0xa2>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b0c      	cmp	r3, #12
 800d46c:	d109      	bne.n	800d482 <HAL_TIM_PWM_Start_IT+0x76>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b01      	cmp	r3, #1
 800d478:	bf14      	ite	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	2300      	moveq	r3, #0
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	e015      	b.n	800d4ae <HAL_TIM_PWM_Start_IT+0xa2>
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	2b10      	cmp	r3, #16
 800d486:	d109      	bne.n	800d49c <HAL_TIM_PWM_Start_IT+0x90>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b01      	cmp	r3, #1
 800d492:	bf14      	ite	ne
 800d494:	2301      	movne	r3, #1
 800d496:	2300      	moveq	r3, #0
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	e008      	b.n	800d4ae <HAL_TIM_PWM_Start_IT+0xa2>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	bf14      	ite	ne
 800d4a8:	2301      	movne	r3, #1
 800d4aa:	2300      	moveq	r3, #0
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e0e2      	b.n	800d67c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d104      	bne.n	800d4c6 <HAL_TIM_PWM_Start_IT+0xba>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4c4:	e023      	b.n	800d50e <HAL_TIM_PWM_Start_IT+0x102>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d104      	bne.n	800d4d6 <HAL_TIM_PWM_Start_IT+0xca>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4d4:	e01b      	b.n	800d50e <HAL_TIM_PWM_Start_IT+0x102>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b08      	cmp	r3, #8
 800d4da:	d104      	bne.n	800d4e6 <HAL_TIM_PWM_Start_IT+0xda>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4e4:	e013      	b.n	800d50e <HAL_TIM_PWM_Start_IT+0x102>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b0c      	cmp	r3, #12
 800d4ea:	d104      	bne.n	800d4f6 <HAL_TIM_PWM_Start_IT+0xea>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4f4:	e00b      	b.n	800d50e <HAL_TIM_PWM_Start_IT+0x102>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b10      	cmp	r3, #16
 800d4fa:	d104      	bne.n	800d506 <HAL_TIM_PWM_Start_IT+0xfa>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d504:	e003      	b.n	800d50e <HAL_TIM_PWM_Start_IT+0x102>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2202      	movs	r2, #2
 800d50a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b0c      	cmp	r3, #12
 800d512:	d841      	bhi.n	800d598 <HAL_TIM_PWM_Start_IT+0x18c>
 800d514:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <HAL_TIM_PWM_Start_IT+0x110>)
 800d516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51a:	bf00      	nop
 800d51c:	0800d551 	.word	0x0800d551
 800d520:	0800d599 	.word	0x0800d599
 800d524:	0800d599 	.word	0x0800d599
 800d528:	0800d599 	.word	0x0800d599
 800d52c:	0800d563 	.word	0x0800d563
 800d530:	0800d599 	.word	0x0800d599
 800d534:	0800d599 	.word	0x0800d599
 800d538:	0800d599 	.word	0x0800d599
 800d53c:	0800d575 	.word	0x0800d575
 800d540:	0800d599 	.word	0x0800d599
 800d544:	0800d599 	.word	0x0800d599
 800d548:	0800d599 	.word	0x0800d599
 800d54c:	0800d587 	.word	0x0800d587
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68da      	ldr	r2, [r3, #12]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f042 0202 	orr.w	r2, r2, #2
 800d55e:	60da      	str	r2, [r3, #12]
      break;
 800d560:	e01d      	b.n	800d59e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68da      	ldr	r2, [r3, #12]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f042 0204 	orr.w	r2, r2, #4
 800d570:	60da      	str	r2, [r3, #12]
      break;
 800d572:	e014      	b.n	800d59e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68da      	ldr	r2, [r3, #12]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0208 	orr.w	r2, r2, #8
 800d582:	60da      	str	r2, [r3, #12]
      break;
 800d584:	e00b      	b.n	800d59e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68da      	ldr	r2, [r3, #12]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f042 0210 	orr.w	r2, r2, #16
 800d594:	60da      	str	r2, [r3, #12]
      break;
 800d596:	e002      	b.n	800d59e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	73fb      	strb	r3, [r7, #15]
      break;
 800d59c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d16a      	bne.n	800d67a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f001 f90b 	bl	800e7c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a33      	ldr	r2, [pc, #204]	; (800d684 <HAL_TIM_PWM_Start_IT+0x278>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d013      	beq.n	800d5e4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a31      	ldr	r2, [pc, #196]	; (800d688 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d00e      	beq.n	800d5e4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a30      	ldr	r2, [pc, #192]	; (800d68c <HAL_TIM_PWM_Start_IT+0x280>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d009      	beq.n	800d5e4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a2e      	ldr	r2, [pc, #184]	; (800d690 <HAL_TIM_PWM_Start_IT+0x284>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d004      	beq.n	800d5e4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a2d      	ldr	r2, [pc, #180]	; (800d694 <HAL_TIM_PWM_Start_IT+0x288>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d101      	bne.n	800d5e8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e000      	b.n	800d5ea <HAL_TIM_PWM_Start_IT+0x1de>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d007      	beq.n	800d5fe <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a20      	ldr	r2, [pc, #128]	; (800d684 <HAL_TIM_PWM_Start_IT+0x278>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d018      	beq.n	800d63a <HAL_TIM_PWM_Start_IT+0x22e>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d610:	d013      	beq.n	800d63a <HAL_TIM_PWM_Start_IT+0x22e>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a20      	ldr	r2, [pc, #128]	; (800d698 <HAL_TIM_PWM_Start_IT+0x28c>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d00e      	beq.n	800d63a <HAL_TIM_PWM_Start_IT+0x22e>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a1e      	ldr	r2, [pc, #120]	; (800d69c <HAL_TIM_PWM_Start_IT+0x290>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d009      	beq.n	800d63a <HAL_TIM_PWM_Start_IT+0x22e>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a17      	ldr	r2, [pc, #92]	; (800d688 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d004      	beq.n	800d63a <HAL_TIM_PWM_Start_IT+0x22e>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a15      	ldr	r2, [pc, #84]	; (800d68c <HAL_TIM_PWM_Start_IT+0x280>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d115      	bne.n	800d666 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	689a      	ldr	r2, [r3, #8]
 800d640:	4b17      	ldr	r3, [pc, #92]	; (800d6a0 <HAL_TIM_PWM_Start_IT+0x294>)
 800d642:	4013      	ands	r3, r2
 800d644:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2b06      	cmp	r3, #6
 800d64a:	d015      	beq.n	800d678 <HAL_TIM_PWM_Start_IT+0x26c>
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d652:	d011      	beq.n	800d678 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f042 0201 	orr.w	r2, r2, #1
 800d662:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d664:	e008      	b.n	800d678 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f042 0201 	orr.w	r2, r2, #1
 800d674:	601a      	str	r2, [r3, #0]
 800d676:	e000      	b.n	800d67a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d678:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	40012c00 	.word	0x40012c00
 800d688:	40013400 	.word	0x40013400
 800d68c:	40014000 	.word	0x40014000
 800d690:	40014400 	.word	0x40014400
 800d694:	40014800 	.word	0x40014800
 800d698:	40000400 	.word	0x40000400
 800d69c:	40000800 	.word	0x40000800
 800d6a0:	00010007 	.word	0x00010007

0800d6a4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b0c      	cmp	r3, #12
 800d6b6:	d841      	bhi.n	800d73c <HAL_TIM_PWM_Stop_IT+0x98>
 800d6b8:	a201      	add	r2, pc, #4	; (adr r2, 800d6c0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800d6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6be:	bf00      	nop
 800d6c0:	0800d6f5 	.word	0x0800d6f5
 800d6c4:	0800d73d 	.word	0x0800d73d
 800d6c8:	0800d73d 	.word	0x0800d73d
 800d6cc:	0800d73d 	.word	0x0800d73d
 800d6d0:	0800d707 	.word	0x0800d707
 800d6d4:	0800d73d 	.word	0x0800d73d
 800d6d8:	0800d73d 	.word	0x0800d73d
 800d6dc:	0800d73d 	.word	0x0800d73d
 800d6e0:	0800d719 	.word	0x0800d719
 800d6e4:	0800d73d 	.word	0x0800d73d
 800d6e8:	0800d73d 	.word	0x0800d73d
 800d6ec:	0800d73d 	.word	0x0800d73d
 800d6f0:	0800d72b 	.word	0x0800d72b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68da      	ldr	r2, [r3, #12]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f022 0202 	bic.w	r2, r2, #2
 800d702:	60da      	str	r2, [r3, #12]
      break;
 800d704:	e01d      	b.n	800d742 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68da      	ldr	r2, [r3, #12]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f022 0204 	bic.w	r2, r2, #4
 800d714:	60da      	str	r2, [r3, #12]
      break;
 800d716:	e014      	b.n	800d742 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f022 0208 	bic.w	r2, r2, #8
 800d726:	60da      	str	r2, [r3, #12]
      break;
 800d728:	e00b      	b.n	800d742 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f022 0210 	bic.w	r2, r2, #16
 800d738:	60da      	str	r2, [r3, #12]
      break;
 800d73a:	e002      	b.n	800d742 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	73fb      	strb	r3, [r7, #15]
      break;
 800d740:	bf00      	nop
  }

  if (status == HAL_OK)
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f040 8081 	bne.w	800d84c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2200      	movs	r2, #0
 800d750:	6839      	ldr	r1, [r7, #0]
 800d752:	4618      	mov	r0, r3
 800d754:	f001 f838 	bl	800e7c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a3e      	ldr	r2, [pc, #248]	; (800d858 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d013      	beq.n	800d78a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a3d      	ldr	r2, [pc, #244]	; (800d85c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d00e      	beq.n	800d78a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a3b      	ldr	r2, [pc, #236]	; (800d860 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d009      	beq.n	800d78a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a3a      	ldr	r2, [pc, #232]	; (800d864 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d004      	beq.n	800d78a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a38      	ldr	r2, [pc, #224]	; (800d868 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d101      	bne.n	800d78e <HAL_TIM_PWM_Stop_IT+0xea>
 800d78a:	2301      	movs	r3, #1
 800d78c:	e000      	b.n	800d790 <HAL_TIM_PWM_Stop_IT+0xec>
 800d78e:	2300      	movs	r3, #0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d017      	beq.n	800d7c4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6a1a      	ldr	r2, [r3, #32]
 800d79a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d79e:	4013      	ands	r3, r2
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10f      	bne.n	800d7c4 <HAL_TIM_PWM_Stop_IT+0x120>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6a1a      	ldr	r2, [r3, #32]
 800d7aa:	f244 4344 	movw	r3, #17476	; 0x4444
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d107      	bne.n	800d7c4 <HAL_TIM_PWM_Stop_IT+0x120>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6a1a      	ldr	r2, [r3, #32]
 800d7ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10f      	bne.n	800d7f4 <HAL_TIM_PWM_Stop_IT+0x150>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6a1a      	ldr	r2, [r3, #32]
 800d7da:	f244 4344 	movw	r3, #17476	; 0x4444
 800d7de:	4013      	ands	r3, r2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d107      	bne.n	800d7f4 <HAL_TIM_PWM_Stop_IT+0x150>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f022 0201 	bic.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d104      	bne.n	800d804 <HAL_TIM_PWM_Stop_IT+0x160>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d802:	e023      	b.n	800d84c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b04      	cmp	r3, #4
 800d808:	d104      	bne.n	800d814 <HAL_TIM_PWM_Stop_IT+0x170>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d812:	e01b      	b.n	800d84c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b08      	cmp	r3, #8
 800d818:	d104      	bne.n	800d824 <HAL_TIM_PWM_Stop_IT+0x180>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d822:	e013      	b.n	800d84c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b0c      	cmp	r3, #12
 800d828:	d104      	bne.n	800d834 <HAL_TIM_PWM_Stop_IT+0x190>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d832:	e00b      	b.n	800d84c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b10      	cmp	r3, #16
 800d838:	d104      	bne.n	800d844 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d842:	e003      	b.n	800d84c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	40012c00 	.word	0x40012c00
 800d85c:	40013400 	.word	0x40013400
 800d860:	40014000 	.word	0x40014000
 800d864:	40014400 	.word	0x40014400
 800d868:	40014800 	.word	0x40014800

0800d86c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d101      	bne.n	800d880 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d87c:	2301      	movs	r3, #1
 800d87e:	e041      	b.n	800d904 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7f7 fcc5 	bl	8005224 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2202      	movs	r2, #2
 800d89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	f000 fbf9 	bl	800e0a4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f022 0208 	bic.w	r2, r2, #8
 800d8c0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6819      	ldr	r1, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	430a      	orrs	r2, r1
 800d8d0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e097      	b.n	800da50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7f7 fb9d 	bl	8005074 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2202      	movs	r2, #2
 800d93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	6812      	ldr	r2, [r2, #0]
 800d94c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d950:	f023 0307 	bic.w	r3, r3, #7
 800d954:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3304      	adds	r3, #4
 800d95e:	4619      	mov	r1, r3
 800d960:	4610      	mov	r0, r2
 800d962:	f000 fb9f 	bl	800e0a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	6a1b      	ldr	r3, [r3, #32]
 800d97c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	4313      	orrs	r3, r2
 800d986:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d98e:	f023 0303 	bic.w	r3, r3, #3
 800d992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	689a      	ldr	r2, [r3, #8]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	021b      	lsls	r3, r3, #8
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	693a      	ldr	r2, [r7, #16]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d9ac:	f023 030c 	bic.w	r3, r3, #12
 800d9b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68da      	ldr	r2, [r3, #12]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	021b      	lsls	r3, r3, #8
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	693a      	ldr	r2, [r7, #16]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	011a      	lsls	r2, r3, #4
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	031b      	lsls	r3, r3, #12
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d9ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d9f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685a      	ldr	r2, [r3, #4]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	695b      	ldr	r3, [r3, #20]
 800d9fc:	011b      	lsls	r3, r3, #4
 800d9fe:	4313      	orrs	r3, r2
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	4313      	orrs	r3, r2
 800da04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800da70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d110      	bne.n	800daaa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da88:	7bfb      	ldrb	r3, [r7, #15]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d102      	bne.n	800da94 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800da8e:	7b7b      	ldrb	r3, [r7, #13]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d001      	beq.n	800da98 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e089      	b.n	800dbac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2202      	movs	r2, #2
 800da9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2202      	movs	r2, #2
 800daa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800daa8:	e031      	b.n	800db0e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b04      	cmp	r3, #4
 800daae:	d110      	bne.n	800dad2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dab0:	7bbb      	ldrb	r3, [r7, #14]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d102      	bne.n	800dabc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dab6:	7b3b      	ldrb	r3, [r7, #12]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d001      	beq.n	800dac0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e075      	b.n	800dbac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2202      	movs	r2, #2
 800dacc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dad0:	e01d      	b.n	800db0e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d108      	bne.n	800daea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d105      	bne.n	800daea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dade:	7b7b      	ldrb	r3, [r7, #13]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d102      	bne.n	800daea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dae4:	7b3b      	ldrb	r3, [r7, #12]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d001      	beq.n	800daee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e05e      	b.n	800dbac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2202      	movs	r2, #2
 800daf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2202      	movs	r2, #2
 800dafa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2202      	movs	r2, #2
 800db02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2202      	movs	r2, #2
 800db0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HAL_TIM_Encoder_Start_IT+0xc4>
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2b04      	cmp	r3, #4
 800db18:	d010      	beq.n	800db3c <HAL_TIM_Encoder_Start_IT+0xe4>
 800db1a:	e01f      	b.n	800db5c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2201      	movs	r2, #1
 800db22:	2100      	movs	r1, #0
 800db24:	4618      	mov	r0, r3
 800db26:	f000 fe4f 	bl	800e7c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68da      	ldr	r2, [r3, #12]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f042 0202 	orr.w	r2, r2, #2
 800db38:	60da      	str	r2, [r3, #12]
      break;
 800db3a:	e02e      	b.n	800db9a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2201      	movs	r2, #1
 800db42:	2104      	movs	r1, #4
 800db44:	4618      	mov	r0, r3
 800db46:	f000 fe3f 	bl	800e7c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f042 0204 	orr.w	r2, r2, #4
 800db58:	60da      	str	r2, [r3, #12]
      break;
 800db5a:	e01e      	b.n	800db9a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2201      	movs	r2, #1
 800db62:	2100      	movs	r1, #0
 800db64:	4618      	mov	r0, r3
 800db66:	f000 fe2f 	bl	800e7c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2201      	movs	r2, #1
 800db70:	2104      	movs	r1, #4
 800db72:	4618      	mov	r0, r3
 800db74:	f000 fe28 	bl	800e7c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f042 0202 	orr.w	r2, r2, #2
 800db86:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68da      	ldr	r2, [r3, #12]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f042 0204 	orr.w	r2, r2, #4
 800db96:	60da      	str	r2, [r3, #12]
      break;
 800db98:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f042 0201 	orr.w	r2, r2, #1
 800dba8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	f003 0302 	and.w	r3, r3, #2
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d020      	beq.n	800dc18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f003 0302 	and.w	r3, r3, #2
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d01b      	beq.n	800dc18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f06f 0202 	mvn.w	r2, #2
 800dbe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	f003 0303 	and.w	r3, r3, #3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7f5 fa04 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 800dc04:	e005      	b.n	800dc12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fa38 	bl	800e07c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7f5 fa0f 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2200      	movs	r2, #0
 800dc16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d020      	beq.n	800dc64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d01b      	beq.n	800dc64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f06f 0204 	mvn.w	r2, #4
 800dc34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2202      	movs	r2, #2
 800dc3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7f5 f9de 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 800dc50:	e005      	b.n	800dc5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fa12 	bl	800e07c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7f5 f9e9 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	f003 0308 	and.w	r3, r3, #8
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d020      	beq.n	800dcb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f003 0308 	and.w	r3, r3, #8
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01b      	beq.n	800dcb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f06f 0208 	mvn.w	r2, #8
 800dc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2204      	movs	r2, #4
 800dc86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	f003 0303 	and.w	r3, r3, #3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7f5 f9b8 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 800dc9c:	e005      	b.n	800dcaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 f9ec 	bl	800e07c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f5 f9c3 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f003 0310 	and.w	r3, r3, #16
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d020      	beq.n	800dcfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f003 0310 	and.w	r3, r3, #16
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d01b      	beq.n	800dcfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f06f 0210 	mvn.w	r2, #16
 800dccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2208      	movs	r2, #8
 800dcd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7f5 f992 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 800dce8:	e005      	b.n	800dcf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f9c6 	bl	800e07c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7f5 f99d 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f003 0301 	and.w	r3, r3, #1
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00c      	beq.n	800dd20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d007      	beq.n	800dd20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f06f 0201 	mvn.w	r2, #1
 800dd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7f5 f9ae 	bl	800307c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d104      	bne.n	800dd34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00c      	beq.n	800dd4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d007      	beq.n	800dd4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800dd46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 ff83 	bl	800ec54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00c      	beq.n	800dd72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 ff7b 	bl	800ec68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00c      	beq.n	800dd96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d007      	beq.n	800dd96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f97d 	bl	800e090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	f003 0320 	and.w	r3, r3, #32
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00c      	beq.n	800ddba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f003 0320 	and.w	r3, r3, #32
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d007      	beq.n	800ddba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f06f 0220 	mvn.w	r2, #32
 800ddb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 ff43 	bl	800ec40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00c      	beq.n	800ddde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d007      	beq.n	800ddde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ddd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 ff4f 	bl	800ec7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00c      	beq.n	800de02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d007      	beq.n	800de02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ddfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 ff47 	bl	800ec90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00c      	beq.n	800de26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de12:	2b00      	cmp	r3, #0
 800de14:	d007      	beq.n	800de26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800de1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 ff3f 	bl	800eca4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00c      	beq.n	800de4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d007      	beq.n	800de4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800de42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 ff37 	bl	800ecb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de4a:	bf00      	nop
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
	...

0800de54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de60:	2300      	movs	r3, #0
 800de62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d101      	bne.n	800de72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de6e:	2302      	movs	r3, #2
 800de70:	e0ff      	b.n	800e072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2201      	movs	r2, #1
 800de76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b14      	cmp	r3, #20
 800de7e:	f200 80f0 	bhi.w	800e062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de82:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de88:	0800dedd 	.word	0x0800dedd
 800de8c:	0800e063 	.word	0x0800e063
 800de90:	0800e063 	.word	0x0800e063
 800de94:	0800e063 	.word	0x0800e063
 800de98:	0800df1d 	.word	0x0800df1d
 800de9c:	0800e063 	.word	0x0800e063
 800dea0:	0800e063 	.word	0x0800e063
 800dea4:	0800e063 	.word	0x0800e063
 800dea8:	0800df5f 	.word	0x0800df5f
 800deac:	0800e063 	.word	0x0800e063
 800deb0:	0800e063 	.word	0x0800e063
 800deb4:	0800e063 	.word	0x0800e063
 800deb8:	0800df9f 	.word	0x0800df9f
 800debc:	0800e063 	.word	0x0800e063
 800dec0:	0800e063 	.word	0x0800e063
 800dec4:	0800e063 	.word	0x0800e063
 800dec8:	0800dfe1 	.word	0x0800dfe1
 800decc:	0800e063 	.word	0x0800e063
 800ded0:	0800e063 	.word	0x0800e063
 800ded4:	0800e063 	.word	0x0800e063
 800ded8:	0800e021 	.word	0x0800e021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68b9      	ldr	r1, [r7, #8]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 f97a 	bl	800e1dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	699a      	ldr	r2, [r3, #24]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f042 0208 	orr.w	r2, r2, #8
 800def6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	699a      	ldr	r2, [r3, #24]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f022 0204 	bic.w	r2, r2, #4
 800df06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6999      	ldr	r1, [r3, #24]
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	691a      	ldr	r2, [r3, #16]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	430a      	orrs	r2, r1
 800df18:	619a      	str	r2, [r3, #24]
      break;
 800df1a:	e0a5      	b.n	800e068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68b9      	ldr	r1, [r7, #8]
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f9ea 	bl	800e2fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	699a      	ldr	r2, [r3, #24]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	699a      	ldr	r2, [r3, #24]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6999      	ldr	r1, [r3, #24]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	021a      	lsls	r2, r3, #8
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	430a      	orrs	r2, r1
 800df5a:	619a      	str	r2, [r3, #24]
      break;
 800df5c:	e084      	b.n	800e068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68b9      	ldr	r1, [r7, #8]
 800df64:	4618      	mov	r0, r3
 800df66:	f000 fa53 	bl	800e410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	69da      	ldr	r2, [r3, #28]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f042 0208 	orr.w	r2, r2, #8
 800df78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	69da      	ldr	r2, [r3, #28]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f022 0204 	bic.w	r2, r2, #4
 800df88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	69d9      	ldr	r1, [r3, #28]
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	691a      	ldr	r2, [r3, #16]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	430a      	orrs	r2, r1
 800df9a:	61da      	str	r2, [r3, #28]
      break;
 800df9c:	e064      	b.n	800e068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68b9      	ldr	r1, [r7, #8]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f000 fabb 	bl	800e520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	69da      	ldr	r2, [r3, #28]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	69da      	ldr	r2, [r3, #28]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	69d9      	ldr	r1, [r3, #28]
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	021a      	lsls	r2, r3, #8
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	430a      	orrs	r2, r1
 800dfdc:	61da      	str	r2, [r3, #28]
      break;
 800dfde:	e043      	b.n	800e068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68b9      	ldr	r1, [r7, #8]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f000 fb24 	bl	800e634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f042 0208 	orr.w	r2, r2, #8
 800dffa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f022 0204 	bic.w	r2, r2, #4
 800e00a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	691a      	ldr	r2, [r3, #16]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	430a      	orrs	r2, r1
 800e01c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e01e:	e023      	b.n	800e068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	4618      	mov	r0, r3
 800e028:	f000 fb68 	bl	800e6fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e03a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e04a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	021a      	lsls	r2, r3, #8
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	430a      	orrs	r2, r1
 800e05e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e060:	e002      	b.n	800e068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	75fb      	strb	r3, [r7, #23]
      break;
 800e066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e070:	7dfb      	ldrb	r3, [r7, #23]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop

0800e07c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4a42      	ldr	r2, [pc, #264]	; (800e1c0 <TIM_Base_SetConfig+0x11c>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d00f      	beq.n	800e0dc <TIM_Base_SetConfig+0x38>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0c2:	d00b      	beq.n	800e0dc <TIM_Base_SetConfig+0x38>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4a3f      	ldr	r2, [pc, #252]	; (800e1c4 <TIM_Base_SetConfig+0x120>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d007      	beq.n	800e0dc <TIM_Base_SetConfig+0x38>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a3e      	ldr	r2, [pc, #248]	; (800e1c8 <TIM_Base_SetConfig+0x124>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d003      	beq.n	800e0dc <TIM_Base_SetConfig+0x38>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a3d      	ldr	r2, [pc, #244]	; (800e1cc <TIM_Base_SetConfig+0x128>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d108      	bne.n	800e0ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a33      	ldr	r2, [pc, #204]	; (800e1c0 <TIM_Base_SetConfig+0x11c>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d01b      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0fc:	d017      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4a30      	ldr	r2, [pc, #192]	; (800e1c4 <TIM_Base_SetConfig+0x120>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d013      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4a2f      	ldr	r2, [pc, #188]	; (800e1c8 <TIM_Base_SetConfig+0x124>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d00f      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a2e      	ldr	r2, [pc, #184]	; (800e1cc <TIM_Base_SetConfig+0x128>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d00b      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4a2d      	ldr	r2, [pc, #180]	; (800e1d0 <TIM_Base_SetConfig+0x12c>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d007      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a2c      	ldr	r2, [pc, #176]	; (800e1d4 <TIM_Base_SetConfig+0x130>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d003      	beq.n	800e12e <TIM_Base_SetConfig+0x8a>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a2b      	ldr	r2, [pc, #172]	; (800e1d8 <TIM_Base_SetConfig+0x134>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d108      	bne.n	800e140 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	689a      	ldr	r2, [r3, #8]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a16      	ldr	r2, [pc, #88]	; (800e1c0 <TIM_Base_SetConfig+0x11c>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d00f      	beq.n	800e18c <TIM_Base_SetConfig+0xe8>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a17      	ldr	r2, [pc, #92]	; (800e1cc <TIM_Base_SetConfig+0x128>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d00b      	beq.n	800e18c <TIM_Base_SetConfig+0xe8>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a16      	ldr	r2, [pc, #88]	; (800e1d0 <TIM_Base_SetConfig+0x12c>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d007      	beq.n	800e18c <TIM_Base_SetConfig+0xe8>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a15      	ldr	r2, [pc, #84]	; (800e1d4 <TIM_Base_SetConfig+0x130>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d003      	beq.n	800e18c <TIM_Base_SetConfig+0xe8>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a14      	ldr	r2, [pc, #80]	; (800e1d8 <TIM_Base_SetConfig+0x134>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d103      	bne.n	800e194 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	691a      	ldr	r2, [r3, #16]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d105      	bne.n	800e1b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	f023 0201 	bic.w	r2, r3, #1
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	611a      	str	r2, [r3, #16]
  }
}
 800e1b2:	bf00      	nop
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	40012c00 	.word	0x40012c00
 800e1c4:	40000400 	.word	0x40000400
 800e1c8:	40000800 	.word	0x40000800
 800e1cc:	40013400 	.word	0x40013400
 800e1d0:	40014000 	.word	0x40014000
 800e1d4:	40014400 	.word	0x40014400
 800e1d8:	40014800 	.word	0x40014800

0800e1dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b087      	sub	sp, #28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a1b      	ldr	r3, [r3, #32]
 800e1ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6a1b      	ldr	r3, [r3, #32]
 800e1f0:	f023 0201 	bic.w	r2, r3, #1
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	699b      	ldr	r3, [r3, #24]
 800e202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f023 0303 	bic.w	r3, r3, #3
 800e216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	4313      	orrs	r3, r2
 800e220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f023 0302 	bic.w	r3, r3, #2
 800e228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	697a      	ldr	r2, [r7, #20]
 800e230:	4313      	orrs	r3, r2
 800e232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4a2c      	ldr	r2, [pc, #176]	; (800e2e8 <TIM_OC1_SetConfig+0x10c>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d00f      	beq.n	800e25c <TIM_OC1_SetConfig+0x80>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a2b      	ldr	r2, [pc, #172]	; (800e2ec <TIM_OC1_SetConfig+0x110>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d00b      	beq.n	800e25c <TIM_OC1_SetConfig+0x80>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a2a      	ldr	r2, [pc, #168]	; (800e2f0 <TIM_OC1_SetConfig+0x114>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d007      	beq.n	800e25c <TIM_OC1_SetConfig+0x80>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a29      	ldr	r2, [pc, #164]	; (800e2f4 <TIM_OC1_SetConfig+0x118>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d003      	beq.n	800e25c <TIM_OC1_SetConfig+0x80>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a28      	ldr	r2, [pc, #160]	; (800e2f8 <TIM_OC1_SetConfig+0x11c>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d10c      	bne.n	800e276 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	f023 0308 	bic.w	r3, r3, #8
 800e262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	697a      	ldr	r2, [r7, #20]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	f023 0304 	bic.w	r3, r3, #4
 800e274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4a1b      	ldr	r2, [pc, #108]	; (800e2e8 <TIM_OC1_SetConfig+0x10c>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d00f      	beq.n	800e29e <TIM_OC1_SetConfig+0xc2>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4a1a      	ldr	r2, [pc, #104]	; (800e2ec <TIM_OC1_SetConfig+0x110>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d00b      	beq.n	800e29e <TIM_OC1_SetConfig+0xc2>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4a19      	ldr	r2, [pc, #100]	; (800e2f0 <TIM_OC1_SetConfig+0x114>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d007      	beq.n	800e29e <TIM_OC1_SetConfig+0xc2>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4a18      	ldr	r2, [pc, #96]	; (800e2f4 <TIM_OC1_SetConfig+0x118>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d003      	beq.n	800e29e <TIM_OC1_SetConfig+0xc2>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4a17      	ldr	r2, [pc, #92]	; (800e2f8 <TIM_OC1_SetConfig+0x11c>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d111      	bne.n	800e2c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	621a      	str	r2, [r3, #32]
}
 800e2dc:	bf00      	nop
 800e2de:	371c      	adds	r7, #28
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr
 800e2e8:	40012c00 	.word	0x40012c00
 800e2ec:	40013400 	.word	0x40013400
 800e2f0:	40014000 	.word	0x40014000
 800e2f4:	40014400 	.word	0x40014400
 800e2f8:	40014800 	.word	0x40014800

0800e2fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b087      	sub	sp, #28
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a1b      	ldr	r3, [r3, #32]
 800e30a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a1b      	ldr	r3, [r3, #32]
 800e310:	f023 0210 	bic.w	r2, r3, #16
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	021b      	lsls	r3, r3, #8
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	4313      	orrs	r3, r2
 800e342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f023 0320 	bic.w	r3, r3, #32
 800e34a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	011b      	lsls	r3, r3, #4
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	4313      	orrs	r3, r2
 800e356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a28      	ldr	r2, [pc, #160]	; (800e3fc <TIM_OC2_SetConfig+0x100>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d003      	beq.n	800e368 <TIM_OC2_SetConfig+0x6c>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a27      	ldr	r2, [pc, #156]	; (800e400 <TIM_OC2_SetConfig+0x104>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d10d      	bne.n	800e384 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e36e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	011b      	lsls	r3, r3, #4
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4313      	orrs	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e382:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a1d      	ldr	r2, [pc, #116]	; (800e3fc <TIM_OC2_SetConfig+0x100>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d00f      	beq.n	800e3ac <TIM_OC2_SetConfig+0xb0>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	4a1c      	ldr	r2, [pc, #112]	; (800e400 <TIM_OC2_SetConfig+0x104>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d00b      	beq.n	800e3ac <TIM_OC2_SetConfig+0xb0>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a1b      	ldr	r2, [pc, #108]	; (800e404 <TIM_OC2_SetConfig+0x108>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d007      	beq.n	800e3ac <TIM_OC2_SetConfig+0xb0>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4a1a      	ldr	r2, [pc, #104]	; (800e408 <TIM_OC2_SetConfig+0x10c>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d003      	beq.n	800e3ac <TIM_OC2_SetConfig+0xb0>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4a19      	ldr	r2, [pc, #100]	; (800e40c <TIM_OC2_SetConfig+0x110>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d113      	bne.n	800e3d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	695b      	ldr	r3, [r3, #20]
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	693a      	ldr	r2, [r7, #16]
 800e3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	685a      	ldr	r2, [r3, #4]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	621a      	str	r2, [r3, #32]
}
 800e3ee:	bf00      	nop
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	40012c00 	.word	0x40012c00
 800e400:	40013400 	.word	0x40013400
 800e404:	40014000 	.word	0x40014000
 800e408:	40014400 	.word	0x40014400
 800e40c:	40014800 	.word	0x40014800

0800e410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f023 0303 	bic.w	r3, r3, #3
 800e44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4313      	orrs	r3, r2
 800e454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	021b      	lsls	r3, r3, #8
 800e464:	697a      	ldr	r2, [r7, #20]
 800e466:	4313      	orrs	r3, r2
 800e468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4a27      	ldr	r2, [pc, #156]	; (800e50c <TIM_OC3_SetConfig+0xfc>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d003      	beq.n	800e47a <TIM_OC3_SetConfig+0x6a>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4a26      	ldr	r2, [pc, #152]	; (800e510 <TIM_OC3_SetConfig+0x100>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d10d      	bne.n	800e496 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	021b      	lsls	r3, r3, #8
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4a1c      	ldr	r2, [pc, #112]	; (800e50c <TIM_OC3_SetConfig+0xfc>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d00f      	beq.n	800e4be <TIM_OC3_SetConfig+0xae>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4a1b      	ldr	r2, [pc, #108]	; (800e510 <TIM_OC3_SetConfig+0x100>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d00b      	beq.n	800e4be <TIM_OC3_SetConfig+0xae>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	4a1a      	ldr	r2, [pc, #104]	; (800e514 <TIM_OC3_SetConfig+0x104>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d007      	beq.n	800e4be <TIM_OC3_SetConfig+0xae>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4a19      	ldr	r2, [pc, #100]	; (800e518 <TIM_OC3_SetConfig+0x108>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d003      	beq.n	800e4be <TIM_OC3_SetConfig+0xae>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4a18      	ldr	r2, [pc, #96]	; (800e51c <TIM_OC3_SetConfig+0x10c>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d113      	bne.n	800e4e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	695b      	ldr	r3, [r3, #20]
 800e4d2:	011b      	lsls	r3, r3, #4
 800e4d4:	693a      	ldr	r2, [r7, #16]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	011b      	lsls	r3, r3, #4
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	693a      	ldr	r2, [r7, #16]
 800e4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	685a      	ldr	r2, [r3, #4]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	621a      	str	r2, [r3, #32]
}
 800e500:	bf00      	nop
 800e502:	371c      	adds	r7, #28
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	40012c00 	.word	0x40012c00
 800e510:	40013400 	.word	0x40013400
 800e514:	40014000 	.word	0x40014000
 800e518:	40014400 	.word	0x40014400
 800e51c:	40014800 	.word	0x40014800

0800e520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e520:	b480      	push	{r7}
 800e522:	b087      	sub	sp, #28
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a1b      	ldr	r3, [r3, #32]
 800e52e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a1b      	ldr	r3, [r3, #32]
 800e534:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e54e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e55a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	021b      	lsls	r3, r3, #8
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	4313      	orrs	r3, r2
 800e566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e56e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	031b      	lsls	r3, r3, #12
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	4313      	orrs	r3, r2
 800e57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	4a28      	ldr	r2, [pc, #160]	; (800e620 <TIM_OC4_SetConfig+0x100>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d003      	beq.n	800e58c <TIM_OC4_SetConfig+0x6c>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a27      	ldr	r2, [pc, #156]	; (800e624 <TIM_OC4_SetConfig+0x104>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d10d      	bne.n	800e5a8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	031b      	lsls	r3, r3, #12
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e5a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4a1d      	ldr	r2, [pc, #116]	; (800e620 <TIM_OC4_SetConfig+0x100>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d00f      	beq.n	800e5d0 <TIM_OC4_SetConfig+0xb0>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	4a1c      	ldr	r2, [pc, #112]	; (800e624 <TIM_OC4_SetConfig+0x104>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d00b      	beq.n	800e5d0 <TIM_OC4_SetConfig+0xb0>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4a1b      	ldr	r2, [pc, #108]	; (800e628 <TIM_OC4_SetConfig+0x108>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d007      	beq.n	800e5d0 <TIM_OC4_SetConfig+0xb0>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a1a      	ldr	r2, [pc, #104]	; (800e62c <TIM_OC4_SetConfig+0x10c>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d003      	beq.n	800e5d0 <TIM_OC4_SetConfig+0xb0>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a19      	ldr	r2, [pc, #100]	; (800e630 <TIM_OC4_SetConfig+0x110>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d113      	bne.n	800e5f8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e5d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e5de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	695b      	ldr	r3, [r3, #20]
 800e5e4:	019b      	lsls	r3, r3, #6
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	019b      	lsls	r3, r3, #6
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	685a      	ldr	r2, [r3, #4]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	621a      	str	r2, [r3, #32]
}
 800e612:	bf00      	nop
 800e614:	371c      	adds	r7, #28
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	40012c00 	.word	0x40012c00
 800e624:	40013400 	.word	0x40013400
 800e628:	40014000 	.word	0x40014000
 800e62c:	40014400 	.word	0x40014400
 800e630:	40014800 	.word	0x40014800

0800e634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e634:	b480      	push	{r7}
 800e636:	b087      	sub	sp, #28
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	4313      	orrs	r3, r2
 800e670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	041b      	lsls	r3, r3, #16
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	4313      	orrs	r3, r2
 800e684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a17      	ldr	r2, [pc, #92]	; (800e6e8 <TIM_OC5_SetConfig+0xb4>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d00f      	beq.n	800e6ae <TIM_OC5_SetConfig+0x7a>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a16      	ldr	r2, [pc, #88]	; (800e6ec <TIM_OC5_SetConfig+0xb8>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d00b      	beq.n	800e6ae <TIM_OC5_SetConfig+0x7a>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a15      	ldr	r2, [pc, #84]	; (800e6f0 <TIM_OC5_SetConfig+0xbc>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d007      	beq.n	800e6ae <TIM_OC5_SetConfig+0x7a>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a14      	ldr	r2, [pc, #80]	; (800e6f4 <TIM_OC5_SetConfig+0xc0>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d003      	beq.n	800e6ae <TIM_OC5_SetConfig+0x7a>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a13      	ldr	r2, [pc, #76]	; (800e6f8 <TIM_OC5_SetConfig+0xc4>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d109      	bne.n	800e6c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	021b      	lsls	r3, r3, #8
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	697a      	ldr	r2, [r7, #20]
 800e6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	685a      	ldr	r2, [r3, #4]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	621a      	str	r2, [r3, #32]
}
 800e6dc:	bf00      	nop
 800e6de:	371c      	adds	r7, #28
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	40012c00 	.word	0x40012c00
 800e6ec:	40013400 	.word	0x40013400
 800e6f0:	40014000 	.word	0x40014000
 800e6f4:	40014400 	.word	0x40014400
 800e6f8:	40014800 	.word	0x40014800

0800e6fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a1b      	ldr	r3, [r3, #32]
 800e70a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e72a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	021b      	lsls	r3, r3, #8
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	4313      	orrs	r3, r2
 800e73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	051b      	lsls	r3, r3, #20
 800e74a:	693a      	ldr	r2, [r7, #16]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a18      	ldr	r2, [pc, #96]	; (800e7b4 <TIM_OC6_SetConfig+0xb8>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d00f      	beq.n	800e778 <TIM_OC6_SetConfig+0x7c>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a17      	ldr	r2, [pc, #92]	; (800e7b8 <TIM_OC6_SetConfig+0xbc>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d00b      	beq.n	800e778 <TIM_OC6_SetConfig+0x7c>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4a16      	ldr	r2, [pc, #88]	; (800e7bc <TIM_OC6_SetConfig+0xc0>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d007      	beq.n	800e778 <TIM_OC6_SetConfig+0x7c>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a15      	ldr	r2, [pc, #84]	; (800e7c0 <TIM_OC6_SetConfig+0xc4>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d003      	beq.n	800e778 <TIM_OC6_SetConfig+0x7c>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a14      	ldr	r2, [pc, #80]	; (800e7c4 <TIM_OC6_SetConfig+0xc8>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d109      	bne.n	800e78c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e77e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	029b      	lsls	r3, r3, #10
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	4313      	orrs	r3, r2
 800e78a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	621a      	str	r2, [r3, #32]
}
 800e7a6:	bf00      	nop
 800e7a8:	371c      	adds	r7, #28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	40012c00 	.word	0x40012c00
 800e7b8:	40013400 	.word	0x40013400
 800e7bc:	40014000 	.word	0x40014000
 800e7c0:	40014400 	.word	0x40014400
 800e7c4:	40014800 	.word	0x40014800

0800e7c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	f003 031f 	and.w	r3, r3, #31
 800e7da:	2201      	movs	r2, #1
 800e7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6a1a      	ldr	r2, [r3, #32]
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	43db      	mvns	r3, r3
 800e7ea:	401a      	ands	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6a1a      	ldr	r2, [r3, #32]
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f003 031f 	and.w	r3, r3, #31
 800e7fa:	6879      	ldr	r1, [r7, #4]
 800e7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800e800:	431a      	orrs	r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	621a      	str	r2, [r3, #32]
}
 800e806:	bf00      	nop
 800e808:	371c      	adds	r7, #28
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
	...

0800e814 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d109      	bne.n	800e83c <HAL_TIMEx_PWMN_Start_IT+0x28>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	2b01      	cmp	r3, #1
 800e832:	bf14      	ite	ne
 800e834:	2301      	movne	r3, #1
 800e836:	2300      	moveq	r3, #0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	e022      	b.n	800e882 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b04      	cmp	r3, #4
 800e840:	d109      	bne.n	800e856 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	bf14      	ite	ne
 800e84e:	2301      	movne	r3, #1
 800e850:	2300      	moveq	r3, #0
 800e852:	b2db      	uxtb	r3, r3
 800e854:	e015      	b.n	800e882 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	2b08      	cmp	r3, #8
 800e85a:	d109      	bne.n	800e870 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b01      	cmp	r3, #1
 800e866:	bf14      	ite	ne
 800e868:	2301      	movne	r3, #1
 800e86a:	2300      	moveq	r3, #0
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	e008      	b.n	800e882 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e876:	b2db      	uxtb	r3, r3
 800e878:	2b01      	cmp	r3, #1
 800e87a:	bf14      	ite	ne
 800e87c:	2301      	movne	r3, #1
 800e87e:	2300      	moveq	r3, #0
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e0bc      	b.n	800ea04 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d104      	bne.n	800e89a <HAL_TIMEx_PWMN_Start_IT+0x86>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2202      	movs	r2, #2
 800e894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e898:	e013      	b.n	800e8c2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b04      	cmp	r3, #4
 800e89e:	d104      	bne.n	800e8aa <HAL_TIMEx_PWMN_Start_IT+0x96>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8a8:	e00b      	b.n	800e8c2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2b08      	cmp	r3, #8
 800e8ae:	d104      	bne.n	800e8ba <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e8b8:	e003      	b.n	800e8c2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2202      	movs	r2, #2
 800e8be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2b0c      	cmp	r3, #12
 800e8c6:	d841      	bhi.n	800e94c <HAL_TIMEx_PWMN_Start_IT+0x138>
 800e8c8:	a201      	add	r2, pc, #4	; (adr r2, 800e8d0 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800e8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ce:	bf00      	nop
 800e8d0:	0800e905 	.word	0x0800e905
 800e8d4:	0800e94d 	.word	0x0800e94d
 800e8d8:	0800e94d 	.word	0x0800e94d
 800e8dc:	0800e94d 	.word	0x0800e94d
 800e8e0:	0800e917 	.word	0x0800e917
 800e8e4:	0800e94d 	.word	0x0800e94d
 800e8e8:	0800e94d 	.word	0x0800e94d
 800e8ec:	0800e94d 	.word	0x0800e94d
 800e8f0:	0800e929 	.word	0x0800e929
 800e8f4:	0800e94d 	.word	0x0800e94d
 800e8f8:	0800e94d 	.word	0x0800e94d
 800e8fc:	0800e94d 	.word	0x0800e94d
 800e900:	0800e93b 	.word	0x0800e93b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68da      	ldr	r2, [r3, #12]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f042 0202 	orr.w	r2, r2, #2
 800e912:	60da      	str	r2, [r3, #12]
      break;
 800e914:	e01d      	b.n	800e952 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68da      	ldr	r2, [r3, #12]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f042 0204 	orr.w	r2, r2, #4
 800e924:	60da      	str	r2, [r3, #12]
      break;
 800e926:	e014      	b.n	800e952 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68da      	ldr	r2, [r3, #12]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f042 0208 	orr.w	r2, r2, #8
 800e936:	60da      	str	r2, [r3, #12]
      break;
 800e938:	e00b      	b.n	800e952 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	68da      	ldr	r2, [r3, #12]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f042 0210 	orr.w	r2, r2, #16
 800e948:	60da      	str	r2, [r3, #12]
      break;
 800e94a:	e002      	b.n	800e952 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800e94c:	2301      	movs	r3, #1
 800e94e:	73fb      	strb	r3, [r7, #15]
      break;
 800e950:	bf00      	nop
  }

  if (status == HAL_OK)
 800e952:	7bfb      	ldrb	r3, [r7, #15]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d154      	bne.n	800ea02 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68da      	ldr	r2, [r3, #12]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e966:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2204      	movs	r2, #4
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	4618      	mov	r0, r3
 800e972:	f000 f9ab 	bl	800eccc <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a20      	ldr	r2, [pc, #128]	; (800ea0c <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d018      	beq.n	800e9c2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e998:	d013      	beq.n	800e9c2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a1c      	ldr	r2, [pc, #112]	; (800ea10 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d00e      	beq.n	800e9c2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a1a      	ldr	r2, [pc, #104]	; (800ea14 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d009      	beq.n	800e9c2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a19      	ldr	r2, [pc, #100]	; (800ea18 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d004      	beq.n	800e9c2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a17      	ldr	r2, [pc, #92]	; (800ea1c <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d115      	bne.n	800e9ee <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689a      	ldr	r2, [r3, #8]
 800e9c8:	4b15      	ldr	r3, [pc, #84]	; (800ea20 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	2b06      	cmp	r3, #6
 800e9d2:	d015      	beq.n	800ea00 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9da:	d011      	beq.n	800ea00 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0201 	orr.w	r2, r2, #1
 800e9ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ec:	e008      	b.n	800ea00 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f042 0201 	orr.w	r2, r2, #1
 800e9fc:	601a      	str	r2, [r3, #0]
 800e9fe:	e000      	b.n	800ea02 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ea02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	40012c00 	.word	0x40012c00
 800ea10:	40000400 	.word	0x40000400
 800ea14:	40000800 	.word	0x40000800
 800ea18:	40013400 	.word	0x40013400
 800ea1c:	40014000 	.word	0x40014000
 800ea20:	00010007 	.word	0x00010007

0800ea24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d101      	bne.n	800ea3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea38:	2302      	movs	r3, #2
 800ea3a:	e065      	b.n	800eb08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2202      	movs	r2, #2
 800ea48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a2c      	ldr	r2, [pc, #176]	; (800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d004      	beq.n	800ea70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a2b      	ldr	r2, [pc, #172]	; (800eb18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d108      	bne.n	800ea82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ea76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ea88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	4313      	orrs	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a1b      	ldr	r2, [pc, #108]	; (800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d018      	beq.n	800eadc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eab2:	d013      	beq.n	800eadc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a18      	ldr	r2, [pc, #96]	; (800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00e      	beq.n	800eadc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a17      	ldr	r2, [pc, #92]	; (800eb20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d009      	beq.n	800eadc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a12      	ldr	r2, [pc, #72]	; (800eb18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d004      	beq.n	800eadc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a13      	ldr	r2, [pc, #76]	; (800eb24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d10c      	bne.n	800eaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	40012c00 	.word	0x40012c00
 800eb18:	40013400 	.word	0x40013400
 800eb1c:	40000400 	.word	0x40000400
 800eb20:	40000800 	.word	0x40000800
 800eb24:	40014000 	.word	0x40014000

0800eb28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb32:	2300      	movs	r3, #0
 800eb34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d101      	bne.n	800eb44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb40:	2302      	movs	r3, #2
 800eb42:	e073      	b.n	800ec2c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	4313      	orrs	r3, r2
 800eb74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	041b      	lsls	r3, r3, #16
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	69db      	ldr	r3, [r3, #28]
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a19      	ldr	r2, [pc, #100]	; (800ec38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d004      	beq.n	800ebe0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a18      	ldr	r2, [pc, #96]	; (800ec3c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d11c      	bne.n	800ec1a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebea:	051b      	lsls	r3, r3, #20
 800ebec:	4313      	orrs	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	4313      	orrs	r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	40012c00 	.word	0x40012c00
 800ec3c:	40013400 	.word	0x40013400

0800ec40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec48:	bf00      	nop
 800ec4a:	370c      	adds	r7, #12
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec5c:	bf00      	nop
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ec84:	bf00      	nop
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b087      	sub	sp, #28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	f003 030f 	and.w	r3, r3, #15
 800ecde:	2204      	movs	r2, #4
 800ece0:	fa02 f303 	lsl.w	r3, r2, r3
 800ece4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6a1a      	ldr	r2, [r3, #32]
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	43db      	mvns	r3, r3
 800ecee:	401a      	ands	r2, r3
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6a1a      	ldr	r2, [r3, #32]
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	f003 030f 	and.w	r3, r3, #15
 800ecfe:	6879      	ldr	r1, [r7, #4]
 800ed00:	fa01 f303 	lsl.w	r3, r1, r3
 800ed04:	431a      	orrs	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	621a      	str	r2, [r3, #32]
}
 800ed0a:	bf00      	nop
 800ed0c:	371c      	adds	r7, #28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr

0800ed16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b082      	sub	sp, #8
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed24:	2301      	movs	r3, #1
 800ed26:	e042      	b.n	800edae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7f6 faf0 	bl	8005320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2224      	movs	r2, #36	; 0x24
 800ed44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f022 0201 	bic.w	r2, r2, #1
 800ed56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 faf5 	bl	800f350 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f826 	bl	800edb8 <UART_SetConfig>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d101      	bne.n	800ed76 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e01b      	b.n	800edae <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f042 0201 	orr.w	r2, r2, #1
 800eda4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fb74 	bl	800f494 <UART_CheckIdleState>
 800edac:	4603      	mov	r3, r0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3708      	adds	r7, #8
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edbc:	b08c      	sub	sp, #48	; 0x30
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	689a      	ldr	r2, [r3, #8]
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	431a      	orrs	r2, r3
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	431a      	orrs	r2, r3
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	69db      	ldr	r3, [r3, #28]
 800eddc:	4313      	orrs	r3, r2
 800edde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	4bab      	ldr	r3, [pc, #684]	; (800f094 <UART_SetConfig+0x2dc>)
 800ede8:	4013      	ands	r3, r2
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	6812      	ldr	r2, [r2, #0]
 800edee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edf0:	430b      	orrs	r3, r1
 800edf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	68da      	ldr	r2, [r3, #12]
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4aa0      	ldr	r2, [pc, #640]	; (800f098 <UART_SetConfig+0x2e0>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d004      	beq.n	800ee24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	6a1b      	ldr	r3, [r3, #32]
 800ee1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee20:	4313      	orrs	r3, r2
 800ee22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ee2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	6812      	ldr	r2, [r2, #0]
 800ee36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee38:	430b      	orrs	r3, r1
 800ee3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee42:	f023 010f 	bic.w	r1, r3, #15
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	430a      	orrs	r2, r1
 800ee50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a91      	ldr	r2, [pc, #580]	; (800f09c <UART_SetConfig+0x2e4>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d125      	bne.n	800eea8 <UART_SetConfig+0xf0>
 800ee5c:	4b90      	ldr	r3, [pc, #576]	; (800f0a0 <UART_SetConfig+0x2e8>)
 800ee5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee62:	f003 0303 	and.w	r3, r3, #3
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d81a      	bhi.n	800eea0 <UART_SetConfig+0xe8>
 800ee6a:	a201      	add	r2, pc, #4	; (adr r2, 800ee70 <UART_SetConfig+0xb8>)
 800ee6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee70:	0800ee81 	.word	0x0800ee81
 800ee74:	0800ee91 	.word	0x0800ee91
 800ee78:	0800ee89 	.word	0x0800ee89
 800ee7c:	0800ee99 	.word	0x0800ee99
 800ee80:	2301      	movs	r3, #1
 800ee82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee86:	e0d6      	b.n	800f036 <UART_SetConfig+0x27e>
 800ee88:	2302      	movs	r3, #2
 800ee8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee8e:	e0d2      	b.n	800f036 <UART_SetConfig+0x27e>
 800ee90:	2304      	movs	r3, #4
 800ee92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee96:	e0ce      	b.n	800f036 <UART_SetConfig+0x27e>
 800ee98:	2308      	movs	r3, #8
 800ee9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee9e:	e0ca      	b.n	800f036 <UART_SetConfig+0x27e>
 800eea0:	2310      	movs	r3, #16
 800eea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eea6:	e0c6      	b.n	800f036 <UART_SetConfig+0x27e>
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a7d      	ldr	r2, [pc, #500]	; (800f0a4 <UART_SetConfig+0x2ec>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d138      	bne.n	800ef24 <UART_SetConfig+0x16c>
 800eeb2:	4b7b      	ldr	r3, [pc, #492]	; (800f0a0 <UART_SetConfig+0x2e8>)
 800eeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeb8:	f003 030c 	and.w	r3, r3, #12
 800eebc:	2b0c      	cmp	r3, #12
 800eebe:	d82d      	bhi.n	800ef1c <UART_SetConfig+0x164>
 800eec0:	a201      	add	r2, pc, #4	; (adr r2, 800eec8 <UART_SetConfig+0x110>)
 800eec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec6:	bf00      	nop
 800eec8:	0800eefd 	.word	0x0800eefd
 800eecc:	0800ef1d 	.word	0x0800ef1d
 800eed0:	0800ef1d 	.word	0x0800ef1d
 800eed4:	0800ef1d 	.word	0x0800ef1d
 800eed8:	0800ef0d 	.word	0x0800ef0d
 800eedc:	0800ef1d 	.word	0x0800ef1d
 800eee0:	0800ef1d 	.word	0x0800ef1d
 800eee4:	0800ef1d 	.word	0x0800ef1d
 800eee8:	0800ef05 	.word	0x0800ef05
 800eeec:	0800ef1d 	.word	0x0800ef1d
 800eef0:	0800ef1d 	.word	0x0800ef1d
 800eef4:	0800ef1d 	.word	0x0800ef1d
 800eef8:	0800ef15 	.word	0x0800ef15
 800eefc:	2300      	movs	r3, #0
 800eefe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef02:	e098      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef04:	2302      	movs	r3, #2
 800ef06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef0a:	e094      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef0c:	2304      	movs	r3, #4
 800ef0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef12:	e090      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef14:	2308      	movs	r3, #8
 800ef16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef1a:	e08c      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef1c:	2310      	movs	r3, #16
 800ef1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef22:	e088      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a5f      	ldr	r2, [pc, #380]	; (800f0a8 <UART_SetConfig+0x2f0>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d125      	bne.n	800ef7a <UART_SetConfig+0x1c2>
 800ef2e:	4b5c      	ldr	r3, [pc, #368]	; (800f0a0 <UART_SetConfig+0x2e8>)
 800ef30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ef38:	2b30      	cmp	r3, #48	; 0x30
 800ef3a:	d016      	beq.n	800ef6a <UART_SetConfig+0x1b2>
 800ef3c:	2b30      	cmp	r3, #48	; 0x30
 800ef3e:	d818      	bhi.n	800ef72 <UART_SetConfig+0x1ba>
 800ef40:	2b20      	cmp	r3, #32
 800ef42:	d00a      	beq.n	800ef5a <UART_SetConfig+0x1a2>
 800ef44:	2b20      	cmp	r3, #32
 800ef46:	d814      	bhi.n	800ef72 <UART_SetConfig+0x1ba>
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <UART_SetConfig+0x19a>
 800ef4c:	2b10      	cmp	r3, #16
 800ef4e:	d008      	beq.n	800ef62 <UART_SetConfig+0x1aa>
 800ef50:	e00f      	b.n	800ef72 <UART_SetConfig+0x1ba>
 800ef52:	2300      	movs	r3, #0
 800ef54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef58:	e06d      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef5a:	2302      	movs	r3, #2
 800ef5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef60:	e069      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef62:	2304      	movs	r3, #4
 800ef64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef68:	e065      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef6a:	2308      	movs	r3, #8
 800ef6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef70:	e061      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef72:	2310      	movs	r3, #16
 800ef74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef78:	e05d      	b.n	800f036 <UART_SetConfig+0x27e>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a4b      	ldr	r2, [pc, #300]	; (800f0ac <UART_SetConfig+0x2f4>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d125      	bne.n	800efd0 <UART_SetConfig+0x218>
 800ef84:	4b46      	ldr	r3, [pc, #280]	; (800f0a0 <UART_SetConfig+0x2e8>)
 800ef86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ef8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ef90:	d016      	beq.n	800efc0 <UART_SetConfig+0x208>
 800ef92:	2bc0      	cmp	r3, #192	; 0xc0
 800ef94:	d818      	bhi.n	800efc8 <UART_SetConfig+0x210>
 800ef96:	2b80      	cmp	r3, #128	; 0x80
 800ef98:	d00a      	beq.n	800efb0 <UART_SetConfig+0x1f8>
 800ef9a:	2b80      	cmp	r3, #128	; 0x80
 800ef9c:	d814      	bhi.n	800efc8 <UART_SetConfig+0x210>
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <UART_SetConfig+0x1f0>
 800efa2:	2b40      	cmp	r3, #64	; 0x40
 800efa4:	d008      	beq.n	800efb8 <UART_SetConfig+0x200>
 800efa6:	e00f      	b.n	800efc8 <UART_SetConfig+0x210>
 800efa8:	2300      	movs	r3, #0
 800efaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efae:	e042      	b.n	800f036 <UART_SetConfig+0x27e>
 800efb0:	2302      	movs	r3, #2
 800efb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efb6:	e03e      	b.n	800f036 <UART_SetConfig+0x27e>
 800efb8:	2304      	movs	r3, #4
 800efba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efbe:	e03a      	b.n	800f036 <UART_SetConfig+0x27e>
 800efc0:	2308      	movs	r3, #8
 800efc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efc6:	e036      	b.n	800f036 <UART_SetConfig+0x27e>
 800efc8:	2310      	movs	r3, #16
 800efca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efce:	e032      	b.n	800f036 <UART_SetConfig+0x27e>
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a30      	ldr	r2, [pc, #192]	; (800f098 <UART_SetConfig+0x2e0>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d12a      	bne.n	800f030 <UART_SetConfig+0x278>
 800efda:	4b31      	ldr	r3, [pc, #196]	; (800f0a0 <UART_SetConfig+0x2e8>)
 800efdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800efe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800efe8:	d01a      	beq.n	800f020 <UART_SetConfig+0x268>
 800efea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800efee:	d81b      	bhi.n	800f028 <UART_SetConfig+0x270>
 800eff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eff4:	d00c      	beq.n	800f010 <UART_SetConfig+0x258>
 800eff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800effa:	d815      	bhi.n	800f028 <UART_SetConfig+0x270>
 800effc:	2b00      	cmp	r3, #0
 800effe:	d003      	beq.n	800f008 <UART_SetConfig+0x250>
 800f000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f004:	d008      	beq.n	800f018 <UART_SetConfig+0x260>
 800f006:	e00f      	b.n	800f028 <UART_SetConfig+0x270>
 800f008:	2300      	movs	r3, #0
 800f00a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f00e:	e012      	b.n	800f036 <UART_SetConfig+0x27e>
 800f010:	2302      	movs	r3, #2
 800f012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f016:	e00e      	b.n	800f036 <UART_SetConfig+0x27e>
 800f018:	2304      	movs	r3, #4
 800f01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f01e:	e00a      	b.n	800f036 <UART_SetConfig+0x27e>
 800f020:	2308      	movs	r3, #8
 800f022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f026:	e006      	b.n	800f036 <UART_SetConfig+0x27e>
 800f028:	2310      	movs	r3, #16
 800f02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f02e:	e002      	b.n	800f036 <UART_SetConfig+0x27e>
 800f030:	2310      	movs	r3, #16
 800f032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a17      	ldr	r2, [pc, #92]	; (800f098 <UART_SetConfig+0x2e0>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	f040 80a8 	bne.w	800f192 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f046:	2b08      	cmp	r3, #8
 800f048:	d834      	bhi.n	800f0b4 <UART_SetConfig+0x2fc>
 800f04a:	a201      	add	r2, pc, #4	; (adr r2, 800f050 <UART_SetConfig+0x298>)
 800f04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f050:	0800f075 	.word	0x0800f075
 800f054:	0800f0b5 	.word	0x0800f0b5
 800f058:	0800f07d 	.word	0x0800f07d
 800f05c:	0800f0b5 	.word	0x0800f0b5
 800f060:	0800f083 	.word	0x0800f083
 800f064:	0800f0b5 	.word	0x0800f0b5
 800f068:	0800f0b5 	.word	0x0800f0b5
 800f06c:	0800f0b5 	.word	0x0800f0b5
 800f070:	0800f08b 	.word	0x0800f08b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f074:	f7fd f90c 	bl	800c290 <HAL_RCC_GetPCLK1Freq>
 800f078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f07a:	e021      	b.n	800f0c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f07c:	4b0c      	ldr	r3, [pc, #48]	; (800f0b0 <UART_SetConfig+0x2f8>)
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f080:	e01e      	b.n	800f0c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f082:	f7fd f897 	bl	800c1b4 <HAL_RCC_GetSysClockFreq>
 800f086:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f088:	e01a      	b.n	800f0c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f08a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f090:	e016      	b.n	800f0c0 <UART_SetConfig+0x308>
 800f092:	bf00      	nop
 800f094:	cfff69f3 	.word	0xcfff69f3
 800f098:	40008000 	.word	0x40008000
 800f09c:	40013800 	.word	0x40013800
 800f0a0:	40021000 	.word	0x40021000
 800f0a4:	40004400 	.word	0x40004400
 800f0a8:	40004800 	.word	0x40004800
 800f0ac:	40004c00 	.word	0x40004c00
 800f0b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f0be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 812a 	beq.w	800f31c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0cc:	4a9e      	ldr	r2, [pc, #632]	; (800f348 <UART_SetConfig+0x590>)
 800f0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0da:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	685a      	ldr	r2, [r3, #4]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	4413      	add	r3, r2
 800f0e6:	69ba      	ldr	r2, [r7, #24]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d305      	bcc.n	800f0f8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0f2:	69ba      	ldr	r2, [r7, #24]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d903      	bls.n	800f100 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f0fe:	e10d      	b.n	800f31c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	2200      	movs	r2, #0
 800f104:	60bb      	str	r3, [r7, #8]
 800f106:	60fa      	str	r2, [r7, #12]
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10c:	4a8e      	ldr	r2, [pc, #568]	; (800f348 <UART_SetConfig+0x590>)
 800f10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f112:	b29b      	uxth	r3, r3
 800f114:	2200      	movs	r2, #0
 800f116:	603b      	str	r3, [r7, #0]
 800f118:	607a      	str	r2, [r7, #4]
 800f11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f11e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f122:	f7f1 fdd9 	bl	8000cd8 <__aeabi_uldivmod>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4610      	mov	r0, r2
 800f12c:	4619      	mov	r1, r3
 800f12e:	f04f 0200 	mov.w	r2, #0
 800f132:	f04f 0300 	mov.w	r3, #0
 800f136:	020b      	lsls	r3, r1, #8
 800f138:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f13c:	0202      	lsls	r2, r0, #8
 800f13e:	6979      	ldr	r1, [r7, #20]
 800f140:	6849      	ldr	r1, [r1, #4]
 800f142:	0849      	lsrs	r1, r1, #1
 800f144:	2000      	movs	r0, #0
 800f146:	460c      	mov	r4, r1
 800f148:	4605      	mov	r5, r0
 800f14a:	eb12 0804 	adds.w	r8, r2, r4
 800f14e:	eb43 0905 	adc.w	r9, r3, r5
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	469a      	mov	sl, r3
 800f15a:	4693      	mov	fp, r2
 800f15c:	4652      	mov	r2, sl
 800f15e:	465b      	mov	r3, fp
 800f160:	4640      	mov	r0, r8
 800f162:	4649      	mov	r1, r9
 800f164:	f7f1 fdb8 	bl	8000cd8 <__aeabi_uldivmod>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4613      	mov	r3, r2
 800f16e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f176:	d308      	bcc.n	800f18a <UART_SetConfig+0x3d2>
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f17e:	d204      	bcs.n	800f18a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6a3a      	ldr	r2, [r7, #32]
 800f186:	60da      	str	r2, [r3, #12]
 800f188:	e0c8      	b.n	800f31c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f190:	e0c4      	b.n	800f31c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	69db      	ldr	r3, [r3, #28]
 800f196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f19a:	d167      	bne.n	800f26c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800f19c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1a0:	2b08      	cmp	r3, #8
 800f1a2:	d828      	bhi.n	800f1f6 <UART_SetConfig+0x43e>
 800f1a4:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <UART_SetConfig+0x3f4>)
 800f1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1aa:	bf00      	nop
 800f1ac:	0800f1d1 	.word	0x0800f1d1
 800f1b0:	0800f1d9 	.word	0x0800f1d9
 800f1b4:	0800f1e1 	.word	0x0800f1e1
 800f1b8:	0800f1f7 	.word	0x0800f1f7
 800f1bc:	0800f1e7 	.word	0x0800f1e7
 800f1c0:	0800f1f7 	.word	0x0800f1f7
 800f1c4:	0800f1f7 	.word	0x0800f1f7
 800f1c8:	0800f1f7 	.word	0x0800f1f7
 800f1cc:	0800f1ef 	.word	0x0800f1ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1d0:	f7fd f85e 	bl	800c290 <HAL_RCC_GetPCLK1Freq>
 800f1d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1d6:	e014      	b.n	800f202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1d8:	f7fd f870 	bl	800c2bc <HAL_RCC_GetPCLK2Freq>
 800f1dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1de:	e010      	b.n	800f202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f1e0:	4b5a      	ldr	r3, [pc, #360]	; (800f34c <UART_SetConfig+0x594>)
 800f1e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f1e4:	e00d      	b.n	800f202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f1e6:	f7fc ffe5 	bl	800c1b4 <HAL_RCC_GetSysClockFreq>
 800f1ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1ec:	e009      	b.n	800f202 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f1f4:	e005      	b.n	800f202 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f204:	2b00      	cmp	r3, #0
 800f206:	f000 8089 	beq.w	800f31c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20e:	4a4e      	ldr	r2, [pc, #312]	; (800f348 <UART_SetConfig+0x590>)
 800f210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f214:	461a      	mov	r2, r3
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	fbb3 f3f2 	udiv	r3, r3, r2
 800f21c:	005a      	lsls	r2, r3, #1
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	085b      	lsrs	r3, r3, #1
 800f224:	441a      	add	r2, r3
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f22e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f230:	6a3b      	ldr	r3, [r7, #32]
 800f232:	2b0f      	cmp	r3, #15
 800f234:	d916      	bls.n	800f264 <UART_SetConfig+0x4ac>
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f23c:	d212      	bcs.n	800f264 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f23e:	6a3b      	ldr	r3, [r7, #32]
 800f240:	b29b      	uxth	r3, r3
 800f242:	f023 030f 	bic.w	r3, r3, #15
 800f246:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	085b      	lsrs	r3, r3, #1
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	f003 0307 	and.w	r3, r3, #7
 800f252:	b29a      	uxth	r2, r3
 800f254:	8bfb      	ldrh	r3, [r7, #30]
 800f256:	4313      	orrs	r3, r2
 800f258:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	8bfa      	ldrh	r2, [r7, #30]
 800f260:	60da      	str	r2, [r3, #12]
 800f262:	e05b      	b.n	800f31c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f26a:	e057      	b.n	800f31c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f26c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f270:	2b08      	cmp	r3, #8
 800f272:	d828      	bhi.n	800f2c6 <UART_SetConfig+0x50e>
 800f274:	a201      	add	r2, pc, #4	; (adr r2, 800f27c <UART_SetConfig+0x4c4>)
 800f276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27a:	bf00      	nop
 800f27c:	0800f2a1 	.word	0x0800f2a1
 800f280:	0800f2a9 	.word	0x0800f2a9
 800f284:	0800f2b1 	.word	0x0800f2b1
 800f288:	0800f2c7 	.word	0x0800f2c7
 800f28c:	0800f2b7 	.word	0x0800f2b7
 800f290:	0800f2c7 	.word	0x0800f2c7
 800f294:	0800f2c7 	.word	0x0800f2c7
 800f298:	0800f2c7 	.word	0x0800f2c7
 800f29c:	0800f2bf 	.word	0x0800f2bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2a0:	f7fc fff6 	bl	800c290 <HAL_RCC_GetPCLK1Freq>
 800f2a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2a6:	e014      	b.n	800f2d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2a8:	f7fd f808 	bl	800c2bc <HAL_RCC_GetPCLK2Freq>
 800f2ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2ae:	e010      	b.n	800f2d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2b0:	4b26      	ldr	r3, [pc, #152]	; (800f34c <UART_SetConfig+0x594>)
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f2b4:	e00d      	b.n	800f2d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2b6:	f7fc ff7d 	bl	800c1b4 <HAL_RCC_GetSysClockFreq>
 800f2ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2bc:	e009      	b.n	800f2d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f2c4:	e005      	b.n	800f2d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f2d0:	bf00      	nop
    }

    if (pclk != 0U)
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d021      	beq.n	800f31c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2dc:	4a1a      	ldr	r2, [pc, #104]	; (800f348 <UART_SetConfig+0x590>)
 800f2de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	085b      	lsrs	r3, r3, #1
 800f2f0:	441a      	add	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	2b0f      	cmp	r3, #15
 800f300:	d909      	bls.n	800f316 <UART_SetConfig+0x55e>
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f308:	d205      	bcs.n	800f316 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	60da      	str	r2, [r3, #12]
 800f314:	e002      	b.n	800f31c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f316:	2301      	movs	r3, #1
 800f318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	2201      	movs	r2, #1
 800f320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2201      	movs	r2, #1
 800f328:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2200      	movs	r2, #0
 800f330:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2200      	movs	r2, #0
 800f336:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f338:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3730      	adds	r7, #48	; 0x30
 800f340:	46bd      	mov	sp, r7
 800f342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f346:	bf00      	nop
 800f348:	0801ae08 	.word	0x0801ae08
 800f34c:	00f42400 	.word	0x00f42400

0800f350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35c:	f003 0308 	and.w	r3, r3, #8
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00a      	beq.n	800f37a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00a      	beq.n	800f39c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	430a      	orrs	r2, r1
 800f39a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a0:	f003 0302 	and.w	r3, r3, #2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d00a      	beq.n	800f3be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c2:	f003 0304 	and.w	r3, r3, #4
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00a      	beq.n	800f3e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	430a      	orrs	r2, r1
 800f3de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e4:	f003 0310 	and.w	r3, r3, #16
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00a      	beq.n	800f402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f406:	f003 0320 	and.w	r3, r3, #32
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00a      	beq.n	800f424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	430a      	orrs	r2, r1
 800f422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d01a      	beq.n	800f466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f44a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f44e:	d10a      	bne.n	800f466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	430a      	orrs	r2, r1
 800f464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00a      	beq.n	800f488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	430a      	orrs	r2, r1
 800f486:	605a      	str	r2, [r3, #4]
  }
}
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b098      	sub	sp, #96	; 0x60
 800f498:	af02      	add	r7, sp, #8
 800f49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4a4:	f7f6 fd94 	bl	8005fd0 <HAL_GetTick>
 800f4a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f003 0308 	and.w	r3, r3, #8
 800f4b4:	2b08      	cmp	r3, #8
 800f4b6:	d12f      	bne.n	800f518 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f88e 	bl	800f5e8 <UART_WaitOnFlagUntilTimeout>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d022      	beq.n	800f518 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	e853 3f00 	ldrex	r3, [r3]
 800f4de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4e6:	653b      	str	r3, [r7, #80]	; 0x50
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f0:	647b      	str	r3, [r7, #68]	; 0x44
 800f4f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4f8:	e841 2300 	strex	r3, r2, [r1]
 800f4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e6      	bne.n	800f4d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2220      	movs	r2, #32
 800f508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f514:	2303      	movs	r3, #3
 800f516:	e063      	b.n	800f5e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	2b04      	cmp	r3, #4
 800f524:	d149      	bne.n	800f5ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f52e:	2200      	movs	r2, #0
 800f530:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f857 	bl	800f5e8 <UART_WaitOnFlagUntilTimeout>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d03c      	beq.n	800f5ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f548:	e853 3f00 	ldrex	r3, [r3]
 800f54c:	623b      	str	r3, [r7, #32]
   return(result);
 800f54e:	6a3b      	ldr	r3, [r7, #32]
 800f550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f554:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f55e:	633b      	str	r3, [r7, #48]	; 0x30
 800f560:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f566:	e841 2300 	strex	r3, r2, [r1]
 800f56a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d1e6      	bne.n	800f540 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3308      	adds	r3, #8
 800f578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	e853 3f00 	ldrex	r3, [r3]
 800f580:	60fb      	str	r3, [r7, #12]
   return(result);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f023 0301 	bic.w	r3, r3, #1
 800f588:	64bb      	str	r3, [r7, #72]	; 0x48
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3308      	adds	r3, #8
 800f590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f592:	61fa      	str	r2, [r7, #28]
 800f594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f596:	69b9      	ldr	r1, [r7, #24]
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	e841 2300 	strex	r3, r2, [r1]
 800f59e:	617b      	str	r3, [r7, #20]
   return(result);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1e5      	bne.n	800f572 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2220      	movs	r2, #32
 800f5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	e012      	b.n	800f5e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2220      	movs	r2, #32
 800f5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2220      	movs	r2, #32
 800f5c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3758      	adds	r7, #88	; 0x58
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	603b      	str	r3, [r7, #0]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5f8:	e04f      	b.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f600:	d04b      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f602:	f7f6 fce5 	bl	8005fd0 <HAL_GetTick>
 800f606:	4602      	mov	r2, r0
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	69ba      	ldr	r2, [r7, #24]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d302      	bcc.n	800f618 <UART_WaitOnFlagUntilTimeout+0x30>
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f618:	2303      	movs	r3, #3
 800f61a:	e04e      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f003 0304 	and.w	r3, r3, #4
 800f626:	2b00      	cmp	r3, #0
 800f628:	d037      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	2b80      	cmp	r3, #128	; 0x80
 800f62e:	d034      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b40      	cmp	r3, #64	; 0x40
 800f634:	d031      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	69db      	ldr	r3, [r3, #28]
 800f63c:	f003 0308 	and.w	r3, r3, #8
 800f640:	2b08      	cmp	r3, #8
 800f642:	d110      	bne.n	800f666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2208      	movs	r2, #8
 800f64a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 f838 	bl	800f6c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2208      	movs	r2, #8
 800f656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2200      	movs	r2, #0
 800f65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	e029      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f674:	d111      	bne.n	800f69a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f67e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 f81e 	bl	800f6c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2220      	movs	r2, #32
 800f68a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2200      	movs	r2, #0
 800f692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f696:	2303      	movs	r3, #3
 800f698:	e00f      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	69da      	ldr	r2, [r3, #28]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	bf0c      	ite	eq
 800f6aa:	2301      	moveq	r3, #1
 800f6ac:	2300      	movne	r3, #0
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d0a0      	beq.n	800f5fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b095      	sub	sp, #84	; 0x54
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d2:	e853 3f00 	ldrex	r3, [r3]
 800f6d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f6de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6e8:	643b      	str	r3, [r7, #64]	; 0x40
 800f6ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6f0:	e841 2300 	strex	r3, r2, [r1]
 800f6f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1e6      	bne.n	800f6ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3308      	adds	r3, #8
 800f702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f704:	6a3b      	ldr	r3, [r7, #32]
 800f706:	e853 3f00 	ldrex	r3, [r3]
 800f70a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f712:	f023 0301 	bic.w	r3, r3, #1
 800f716:	64bb      	str	r3, [r7, #72]	; 0x48
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3308      	adds	r3, #8
 800f71e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f720:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f728:	e841 2300 	strex	r3, r2, [r1]
 800f72c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1e3      	bne.n	800f6fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d118      	bne.n	800f76e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	e853 3f00 	ldrex	r3, [r3]
 800f748:	60bb      	str	r3, [r7, #8]
   return(result);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	f023 0310 	bic.w	r3, r3, #16
 800f750:	647b      	str	r3, [r7, #68]	; 0x44
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	461a      	mov	r2, r3
 800f758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75e:	6979      	ldr	r1, [r7, #20]
 800f760:	69ba      	ldr	r2, [r7, #24]
 800f762:	e841 2300 	strex	r3, r2, [r1]
 800f766:	613b      	str	r3, [r7, #16]
   return(result);
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d1e6      	bne.n	800f73c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2220      	movs	r2, #32
 800f772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f782:	bf00      	nop
 800f784:	3754      	adds	r7, #84	; 0x54
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f78e:	b480      	push	{r7}
 800f790:	b085      	sub	sp, #20
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d101      	bne.n	800f7a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e027      	b.n	800f7f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2224      	movs	r2, #36	; 0x24
 800f7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f022 0201 	bic.w	r2, r2, #1
 800f7ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f7d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2220      	movs	r2, #32
 800f7e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7f2:	2300      	movs	r3, #0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3714      	adds	r7, #20
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f810:	2b01      	cmp	r3, #1
 800f812:	d101      	bne.n	800f818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f814:	2302      	movs	r3, #2
 800f816:	e02d      	b.n	800f874 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2224      	movs	r2, #36	; 0x24
 800f824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f022 0201 	bic.w	r2, r2, #1
 800f83e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	683a      	ldr	r2, [r7, #0]
 800f850:	430a      	orrs	r2, r1
 800f852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f84f 	bl	800f8f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2220      	movs	r2, #32
 800f866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d101      	bne.n	800f894 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f890:	2302      	movs	r3, #2
 800f892:	e02d      	b.n	800f8f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2224      	movs	r2, #36	; 0x24
 800f8a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f022 0201 	bic.w	r2, r2, #1
 800f8ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	683a      	ldr	r2, [r7, #0]
 800f8cc:	430a      	orrs	r2, r1
 800f8ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 f811 	bl	800f8f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2220      	movs	r2, #32
 800f8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f904:	2b00      	cmp	r3, #0
 800f906:	d108      	bne.n	800f91a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2201      	movs	r2, #1
 800f914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f918:	e031      	b.n	800f97e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f91a:	2308      	movs	r3, #8
 800f91c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f91e:	2308      	movs	r3, #8
 800f920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	0e5b      	lsrs	r3, r3, #25
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	f003 0307 	and.w	r3, r3, #7
 800f930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	0f5b      	lsrs	r3, r3, #29
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	f003 0307 	and.w	r3, r3, #7
 800f940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f942:	7bbb      	ldrb	r3, [r7, #14]
 800f944:	7b3a      	ldrb	r2, [r7, #12]
 800f946:	4911      	ldr	r1, [pc, #68]	; (800f98c <UARTEx_SetNbDataToProcess+0x94>)
 800f948:	5c8a      	ldrb	r2, [r1, r2]
 800f94a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f94e:	7b3a      	ldrb	r2, [r7, #12]
 800f950:	490f      	ldr	r1, [pc, #60]	; (800f990 <UARTEx_SetNbDataToProcess+0x98>)
 800f952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f954:	fb93 f3f2 	sdiv	r3, r3, r2
 800f958:	b29a      	uxth	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f960:	7bfb      	ldrb	r3, [r7, #15]
 800f962:	7b7a      	ldrb	r2, [r7, #13]
 800f964:	4909      	ldr	r1, [pc, #36]	; (800f98c <UARTEx_SetNbDataToProcess+0x94>)
 800f966:	5c8a      	ldrb	r2, [r1, r2]
 800f968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f96c:	7b7a      	ldrb	r2, [r7, #13]
 800f96e:	4908      	ldr	r1, [pc, #32]	; (800f990 <UARTEx_SetNbDataToProcess+0x98>)
 800f970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f972:	fb93 f3f2 	sdiv	r3, r3, r2
 800f976:	b29a      	uxth	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f97e:	bf00      	nop
 800f980:	3714      	adds	r7, #20
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	0801ae20 	.word	0x0801ae20
 800f990:	0801ae28 	.word	0x0801ae28

0800f994 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f9a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f9a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3714      	adds	r7, #20
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	b085      	sub	sp, #20
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f9ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f9ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	43db      	mvns	r3, r3
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	1d3b      	adds	r3, r7, #4
 800fa02:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3714      	adds	r7, #20
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b09d      	sub	sp, #116	; 0x74
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4413      	add	r3, r2
 800fa4e:	881b      	ldrh	r3, [r3, #0]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800fa56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	78db      	ldrb	r3, [r3, #3]
 800fa62:	2b03      	cmp	r3, #3
 800fa64:	d81f      	bhi.n	800faa6 <USB_ActivateEndpoint+0x72>
 800fa66:	a201      	add	r2, pc, #4	; (adr r2, 800fa6c <USB_ActivateEndpoint+0x38>)
 800fa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6c:	0800fa7d 	.word	0x0800fa7d
 800fa70:	0800fa99 	.word	0x0800fa99
 800fa74:	0800faaf 	.word	0x0800faaf
 800fa78:	0800fa8b 	.word	0x0800fa8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fa7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fa80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fa88:	e012      	b.n	800fab0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fa8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fa8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800fa92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fa96:	e00b      	b.n	800fab0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fa98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fa9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800faa0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800faa4:	e004      	b.n	800fab0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800faac:	e000      	b.n	800fab0 <USB_ActivateEndpoint+0x7c>
      break;
 800faae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	441a      	add	r2, r3
 800faba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fabe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800face:	b29b      	uxth	r3, r3
 800fad0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	b29b      	uxth	r3, r3
 800fae0:	b21b      	sxth	r3, r3
 800fae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faea:	b21a      	sxth	r2, r3
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	b21b      	sxth	r3, r3
 800faf2:	4313      	orrs	r3, r2
 800faf4:	b21b      	sxth	r3, r3
 800faf6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	441a      	add	r2, r3
 800fb04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fb08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	7b1b      	ldrb	r3, [r3, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f040 8178 	bne.w	800fe16 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	785b      	ldrb	r3, [r3, #1]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f000 8084 	beq.w	800fc38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	61bb      	str	r3, [r7, #24]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	4413      	add	r3, r2
 800fb42:	61bb      	str	r3, [r7, #24]
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	00da      	lsls	r2, r3, #3
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	88db      	ldrh	r3, [r3, #6]
 800fb58:	085b      	lsrs	r3, r3, #1
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	4413      	add	r3, r2
 800fb6e:	881b      	ldrh	r3, [r3, #0]
 800fb70:	827b      	strh	r3, [r7, #18]
 800fb72:	8a7b      	ldrh	r3, [r7, #18]
 800fb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d01b      	beq.n	800fbb4 <USB_ActivateEndpoint+0x180>
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	881b      	ldrh	r3, [r3, #0]
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb92:	823b      	strh	r3, [r7, #16]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	441a      	add	r2, r3
 800fb9e:	8a3b      	ldrh	r3, [r7, #16]
 800fba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	78db      	ldrb	r3, [r3, #3]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d020      	beq.n	800fbfe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	4413      	add	r3, r2
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbd2:	81bb      	strh	r3, [r7, #12]
 800fbd4:	89bb      	ldrh	r3, [r7, #12]
 800fbd6:	f083 0320 	eor.w	r3, r3, #32
 800fbda:	81bb      	strh	r3, [r7, #12]
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	441a      	add	r2, r3
 800fbe6:	89bb      	ldrh	r3, [r7, #12]
 800fbe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	8013      	strh	r3, [r2, #0]
 800fbfc:	e2d5      	b.n	80101aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	4413      	add	r3, r2
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc14:	81fb      	strh	r3, [r7, #14]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	441a      	add	r2, r3
 800fc20:	89fb      	ldrh	r3, [r7, #14]
 800fc22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	8013      	strh	r3, [r2, #0]
 800fc36:	e2b8      	b.n	80101aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	633b      	str	r3, [r7, #48]	; 0x30
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	461a      	mov	r2, r3
 800fc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc48:	4413      	add	r3, r2
 800fc4a:	633b      	str	r3, [r7, #48]	; 0x30
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	00da      	lsls	r2, r3, #3
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	4413      	add	r3, r2
 800fc56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	88db      	ldrh	r3, [r3, #6]
 800fc60:	085b      	lsrs	r3, r3, #1
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	461a      	mov	r2, r3
 800fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7c:	4413      	add	r3, r2
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	00da      	lsls	r2, r3, #3
 800fc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc88:	4413      	add	r3, r2
 800fc8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fc8e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc92:	881b      	ldrh	r3, [r3, #0]
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9e:	801a      	strh	r2, [r3, #0]
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	2b3e      	cmp	r3, #62	; 0x3e
 800fca6:	d91d      	bls.n	800fce4 <USB_ActivateEndpoint+0x2b0>
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	095b      	lsrs	r3, r3, #5
 800fcae:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	f003 031f 	and.w	r3, r3, #31
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d102      	bne.n	800fcc2 <USB_ActivateEndpoint+0x28e>
 800fcbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	029b      	lsls	r3, r3, #10
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce0:	801a      	strh	r2, [r3, #0]
 800fce2:	e026      	b.n	800fd32 <USB_ActivateEndpoint+0x2fe>
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10a      	bne.n	800fd02 <USB_ActivateEndpoint+0x2ce>
 800fcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	801a      	strh	r2, [r3, #0]
 800fd00:	e017      	b.n	800fd32 <USB_ActivateEndpoint+0x2fe>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	085b      	lsrs	r3, r3, #1
 800fd08:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	f003 0301 	and.w	r3, r3, #1
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d002      	beq.n	800fd1c <USB_ActivateEndpoint+0x2e8>
 800fd16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd18:	3301      	adds	r3, #1
 800fd1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	029b      	lsls	r3, r3, #10
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	4413      	add	r3, r2
 800fd3c:	881b      	ldrh	r3, [r3, #0]
 800fd3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800fd40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d01b      	beq.n	800fd82 <USB_ActivateEndpoint+0x34e>
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd60:	843b      	strh	r3, [r7, #32]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	441a      	add	r2, r3
 800fd6c:	8c3b      	ldrh	r3, [r7, #32]
 800fd6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fd7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d124      	bne.n	800fdd4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fda0:	83bb      	strh	r3, [r7, #28]
 800fda2:	8bbb      	ldrh	r3, [r7, #28]
 800fda4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fda8:	83bb      	strh	r3, [r7, #28]
 800fdaa:	8bbb      	ldrh	r3, [r7, #28]
 800fdac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fdb0:	83bb      	strh	r3, [r7, #28]
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	441a      	add	r2, r3
 800fdbc:	8bbb      	ldrh	r3, [r7, #28]
 800fdbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	8013      	strh	r3, [r2, #0]
 800fdd2:	e1ea      	b.n	80101aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4413      	add	r3, r2
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdea:	83fb      	strh	r3, [r7, #30]
 800fdec:	8bfb      	ldrh	r3, [r7, #30]
 800fdee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fdf2:	83fb      	strh	r3, [r7, #30]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	441a      	add	r2, r3
 800fdfe:	8bfb      	ldrh	r3, [r7, #30]
 800fe00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	8013      	strh	r3, [r2, #0]
 800fe14:	e1c9      	b.n	80101aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	78db      	ldrb	r3, [r3, #3]
 800fe1a:	2b02      	cmp	r3, #2
 800fe1c:	d11e      	bne.n	800fe5c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	4413      	add	r3, r2
 800fe28:	881b      	ldrh	r3, [r3, #0]
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	441a      	add	r2, r3
 800fe42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fe46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fe52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	8013      	strh	r3, [r2, #0]
 800fe5a:	e01d      	b.n	800fe98 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	4413      	add	r3, r2
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fe6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	441a      	add	r2, r3
 800fe80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	461a      	mov	r2, r3
 800fea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fea8:	4413      	add	r3, r2
 800feaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	00da      	lsls	r2, r3, #3
 800feb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800feb4:	4413      	add	r3, r2
 800feb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800feba:	65bb      	str	r3, [r7, #88]	; 0x58
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	891b      	ldrh	r3, [r3, #8]
 800fec0:	085b      	lsrs	r3, r3, #1
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	005b      	lsls	r3, r3, #1
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feca:	801a      	strh	r2, [r3, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	657b      	str	r3, [r7, #84]	; 0x54
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	461a      	mov	r2, r3
 800feda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fedc:	4413      	add	r3, r2
 800fede:	657b      	str	r3, [r7, #84]	; 0x54
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	00da      	lsls	r2, r3, #3
 800fee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fee8:	4413      	add	r3, r2
 800feea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800feee:	653b      	str	r3, [r7, #80]	; 0x50
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	895b      	ldrh	r3, [r3, #10]
 800fef4:	085b      	lsrs	r3, r3, #1
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fefe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	785b      	ldrb	r3, [r3, #1]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f040 8093 	bne.w	8010030 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	4413      	add	r3, r2
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ff1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ff1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d01b      	beq.n	800ff5e <USB_ActivateEndpoint+0x52a>
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4413      	add	r3, r2
 800ff30:	881b      	ldrh	r3, [r3, #0]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	441a      	add	r2, r3
 800ff48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ff56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	881b      	ldrh	r3, [r3, #0]
 800ff6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ff6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ff6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d01b      	beq.n	800ffae <USB_ActivateEndpoint+0x57a>
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	881b      	ldrh	r3, [r3, #0]
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	441a      	add	r2, r3
 800ff98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ff9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ffc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffc4:	873b      	strh	r3, [r7, #56]	; 0x38
 800ffc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ffc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ffcc:	873b      	strh	r3, [r7, #56]	; 0x38
 800ffce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ffd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ffd4:	873b      	strh	r3, [r7, #56]	; 0x38
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	441a      	add	r2, r3
 800ffe0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ffe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	4413      	add	r3, r2
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	b29b      	uxth	r3, r3
 8010004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801000c:	86fb      	strh	r3, [r7, #54]	; 0x36
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	441a      	add	r2, r3
 8010018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801001a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801001e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801002a:	b29b      	uxth	r3, r3
 801002c:	8013      	strh	r3, [r2, #0]
 801002e:	e0bc      	b.n	80101aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4413      	add	r3, r2
 801003a:	881b      	ldrh	r3, [r3, #0]
 801003c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010048:	2b00      	cmp	r3, #0
 801004a:	d01d      	beq.n	8010088 <USB_ActivateEndpoint+0x654>
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	4413      	add	r3, r2
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	b29b      	uxth	r3, r3
 801005a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801005e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010062:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	441a      	add	r2, r3
 8010070:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801007c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010084:	b29b      	uxth	r3, r3
 8010086:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4413      	add	r3, r2
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010098:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801009c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d01d      	beq.n	80100e0 <USB_ActivateEndpoint+0x6ac>
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	4413      	add	r3, r2
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	441a      	add	r2, r3
 80100c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80100cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80100dc:	b29b      	uxth	r3, r3
 80100de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	78db      	ldrb	r3, [r3, #3]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d024      	beq.n	8010132 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010102:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010106:	f083 0320 	eor.w	r3, r3, #32
 801010a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	441a      	add	r2, r3
 8010118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801011c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801012c:	b29b      	uxth	r3, r3
 801012e:	8013      	strh	r3, [r2, #0]
 8010130:	e01d      	b.n	801016e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	4413      	add	r3, r2
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	b29b      	uxth	r3, r3
 8010140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010148:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	441a      	add	r2, r3
 8010156:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801015a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801015e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801016a:	b29b      	uxth	r3, r3
 801016c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4413      	add	r3, r2
 8010178:	881b      	ldrh	r3, [r3, #0]
 801017a:	b29b      	uxth	r3, r3
 801017c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010184:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	441a      	add	r2, r3
 8010192:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801019a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801019e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80101aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3774      	adds	r7, #116	; 0x74
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop

080101bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80101bc:	b480      	push	{r7}
 80101be:	b08d      	sub	sp, #52	; 0x34
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	7b1b      	ldrb	r3, [r3, #12]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f040 808e 	bne.w	80102ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	785b      	ldrb	r3, [r3, #1]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d044      	beq.n	8010262 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	4413      	add	r3, r2
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	81bb      	strh	r3, [r7, #12]
 80101e6:	89bb      	ldrh	r3, [r7, #12]
 80101e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d01b      	beq.n	8010228 <USB_DeactivateEndpoint+0x6c>
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	881b      	ldrh	r3, [r3, #0]
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010206:	817b      	strh	r3, [r7, #10]
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	441a      	add	r2, r3
 8010212:	897b      	ldrh	r3, [r7, #10]
 8010214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801021c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010224:	b29b      	uxth	r3, r3
 8010226:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	b29b      	uxth	r3, r3
 8010236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801023a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801023e:	813b      	strh	r3, [r7, #8]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	441a      	add	r2, r3
 801024a:	893b      	ldrh	r3, [r7, #8]
 801024c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801025c:	b29b      	uxth	r3, r3
 801025e:	8013      	strh	r3, [r2, #0]
 8010260:	e192      	b.n	8010588 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	4413      	add	r3, r2
 801026c:	881b      	ldrh	r3, [r3, #0]
 801026e:	827b      	strh	r3, [r7, #18]
 8010270:	8a7b      	ldrh	r3, [r7, #18]
 8010272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010276:	2b00      	cmp	r3, #0
 8010278:	d01b      	beq.n	80102b2 <USB_DeactivateEndpoint+0xf6>
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	4413      	add	r3, r2
 8010284:	881b      	ldrh	r3, [r3, #0]
 8010286:	b29b      	uxth	r3, r3
 8010288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801028c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010290:	823b      	strh	r3, [r7, #16]
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	441a      	add	r2, r3
 801029c:	8a3b      	ldrh	r3, [r7, #16]
 801029e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80102aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4413      	add	r3, r2
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102c8:	81fb      	strh	r3, [r7, #14]
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	441a      	add	r2, r3
 80102d4:	89fb      	ldrh	r3, [r7, #14]
 80102d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	8013      	strh	r3, [r2, #0]
 80102ea:	e14d      	b.n	8010588 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	785b      	ldrb	r3, [r3, #1]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f040 80a5 	bne.w	8010440 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4413      	add	r3, r2
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	843b      	strh	r3, [r7, #32]
 8010304:	8c3b      	ldrh	r3, [r7, #32]
 8010306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801030a:	2b00      	cmp	r3, #0
 801030c:	d01b      	beq.n	8010346 <USB_DeactivateEndpoint+0x18a>
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	4413      	add	r3, r2
 8010318:	881b      	ldrh	r3, [r3, #0]
 801031a:	b29b      	uxth	r3, r3
 801031c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010324:	83fb      	strh	r3, [r7, #30]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	441a      	add	r2, r3
 8010330:	8bfb      	ldrh	r3, [r7, #30]
 8010332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801033a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010342:	b29b      	uxth	r3, r3
 8010344:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4413      	add	r3, r2
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	83bb      	strh	r3, [r7, #28]
 8010354:	8bbb      	ldrh	r3, [r7, #28]
 8010356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801035a:	2b00      	cmp	r3, #0
 801035c:	d01b      	beq.n	8010396 <USB_DeactivateEndpoint+0x1da>
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	b29b      	uxth	r3, r3
 801036c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010374:	837b      	strh	r3, [r7, #26]
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	441a      	add	r2, r3
 8010380:	8b7b      	ldrh	r3, [r7, #26]
 8010382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801038a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801038e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010392:	b29b      	uxth	r3, r3
 8010394:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	4413      	add	r3, r2
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ac:	833b      	strh	r3, [r7, #24]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	441a      	add	r2, r3
 80103b8:	8b3b      	ldrh	r3, [r7, #24]
 80103ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80103e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103e4:	82fb      	strh	r3, [r7, #22]
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	441a      	add	r2, r3
 80103f0:	8afb      	ldrh	r3, [r7, #22]
 80103f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010402:	b29b      	uxth	r3, r3
 8010404:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	b29b      	uxth	r3, r3
 8010414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801041c:	82bb      	strh	r3, [r7, #20]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	009b      	lsls	r3, r3, #2
 8010426:	441a      	add	r2, r3
 8010428:	8abb      	ldrh	r3, [r7, #20]
 801042a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801042e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801043a:	b29b      	uxth	r3, r3
 801043c:	8013      	strh	r3, [r2, #0]
 801043e:	e0a3      	b.n	8010588 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	881b      	ldrh	r3, [r3, #0]
 801044c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801044e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010454:	2b00      	cmp	r3, #0
 8010456:	d01b      	beq.n	8010490 <USB_DeactivateEndpoint+0x2d4>
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	4413      	add	r3, r2
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	b29b      	uxth	r3, r3
 8010466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801046a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801046e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	441a      	add	r2, r3
 801047a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801047c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801048c:	b29b      	uxth	r3, r3
 801048e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4413      	add	r3, r2
 801049a:	881b      	ldrh	r3, [r3, #0]
 801049c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801049e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80104a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01b      	beq.n	80104e0 <USB_DeactivateEndpoint+0x324>
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	4413      	add	r3, r2
 80104b2:	881b      	ldrh	r3, [r3, #0]
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104be:	853b      	strh	r3, [r7, #40]	; 0x28
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	441a      	add	r2, r3
 80104ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80104cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80104dc:	b29b      	uxth	r3, r3
 80104de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	4413      	add	r3, r2
 80104ea:	881b      	ldrh	r3, [r3, #0]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	441a      	add	r2, r3
 8010502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801050c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010514:	b29b      	uxth	r3, r3
 8010516:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	4413      	add	r3, r2
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	b29b      	uxth	r3, r3
 8010526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801052a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801052e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	441a      	add	r2, r3
 801053a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801053c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801054c:	b29b      	uxth	r3, r3
 801054e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	b29b      	uxth	r3, r3
 801055e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010566:	847b      	strh	r3, [r7, #34]	; 0x22
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	441a      	add	r2, r3
 8010572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801057c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010584:	b29b      	uxth	r3, r3
 8010586:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3734      	adds	r7, #52	; 0x34
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b0c2      	sub	sp, #264	; 0x108
 801059a:	af00      	add	r7, sp, #0
 801059c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105a4:	6018      	str	r0, [r3, #0]
 80105a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80105b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	785b      	ldrb	r3, [r3, #1]
 80105bc:	2b01      	cmp	r3, #1
 80105be:	f040 86b7 	bne.w	8011330 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80105c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	699a      	ldr	r2, [r3, #24]
 80105ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	691b      	ldr	r3, [r3, #16]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d908      	bls.n	80105f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80105de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80105ee:	e007      	b.n	8010600 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80105f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	699b      	ldr	r3, [r3, #24]
 80105fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	7b1b      	ldrb	r3, [r3, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d13a      	bne.n	8010686 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	6959      	ldr	r1, [r3, #20]
 801061c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	88da      	ldrh	r2, [r3, #6]
 8010628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801062c:	b29b      	uxth	r3, r3
 801062e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010632:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010636:	6800      	ldr	r0, [r0, #0]
 8010638:	f001 fc98 	bl	8011f6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801063c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	613b      	str	r3, [r7, #16]
 8010648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801064c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010656:	b29b      	uxth	r3, r3
 8010658:	461a      	mov	r2, r3
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	4413      	add	r3, r2
 801065e:	613b      	str	r3, [r7, #16]
 8010660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	00da      	lsls	r2, r3, #3
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	4413      	add	r3, r2
 8010672:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010676:	60fb      	str	r3, [r7, #12]
 8010678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801067c:	b29a      	uxth	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	801a      	strh	r2, [r3, #0]
 8010682:	f000 be1f 	b.w	80112c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801068a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	78db      	ldrb	r3, [r3, #3]
 8010692:	2b02      	cmp	r3, #2
 8010694:	f040 8462 	bne.w	8010f5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801069c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6a1a      	ldr	r2, [r3, #32]
 80106a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	691b      	ldr	r3, [r3, #16]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	f240 83df 	bls.w	8010e74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80106b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	4413      	add	r3, r2
 80106d0:	881b      	ldrh	r3, [r3, #0]
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80106e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	441a      	add	r2, r3
 80106fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80106fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010706:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801070e:	b29b      	uxth	r3, r3
 8010710:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	6a1a      	ldr	r2, [r3, #32]
 801071e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010722:	1ad2      	subs	r2, r2, r3
 8010724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801073e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	881b      	ldrh	r3, [r3, #0]
 801074c:	b29b      	uxth	r3, r3
 801074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010752:	2b00      	cmp	r3, #0
 8010754:	f000 81c7 	beq.w	8010ae6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	633b      	str	r3, [r7, #48]	; 0x30
 8010764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	785b      	ldrb	r3, [r3, #1]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d177      	bne.n	8010864 <USB_EPStartXfer+0x2ce>
 8010774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801078e:	b29b      	uxth	r3, r3
 8010790:	461a      	mov	r2, r3
 8010792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010794:	4413      	add	r3, r2
 8010796:	62bb      	str	r3, [r7, #40]	; 0x28
 8010798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801079c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	00da      	lsls	r2, r3, #3
 80107a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a8:	4413      	add	r3, r2
 80107aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107ae:	627b      	str	r3, [r7, #36]	; 0x24
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b2:	881b      	ldrh	r3, [r3, #0]
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	801a      	strh	r2, [r3, #0]
 80107c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107c4:	2b3e      	cmp	r3, #62	; 0x3e
 80107c6:	d921      	bls.n	801080c <USB_EPStartXfer+0x276>
 80107c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107cc:	095b      	lsrs	r3, r3, #5
 80107ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80107d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107d6:	f003 031f 	and.w	r3, r3, #31
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d104      	bne.n	80107e8 <USB_EPStartXfer+0x252>
 80107de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80107e2:	3b01      	subs	r3, #1
 80107e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ea:	881b      	ldrh	r3, [r3, #0]
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	029b      	lsls	r3, r3, #10
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	4313      	orrs	r3, r2
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010804:	b29a      	uxth	r2, r3
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010808:	801a      	strh	r2, [r3, #0]
 801080a:	e050      	b.n	80108ae <USB_EPStartXfer+0x318>
 801080c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10a      	bne.n	801082a <USB_EPStartXfer+0x294>
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	b29b      	uxth	r3, r3
 801081a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801081e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010822:	b29a      	uxth	r2, r3
 8010824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010826:	801a      	strh	r2, [r3, #0]
 8010828:	e041      	b.n	80108ae <USB_EPStartXfer+0x318>
 801082a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801082e:	085b      	lsrs	r3, r3, #1
 8010830:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010838:	f003 0301 	and.w	r3, r3, #1
 801083c:	2b00      	cmp	r3, #0
 801083e:	d004      	beq.n	801084a <USB_EPStartXfer+0x2b4>
 8010840:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010844:	3301      	adds	r3, #1
 8010846:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	881b      	ldrh	r3, [r3, #0]
 801084e:	b29a      	uxth	r2, r3
 8010850:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010854:	b29b      	uxth	r3, r3
 8010856:	029b      	lsls	r3, r3, #10
 8010858:	b29b      	uxth	r3, r3
 801085a:	4313      	orrs	r3, r2
 801085c:	b29a      	uxth	r2, r3
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010860:	801a      	strh	r2, [r3, #0]
 8010862:	e024      	b.n	80108ae <USB_EPStartXfer+0x318>
 8010864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	785b      	ldrb	r3, [r3, #1]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d11c      	bne.n	80108ae <USB_EPStartXfer+0x318>
 8010874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010882:	b29b      	uxth	r3, r3
 8010884:	461a      	mov	r2, r3
 8010886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010888:	4413      	add	r3, r2
 801088a:	633b      	str	r3, [r7, #48]	; 0x30
 801088c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	00da      	lsls	r2, r3, #3
 801089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089c:	4413      	add	r3, r2
 801089e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80108a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108a8:	b29a      	uxth	r2, r3
 80108aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80108ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	895b      	ldrh	r3, [r3, #10]
 80108ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80108be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	6959      	ldr	r1, [r3, #20]
 80108ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80108d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80108d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80108dc:	6800      	ldr	r0, [r0, #0]
 80108de:	f001 fb45 	bl	8011f6c <USB_WritePMA>
            ep->xfer_buff += len;
 80108e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	695a      	ldr	r2, [r3, #20]
 80108ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108f2:	441a      	add	r2, r3
 80108f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6a1a      	ldr	r2, [r3, #32]
 801090c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	429a      	cmp	r2, r3
 801091a:	d90f      	bls.n	801093c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 801091c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	6a1a      	ldr	r2, [r3, #32]
 8010928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801092c:	1ad2      	subs	r2, r2, r3
 801092e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	621a      	str	r2, [r3, #32]
 801093a:	e00e      	b.n	801095a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801093c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	6a1b      	ldr	r3, [r3, #32]
 8010948:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801094c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2200      	movs	r2, #0
 8010958:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	785b      	ldrb	r3, [r3, #1]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d177      	bne.n	8010a5a <USB_EPStartXfer+0x4c4>
 801096a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801096e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	61bb      	str	r3, [r7, #24]
 8010976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010984:	b29b      	uxth	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	4413      	add	r3, r2
 801098c:	61bb      	str	r3, [r7, #24]
 801098e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	00da      	lsls	r2, r3, #3
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	4413      	add	r3, r2
 80109a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109a4:	617b      	str	r3, [r7, #20]
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	881b      	ldrh	r3, [r3, #0]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109b0:	b29a      	uxth	r2, r3
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	801a      	strh	r2, [r3, #0]
 80109b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109ba:	2b3e      	cmp	r3, #62	; 0x3e
 80109bc:	d921      	bls.n	8010a02 <USB_EPStartXfer+0x46c>
 80109be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109c2:	095b      	lsrs	r3, r3, #5
 80109c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80109c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109cc:	f003 031f 	and.w	r3, r3, #31
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d104      	bne.n	80109de <USB_EPStartXfer+0x448>
 80109d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109d8:	3b01      	subs	r3, #1
 80109da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	029b      	lsls	r3, r3, #10
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	4313      	orrs	r3, r2
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109fa:	b29a      	uxth	r2, r3
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	801a      	strh	r2, [r3, #0]
 8010a00:	e056      	b.n	8010ab0 <USB_EPStartXfer+0x51a>
 8010a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10a      	bne.n	8010a20 <USB_EPStartXfer+0x48a>
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	881b      	ldrh	r3, [r3, #0]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	801a      	strh	r2, [r3, #0]
 8010a1e:	e047      	b.n	8010ab0 <USB_EPStartXfer+0x51a>
 8010a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a24:	085b      	lsrs	r3, r3, #1
 8010a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a2e:	f003 0301 	and.w	r3, r3, #1
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <USB_EPStartXfer+0x4aa>
 8010a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	029b      	lsls	r3, r3, #10
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	4313      	orrs	r3, r2
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	801a      	strh	r2, [r3, #0]
 8010a58:	e02a      	b.n	8010ab0 <USB_EPStartXfer+0x51a>
 8010a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	785b      	ldrb	r3, [r3, #1]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d122      	bne.n	8010ab0 <USB_EPStartXfer+0x51a>
 8010a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	623b      	str	r3, [r7, #32]
 8010a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	461a      	mov	r2, r3
 8010a88:	6a3b      	ldr	r3, [r7, #32]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	623b      	str	r3, [r7, #32]
 8010a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	00da      	lsls	r2, r3, #3
 8010a9c:	6a3b      	ldr	r3, [r7, #32]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010aa4:	61fb      	str	r3, [r7, #28]
 8010aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	891b      	ldrh	r3, [r3, #8]
 8010abc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	6959      	ldr	r1, [r3, #20]
 8010acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010ad6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010ada:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	f001 fa44 	bl	8011f6c <USB_WritePMA>
 8010ae4:	e3ee      	b.n	80112c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	785b      	ldrb	r3, [r3, #1]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d177      	bne.n	8010be6 <USB_EPStartXfer+0x650>
 8010af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	461a      	mov	r2, r3
 8010b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b16:	4413      	add	r3, r2
 8010b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	00da      	lsls	r2, r3, #3
 8010b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010b30:	647b      	str	r3, [r7, #68]	; 0x44
 8010b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b40:	801a      	strh	r2, [r3, #0]
 8010b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b46:	2b3e      	cmp	r3, #62	; 0x3e
 8010b48:	d921      	bls.n	8010b8e <USB_EPStartXfer+0x5f8>
 8010b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b4e:	095b      	lsrs	r3, r3, #5
 8010b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b58:	f003 031f 	and.w	r3, r3, #31
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d104      	bne.n	8010b6a <USB_EPStartXfer+0x5d4>
 8010b60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010b64:	3b01      	subs	r3, #1
 8010b66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	029b      	lsls	r3, r3, #10
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b8a:	801a      	strh	r2, [r3, #0]
 8010b8c:	e056      	b.n	8010c3c <USB_EPStartXfer+0x6a6>
 8010b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10a      	bne.n	8010bac <USB_EPStartXfer+0x616>
 8010b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ba8:	801a      	strh	r2, [r3, #0]
 8010baa:	e047      	b.n	8010c3c <USB_EPStartXfer+0x6a6>
 8010bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bb0:	085b      	lsrs	r3, r3, #1
 8010bb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bba:	f003 0301 	and.w	r3, r3, #1
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d004      	beq.n	8010bcc <USB_EPStartXfer+0x636>
 8010bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010bc6:	3301      	adds	r3, #1
 8010bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	029b      	lsls	r3, r3, #10
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010be2:	801a      	strh	r2, [r3, #0]
 8010be4:	e02a      	b.n	8010c3c <USB_EPStartXfer+0x6a6>
 8010be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	785b      	ldrb	r3, [r3, #1]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d122      	bne.n	8010c3c <USB_EPStartXfer+0x6a6>
 8010bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	653b      	str	r3, [r7, #80]	; 0x50
 8010c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	461a      	mov	r2, r3
 8010c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c16:	4413      	add	r3, r2
 8010c18:	653b      	str	r3, [r7, #80]	; 0x50
 8010c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	00da      	lsls	r2, r3, #3
 8010c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c2a:	4413      	add	r3, r2
 8010c2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	891b      	ldrh	r3, [r3, #8]
 8010c48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	6959      	ldr	r1, [r3, #20]
 8010c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010c62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010c66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010c6a:	6800      	ldr	r0, [r0, #0]
 8010c6c:	f001 f97e 	bl	8011f6c <USB_WritePMA>
            ep->xfer_buff += len;
 8010c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	695a      	ldr	r2, [r3, #20]
 8010c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c80:	441a      	add	r2, r3
 8010c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	6a1a      	ldr	r2, [r3, #32]
 8010c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d90f      	bls.n	8010cca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	6a1a      	ldr	r2, [r3, #32]
 8010cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cba:	1ad2      	subs	r2, r2, r3
 8010cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	621a      	str	r2, [r3, #32]
 8010cc8:	e00e      	b.n	8010ce8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8010cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	785b      	ldrb	r3, [r3, #1]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d177      	bne.n	8010df4 <USB_EPStartXfer+0x85e>
 8010d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	461a      	mov	r2, r3
 8010d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d24:	4413      	add	r3, r2
 8010d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	00da      	lsls	r2, r3, #3
 8010d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d38:	4413      	add	r3, r2
 8010d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d42:	881b      	ldrh	r3, [r3, #0]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4e:	801a      	strh	r2, [r3, #0]
 8010d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d54:	2b3e      	cmp	r3, #62	; 0x3e
 8010d56:	d921      	bls.n	8010d9c <USB_EPStartXfer+0x806>
 8010d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d5c:	095b      	lsrs	r3, r3, #5
 8010d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d66:	f003 031f 	and.w	r3, r3, #31
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d104      	bne.n	8010d78 <USB_EPStartXfer+0x7e2>
 8010d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d72:	3b01      	subs	r3, #1
 8010d74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	881b      	ldrh	r3, [r3, #0]
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	029b      	lsls	r3, r3, #10
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d98:	801a      	strh	r2, [r3, #0]
 8010d9a:	e050      	b.n	8010e3e <USB_EPStartXfer+0x8a8>
 8010d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d10a      	bne.n	8010dba <USB_EPStartXfer+0x824>
 8010da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db6:	801a      	strh	r2, [r3, #0]
 8010db8:	e041      	b.n	8010e3e <USB_EPStartXfer+0x8a8>
 8010dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dbe:	085b      	lsrs	r3, r3, #1
 8010dc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d004      	beq.n	8010dda <USB_EPStartXfer+0x844>
 8010dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ddc:	881b      	ldrh	r3, [r3, #0]
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	029b      	lsls	r3, r3, #10
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	4313      	orrs	r3, r2
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df0:	801a      	strh	r2, [r3, #0]
 8010df2:	e024      	b.n	8010e3e <USB_EPStartXfer+0x8a8>
 8010df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	785b      	ldrb	r3, [r3, #1]
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d11c      	bne.n	8010e3e <USB_EPStartXfer+0x8a8>
 8010e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	461a      	mov	r2, r3
 8010e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e18:	4413      	add	r3, r2
 8010e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8010e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	00da      	lsls	r2, r3, #3
 8010e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e2c:	4413      	add	r3, r2
 8010e2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	895b      	ldrh	r3, [r3, #10]
 8010e4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	6959      	ldr	r1, [r3, #20]
 8010e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010e64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010e68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010e6c:	6800      	ldr	r0, [r0, #0]
 8010e6e:	f001 f87d 	bl	8011f6c <USB_WritePMA>
 8010e72:	e227      	b.n	80112c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	4413      	add	r3, r2
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eaa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	441a      	add	r2, r3
 8010ec8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	461a      	mov	r2, r3
 8010efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f00:	4413      	add	r3, r2
 8010f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	00da      	lsls	r2, r3, #3
 8010f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f14:	4413      	add	r3, r2
 8010f16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	891b      	ldrh	r3, [r3, #8]
 8010f32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	6959      	ldr	r1, [r3, #20]
 8010f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f54:	6800      	ldr	r0, [r0, #0]
 8010f56:	f001 f809 	bl	8011f6c <USB_WritePMA>
 8010f5a:	e1b3      	b.n	80112c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	6a1a      	ldr	r2, [r3, #32]
 8010f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f6c:	1ad2      	subs	r2, r2, r3
 8010f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	4413      	add	r3, r2
 8010f94:	881b      	ldrh	r3, [r3, #0]
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 80c6 	beq.w	801112e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	673b      	str	r3, [r7, #112]	; 0x70
 8010fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	785b      	ldrb	r3, [r3, #1]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d177      	bne.n	80110ae <USB_EPStartXfer+0xb18>
 8010fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	461a      	mov	r2, r3
 8010fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fde:	4413      	add	r3, r2
 8010fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	00da      	lsls	r2, r3, #3
 8010ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8010ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011004:	b29a      	uxth	r2, r3
 8011006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011008:	801a      	strh	r2, [r3, #0]
 801100a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801100e:	2b3e      	cmp	r3, #62	; 0x3e
 8011010:	d921      	bls.n	8011056 <USB_EPStartXfer+0xac0>
 8011012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011016:	095b      	lsrs	r3, r3, #5
 8011018:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801101c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011020:	f003 031f 	and.w	r3, r3, #31
 8011024:	2b00      	cmp	r3, #0
 8011026:	d104      	bne.n	8011032 <USB_EPStartXfer+0xa9c>
 8011028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801102c:	3b01      	subs	r3, #1
 801102e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	b29a      	uxth	r2, r3
 8011038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801103c:	b29b      	uxth	r3, r3
 801103e:	029b      	lsls	r3, r3, #10
 8011040:	b29b      	uxth	r3, r3
 8011042:	4313      	orrs	r3, r2
 8011044:	b29b      	uxth	r3, r3
 8011046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801104a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801104e:	b29a      	uxth	r2, r3
 8011050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011052:	801a      	strh	r2, [r3, #0]
 8011054:	e050      	b.n	80110f8 <USB_EPStartXfer+0xb62>
 8011056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801105a:	2b00      	cmp	r3, #0
 801105c:	d10a      	bne.n	8011074 <USB_EPStartXfer+0xade>
 801105e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	b29b      	uxth	r3, r3
 8011064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801106c:	b29a      	uxth	r2, r3
 801106e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011070:	801a      	strh	r2, [r3, #0]
 8011072:	e041      	b.n	80110f8 <USB_EPStartXfer+0xb62>
 8011074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011078:	085b      	lsrs	r3, r3, #1
 801107a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801107e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011082:	f003 0301 	and.w	r3, r3, #1
 8011086:	2b00      	cmp	r3, #0
 8011088:	d004      	beq.n	8011094 <USB_EPStartXfer+0xafe>
 801108a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801108e:	3301      	adds	r3, #1
 8011090:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011096:	881b      	ldrh	r3, [r3, #0]
 8011098:	b29a      	uxth	r2, r3
 801109a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801109e:	b29b      	uxth	r3, r3
 80110a0:	029b      	lsls	r3, r3, #10
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4313      	orrs	r3, r2
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110aa:	801a      	strh	r2, [r3, #0]
 80110ac:	e024      	b.n	80110f8 <USB_EPStartXfer+0xb62>
 80110ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	785b      	ldrb	r3, [r3, #1]
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d11c      	bne.n	80110f8 <USB_EPStartXfer+0xb62>
 80110be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	461a      	mov	r2, r3
 80110d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110d2:	4413      	add	r3, r2
 80110d4:	673b      	str	r3, [r7, #112]	; 0x70
 80110d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	00da      	lsls	r2, r3, #3
 80110e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110e6:	4413      	add	r3, r2
 80110e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80110ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80110ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80110f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	895b      	ldrh	r3, [r3, #10]
 8011104:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801110c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	6959      	ldr	r1, [r3, #20]
 8011114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011118:	b29b      	uxth	r3, r3
 801111a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801111e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011122:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011126:	6800      	ldr	r0, [r0, #0]
 8011128:	f000 ff20 	bl	8011f6c <USB_WritePMA>
 801112c:	e0ca      	b.n	80112c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801112e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	785b      	ldrb	r3, [r3, #1]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d177      	bne.n	801122e <USB_EPStartXfer+0xc98>
 801113e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	67fb      	str	r3, [r7, #124]	; 0x7c
 801114a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801114e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011158:	b29b      	uxth	r3, r3
 801115a:	461a      	mov	r2, r3
 801115c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801115e:	4413      	add	r3, r2
 8011160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	00da      	lsls	r2, r3, #3
 8011170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011172:	4413      	add	r3, r2
 8011174:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011178:	67bb      	str	r3, [r7, #120]	; 0x78
 801117a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	b29b      	uxth	r3, r3
 8011180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011184:	b29a      	uxth	r2, r3
 8011186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011188:	801a      	strh	r2, [r3, #0]
 801118a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801118e:	2b3e      	cmp	r3, #62	; 0x3e
 8011190:	d921      	bls.n	80111d6 <USB_EPStartXfer+0xc40>
 8011192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011196:	095b      	lsrs	r3, r3, #5
 8011198:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801119c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111a0:	f003 031f 	and.w	r3, r3, #31
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d104      	bne.n	80111b2 <USB_EPStartXfer+0xc1c>
 80111a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111ac:	3b01      	subs	r3, #1
 80111ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80111b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111b4:	881b      	ldrh	r3, [r3, #0]
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111bc:	b29b      	uxth	r3, r3
 80111be:	029b      	lsls	r3, r3, #10
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	4313      	orrs	r3, r2
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111d2:	801a      	strh	r2, [r3, #0]
 80111d4:	e05c      	b.n	8011290 <USB_EPStartXfer+0xcfa>
 80111d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d10a      	bne.n	80111f4 <USB_EPStartXfer+0xc5e>
 80111de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111e0:	881b      	ldrh	r3, [r3, #0]
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111f0:	801a      	strh	r2, [r3, #0]
 80111f2:	e04d      	b.n	8011290 <USB_EPStartXfer+0xcfa>
 80111f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111f8:	085b      	lsrs	r3, r3, #1
 80111fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80111fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	2b00      	cmp	r3, #0
 8011208:	d004      	beq.n	8011214 <USB_EPStartXfer+0xc7e>
 801120a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801120e:	3301      	adds	r3, #1
 8011210:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011216:	881b      	ldrh	r3, [r3, #0]
 8011218:	b29a      	uxth	r2, r3
 801121a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801121e:	b29b      	uxth	r3, r3
 8011220:	029b      	lsls	r3, r3, #10
 8011222:	b29b      	uxth	r3, r3
 8011224:	4313      	orrs	r3, r2
 8011226:	b29a      	uxth	r2, r3
 8011228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801122a:	801a      	strh	r2, [r3, #0]
 801122c:	e030      	b.n	8011290 <USB_EPStartXfer+0xcfa>
 801122e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	785b      	ldrb	r3, [r3, #1]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d128      	bne.n	8011290 <USB_EPStartXfer+0xcfa>
 801123e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801124c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801125a:	b29b      	uxth	r3, r3
 801125c:	461a      	mov	r2, r3
 801125e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011262:	4413      	add	r3, r2
 8011264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	00da      	lsls	r2, r3, #3
 8011276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801127a:	4413      	add	r3, r2
 801127c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011288:	b29a      	uxth	r2, r3
 801128a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801128e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	891b      	ldrh	r3, [r3, #8]
 801129c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	6959      	ldr	r1, [r3, #20]
 80112ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112be:	6800      	ldr	r0, [r0, #0]
 80112c0:	f000 fe54 	bl	8011f6c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80112c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4413      	add	r3, r2
 80112de:	881b      	ldrh	r3, [r3, #0]
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112ea:	817b      	strh	r3, [r7, #10]
 80112ec:	897b      	ldrh	r3, [r7, #10]
 80112ee:	f083 0310 	eor.w	r3, r3, #16
 80112f2:	817b      	strh	r3, [r7, #10]
 80112f4:	897b      	ldrh	r3, [r7, #10]
 80112f6:	f083 0320 	eor.w	r3, r3, #32
 80112fa:	817b      	strh	r3, [r7, #10]
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	441a      	add	r2, r3
 8011316:	897b      	ldrh	r3, [r7, #10]
 8011318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801131c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011328:	b29b      	uxth	r3, r3
 801132a:	8013      	strh	r3, [r2, #0]
 801132c:	f000 bcde 	b.w	8011cec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	7b1b      	ldrb	r3, [r3, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	f040 80bb 	bne.w	80114b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	699a      	ldr	r2, [r3, #24]
 801134e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	429a      	cmp	r2, r3
 801135c:	d917      	bls.n	801138e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801135e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	691b      	ldr	r3, [r3, #16]
 801136a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801136e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	699a      	ldr	r2, [r3, #24]
 801137a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801137e:	1ad2      	subs	r2, r2, r3
 8011380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	619a      	str	r2, [r3, #24]
 801138c:	e00e      	b.n	80113ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 801138e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	699b      	ldr	r3, [r3, #24]
 801139a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801139e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2200      	movs	r2, #0
 80113aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80113ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80113ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	461a      	mov	r2, r3
 80113cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80113d0:	4413      	add	r3, r2
 80113d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80113d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	00da      	lsls	r2, r3, #3
 80113e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80113e8:	4413      	add	r3, r2
 80113ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80113ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80113f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113f6:	881b      	ldrh	r3, [r3, #0]
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80113fe:	b29a      	uxth	r2, r3
 8011400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011404:	801a      	strh	r2, [r3, #0]
 8011406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801140a:	2b3e      	cmp	r3, #62	; 0x3e
 801140c:	d924      	bls.n	8011458 <USB_EPStartXfer+0xec2>
 801140e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011412:	095b      	lsrs	r3, r3, #5
 8011414:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801141c:	f003 031f 	and.w	r3, r3, #31
 8011420:	2b00      	cmp	r3, #0
 8011422:	d104      	bne.n	801142e <USB_EPStartXfer+0xe98>
 8011424:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011428:	3b01      	subs	r3, #1
 801142a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801142e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	b29a      	uxth	r2, r3
 8011436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801143a:	b29b      	uxth	r3, r3
 801143c:	029b      	lsls	r3, r3, #10
 801143e:	b29b      	uxth	r3, r3
 8011440:	4313      	orrs	r3, r2
 8011442:	b29b      	uxth	r3, r3
 8011444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801144c:	b29a      	uxth	r2, r3
 801144e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011452:	801a      	strh	r2, [r3, #0]
 8011454:	f000 bc10 	b.w	8011c78 <USB_EPStartXfer+0x16e2>
 8011458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10c      	bne.n	801147a <USB_EPStartXfer+0xee4>
 8011460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011464:	881b      	ldrh	r3, [r3, #0]
 8011466:	b29b      	uxth	r3, r3
 8011468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801146c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011470:	b29a      	uxth	r2, r3
 8011472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011476:	801a      	strh	r2, [r3, #0]
 8011478:	e3fe      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
 801147a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801147e:	085b      	lsrs	r3, r3, #1
 8011480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b00      	cmp	r3, #0
 801148e:	d004      	beq.n	801149a <USB_EPStartXfer+0xf04>
 8011490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011494:	3301      	adds	r3, #1
 8011496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801149a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801149e:	881b      	ldrh	r3, [r3, #0]
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	029b      	lsls	r3, r3, #10
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	4313      	orrs	r3, r2
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114b4:	801a      	strh	r2, [r3, #0]
 80114b6:	e3df      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80114b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	78db      	ldrb	r3, [r3, #3]
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	f040 8218 	bne.w	80118fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80114ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	785b      	ldrb	r3, [r3, #1]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f040 809d 	bne.w	8011616 <USB_EPStartXfer+0x1080>
 80114dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80114ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	461a      	mov	r2, r3
 80114fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011500:	4413      	add	r3, r2
 8011502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801150a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	00da      	lsls	r2, r3, #3
 8011514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011518:	4413      	add	r3, r2
 801151a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801151e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011526:	881b      	ldrh	r3, [r3, #0]
 8011528:	b29b      	uxth	r3, r3
 801152a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801152e:	b29a      	uxth	r2, r3
 8011530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011534:	801a      	strh	r2, [r3, #0]
 8011536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	691b      	ldr	r3, [r3, #16]
 8011542:	2b3e      	cmp	r3, #62	; 0x3e
 8011544:	d92b      	bls.n	801159e <USB_EPStartXfer+0x1008>
 8011546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801154a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	691b      	ldr	r3, [r3, #16]
 8011552:	095b      	lsrs	r3, r3, #5
 8011554:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801155c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	691b      	ldr	r3, [r3, #16]
 8011564:	f003 031f 	and.w	r3, r3, #31
 8011568:	2b00      	cmp	r3, #0
 801156a:	d104      	bne.n	8011576 <USB_EPStartXfer+0xfe0>
 801156c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011570:	3b01      	subs	r3, #1
 8011572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801157a:	881b      	ldrh	r3, [r3, #0]
 801157c:	b29a      	uxth	r2, r3
 801157e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011582:	b29b      	uxth	r3, r3
 8011584:	029b      	lsls	r3, r3, #10
 8011586:	b29b      	uxth	r3, r3
 8011588:	4313      	orrs	r3, r2
 801158a:	b29b      	uxth	r3, r3
 801158c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011594:	b29a      	uxth	r2, r3
 8011596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801159a:	801a      	strh	r2, [r3, #0]
 801159c:	e070      	b.n	8011680 <USB_EPStartXfer+0x10ea>
 801159e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	691b      	ldr	r3, [r3, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d10c      	bne.n	80115c8 <USB_EPStartXfer+0x1032>
 80115ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115b2:	881b      	ldrh	r3, [r3, #0]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115be:	b29a      	uxth	r2, r3
 80115c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115c4:	801a      	strh	r2, [r3, #0]
 80115c6:	e05b      	b.n	8011680 <USB_EPStartXfer+0x10ea>
 80115c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	085b      	lsrs	r3, r3, #1
 80115d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80115da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	f003 0301 	and.w	r3, r3, #1
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d004      	beq.n	80115f8 <USB_EPStartXfer+0x1062>
 80115ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115f2:	3301      	adds	r3, #1
 80115f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80115f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115fc:	881b      	ldrh	r3, [r3, #0]
 80115fe:	b29a      	uxth	r2, r3
 8011600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011604:	b29b      	uxth	r3, r3
 8011606:	029b      	lsls	r3, r3, #10
 8011608:	b29b      	uxth	r3, r3
 801160a:	4313      	orrs	r3, r2
 801160c:	b29a      	uxth	r2, r3
 801160e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011612:	801a      	strh	r2, [r3, #0]
 8011614:	e034      	b.n	8011680 <USB_EPStartXfer+0x10ea>
 8011616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	785b      	ldrb	r3, [r3, #1]
 8011622:	2b01      	cmp	r3, #1
 8011624:	d12c      	bne.n	8011680 <USB_EPStartXfer+0x10ea>
 8011626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801162a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011642:	b29b      	uxth	r3, r3
 8011644:	461a      	mov	r2, r3
 8011646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801164a:	4413      	add	r3, r2
 801164c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	00da      	lsls	r2, r3, #3
 801165e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011662:	4413      	add	r3, r2
 8011664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801166c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	b29a      	uxth	r2, r3
 801167a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801167e:	801a      	strh	r2, [r3, #0]
 8011680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801168e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	785b      	ldrb	r3, [r3, #1]
 801169a:	2b00      	cmp	r3, #0
 801169c:	f040 809d 	bne.w	80117da <USB_EPStartXfer+0x1244>
 80116a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80116ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116bc:	b29b      	uxth	r3, r3
 80116be:	461a      	mov	r2, r3
 80116c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80116c4:	4413      	add	r3, r2
 80116c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80116ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	00da      	lsls	r2, r3, #3
 80116d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80116dc:	4413      	add	r3, r2
 80116de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80116e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80116e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116ea:	881b      	ldrh	r3, [r3, #0]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116f8:	801a      	strh	r2, [r3, #0]
 80116fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	691b      	ldr	r3, [r3, #16]
 8011706:	2b3e      	cmp	r3, #62	; 0x3e
 8011708:	d92b      	bls.n	8011762 <USB_EPStartXfer+0x11cc>
 801170a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	095b      	lsrs	r3, r3, #5
 8011718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801171c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	f003 031f 	and.w	r3, r3, #31
 801172c:	2b00      	cmp	r3, #0
 801172e:	d104      	bne.n	801173a <USB_EPStartXfer+0x11a4>
 8011730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011734:	3b01      	subs	r3, #1
 8011736:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801173a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	b29a      	uxth	r2, r3
 8011742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011746:	b29b      	uxth	r3, r3
 8011748:	029b      	lsls	r3, r3, #10
 801174a:	b29b      	uxth	r3, r3
 801174c:	4313      	orrs	r3, r2
 801174e:	b29b      	uxth	r3, r3
 8011750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011758:	b29a      	uxth	r2, r3
 801175a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801175e:	801a      	strh	r2, [r3, #0]
 8011760:	e069      	b.n	8011836 <USB_EPStartXfer+0x12a0>
 8011762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d10c      	bne.n	801178c <USB_EPStartXfer+0x11f6>
 8011772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	b29b      	uxth	r3, r3
 801177a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801177e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011782:	b29a      	uxth	r2, r3
 8011784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011788:	801a      	strh	r2, [r3, #0]
 801178a:	e054      	b.n	8011836 <USB_EPStartXfer+0x12a0>
 801178c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	085b      	lsrs	r3, r3, #1
 801179a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801179e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d004      	beq.n	80117bc <USB_EPStartXfer+0x1226>
 80117b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117b6:	3301      	adds	r3, #1
 80117b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80117bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117c0:	881b      	ldrh	r3, [r3, #0]
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	029b      	lsls	r3, r3, #10
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	4313      	orrs	r3, r2
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117d6:	801a      	strh	r2, [r3, #0]
 80117d8:	e02d      	b.n	8011836 <USB_EPStartXfer+0x12a0>
 80117da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	785b      	ldrb	r3, [r3, #1]
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d125      	bne.n	8011836 <USB_EPStartXfer+0x12a0>
 80117ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	461a      	mov	r2, r3
 80117fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011800:	4413      	add	r3, r2
 8011802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801180a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	00da      	lsls	r2, r3, #3
 8011814:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011818:	4413      	add	r3, r2
 801181a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801181e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	691b      	ldr	r3, [r3, #16]
 801182e:	b29a      	uxth	r2, r3
 8011830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011834:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801183a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	69db      	ldr	r3, [r3, #28]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f000 8218 	beq.w	8011c78 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801184c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4413      	add	r3, r2
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011868:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801186c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011870:	2b00      	cmp	r3, #0
 8011872:	d005      	beq.n	8011880 <USB_EPStartXfer+0x12ea>
 8011874:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801187c:	2b00      	cmp	r3, #0
 801187e:	d10d      	bne.n	801189c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011880:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011888:	2b00      	cmp	r3, #0
 801188a:	f040 81f5 	bne.w	8011c78 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801188e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011896:	2b00      	cmp	r3, #0
 8011898:	f040 81ee 	bne.w	8011c78 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801189c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	4413      	add	r3, r2
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80118c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	441a      	add	r2, r3
 80118e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80118e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	8013      	strh	r3, [r2, #0]
 80118f8:	e1be      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80118fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	78db      	ldrb	r3, [r3, #3]
 8011906:	2b01      	cmp	r3, #1
 8011908:	f040 81b4 	bne.w	8011c74 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801190c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	699a      	ldr	r2, [r3, #24]
 8011918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801191c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	429a      	cmp	r2, r3
 8011926:	d917      	bls.n	8011958 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801192c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801193c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	699a      	ldr	r2, [r3, #24]
 8011944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011948:	1ad2      	subs	r2, r2, r3
 801194a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801194e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	619a      	str	r2, [r3, #24]
 8011956:	e00e      	b.n	8011976 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801195c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	699b      	ldr	r3, [r3, #24]
 8011964:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801196c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2200      	movs	r2, #0
 8011974:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801197a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	785b      	ldrb	r3, [r3, #1]
 8011982:	2b00      	cmp	r3, #0
 8011984:	f040 8085 	bne.w	8011a92 <USB_EPStartXfer+0x14fc>
 8011988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801198c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801199a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	461a      	mov	r2, r3
 80119a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80119ac:	4413      	add	r3, r2
 80119ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80119b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	00da      	lsls	r2, r3, #3
 80119c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80119c4:	4413      	add	r3, r2
 80119c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80119ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80119ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80119d2:	881b      	ldrh	r3, [r3, #0]
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119da:	b29a      	uxth	r2, r3
 80119dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80119e0:	801a      	strh	r2, [r3, #0]
 80119e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119e6:	2b3e      	cmp	r3, #62	; 0x3e
 80119e8:	d923      	bls.n	8011a32 <USB_EPStartXfer+0x149c>
 80119ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119ee:	095b      	lsrs	r3, r3, #5
 80119f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80119f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119f8:	f003 031f 	and.w	r3, r3, #31
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d104      	bne.n	8011a0a <USB_EPStartXfer+0x1474>
 8011a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a04:	3b01      	subs	r3, #1
 8011a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a0e:	881b      	ldrh	r3, [r3, #0]
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	029b      	lsls	r3, r3, #10
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a28:	b29a      	uxth	r2, r3
 8011a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a2e:	801a      	strh	r2, [r3, #0]
 8011a30:	e060      	b.n	8011af4 <USB_EPStartXfer+0x155e>
 8011a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d10c      	bne.n	8011a54 <USB_EPStartXfer+0x14be>
 8011a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a50:	801a      	strh	r2, [r3, #0]
 8011a52:	e04f      	b.n	8011af4 <USB_EPStartXfer+0x155e>
 8011a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a58:	085b      	lsrs	r3, r3, #1
 8011a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a62:	f003 0301 	and.w	r3, r3, #1
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <USB_EPStartXfer+0x14de>
 8011a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a6e:	3301      	adds	r3, #1
 8011a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	029b      	lsls	r3, r3, #10
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	4313      	orrs	r3, r2
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a8e:	801a      	strh	r2, [r3, #0]
 8011a90:	e030      	b.n	8011af4 <USB_EPStartXfer+0x155e>
 8011a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	785b      	ldrb	r3, [r3, #1]
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d128      	bne.n	8011af4 <USB_EPStartXfer+0x155e>
 8011aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011ac6:	4413      	add	r3, r2
 8011ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	00da      	lsls	r2, r3, #3
 8011ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011ade:	4413      	add	r3, r2
 8011ae0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011af2:	801a      	strh	r2, [r3, #0]
 8011af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	785b      	ldrb	r3, [r3, #1]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f040 8085 	bne.w	8011c1e <USB_EPStartXfer+0x1688>
 8011b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	461a      	mov	r2, r3
 8011b34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011b38:	4413      	add	r3, r2
 8011b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	00da      	lsls	r2, r3, #3
 8011b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011b50:	4413      	add	r3, r2
 8011b52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b5e:	881b      	ldrh	r3, [r3, #0]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b6c:	801a      	strh	r2, [r3, #0]
 8011b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b72:	2b3e      	cmp	r3, #62	; 0x3e
 8011b74:	d923      	bls.n	8011bbe <USB_EPStartXfer+0x1628>
 8011b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b7a:	095b      	lsrs	r3, r3, #5
 8011b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b84:	f003 031f 	and.w	r3, r3, #31
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d104      	bne.n	8011b96 <USB_EPStartXfer+0x1600>
 8011b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b90:	3b01      	subs	r3, #1
 8011b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b9a:	881b      	ldrh	r3, [r3, #0]
 8011b9c:	b29a      	uxth	r2, r3
 8011b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	029b      	lsls	r3, r3, #10
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bba:	801a      	strh	r2, [r3, #0]
 8011bbc:	e05c      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
 8011bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d10c      	bne.n	8011be0 <USB_EPStartXfer+0x164a>
 8011bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bdc:	801a      	strh	r2, [r3, #0]
 8011bde:	e04b      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
 8011be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be4:	085b      	lsrs	r3, r3, #1
 8011be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bee:	f003 0301 	and.w	r3, r3, #1
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d004      	beq.n	8011c00 <USB_EPStartXfer+0x166a>
 8011bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	029b      	lsls	r3, r3, #10
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	4313      	orrs	r3, r2
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c1a:	801a      	strh	r2, [r3, #0]
 8011c1c:	e02c      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
 8011c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	785b      	ldrb	r3, [r3, #1]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d124      	bne.n	8011c78 <USB_EPStartXfer+0x16e2>
 8011c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c44:	4413      	add	r3, r2
 8011c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	00da      	lsls	r2, r3, #3
 8011c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c5c:	4413      	add	r3, r2
 8011c5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c70:	801a      	strh	r2, [r3, #0]
 8011c72:	e001      	b.n	8011c78 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011c74:	2301      	movs	r3, #1
 8011c76:	e03a      	b.n	8011cee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011ca2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011ca6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011caa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011cae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011cb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011cb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	441a      	add	r2, r3
 8011cd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	785b      	ldrb	r3, [r3, #1]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d020      	beq.n	8011d4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d20:	81bb      	strh	r3, [r7, #12]
 8011d22:	89bb      	ldrh	r3, [r7, #12]
 8011d24:	f083 0310 	eor.w	r3, r3, #16
 8011d28:	81bb      	strh	r3, [r7, #12]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	441a      	add	r2, r3
 8011d34:	89bb      	ldrh	r3, [r7, #12]
 8011d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	8013      	strh	r3, [r2, #0]
 8011d4a:	e01f      	b.n	8011d8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	4413      	add	r3, r2
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d62:	81fb      	strh	r3, [r7, #14]
 8011d64:	89fb      	ldrh	r3, [r7, #14]
 8011d66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011d6a:	81fb      	strh	r3, [r7, #14]
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	441a      	add	r2, r3
 8011d76:	89fb      	ldrh	r3, [r7, #14]
 8011d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3714      	adds	r7, #20
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr

08011d9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011d9a:	b480      	push	{r7}
 8011d9c:	b087      	sub	sp, #28
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	7b1b      	ldrb	r3, [r3, #12]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	f040 809d 	bne.w	8011ee8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	785b      	ldrb	r3, [r3, #1]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d04c      	beq.n	8011e50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4413      	add	r3, r2
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	823b      	strh	r3, [r7, #16]
 8011dc4:	8a3b      	ldrh	r3, [r7, #16]
 8011dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d01b      	beq.n	8011e06 <USB_EPClearStall+0x6c>
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	4413      	add	r3, r2
 8011dd8:	881b      	ldrh	r3, [r3, #0]
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011de4:	81fb      	strh	r3, [r7, #14]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	441a      	add	r2, r3
 8011df0:	89fb      	ldrh	r3, [r7, #14]
 8011df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011dfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	78db      	ldrb	r3, [r3, #3]
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d06c      	beq.n	8011ee8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	4413      	add	r3, r2
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e24:	81bb      	strh	r3, [r7, #12]
 8011e26:	89bb      	ldrh	r3, [r7, #12]
 8011e28:	f083 0320 	eor.w	r3, r3, #32
 8011e2c:	81bb      	strh	r3, [r7, #12]
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	441a      	add	r2, r3
 8011e38:	89bb      	ldrh	r3, [r7, #12]
 8011e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	8013      	strh	r3, [r2, #0]
 8011e4e:	e04b      	b.n	8011ee8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	4413      	add	r3, r2
 8011e5a:	881b      	ldrh	r3, [r3, #0]
 8011e5c:	82fb      	strh	r3, [r7, #22]
 8011e5e:	8afb      	ldrh	r3, [r7, #22]
 8011e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d01b      	beq.n	8011ea0 <USB_EPClearStall+0x106>
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	009b      	lsls	r3, r3, #2
 8011e70:	4413      	add	r3, r2
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e7e:	82bb      	strh	r3, [r7, #20]
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	441a      	add	r2, r3
 8011e8a:	8abb      	ldrh	r3, [r7, #20]
 8011e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	4413      	add	r3, r2
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011eb6:	827b      	strh	r3, [r7, #18]
 8011eb8:	8a7b      	ldrh	r3, [r7, #18]
 8011eba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ebe:	827b      	strh	r3, [r7, #18]
 8011ec0:	8a7b      	ldrh	r3, [r7, #18]
 8011ec2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011ec6:	827b      	strh	r3, [r7, #18]
 8011ec8:	687a      	ldr	r2, [r7, #4]
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	441a      	add	r2, r3
 8011ed2:	8a7b      	ldrh	r3, [r7, #18]
 8011ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011ee8:	2300      	movs	r3, #0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	371c      	adds	r7, #28
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011ef6:	b480      	push	{r7}
 8011ef8:	b083      	sub	sp, #12
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011f02:	78fb      	ldrb	r3, [r7, #3]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d103      	bne.n	8011f10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2280      	movs	r2, #128	; 0x80
 8011f0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	370c      	adds	r7, #12
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr

08011f1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011f1e:	b480      	push	{r7}
 8011f20:	b083      	sub	sp, #12
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011f3e:	2300      	movs	r3, #0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b08b      	sub	sp, #44	; 0x2c
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	4611      	mov	r1, r2
 8011f78:	461a      	mov	r2, r3
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	80fb      	strh	r3, [r7, #6]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011f82:	88bb      	ldrh	r3, [r7, #4]
 8011f84:	3301      	adds	r3, #1
 8011f86:	085b      	lsrs	r3, r3, #1
 8011f88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011f92:	88fa      	ldrh	r2, [r7, #6]
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	4413      	add	r3, r2
 8011f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011f9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8011fa2:	e01b      	b.n	8011fdc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	3301      	adds	r3, #1
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	021b      	lsls	r3, r3, #8
 8011fb2:	b21a      	sxth	r2, r3
 8011fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	b21b      	sxth	r3, r3
 8011fbc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011fbe:	6a3b      	ldr	r3, [r7, #32]
 8011fc0:	8a7a      	ldrh	r2, [r7, #18]
 8011fc2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011fc4:	6a3b      	ldr	r3, [r7, #32]
 8011fc6:	3302      	adds	r3, #2
 8011fc8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd8:	3b01      	subs	r3, #1
 8011fda:	627b      	str	r3, [r7, #36]	; 0x24
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1e0      	bne.n	8011fa4 <USB_WritePMA+0x38>
  }
}
 8011fe2:	bf00      	nop
 8011fe4:	bf00      	nop
 8011fe6:	372c      	adds	r7, #44	; 0x2c
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b08b      	sub	sp, #44	; 0x2c
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	4611      	mov	r1, r2
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	460b      	mov	r3, r1
 8012000:	80fb      	strh	r3, [r7, #6]
 8012002:	4613      	mov	r3, r2
 8012004:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012006:	88bb      	ldrh	r3, [r7, #4]
 8012008:	085b      	lsrs	r3, r3, #1
 801200a:	b29b      	uxth	r3, r3
 801200c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012016:	88fa      	ldrh	r2, [r7, #6]
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	4413      	add	r3, r2
 801201c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012020:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012022:	69bb      	ldr	r3, [r7, #24]
 8012024:	627b      	str	r3, [r7, #36]	; 0x24
 8012026:	e018      	b.n	801205a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012028:	6a3b      	ldr	r3, [r7, #32]
 801202a:	881b      	ldrh	r3, [r3, #0]
 801202c:	b29b      	uxth	r3, r3
 801202e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012030:	6a3b      	ldr	r3, [r7, #32]
 8012032:	3302      	adds	r3, #2
 8012034:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	b2da      	uxtb	r2, r3
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	3301      	adds	r3, #1
 8012042:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	0a1b      	lsrs	r3, r3, #8
 8012048:	b2da      	uxtb	r2, r3
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	3301      	adds	r3, #1
 8012052:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012056:	3b01      	subs	r3, #1
 8012058:	627b      	str	r3, [r7, #36]	; 0x24
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1e3      	bne.n	8012028 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012060:	88bb      	ldrh	r3, [r7, #4]
 8012062:	f003 0301 	and.w	r3, r3, #1
 8012066:	b29b      	uxth	r3, r3
 8012068:	2b00      	cmp	r3, #0
 801206a:	d007      	beq.n	801207c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	881b      	ldrh	r3, [r3, #0]
 8012070:	b29b      	uxth	r3, r3
 8012072:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	b2da      	uxtb	r2, r3
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	701a      	strb	r2, [r3, #0]
  }
}
 801207c:	bf00      	nop
 801207e:	372c      	adds	r7, #44	; 0x2c
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8012088:	b480      	push	{r7}
 801208a:	b085      	sub	sp, #20
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	1c5a      	adds	r2, r3, #1
 8012094:	607a      	str	r2, [r7, #4]
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 801209a:	89fb      	ldrh	r3, [r7, #14]
 801209c:	021b      	lsls	r3, r3, #8
 801209e:	b21a      	sxth	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	b21b      	sxth	r3, r3
 80120a6:	4313      	orrs	r3, r2
 80120a8:	b21b      	sxth	r3, r3
 80120aa:	b29b      	uxth	r3, r3
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3714      	adds	r7, #20
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80120b8:	b480      	push	{r7}
 80120ba:	b085      	sub	sp, #20
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	683a      	ldr	r2, [r7, #0]
 80120c6:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2204      	movs	r2, #4
 80120cc:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2204      	movs	r2, #4
 80120d2:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120dc:	b29a      	uxth	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	3b01      	subs	r3, #1
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	b21a      	sxth	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012104:	b29b      	uxth	r3, r3
 8012106:	1ad3      	subs	r3, r2, r3
 8012108:	b29b      	uxth	r3, r3
 801210a:	3b01      	subs	r3, #1
 801210c:	b29b      	uxth	r3, r3
 801210e:	b21a      	sxth	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2201      	movs	r2, #1
 801212c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2200      	movs	r2, #0
 8012148:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2200      	movs	r2, #0
 8012158:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2200      	movs	r2, #0
 8012164:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2200      	movs	r2, #0
 8012170:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 801217e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012188:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2200      	movs	r2, #0
 801219e:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80121a6:	2300      	movs	r3, #0
 80121a8:	73fb      	strb	r3, [r7, #15]
 80121aa:	e010      	b.n	80121ce <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80121ac:	7bfb      	ldrb	r3, [r7, #15]
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	330a      	adds	r3, #10
 80121b2:	00db      	lsls	r3, r3, #3
 80121b4:	4413      	add	r3, r2
 80121b6:	2200      	movs	r2, #0
 80121b8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80121ba:	7bfb      	ldrb	r3, [r7, #15]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	330a      	adds	r3, #10
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	4413      	add	r3, r2
 80121c4:	2200      	movs	r2, #0
 80121c6:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80121c8:	7bfb      	ldrb	r3, [r7, #15]
 80121ca:	3301      	adds	r3, #1
 80121cc:	73fb      	strb	r3, [r7, #15]
 80121ce:	7bfb      	ldrb	r3, [r7, #15]
 80121d0:	2b03      	cmp	r3, #3
 80121d2:	d9eb      	bls.n	80121ac <UG_Init+0xf4>
   }

   gui = g;
 80121d4:	4a04      	ldr	r2, [pc, #16]	; (80121e8 <UG_Init+0x130>)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6013      	str	r3, [r2, #0]
   return 1;
 80121da:	2301      	movs	r3, #1
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3714      	adds	r7, #20
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr
 80121e8:	200023c0 	.word	0x200023c0

080121ec <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80121f4:	4b04      	ldr	r3, [pc, #16]	; (8012208 <UG_FontSelect+0x1c>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80121fc:	bf00      	nop
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	200023c0 	.word	0x200023c0

0801220c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af02      	add	r7, sp, #8
 8012212:	4603      	mov	r3, r0
 8012214:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8012216:	4b0e      	ldr	r3, [pc, #56]	; (8012250 <UG_FillScreen+0x44>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012220:	b29b      	uxth	r3, r3
 8012222:	3b01      	subs	r3, #1
 8012224:	b29b      	uxth	r3, r3
 8012226:	b21a      	sxth	r2, r3
 8012228:	4b09      	ldr	r3, [pc, #36]	; (8012250 <UG_FillScreen+0x44>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012232:	b29b      	uxth	r3, r3
 8012234:	3b01      	subs	r3, #1
 8012236:	b29b      	uxth	r3, r3
 8012238:	b219      	sxth	r1, r3
 801223a:	88fb      	ldrh	r3, [r7, #6]
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	460b      	mov	r3, r1
 8012240:	2100      	movs	r1, #0
 8012242:	2000      	movs	r0, #0
 8012244:	f000 f806 	bl	8012254 <UG_FillFrame>
}
 8012248:	bf00      	nop
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	200023c0 	.word	0x200023c0

08012254 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012254:	b5b0      	push	{r4, r5, r7, lr}
 8012256:	b086      	sub	sp, #24
 8012258:	af02      	add	r7, sp, #8
 801225a:	4604      	mov	r4, r0
 801225c:	4608      	mov	r0, r1
 801225e:	4611      	mov	r1, r2
 8012260:	461a      	mov	r2, r3
 8012262:	4623      	mov	r3, r4
 8012264:	80fb      	strh	r3, [r7, #6]
 8012266:	4603      	mov	r3, r0
 8012268:	80bb      	strh	r3, [r7, #4]
 801226a:	460b      	mov	r3, r1
 801226c:	807b      	strh	r3, [r7, #2]
 801226e:	4613      	mov	r3, r2
 8012270:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8012272:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801227a:	429a      	cmp	r2, r3
 801227c:	da05      	bge.n	801228a <UG_FillFrame+0x36>
     swap(x1,x2);
 801227e:	88fb      	ldrh	r3, [r7, #6]
 8012280:	817b      	strh	r3, [r7, #10]
 8012282:	887b      	ldrh	r3, [r7, #2]
 8012284:	80fb      	strh	r3, [r7, #6]
 8012286:	897b      	ldrh	r3, [r7, #10]
 8012288:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 801228a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801228e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012292:	429a      	cmp	r2, r3
 8012294:	da05      	bge.n	80122a2 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8012296:	88bb      	ldrh	r3, [r7, #4]
 8012298:	813b      	strh	r3, [r7, #8]
 801229a:	883b      	ldrh	r3, [r7, #0]
 801229c:	80bb      	strh	r3, [r7, #4]
 801229e:	893b      	ldrh	r3, [r7, #8]
 80122a0:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80122a2:	4b24      	ldr	r3, [pc, #144]	; (8012334 <UG_FillFrame+0xe0>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80122aa:	f003 0302 	and.w	r3, r3, #2
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d012      	beq.n	80122d8 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80122b2:	4b20      	ldr	r3, [pc, #128]	; (8012334 <UG_FillFrame+0xe0>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122b8:	461d      	mov	r5, r3
 80122ba:	f9b7 4000 	ldrsh.w	r4, [r7]
 80122be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80122c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80122ca:	8c3b      	ldrh	r3, [r7, #32]
 80122cc:	9300      	str	r3, [sp, #0]
 80122ce:	4623      	mov	r3, r4
 80122d0:	47a8      	blx	r5
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d028      	beq.n	801232a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80122d8:	88bb      	ldrh	r3, [r7, #4]
 80122da:	81bb      	strh	r3, [r7, #12]
 80122dc:	e01e      	b.n	801231c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80122de:	88fb      	ldrh	r3, [r7, #6]
 80122e0:	81fb      	strh	r3, [r7, #14]
 80122e2:	e00f      	b.n	8012304 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80122e4:	4b13      	ldr	r3, [pc, #76]	; (8012334 <UG_FillFrame+0xe0>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	8c3a      	ldrh	r2, [r7, #32]
 80122ee:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80122f2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80122f6:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80122f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	3301      	adds	r3, #1
 8012300:	b29b      	uxth	r3, r3
 8012302:	81fb      	strh	r3, [r7, #14]
 8012304:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012308:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801230c:	429a      	cmp	r2, r3
 801230e:	dde9      	ble.n	80122e4 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012314:	b29b      	uxth	r3, r3
 8012316:	3301      	adds	r3, #1
 8012318:	b29b      	uxth	r3, r3
 801231a:	81bb      	strh	r3, [r7, #12]
 801231c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012320:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012324:	429a      	cmp	r2, r3
 8012326:	ddda      	ble.n	80122de <UG_FillFrame+0x8a>
 8012328:	e000      	b.n	801232c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801232a:	bf00      	nop
      }
   }
}
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bdb0      	pop	{r4, r5, r7, pc}
 8012332:	bf00      	nop
 8012334:	200023c0 	.word	0x200023c0

08012338 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012338:	b590      	push	{r4, r7, lr}
 801233a:	b085      	sub	sp, #20
 801233c:	af02      	add	r7, sp, #8
 801233e:	4604      	mov	r4, r0
 8012340:	4608      	mov	r0, r1
 8012342:	4611      	mov	r1, r2
 8012344:	461a      	mov	r2, r3
 8012346:	4623      	mov	r3, r4
 8012348:	80fb      	strh	r3, [r7, #6]
 801234a:	4603      	mov	r3, r0
 801234c:	80bb      	strh	r3, [r7, #4]
 801234e:	460b      	mov	r3, r1
 8012350:	807b      	strh	r3, [r7, #2]
 8012352:	4613      	mov	r3, r2
 8012354:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8012356:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 801235a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801235e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012362:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012366:	8b3b      	ldrh	r3, [r7, #24]
 8012368:	9300      	str	r3, [sp, #0]
 801236a:	4623      	mov	r3, r4
 801236c:	f000 f912 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8012370:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012374:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012378:	f9b7 1000 	ldrsh.w	r1, [r7]
 801237c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012380:	8b3b      	ldrh	r3, [r7, #24]
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	4623      	mov	r3, r4
 8012386:	f000 f905 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 801238a:	f9b7 4000 	ldrsh.w	r4, [r7]
 801238e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012392:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012396:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801239a:	8b3b      	ldrh	r3, [r7, #24]
 801239c:	9300      	str	r3, [sp, #0]
 801239e:	4623      	mov	r3, r4
 80123a0:	f000 f8f8 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 80123a4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80123a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80123ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80123b0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80123b4:	8b3b      	ldrh	r3, [r7, #24]
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	4623      	mov	r3, r4
 80123ba:	f000 f8eb 	bl	8012594 <UG_DrawLine>
}
 80123be:	bf00      	nop
 80123c0:	370c      	adds	r7, #12
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd90      	pop	{r4, r7, pc}
	...

080123c8 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 80123c8:	b590      	push	{r4, r7, lr}
 80123ca:	b087      	sub	sp, #28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	4604      	mov	r4, r0
 80123d0:	4608      	mov	r0, r1
 80123d2:	4611      	mov	r1, r2
 80123d4:	461a      	mov	r2, r3
 80123d6:	4623      	mov	r3, r4
 80123d8:	80fb      	strh	r3, [r7, #6]
 80123da:	4603      	mov	r3, r0
 80123dc:	80bb      	strh	r3, [r7, #4]
 80123de:	460b      	mov	r3, r1
 80123e0:	807b      	strh	r3, [r7, #2]
 80123e2:	4613      	mov	r3, r2
 80123e4:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 80123e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f2c0 80c8 	blt.w	8012580 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 80123f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f2c0 80c5 	blt.w	8012584 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 80123fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f340 80c2 	ble.w	8012588 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8012404:	887b      	ldrh	r3, [r7, #2]
 8012406:	005b      	lsls	r3, r3, #1
 8012408:	b29b      	uxth	r3, r3
 801240a:	f1c3 0301 	rsb	r3, r3, #1
 801240e:	b29b      	uxth	r3, r3
 8012410:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8012412:	2300      	movs	r3, #0
 8012414:	823b      	strh	r3, [r7, #16]
   e = 0;
 8012416:	2300      	movs	r3, #0
 8012418:	81fb      	strh	r3, [r7, #14]
   x = r;
 801241a:	887b      	ldrh	r3, [r7, #2]
 801241c:	82fb      	strh	r3, [r7, #22]
   y = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8012422:	e0a5      	b.n	8012570 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8012424:	4b5a      	ldr	r3, [pc, #360]	; (8012590 <UG_DrawCircle+0x1c8>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	88f9      	ldrh	r1, [r7, #6]
 801242e:	8afa      	ldrh	r2, [r7, #22]
 8012430:	1a8a      	subs	r2, r1, r2
 8012432:	b292      	uxth	r2, r2
 8012434:	b210      	sxth	r0, r2
 8012436:	88b9      	ldrh	r1, [r7, #4]
 8012438:	8aba      	ldrh	r2, [r7, #20]
 801243a:	440a      	add	r2, r1
 801243c:	b292      	uxth	r2, r2
 801243e:	b211      	sxth	r1, r2
 8012440:	883a      	ldrh	r2, [r7, #0]
 8012442:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8012444:	4b52      	ldr	r3, [pc, #328]	; (8012590 <UG_DrawCircle+0x1c8>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	88f9      	ldrh	r1, [r7, #6]
 801244e:	8afa      	ldrh	r2, [r7, #22]
 8012450:	1a8a      	subs	r2, r1, r2
 8012452:	b292      	uxth	r2, r2
 8012454:	b210      	sxth	r0, r2
 8012456:	88b9      	ldrh	r1, [r7, #4]
 8012458:	8aba      	ldrh	r2, [r7, #20]
 801245a:	1a8a      	subs	r2, r1, r2
 801245c:	b292      	uxth	r2, r2
 801245e:	b211      	sxth	r1, r2
 8012460:	883a      	ldrh	r2, [r7, #0]
 8012462:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8012464:	4b4a      	ldr	r3, [pc, #296]	; (8012590 <UG_DrawCircle+0x1c8>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	88f9      	ldrh	r1, [r7, #6]
 801246e:	8afa      	ldrh	r2, [r7, #22]
 8012470:	440a      	add	r2, r1
 8012472:	b292      	uxth	r2, r2
 8012474:	b210      	sxth	r0, r2
 8012476:	88b9      	ldrh	r1, [r7, #4]
 8012478:	8aba      	ldrh	r2, [r7, #20]
 801247a:	440a      	add	r2, r1
 801247c:	b292      	uxth	r2, r2
 801247e:	b211      	sxth	r1, r2
 8012480:	883a      	ldrh	r2, [r7, #0]
 8012482:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8012484:	4b42      	ldr	r3, [pc, #264]	; (8012590 <UG_DrawCircle+0x1c8>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	88f9      	ldrh	r1, [r7, #6]
 801248e:	8afa      	ldrh	r2, [r7, #22]
 8012490:	440a      	add	r2, r1
 8012492:	b292      	uxth	r2, r2
 8012494:	b210      	sxth	r0, r2
 8012496:	88b9      	ldrh	r1, [r7, #4]
 8012498:	8aba      	ldrh	r2, [r7, #20]
 801249a:	1a8a      	subs	r2, r1, r2
 801249c:	b292      	uxth	r2, r2
 801249e:	b211      	sxth	r1, r2
 80124a0:	883a      	ldrh	r2, [r7, #0]
 80124a2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 80124a4:	4b3a      	ldr	r3, [pc, #232]	; (8012590 <UG_DrawCircle+0x1c8>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	88f9      	ldrh	r1, [r7, #6]
 80124ae:	8aba      	ldrh	r2, [r7, #20]
 80124b0:	1a8a      	subs	r2, r1, r2
 80124b2:	b292      	uxth	r2, r2
 80124b4:	b210      	sxth	r0, r2
 80124b6:	88b9      	ldrh	r1, [r7, #4]
 80124b8:	8afa      	ldrh	r2, [r7, #22]
 80124ba:	440a      	add	r2, r1
 80124bc:	b292      	uxth	r2, r2
 80124be:	b211      	sxth	r1, r2
 80124c0:	883a      	ldrh	r2, [r7, #0]
 80124c2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 80124c4:	4b32      	ldr	r3, [pc, #200]	; (8012590 <UG_DrawCircle+0x1c8>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	88f9      	ldrh	r1, [r7, #6]
 80124ce:	8aba      	ldrh	r2, [r7, #20]
 80124d0:	1a8a      	subs	r2, r1, r2
 80124d2:	b292      	uxth	r2, r2
 80124d4:	b210      	sxth	r0, r2
 80124d6:	88b9      	ldrh	r1, [r7, #4]
 80124d8:	8afa      	ldrh	r2, [r7, #22]
 80124da:	1a8a      	subs	r2, r1, r2
 80124dc:	b292      	uxth	r2, r2
 80124de:	b211      	sxth	r1, r2
 80124e0:	883a      	ldrh	r2, [r7, #0]
 80124e2:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 80124e4:	4b2a      	ldr	r3, [pc, #168]	; (8012590 <UG_DrawCircle+0x1c8>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	88f9      	ldrh	r1, [r7, #6]
 80124ee:	8aba      	ldrh	r2, [r7, #20]
 80124f0:	440a      	add	r2, r1
 80124f2:	b292      	uxth	r2, r2
 80124f4:	b210      	sxth	r0, r2
 80124f6:	88b9      	ldrh	r1, [r7, #4]
 80124f8:	8afa      	ldrh	r2, [r7, #22]
 80124fa:	440a      	add	r2, r1
 80124fc:	b292      	uxth	r2, r2
 80124fe:	b211      	sxth	r1, r2
 8012500:	883a      	ldrh	r2, [r7, #0]
 8012502:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8012504:	4b22      	ldr	r3, [pc, #136]	; (8012590 <UG_DrawCircle+0x1c8>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	88f9      	ldrh	r1, [r7, #6]
 801250e:	8aba      	ldrh	r2, [r7, #20]
 8012510:	440a      	add	r2, r1
 8012512:	b292      	uxth	r2, r2
 8012514:	b210      	sxth	r0, r2
 8012516:	88b9      	ldrh	r1, [r7, #4]
 8012518:	8afa      	ldrh	r2, [r7, #22]
 801251a:	1a8a      	subs	r2, r1, r2
 801251c:	b292      	uxth	r2, r2
 801251e:	b211      	sxth	r1, r2
 8012520:	883a      	ldrh	r2, [r7, #0]
 8012522:	4798      	blx	r3

      y++;
 8012524:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012528:	b29b      	uxth	r3, r3
 801252a:	3301      	adds	r3, #1
 801252c:	b29b      	uxth	r3, r3
 801252e:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012530:	89fa      	ldrh	r2, [r7, #14]
 8012532:	8a3b      	ldrh	r3, [r7, #16]
 8012534:	4413      	add	r3, r2
 8012536:	b29b      	uxth	r3, r3
 8012538:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 801253a:	8a3b      	ldrh	r3, [r7, #16]
 801253c:	3302      	adds	r3, #2
 801253e:	b29b      	uxth	r3, r3
 8012540:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8012542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012546:	005a      	lsls	r2, r3, #1
 8012548:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801254c:	4413      	add	r3, r2
 801254e:	2b00      	cmp	r3, #0
 8012550:	dd0e      	ble.n	8012570 <UG_DrawCircle+0x1a8>
      {
         x--;
 8012552:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012556:	b29b      	uxth	r3, r3
 8012558:	3b01      	subs	r3, #1
 801255a:	b29b      	uxth	r3, r3
 801255c:	82fb      	strh	r3, [r7, #22]
         e += xd;
 801255e:	89fa      	ldrh	r2, [r7, #14]
 8012560:	8a7b      	ldrh	r3, [r7, #18]
 8012562:	4413      	add	r3, r2
 8012564:	b29b      	uxth	r3, r3
 8012566:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8012568:	8a7b      	ldrh	r3, [r7, #18]
 801256a:	3302      	adds	r3, #2
 801256c:	b29b      	uxth	r3, r3
 801256e:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8012570:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012574:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012578:	429a      	cmp	r2, r3
 801257a:	f6bf af53 	bge.w	8012424 <UG_DrawCircle+0x5c>
 801257e:	e004      	b.n	801258a <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8012580:	bf00      	nop
 8012582:	e002      	b.n	801258a <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8012584:	bf00      	nop
 8012586:	e000      	b.n	801258a <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8012588:	bf00      	nop
      }
   }
}
 801258a:	371c      	adds	r7, #28
 801258c:	46bd      	mov	sp, r7
 801258e:	bd90      	pop	{r4, r7, pc}
 8012590:	200023c0 	.word	0x200023c0

08012594 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012594:	b5b0      	push	{r4, r5, r7, lr}
 8012596:	b08a      	sub	sp, #40	; 0x28
 8012598:	af02      	add	r7, sp, #8
 801259a:	4604      	mov	r4, r0
 801259c:	4608      	mov	r0, r1
 801259e:	4611      	mov	r1, r2
 80125a0:	461a      	mov	r2, r3
 80125a2:	4623      	mov	r3, r4
 80125a4:	80fb      	strh	r3, [r7, #6]
 80125a6:	4603      	mov	r3, r0
 80125a8:	80bb      	strh	r3, [r7, #4]
 80125aa:	460b      	mov	r3, r1
 80125ac:	807b      	strh	r3, [r7, #2]
 80125ae:	4613      	mov	r3, r2
 80125b0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80125b2:	4b67      	ldr	r3, [pc, #412]	; (8012750 <UG_DrawLine+0x1bc>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80125ba:	f003 0302 	and.w	r3, r3, #2
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d013      	beq.n	80125ea <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80125c2:	4b63      	ldr	r3, [pc, #396]	; (8012750 <UG_DrawLine+0x1bc>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125c8:	461d      	mov	r5, r3
 80125ca:	f9b7 4000 	ldrsh.w	r4, [r7]
 80125ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80125d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80125d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80125da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	4623      	mov	r3, r4
 80125e0:	47a8      	blx	r5
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f000 80ae 	beq.w	8012746 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 80125ea:	887a      	ldrh	r2, [r7, #2]
 80125ec:	88fb      	ldrh	r3, [r7, #6]
 80125ee:	1ad3      	subs	r3, r2, r3
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80125f4:	883a      	ldrh	r2, [r7, #0]
 80125f6:	88bb      	ldrh	r3, [r7, #4]
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80125fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012602:	2b00      	cmp	r3, #0
 8012604:	bfb8      	it	lt
 8012606:	425b      	neglt	r3, r3
 8012608:	b29b      	uxth	r3, r3
 801260a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 801260c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012610:	2b00      	cmp	r3, #0
 8012612:	bfb8      	it	lt
 8012614:	425b      	neglt	r3, r3
 8012616:	b29b      	uxth	r3, r3
 8012618:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 801261a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801261e:	2b00      	cmp	r3, #0
 8012620:	dd01      	ble.n	8012626 <UG_DrawLine+0x92>
 8012622:	2301      	movs	r3, #1
 8012624:	e001      	b.n	801262a <UG_DrawLine+0x96>
 8012626:	f04f 33ff 	mov.w	r3, #4294967295
 801262a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 801262c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012630:	2b00      	cmp	r3, #0
 8012632:	dd01      	ble.n	8012638 <UG_DrawLine+0xa4>
 8012634:	2301      	movs	r3, #1
 8012636:	e001      	b.n	801263c <UG_DrawLine+0xa8>
 8012638:	f04f 33ff 	mov.w	r3, #4294967295
 801263c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 801263e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012642:	105b      	asrs	r3, r3, #1
 8012644:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8012646:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801264a:	105b      	asrs	r3, r3, #1
 801264c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 801264e:	88fb      	ldrh	r3, [r7, #6]
 8012650:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8012652:	88bb      	ldrh	r3, [r7, #4]
 8012654:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8012656:	4b3e      	ldr	r3, [pc, #248]	; (8012750 <UG_DrawLine+0x1bc>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012660:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012664:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012668:	4798      	blx	r3

   if( dxabs >= dyabs )
 801266a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801266e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012672:	429a      	cmp	r2, r3
 8012674:	db33      	blt.n	80126de <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8012676:	2300      	movs	r3, #0
 8012678:	83fb      	strh	r3, [r7, #30]
 801267a:	e029      	b.n	80126d0 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 801267c:	8b7a      	ldrh	r2, [r7, #26]
 801267e:	89fb      	ldrh	r3, [r7, #14]
 8012680:	4413      	add	r3, r2
 8012682:	b29b      	uxth	r3, r3
 8012684:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8012686:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801268a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801268e:	429a      	cmp	r2, r3
 8012690:	db09      	blt.n	80126a6 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8012692:	8b7a      	ldrh	r2, [r7, #26]
 8012694:	8a3b      	ldrh	r3, [r7, #16]
 8012696:	1ad3      	subs	r3, r2, r3
 8012698:	b29b      	uxth	r3, r3
 801269a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 801269c:	8afa      	ldrh	r2, [r7, #22]
 801269e:	897b      	ldrh	r3, [r7, #10]
 80126a0:	4413      	add	r3, r2
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80126a6:	8b3a      	ldrh	r2, [r7, #24]
 80126a8:	89bb      	ldrh	r3, [r7, #12]
 80126aa:	4413      	add	r3, r2
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80126b0:	4b27      	ldr	r3, [pc, #156]	; (8012750 <UG_DrawLine+0x1bc>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80126ba:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80126be:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80126c2:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80126c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	3301      	adds	r3, #1
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	83fb      	strh	r3, [r7, #30]
 80126d0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80126d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80126d8:	429a      	cmp	r2, r3
 80126da:	dbcf      	blt.n	801267c <UG_DrawLine+0xe8>
 80126dc:	e034      	b.n	8012748 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80126de:	2300      	movs	r3, #0
 80126e0:	83fb      	strh	r3, [r7, #30]
 80126e2:	e029      	b.n	8012738 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80126e4:	8bba      	ldrh	r2, [r7, #28]
 80126e6:	8a3b      	ldrh	r3, [r7, #16]
 80126e8:	4413      	add	r3, r2
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80126ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80126f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	db09      	blt.n	801270e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80126fa:	8bba      	ldrh	r2, [r7, #28]
 80126fc:	89fb      	ldrh	r3, [r7, #14]
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	b29b      	uxth	r3, r3
 8012702:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8012704:	8b3a      	ldrh	r2, [r7, #24]
 8012706:	89bb      	ldrh	r3, [r7, #12]
 8012708:	4413      	add	r3, r2
 801270a:	b29b      	uxth	r3, r3
 801270c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 801270e:	8afa      	ldrh	r2, [r7, #22]
 8012710:	897b      	ldrh	r3, [r7, #10]
 8012712:	4413      	add	r3, r2
 8012714:	b29b      	uxth	r3, r3
 8012716:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8012718:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <UG_DrawLine+0x1bc>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012722:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012726:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801272a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 801272c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012730:	b29b      	uxth	r3, r3
 8012732:	3301      	adds	r3, #1
 8012734:	b29b      	uxth	r3, r3
 8012736:	83fb      	strh	r3, [r7, #30]
 8012738:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801273c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012740:	429a      	cmp	r2, r3
 8012742:	dbcf      	blt.n	80126e4 <UG_DrawLine+0x150>
 8012744:	e000      	b.n	8012748 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012746:	bf00      	nop
      }
   }  
}
 8012748:	3720      	adds	r7, #32
 801274a:	46bd      	mov	sp, r7
 801274c:	bdb0      	pop	{r4, r5, r7, pc}
 801274e:	bf00      	nop
 8012750:	200023c0 	.word	0x200023c0

08012754 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8012754:	b590      	push	{r4, r7, lr}
 8012756:	b087      	sub	sp, #28
 8012758:	af02      	add	r7, sp, #8
 801275a:	4603      	mov	r3, r0
 801275c:	603a      	str	r2, [r7, #0]
 801275e:	80fb      	strh	r3, [r7, #6]
 8012760:	460b      	mov	r3, r1
 8012762:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8012764:	88fb      	ldrh	r3, [r7, #6]
 8012766:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8012768:	88bb      	ldrh	r3, [r7, #4]
 801276a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 801276c:	4b44      	ldr	r3, [pc, #272]	; (8012880 <UG_PutString+0x12c>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012772:	4618      	mov	r0, r3
 8012774:	f000 fa96 	bl	8012ca4 <_UG_FontSelect>
   while ( *str != 0 )
 8012778:	e064      	b.n	8012844 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801277a:	4b41      	ldr	r3, [pc, #260]	; (8012880 <UG_PutString+0x12c>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8012786:	463b      	mov	r3, r7
 8012788:	4618      	mov	r0, r3
 801278a:	f000 f8c7 	bl	801291c <_UG_DecodeUTF8>
 801278e:	4603      	mov	r3, r0
 8012790:	817b      	strh	r3, [r7, #10]
 8012792:	e004      	b.n	801279e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	1c5a      	adds	r2, r3, #1
 8012798:	603a      	str	r2, [r7, #0]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 801279e:	897b      	ldrh	r3, [r7, #10]
 80127a0:	2b0a      	cmp	r3, #10
 80127a2:	d105      	bne.n	80127b0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80127a4:	4b36      	ldr	r3, [pc, #216]	; (8012880 <UG_PutString+0x12c>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	81fb      	strh	r3, [r7, #14]
         continue;
 80127ae:	e049      	b.n	8012844 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80127b0:	897b      	ldrh	r3, [r7, #10]
 80127b2:	2100      	movs	r1, #0
 80127b4:	4618      	mov	r0, r3
 80127b6:	f000 f929 	bl	8012a0c <_UG_GetCharData>
 80127ba:	4603      	mov	r3, r0
 80127bc:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80127be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80127c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c6:	d100      	bne.n	80127ca <UG_PutString+0x76>
 80127c8:	e03c      	b.n	8012844 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80127ca:	4b2d      	ldr	r3, [pc, #180]	; (8012880 <UG_PutString+0x12c>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127d4:	4619      	mov	r1, r3
 80127d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80127da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80127de:	4413      	add	r3, r2
 80127e0:	4299      	cmp	r1, r3
 80127e2:	dc12      	bgt.n	801280a <UG_PutString+0xb6>
      {
         xp = x;
 80127e4:	88fb      	ldrh	r3, [r7, #6]
 80127e6:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80127e8:	4b25      	ldr	r3, [pc, #148]	; (8012880 <UG_PutString+0x12c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127f0:	b21a      	sxth	r2, r3
 80127f2:	4b23      	ldr	r3, [pc, #140]	; (8012880 <UG_PutString+0x12c>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 80127fa:	b21b      	sxth	r3, r3
 80127fc:	4413      	add	r3, r2
 80127fe:	b21b      	sxth	r3, r3
 8012800:	b29a      	uxth	r2, r3
 8012802:	89bb      	ldrh	r3, [r7, #12]
 8012804:	4413      	add	r3, r2
 8012806:	b29b      	uxth	r3, r3
 8012808:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 801280a:	4b1d      	ldr	r3, [pc, #116]	; (8012880 <UG_PutString+0x12c>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8012812:	4b1b      	ldr	r3, [pc, #108]	; (8012880 <UG_PutString+0x12c>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801281a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801281e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8012822:	8978      	ldrh	r0, [r7, #10]
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	4623      	mov	r3, r4
 8012828:	f000 fabe 	bl	8012da8 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 801282c:	4b14      	ldr	r3, [pc, #80]	; (8012880 <UG_PutString+0x12c>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8012834:	b29a      	uxth	r2, r3
 8012836:	893b      	ldrh	r3, [r7, #8]
 8012838:	4413      	add	r3, r2
 801283a:	b29a      	uxth	r2, r3
 801283c:	89fb      	ldrh	r3, [r7, #14]
 801283e:	4413      	add	r3, r2
 8012840:	b29b      	uxth	r3, r3
 8012842:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d196      	bne.n	801277a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 801284c:	4b0c      	ldr	r3, [pc, #48]	; (8012880 <UG_PutString+0x12c>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012854:	f003 0302 	and.w	r3, r3, #2
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00c      	beq.n	8012876 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 801285c:	4b08      	ldr	r3, [pc, #32]	; (8012880 <UG_PutString+0x12c>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012862:	461c      	mov	r4, r3
 8012864:	f04f 33ff 	mov.w	r3, #4294967295
 8012868:	f04f 32ff 	mov.w	r2, #4294967295
 801286c:	f04f 31ff 	mov.w	r1, #4294967295
 8012870:	f04f 30ff 	mov.w	r0, #4294967295
 8012874:	47a0      	blx	r4
}
 8012876:	bf00      	nop
 8012878:	3714      	adds	r7, #20
 801287a:	46bd      	mov	sp, r7
 801287c:	bd90      	pop	{r4, r7, pc}
 801287e:	bf00      	nop
 8012880:	200023c0 	.word	0x200023c0

08012884 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	4603      	mov	r3, r0
 801288c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 801288e:	4b05      	ldr	r3, [pc, #20]	; (80128a4 <UG_SetForecolor+0x20>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	88fa      	ldrh	r2, [r7, #6]
 8012894:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8012898:	bf00      	nop
 801289a:	370c      	adds	r7, #12
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr
 80128a4:	200023c0 	.word	0x200023c0

080128a8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80128b2:	4b05      	ldr	r3, [pc, #20]	; (80128c8 <UG_SetBackcolor+0x20>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	88fa      	ldrh	r2, [r7, #6]
 80128b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80128bc:	bf00      	nop
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr
 80128c8:	200023c0 	.word	0x200023c0

080128cc <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80128cc:	b480      	push	{r7}
 80128ce:	b083      	sub	sp, #12
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	4603      	mov	r3, r0
 80128d4:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80128d6:	4b06      	ldr	r3, [pc, #24]	; (80128f0 <UG_FontSetHSpace+0x24>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	88fa      	ldrh	r2, [r7, #6]
 80128dc:	b252      	sxtb	r2, r2
 80128de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80128e2:	bf00      	nop
 80128e4:	370c      	adds	r7, #12
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	200023c0 	.word	0x200023c0

080128f4 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4603      	mov	r3, r0
 80128fc:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80128fe:	4b06      	ldr	r3, [pc, #24]	; (8012918 <UG_FontSetVSpace+0x24>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	88fa      	ldrh	r2, [r7, #6]
 8012904:	b252      	sxtb	r2, r2
 8012906:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 801290a:	bf00      	nop
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	200023c0 	.word	0x200023c0

0801291c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]

  char c=**str;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 801292c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012930:	2b00      	cmp	r3, #0
 8012932:	db07      	blt.n	8012944 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	1c5a      	adds	r2, r3, #1
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	601a      	str	r2, [r3, #0]
    return c;
 801293e:	7bfb      	ldrb	r3, [r7, #15]
 8012940:	b29b      	uxth	r3, r3
 8012942:	e05c      	b.n	80129fe <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8012944:	2300      	movs	r3, #0
 8012946:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8012948:	2300      	movs	r3, #0
 801294a:	81bb      	strh	r3, [r7, #12]

  while(**str)
 801294c:	e04f      	b.n	80129ee <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	1c5a      	adds	r2, r3, #1
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8012960:	7bbb      	ldrb	r3, [r7, #14]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d130      	bne.n	80129c8 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	2bdf      	cmp	r3, #223	; 0xdf
 801296a:	d806      	bhi.n	801297a <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 801296c:	2301      	movs	r3, #1
 801296e:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8012970:	7bfb      	ldrb	r3, [r7, #15]
 8012972:	f003 031f 	and.w	r3, r3, #31
 8012976:	73fb      	strb	r3, [r7, #15]
 8012978:	e023      	b.n	80129c2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 801297a:	7bfb      	ldrb	r3, [r7, #15]
 801297c:	2bef      	cmp	r3, #239	; 0xef
 801297e:	d806      	bhi.n	801298e <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8012980:	2302      	movs	r3, #2
 8012982:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8012984:	7bfb      	ldrb	r3, [r7, #15]
 8012986:	f003 030f 	and.w	r3, r3, #15
 801298a:	73fb      	strb	r3, [r7, #15]
 801298c:	e019      	b.n	80129c2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 801298e:	7bfb      	ldrb	r3, [r7, #15]
 8012990:	2bf7      	cmp	r3, #247	; 0xf7
 8012992:	d806      	bhi.n	80129a2 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8012994:	2303      	movs	r3, #3
 8012996:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8012998:	7bfb      	ldrb	r3, [r7, #15]
 801299a:	f003 0307 	and.w	r3, r3, #7
 801299e:	73fb      	strb	r3, [r7, #15]
 80129a0:	e00f      	b.n	80129c2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80129a2:	7bfb      	ldrb	r3, [r7, #15]
 80129a4:	2bfb      	cmp	r3, #251	; 0xfb
 80129a6:	d806      	bhi.n	80129b6 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80129a8:	2304      	movs	r3, #4
 80129aa:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80129ac:	7bfb      	ldrb	r3, [r7, #15]
 80129ae:	f003 0303 	and.w	r3, r3, #3
 80129b2:	73fb      	strb	r3, [r7, #15]
 80129b4:	e005      	b.n	80129c2 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80129b6:	2305      	movs	r3, #5
 80129b8:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80129ba:	7bfb      	ldrb	r3, [r7, #15]
 80129bc:	f003 0301 	and.w	r3, r3, #1
 80129c0:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80129c2:	7bfb      	ldrb	r3, [r7, #15]
 80129c4:	81bb      	strh	r3, [r7, #12]
 80129c6:	e012      	b.n	80129ee <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80129c8:	89bb      	ldrh	r3, [r7, #12]
 80129ca:	019b      	lsls	r3, r3, #6
 80129cc:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
 80129d0:	b21b      	sxth	r3, r3
 80129d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129d6:	b21a      	sxth	r2, r3
 80129d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80129dc:	4313      	orrs	r3, r2
 80129de:	b21b      	sxth	r3, r3
 80129e0:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80129e2:	7bbb      	ldrb	r3, [r7, #14]
 80129e4:	3b01      	subs	r3, #1
 80129e6:	73bb      	strb	r3, [r7, #14]
 80129e8:	7bbb      	ldrb	r3, [r7, #14]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d005      	beq.n	80129fa <_UG_DecodeUTF8+0xde>
  while(**str)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1aa      	bne.n	801294e <_UG_DecodeUTF8+0x32>
 80129f8:	e000      	b.n	80129fc <_UG_DecodeUTF8+0xe0>
        break;
 80129fa:	bf00      	nop
    }
  }
  return encoding;
 80129fc:	89bb      	ldrh	r3, [r7, #12]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3714      	adds	r7, #20
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
	...

08012a0c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b086      	sub	sp, #24
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	4603      	mov	r3, r0
 8012a14:	6039      	str	r1, [r7, #0]
 8012a16:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8012a24:	2300      	movs	r3, #0
 8012a26:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8012a2c:	4b98      	ldr	r3, [pc, #608]	; (8012c90 <_UG_GetCharData+0x284>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a32:	4b98      	ldr	r3, [pc, #608]	; (8012c94 <_UG_GetCharData+0x288>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d10f      	bne.n	8012a5a <_UG_GetCharData+0x4e>
 8012a3a:	4b97      	ldr	r3, [pc, #604]	; (8012c98 <_UG_GetCharData+0x28c>)
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	88fa      	ldrh	r2, [r7, #6]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d10a      	bne.n	8012a5a <_UG_GetCharData+0x4e>
    if(p){
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d003      	beq.n	8012a52 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8012a4a:	4b94      	ldr	r3, [pc, #592]	; (8012c9c <_UG_GetCharData+0x290>)
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8012a52:	4b93      	ldr	r3, [pc, #588]	; (8012ca0 <_UG_GetCharData+0x294>)
 8012a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a58:	e116      	b.n	8012c88 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8012a5a:	4b8d      	ldr	r3, [pc, #564]	; (8012c90 <_UG_GetCharData+0x284>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f000 80cc 	beq.w	8012c00 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8012a68:	88fb      	ldrh	r3, [r7, #6]
 8012a6a:	2bfc      	cmp	r3, #252	; 0xfc
 8012a6c:	f300 80c8 	bgt.w	8012c00 <_UG_GetCharData+0x1f4>
 8012a70:	2bd6      	cmp	r3, #214	; 0xd6
 8012a72:	da09      	bge.n	8012a88 <_UG_GetCharData+0x7c>
 8012a74:	2bc4      	cmp	r3, #196	; 0xc4
 8012a76:	d06c      	beq.n	8012b52 <_UG_GetCharData+0x146>
 8012a78:	2bc4      	cmp	r3, #196	; 0xc4
 8012a7a:	f300 80c1 	bgt.w	8012c00 <_UG_GetCharData+0x1f4>
 8012a7e:	2bb0      	cmp	r3, #176	; 0xb0
 8012a80:	d06d      	beq.n	8012b5e <_UG_GetCharData+0x152>
 8012a82:	2bb5      	cmp	r3, #181	; 0xb5
 8012a84:	d068      	beq.n	8012b58 <_UG_GetCharData+0x14c>
 8012a86:	e06e      	b.n	8012b66 <_UG_GetCharData+0x15a>
 8012a88:	3bd6      	subs	r3, #214	; 0xd6
 8012a8a:	2b26      	cmp	r3, #38	; 0x26
 8012a8c:	f200 80b8 	bhi.w	8012c00 <_UG_GetCharData+0x1f4>
 8012a90:	a201      	add	r2, pc, #4	; (adr r2, 8012a98 <_UG_GetCharData+0x8c>)
 8012a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a96:	bf00      	nop
 8012a98:	08012b3b 	.word	0x08012b3b
 8012a9c:	08012c01 	.word	0x08012c01
 8012aa0:	08012c01 	.word	0x08012c01
 8012aa4:	08012c01 	.word	0x08012c01
 8012aa8:	08012c01 	.word	0x08012c01
 8012aac:	08012c01 	.word	0x08012c01
 8012ab0:	08012b47 	.word	0x08012b47
 8012ab4:	08012c01 	.word	0x08012c01
 8012ab8:	08012c01 	.word	0x08012c01
 8012abc:	08012c01 	.word	0x08012c01
 8012ac0:	08012c01 	.word	0x08012c01
 8012ac4:	08012c01 	.word	0x08012c01
 8012ac8:	08012c01 	.word	0x08012c01
 8012acc:	08012c01 	.word	0x08012c01
 8012ad0:	08012b4d 	.word	0x08012b4d
 8012ad4:	08012c01 	.word	0x08012c01
 8012ad8:	08012c01 	.word	0x08012c01
 8012adc:	08012c01 	.word	0x08012c01
 8012ae0:	08012c01 	.word	0x08012c01
 8012ae4:	08012c01 	.word	0x08012c01
 8012ae8:	08012c01 	.word	0x08012c01
 8012aec:	08012c01 	.word	0x08012c01
 8012af0:	08012c01 	.word	0x08012c01
 8012af4:	08012c01 	.word	0x08012c01
 8012af8:	08012c01 	.word	0x08012c01
 8012afc:	08012c01 	.word	0x08012c01
 8012b00:	08012c01 	.word	0x08012c01
 8012b04:	08012c01 	.word	0x08012c01
 8012b08:	08012c01 	.word	0x08012c01
 8012b0c:	08012c01 	.word	0x08012c01
 8012b10:	08012c01 	.word	0x08012c01
 8012b14:	08012c01 	.word	0x08012c01
 8012b18:	08012b35 	.word	0x08012b35
 8012b1c:	08012c01 	.word	0x08012c01
 8012b20:	08012c01 	.word	0x08012c01
 8012b24:	08012c01 	.word	0x08012c01
 8012b28:	08012c01 	.word	0x08012c01
 8012b2c:	08012c01 	.word	0x08012c01
 8012b30:	08012b41 	.word	0x08012b41
    {
       case 0xF6: encoding = 0x94; break; // ö
 8012b34:	2394      	movs	r3, #148	; 0x94
 8012b36:	80fb      	strh	r3, [r7, #6]
 8012b38:	e015      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8012b3a:	2399      	movs	r3, #153	; 0x99
 8012b3c:	80fb      	strh	r3, [r7, #6]
 8012b3e:	e012      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8012b40:	2381      	movs	r3, #129	; 0x81
 8012b42:	80fb      	strh	r3, [r7, #6]
 8012b44:	e00f      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8012b46:	239a      	movs	r3, #154	; 0x9a
 8012b48:	80fb      	strh	r3, [r7, #6]
 8012b4a:	e00c      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8012b4c:	2384      	movs	r3, #132	; 0x84
 8012b4e:	80fb      	strh	r3, [r7, #6]
 8012b50:	e009      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8012b52:	238e      	movs	r3, #142	; 0x8e
 8012b54:	80fb      	strh	r3, [r7, #6]
 8012b56:	e006      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8012b58:	23e6      	movs	r3, #230	; 0xe6
 8012b5a:	80fb      	strh	r3, [r7, #6]
 8012b5c:	e003      	b.n	8012b66 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8012b5e:	23f8      	movs	r3, #248	; 0xf8
 8012b60:	80fb      	strh	r3, [r7, #6]
 8012b62:	bf00      	nop
 8012b64:	e04c      	b.n	8012c00 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012b66:	e04b      	b.n	8012c00 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8012b68:	4b49      	ldr	r3, [pc, #292]	; (8012c90 <_UG_GetCharData+0x284>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b6e:	8a7a      	ldrh	r2, [r7, #18]
 8012b70:	0052      	lsls	r2, r2, #1
 8012b72:	4413      	add	r3, r2
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7ff fa87 	bl	8012088 <ptr_8to16>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8012b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	da06      	bge.n	8012b94 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8012b86:	89fb      	ldrh	r3, [r7, #14]
 8012b88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012b8c:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8012b8e:	2301      	movs	r3, #1
 8012b90:	747b      	strb	r3, [r7, #17]
 8012b92:	e032      	b.n	8012bfa <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8012b94:	7c7b      	ldrb	r3, [r7, #17]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d021      	beq.n	8012bde <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8012b9a:	88fa      	ldrh	r2, [r7, #6]
 8012b9c:	8afb      	ldrh	r3, [r7, #22]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d30d      	bcc.n	8012bbe <_UG_GetCharData+0x1b2>
 8012ba2:	88fa      	ldrh	r2, [r7, #6]
 8012ba4:	89fb      	ldrh	r3, [r7, #14]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d809      	bhi.n	8012bbe <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8012baa:	88fa      	ldrh	r2, [r7, #6]
 8012bac:	8afb      	ldrh	r3, [r7, #22]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	8abb      	ldrh	r3, [r7, #20]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	82bb      	strh	r3, [r7, #20]
        found=1;
 8012bb8:	2301      	movs	r3, #1
 8012bba:	743b      	strb	r3, [r7, #16]
        break;
 8012bbc:	e02a      	b.n	8012c14 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8012bbe:	88fa      	ldrh	r2, [r7, #6]
 8012bc0:	8afb      	ldrh	r3, [r7, #22]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d323      	bcc.n	8012c0e <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8012bc6:	89fa      	ldrh	r2, [r7, #14]
 8012bc8:	8afb      	ldrh	r3, [r7, #22]
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	8abb      	ldrh	r3, [r7, #20]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	82bb      	strh	r3, [r7, #20]
      range=0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	747b      	strb	r3, [r7, #17]
 8012bdc:	e00d      	b.n	8012bfa <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012bde:	88fa      	ldrh	r2, [r7, #6]
 8012be0:	89fb      	ldrh	r3, [r7, #14]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d102      	bne.n	8012bec <_UG_GetCharData+0x1e0>
      {
        found=1;
 8012be6:	2301      	movs	r3, #1
 8012be8:	743b      	strb	r3, [r7, #16]
        break;
 8012bea:	e013      	b.n	8012c14 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012bec:	88fa      	ldrh	r2, [r7, #6]
 8012bee:	89fb      	ldrh	r3, [r7, #14]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d30e      	bcc.n	8012c12 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8012bf4:	8abb      	ldrh	r3, [r7, #20]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012bfa:	8a7b      	ldrh	r3, [r7, #18]
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	827b      	strh	r3, [r7, #18]
 8012c00:	4b23      	ldr	r3, [pc, #140]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012c06:	8a7a      	ldrh	r2, [r7, #18]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d3ad      	bcc.n	8012b68 <_UG_GetCharData+0x15c>
 8012c0c:	e002      	b.n	8012c14 <_UG_GetCharData+0x208>
        break;
 8012c0e:	bf00      	nop
 8012c10:	e000      	b.n	8012c14 <_UG_GetCharData+0x208>
        break;
 8012c12:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8012c14:	7c3b      	ldrb	r3, [r7, #16]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d034      	beq.n	8012c84 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8012c1a:	4b1d      	ldr	r3, [pc, #116]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c20:	4a1c      	ldr	r2, [pc, #112]	; (8012c94 <_UG_GetCharData+0x288>)
 8012c22:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8012c24:	4a1c      	ldr	r2, [pc, #112]	; (8012c98 <_UG_GetCharData+0x28c>)
 8012c26:	88fb      	ldrh	r3, [r7, #6]
 8012c28:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8012c2a:	4b19      	ldr	r3, [pc, #100]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c30:	8aba      	ldrh	r2, [r7, #20]
 8012c32:	4917      	ldr	r1, [pc, #92]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c34:	6809      	ldr	r1, [r1, #0]
 8012c36:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8012c38:	fb01 f202 	mul.w	r2, r1, r2
 8012c3c:	4413      	add	r3, r2
 8012c3e:	4a17      	ldr	r2, [pc, #92]	; (8012c9c <_UG_GetCharData+0x290>)
 8012c40:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8012c42:	4b13      	ldr	r3, [pc, #76]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d009      	beq.n	8012c60 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8012c4c:	4b10      	ldr	r3, [pc, #64]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c52:	8abb      	ldrh	r3, [r7, #20]
 8012c54:	4413      	add	r3, r2
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	b21a      	sxth	r2, r3
 8012c5a:	4b11      	ldr	r3, [pc, #68]	; (8012ca0 <_UG_GetCharData+0x294>)
 8012c5c:	801a      	strh	r2, [r3, #0]
 8012c5e:	e006      	b.n	8012c6e <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8012c60:	4b0b      	ldr	r3, [pc, #44]	; (8012c90 <_UG_GetCharData+0x284>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c68:	b21a      	sxth	r2, r3
 8012c6a:	4b0d      	ldr	r3, [pc, #52]	; (8012ca0 <_UG_GetCharData+0x294>)
 8012c6c:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d003      	beq.n	8012c7c <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8012c74:	4b09      	ldr	r3, [pc, #36]	; (8012c9c <_UG_GetCharData+0x290>)
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8012c7c:	4b08      	ldr	r3, [pc, #32]	; (8012ca0 <_UG_GetCharData+0x294>)
 8012c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c82:	e001      	b.n	8012c88 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8012c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3718      	adds	r7, #24
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	200023c0 	.word	0x200023c0
 8012c94:	200023c4 	.word	0x200023c4
 8012c98:	200023c8 	.word	0x200023c8
 8012c9c:	200023cc 	.word	0x200023cc
 8012ca0:	200023d0 	.word	0x200023d0

08012ca4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8012ca4:	b590      	push	{r4, r7, lr}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012cac:	4b3d      	ldr	r3, [pc, #244]	; (8012da4 <_UG_FontSelect+0x100>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d070      	beq.n	8012d9a <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8012cb8:	4b3a      	ldr	r3, [pc, #232]	; (8012da4 <_UG_FontSelect+0x100>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	687a      	ldr	r2, [r7, #4]
 8012cbe:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	781a      	ldrb	r2, [r3, #0]
 8012cc4:	4b37      	ldr	r3, [pc, #220]	; (8012da4 <_UG_FontSelect+0x100>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012ccc:	b2d2      	uxtb	r2, r2
 8012cce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	1c5a      	adds	r2, r3, #1
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	b25b      	sxtb	r3, r3
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	da01      	bge.n	8012ce4 <_UG_FontSelect+0x40>
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	e000      	b.n	8012ce6 <_UG_FontSelect+0x42>
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	4b2f      	ldr	r3, [pc, #188]	; (8012da4 <_UG_FontSelect+0x100>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	b2d2      	uxtb	r2, r2
 8012cec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	607a      	str	r2, [r7, #4]
 8012cf6:	4a2b      	ldr	r2, [pc, #172]	; (8012da4 <_UG_FontSelect+0x100>)
 8012cf8:	6812      	ldr	r2, [r2, #0]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	1c5a      	adds	r2, r3, #1
 8012d04:	607a      	str	r2, [r7, #4]
 8012d06:	4a27      	ldr	r2, [pc, #156]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d08:	6812      	ldr	r2, [r2, #0]
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8012d10:	4b24      	ldr	r3, [pc, #144]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d12:	681c      	ldr	r4, [r3, #0]
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f7ff f9b7 	bl	8012088 <ptr_8to16>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	3302      	adds	r3, #2
 8012d22:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8012d24:	4b1f      	ldr	r3, [pc, #124]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d26:	681c      	ldr	r4, [r3, #0]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff f9ad 	bl	8012088 <ptr_8to16>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	3302      	adds	r3, #2
 8012d36:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8012d38:	4b1a      	ldr	r3, [pc, #104]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d3a:	681c      	ldr	r4, [r3, #0]
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7ff f9a3 	bl	8012088 <ptr_8to16>
 8012d42:	4603      	mov	r3, r0
 8012d44:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	3302      	adds	r3, #2
 8012d4a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	1c5a      	adds	r2, r3, #1
 8012d50:	607a      	str	r2, [r7, #4]
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00b      	beq.n	8012d70 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8012d58:	4b12      	ldr	r3, [pc, #72]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8012d60:	4b10      	ldr	r3, [pc, #64]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d66:	461a      	mov	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	607b      	str	r3, [r7, #4]
 8012d6e:	e003      	b.n	8012d78 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8012d70:	4b0c      	ldr	r3, [pc, #48]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2200      	movs	r2, #0
 8012d76:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8012d78:	4b0a      	ldr	r3, [pc, #40]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8012d80:	4b08      	ldr	r3, [pc, #32]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	461a      	mov	r2, r3
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8012d90:	4b04      	ldr	r3, [pc, #16]	; (8012da4 <_UG_FontSelect+0x100>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	641a      	str	r2, [r3, #64]	; 0x40
 8012d98:	e000      	b.n	8012d9c <_UG_FontSelect+0xf8>
    return;
 8012d9a:	bf00      	nop
}
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd90      	pop	{r4, r7, pc}
 8012da2:	bf00      	nop
 8012da4:	200023c0 	.word	0x200023c0

08012da8 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8012da8:	b5b0      	push	{r4, r5, r7, lr}
 8012daa:	b08c      	sub	sp, #48	; 0x30
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	4604      	mov	r4, r0
 8012db0:	4608      	mov	r0, r1
 8012db2:	4611      	mov	r1, r2
 8012db4:	461a      	mov	r2, r3
 8012db6:	4623      	mov	r3, r4
 8012db8:	80fb      	strh	r3, [r7, #6]
 8012dba:	4603      	mov	r3, r0
 8012dbc:	80bb      	strh	r3, [r7, #4]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	807b      	strh	r3, [r7, #2]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012dca:	2300      	movs	r3, #0
 8012dcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012dce:	2300      	movs	r3, #0
 8012dd0:	847b      	strh	r3, [r7, #34]	; 0x22
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8012dd6:	4b8c      	ldr	r3, [pc, #560]	; (8013008 <_UG_PutChar+0x260>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dde:	75fb      	strb	r3, [r7, #23]
 8012de0:	4b89      	ldr	r3, [pc, #548]	; (8013008 <_UG_PutChar+0x260>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012de8:	f003 0302 	and.w	r3, r3, #2
 8012dec:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012dee:	2300      	movs	r3, #0
 8012df0:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8012df2:	f107 0208 	add.w	r2, r7, #8
 8012df6:	88fb      	ldrh	r3, [r7, #6]
 8012df8:	4611      	mov	r1, r2
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ff fe06 	bl	8012a0c <_UG_GetCharData>
 8012e00:	4603      	mov	r3, r0
 8012e02:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8012e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e0c:	d102      	bne.n	8012e14 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8012e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e12:	e226      	b.n	8013262 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8012e14:	4b7c      	ldr	r3, [pc, #496]	; (8013008 <_UG_PutChar+0x260>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012e1c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8012e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d101      	bne.n	8012e28 <_UG_PutChar+0x80>
     return 0;
 8012e24:	2300      	movs	r3, #0
 8012e26:	e21c      	b.n	8013262 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8012e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e2a:	08db      	lsrs	r3, r3, #3
 8012e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8012e2e:	4b76      	ldr	r3, [pc, #472]	; (8013008 <_UG_PutChar+0x260>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012e36:	f003 0307 	and.w	r3, r3, #7
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d002      	beq.n	8012e46 <_UG_PutChar+0x9e>
 8012e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e42:	3301      	adds	r3, #1
 8012e44:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8012e46:	7dbb      	ldrb	r3, [r7, #22]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d01d      	beq.n	8012e88 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8012e4c:	4b6e      	ldr	r3, [pc, #440]	; (8013008 <_UG_PutChar+0x260>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e52:	461d      	mov	r5, r3
 8012e54:	88ba      	ldrh	r2, [r7, #4]
 8012e56:	8abb      	ldrh	r3, [r7, #20]
 8012e58:	4413      	add	r3, r2
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	3b01      	subs	r3, #1
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	b21c      	sxth	r4, r3
 8012e62:	4b69      	ldr	r3, [pc, #420]	; (8013008 <_UG_PutChar+0x260>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e6a:	b29a      	uxth	r2, r3
 8012e6c:	887b      	ldrh	r3, [r7, #2]
 8012e6e:	4413      	add	r3, r2
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	3b01      	subs	r3, #1
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	b21b      	sxth	r3, r3
 8012e78:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012e7c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8012e80:	4622      	mov	r2, r4
 8012e82:	47a8      	blx	r5
 8012e84:	4603      	mov	r3, r0
 8012e86:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8012e88:	4b5f      	ldr	r3, [pc, #380]	; (8013008 <_UG_PutChar+0x260>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	f040 8172 	bne.w	801317a <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012e96:	2300      	movs	r3, #0
 8012e98:	853b      	strh	r3, [r7, #40]	; 0x28
 8012e9a:	e0ec      	b.n	8013076 <_UG_PutChar+0x2ce>
     {
       c=0;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012ea4:	e0df      	b.n	8013066 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	1c5a      	adds	r2, r3, #1
 8012eaa:	60ba      	str	r2, [r7, #8]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012eb4:	e0ca      	b.n	801304c <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8012eb6:	7f7b      	ldrb	r3, [r7, #29]
 8012eb8:	f003 0301 	and.w	r3, r3, #1
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d033      	beq.n	8012f28 <_UG_PutChar+0x180>
           {
             if(driver)
 8012ec0:	7dbb      	ldrb	r3, [r7, #22]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d01f      	beq.n	8012f06 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8012ec6:	8c3b      	ldrh	r3, [r7, #32]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00a      	beq.n	8012ee2 <_UG_PutChar+0x13a>
 8012ecc:	7dfb      	ldrb	r3, [r7, #23]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d107      	bne.n	8012ee2 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8012ed2:	8c3a      	ldrh	r2, [r7, #32]
 8012ed4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	4610      	mov	r0, r2
 8012edc:	4798      	blx	r3
                 bpixels=0;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8012ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d10a      	bne.n	8012efe <_UG_PutChar+0x156>
 8012ee8:	7dfb      	ldrb	r3, [r7, #23]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d007      	beq.n	8012efe <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012eee:	88ba      	ldrh	r2, [r7, #4]
 8012ef0:	8bfb      	ldrh	r3, [r7, #30]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8012ef6:	887a      	ldrh	r2, [r7, #2]
 8012ef8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012efa:	4413      	add	r3, r2
 8012efc:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012efe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f00:	3301      	adds	r3, #1
 8012f02:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f04:	e096      	b.n	8013034 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8012f06:	4b40      	ldr	r3, [pc, #256]	; (8013008 <_UG_PutChar+0x260>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	88b9      	ldrh	r1, [r7, #4]
 8012f10:	8bfa      	ldrh	r2, [r7, #30]
 8012f12:	440a      	add	r2, r1
 8012f14:	b292      	uxth	r2, r2
 8012f16:	b210      	sxth	r0, r2
 8012f18:	8879      	ldrh	r1, [r7, #2]
 8012f1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f1c:	440a      	add	r2, r1
 8012f1e:	b292      	uxth	r2, r2
 8012f20:	b211      	sxth	r1, r2
 8012f22:	883a      	ldrh	r2, [r7, #0]
 8012f24:	4798      	blx	r3
 8012f26:	e085      	b.n	8013034 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8012f28:	7dbb      	ldrb	r3, [r7, #22]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d06e      	beq.n	801300c <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8012f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d064      	beq.n	8012ffe <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8012f34:	7dfb      	ldrb	r3, [r7, #23]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d15e      	bne.n	8012ff8 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8012f3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f3c:	8839      	ldrh	r1, [r7, #0]
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	4610      	mov	r0, r2
 8012f42:	4798      	blx	r3
                   fpixels=0;
 8012f44:	2300      	movs	r3, #0
 8012f46:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f48:	e059      	b.n	8012ffe <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8012f4a:	88ba      	ldrh	r2, [r7, #4]
 8012f4c:	8abb      	ldrh	r3, [r7, #20]
 8012f4e:	4413      	add	r3, r2
 8012f50:	b29a      	uxth	r2, r3
 8012f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f54:	1ad3      	subs	r3, r2, r3
 8012f56:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8012f58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d003      	beq.n	8012f6a <_UG_PutChar+0x1c2>
 8012f62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f64:	89fb      	ldrh	r3, [r7, #14]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d224      	bcs.n	8012fb4 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012f6a:	4b27      	ldr	r3, [pc, #156]	; (8013008 <_UG_PutChar+0x260>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f70:	461d      	mov	r5, r3
 8012f72:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012f76:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012f7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f7c:	89fb      	ldrh	r3, [r7, #14]
 8012f7e:	4413      	add	r3, r2
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	3b01      	subs	r3, #1
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	b21c      	sxth	r4, r3
 8012f88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012f92:	b29a      	uxth	r2, r3
 8012f94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f96:	4413      	add	r3, r2
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	b21b      	sxth	r3, r3
 8012f9c:	4622      	mov	r2, r4
 8012f9e:	47a8      	blx	r5
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012fa4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fa6:	8839      	ldrh	r1, [r7, #0]
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	4610      	mov	r0, r2
 8012fac:	4798      	blx	r3
                       fpixels=0;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	847b      	strh	r3, [r7, #34]	; 0x22
 8012fb2:	e021      	b.n	8012ff8 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012fb4:	4b14      	ldr	r3, [pc, #80]	; (8013008 <_UG_PutChar+0x260>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fba:	461c      	mov	r4, r3
 8012fbc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012fc0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012fc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fc6:	89fb      	ldrh	r3, [r7, #14]
 8012fc8:	4413      	add	r3, r2
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	b21a      	sxth	r2, r3
 8012fd2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012fd6:	47a0      	blx	r4
 8012fd8:	4603      	mov	r3, r0
 8012fda:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012fdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fde:	8839      	ldrh	r1, [r7, #0]
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	4798      	blx	r3
                       fpixels -= width;
 8012fe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fe8:	89fb      	ldrh	r3, [r7, #14]
 8012fea:	1ad3      	subs	r3, r2, r3
 8012fec:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8012fee:	88bb      	ldrh	r3, [r7, #4]
 8012ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8012ff2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8012ff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1a5      	bne.n	8012f4a <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8012ffe:	8c3b      	ldrh	r3, [r7, #32]
 8013000:	3301      	adds	r3, #1
 8013002:	843b      	strh	r3, [r7, #32]
 8013004:	e016      	b.n	8013034 <_UG_PutChar+0x28c>
 8013006:	bf00      	nop
 8013008:	200023c0 	.word	0x200023c0
             }
             else if(!trans)                           // Not accelerated output
 801300c:	7dfb      	ldrb	r3, [r7, #23]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d110      	bne.n	8013034 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8013012:	4b96      	ldr	r3, [pc, #600]	; (801326c <_UG_PutChar+0x4c4>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	88b9      	ldrh	r1, [r7, #4]
 801301c:	8bfa      	ldrh	r2, [r7, #30]
 801301e:	440a      	add	r2, r1
 8013020:	b292      	uxth	r2, r2
 8013022:	b210      	sxth	r0, r2
 8013024:	8879      	ldrh	r1, [r7, #2]
 8013026:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013028:	440a      	add	r2, r1
 801302a:	b292      	uxth	r2, r2
 801302c:	b211      	sxth	r1, r2
 801302e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013032:	4798      	blx	r3
             }
           }
           b >>= 1;
 8013034:	7f7b      	ldrb	r3, [r7, #29]
 8013036:	085b      	lsrs	r3, r3, #1
 8013038:	777b      	strb	r3, [r7, #29]
           c++;
 801303a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801303e:	b29b      	uxth	r3, r3
 8013040:	3301      	adds	r3, #1
 8013042:	b29b      	uxth	r3, r3
 8013044:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8013046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013048:	3301      	adds	r3, #1
 801304a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801304c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801304e:	2b07      	cmp	r3, #7
 8013050:	d806      	bhi.n	8013060 <_UG_PutChar+0x2b8>
 8013052:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8013056:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801305a:	429a      	cmp	r2, r3
 801305c:	f6ff af2b 	blt.w	8012eb6 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8013060:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013062:	3301      	adds	r3, #1
 8013064:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013066:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801306a:	429a      	cmp	r2, r3
 801306c:	f4ff af1b 	bcc.w	8012ea6 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013070:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013072:	3301      	adds	r3, #1
 8013074:	853b      	strh	r3, [r7, #40]	; 0x28
 8013076:	4b7d      	ldr	r3, [pc, #500]	; (801326c <_UG_PutChar+0x4c4>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801307e:	b29b      	uxth	r3, r3
 8013080:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013082:	429a      	cmp	r2, r3
 8013084:	f4ff af0a 	bcc.w	8012e9c <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8013088:	7dbb      	ldrb	r3, [r7, #22]
 801308a:	2b00      	cmp	r3, #0
 801308c:	f000 80e7 	beq.w	801325e <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8013090:	8c3b      	ldrh	r3, [r7, #32]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d009      	beq.n	80130aa <_UG_PutChar+0x302>
 8013096:	7dfb      	ldrb	r3, [r7, #23]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d106      	bne.n	80130aa <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 801309c:	8c3a      	ldrh	r2, [r7, #32]
 801309e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	4610      	mov	r0, r2
 80130a6:	4798      	blx	r3
 80130a8:	e0d9      	b.n	801325e <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 80130aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f000 80d6 	beq.w	801325e <_UG_PutChar+0x4b6>
       {
         if(!trans)
 80130b2:	7dfb      	ldrb	r3, [r7, #23]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d15c      	bne.n	8013172 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 80130b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80130ba:	8839      	ldrh	r1, [r7, #0]
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	4610      	mov	r0, r2
 80130c0:	4798      	blx	r3
 80130c2:	e0cc      	b.n	801325e <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80130c4:	88ba      	ldrh	r2, [r7, #4]
 80130c6:	8abb      	ldrh	r3, [r7, #20]
 80130c8:	4413      	add	r3, r2
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80130ce:	1ad3      	subs	r3, r2, r3
 80130d0:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80130d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d003      	beq.n	80130e4 <_UG_PutChar+0x33c>
 80130dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80130de:	8a3b      	ldrh	r3, [r7, #16]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d224      	bcs.n	801312e <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80130e4:	4b61      	ldr	r3, [pc, #388]	; (801326c <_UG_PutChar+0x4c4>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130ea:	461d      	mov	r5, r3
 80130ec:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80130f0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80130f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130f6:	8a3b      	ldrh	r3, [r7, #16]
 80130f8:	4413      	add	r3, r2
 80130fa:	b29b      	uxth	r3, r3
 80130fc:	3b01      	subs	r3, #1
 80130fe:	b29b      	uxth	r3, r3
 8013100:	b21c      	sxth	r4, r3
 8013102:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013104:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013108:	fb92 f3f3 	sdiv	r3, r2, r3
 801310c:	b29a      	uxth	r2, r3
 801310e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013110:	4413      	add	r3, r2
 8013112:	b29b      	uxth	r3, r3
 8013114:	b21b      	sxth	r3, r3
 8013116:	4622      	mov	r2, r4
 8013118:	47a8      	blx	r5
 801311a:	4603      	mov	r3, r0
 801311c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801311e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013120:	8839      	ldrh	r1, [r7, #0]
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	4610      	mov	r0, r2
 8013126:	4798      	blx	r3
               fpixels=0;
 8013128:	2300      	movs	r3, #0
 801312a:	847b      	strh	r3, [r7, #34]	; 0x22
 801312c:	e021      	b.n	8013172 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801312e:	4b4f      	ldr	r3, [pc, #316]	; (801326c <_UG_PutChar+0x4c4>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013134:	461c      	mov	r4, r3
 8013136:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801313a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801313e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013140:	8a3b      	ldrh	r3, [r7, #16]
 8013142:	4413      	add	r3, r2
 8013144:	b29b      	uxth	r3, r3
 8013146:	3b01      	subs	r3, #1
 8013148:	b29b      	uxth	r3, r3
 801314a:	b21a      	sxth	r2, r3
 801314c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013150:	47a0      	blx	r4
 8013152:	4603      	mov	r3, r0
 8013154:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013156:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013158:	8839      	ldrh	r1, [r7, #0]
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	4610      	mov	r0, r2
 801315e:	4798      	blx	r3
               fpixels -= width;
 8013160:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013162:	8a3b      	ldrh	r3, [r7, #16]
 8013164:	1ad3      	subs	r3, r2, r3
 8013166:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8013168:	88bb      	ldrh	r3, [r7, #4]
 801316a:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 801316c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801316e:	3301      	adds	r3, #1
 8013170:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8013172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1a5      	bne.n	80130c4 <_UG_PutChar+0x31c>
 8013178:	e071      	b.n	801325e <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 801317a:	4b3c      	ldr	r3, [pc, #240]	; (801326c <_UG_PutChar+0x4c4>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013182:	2b01      	cmp	r3, #1
 8013184:	d16b      	bne.n	801325e <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013186:	2300      	movs	r3, #0
 8013188:	853b      	strh	r3, [r7, #40]	; 0x28
 801318a:	e060      	b.n	801324e <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 801318c:	2300      	movs	r3, #0
 801318e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013190:	e04a      	b.n	8013228 <_UG_PutChar+0x480>
       {
         b = *data++;
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	1c5a      	adds	r2, r3, #1
 8013196:	60ba      	str	r2, [r7, #8]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 801319c:	883b      	ldrh	r3, [r7, #0]
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	7f7a      	ldrb	r2, [r7, #29]
 80131a2:	fb03 f202 	mul.w	r2, r3, r2
 80131a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	7f79      	ldrb	r1, [r7, #29]
 80131ae:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80131b2:	fb01 f303 	mul.w	r3, r1, r3
 80131b6:	4413      	add	r3, r2
 80131b8:	121b      	asrs	r3, r3, #8
 80131ba:	b21b      	sxth	r3, r3
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80131c0:	883b      	ldrh	r3, [r7, #0]
 80131c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80131c6:	7f79      	ldrb	r1, [r7, #29]
 80131c8:	fb03 f101 	mul.w	r1, r3, r1
 80131cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80131d4:	7f78      	ldrb	r0, [r7, #29]
 80131d6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80131da:	fb00 f303 	mul.w	r3, r0, r3
 80131de:	440b      	add	r3, r1
 80131e0:	121b      	asrs	r3, r3, #8
 80131e2:	b21b      	sxth	r3, r3
 80131e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80131e8:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80131ea:	4313      	orrs	r3, r2
 80131ec:	b21b      	sxth	r3, r3
 80131ee:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80131f0:	7dbb      	ldrb	r3, [r7, #22]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d005      	beq.n	8013202 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80131f6:	8a7a      	ldrh	r2, [r7, #18]
 80131f8:	69bb      	ldr	r3, [r7, #24]
 80131fa:	4611      	mov	r1, r2
 80131fc:	2001      	movs	r0, #1
 80131fe:	4798      	blx	r3
 8013200:	e00f      	b.n	8013222 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8013202:	4b1a      	ldr	r3, [pc, #104]	; (801326c <_UG_PutChar+0x4c4>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	88b9      	ldrh	r1, [r7, #4]
 801320c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801320e:	440a      	add	r2, r1
 8013210:	b292      	uxth	r2, r2
 8013212:	b210      	sxth	r0, r2
 8013214:	8879      	ldrh	r1, [r7, #2]
 8013216:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013218:	440a      	add	r2, r1
 801321a:	b292      	uxth	r2, r2
 801321c:	b211      	sxth	r1, r2
 801321e:	8a7a      	ldrh	r2, [r7, #18]
 8013220:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8013222:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013224:	3301      	adds	r3, #1
 8013226:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013228:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801322a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801322e:	429a      	cmp	r2, r3
 8013230:	dbaf      	blt.n	8013192 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	4a0d      	ldr	r2, [pc, #52]	; (801326c <_UG_PutChar+0x4c4>)
 8013236:	6812      	ldr	r2, [r2, #0]
 8013238:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 801323c:	4611      	mov	r1, r2
 801323e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013242:	1a8a      	subs	r2, r1, r2
 8013244:	4413      	add	r3, r2
 8013246:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801324a:	3301      	adds	r3, #1
 801324c:	853b      	strh	r3, [r7, #40]	; 0x28
 801324e:	4b07      	ldr	r3, [pc, #28]	; (801326c <_UG_PutChar+0x4c4>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013256:	b29b      	uxth	r3, r3
 8013258:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801325a:	429a      	cmp	r2, r3
 801325c:	d396      	bcc.n	801318c <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 801325e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3730      	adds	r7, #48	; 0x30
 8013266:	46bd      	mov	sp, r7
 8013268:	bdb0      	pop	{r4, r5, r7, pc}
 801326a:	bf00      	nop
 801326c:	200023c0 	.word	0x200023c0

08013270 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8013270:	b480      	push	{r7}
 8013272:	b089      	sub	sp, #36	; 0x24
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8013278:	4b57      	ldr	r3, [pc, #348]	; (80133d8 <_UG_ProcessTouchData+0x168>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	88db      	ldrh	r3, [r3, #6]
 801327e:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8013280:	4b55      	ldr	r3, [pc, #340]	; (80133d8 <_UG_ProcessTouchData+0x168>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	891b      	ldrh	r3, [r3, #8]
 8013286:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8013288:	4b53      	ldr	r3, [pc, #332]	; (80133d8 <_UG_ProcessTouchData+0x168>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	791b      	ldrb	r3, [r3, #4]
 801328e:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013296:	2300      	movs	r3, #0
 8013298:	83fb      	strh	r3, [r7, #30]
 801329a:	e090      	b.n	80133be <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	685a      	ldr	r2, [r3, #4]
 80132a0:	8bfb      	ldrh	r3, [r7, #30]
 80132a2:	015b      	lsls	r3, r3, #5
 80132a4:	4413      	add	r3, r2
 80132a6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	785b      	ldrb	r3, [r3, #1]
 80132b2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80132b4:	7bfb      	ldrb	r3, [r7, #15]
 80132b6:	f003 0301 	and.w	r3, r3, #1
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d179      	bne.n	80133b2 <_UG_ProcessTouchData+0x142>
 80132be:	7bfb      	ldrb	r3, [r7, #15]
 80132c0:	f003 0302 	and.w	r3, r3, #2
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d074      	beq.n	80133b2 <_UG_ProcessTouchData+0x142>
 80132c8:	7bfb      	ldrb	r3, [r7, #15]
 80132ca:	f003 0308 	and.w	r3, r3, #8
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d06f      	beq.n	80133b2 <_UG_ProcessTouchData+0x142>
 80132d2:	7bfb      	ldrb	r3, [r7, #15]
 80132d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d16a      	bne.n	80133b2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80132dc:	7dfb      	ldrb	r3, [r7, #23]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d047      	beq.n	8013372 <_UG_ProcessTouchData+0x102>
 80132e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80132e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ea:	d042      	beq.n	8013372 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80132ec:	7f7b      	ldrb	r3, [r7, #29]
 80132ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d107      	bne.n	8013306 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80132f6:	7f7b      	ldrb	r3, [r7, #29]
 80132f8:	f043 0305 	orr.w	r3, r3, #5
 80132fc:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80132fe:	7f7b      	ldrb	r3, [r7, #29]
 8013300:	f023 0318 	bic.w	r3, r3, #24
 8013304:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013306:	7f7b      	ldrb	r3, [r7, #29]
 8013308:	f023 0320 	bic.w	r3, r3, #32
 801330c:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013314:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013318:	429a      	cmp	r2, r3
 801331a:	db25      	blt.n	8013368 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013322:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013326:	429a      	cmp	r2, r3
 8013328:	dc1e      	bgt.n	8013368 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013330:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013334:	429a      	cmp	r2, r3
 8013336:	db17      	blt.n	8013368 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801333e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013342:	429a      	cmp	r2, r3
 8013344:	dc10      	bgt.n	8013368 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013346:	7f7b      	ldrb	r3, [r7, #29]
 8013348:	f043 0320 	orr.w	r3, r3, #32
 801334c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801334e:	7f7b      	ldrb	r3, [r7, #29]
 8013350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013354:	2b00      	cmp	r3, #0
 8013356:	d107      	bne.n	8013368 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013358:	7f7b      	ldrb	r3, [r7, #29]
 801335a:	f023 0304 	bic.w	r3, r3, #4
 801335e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8013360:	7f7b      	ldrb	r3, [r7, #29]
 8013362:	f043 0302 	orr.w	r3, r3, #2
 8013366:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8013368:	7f7b      	ldrb	r3, [r7, #29]
 801336a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801336e:	777b      	strb	r3, [r7, #29]
 8013370:	e01f      	b.n	80133b2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013372:	7f7b      	ldrb	r3, [r7, #29]
 8013374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013378:	2b00      	cmp	r3, #0
 801337a:	d01a      	beq.n	80133b2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 801337c:	7f7b      	ldrb	r3, [r7, #29]
 801337e:	f003 0320 	and.w	r3, r3, #32
 8013382:	2b00      	cmp	r3, #0
 8013384:	d004      	beq.n	8013390 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8013386:	7f7b      	ldrb	r3, [r7, #29]
 8013388:	f043 0308 	orr.w	r3, r3, #8
 801338c:	777b      	strb	r3, [r7, #29]
 801338e:	e003      	b.n	8013398 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8013390:	7f7b      	ldrb	r3, [r7, #29]
 8013392:	f043 0310 	orr.w	r3, r3, #16
 8013396:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013398:	7f7b      	ldrb	r3, [r7, #29]
 801339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d003      	beq.n	80133aa <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80133a2:	7f7b      	ldrb	r3, [r7, #29]
 80133a4:	f043 0301 	orr.w	r3, r3, #1
 80133a8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80133aa:	7f7b      	ldrb	r3, [r7, #29]
 80133ac:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80133b0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	7f7a      	ldrb	r2, [r7, #29]
 80133b6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80133b8:	8bfb      	ldrh	r3, [r7, #30]
 80133ba:	3301      	adds	r3, #1
 80133bc:	83fb      	strh	r3, [r7, #30]
 80133be:	8bfa      	ldrh	r2, [r7, #30]
 80133c0:	8abb      	ldrh	r3, [r7, #20]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	f4ff af6a 	bcc.w	801329c <_UG_ProcessTouchData+0x2c>
   }
}
 80133c8:	bf00      	nop
 80133ca:	bf00      	nop
 80133cc:	3724      	adds	r7, #36	; 0x24
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	200023c0 	.word	0x200023c0

080133dc <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80133ea:	2300      	movs	r3, #0
 80133ec:	82fb      	strh	r3, [r7, #22]
 80133ee:	e035      	b.n	801345c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	685a      	ldr	r2, [r3, #4]
 80133f4:	8afb      	ldrh	r3, [r7, #22]
 80133f6:	015b      	lsls	r3, r3, #5
 80133f8:	4413      	add	r3, r2
 80133fa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	785b      	ldrb	r3, [r3, #1]
 8013406:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013408:	7bfb      	ldrb	r3, [r7, #15]
 801340a:	f003 0301 	and.w	r3, r3, #1
 801340e:	2b00      	cmp	r3, #0
 8013410:	d121      	bne.n	8013456 <_UG_UpdateObjects+0x7a>
 8013412:	7bfb      	ldrb	r3, [r7, #15]
 8013414:	f003 0302 	and.w	r3, r3, #2
 8013418:	2b00      	cmp	r3, #0
 801341a:	d01c      	beq.n	8013456 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 801341c:	7bfb      	ldrb	r3, [r7, #15]
 801341e:	f003 0320 	and.w	r3, r3, #32
 8013422:	2b00      	cmp	r3, #0
 8013424:	d004      	beq.n	8013430 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	6939      	ldr	r1, [r7, #16]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013430:	7bfb      	ldrb	r3, [r7, #15]
 8013432:	f003 0308 	and.w	r3, r3, #8
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00d      	beq.n	8013456 <_UG_UpdateObjects+0x7a>
 801343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801343e:	2b00      	cmp	r3, #0
 8013440:	da09      	bge.n	8013456 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8013442:	7bbb      	ldrb	r3, [r7, #14]
 8013444:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013448:	2b00      	cmp	r3, #0
 801344a:	d004      	beq.n	8013456 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	6939      	ldr	r1, [r7, #16]
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8013456:	8afb      	ldrh	r3, [r7, #22]
 8013458:	3301      	adds	r3, #1
 801345a:	82fb      	strh	r3, [r7, #22]
 801345c:	8afa      	ldrh	r2, [r7, #22]
 801345e:	8abb      	ldrh	r3, [r7, #20]
 8013460:	429a      	cmp	r2, r3
 8013462:	d3c5      	bcc.n	80133f0 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8013464:	bf00      	nop
 8013466:	bf00      	nop
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
	...

08013470 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8013478:	4b22      	ldr	r3, [pc, #136]	; (8013504 <_UG_HandleEvents+0x94>)
 801347a:	2200      	movs	r2, #0
 801347c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 801347e:	4b21      	ldr	r3, [pc, #132]	; (8013504 <_UG_HandleEvents+0x94>)
 8013480:	2202      	movs	r2, #2
 8013482:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801348a:	2300      	movs	r3, #0
 801348c:	82fb      	strh	r3, [r7, #22]
 801348e:	e02f      	b.n	80134f0 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685a      	ldr	r2, [r3, #4]
 8013494:	8afb      	ldrh	r3, [r7, #22]
 8013496:	015b      	lsls	r3, r3, #5
 8013498:	4413      	add	r3, r2
 801349a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80134a2:	7bfb      	ldrb	r3, [r7, #15]
 80134a4:	f003 0301 	and.w	r3, r3, #1
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d11e      	bne.n	80134ea <_UG_HandleEvents+0x7a>
 80134ac:	7bfb      	ldrb	r3, [r7, #15]
 80134ae:	f003 0302 	and.w	r3, r3, #2
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d019      	beq.n	80134ea <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	7e9b      	ldrb	r3, [r3, #26]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d015      	beq.n	80134ea <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80134be:	4a11      	ldr	r2, [pc, #68]	; (8013504 <_UG_HandleEvents+0x94>)
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	7e1a      	ldrb	r2, [r3, #24]
 80134c8:	4b0e      	ldr	r3, [pc, #56]	; (8013504 <_UG_HandleEvents+0x94>)
 80134ca:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	7e5a      	ldrb	r2, [r3, #25]
 80134d0:	4b0c      	ldr	r3, [pc, #48]	; (8013504 <_UG_HandleEvents+0x94>)
 80134d2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	7e9a      	ldrb	r2, [r3, #26]
 80134d8:	4b0a      	ldr	r3, [pc, #40]	; (8013504 <_UG_HandleEvents+0x94>)
 80134da:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e0:	4808      	ldr	r0, [pc, #32]	; (8013504 <_UG_HandleEvents+0x94>)
 80134e2:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	2200      	movs	r2, #0
 80134e8:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80134ea:	8afb      	ldrh	r3, [r7, #22]
 80134ec:	3301      	adds	r3, #1
 80134ee:	82fb      	strh	r3, [r7, #22]
 80134f0:	8afa      	ldrh	r2, [r7, #22]
 80134f2:	8abb      	ldrh	r3, [r7, #20]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d3cb      	bcc.n	8013490 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80134f8:	bf00      	nop
 80134fa:	bf00      	nop
 80134fc:	3718      	adds	r7, #24
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	200023d4 	.word	0x200023d4

08013508 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013508:	b590      	push	{r4, r7, lr}
 801350a:	b08f      	sub	sp, #60	; 0x3c
 801350c:	af02      	add	r7, sp, #8
 801350e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	2b00      	cmp	r3, #0
 8013516:	f000 812c 	beq.w	8013772 <_UG_PutText+0x26a>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 8127 	beq.w	8013772 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	89db      	ldrh	r3, [r3, #14]
 8013528:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	895b      	ldrh	r3, [r3, #10]
 801352e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	3302      	adds	r3, #2
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 801353a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801353e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013542:	1ad2      	subs	r2, r2, r3
 8013544:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013548:	429a      	cmp	r2, r3
 801354a:	f2c0 8114 	blt.w	8013776 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	891b      	ldrh	r3, [r3, #8]
 8013552:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	899b      	ldrh	r3, [r3, #12]
 8013558:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	7d1b      	ldrb	r3, [r3, #20]
 801355e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	8adb      	ldrh	r3, [r3, #22]
 8013564:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	8b1b      	ldrh	r3, [r3, #24]
 801356a:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff fb92 	bl	8012ca4 <_UG_FontSelect>

   rc=1;
 8013580:	2301      	movs	r3, #1
 8013582:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013588:	4b80      	ldr	r3, [pc, #512]	; (801378c <_UG_PutText+0x284>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013590:	2b00      	cmp	r3, #0
 8013592:	d107      	bne.n	80135a4 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8013594:	f107 0308 	add.w	r3, r7, #8
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff f9bf 	bl	801291c <_UG_DecodeUTF8>
 801359e:	4603      	mov	r3, r0
 80135a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80135a2:	e004      	b.n	80135ae <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	1c5a      	adds	r2, r3, #1
 80135a8:	60ba      	str	r2, [r7, #8]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80135ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d006      	beq.n	80135c2 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80135b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135b6:	2b0a      	cmp	r3, #10
 80135b8:	d1e6      	bne.n	8013588 <_UG_PutText+0x80>
 80135ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135bc:	3301      	adds	r3, #1
 80135be:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80135c0:	e7e2      	b.n	8013588 <_UG_PutText+0x80>
     if(!chr) break;
 80135c2:	bf00      	nop
   }

   yp = 0;
 80135c4:	2300      	movs	r3, #0
 80135c6:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80135c8:	7e7b      	ldrb	r3, [r7, #25]
 80135ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d01f      	beq.n	8013612 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80135d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80135d4:	8c3b      	ldrh	r3, [r7, #32]
 80135d6:	1ad3      	subs	r3, r2, r3
 80135d8:	b29b      	uxth	r3, r3
 80135da:	3301      	adds	r3, #1
 80135dc:	b29b      	uxth	r3, r3
 80135de:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 80135e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80135e2:	8bfb      	ldrh	r3, [r7, #30]
 80135e4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80135e6:	fb11 f303 	smulbb	r3, r1, r3
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 80135f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80135f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135f6:	3b01      	subs	r3, #1
 80135f8:	b299      	uxth	r1, r3
 80135fa:	8abb      	ldrh	r3, [r7, #20]
 80135fc:	fb11 f303 	smulbb	r3, r1, r3
 8013600:	b29b      	uxth	r3, r3
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	b29b      	uxth	r3, r3
 8013606:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013608:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801360c:	2b00      	cmp	r3, #0
 801360e:	f2c0 80b4 	blt.w	801377a <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8013612:	7e7b      	ldrb	r3, [r7, #25]
 8013614:	f003 0310 	and.w	r3, r3, #16
 8013618:	2b00      	cmp	r3, #0
 801361a:	d003      	beq.n	8013624 <_UG_PutText+0x11c>
 801361c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013620:	105b      	asrs	r3, r3, #1
 8013622:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8013624:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013626:	8c3b      	ldrh	r3, [r7, #32]
 8013628:	4413      	add	r3, r2
 801362a:	b29b      	uxth	r3, r3
 801362c:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 801362e:	2300      	movs	r3, #0
 8013630:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801363a:	4b54      	ldr	r3, [pc, #336]	; (801378c <_UG_PutText+0x284>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013642:	2b00      	cmp	r3, #0
 8013644:	d107      	bne.n	8013656 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8013646:	f107 0308 	add.w	r3, r7, #8
 801364a:	4618      	mov	r0, r3
 801364c:	f7ff f966 	bl	801291c <_UG_DecodeUTF8>
 8013650:	4603      	mov	r3, r0
 8013652:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013654:	e004      	b.n	8013660 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	1c5a      	adds	r2, r3, #1
 801365a:	60ba      	str	r2, [r7, #8]
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8013660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013662:	2b00      	cmp	r3, #0
 8013664:	d01b      	beq.n	801369e <_UG_PutText+0x196>
 8013666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013668:	2b0a      	cmp	r3, #10
 801366a:	d018      	beq.n	801369e <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 801366c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801366e:	2100      	movs	r1, #0
 8013670:	4618      	mov	r0, r3
 8013672:	f7ff f9cb 	bl	8012a0c <_UG_GetCharData>
 8013676:	4603      	mov	r3, r0
 8013678:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 801367a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013682:	d00a      	beq.n	801369a <_UG_PutText+0x192>
         sl++;
 8013684:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013686:	3301      	adds	r3, #1
 8013688:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 801368a:	8a7a      	ldrh	r2, [r7, #18]
 801368c:	8afb      	ldrh	r3, [r7, #22]
 801368e:	4413      	add	r3, r2
 8013690:	b29a      	uxth	r2, r3
 8013692:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013694:	4413      	add	r3, r2
 8013696:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013698:	e7cf      	b.n	801363a <_UG_PutText+0x132>
         if (w == -1){continue;}
 801369a:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801369c:	e7cd      	b.n	801363a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 801369e:	8afb      	ldrh	r3, [r7, #22]
 80136a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80136a6:	8b7a      	ldrh	r2, [r7, #26]
 80136a8:	8bbb      	ldrh	r3, [r7, #28]
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	3301      	adds	r3, #1
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80136b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80136b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136b8:	1ad3      	subs	r3, r2, r3
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80136be:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	db5b      	blt.n	801377e <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80136c6:	7e7b      	ldrb	r3, [r7, #25]
 80136c8:	f003 0301 	and.w	r3, r3, #1
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d002      	beq.n	80136d6 <_UG_PutText+0x1ce>
 80136d0:	2300      	movs	r3, #0
 80136d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80136d4:	e008      	b.n	80136e8 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80136d6:	7e7b      	ldrb	r3, [r7, #25]
 80136d8:	f003 0302 	and.w	r3, r3, #2
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d003      	beq.n	80136e8 <_UG_PutText+0x1e0>
 80136e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80136e4:	105b      	asrs	r3, r3, #1
 80136e6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 80136e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80136ea:	8bbb      	ldrh	r3, [r7, #28]
 80136ec:	4413      	add	r3, r2
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80136f2:	4b26      	ldr	r3, [pc, #152]	; (801378c <_UG_PutText+0x284>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d107      	bne.n	801370e <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80136fe:	f107 030c 	add.w	r3, r7, #12
 8013702:	4618      	mov	r0, r3
 8013704:	f7ff f90a 	bl	801291c <_UG_DecodeUTF8>
 8013708:	4603      	mov	r3, r0
 801370a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801370c:	e004      	b.n	8013718 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	1c5a      	adds	r2, r3, #1
 8013712:	60fa      	str	r2, [r7, #12]
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8013718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801371a:	2b00      	cmp	r3, #0
 801371c:	d031      	beq.n	8013782 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 801371e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013720:	2b0a      	cmp	r3, #10
 8013722:	d01c      	beq.n	801375e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	8a1c      	ldrh	r4, [r3, #16]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	8a5b      	ldrh	r3, [r3, #18]
 801372c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013730:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8013734:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8013736:	9300      	str	r3, [sp, #0]
 8013738:	4623      	mov	r3, r4
 801373a:	f7ff fb35 	bl	8012da8 <_UG_PutChar>
 801373e:	4603      	mov	r3, r0
 8013740:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8013742:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801374a:	d0d2      	beq.n	80136f2 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 801374c:	8a7a      	ldrh	r2, [r7, #18]
 801374e:	8afb      	ldrh	r3, [r7, #22]
 8013750:	4413      	add	r3, r2
 8013752:	b29a      	uxth	r2, r3
 8013754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013756:	4413      	add	r3, r2
 8013758:	b29b      	uxth	r3, r3
 801375a:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801375c:	e7c9      	b.n	80136f2 <_UG_PutText+0x1ea>
           break;
 801375e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8013760:	8bfa      	ldrh	r2, [r7, #30]
 8013762:	8abb      	ldrh	r3, [r7, #20]
 8013764:	4413      	add	r3, r2
 8013766:	b29a      	uxth	r2, r3
 8013768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801376a:	4413      	add	r3, r2
 801376c:	b29b      	uxth	r3, r3
 801376e:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8013770:	e75d      	b.n	801362e <_UG_PutText+0x126>
     return;
 8013772:	bf00      	nop
 8013774:	e006      	b.n	8013784 <_UG_PutText+0x27c>
     return;
 8013776:	bf00      	nop
 8013778:	e004      	b.n	8013784 <_UG_PutText+0x27c>
        return;
 801377a:	bf00      	nop
 801377c:	e002      	b.n	8013784 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 801377e:	bf00      	nop
 8013780:	e000      	b.n	8013784 <_UG_PutText+0x27c>
           return;
 8013782:	bf00      	nop
   }
}
 8013784:	3734      	adds	r7, #52	; 0x34
 8013786:	46bd      	mov	sp, r7
 8013788:	bd90      	pop	{r4, r7, pc}
 801378a:	bf00      	nop
 801378c:	200023c0 	.word	0x200023c0

08013790 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8013790:	b5b0      	push	{r4, r5, r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af02      	add	r7, sp, #8
 8013796:	4604      	mov	r4, r0
 8013798:	4608      	mov	r0, r1
 801379a:	4611      	mov	r1, r2
 801379c:	461a      	mov	r2, r3
 801379e:	4623      	mov	r3, r4
 80137a0:	80fb      	strh	r3, [r7, #6]
 80137a2:	4603      	mov	r3, r0
 80137a4:	80bb      	strh	r3, [r7, #4]
 80137a6:	460b      	mov	r3, r1
 80137a8:	807b      	strh	r3, [r7, #2]
 80137aa:	4613      	mov	r3, r2
 80137ac:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80137ae:	887b      	ldrh	r3, [r7, #2]
 80137b0:	3b01      	subs	r3, #1
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	b21c      	sxth	r4, r3
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	1c9a      	adds	r2, r3, #2
 80137ba:	61ba      	str	r2, [r7, #24]
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80137c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80137c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80137ca:	9300      	str	r3, [sp, #0]
 80137cc:	4613      	mov	r3, r2
 80137ce:	4622      	mov	r2, r4
 80137d0:	f7fe fee0 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80137d4:	88bb      	ldrh	r3, [r7, #4]
 80137d6:	3301      	adds	r3, #1
 80137d8:	b29b      	uxth	r3, r3
 80137da:	b219      	sxth	r1, r3
 80137dc:	883b      	ldrh	r3, [r7, #0]
 80137de:	3b01      	subs	r3, #1
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	b21c      	sxth	r4, r3
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	1c9a      	adds	r2, r3, #2
 80137e8:	61ba      	str	r2, [r7, #24]
 80137ea:	881b      	ldrh	r3, [r3, #0]
 80137ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80137f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80137f4:	9300      	str	r3, [sp, #0]
 80137f6:	4623      	mov	r3, r4
 80137f8:	f7fe fecc 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	1c9a      	adds	r2, r3, #2
 8013800:	61ba      	str	r2, [r7, #24]
 8013802:	881b      	ldrh	r3, [r3, #0]
 8013804:	f9b7 4000 	ldrsh.w	r4, [r7]
 8013808:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801380c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8013810:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	4623      	mov	r3, r4
 8013818:	f7fe febc 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 801381c:	883b      	ldrh	r3, [r7, #0]
 801381e:	3b01      	subs	r3, #1
 8013820:	b29b      	uxth	r3, r3
 8013822:	b21c      	sxth	r4, r3
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	1c9a      	adds	r2, r3, #2
 8013828:	61ba      	str	r2, [r7, #24]
 801382a:	881b      	ldrh	r3, [r3, #0]
 801382c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013830:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8013834:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8013838:	9300      	str	r3, [sp, #0]
 801383a:	4623      	mov	r3, r4
 801383c:	f7fe feaa 	bl	8012594 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8013840:	88fb      	ldrh	r3, [r7, #6]
 8013842:	3301      	adds	r3, #1
 8013844:	b29b      	uxth	r3, r3
 8013846:	b218      	sxth	r0, r3
 8013848:	88bb      	ldrh	r3, [r7, #4]
 801384a:	3301      	adds	r3, #1
 801384c:	b29b      	uxth	r3, r3
 801384e:	b219      	sxth	r1, r3
 8013850:	887b      	ldrh	r3, [r7, #2]
 8013852:	3b02      	subs	r3, #2
 8013854:	b29b      	uxth	r3, r3
 8013856:	b21c      	sxth	r4, r3
 8013858:	88bb      	ldrh	r3, [r7, #4]
 801385a:	3301      	adds	r3, #1
 801385c:	b29b      	uxth	r3, r3
 801385e:	b21d      	sxth	r5, r3
 8013860:	69bb      	ldr	r3, [r7, #24]
 8013862:	1c9a      	adds	r2, r3, #2
 8013864:	61ba      	str	r2, [r7, #24]
 8013866:	881b      	ldrh	r3, [r3, #0]
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	462b      	mov	r3, r5
 801386c:	4622      	mov	r2, r4
 801386e:	f7fe fe91 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8013872:	88fb      	ldrh	r3, [r7, #6]
 8013874:	3301      	adds	r3, #1
 8013876:	b29b      	uxth	r3, r3
 8013878:	b218      	sxth	r0, r3
 801387a:	88bb      	ldrh	r3, [r7, #4]
 801387c:	3302      	adds	r3, #2
 801387e:	b29b      	uxth	r3, r3
 8013880:	b219      	sxth	r1, r3
 8013882:	88fb      	ldrh	r3, [r7, #6]
 8013884:	3301      	adds	r3, #1
 8013886:	b29b      	uxth	r3, r3
 8013888:	b21c      	sxth	r4, r3
 801388a:	883b      	ldrh	r3, [r7, #0]
 801388c:	3b02      	subs	r3, #2
 801388e:	b29b      	uxth	r3, r3
 8013890:	b21d      	sxth	r5, r3
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	1c9a      	adds	r2, r3, #2
 8013896:	61ba      	str	r2, [r7, #24]
 8013898:	881b      	ldrh	r3, [r3, #0]
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	462b      	mov	r3, r5
 801389e:	4622      	mov	r2, r4
 80138a0:	f7fe fe78 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80138a4:	88fb      	ldrh	r3, [r7, #6]
 80138a6:	3301      	adds	r3, #1
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	b218      	sxth	r0, r3
 80138ac:	883b      	ldrh	r3, [r7, #0]
 80138ae:	3b01      	subs	r3, #1
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	b219      	sxth	r1, r3
 80138b4:	887b      	ldrh	r3, [r7, #2]
 80138b6:	3b01      	subs	r3, #1
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	b21c      	sxth	r4, r3
 80138bc:	883b      	ldrh	r3, [r7, #0]
 80138be:	3b01      	subs	r3, #1
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	b21d      	sxth	r5, r3
 80138c4:	69bb      	ldr	r3, [r7, #24]
 80138c6:	1c9a      	adds	r2, r3, #2
 80138c8:	61ba      	str	r2, [r7, #24]
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	9300      	str	r3, [sp, #0]
 80138ce:	462b      	mov	r3, r5
 80138d0:	4622      	mov	r2, r4
 80138d2:	f7fe fe5f 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80138d6:	887b      	ldrh	r3, [r7, #2]
 80138d8:	3b01      	subs	r3, #1
 80138da:	b29b      	uxth	r3, r3
 80138dc:	b218      	sxth	r0, r3
 80138de:	88bb      	ldrh	r3, [r7, #4]
 80138e0:	3301      	adds	r3, #1
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	b219      	sxth	r1, r3
 80138e6:	887b      	ldrh	r3, [r7, #2]
 80138e8:	3b01      	subs	r3, #1
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	b21c      	sxth	r4, r3
 80138ee:	883b      	ldrh	r3, [r7, #0]
 80138f0:	3b02      	subs	r3, #2
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	b21d      	sxth	r5, r3
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	1c9a      	adds	r2, r3, #2
 80138fa:	61ba      	str	r2, [r7, #24]
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	462b      	mov	r3, r5
 8013902:	4622      	mov	r2, r4
 8013904:	f7fe fe46 	bl	8012594 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8013908:	88fb      	ldrh	r3, [r7, #6]
 801390a:	3302      	adds	r3, #2
 801390c:	b29b      	uxth	r3, r3
 801390e:	b218      	sxth	r0, r3
 8013910:	88bb      	ldrh	r3, [r7, #4]
 8013912:	3302      	adds	r3, #2
 8013914:	b29b      	uxth	r3, r3
 8013916:	b219      	sxth	r1, r3
 8013918:	887b      	ldrh	r3, [r7, #2]
 801391a:	3b03      	subs	r3, #3
 801391c:	b29b      	uxth	r3, r3
 801391e:	b21c      	sxth	r4, r3
 8013920:	88bb      	ldrh	r3, [r7, #4]
 8013922:	3302      	adds	r3, #2
 8013924:	b29b      	uxth	r3, r3
 8013926:	b21d      	sxth	r5, r3
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	1c9a      	adds	r2, r3, #2
 801392c:	61ba      	str	r2, [r7, #24]
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	9300      	str	r3, [sp, #0]
 8013932:	462b      	mov	r3, r5
 8013934:	4622      	mov	r2, r4
 8013936:	f7fe fe2d 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801393a:	88fb      	ldrh	r3, [r7, #6]
 801393c:	3302      	adds	r3, #2
 801393e:	b29b      	uxth	r3, r3
 8013940:	b218      	sxth	r0, r3
 8013942:	88bb      	ldrh	r3, [r7, #4]
 8013944:	3303      	adds	r3, #3
 8013946:	b29b      	uxth	r3, r3
 8013948:	b219      	sxth	r1, r3
 801394a:	88fb      	ldrh	r3, [r7, #6]
 801394c:	3302      	adds	r3, #2
 801394e:	b29b      	uxth	r3, r3
 8013950:	b21c      	sxth	r4, r3
 8013952:	883b      	ldrh	r3, [r7, #0]
 8013954:	3b03      	subs	r3, #3
 8013956:	b29b      	uxth	r3, r3
 8013958:	b21d      	sxth	r5, r3
 801395a:	69bb      	ldr	r3, [r7, #24]
 801395c:	1c9a      	adds	r2, r3, #2
 801395e:	61ba      	str	r2, [r7, #24]
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	462b      	mov	r3, r5
 8013966:	4622      	mov	r2, r4
 8013968:	f7fe fe14 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 801396c:	88fb      	ldrh	r3, [r7, #6]
 801396e:	3302      	adds	r3, #2
 8013970:	b29b      	uxth	r3, r3
 8013972:	b218      	sxth	r0, r3
 8013974:	883b      	ldrh	r3, [r7, #0]
 8013976:	3b02      	subs	r3, #2
 8013978:	b29b      	uxth	r3, r3
 801397a:	b219      	sxth	r1, r3
 801397c:	887b      	ldrh	r3, [r7, #2]
 801397e:	3b02      	subs	r3, #2
 8013980:	b29b      	uxth	r3, r3
 8013982:	b21c      	sxth	r4, r3
 8013984:	883b      	ldrh	r3, [r7, #0]
 8013986:	3b02      	subs	r3, #2
 8013988:	b29b      	uxth	r3, r3
 801398a:	b21d      	sxth	r5, r3
 801398c:	69bb      	ldr	r3, [r7, #24]
 801398e:	1c9a      	adds	r2, r3, #2
 8013990:	61ba      	str	r2, [r7, #24]
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	9300      	str	r3, [sp, #0]
 8013996:	462b      	mov	r3, r5
 8013998:	4622      	mov	r2, r4
 801399a:	f7fe fdfb 	bl	8012594 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 801399e:	887b      	ldrh	r3, [r7, #2]
 80139a0:	3b02      	subs	r3, #2
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	b218      	sxth	r0, r3
 80139a6:	88bb      	ldrh	r3, [r7, #4]
 80139a8:	3302      	adds	r3, #2
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	b219      	sxth	r1, r3
 80139ae:	887b      	ldrh	r3, [r7, #2]
 80139b0:	3b02      	subs	r3, #2
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	b21a      	sxth	r2, r3
 80139b6:	883b      	ldrh	r3, [r7, #0]
 80139b8:	3b03      	subs	r3, #3
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	b21c      	sxth	r4, r3
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	881b      	ldrh	r3, [r3, #0]
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	4623      	mov	r3, r4
 80139c6:	f7fe fde5 	bl	8012594 <UG_DrawLine>
}
 80139ca:	bf00      	nop
 80139cc:	3708      	adds	r7, #8
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080139d4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	4603      	mov	r3, r0
 80139dc:	6039      	str	r1, [r7, #0]
 80139de:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80139e0:	79fb      	ldrb	r3, [r7, #7]
 80139e2:	2b03      	cmp	r3, #3
 80139e4:	d810      	bhi.n	8013a08 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80139e6:	4b0b      	ldr	r3, [pc, #44]	; (8013a14 <UG_DriverRegister+0x40>)
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	79fb      	ldrb	r3, [r7, #7]
 80139ec:	330a      	adds	r3, #10
 80139ee:	00db      	lsls	r3, r3, #3
 80139f0:	4413      	add	r3, r2
 80139f2:	683a      	ldr	r2, [r7, #0]
 80139f4:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80139f6:	4b07      	ldr	r3, [pc, #28]	; (8013a14 <UG_DriverRegister+0x40>)
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	79fb      	ldrb	r3, [r7, #7]
 80139fc:	330a      	adds	r3, #10
 80139fe:	00db      	lsls	r3, r3, #3
 8013a00:	4413      	add	r3, r2
 8013a02:	2203      	movs	r2, #3
 8013a04:	721a      	strb	r2, [r3, #8]
 8013a06:	e000      	b.n	8013a0a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013a08:	bf00      	nop
}
 8013a0a:	370c      	adds	r7, #12
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr
 8013a14:	200023c0 	.word	0x200023c0

08013a18 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8013a1e:	4b5e      	ldr	r3, [pc, #376]	; (8013b98 <UG_Update+0x180>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013a26:	f003 0301 	and.w	r3, r3, #1
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00a      	beq.n	8013a44 <UG_Update+0x2c>
 8013a2e:	4b5a      	ldr	r3, [pc, #360]	; (8013b98 <UG_Update+0x180>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8013a36:	4b58      	ldr	r3, [pc, #352]	; (8013b98 <UG_Update+0x180>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f022 0201 	bic.w	r2, r2, #1
 8013a3e:	b2d2      	uxtb	r2, r2
 8013a40:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8013a44:	4b54      	ldr	r3, [pc, #336]	; (8013b98 <UG_Update+0x180>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	68da      	ldr	r2, [r3, #12]
 8013a4a:	4b53      	ldr	r3, [pc, #332]	; (8013b98 <UG_Update+0x180>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	691b      	ldr	r3, [r3, #16]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d071      	beq.n	8013b38 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8013a54:	4b50      	ldr	r3, [pc, #320]	; (8013b98 <UG_Update+0x180>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d06c      	beq.n	8013b38 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8013a5e:	4b4e      	ldr	r3, [pc, #312]	; (8013b98 <UG_Update+0x180>)
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	4b4d      	ldr	r3, [pc, #308]	; (8013b98 <UG_Update+0x180>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6912      	ldr	r2, [r2, #16]
 8013a68:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8013a6a:	4b4b      	ldr	r3, [pc, #300]	; (8013b98 <UG_Update+0x180>)
 8013a6c:	681a      	ldr	r2, [r3, #0]
 8013a6e:	4b4a      	ldr	r3, [pc, #296]	; (8013b98 <UG_Update+0x180>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	68d2      	ldr	r2, [r2, #12]
 8013a74:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8013a76:	4b48      	ldr	r3, [pc, #288]	; (8013b98 <UG_Update+0x180>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	695b      	ldr	r3, [r3, #20]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d045      	beq.n	8013b0c <UG_Update+0xf4>
 8013a80:	4b45      	ldr	r3, [pc, #276]	; (8013b98 <UG_Update+0x180>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	695b      	ldr	r3, [r3, #20]
 8013a86:	7d9b      	ldrb	r3, [r3, #22]
 8013a88:	f003 0302 	and.w	r3, r3, #2
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d03d      	beq.n	8013b0c <UG_Update+0xf4>
 8013a90:	4b41      	ldr	r3, [pc, #260]	; (8013b98 <UG_Update+0x180>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	695b      	ldr	r3, [r3, #20]
 8013a96:	7a1b      	ldrb	r3, [r3, #8]
 8013a98:	f003 0308 	and.w	r3, r3, #8
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d035      	beq.n	8013b0c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8013aa0:	4b3d      	ldr	r3, [pc, #244]	; (8013b98 <UG_Update+0x180>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	695b      	ldr	r3, [r3, #20]
 8013aa6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8013aaa:	4b3b      	ldr	r3, [pc, #236]	; (8013b98 <UG_Update+0x180>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	691b      	ldr	r3, [r3, #16]
 8013ab0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d123      	bne.n	8013b00 <UG_Update+0xe8>
 8013ab8:	4b37      	ldr	r3, [pc, #220]	; (8013b98 <UG_Update+0x180>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	695b      	ldr	r3, [r3, #20]
 8013abe:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013ac2:	4b35      	ldr	r3, [pc, #212]	; (8013b98 <UG_Update+0x180>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	691b      	ldr	r3, [r3, #16]
 8013ac8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d117      	bne.n	8013b00 <UG_Update+0xe8>
 8013ad0:	4b31      	ldr	r3, [pc, #196]	; (8013b98 <UG_Update+0x180>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	695b      	ldr	r3, [r3, #20]
 8013ad6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8013ada:	4b2f      	ldr	r3, [pc, #188]	; (8013b98 <UG_Update+0x180>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	691b      	ldr	r3, [r3, #16]
 8013ae0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d10b      	bne.n	8013b00 <UG_Update+0xe8>
 8013ae8:	4b2b      	ldr	r3, [pc, #172]	; (8013b98 <UG_Update+0x180>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	695b      	ldr	r3, [r3, #20]
 8013aee:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013af2:	4b29      	ldr	r3, [pc, #164]	; (8013b98 <UG_Update+0x180>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	691b      	ldr	r3, [r3, #16]
 8013af8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d005      	beq.n	8013b0c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013b00:	4b25      	ldr	r3, [pc, #148]	; (8013b98 <UG_Update+0x180>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	695b      	ldr	r3, [r3, #20]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f000 f848 	bl	8013b9c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8013b0c:	4b22      	ldr	r3, [pc, #136]	; (8013b98 <UG_Update+0x180>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	691b      	ldr	r3, [r3, #16]
 8013b12:	7a1a      	ldrb	r2, [r3, #8]
 8013b14:	4b20      	ldr	r3, [pc, #128]	; (8013b98 <UG_Update+0x180>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	691b      	ldr	r3, [r3, #16]
 8013b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b1e:	b2d2      	uxtb	r2, r2
 8013b20:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8013b22:	4b1d      	ldr	r3, [pc, #116]	; (8013b98 <UG_Update+0x180>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	691b      	ldr	r3, [r3, #16]
 8013b28:	7a1a      	ldrb	r2, [r3, #8]
 8013b2a:	4b1b      	ldr	r3, [pc, #108]	; (8013b98 <UG_Update+0x180>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013b34:	b2d2      	uxtb	r2, r2
 8013b36:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8013b38:	4b17      	ldr	r3, [pc, #92]	; (8013b98 <UG_Update+0x180>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	691b      	ldr	r3, [r3, #16]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d01b      	beq.n	8013b7a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8013b42:	4b15      	ldr	r3, [pc, #84]	; (8013b98 <UG_Update+0x180>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	691b      	ldr	r3, [r3, #16]
 8013b48:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	7a1b      	ldrb	r3, [r3, #8]
 8013b4e:	f003 0320 	and.w	r3, r3, #32
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d002      	beq.n	8013b5c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 f8ca 	bl	8013cf0 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	7a1b      	ldrb	r3, [r3, #8]
 8013b60:	f003 0308 	and.w	r3, r3, #8
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d008      	beq.n	8013b7a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7ff fb81 	bl	8013270 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7ff fc34 	bl	80133dc <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f7ff fc7b 	bl	8013470 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8013b7a:	4b07      	ldr	r3, [pc, #28]	; (8013b98 <UG_Update+0x180>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	689b      	ldr	r3, [r3, #8]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d004      	beq.n	8013b90 <UG_Update+0x178>
     gui->device->flush();
 8013b86:	4b04      	ldr	r3, [pc, #16]	; (8013b98 <UG_Update+0x180>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	689b      	ldr	r3, [r3, #8]
 8013b8e:	4798      	blx	r3
   }
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	200023c0 	.word	0x200023c0

08013b9c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8013b9c:	b590      	push	{r4, r7, lr}
 8013b9e:	b08f      	sub	sp, #60	; 0x3c
 8013ba0:	af02      	add	r7, sp, #8
 8013ba2:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 809a 	beq.w	8013ce0 <_UG_WindowDrawTitle+0x144>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	7a1b      	ldrb	r3, [r3, #8]
 8013bb0:	f003 0302 	and.w	r3, r3, #2
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f000 8093 	beq.w	8013ce0 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	89db      	ldrh	r3, [r3, #14]
 8013bbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	8a1b      	ldrh	r3, [r3, #16]
 8013bc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	8a5b      	ldrh	r3, [r3, #18]
 8013bca:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	8a9b      	ldrh	r3, [r3, #20]
 8013bd0:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	7d9b      	ldrb	r3, [r3, #22]
 8013bd6:	f003 0301 	and.w	r3, r3, #1
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d00f      	beq.n	8013bfe <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013bde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013be0:	3303      	adds	r3, #3
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8013be6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013be8:	3303      	adds	r3, #3
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013bee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013bf0:	3b03      	subs	r3, #3
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8013bf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013bf8:	3b03      	subs	r3, #3
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013bfe:	4b3b      	ldr	r3, [pc, #236]	; (8013cec <_UG_WindowDrawTitle+0x150>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	691b      	ldr	r3, [r3, #16]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d106      	bne.n	8013c18 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013c0e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c14:	83bb      	strh	r3, [r7, #28]
 8013c16:	e005      	b.n	8013c24 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c1c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c22:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c2a:	b29a      	uxth	r2, r3
 8013c2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c2e:	4413      	add	r3, r2
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	3b01      	subs	r3, #1
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	b21c      	sxth	r4, r3
 8013c38:	8bfb      	ldrh	r3, [r7, #30]
 8013c3a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013c3e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013c42:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013c46:	9300      	str	r3, [sp, #0]
 8013c48:	4623      	mov	r3, r4
 8013c4a:	f7fe fb03 	bl	8012254 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	699b      	ldr	r3, [r3, #24]
 8013c52:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	69db      	ldr	r3, [r3, #28]
 8013c58:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8013c5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c5c:	3303      	adds	r3, #3
 8013c5e:	b29b      	uxth	r3, r3
 8013c60:	b21b      	sxth	r3, r3
 8013c62:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8013c64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c66:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8013c68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c6a:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c76:	4413      	add	r3, r2
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	3b01      	subs	r3, #1
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	b21b      	sxth	r3, r3
 8013c80:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013c88:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8013c92:	b21b      	sxth	r3, r3
 8013c94:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013c9c:	b21b      	sxth	r3, r3
 8013c9e:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013ca0:	f107 030c 	add.w	r3, r7, #12
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7ff fc2f 	bl	8013508 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013cb4:	4413      	add	r3, r2
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	b219      	sxth	r1, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013cc4:	4413      	add	r3, r2
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	b21b      	sxth	r3, r3
 8013cca:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013cce:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013cd2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013cd6:	9400      	str	r4, [sp, #0]
 8013cd8:	f7fe fc5c 	bl	8012594 <UG_DrawLine>
      return UG_RESULT_OK;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e001      	b.n	8013ce4 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3734      	adds	r7, #52	; 0x34
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd90      	pop	{r4, r7, pc}
 8013cec:	200023c0 	.word	0x200023c0

08013cf0 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013cf0:	b590      	push	{r4, r7, lr}
 8013cf2:	b089      	sub	sp, #36	; 0x24
 8013cf4:	af02      	add	r7, sp, #8
 8013cf6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	89db      	ldrh	r3, [r3, #14]
 8013cfc:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8a1b      	ldrh	r3, [r3, #16]
 8013d02:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	8a5b      	ldrh	r3, [r3, #18]
 8013d08:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8a9b      	ldrh	r3, [r3, #20]
 8013d0e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	7a1b      	ldrb	r3, [r3, #8]
 8013d14:	f023 0320 	bic.w	r3, r3, #32
 8013d18:	b2da      	uxtb	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	7a1b      	ldrb	r3, [r3, #8]
 8013d22:	f003 0308 	and.w	r3, r3, #8
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	f000 8084 	beq.w	8013e34 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	7d9b      	ldrb	r3, [r3, #22]
 8013d30:	f003 0301 	and.w	r3, r3, #1
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d021      	beq.n	8013d7c <_UG_WindowUpdate+0x8c>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	7a1b      	ldrb	r3, [r3, #8]
 8013d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d11b      	bne.n	8013d7c <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8013d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d48:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013d4c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013d50:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013d54:	4c43      	ldr	r4, [pc, #268]	; (8013e64 <_UG_WindowUpdate+0x174>)
 8013d56:	9400      	str	r4, [sp, #0]
 8013d58:	f7ff fd1a 	bl	8013790 <_UG_DrawObjectFrame>
         xs+=3;
 8013d5c:	8abb      	ldrh	r3, [r7, #20]
 8013d5e:	3303      	adds	r3, #3
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8013d64:	8a7b      	ldrh	r3, [r7, #18]
 8013d66:	3303      	adds	r3, #3
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8013d6c:	8a3b      	ldrh	r3, [r7, #16]
 8013d6e:	3b03      	subs	r3, #3
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8013d74:	89fb      	ldrh	r3, [r7, #14]
 8013d76:	3b03      	subs	r3, #3
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	7d9b      	ldrb	r3, [r3, #22]
 8013d80:	f003 0302 	and.w	r3, r3, #2
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d01a      	beq.n	8013dbe <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7ff ff07 	bl	8013b9c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	8a7b      	ldrh	r3, [r7, #18]
 8013d98:	4413      	add	r3, r2
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	7a1b      	ldrb	r3, [r3, #8]
 8013da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d007      	beq.n	8013dbe <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	7a1b      	ldrb	r3, [r3, #8]
 8013db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013db6:	b2da      	uxtb	r2, r3
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	721a      	strb	r2, [r3, #8]
            return;
 8013dbc:	e04e      	b.n	8013e5c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	899b      	ldrh	r3, [r3, #12]
 8013dc2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8013dc6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013dca:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013dce:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013dd2:	9300      	str	r3, [sp, #0]
 8013dd4:	4623      	mov	r3, r4
 8013dd6:	f7fe fa3d 	bl	8012254 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013de0:	2300      	movs	r3, #0
 8013de2:	82fb      	strh	r3, [r7, #22]
 8013de4:	e021      	b.n	8013e2a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	685a      	ldr	r2, [r3, #4]
 8013dea:	8afb      	ldrh	r3, [r7, #22]
 8013dec:	015b      	lsls	r3, r3, #5
 8013dee:	4413      	add	r3, r2
 8013df0:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	f003 0301 	and.w	r3, r3, #1
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d112      	bne.n	8013e24 <_UG_WindowUpdate+0x134>
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	f003 0302 	and.w	r3, r3, #2
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00c      	beq.n	8013e24 <_UG_WindowUpdate+0x134>
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	f003 0308 	and.w	r3, r3, #8
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d006      	beq.n	8013e24 <_UG_WindowUpdate+0x134>
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013e1e:	b2da      	uxtb	r2, r3
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8013e24:	8afb      	ldrh	r3, [r7, #22]
 8013e26:	3301      	adds	r3, #1
 8013e28:	82fb      	strh	r3, [r7, #22]
 8013e2a:	8afa      	ldrh	r2, [r7, #22]
 8013e2c:	89bb      	ldrh	r3, [r7, #12]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d3d9      	bcc.n	8013de6 <_UG_WindowUpdate+0xf6>
 8013e32:	e013      	b.n	8013e5c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8013e4c:	4b06      	ldr	r3, [pc, #24]	; (8013e68 <_UG_WindowUpdate+0x178>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e54:	9300      	str	r3, [sp, #0]
 8013e56:	4623      	mov	r3, r4
 8013e58:	f7fe f9fc 	bl	8012254 <UG_FillFrame>
   }
}
 8013e5c:	371c      	adds	r7, #28
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd90      	pop	{r4, r7, pc}
 8013e62:	bf00      	nop
 8013e64:	0801d5c0 	.word	0x0801d5c0
 8013e68:	200023c0 	.word	0x200023c0

08013e6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013e78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013e7c:	f002 f8fc 	bl	8016078 <USBD_static_malloc>
 8013e80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d105      	bne.n	8013e94 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013e90:	2302      	movs	r3, #2
 8013e92:	e066      	b.n	8013f62 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	68fa      	ldr	r2, [r7, #12]
 8013e98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	7c1b      	ldrb	r3, [r3, #16]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d119      	bne.n	8013ed8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	2181      	movs	r1, #129	; 0x81
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f001 ff8a 	bl	8015dc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ebc:	2202      	movs	r2, #2
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f001 ff80 	bl	8015dc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2201      	movs	r2, #1
 8013eca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2210      	movs	r2, #16
 8013ed2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013ed6:	e016      	b.n	8013f06 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013ed8:	2340      	movs	r3, #64	; 0x40
 8013eda:	2202      	movs	r2, #2
 8013edc:	2181      	movs	r1, #129	; 0x81
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f001 ff71 	bl	8015dc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2201      	movs	r2, #1
 8013ee8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013eea:	2340      	movs	r3, #64	; 0x40
 8013eec:	2202      	movs	r2, #2
 8013eee:	2101      	movs	r1, #1
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f001 ff68 	bl	8015dc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2201      	movs	r2, #1
 8013efa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2210      	movs	r2, #16
 8013f02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013f06:	2308      	movs	r3, #8
 8013f08:	2203      	movs	r2, #3
 8013f0a:	2182      	movs	r1, #130	; 0x82
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f001 ff5a 	bl	8015dc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2201      	movs	r2, #1
 8013f16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2200      	movs	r2, #0
 8013f28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	7c1b      	ldrb	r3, [r3, #16]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d109      	bne.n	8013f50 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f46:	2101      	movs	r1, #1
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f002 f82b 	bl	8015fa4 <USBD_LL_PrepareReceive>
 8013f4e:	e007      	b.n	8013f60 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f56:	2340      	movs	r3, #64	; 0x40
 8013f58:	2101      	movs	r1, #1
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f002 f822 	bl	8015fa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013f60:	2300      	movs	r3, #0
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}

08013f6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013f6a:	b580      	push	{r7, lr}
 8013f6c:	b082      	sub	sp, #8
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	6078      	str	r0, [r7, #4]
 8013f72:	460b      	mov	r3, r1
 8013f74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013f76:	2181      	movs	r1, #129	; 0x81
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f001 ff4a 	bl	8015e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2200      	movs	r2, #0
 8013f82:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013f84:	2101      	movs	r1, #1
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f001 ff43 	bl	8015e12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013f94:	2182      	movs	r1, #130	; 0x82
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f001 ff3b 	bl	8015e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00e      	beq.n	8013fd4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f002 f864 	bl	8016094 <USBD_static_free>
    pdev->pClassData = NULL;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013fd4:	2300      	movs	r3, #0
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3708      	adds	r7, #8
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}
	...

08013fe0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ff0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d101      	bne.n	8014008 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014004:	2303      	movs	r3, #3
 8014006:	e0af      	b.n	8014168 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014010:	2b00      	cmp	r3, #0
 8014012:	d03f      	beq.n	8014094 <USBD_CDC_Setup+0xb4>
 8014014:	2b20      	cmp	r3, #32
 8014016:	f040 809f 	bne.w	8014158 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	88db      	ldrh	r3, [r3, #6]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d02e      	beq.n	8014080 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	b25b      	sxtb	r3, r3
 8014028:	2b00      	cmp	r3, #0
 801402a:	da16      	bge.n	801405a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	683a      	ldr	r2, [r7, #0]
 8014036:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014038:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801403a:	683a      	ldr	r2, [r7, #0]
 801403c:	88d2      	ldrh	r2, [r2, #6]
 801403e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	88db      	ldrh	r3, [r3, #6]
 8014044:	2b07      	cmp	r3, #7
 8014046:	bf28      	it	cs
 8014048:	2307      	movcs	r3, #7
 801404a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	89fa      	ldrh	r2, [r7, #14]
 8014050:	4619      	mov	r1, r3
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f001 facf 	bl	80155f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014058:	e085      	b.n	8014166 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	785a      	ldrb	r2, [r3, #1]
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	88db      	ldrh	r3, [r3, #6]
 8014068:	b2da      	uxtb	r2, r3
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014070:	6939      	ldr	r1, [r7, #16]
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	88db      	ldrh	r3, [r3, #6]
 8014076:	461a      	mov	r2, r3
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f001 fae8 	bl	801564e <USBD_CtlPrepareRx>
      break;
 801407e:	e072      	b.n	8014166 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	7850      	ldrb	r0, [r2, #1]
 801408c:	2200      	movs	r2, #0
 801408e:	6839      	ldr	r1, [r7, #0]
 8014090:	4798      	blx	r3
      break;
 8014092:	e068      	b.n	8014166 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	785b      	ldrb	r3, [r3, #1]
 8014098:	2b0b      	cmp	r3, #11
 801409a:	d852      	bhi.n	8014142 <USBD_CDC_Setup+0x162>
 801409c:	a201      	add	r2, pc, #4	; (adr r2, 80140a4 <USBD_CDC_Setup+0xc4>)
 801409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140a2:	bf00      	nop
 80140a4:	080140d5 	.word	0x080140d5
 80140a8:	08014151 	.word	0x08014151
 80140ac:	08014143 	.word	0x08014143
 80140b0:	08014143 	.word	0x08014143
 80140b4:	08014143 	.word	0x08014143
 80140b8:	08014143 	.word	0x08014143
 80140bc:	08014143 	.word	0x08014143
 80140c0:	08014143 	.word	0x08014143
 80140c4:	08014143 	.word	0x08014143
 80140c8:	08014143 	.word	0x08014143
 80140cc:	080140ff 	.word	0x080140ff
 80140d0:	08014129 	.word	0x08014129
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	2b03      	cmp	r3, #3
 80140de:	d107      	bne.n	80140f0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80140e0:	f107 030a 	add.w	r3, r7, #10
 80140e4:	2202      	movs	r2, #2
 80140e6:	4619      	mov	r1, r3
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f001 fa84 	bl	80155f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80140ee:	e032      	b.n	8014156 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80140f0:	6839      	ldr	r1, [r7, #0]
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f001 fa0e 	bl	8015514 <USBD_CtlError>
            ret = USBD_FAIL;
 80140f8:	2303      	movs	r3, #3
 80140fa:	75fb      	strb	r3, [r7, #23]
          break;
 80140fc:	e02b      	b.n	8014156 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014104:	b2db      	uxtb	r3, r3
 8014106:	2b03      	cmp	r3, #3
 8014108:	d107      	bne.n	801411a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801410a:	f107 030d 	add.w	r3, r7, #13
 801410e:	2201      	movs	r2, #1
 8014110:	4619      	mov	r1, r3
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f001 fa6f 	bl	80155f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014118:	e01d      	b.n	8014156 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801411a:	6839      	ldr	r1, [r7, #0]
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f001 f9f9 	bl	8015514 <USBD_CtlError>
            ret = USBD_FAIL;
 8014122:	2303      	movs	r3, #3
 8014124:	75fb      	strb	r3, [r7, #23]
          break;
 8014126:	e016      	b.n	8014156 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801412e:	b2db      	uxtb	r3, r3
 8014130:	2b03      	cmp	r3, #3
 8014132:	d00f      	beq.n	8014154 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014134:	6839      	ldr	r1, [r7, #0]
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f001 f9ec 	bl	8015514 <USBD_CtlError>
            ret = USBD_FAIL;
 801413c:	2303      	movs	r3, #3
 801413e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014140:	e008      	b.n	8014154 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014142:	6839      	ldr	r1, [r7, #0]
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f001 f9e5 	bl	8015514 <USBD_CtlError>
          ret = USBD_FAIL;
 801414a:	2303      	movs	r3, #3
 801414c:	75fb      	strb	r3, [r7, #23]
          break;
 801414e:	e002      	b.n	8014156 <USBD_CDC_Setup+0x176>
          break;
 8014150:	bf00      	nop
 8014152:	e008      	b.n	8014166 <USBD_CDC_Setup+0x186>
          break;
 8014154:	bf00      	nop
      }
      break;
 8014156:	e006      	b.n	8014166 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014158:	6839      	ldr	r1, [r7, #0]
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f001 f9da 	bl	8015514 <USBD_CtlError>
      ret = USBD_FAIL;
 8014160:	2303      	movs	r3, #3
 8014162:	75fb      	strb	r3, [r7, #23]
      break;
 8014164:	bf00      	nop
  }

  return (uint8_t)ret;
 8014166:	7dfb      	ldrb	r3, [r7, #23]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3718      	adds	r7, #24
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}

08014170 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	460b      	mov	r3, r1
 801417a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014182:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801418a:	2b00      	cmp	r3, #0
 801418c:	d101      	bne.n	8014192 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801418e:	2303      	movs	r3, #3
 8014190:	e04f      	b.n	8014232 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014198:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801419a:	78fa      	ldrb	r2, [r7, #3]
 801419c:	6879      	ldr	r1, [r7, #4]
 801419e:	4613      	mov	r3, r2
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	4413      	add	r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	440b      	add	r3, r1
 80141a8:	3318      	adds	r3, #24
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d029      	beq.n	8014204 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80141b0:	78fa      	ldrb	r2, [r7, #3]
 80141b2:	6879      	ldr	r1, [r7, #4]
 80141b4:	4613      	mov	r3, r2
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	4413      	add	r3, r2
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	440b      	add	r3, r1
 80141be:	3318      	adds	r3, #24
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	78f9      	ldrb	r1, [r7, #3]
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	460b      	mov	r3, r1
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	440b      	add	r3, r1
 80141cc:	00db      	lsls	r3, r3, #3
 80141ce:	4403      	add	r3, r0
 80141d0:	3320      	adds	r3, #32
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80141d8:	fb01 f303 	mul.w	r3, r1, r3
 80141dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d110      	bne.n	8014204 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80141e2:	78fa      	ldrb	r2, [r7, #3]
 80141e4:	6879      	ldr	r1, [r7, #4]
 80141e6:	4613      	mov	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	4413      	add	r3, r2
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	440b      	add	r3, r1
 80141f0:	3318      	adds	r3, #24
 80141f2:	2200      	movs	r2, #0
 80141f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80141f6:	78f9      	ldrb	r1, [r7, #3]
 80141f8:	2300      	movs	r3, #0
 80141fa:	2200      	movs	r2, #0
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f001 feb0 	bl	8015f62 <USBD_LL_Transmit>
 8014202:	e015      	b.n	8014230 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	2200      	movs	r2, #0
 8014208:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014212:	691b      	ldr	r3, [r3, #16]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00b      	beq.n	8014230 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801421e:	691b      	ldr	r3, [r3, #16]
 8014220:	68ba      	ldr	r2, [r7, #8]
 8014222:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014226:	68ba      	ldr	r2, [r7, #8]
 8014228:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801422c:	78fa      	ldrb	r2, [r7, #3]
 801422e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014230:	2300      	movs	r3, #0
}
 8014232:	4618      	mov	r0, r3
 8014234:	3710      	adds	r7, #16
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}

0801423a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	b084      	sub	sp, #16
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
 8014242:	460b      	mov	r3, r1
 8014244:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801424c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014254:	2b00      	cmp	r3, #0
 8014256:	d101      	bne.n	801425c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014258:	2303      	movs	r3, #3
 801425a:	e015      	b.n	8014288 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801425c:	78fb      	ldrb	r3, [r7, #3]
 801425e:	4619      	mov	r1, r3
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f001 fec0 	bl	8015fe6 <USBD_LL_GetRxDataSize>
 8014266:	4602      	mov	r2, r0
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014274:	68db      	ldr	r3, [r3, #12]
 8014276:	68fa      	ldr	r2, [r7, #12]
 8014278:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801427c:	68fa      	ldr	r2, [r7, #12]
 801427e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014282:	4611      	mov	r1, r2
 8014284:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014286:	2300      	movs	r3, #0
}
 8014288:	4618      	mov	r0, r3
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801429e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d101      	bne.n	80142aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80142a6:	2303      	movs	r3, #3
 80142a8:	e01b      	b.n	80142e2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d015      	beq.n	80142e0 <USBD_CDC_EP0_RxReady+0x50>
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80142ba:	2bff      	cmp	r3, #255	; 0xff
 80142bc:	d010      	beq.n	80142e0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142c4:	689b      	ldr	r3, [r3, #8]
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80142cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80142ce:	68fa      	ldr	r2, [r7, #12]
 80142d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80142d4:	b292      	uxth	r2, r2
 80142d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	22ff      	movs	r2, #255	; 0xff
 80142dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80142e0:	2300      	movs	r3, #0
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
	...

080142ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2243      	movs	r2, #67	; 0x43
 80142f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80142fa:	4b03      	ldr	r3, [pc, #12]	; (8014308 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr
 8014308:	20000288 	.word	0x20000288

0801430c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801430c:	b480      	push	{r7}
 801430e:	b083      	sub	sp, #12
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2243      	movs	r2, #67	; 0x43
 8014318:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801431a:	4b03      	ldr	r3, [pc, #12]	; (8014328 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801431c:	4618      	mov	r0, r3
 801431e:	370c      	adds	r7, #12
 8014320:	46bd      	mov	sp, r7
 8014322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014326:	4770      	bx	lr
 8014328:	20000244 	.word	0x20000244

0801432c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801432c:	b480      	push	{r7}
 801432e:	b083      	sub	sp, #12
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2243      	movs	r2, #67	; 0x43
 8014338:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801433a:	4b03      	ldr	r3, [pc, #12]	; (8014348 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801433c:	4618      	mov	r0, r3
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr
 8014348:	200002cc 	.word	0x200002cc

0801434c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	220a      	movs	r2, #10
 8014358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801435a:	4b03      	ldr	r3, [pc, #12]	; (8014368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801435c:	4618      	mov	r0, r3
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr
 8014368:	20000200 	.word	0x20000200

0801436c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d101      	bne.n	8014380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801437c:	2303      	movs	r3, #3
 801437e:	e004      	b.n	801438a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014388:	2300      	movs	r3, #0
}
 801438a:	4618      	mov	r0, r3
 801438c:	370c      	adds	r7, #12
 801438e:	46bd      	mov	sp, r7
 8014390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014394:	4770      	bx	lr

08014396 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014396:	b480      	push	{r7}
 8014398:	b087      	sub	sp, #28
 801439a:	af00      	add	r7, sp, #0
 801439c:	60f8      	str	r0, [r7, #12]
 801439e:	60b9      	str	r1, [r7, #8]
 80143a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d101      	bne.n	80143b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80143b0:	2303      	movs	r3, #3
 80143b2:	e008      	b.n	80143c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	68ba      	ldr	r2, [r7, #8]
 80143b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	371c      	adds	r7, #28
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b085      	sub	sp, #20
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d101      	bne.n	80143ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80143ea:	2303      	movs	r3, #3
 80143ec:	e004      	b.n	80143f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	683a      	ldr	r2, [r7, #0]
 80143f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80143f6:	2300      	movs	r3, #0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3714      	adds	r7, #20
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr

08014404 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014412:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8014414:	2301      	movs	r3, #1
 8014416:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801441e:	2b00      	cmp	r3, #0
 8014420:	d101      	bne.n	8014426 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014422:	2303      	movs	r3, #3
 8014424:	e01a      	b.n	801445c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801442c:	2b00      	cmp	r3, #0
 801442e:	d114      	bne.n	801445a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	2201      	movs	r2, #1
 8014434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801444e:	2181      	movs	r1, #129	; 0x81
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f001 fd86 	bl	8015f62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014456:	2300      	movs	r3, #0
 8014458:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801445a:	7bfb      	ldrb	r3, [r7, #15]
}
 801445c:	4618      	mov	r0, r3
 801445e:	3710      	adds	r7, #16
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801447a:	2b00      	cmp	r3, #0
 801447c:	d101      	bne.n	8014482 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801447e:	2303      	movs	r3, #3
 8014480:	e016      	b.n	80144b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	7c1b      	ldrb	r3, [r3, #16]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d109      	bne.n	801449e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014494:	2101      	movs	r1, #1
 8014496:	6878      	ldr	r0, [r7, #4]
 8014498:	f001 fd84 	bl	8015fa4 <USBD_LL_PrepareReceive>
 801449c:	e007      	b.n	80144ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80144a4:	2340      	movs	r3, #64	; 0x40
 80144a6:	2101      	movs	r1, #1
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f001 fd7b 	bl	8015fa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80144ae:	2300      	movs	r3, #0
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3710      	adds	r7, #16
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	4613      	mov	r3, r2
 80144c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d101      	bne.n	80144d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80144cc:	2303      	movs	r3, #3
 80144ce:	e01f      	b.n	8014510 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	2200      	movs	r2, #0
 80144d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2200      	movs	r2, #0
 80144dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d003      	beq.n	80144f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2201      	movs	r2, #1
 80144fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	79fa      	ldrb	r2, [r7, #7]
 8014502:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f001 fbe3 	bl	8015cd0 <USBD_LL_Init>
 801450a:	4603      	mov	r3, r0
 801450c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3718      	adds	r7, #24
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014522:	2300      	movs	r3, #0
 8014524:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d101      	bne.n	8014530 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801452c:	2303      	movs	r3, #3
 801452e:	e016      	b.n	801455e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014540:	2b00      	cmp	r3, #0
 8014542:	d00b      	beq.n	801455c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801454c:	f107 020e 	add.w	r2, r7, #14
 8014550:	4610      	mov	r0, r2
 8014552:	4798      	blx	r3
 8014554:	4602      	mov	r2, r0
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801455c:	2300      	movs	r3, #0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3710      	adds	r7, #16
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014566:	b580      	push	{r7, lr}
 8014568:	b082      	sub	sp, #8
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f001 fc0e 	bl	8015d90 <USBD_LL_Start>
 8014574:	4603      	mov	r3, r0
}
 8014576:	4618      	mov	r0, r3
 8014578:	3708      	adds	r7, #8
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801457e:	b480      	push	{r7}
 8014580:	b083      	sub	sp, #12
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014586:	2300      	movs	r3, #0
}
 8014588:	4618      	mov	r0, r3
 801458a:	370c      	adds	r7, #12
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	460b      	mov	r3, r1
 801459e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80145a0:	2303      	movs	r3, #3
 80145a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d009      	beq.n	80145c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	78fa      	ldrb	r2, [r7, #3]
 80145b8:	4611      	mov	r1, r2
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	4798      	blx	r3
 80145be:	4603      	mov	r3, r0
 80145c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80145c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3710      	adds	r7, #16
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	460b      	mov	r3, r1
 80145d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d007      	beq.n	80145f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	78fa      	ldrb	r2, [r7, #3]
 80145ec:	4611      	mov	r1, r2
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	4798      	blx	r3
  }

  return USBD_OK;
 80145f2:	2300      	movs	r3, #0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	4618      	mov	r0, r3
 8014610:	f000 ff46 	bl	80154a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2201      	movs	r2, #1
 8014618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014622:	461a      	mov	r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014630:	f003 031f 	and.w	r3, r3, #31
 8014634:	2b02      	cmp	r3, #2
 8014636:	d01a      	beq.n	801466e <USBD_LL_SetupStage+0x72>
 8014638:	2b02      	cmp	r3, #2
 801463a:	d822      	bhi.n	8014682 <USBD_LL_SetupStage+0x86>
 801463c:	2b00      	cmp	r3, #0
 801463e:	d002      	beq.n	8014646 <USBD_LL_SetupStage+0x4a>
 8014640:	2b01      	cmp	r3, #1
 8014642:	d00a      	beq.n	801465a <USBD_LL_SetupStage+0x5e>
 8014644:	e01d      	b.n	8014682 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801464c:	4619      	mov	r1, r3
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 f9ee 	bl	8014a30 <USBD_StdDevReq>
 8014654:	4603      	mov	r3, r0
 8014656:	73fb      	strb	r3, [r7, #15]
      break;
 8014658:	e020      	b.n	801469c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014660:	4619      	mov	r1, r3
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f000 fa52 	bl	8014b0c <USBD_StdItfReq>
 8014668:	4603      	mov	r3, r0
 801466a:	73fb      	strb	r3, [r7, #15]
      break;
 801466c:	e016      	b.n	801469c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014674:	4619      	mov	r1, r3
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 fa91 	bl	8014b9e <USBD_StdEPReq>
 801467c:	4603      	mov	r3, r0
 801467e:	73fb      	strb	r3, [r7, #15]
      break;
 8014680:	e00c      	b.n	801469c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801468c:	b2db      	uxtb	r3, r3
 801468e:	4619      	mov	r1, r3
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f001 fbdd 	bl	8015e50 <USBD_LL_StallEP>
 8014696:	4603      	mov	r3, r0
 8014698:	73fb      	strb	r3, [r7, #15]
      break;
 801469a:	bf00      	nop
  }

  return ret;
 801469c:	7bfb      	ldrb	r3, [r7, #15]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80146a6:	b580      	push	{r7, lr}
 80146a8:	b086      	sub	sp, #24
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	60f8      	str	r0, [r7, #12]
 80146ae:	460b      	mov	r3, r1
 80146b0:	607a      	str	r2, [r7, #4]
 80146b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80146b4:	7afb      	ldrb	r3, [r7, #11]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d138      	bne.n	801472c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80146c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80146c8:	2b03      	cmp	r3, #3
 80146ca:	d14a      	bne.n	8014762 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80146cc:	693b      	ldr	r3, [r7, #16]
 80146ce:	689a      	ldr	r2, [r3, #8]
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	68db      	ldr	r3, [r3, #12]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d913      	bls.n	8014700 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	689a      	ldr	r2, [r3, #8]
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	68db      	ldr	r3, [r3, #12]
 80146e0:	1ad2      	subs	r2, r2, r3
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	68da      	ldr	r2, [r3, #12]
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	689b      	ldr	r3, [r3, #8]
 80146ee:	4293      	cmp	r3, r2
 80146f0:	bf28      	it	cs
 80146f2:	4613      	movcs	r3, r2
 80146f4:	461a      	mov	r2, r3
 80146f6:	6879      	ldr	r1, [r7, #4]
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f000 ffc5 	bl	8015688 <USBD_CtlContinueRx>
 80146fe:	e030      	b.n	8014762 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014706:	b2db      	uxtb	r3, r3
 8014708:	2b03      	cmp	r3, #3
 801470a:	d10b      	bne.n	8014724 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014712:	691b      	ldr	r3, [r3, #16]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d005      	beq.n	8014724 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801471e:	691b      	ldr	r3, [r3, #16]
 8014720:	68f8      	ldr	r0, [r7, #12]
 8014722:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014724:	68f8      	ldr	r0, [r7, #12]
 8014726:	f000 ffc0 	bl	80156aa <USBD_CtlSendStatus>
 801472a:	e01a      	b.n	8014762 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014732:	b2db      	uxtb	r3, r3
 8014734:	2b03      	cmp	r3, #3
 8014736:	d114      	bne.n	8014762 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801473e:	699b      	ldr	r3, [r3, #24]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d00e      	beq.n	8014762 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801474a:	699b      	ldr	r3, [r3, #24]
 801474c:	7afa      	ldrb	r2, [r7, #11]
 801474e:	4611      	mov	r1, r2
 8014750:	68f8      	ldr	r0, [r7, #12]
 8014752:	4798      	blx	r3
 8014754:	4603      	mov	r3, r0
 8014756:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014758:	7dfb      	ldrb	r3, [r7, #23]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d001      	beq.n	8014762 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801475e:	7dfb      	ldrb	r3, [r7, #23]
 8014760:	e000      	b.n	8014764 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8014762:	2300      	movs	r3, #0
}
 8014764:	4618      	mov	r0, r3
 8014766:	3718      	adds	r7, #24
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b086      	sub	sp, #24
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	460b      	mov	r3, r1
 8014776:	607a      	str	r2, [r7, #4]
 8014778:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801477a:	7afb      	ldrb	r3, [r7, #11]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d16b      	bne.n	8014858 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	3314      	adds	r3, #20
 8014784:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801478c:	2b02      	cmp	r3, #2
 801478e:	d156      	bne.n	801483e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	689a      	ldr	r2, [r3, #8]
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	429a      	cmp	r2, r3
 801479a:	d914      	bls.n	80147c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	689a      	ldr	r2, [r3, #8]
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	1ad2      	subs	r2, r2, r3
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	689b      	ldr	r3, [r3, #8]
 80147ae:	461a      	mov	r2, r3
 80147b0:	6879      	ldr	r1, [r7, #4]
 80147b2:	68f8      	ldr	r0, [r7, #12]
 80147b4:	f000 ff3a 	bl	801562c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80147b8:	2300      	movs	r3, #0
 80147ba:	2200      	movs	r2, #0
 80147bc:	2100      	movs	r1, #0
 80147be:	68f8      	ldr	r0, [r7, #12]
 80147c0:	f001 fbf0 	bl	8015fa4 <USBD_LL_PrepareReceive>
 80147c4:	e03b      	b.n	801483e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	68da      	ldr	r2, [r3, #12]
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	689b      	ldr	r3, [r3, #8]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d11c      	bne.n	801480c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	685a      	ldr	r2, [r3, #4]
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80147da:	429a      	cmp	r2, r3
 80147dc:	d316      	bcc.n	801480c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	685a      	ldr	r2, [r3, #4]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d20f      	bcs.n	801480c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80147ec:	2200      	movs	r2, #0
 80147ee:	2100      	movs	r1, #0
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f000 ff1b 	bl	801562c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2200      	movs	r2, #0
 80147fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80147fe:	2300      	movs	r3, #0
 8014800:	2200      	movs	r2, #0
 8014802:	2100      	movs	r1, #0
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f001 fbcd 	bl	8015fa4 <USBD_LL_PrepareReceive>
 801480a:	e018      	b.n	801483e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014812:	b2db      	uxtb	r3, r3
 8014814:	2b03      	cmp	r3, #3
 8014816:	d10b      	bne.n	8014830 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801481e:	68db      	ldr	r3, [r3, #12]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d005      	beq.n	8014830 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	68f8      	ldr	r0, [r7, #12]
 801482e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014830:	2180      	movs	r1, #128	; 0x80
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f001 fb0c 	bl	8015e50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	f000 ff49 	bl	80156d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014844:	2b01      	cmp	r3, #1
 8014846:	d122      	bne.n	801488e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014848:	68f8      	ldr	r0, [r7, #12]
 801484a:	f7ff fe98 	bl	801457e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2200      	movs	r2, #0
 8014852:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014856:	e01a      	b.n	801488e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801485e:	b2db      	uxtb	r3, r3
 8014860:	2b03      	cmp	r3, #3
 8014862:	d114      	bne.n	801488e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801486a:	695b      	ldr	r3, [r3, #20]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d00e      	beq.n	801488e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014876:	695b      	ldr	r3, [r3, #20]
 8014878:	7afa      	ldrb	r2, [r7, #11]
 801487a:	4611      	mov	r1, r2
 801487c:	68f8      	ldr	r0, [r7, #12]
 801487e:	4798      	blx	r3
 8014880:	4603      	mov	r3, r0
 8014882:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014884:	7dfb      	ldrb	r3, [r7, #23]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801488a:	7dfb      	ldrb	r3, [r7, #23]
 801488c:	e000      	b.n	8014890 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801488e:	2300      	movs	r3, #0
}
 8014890:	4618      	mov	r0, r3
 8014892:	3718      	adds	r7, #24
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2201      	movs	r2, #1
 80148a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2200      	movs	r2, #0
 80148ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2200      	movs	r2, #0
 80148b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2200      	movs	r2, #0
 80148ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d101      	bne.n	80148cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80148c8:	2303      	movs	r3, #3
 80148ca:	e02f      	b.n	801492c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d00f      	beq.n	80148f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d009      	beq.n	80148f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148e8:	685b      	ldr	r3, [r3, #4]
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	6852      	ldr	r2, [r2, #4]
 80148ee:	b2d2      	uxtb	r2, r2
 80148f0:	4611      	mov	r1, r2
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80148f6:	2340      	movs	r3, #64	; 0x40
 80148f8:	2200      	movs	r2, #0
 80148fa:	2100      	movs	r1, #0
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f001 fa62 	bl	8015dc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2201      	movs	r2, #1
 8014906:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2240      	movs	r2, #64	; 0x40
 801490e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014912:	2340      	movs	r3, #64	; 0x40
 8014914:	2200      	movs	r2, #0
 8014916:	2180      	movs	r1, #128	; 0x80
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f001 fa54 	bl	8015dc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2201      	movs	r2, #1
 8014922:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2240      	movs	r2, #64	; 0x40
 8014928:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801492a:	2300      	movs	r3, #0
}
 801492c:	4618      	mov	r0, r3
 801492e:	3708      	adds	r7, #8
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014934:	b480      	push	{r7}
 8014936:	b083      	sub	sp, #12
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	460b      	mov	r3, r1
 801493e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	78fa      	ldrb	r2, [r7, #3]
 8014944:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014946:	2300      	movs	r3, #0
}
 8014948:	4618      	mov	r0, r3
 801494a:	370c      	adds	r7, #12
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr

08014954 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014962:	b2da      	uxtb	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2204      	movs	r2, #4
 801496e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014972:	2300      	movs	r3, #0
}
 8014974:	4618      	mov	r0, r3
 8014976:	370c      	adds	r7, #12
 8014978:	46bd      	mov	sp, r7
 801497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497e:	4770      	bx	lr

08014980 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801498e:	b2db      	uxtb	r3, r3
 8014990:	2b04      	cmp	r3, #4
 8014992:	d106      	bne.n	80149a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801499a:	b2da      	uxtb	r2, r3
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80149a2:	2300      	movs	r3, #0
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d101      	bne.n	80149c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80149c2:	2303      	movs	r3, #3
 80149c4:	e012      	b.n	80149ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b03      	cmp	r3, #3
 80149d0:	d10b      	bne.n	80149ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149d8:	69db      	ldr	r3, [r3, #28]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d005      	beq.n	80149ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149e4:	69db      	ldr	r3, [r3, #28]
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80149ea:	2300      	movs	r3, #0
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3708      	adds	r7, #8
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}

080149f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b087      	sub	sp, #28
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014a12:	8a3b      	ldrh	r3, [r7, #16]
 8014a14:	021b      	lsls	r3, r3, #8
 8014a16:	b21a      	sxth	r2, r3
 8014a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a1c:	4313      	orrs	r3, r2
 8014a1e:	b21b      	sxth	r3, r3
 8014a20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014a22:	89fb      	ldrh	r3, [r7, #14]
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	371c      	adds	r7, #28
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a46:	2b40      	cmp	r3, #64	; 0x40
 8014a48:	d005      	beq.n	8014a56 <USBD_StdDevReq+0x26>
 8014a4a:	2b40      	cmp	r3, #64	; 0x40
 8014a4c:	d853      	bhi.n	8014af6 <USBD_StdDevReq+0xc6>
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d00b      	beq.n	8014a6a <USBD_StdDevReq+0x3a>
 8014a52:	2b20      	cmp	r3, #32
 8014a54:	d14f      	bne.n	8014af6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a5c:	689b      	ldr	r3, [r3, #8]
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	4798      	blx	r3
 8014a64:	4603      	mov	r3, r0
 8014a66:	73fb      	strb	r3, [r7, #15]
      break;
 8014a68:	e04a      	b.n	8014b00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	785b      	ldrb	r3, [r3, #1]
 8014a6e:	2b09      	cmp	r3, #9
 8014a70:	d83b      	bhi.n	8014aea <USBD_StdDevReq+0xba>
 8014a72:	a201      	add	r2, pc, #4	; (adr r2, 8014a78 <USBD_StdDevReq+0x48>)
 8014a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a78:	08014acd 	.word	0x08014acd
 8014a7c:	08014ae1 	.word	0x08014ae1
 8014a80:	08014aeb 	.word	0x08014aeb
 8014a84:	08014ad7 	.word	0x08014ad7
 8014a88:	08014aeb 	.word	0x08014aeb
 8014a8c:	08014aab 	.word	0x08014aab
 8014a90:	08014aa1 	.word	0x08014aa1
 8014a94:	08014aeb 	.word	0x08014aeb
 8014a98:	08014ac3 	.word	0x08014ac3
 8014a9c:	08014ab5 	.word	0x08014ab5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014aa0:	6839      	ldr	r1, [r7, #0]
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f000 f9de 	bl	8014e64 <USBD_GetDescriptor>
          break;
 8014aa8:	e024      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014aaa:	6839      	ldr	r1, [r7, #0]
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f000 fb6d 	bl	801518c <USBD_SetAddress>
          break;
 8014ab2:	e01f      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014ab4:	6839      	ldr	r1, [r7, #0]
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f000 fbac 	bl	8015214 <USBD_SetConfig>
 8014abc:	4603      	mov	r3, r0
 8014abe:	73fb      	strb	r3, [r7, #15]
          break;
 8014ac0:	e018      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014ac2:	6839      	ldr	r1, [r7, #0]
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f000 fc4b 	bl	8015360 <USBD_GetConfig>
          break;
 8014aca:	e013      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014acc:	6839      	ldr	r1, [r7, #0]
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fc7c 	bl	80153cc <USBD_GetStatus>
          break;
 8014ad4:	e00e      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014ad6:	6839      	ldr	r1, [r7, #0]
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f000 fcab 	bl	8015434 <USBD_SetFeature>
          break;
 8014ade:	e009      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014ae0:	6839      	ldr	r1, [r7, #0]
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 fcba 	bl	801545c <USBD_ClrFeature>
          break;
 8014ae8:	e004      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 fd11 	bl	8015514 <USBD_CtlError>
          break;
 8014af2:	bf00      	nop
      }
      break;
 8014af4:	e004      	b.n	8014b00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 fd0b 	bl	8015514 <USBD_CtlError>
      break;
 8014afe:	bf00      	nop
  }

  return ret;
 8014b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop

08014b0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b16:	2300      	movs	r3, #0
 8014b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b22:	2b40      	cmp	r3, #64	; 0x40
 8014b24:	d005      	beq.n	8014b32 <USBD_StdItfReq+0x26>
 8014b26:	2b40      	cmp	r3, #64	; 0x40
 8014b28:	d82f      	bhi.n	8014b8a <USBD_StdItfReq+0x7e>
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d001      	beq.n	8014b32 <USBD_StdItfReq+0x26>
 8014b2e:	2b20      	cmp	r3, #32
 8014b30:	d12b      	bne.n	8014b8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	3b01      	subs	r3, #1
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d81d      	bhi.n	8014b7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	889b      	ldrh	r3, [r3, #4]
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	d813      	bhi.n	8014b72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b50:	689b      	ldr	r3, [r3, #8]
 8014b52:	6839      	ldr	r1, [r7, #0]
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	4798      	blx	r3
 8014b58:	4603      	mov	r3, r0
 8014b5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	88db      	ldrh	r3, [r3, #6]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d110      	bne.n	8014b86 <USBD_StdItfReq+0x7a>
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10d      	bne.n	8014b86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 fd9d 	bl	80156aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014b70:	e009      	b.n	8014b86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014b72:	6839      	ldr	r1, [r7, #0]
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f000 fccd 	bl	8015514 <USBD_CtlError>
          break;
 8014b7a:	e004      	b.n	8014b86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014b7c:	6839      	ldr	r1, [r7, #0]
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 fcc8 	bl	8015514 <USBD_CtlError>
          break;
 8014b84:	e000      	b.n	8014b88 <USBD_StdItfReq+0x7c>
          break;
 8014b86:	bf00      	nop
      }
      break;
 8014b88:	e004      	b.n	8014b94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 fcc1 	bl	8015514 <USBD_CtlError>
      break;
 8014b92:	bf00      	nop
  }

  return ret;
 8014b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b084      	sub	sp, #16
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	889b      	ldrh	r3, [r3, #4]
 8014bb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bba:	2b40      	cmp	r3, #64	; 0x40
 8014bbc:	d007      	beq.n	8014bce <USBD_StdEPReq+0x30>
 8014bbe:	2b40      	cmp	r3, #64	; 0x40
 8014bc0:	f200 8145 	bhi.w	8014e4e <USBD_StdEPReq+0x2b0>
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d00c      	beq.n	8014be2 <USBD_StdEPReq+0x44>
 8014bc8:	2b20      	cmp	r3, #32
 8014bca:	f040 8140 	bne.w	8014e4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	4798      	blx	r3
 8014bdc:	4603      	mov	r3, r0
 8014bde:	73fb      	strb	r3, [r7, #15]
      break;
 8014be0:	e13a      	b.n	8014e58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	785b      	ldrb	r3, [r3, #1]
 8014be6:	2b03      	cmp	r3, #3
 8014be8:	d007      	beq.n	8014bfa <USBD_StdEPReq+0x5c>
 8014bea:	2b03      	cmp	r3, #3
 8014bec:	f300 8129 	bgt.w	8014e42 <USBD_StdEPReq+0x2a4>
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d07f      	beq.n	8014cf4 <USBD_StdEPReq+0x156>
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d03c      	beq.n	8014c72 <USBD_StdEPReq+0xd4>
 8014bf8:	e123      	b.n	8014e42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	2b02      	cmp	r3, #2
 8014c04:	d002      	beq.n	8014c0c <USBD_StdEPReq+0x6e>
 8014c06:	2b03      	cmp	r3, #3
 8014c08:	d016      	beq.n	8014c38 <USBD_StdEPReq+0x9a>
 8014c0a:	e02c      	b.n	8014c66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c0c:	7bbb      	ldrb	r3, [r7, #14]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d00d      	beq.n	8014c2e <USBD_StdEPReq+0x90>
 8014c12:	7bbb      	ldrb	r3, [r7, #14]
 8014c14:	2b80      	cmp	r3, #128	; 0x80
 8014c16:	d00a      	beq.n	8014c2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c18:	7bbb      	ldrb	r3, [r7, #14]
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f001 f917 	bl	8015e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c22:	2180      	movs	r1, #128	; 0x80
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f001 f913 	bl	8015e50 <USBD_LL_StallEP>
 8014c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014c2c:	e020      	b.n	8014c70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014c2e:	6839      	ldr	r1, [r7, #0]
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f000 fc6f 	bl	8015514 <USBD_CtlError>
              break;
 8014c36:	e01b      	b.n	8014c70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	885b      	ldrh	r3, [r3, #2]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d10e      	bne.n	8014c5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014c40:	7bbb      	ldrb	r3, [r7, #14]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00b      	beq.n	8014c5e <USBD_StdEPReq+0xc0>
 8014c46:	7bbb      	ldrb	r3, [r7, #14]
 8014c48:	2b80      	cmp	r3, #128	; 0x80
 8014c4a:	d008      	beq.n	8014c5e <USBD_StdEPReq+0xc0>
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	88db      	ldrh	r3, [r3, #6]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d104      	bne.n	8014c5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
 8014c56:	4619      	mov	r1, r3
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f001 f8f9 	bl	8015e50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 fd23 	bl	80156aa <USBD_CtlSendStatus>

              break;
 8014c64:	e004      	b.n	8014c70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 fc53 	bl	8015514 <USBD_CtlError>
              break;
 8014c6e:	bf00      	nop
          }
          break;
 8014c70:	e0ec      	b.n	8014e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	d002      	beq.n	8014c84 <USBD_StdEPReq+0xe6>
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d016      	beq.n	8014cb0 <USBD_StdEPReq+0x112>
 8014c82:	e030      	b.n	8014ce6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c84:	7bbb      	ldrb	r3, [r7, #14]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00d      	beq.n	8014ca6 <USBD_StdEPReq+0x108>
 8014c8a:	7bbb      	ldrb	r3, [r7, #14]
 8014c8c:	2b80      	cmp	r3, #128	; 0x80
 8014c8e:	d00a      	beq.n	8014ca6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c90:	7bbb      	ldrb	r3, [r7, #14]
 8014c92:	4619      	mov	r1, r3
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f001 f8db 	bl	8015e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c9a:	2180      	movs	r1, #128	; 0x80
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f001 f8d7 	bl	8015e50 <USBD_LL_StallEP>
 8014ca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ca4:	e025      	b.n	8014cf2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014ca6:	6839      	ldr	r1, [r7, #0]
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f000 fc33 	bl	8015514 <USBD_CtlError>
              break;
 8014cae:	e020      	b.n	8014cf2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	885b      	ldrh	r3, [r3, #2]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d11b      	bne.n	8014cf0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014cb8:	7bbb      	ldrb	r3, [r7, #14]
 8014cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d004      	beq.n	8014ccc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014cc2:	7bbb      	ldrb	r3, [r7, #14]
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f001 f8e1 	bl	8015e8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f000 fcec 	bl	80156aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014cd8:	689b      	ldr	r3, [r3, #8]
 8014cda:	6839      	ldr	r1, [r7, #0]
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	4798      	blx	r3
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014ce4:	e004      	b.n	8014cf0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 fc13 	bl	8015514 <USBD_CtlError>
              break;
 8014cee:	e000      	b.n	8014cf2 <USBD_StdEPReq+0x154>
              break;
 8014cf0:	bf00      	nop
          }
          break;
 8014cf2:	e0ab      	b.n	8014e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	2b02      	cmp	r3, #2
 8014cfe:	d002      	beq.n	8014d06 <USBD_StdEPReq+0x168>
 8014d00:	2b03      	cmp	r3, #3
 8014d02:	d032      	beq.n	8014d6a <USBD_StdEPReq+0x1cc>
 8014d04:	e097      	b.n	8014e36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d06:	7bbb      	ldrb	r3, [r7, #14]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d007      	beq.n	8014d1c <USBD_StdEPReq+0x17e>
 8014d0c:	7bbb      	ldrb	r3, [r7, #14]
 8014d0e:	2b80      	cmp	r3, #128	; 0x80
 8014d10:	d004      	beq.n	8014d1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 fbfd 	bl	8015514 <USBD_CtlError>
                break;
 8014d1a:	e091      	b.n	8014e40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	da0b      	bge.n	8014d3c <USBD_StdEPReq+0x19e>
 8014d24:	7bbb      	ldrb	r3, [r7, #14]
 8014d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	4413      	add	r3, r2
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	3310      	adds	r3, #16
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	4413      	add	r3, r2
 8014d38:	3304      	adds	r3, #4
 8014d3a:	e00b      	b.n	8014d54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d3c:	7bbb      	ldrb	r3, [r7, #14]
 8014d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d42:	4613      	mov	r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	4413      	add	r3, r2
 8014d52:	3304      	adds	r3, #4
 8014d54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	2202      	movs	r2, #2
 8014d60:	4619      	mov	r1, r3
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f000 fc47 	bl	80155f6 <USBD_CtlSendData>
              break;
 8014d68:	e06a      	b.n	8014e40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	da11      	bge.n	8014d96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014d72:	7bbb      	ldrb	r3, [r7, #14]
 8014d74:	f003 020f 	and.w	r2, r3, #15
 8014d78:	6879      	ldr	r1, [r7, #4]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4413      	add	r3, r2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	440b      	add	r3, r1
 8014d84:	3324      	adds	r3, #36	; 0x24
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d117      	bne.n	8014dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014d8c:	6839      	ldr	r1, [r7, #0]
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f000 fbc0 	bl	8015514 <USBD_CtlError>
                  break;
 8014d94:	e054      	b.n	8014e40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014d96:	7bbb      	ldrb	r3, [r7, #14]
 8014d98:	f003 020f 	and.w	r2, r3, #15
 8014d9c:	6879      	ldr	r1, [r7, #4]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	4413      	add	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	440b      	add	r3, r1
 8014da8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d104      	bne.n	8014dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014db2:	6839      	ldr	r1, [r7, #0]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f000 fbad 	bl	8015514 <USBD_CtlError>
                  break;
 8014dba:	e041      	b.n	8014e40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	da0b      	bge.n	8014ddc <USBD_StdEPReq+0x23e>
 8014dc4:	7bbb      	ldrb	r3, [r7, #14]
 8014dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dca:	4613      	mov	r3, r2
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	4413      	add	r3, r2
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	3310      	adds	r3, #16
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	3304      	adds	r3, #4
 8014dda:	e00b      	b.n	8014df4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ddc:	7bbb      	ldrb	r3, [r7, #14]
 8014dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014de2:	4613      	mov	r3, r2
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	4413      	add	r3, r2
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	4413      	add	r3, r2
 8014df2:	3304      	adds	r3, #4
 8014df4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014df6:	7bbb      	ldrb	r3, [r7, #14]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d002      	beq.n	8014e02 <USBD_StdEPReq+0x264>
 8014dfc:	7bbb      	ldrb	r3, [r7, #14]
 8014dfe:	2b80      	cmp	r3, #128	; 0x80
 8014e00:	d103      	bne.n	8014e0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	2200      	movs	r2, #0
 8014e06:	601a      	str	r2, [r3, #0]
 8014e08:	e00e      	b.n	8014e28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014e0a:	7bbb      	ldrb	r3, [r7, #14]
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f001 f85c 	bl	8015ecc <USBD_LL_IsStallEP>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d003      	beq.n	8014e22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	601a      	str	r2, [r3, #0]
 8014e20:	e002      	b.n	8014e28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	2200      	movs	r2, #0
 8014e26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	2202      	movs	r2, #2
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 fbe1 	bl	80155f6 <USBD_CtlSendData>
              break;
 8014e34:	e004      	b.n	8014e40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014e36:	6839      	ldr	r1, [r7, #0]
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 fb6b 	bl	8015514 <USBD_CtlError>
              break;
 8014e3e:	bf00      	nop
          }
          break;
 8014e40:	e004      	b.n	8014e4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014e42:	6839      	ldr	r1, [r7, #0]
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	f000 fb65 	bl	8015514 <USBD_CtlError>
          break;
 8014e4a:	bf00      	nop
      }
      break;
 8014e4c:	e004      	b.n	8014e58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014e4e:	6839      	ldr	r1, [r7, #0]
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f000 fb5f 	bl	8015514 <USBD_CtlError>
      break;
 8014e56:	bf00      	nop
  }

  return ret;
 8014e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3710      	adds	r7, #16
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
	...

08014e64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014e72:	2300      	movs	r3, #0
 8014e74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014e76:	2300      	movs	r3, #0
 8014e78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	885b      	ldrh	r3, [r3, #2]
 8014e7e:	0a1b      	lsrs	r3, r3, #8
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	3b01      	subs	r3, #1
 8014e84:	2b0e      	cmp	r3, #14
 8014e86:	f200 8152 	bhi.w	801512e <USBD_GetDescriptor+0x2ca>
 8014e8a:	a201      	add	r2, pc, #4	; (adr r2, 8014e90 <USBD_GetDescriptor+0x2c>)
 8014e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e90:	08014f01 	.word	0x08014f01
 8014e94:	08014f19 	.word	0x08014f19
 8014e98:	08014f59 	.word	0x08014f59
 8014e9c:	0801512f 	.word	0x0801512f
 8014ea0:	0801512f 	.word	0x0801512f
 8014ea4:	080150cf 	.word	0x080150cf
 8014ea8:	080150fb 	.word	0x080150fb
 8014eac:	0801512f 	.word	0x0801512f
 8014eb0:	0801512f 	.word	0x0801512f
 8014eb4:	0801512f 	.word	0x0801512f
 8014eb8:	0801512f 	.word	0x0801512f
 8014ebc:	0801512f 	.word	0x0801512f
 8014ec0:	0801512f 	.word	0x0801512f
 8014ec4:	0801512f 	.word	0x0801512f
 8014ec8:	08014ecd 	.word	0x08014ecd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ed2:	69db      	ldr	r3, [r3, #28]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d00b      	beq.n	8014ef0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ede:	69db      	ldr	r3, [r3, #28]
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	7c12      	ldrb	r2, [r2, #16]
 8014ee4:	f107 0108 	add.w	r1, r7, #8
 8014ee8:	4610      	mov	r0, r2
 8014eea:	4798      	blx	r3
 8014eec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014eee:	e126      	b.n	801513e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014ef0:	6839      	ldr	r1, [r7, #0]
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f000 fb0e 	bl	8015514 <USBD_CtlError>
        err++;
 8014ef8:	7afb      	ldrb	r3, [r7, #11]
 8014efa:	3301      	adds	r3, #1
 8014efc:	72fb      	strb	r3, [r7, #11]
      break;
 8014efe:	e11e      	b.n	801513e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	7c12      	ldrb	r2, [r2, #16]
 8014f0c:	f107 0108 	add.w	r1, r7, #8
 8014f10:	4610      	mov	r0, r2
 8014f12:	4798      	blx	r3
 8014f14:	60f8      	str	r0, [r7, #12]
      break;
 8014f16:	e112      	b.n	801513e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7c1b      	ldrb	r3, [r3, #16]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d10d      	bne.n	8014f3c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f28:	f107 0208 	add.w	r2, r7, #8
 8014f2c:	4610      	mov	r0, r2
 8014f2e:	4798      	blx	r3
 8014f30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	3301      	adds	r3, #1
 8014f36:	2202      	movs	r2, #2
 8014f38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014f3a:	e100      	b.n	801513e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f44:	f107 0208 	add.w	r2, r7, #8
 8014f48:	4610      	mov	r0, r2
 8014f4a:	4798      	blx	r3
 8014f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3301      	adds	r3, #1
 8014f52:	2202      	movs	r2, #2
 8014f54:	701a      	strb	r2, [r3, #0]
      break;
 8014f56:	e0f2      	b.n	801513e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	885b      	ldrh	r3, [r3, #2]
 8014f5c:	b2db      	uxtb	r3, r3
 8014f5e:	2b05      	cmp	r3, #5
 8014f60:	f200 80ac 	bhi.w	80150bc <USBD_GetDescriptor+0x258>
 8014f64:	a201      	add	r2, pc, #4	; (adr r2, 8014f6c <USBD_GetDescriptor+0x108>)
 8014f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f6a:	bf00      	nop
 8014f6c:	08014f85 	.word	0x08014f85
 8014f70:	08014fb9 	.word	0x08014fb9
 8014f74:	08014fed 	.word	0x08014fed
 8014f78:	08015021 	.word	0x08015021
 8014f7c:	08015055 	.word	0x08015055
 8014f80:	08015089 	.word	0x08015089
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d00b      	beq.n	8014fa8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	7c12      	ldrb	r2, [r2, #16]
 8014f9c:	f107 0108 	add.w	r1, r7, #8
 8014fa0:	4610      	mov	r0, r2
 8014fa2:	4798      	blx	r3
 8014fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fa6:	e091      	b.n	80150cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014fa8:	6839      	ldr	r1, [r7, #0]
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f000 fab2 	bl	8015514 <USBD_CtlError>
            err++;
 8014fb0:	7afb      	ldrb	r3, [r7, #11]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8014fb6:	e089      	b.n	80150cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fbe:	689b      	ldr	r3, [r3, #8]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00b      	beq.n	8014fdc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fca:	689b      	ldr	r3, [r3, #8]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	7c12      	ldrb	r2, [r2, #16]
 8014fd0:	f107 0108 	add.w	r1, r7, #8
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	4798      	blx	r3
 8014fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fda:	e077      	b.n	80150cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014fdc:	6839      	ldr	r1, [r7, #0]
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 fa98 	bl	8015514 <USBD_CtlError>
            err++;
 8014fe4:	7afb      	ldrb	r3, [r7, #11]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8014fea:	e06f      	b.n	80150cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ff2:	68db      	ldr	r3, [r3, #12]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d00b      	beq.n	8015010 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ffe:	68db      	ldr	r3, [r3, #12]
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	7c12      	ldrb	r2, [r2, #16]
 8015004:	f107 0108 	add.w	r1, r7, #8
 8015008:	4610      	mov	r0, r2
 801500a:	4798      	blx	r3
 801500c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801500e:	e05d      	b.n	80150cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015010:	6839      	ldr	r1, [r7, #0]
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f000 fa7e 	bl	8015514 <USBD_CtlError>
            err++;
 8015018:	7afb      	ldrb	r3, [r7, #11]
 801501a:	3301      	adds	r3, #1
 801501c:	72fb      	strb	r3, [r7, #11]
          break;
 801501e:	e055      	b.n	80150cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015026:	691b      	ldr	r3, [r3, #16]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d00b      	beq.n	8015044 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015032:	691b      	ldr	r3, [r3, #16]
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	7c12      	ldrb	r2, [r2, #16]
 8015038:	f107 0108 	add.w	r1, r7, #8
 801503c:	4610      	mov	r0, r2
 801503e:	4798      	blx	r3
 8015040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015042:	e043      	b.n	80150cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015044:	6839      	ldr	r1, [r7, #0]
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f000 fa64 	bl	8015514 <USBD_CtlError>
            err++;
 801504c:	7afb      	ldrb	r3, [r7, #11]
 801504e:	3301      	adds	r3, #1
 8015050:	72fb      	strb	r3, [r7, #11]
          break;
 8015052:	e03b      	b.n	80150cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801505a:	695b      	ldr	r3, [r3, #20]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d00b      	beq.n	8015078 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015066:	695b      	ldr	r3, [r3, #20]
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	7c12      	ldrb	r2, [r2, #16]
 801506c:	f107 0108 	add.w	r1, r7, #8
 8015070:	4610      	mov	r0, r2
 8015072:	4798      	blx	r3
 8015074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015076:	e029      	b.n	80150cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015078:	6839      	ldr	r1, [r7, #0]
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f000 fa4a 	bl	8015514 <USBD_CtlError>
            err++;
 8015080:	7afb      	ldrb	r3, [r7, #11]
 8015082:	3301      	adds	r3, #1
 8015084:	72fb      	strb	r3, [r7, #11]
          break;
 8015086:	e021      	b.n	80150cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801508e:	699b      	ldr	r3, [r3, #24]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d00b      	beq.n	80150ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801509a:	699b      	ldr	r3, [r3, #24]
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	7c12      	ldrb	r2, [r2, #16]
 80150a0:	f107 0108 	add.w	r1, r7, #8
 80150a4:	4610      	mov	r0, r2
 80150a6:	4798      	blx	r3
 80150a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150aa:	e00f      	b.n	80150cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80150ac:	6839      	ldr	r1, [r7, #0]
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f000 fa30 	bl	8015514 <USBD_CtlError>
            err++;
 80150b4:	7afb      	ldrb	r3, [r7, #11]
 80150b6:	3301      	adds	r3, #1
 80150b8:	72fb      	strb	r3, [r7, #11]
          break;
 80150ba:	e007      	b.n	80150cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80150bc:	6839      	ldr	r1, [r7, #0]
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f000 fa28 	bl	8015514 <USBD_CtlError>
          err++;
 80150c4:	7afb      	ldrb	r3, [r7, #11]
 80150c6:	3301      	adds	r3, #1
 80150c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80150ca:	bf00      	nop
      }
      break;
 80150cc:	e037      	b.n	801513e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	7c1b      	ldrb	r3, [r3, #16]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d109      	bne.n	80150ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150de:	f107 0208 	add.w	r2, r7, #8
 80150e2:	4610      	mov	r0, r2
 80150e4:	4798      	blx	r3
 80150e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80150e8:	e029      	b.n	801513e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f000 fa11 	bl	8015514 <USBD_CtlError>
        err++;
 80150f2:	7afb      	ldrb	r3, [r7, #11]
 80150f4:	3301      	adds	r3, #1
 80150f6:	72fb      	strb	r3, [r7, #11]
      break;
 80150f8:	e021      	b.n	801513e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	7c1b      	ldrb	r3, [r3, #16]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d10d      	bne.n	801511e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801510a:	f107 0208 	add.w	r2, r7, #8
 801510e:	4610      	mov	r0, r2
 8015110:	4798      	blx	r3
 8015112:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	3301      	adds	r3, #1
 8015118:	2207      	movs	r2, #7
 801511a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801511c:	e00f      	b.n	801513e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801511e:	6839      	ldr	r1, [r7, #0]
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f000 f9f7 	bl	8015514 <USBD_CtlError>
        err++;
 8015126:	7afb      	ldrb	r3, [r7, #11]
 8015128:	3301      	adds	r3, #1
 801512a:	72fb      	strb	r3, [r7, #11]
      break;
 801512c:	e007      	b.n	801513e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801512e:	6839      	ldr	r1, [r7, #0]
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f000 f9ef 	bl	8015514 <USBD_CtlError>
      err++;
 8015136:	7afb      	ldrb	r3, [r7, #11]
 8015138:	3301      	adds	r3, #1
 801513a:	72fb      	strb	r3, [r7, #11]
      break;
 801513c:	bf00      	nop
  }

  if (err != 0U)
 801513e:	7afb      	ldrb	r3, [r7, #11]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d11e      	bne.n	8015182 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	88db      	ldrh	r3, [r3, #6]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d016      	beq.n	801517a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801514c:	893b      	ldrh	r3, [r7, #8]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d00e      	beq.n	8015170 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	88da      	ldrh	r2, [r3, #6]
 8015156:	893b      	ldrh	r3, [r7, #8]
 8015158:	4293      	cmp	r3, r2
 801515a:	bf28      	it	cs
 801515c:	4613      	movcs	r3, r2
 801515e:	b29b      	uxth	r3, r3
 8015160:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015162:	893b      	ldrh	r3, [r7, #8]
 8015164:	461a      	mov	r2, r3
 8015166:	68f9      	ldr	r1, [r7, #12]
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 fa44 	bl	80155f6 <USBD_CtlSendData>
 801516e:	e009      	b.n	8015184 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015170:	6839      	ldr	r1, [r7, #0]
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f000 f9ce 	bl	8015514 <USBD_CtlError>
 8015178:	e004      	b.n	8015184 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f000 fa95 	bl	80156aa <USBD_CtlSendStatus>
 8015180:	e000      	b.n	8015184 <USBD_GetDescriptor+0x320>
    return;
 8015182:	bf00      	nop
  }
}
 8015184:	3710      	adds	r7, #16
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop

0801518c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b084      	sub	sp, #16
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	889b      	ldrh	r3, [r3, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d131      	bne.n	8015202 <USBD_SetAddress+0x76>
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	88db      	ldrh	r3, [r3, #6]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d12d      	bne.n	8015202 <USBD_SetAddress+0x76>
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	885b      	ldrh	r3, [r3, #2]
 80151aa:	2b7f      	cmp	r3, #127	; 0x7f
 80151ac:	d829      	bhi.n	8015202 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	885b      	ldrh	r3, [r3, #2]
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	2b03      	cmp	r3, #3
 80151c4:	d104      	bne.n	80151d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80151c6:	6839      	ldr	r1, [r7, #0]
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f000 f9a3 	bl	8015514 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ce:	e01d      	b.n	801520c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	7bfa      	ldrb	r2, [r7, #15]
 80151d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80151d8:	7bfb      	ldrb	r3, [r7, #15]
 80151da:	4619      	mov	r1, r3
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 fea1 	bl	8015f24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 fa61 	bl	80156aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80151e8:	7bfb      	ldrb	r3, [r7, #15]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d004      	beq.n	80151f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2202      	movs	r2, #2
 80151f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151f6:	e009      	b.n	801520c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2201      	movs	r2, #1
 80151fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015200:	e004      	b.n	801520c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015202:	6839      	ldr	r1, [r7, #0]
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f000 f985 	bl	8015514 <USBD_CtlError>
  }
}
 801520a:	bf00      	nop
 801520c:	bf00      	nop
 801520e:	3710      	adds	r7, #16
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}

08015214 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b084      	sub	sp, #16
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801521e:	2300      	movs	r3, #0
 8015220:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	885b      	ldrh	r3, [r3, #2]
 8015226:	b2da      	uxtb	r2, r3
 8015228:	4b4c      	ldr	r3, [pc, #304]	; (801535c <USBD_SetConfig+0x148>)
 801522a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801522c:	4b4b      	ldr	r3, [pc, #300]	; (801535c <USBD_SetConfig+0x148>)
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	2b01      	cmp	r3, #1
 8015232:	d905      	bls.n	8015240 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015234:	6839      	ldr	r1, [r7, #0]
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f000 f96c 	bl	8015514 <USBD_CtlError>
    return USBD_FAIL;
 801523c:	2303      	movs	r3, #3
 801523e:	e088      	b.n	8015352 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015246:	b2db      	uxtb	r3, r3
 8015248:	2b02      	cmp	r3, #2
 801524a:	d002      	beq.n	8015252 <USBD_SetConfig+0x3e>
 801524c:	2b03      	cmp	r3, #3
 801524e:	d025      	beq.n	801529c <USBD_SetConfig+0x88>
 8015250:	e071      	b.n	8015336 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015252:	4b42      	ldr	r3, [pc, #264]	; (801535c <USBD_SetConfig+0x148>)
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d01c      	beq.n	8015294 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801525a:	4b40      	ldr	r3, [pc, #256]	; (801535c <USBD_SetConfig+0x148>)
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	461a      	mov	r2, r3
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015264:	4b3d      	ldr	r3, [pc, #244]	; (801535c <USBD_SetConfig+0x148>)
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	4619      	mov	r1, r3
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7ff f992 	bl	8014594 <USBD_SetClassConfig>
 8015270:	4603      	mov	r3, r0
 8015272:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015274:	7bfb      	ldrb	r3, [r7, #15]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d004      	beq.n	8015284 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801527a:	6839      	ldr	r1, [r7, #0]
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f000 f949 	bl	8015514 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015282:	e065      	b.n	8015350 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f000 fa10 	bl	80156aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2203      	movs	r2, #3
 801528e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015292:	e05d      	b.n	8015350 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f000 fa08 	bl	80156aa <USBD_CtlSendStatus>
      break;
 801529a:	e059      	b.n	8015350 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801529c:	4b2f      	ldr	r3, [pc, #188]	; (801535c <USBD_SetConfig+0x148>)
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d112      	bne.n	80152ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2202      	movs	r2, #2
 80152a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80152ac:	4b2b      	ldr	r3, [pc, #172]	; (801535c <USBD_SetConfig+0x148>)
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	461a      	mov	r2, r3
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80152b6:	4b29      	ldr	r3, [pc, #164]	; (801535c <USBD_SetConfig+0x148>)
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	4619      	mov	r1, r3
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7ff f985 	bl	80145cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f000 f9f1 	bl	80156aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80152c8:	e042      	b.n	8015350 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80152ca:	4b24      	ldr	r3, [pc, #144]	; (801535c <USBD_SetConfig+0x148>)
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	461a      	mov	r2, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d02a      	beq.n	801532e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	685b      	ldr	r3, [r3, #4]
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	4619      	mov	r1, r3
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f7ff f973 	bl	80145cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80152e6:	4b1d      	ldr	r3, [pc, #116]	; (801535c <USBD_SetConfig+0x148>)
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	461a      	mov	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80152f0:	4b1a      	ldr	r3, [pc, #104]	; (801535c <USBD_SetConfig+0x148>)
 80152f2:	781b      	ldrb	r3, [r3, #0]
 80152f4:	4619      	mov	r1, r3
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f7ff f94c 	bl	8014594 <USBD_SetClassConfig>
 80152fc:	4603      	mov	r3, r0
 80152fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015300:	7bfb      	ldrb	r3, [r7, #15]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d00f      	beq.n	8015326 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015306:	6839      	ldr	r1, [r7, #0]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f000 f903 	bl	8015514 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	b2db      	uxtb	r3, r3
 8015314:	4619      	mov	r1, r3
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f7ff f958 	bl	80145cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2202      	movs	r2, #2
 8015320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015324:	e014      	b.n	8015350 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 f9bf 	bl	80156aa <USBD_CtlSendStatus>
      break;
 801532c:	e010      	b.n	8015350 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f000 f9bb 	bl	80156aa <USBD_CtlSendStatus>
      break;
 8015334:	e00c      	b.n	8015350 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015336:	6839      	ldr	r1, [r7, #0]
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	f000 f8eb 	bl	8015514 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801533e:	4b07      	ldr	r3, [pc, #28]	; (801535c <USBD_SetConfig+0x148>)
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	4619      	mov	r1, r3
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f7ff f941 	bl	80145cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801534a:	2303      	movs	r3, #3
 801534c:	73fb      	strb	r3, [r7, #15]
      break;
 801534e:	bf00      	nop
  }

  return ret;
 8015350:	7bfb      	ldrb	r3, [r7, #15]
}
 8015352:	4618      	mov	r0, r3
 8015354:	3710      	adds	r7, #16
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop
 801535c:	200023dc 	.word	0x200023dc

08015360 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
 8015368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	88db      	ldrh	r3, [r3, #6]
 801536e:	2b01      	cmp	r3, #1
 8015370:	d004      	beq.n	801537c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015372:	6839      	ldr	r1, [r7, #0]
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f000 f8cd 	bl	8015514 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801537a:	e023      	b.n	80153c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015382:	b2db      	uxtb	r3, r3
 8015384:	2b02      	cmp	r3, #2
 8015386:	dc02      	bgt.n	801538e <USBD_GetConfig+0x2e>
 8015388:	2b00      	cmp	r3, #0
 801538a:	dc03      	bgt.n	8015394 <USBD_GetConfig+0x34>
 801538c:	e015      	b.n	80153ba <USBD_GetConfig+0x5a>
 801538e:	2b03      	cmp	r3, #3
 8015390:	d00b      	beq.n	80153aa <USBD_GetConfig+0x4a>
 8015392:	e012      	b.n	80153ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	3308      	adds	r3, #8
 801539e:	2201      	movs	r2, #1
 80153a0:	4619      	mov	r1, r3
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f000 f927 	bl	80155f6 <USBD_CtlSendData>
        break;
 80153a8:	e00c      	b.n	80153c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	3304      	adds	r3, #4
 80153ae:	2201      	movs	r2, #1
 80153b0:	4619      	mov	r1, r3
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 f91f 	bl	80155f6 <USBD_CtlSendData>
        break;
 80153b8:	e004      	b.n	80153c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80153ba:	6839      	ldr	r1, [r7, #0]
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f000 f8a9 	bl	8015514 <USBD_CtlError>
        break;
 80153c2:	bf00      	nop
}
 80153c4:	bf00      	nop
 80153c6:	3708      	adds	r7, #8
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}

080153cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	3b01      	subs	r3, #1
 80153e0:	2b02      	cmp	r3, #2
 80153e2:	d81e      	bhi.n	8015422 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	88db      	ldrh	r3, [r3, #6]
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d004      	beq.n	80153f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80153ec:	6839      	ldr	r1, [r7, #0]
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f000 f890 	bl	8015514 <USBD_CtlError>
        break;
 80153f4:	e01a      	b.n	801542c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2201      	movs	r2, #1
 80153fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015402:	2b00      	cmp	r3, #0
 8015404:	d005      	beq.n	8015412 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	68db      	ldr	r3, [r3, #12]
 801540a:	f043 0202 	orr.w	r2, r3, #2
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	330c      	adds	r3, #12
 8015416:	2202      	movs	r2, #2
 8015418:	4619      	mov	r1, r3
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f8eb 	bl	80155f6 <USBD_CtlSendData>
      break;
 8015420:	e004      	b.n	801542c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015422:	6839      	ldr	r1, [r7, #0]
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f000 f875 	bl	8015514 <USBD_CtlError>
      break;
 801542a:	bf00      	nop
  }
}
 801542c:	bf00      	nop
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}

08015434 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b082      	sub	sp, #8
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	885b      	ldrh	r3, [r3, #2]
 8015442:	2b01      	cmp	r3, #1
 8015444:	d106      	bne.n	8015454 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2201      	movs	r2, #1
 801544a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 f92b 	bl	80156aa <USBD_CtlSendStatus>
  }
}
 8015454:	bf00      	nop
 8015456:	3708      	adds	r7, #8
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801546c:	b2db      	uxtb	r3, r3
 801546e:	3b01      	subs	r3, #1
 8015470:	2b02      	cmp	r3, #2
 8015472:	d80b      	bhi.n	801548c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	885b      	ldrh	r3, [r3, #2]
 8015478:	2b01      	cmp	r3, #1
 801547a:	d10c      	bne.n	8015496 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2200      	movs	r2, #0
 8015480:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f000 f910 	bl	80156aa <USBD_CtlSendStatus>
      }
      break;
 801548a:	e004      	b.n	8015496 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801548c:	6839      	ldr	r1, [r7, #0]
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f000 f840 	bl	8015514 <USBD_CtlError>
      break;
 8015494:	e000      	b.n	8015498 <USBD_ClrFeature+0x3c>
      break;
 8015496:	bf00      	nop
  }
}
 8015498:	bf00      	nop
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
 80154a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	781a      	ldrb	r2, [r3, #0]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	3301      	adds	r3, #1
 80154ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	781a      	ldrb	r2, [r3, #0]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	3301      	adds	r3, #1
 80154c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80154ca:	68f8      	ldr	r0, [r7, #12]
 80154cc:	f7ff fa92 	bl	80149f4 <SWAPBYTE>
 80154d0:	4603      	mov	r3, r0
 80154d2:	461a      	mov	r2, r3
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	3301      	adds	r3, #1
 80154dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	3301      	adds	r3, #1
 80154e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80154e4:	68f8      	ldr	r0, [r7, #12]
 80154e6:	f7ff fa85 	bl	80149f4 <SWAPBYTE>
 80154ea:	4603      	mov	r3, r0
 80154ec:	461a      	mov	r2, r3
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	3301      	adds	r3, #1
 80154f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	3301      	adds	r3, #1
 80154fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	f7ff fa78 	bl	80149f4 <SWAPBYTE>
 8015504:	4603      	mov	r3, r0
 8015506:	461a      	mov	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	80da      	strh	r2, [r3, #6]
}
 801550c:	bf00      	nop
 801550e:	3710      	adds	r7, #16
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b082      	sub	sp, #8
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801551e:	2180      	movs	r1, #128	; 0x80
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f000 fc95 	bl	8015e50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015526:	2100      	movs	r1, #0
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f000 fc91 	bl	8015e50 <USBD_LL_StallEP>
}
 801552e:	bf00      	nop
 8015530:	3708      	adds	r7, #8
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015536:	b580      	push	{r7, lr}
 8015538:	b086      	sub	sp, #24
 801553a:	af00      	add	r7, sp, #0
 801553c:	60f8      	str	r0, [r7, #12]
 801553e:	60b9      	str	r1, [r7, #8]
 8015540:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015542:	2300      	movs	r3, #0
 8015544:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d036      	beq.n	80155ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015550:	6938      	ldr	r0, [r7, #16]
 8015552:	f000 f836 	bl	80155c2 <USBD_GetLen>
 8015556:	4603      	mov	r3, r0
 8015558:	3301      	adds	r3, #1
 801555a:	b29b      	uxth	r3, r3
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	b29a      	uxth	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015564:	7dfb      	ldrb	r3, [r7, #23]
 8015566:	68ba      	ldr	r2, [r7, #8]
 8015568:	4413      	add	r3, r2
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	7812      	ldrb	r2, [r2, #0]
 801556e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015570:	7dfb      	ldrb	r3, [r7, #23]
 8015572:	3301      	adds	r3, #1
 8015574:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015576:	7dfb      	ldrb	r3, [r7, #23]
 8015578:	68ba      	ldr	r2, [r7, #8]
 801557a:	4413      	add	r3, r2
 801557c:	2203      	movs	r2, #3
 801557e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015580:	7dfb      	ldrb	r3, [r7, #23]
 8015582:	3301      	adds	r3, #1
 8015584:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015586:	e013      	b.n	80155b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015588:	7dfb      	ldrb	r3, [r7, #23]
 801558a:	68ba      	ldr	r2, [r7, #8]
 801558c:	4413      	add	r3, r2
 801558e:	693a      	ldr	r2, [r7, #16]
 8015590:	7812      	ldrb	r2, [r2, #0]
 8015592:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	3301      	adds	r3, #1
 8015598:	613b      	str	r3, [r7, #16]
    idx++;
 801559a:	7dfb      	ldrb	r3, [r7, #23]
 801559c:	3301      	adds	r3, #1
 801559e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80155a0:	7dfb      	ldrb	r3, [r7, #23]
 80155a2:	68ba      	ldr	r2, [r7, #8]
 80155a4:	4413      	add	r3, r2
 80155a6:	2200      	movs	r2, #0
 80155a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80155aa:	7dfb      	ldrb	r3, [r7, #23]
 80155ac:	3301      	adds	r3, #1
 80155ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	781b      	ldrb	r3, [r3, #0]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d1e7      	bne.n	8015588 <USBD_GetString+0x52>
 80155b8:	e000      	b.n	80155bc <USBD_GetString+0x86>
    return;
 80155ba:	bf00      	nop
  }
}
 80155bc:	3718      	adds	r7, #24
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80155c2:	b480      	push	{r7}
 80155c4:	b085      	sub	sp, #20
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80155ca:	2300      	movs	r3, #0
 80155cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80155d2:	e005      	b.n	80155e0 <USBD_GetLen+0x1e>
  {
    len++;
 80155d4:	7bfb      	ldrb	r3, [r7, #15]
 80155d6:	3301      	adds	r3, #1
 80155d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	3301      	adds	r3, #1
 80155de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	781b      	ldrb	r3, [r3, #0]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d1f5      	bne.n	80155d4 <USBD_GetLen+0x12>
  }

  return len;
 80155e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3714      	adds	r7, #20
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr

080155f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b084      	sub	sp, #16
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	60f8      	str	r0, [r7, #12]
 80155fe:	60b9      	str	r1, [r7, #8]
 8015600:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	2202      	movs	r2, #2
 8015606:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	68ba      	ldr	r2, [r7, #8]
 801561a:	2100      	movs	r1, #0
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	f000 fca0 	bl	8015f62 <USBD_LL_Transmit>

  return USBD_OK;
 8015622:	2300      	movs	r3, #0
}
 8015624:	4618      	mov	r0, r3
 8015626:	3710      	adds	r7, #16
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b084      	sub	sp, #16
 8015630:	af00      	add	r7, sp, #0
 8015632:	60f8      	str	r0, [r7, #12]
 8015634:	60b9      	str	r1, [r7, #8]
 8015636:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	68ba      	ldr	r2, [r7, #8]
 801563c:	2100      	movs	r1, #0
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	f000 fc8f 	bl	8015f62 <USBD_LL_Transmit>

  return USBD_OK;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b084      	sub	sp, #16
 8015652:	af00      	add	r7, sp, #0
 8015654:	60f8      	str	r0, [r7, #12]
 8015656:	60b9      	str	r1, [r7, #8]
 8015658:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	2203      	movs	r2, #3
 801565e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	687a      	ldr	r2, [r7, #4]
 8015666:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	687a      	ldr	r2, [r7, #4]
 801566e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	68ba      	ldr	r2, [r7, #8]
 8015676:	2100      	movs	r1, #0
 8015678:	68f8      	ldr	r0, [r7, #12]
 801567a:	f000 fc93 	bl	8015fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801567e:	2300      	movs	r3, #0
}
 8015680:	4618      	mov	r0, r3
 8015682:	3710      	adds	r7, #16
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}

08015688 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b084      	sub	sp, #16
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	2100      	movs	r1, #0
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	f000 fc82 	bl	8015fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3710      	adds	r7, #16
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}

080156aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80156aa:	b580      	push	{r7, lr}
 80156ac:	b082      	sub	sp, #8
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2204      	movs	r2, #4
 80156b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80156ba:	2300      	movs	r3, #0
 80156bc:	2200      	movs	r2, #0
 80156be:	2100      	movs	r1, #0
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f000 fc4e 	bl	8015f62 <USBD_LL_Transmit>

  return USBD_OK;
 80156c6:	2300      	movs	r3, #0
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	3708      	adds	r7, #8
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2205      	movs	r2, #5
 80156dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156e0:	2300      	movs	r3, #0
 80156e2:	2200      	movs	r2, #0
 80156e4:	2100      	movs	r1, #0
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f000 fc5c 	bl	8015fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80156ec:	2300      	movs	r3, #0
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3708      	adds	r7, #8
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
	...

080156f8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80156fc:	2200      	movs	r2, #0
 80156fe:	4912      	ldr	r1, [pc, #72]	; (8015748 <MX_USB_Device_Init+0x50>)
 8015700:	4812      	ldr	r0, [pc, #72]	; (801574c <MX_USB_Device_Init+0x54>)
 8015702:	f7fe fed9 	bl	80144b8 <USBD_Init>
 8015706:	4603      	mov	r3, r0
 8015708:	2b00      	cmp	r3, #0
 801570a:	d001      	beq.n	8015710 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801570c:	f7ee fdaa 	bl	8004264 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015710:	490f      	ldr	r1, [pc, #60]	; (8015750 <MX_USB_Device_Init+0x58>)
 8015712:	480e      	ldr	r0, [pc, #56]	; (801574c <MX_USB_Device_Init+0x54>)
 8015714:	f7fe ff00 	bl	8014518 <USBD_RegisterClass>
 8015718:	4603      	mov	r3, r0
 801571a:	2b00      	cmp	r3, #0
 801571c:	d001      	beq.n	8015722 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801571e:	f7ee fda1 	bl	8004264 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015722:	490c      	ldr	r1, [pc, #48]	; (8015754 <MX_USB_Device_Init+0x5c>)
 8015724:	4809      	ldr	r0, [pc, #36]	; (801574c <MX_USB_Device_Init+0x54>)
 8015726:	f7fe fe21 	bl	801436c <USBD_CDC_RegisterInterface>
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d001      	beq.n	8015734 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015730:	f7ee fd98 	bl	8004264 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015734:	4805      	ldr	r0, [pc, #20]	; (801574c <MX_USB_Device_Init+0x54>)
 8015736:	f7fe ff16 	bl	8014566 <USBD_Start>
 801573a:	4603      	mov	r3, r0
 801573c:	2b00      	cmp	r3, #0
 801573e:	d001      	beq.n	8015744 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015740:	f7ee fd90 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015744:	bf00      	nop
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20000324 	.word	0x20000324
 801574c:	200023e0 	.word	0x200023e0
 8015750:	2000020c 	.word	0x2000020c
 8015754:	20000310 	.word	0x20000310

08015758 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801575c:	2200      	movs	r2, #0
 801575e:	4905      	ldr	r1, [pc, #20]	; (8015774 <CDC_Init_FS+0x1c>)
 8015760:	4805      	ldr	r0, [pc, #20]	; (8015778 <CDC_Init_FS+0x20>)
 8015762:	f7fe fe18 	bl	8014396 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015766:	4905      	ldr	r1, [pc, #20]	; (801577c <CDC_Init_FS+0x24>)
 8015768:	4803      	ldr	r0, [pc, #12]	; (8015778 <CDC_Init_FS+0x20>)
 801576a:	f7fe fe32 	bl	80143d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801576e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015770:	4618      	mov	r0, r3
 8015772:	bd80      	pop	{r7, pc}
 8015774:	20002ab0 	.word	0x20002ab0
 8015778:	200023e0 	.word	0x200023e0
 801577c:	200026b0 	.word	0x200026b0

08015780 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015780:	b480      	push	{r7}
 8015782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015784:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015786:	4618      	mov	r0, r3
 8015788:	46bd      	mov	sp, r7
 801578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578e:	4770      	bx	lr

08015790 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
 8015796:	4603      	mov	r3, r0
 8015798:	6039      	str	r1, [r7, #0]
 801579a:	71fb      	strb	r3, [r7, #7]
 801579c:	4613      	mov	r3, r2
 801579e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80157a0:	79fb      	ldrb	r3, [r7, #7]
 80157a2:	2b23      	cmp	r3, #35	; 0x23
 80157a4:	d84a      	bhi.n	801583c <CDC_Control_FS+0xac>
 80157a6:	a201      	add	r2, pc, #4	; (adr r2, 80157ac <CDC_Control_FS+0x1c>)
 80157a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ac:	0801583d 	.word	0x0801583d
 80157b0:	0801583d 	.word	0x0801583d
 80157b4:	0801583d 	.word	0x0801583d
 80157b8:	0801583d 	.word	0x0801583d
 80157bc:	0801583d 	.word	0x0801583d
 80157c0:	0801583d 	.word	0x0801583d
 80157c4:	0801583d 	.word	0x0801583d
 80157c8:	0801583d 	.word	0x0801583d
 80157cc:	0801583d 	.word	0x0801583d
 80157d0:	0801583d 	.word	0x0801583d
 80157d4:	0801583d 	.word	0x0801583d
 80157d8:	0801583d 	.word	0x0801583d
 80157dc:	0801583d 	.word	0x0801583d
 80157e0:	0801583d 	.word	0x0801583d
 80157e4:	0801583d 	.word	0x0801583d
 80157e8:	0801583d 	.word	0x0801583d
 80157ec:	0801583d 	.word	0x0801583d
 80157f0:	0801583d 	.word	0x0801583d
 80157f4:	0801583d 	.word	0x0801583d
 80157f8:	0801583d 	.word	0x0801583d
 80157fc:	0801583d 	.word	0x0801583d
 8015800:	0801583d 	.word	0x0801583d
 8015804:	0801583d 	.word	0x0801583d
 8015808:	0801583d 	.word	0x0801583d
 801580c:	0801583d 	.word	0x0801583d
 8015810:	0801583d 	.word	0x0801583d
 8015814:	0801583d 	.word	0x0801583d
 8015818:	0801583d 	.word	0x0801583d
 801581c:	0801583d 	.word	0x0801583d
 8015820:	0801583d 	.word	0x0801583d
 8015824:	0801583d 	.word	0x0801583d
 8015828:	0801583d 	.word	0x0801583d
 801582c:	0801583d 	.word	0x0801583d
 8015830:	0801583d 	.word	0x0801583d
 8015834:	0801583d 	.word	0x0801583d
 8015838:	0801583d 	.word	0x0801583d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801583c:	bf00      	nop
  }

  return (USBD_OK);
 801583e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015840:	4618      	mov	r0, r3
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr

0801584c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015856:	6879      	ldr	r1, [r7, #4]
 8015858:	4805      	ldr	r0, [pc, #20]	; (8015870 <CDC_Receive_FS+0x24>)
 801585a:	f7fe fdba 	bl	80143d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801585e:	4804      	ldr	r0, [pc, #16]	; (8015870 <CDC_Receive_FS+0x24>)
 8015860:	f7fe fe00 	bl	8014464 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015864:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015866:	4618      	mov	r0, r3
 8015868:	3708      	adds	r7, #8
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	200023e0 	.word	0x200023e0

08015874 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	460b      	mov	r3, r1
 801587e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015880:	2300      	movs	r3, #0
 8015882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015884:	4b0d      	ldr	r3, [pc, #52]	; (80158bc <CDC_Transmit_FS+0x48>)
 8015886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801588a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015892:	2b00      	cmp	r3, #0
 8015894:	d001      	beq.n	801589a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015896:	2301      	movs	r3, #1
 8015898:	e00b      	b.n	80158b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801589a:	887b      	ldrh	r3, [r7, #2]
 801589c:	461a      	mov	r2, r3
 801589e:	6879      	ldr	r1, [r7, #4]
 80158a0:	4806      	ldr	r0, [pc, #24]	; (80158bc <CDC_Transmit_FS+0x48>)
 80158a2:	f7fe fd78 	bl	8014396 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80158a6:	4805      	ldr	r0, [pc, #20]	; (80158bc <CDC_Transmit_FS+0x48>)
 80158a8:	f7fe fdac 	bl	8014404 <USBD_CDC_TransmitPacket>
 80158ac:	4603      	mov	r3, r0
 80158ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80158b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80158b2:	4618      	mov	r0, r3
 80158b4:	3710      	adds	r7, #16
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}
 80158ba:	bf00      	nop
 80158bc:	200023e0 	.word	0x200023e0

080158c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80158c0:	b480      	push	{r7}
 80158c2:	b087      	sub	sp, #28
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	4613      	mov	r3, r2
 80158cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80158ce:	2300      	movs	r3, #0
 80158d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80158d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	371c      	adds	r7, #28
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr
	...

080158e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158e4:	b480      	push	{r7}
 80158e6:	b083      	sub	sp, #12
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	4603      	mov	r3, r0
 80158ec:	6039      	str	r1, [r7, #0]
 80158ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	2212      	movs	r2, #18
 80158f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80158f6:	4b03      	ldr	r3, [pc, #12]	; (8015904 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	370c      	adds	r7, #12
 80158fc:	46bd      	mov	sp, r7
 80158fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015902:	4770      	bx	lr
 8015904:	20000344 	.word	0x20000344

08015908 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015908:	b480      	push	{r7}
 801590a:	b083      	sub	sp, #12
 801590c:	af00      	add	r7, sp, #0
 801590e:	4603      	mov	r3, r0
 8015910:	6039      	str	r1, [r7, #0]
 8015912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	2204      	movs	r2, #4
 8015918:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801591a:	4b03      	ldr	r3, [pc, #12]	; (8015928 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801591c:	4618      	mov	r0, r3
 801591e:	370c      	adds	r7, #12
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr
 8015928:	20000358 	.word	0x20000358

0801592c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b082      	sub	sp, #8
 8015930:	af00      	add	r7, sp, #0
 8015932:	4603      	mov	r3, r0
 8015934:	6039      	str	r1, [r7, #0]
 8015936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015938:	79fb      	ldrb	r3, [r7, #7]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d105      	bne.n	801594a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801593e:	683a      	ldr	r2, [r7, #0]
 8015940:	4907      	ldr	r1, [pc, #28]	; (8015960 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015942:	4808      	ldr	r0, [pc, #32]	; (8015964 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015944:	f7ff fdf7 	bl	8015536 <USBD_GetString>
 8015948:	e004      	b.n	8015954 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801594a:	683a      	ldr	r2, [r7, #0]
 801594c:	4904      	ldr	r1, [pc, #16]	; (8015960 <USBD_CDC_ProductStrDescriptor+0x34>)
 801594e:	4805      	ldr	r0, [pc, #20]	; (8015964 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015950:	f7ff fdf1 	bl	8015536 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015954:	4b02      	ldr	r3, [pc, #8]	; (8015960 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015956:	4618      	mov	r0, r3
 8015958:	3708      	adds	r7, #8
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	20002eb0 	.word	0x20002eb0
 8015964:	0801ad5c 	.word	0x0801ad5c

08015968 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	6039      	str	r1, [r7, #0]
 8015972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015974:	683a      	ldr	r2, [r7, #0]
 8015976:	4904      	ldr	r1, [pc, #16]	; (8015988 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015978:	4804      	ldr	r0, [pc, #16]	; (801598c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801597a:	f7ff fddc 	bl	8015536 <USBD_GetString>
  return USBD_StrDesc;
 801597e:	4b02      	ldr	r3, [pc, #8]	; (8015988 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015980:	4618      	mov	r0, r3
 8015982:	3708      	adds	r7, #8
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	20002eb0 	.word	0x20002eb0
 801598c:	0801ad74 	.word	0x0801ad74

08015990 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	4603      	mov	r3, r0
 8015998:	6039      	str	r1, [r7, #0]
 801599a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	221a      	movs	r2, #26
 80159a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80159a2:	f000 f843 	bl	8015a2c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80159a6:	4b02      	ldr	r3, [pc, #8]	; (80159b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3708      	adds	r7, #8
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}
 80159b0:	2000035c 	.word	0x2000035c

080159b4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	4603      	mov	r3, r0
 80159bc:	6039      	str	r1, [r7, #0]
 80159be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80159c0:	79fb      	ldrb	r3, [r7, #7]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d105      	bne.n	80159d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80159c6:	683a      	ldr	r2, [r7, #0]
 80159c8:	4907      	ldr	r1, [pc, #28]	; (80159e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80159ca:	4808      	ldr	r0, [pc, #32]	; (80159ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80159cc:	f7ff fdb3 	bl	8015536 <USBD_GetString>
 80159d0:	e004      	b.n	80159dc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	4904      	ldr	r1, [pc, #16]	; (80159e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80159d6:	4805      	ldr	r0, [pc, #20]	; (80159ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80159d8:	f7ff fdad 	bl	8015536 <USBD_GetString>
  }
  return USBD_StrDesc;
 80159dc:	4b02      	ldr	r3, [pc, #8]	; (80159e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3708      	adds	r7, #8
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
 80159e6:	bf00      	nop
 80159e8:	20002eb0 	.word	0x20002eb0
 80159ec:	0801ad88 	.word	0x0801ad88

080159f0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	4603      	mov	r3, r0
 80159f8:	6039      	str	r1, [r7, #0]
 80159fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80159fc:	79fb      	ldrb	r3, [r7, #7]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d105      	bne.n	8015a0e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015a02:	683a      	ldr	r2, [r7, #0]
 8015a04:	4907      	ldr	r1, [pc, #28]	; (8015a24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015a06:	4808      	ldr	r0, [pc, #32]	; (8015a28 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015a08:	f7ff fd95 	bl	8015536 <USBD_GetString>
 8015a0c:	e004      	b.n	8015a18 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015a0e:	683a      	ldr	r2, [r7, #0]
 8015a10:	4904      	ldr	r1, [pc, #16]	; (8015a24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015a12:	4805      	ldr	r0, [pc, #20]	; (8015a28 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015a14:	f7ff fd8f 	bl	8015536 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a18:	4b02      	ldr	r3, [pc, #8]	; (8015a24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3708      	adds	r7, #8
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	20002eb0 	.word	0x20002eb0
 8015a28:	0801ad94 	.word	0x0801ad94

08015a2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015a32:	4b0f      	ldr	r3, [pc, #60]	; (8015a70 <Get_SerialNum+0x44>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015a38:	4b0e      	ldr	r3, [pc, #56]	; (8015a74 <Get_SerialNum+0x48>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015a3e:	4b0e      	ldr	r3, [pc, #56]	; (8015a78 <Get_SerialNum+0x4c>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015a44:	68fa      	ldr	r2, [r7, #12]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	4413      	add	r3, r2
 8015a4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d009      	beq.n	8015a66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015a52:	2208      	movs	r2, #8
 8015a54:	4909      	ldr	r1, [pc, #36]	; (8015a7c <Get_SerialNum+0x50>)
 8015a56:	68f8      	ldr	r0, [r7, #12]
 8015a58:	f000 f814 	bl	8015a84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015a5c:	2204      	movs	r2, #4
 8015a5e:	4908      	ldr	r1, [pc, #32]	; (8015a80 <Get_SerialNum+0x54>)
 8015a60:	68b8      	ldr	r0, [r7, #8]
 8015a62:	f000 f80f 	bl	8015a84 <IntToUnicode>
  }
}
 8015a66:	bf00      	nop
 8015a68:	3710      	adds	r7, #16
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	1fff7590 	.word	0x1fff7590
 8015a74:	1fff7594 	.word	0x1fff7594
 8015a78:	1fff7598 	.word	0x1fff7598
 8015a7c:	2000035e 	.word	0x2000035e
 8015a80:	2000036e 	.word	0x2000036e

08015a84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b087      	sub	sp, #28
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	60f8      	str	r0, [r7, #12]
 8015a8c:	60b9      	str	r1, [r7, #8]
 8015a8e:	4613      	mov	r3, r2
 8015a90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015a92:	2300      	movs	r3, #0
 8015a94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015a96:	2300      	movs	r3, #0
 8015a98:	75fb      	strb	r3, [r7, #23]
 8015a9a:	e027      	b.n	8015aec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	0f1b      	lsrs	r3, r3, #28
 8015aa0:	2b09      	cmp	r3, #9
 8015aa2:	d80b      	bhi.n	8015abc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	0f1b      	lsrs	r3, r3, #28
 8015aa8:	b2da      	uxtb	r2, r3
 8015aaa:	7dfb      	ldrb	r3, [r7, #23]
 8015aac:	005b      	lsls	r3, r3, #1
 8015aae:	4619      	mov	r1, r3
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	440b      	add	r3, r1
 8015ab4:	3230      	adds	r2, #48	; 0x30
 8015ab6:	b2d2      	uxtb	r2, r2
 8015ab8:	701a      	strb	r2, [r3, #0]
 8015aba:	e00a      	b.n	8015ad2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	0f1b      	lsrs	r3, r3, #28
 8015ac0:	b2da      	uxtb	r2, r3
 8015ac2:	7dfb      	ldrb	r3, [r7, #23]
 8015ac4:	005b      	lsls	r3, r3, #1
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	440b      	add	r3, r1
 8015acc:	3237      	adds	r2, #55	; 0x37
 8015ace:	b2d2      	uxtb	r2, r2
 8015ad0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	011b      	lsls	r3, r3, #4
 8015ad6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015ad8:	7dfb      	ldrb	r3, [r7, #23]
 8015ada:	005b      	lsls	r3, r3, #1
 8015adc:	3301      	adds	r3, #1
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015ae6:	7dfb      	ldrb	r3, [r7, #23]
 8015ae8:	3301      	adds	r3, #1
 8015aea:	75fb      	strb	r3, [r7, #23]
 8015aec:	7dfa      	ldrb	r2, [r7, #23]
 8015aee:	79fb      	ldrb	r3, [r7, #7]
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d3d3      	bcc.n	8015a9c <IntToUnicode+0x18>
  }
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop
 8015af8:	371c      	adds	r7, #28
 8015afa:	46bd      	mov	sp, r7
 8015afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b00:	4770      	bx	lr
	...

08015b04 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b094      	sub	sp, #80	; 0x50
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015b0c:	f107 030c 	add.w	r3, r7, #12
 8015b10:	2244      	movs	r2, #68	; 0x44
 8015b12:	2100      	movs	r1, #0
 8015b14:	4618      	mov	r0, r3
 8015b16:	f001 fa94 	bl	8017042 <memset>
  if(pcdHandle->Instance==USB)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	4a15      	ldr	r2, [pc, #84]	; (8015b74 <HAL_PCD_MspInit+0x70>)
 8015b20:	4293      	cmp	r3, r2
 8015b22:	d122      	bne.n	8015b6a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015b28:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015b2e:	f107 030c 	add.w	r3, r7, #12
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7f6 fc1e 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d001      	beq.n	8015b42 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8015b3e:	f7ee fb91 	bl	8004264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015b42:	4b0d      	ldr	r3, [pc, #52]	; (8015b78 <HAL_PCD_MspInit+0x74>)
 8015b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b46:	4a0c      	ldr	r2, [pc, #48]	; (8015b78 <HAL_PCD_MspInit+0x74>)
 8015b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8015b4e:	4b0a      	ldr	r3, [pc, #40]	; (8015b78 <HAL_PCD_MspInit+0x74>)
 8015b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015b56:	60bb      	str	r3, [r7, #8]
 8015b58:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	2100      	movs	r1, #0
 8015b5e:	2014      	movs	r0, #20
 8015b60:	f7f2 fe65 	bl	800882e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015b64:	2014      	movs	r0, #20
 8015b66:	f7f2 fe7c 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015b6a:	bf00      	nop
 8015b6c:	3750      	adds	r7, #80	; 0x50
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	bf00      	nop
 8015b74:	40005c00 	.word	0x40005c00
 8015b78:	40021000 	.word	0x40021000

08015b7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015b90:	4619      	mov	r1, r3
 8015b92:	4610      	mov	r0, r2
 8015b94:	f7fe fd32 	bl	80145fc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015b98:	bf00      	nop
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	460b      	mov	r3, r1
 8015baa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015bb2:	78fa      	ldrb	r2, [r7, #3]
 8015bb4:	6879      	ldr	r1, [r7, #4]
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	4413      	add	r3, r2
 8015bbc:	00db      	lsls	r3, r3, #3
 8015bbe:	440b      	add	r3, r1
 8015bc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	78fb      	ldrb	r3, [r7, #3]
 8015bc8:	4619      	mov	r1, r3
 8015bca:	f7fe fd6c 	bl	80146a6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015bce:	bf00      	nop
 8015bd0:	3708      	adds	r7, #8
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b082      	sub	sp, #8
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	6078      	str	r0, [r7, #4]
 8015bde:	460b      	mov	r3, r1
 8015be0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015be8:	78fa      	ldrb	r2, [r7, #3]
 8015bea:	6879      	ldr	r1, [r7, #4]
 8015bec:	4613      	mov	r3, r2
 8015bee:	009b      	lsls	r3, r3, #2
 8015bf0:	4413      	add	r3, r2
 8015bf2:	00db      	lsls	r3, r3, #3
 8015bf4:	440b      	add	r3, r1
 8015bf6:	3324      	adds	r3, #36	; 0x24
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	78fb      	ldrb	r3, [r7, #3]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	f7fe fdb5 	bl	801476c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015c02:	bf00      	nop
 8015c04:	3708      	adds	r7, #8
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}

08015c0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c0a:	b580      	push	{r7, lr}
 8015c0c:	b082      	sub	sp, #8
 8015c0e:	af00      	add	r7, sp, #0
 8015c10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7fe fec9 	bl	80149b0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015c1e:	bf00      	nop
 8015c20:	3708      	adds	r7, #8
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}

08015c26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b084      	sub	sp, #16
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	795b      	ldrb	r3, [r3, #5]
 8015c36:	2b02      	cmp	r3, #2
 8015c38:	d001      	beq.n	8015c3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015c3a:	f7ee fb13 	bl	8004264 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c44:	7bfa      	ldrb	r2, [r7, #15]
 8015c46:	4611      	mov	r1, r2
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7fe fe73 	bl	8014934 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fe fe1f 	bl	8014898 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015c5a:	bf00      	nop
 8015c5c:	3710      	adds	r7, #16
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}
	...

08015c64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7fe fe6e 	bl	8014954 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	7a5b      	ldrb	r3, [r3, #9]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d005      	beq.n	8015c8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c80:	4b04      	ldr	r3, [pc, #16]	; (8015c94 <HAL_PCD_SuspendCallback+0x30>)
 8015c82:	691b      	ldr	r3, [r3, #16]
 8015c84:	4a03      	ldr	r2, [pc, #12]	; (8015c94 <HAL_PCD_SuspendCallback+0x30>)
 8015c86:	f043 0306 	orr.w	r3, r3, #6
 8015c8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015c8c:	bf00      	nop
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	e000ed00 	.word	0xe000ed00

08015c98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7a5b      	ldrb	r3, [r3, #9]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d007      	beq.n	8015cb8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ca8:	4b08      	ldr	r3, [pc, #32]	; (8015ccc <HAL_PCD_ResumeCallback+0x34>)
 8015caa:	691b      	ldr	r3, [r3, #16]
 8015cac:	4a07      	ldr	r2, [pc, #28]	; (8015ccc <HAL_PCD_ResumeCallback+0x34>)
 8015cae:	f023 0306 	bic.w	r3, r3, #6
 8015cb2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015cb4:	f000 f9f8 	bl	80160a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7fe fe5e 	bl	8014980 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015cc4:	bf00      	nop
 8015cc6:	3708      	adds	r7, #8
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	e000ed00 	.word	0xe000ed00

08015cd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015cd8:	4a2b      	ldr	r2, [pc, #172]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	4a29      	ldr	r2, [pc, #164]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015ce4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8015ce8:	4b27      	ldr	r3, [pc, #156]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015cea:	4a28      	ldr	r2, [pc, #160]	; (8015d8c <USBD_LL_Init+0xbc>)
 8015cec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015cee:	4b26      	ldr	r3, [pc, #152]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015cf0:	2208      	movs	r2, #8
 8015cf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015cf4:	4b24      	ldr	r3, [pc, #144]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015cfa:	4b23      	ldr	r3, [pc, #140]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015cfc:	2202      	movs	r2, #2
 8015cfe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015d00:	4b21      	ldr	r3, [pc, #132]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015d02:	2200      	movs	r2, #0
 8015d04:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015d06:	4b20      	ldr	r3, [pc, #128]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015d08:	2200      	movs	r2, #0
 8015d0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015d0c:	4b1e      	ldr	r3, [pc, #120]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015d0e:	2200      	movs	r2, #0
 8015d10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015d12:	4b1d      	ldr	r3, [pc, #116]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015d14:	2200      	movs	r2, #0
 8015d16:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015d18:	481b      	ldr	r0, [pc, #108]	; (8015d88 <USBD_LL_Init+0xb8>)
 8015d1a:	f7f4 f815 	bl	8009d48 <HAL_PCD_Init>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d001      	beq.n	8015d28 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8015d24:	f7ee fa9e 	bl	8004264 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d2e:	2318      	movs	r3, #24
 8015d30:	2200      	movs	r2, #0
 8015d32:	2100      	movs	r1, #0
 8015d34:	f7f5 fccf 	bl	800b6d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d3e:	2358      	movs	r3, #88	; 0x58
 8015d40:	2200      	movs	r2, #0
 8015d42:	2180      	movs	r1, #128	; 0x80
 8015d44:	f7f5 fcc7 	bl	800b6d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d4e:	23c0      	movs	r3, #192	; 0xc0
 8015d50:	2200      	movs	r2, #0
 8015d52:	2181      	movs	r1, #129	; 0x81
 8015d54:	f7f5 fcbf 	bl	800b6d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015d62:	2200      	movs	r2, #0
 8015d64:	2101      	movs	r1, #1
 8015d66:	f7f5 fcb6 	bl	800b6d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d74:	2200      	movs	r2, #0
 8015d76:	2182      	movs	r1, #130	; 0x82
 8015d78:	f7f5 fcad 	bl	800b6d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3708      	adds	r7, #8
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	200030b0 	.word	0x200030b0
 8015d8c:	40005c00 	.word	0x40005c00

08015d90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b084      	sub	sp, #16
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7f4 f89c 	bl	8009ee4 <HAL_PCD_Start>
 8015dac:	4603      	mov	r3, r0
 8015dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015db0:	7bfb      	ldrb	r3, [r7, #15]
 8015db2:	4618      	mov	r0, r3
 8015db4:	f000 f97e 	bl	80160b4 <USBD_Get_USB_Status>
 8015db8:	4603      	mov	r3, r0
 8015dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b084      	sub	sp, #16
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
 8015dce:	4608      	mov	r0, r1
 8015dd0:	4611      	mov	r1, r2
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	70fb      	strb	r3, [r7, #3]
 8015dd8:	460b      	mov	r3, r1
 8015dda:	70bb      	strb	r3, [r7, #2]
 8015ddc:	4613      	mov	r3, r2
 8015dde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015de0:	2300      	movs	r3, #0
 8015de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015de4:	2300      	movs	r3, #0
 8015de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015dee:	78bb      	ldrb	r3, [r7, #2]
 8015df0:	883a      	ldrh	r2, [r7, #0]
 8015df2:	78f9      	ldrb	r1, [r7, #3]
 8015df4:	f7f4 f9e3 	bl	800a1be <HAL_PCD_EP_Open>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dfc:	7bfb      	ldrb	r3, [r7, #15]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f000 f958 	bl	80160b4 <USBD_Get_USB_Status>
 8015e04:	4603      	mov	r3, r0
 8015e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b084      	sub	sp, #16
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
 8015e1a:	460b      	mov	r3, r1
 8015e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e22:	2300      	movs	r3, #0
 8015e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e2c:	78fa      	ldrb	r2, [r7, #3]
 8015e2e:	4611      	mov	r1, r2
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7f4 fa21 	bl	800a278 <HAL_PCD_EP_Close>
 8015e36:	4603      	mov	r3, r0
 8015e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e3a:	7bfb      	ldrb	r3, [r7, #15]
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f000 f939 	bl	80160b4 <USBD_Get_USB_Status>
 8015e42:	4603      	mov	r3, r0
 8015e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3710      	adds	r7, #16
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	460b      	mov	r3, r1
 8015e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e60:	2300      	movs	r3, #0
 8015e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e6a:	78fa      	ldrb	r2, [r7, #3]
 8015e6c:	4611      	mov	r1, r2
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7f4 faca 	bl	800a408 <HAL_PCD_EP_SetStall>
 8015e74:	4603      	mov	r3, r0
 8015e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e78:	7bfb      	ldrb	r3, [r7, #15]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f000 f91a 	bl	80160b4 <USBD_Get_USB_Status>
 8015e80:	4603      	mov	r3, r0
 8015e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3710      	adds	r7, #16
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b084      	sub	sp, #16
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
 8015e96:	460b      	mov	r3, r1
 8015e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ea8:	78fa      	ldrb	r2, [r7, #3]
 8015eaa:	4611      	mov	r1, r2
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7f4 fafd 	bl	800a4ac <HAL_PCD_EP_ClrStall>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eb6:	7bfb      	ldrb	r3, [r7, #15]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f000 f8fb 	bl	80160b4 <USBD_Get_USB_Status>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3710      	adds	r7, #16
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b085      	sub	sp, #20
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ede:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	da0b      	bge.n	8015f00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015ee8:	78fb      	ldrb	r3, [r7, #3]
 8015eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015eee:	68f9      	ldr	r1, [r7, #12]
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	009b      	lsls	r3, r3, #2
 8015ef4:	4413      	add	r3, r2
 8015ef6:	00db      	lsls	r3, r3, #3
 8015ef8:	440b      	add	r3, r1
 8015efa:	3312      	adds	r3, #18
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	e00b      	b.n	8015f18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015f00:	78fb      	ldrb	r3, [r7, #3]
 8015f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f06:	68f9      	ldr	r1, [r7, #12]
 8015f08:	4613      	mov	r3, r2
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	4413      	add	r3, r2
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	440b      	add	r3, r1
 8015f12:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8015f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015f18:	4618      	mov	r0, r3
 8015f1a:	3714      	adds	r7, #20
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f22:	4770      	bx	lr

08015f24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b084      	sub	sp, #16
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	460b      	mov	r3, r1
 8015f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f30:	2300      	movs	r3, #0
 8015f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f34:	2300      	movs	r3, #0
 8015f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f3e:	78fa      	ldrb	r2, [r7, #3]
 8015f40:	4611      	mov	r1, r2
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7f4 f917 	bl	800a176 <HAL_PCD_SetAddress>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f4c:	7bfb      	ldrb	r3, [r7, #15]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f000 f8b0 	bl	80160b4 <USBD_Get_USB_Status>
 8015f54:	4603      	mov	r3, r0
 8015f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3710      	adds	r7, #16
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b086      	sub	sp, #24
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	60f8      	str	r0, [r7, #12]
 8015f6a:	607a      	str	r2, [r7, #4]
 8015f6c:	603b      	str	r3, [r7, #0]
 8015f6e:	460b      	mov	r3, r1
 8015f70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f72:	2300      	movs	r3, #0
 8015f74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f76:	2300      	movs	r3, #0
 8015f78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015f80:	7af9      	ldrb	r1, [r7, #11]
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	687a      	ldr	r2, [r7, #4]
 8015f86:	f7f4 fa08 	bl	800a39a <HAL_PCD_EP_Transmit>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f8e:	7dfb      	ldrb	r3, [r7, #23]
 8015f90:	4618      	mov	r0, r3
 8015f92:	f000 f88f 	bl	80160b4 <USBD_Get_USB_Status>
 8015f96:	4603      	mov	r3, r0
 8015f98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3718      	adds	r7, #24
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b086      	sub	sp, #24
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	60f8      	str	r0, [r7, #12]
 8015fac:	607a      	str	r2, [r7, #4]
 8015fae:	603b      	str	r3, [r7, #0]
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015fc2:	7af9      	ldrb	r1, [r7, #11]
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	f7f4 f99e 	bl	800a308 <HAL_PCD_EP_Receive>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fd0:	7dfb      	ldrb	r3, [r7, #23]
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f000 f86e 	bl	80160b4 <USBD_Get_USB_Status>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015fdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3718      	adds	r7, #24
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}

08015fe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b082      	sub	sp, #8
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	6078      	str	r0, [r7, #4]
 8015fee:	460b      	mov	r3, r1
 8015ff0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ff8:	78fa      	ldrb	r2, [r7, #3]
 8015ffa:	4611      	mov	r1, r2
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f4 f9b4 	bl	800a36a <HAL_PCD_EP_GetRxCount>
 8016002:	4603      	mov	r3, r0
}
 8016004:	4618      	mov	r0, r3
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	460b      	mov	r3, r1
 8016016:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016018:	78fb      	ldrb	r3, [r7, #3]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d002      	beq.n	8016024 <HAL_PCDEx_LPM_Callback+0x18>
 801601e:	2b01      	cmp	r3, #1
 8016020:	d013      	beq.n	801604a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016022:	e023      	b.n	801606c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	7a5b      	ldrb	r3, [r3, #9]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d007      	beq.n	801603c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801602c:	f000 f83c 	bl	80160a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016030:	4b10      	ldr	r3, [pc, #64]	; (8016074 <HAL_PCDEx_LPM_Callback+0x68>)
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	4a0f      	ldr	r2, [pc, #60]	; (8016074 <HAL_PCDEx_LPM_Callback+0x68>)
 8016036:	f023 0306 	bic.w	r3, r3, #6
 801603a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016042:	4618      	mov	r0, r3
 8016044:	f7fe fc9c 	bl	8014980 <USBD_LL_Resume>
    break;
 8016048:	e010      	b.n	801606c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016050:	4618      	mov	r0, r3
 8016052:	f7fe fc7f 	bl	8014954 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	7a5b      	ldrb	r3, [r3, #9]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d005      	beq.n	801606a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801605e:	4b05      	ldr	r3, [pc, #20]	; (8016074 <HAL_PCDEx_LPM_Callback+0x68>)
 8016060:	691b      	ldr	r3, [r3, #16]
 8016062:	4a04      	ldr	r2, [pc, #16]	; (8016074 <HAL_PCDEx_LPM_Callback+0x68>)
 8016064:	f043 0306 	orr.w	r3, r3, #6
 8016068:	6113      	str	r3, [r2, #16]
    break;
 801606a:	bf00      	nop
}
 801606c:	bf00      	nop
 801606e:	3708      	adds	r7, #8
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}
 8016074:	e000ed00 	.word	0xe000ed00

08016078 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016078:	b480      	push	{r7}
 801607a:	b083      	sub	sp, #12
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016080:	4b03      	ldr	r3, [pc, #12]	; (8016090 <USBD_static_malloc+0x18>)
}
 8016082:	4618      	mov	r0, r3
 8016084:	370c      	adds	r7, #12
 8016086:	46bd      	mov	sp, r7
 8016088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608c:	4770      	bx	lr
 801608e:	bf00      	nop
 8016090:	2000338c 	.word	0x2000338c

08016094 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016094:	b480      	push	{r7}
 8016096:	b083      	sub	sp, #12
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]

}
 801609c:	bf00      	nop
 801609e:	370c      	adds	r7, #12
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80160ac:	f7ed fb2c 	bl	8003708 <SystemClock_Config>
}
 80160b0:	bf00      	nop
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80160b4:	b480      	push	{r7}
 80160b6:	b085      	sub	sp, #20
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	4603      	mov	r3, r0
 80160bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160be:	2300      	movs	r3, #0
 80160c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80160c2:	79fb      	ldrb	r3, [r7, #7]
 80160c4:	2b03      	cmp	r3, #3
 80160c6:	d817      	bhi.n	80160f8 <USBD_Get_USB_Status+0x44>
 80160c8:	a201      	add	r2, pc, #4	; (adr r2, 80160d0 <USBD_Get_USB_Status+0x1c>)
 80160ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ce:	bf00      	nop
 80160d0:	080160e1 	.word	0x080160e1
 80160d4:	080160e7 	.word	0x080160e7
 80160d8:	080160ed 	.word	0x080160ed
 80160dc:	080160f3 	.word	0x080160f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80160e0:	2300      	movs	r3, #0
 80160e2:	73fb      	strb	r3, [r7, #15]
    break;
 80160e4:	e00b      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80160e6:	2303      	movs	r3, #3
 80160e8:	73fb      	strb	r3, [r7, #15]
    break;
 80160ea:	e008      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80160ec:	2301      	movs	r3, #1
 80160ee:	73fb      	strb	r3, [r7, #15]
    break;
 80160f0:	e005      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80160f2:	2303      	movs	r3, #3
 80160f4:	73fb      	strb	r3, [r7, #15]
    break;
 80160f6:	e002      	b.n	80160fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80160f8:	2303      	movs	r3, #3
 80160fa:	73fb      	strb	r3, [r7, #15]
    break;
 80160fc:	bf00      	nop
  }
  return usb_status;
 80160fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016100:	4618      	mov	r0, r3
 8016102:	3714      	adds	r7, #20
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr

0801610c <__cvt>:
 801610c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016110:	ec55 4b10 	vmov	r4, r5, d0
 8016114:	2d00      	cmp	r5, #0
 8016116:	460e      	mov	r6, r1
 8016118:	4619      	mov	r1, r3
 801611a:	462b      	mov	r3, r5
 801611c:	bfbb      	ittet	lt
 801611e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016122:	461d      	movlt	r5, r3
 8016124:	2300      	movge	r3, #0
 8016126:	232d      	movlt	r3, #45	; 0x2d
 8016128:	700b      	strb	r3, [r1, #0]
 801612a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801612c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016130:	4691      	mov	r9, r2
 8016132:	f023 0820 	bic.w	r8, r3, #32
 8016136:	bfbc      	itt	lt
 8016138:	4622      	movlt	r2, r4
 801613a:	4614      	movlt	r4, r2
 801613c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016140:	d005      	beq.n	801614e <__cvt+0x42>
 8016142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016146:	d100      	bne.n	801614a <__cvt+0x3e>
 8016148:	3601      	adds	r6, #1
 801614a:	2102      	movs	r1, #2
 801614c:	e000      	b.n	8016150 <__cvt+0x44>
 801614e:	2103      	movs	r1, #3
 8016150:	ab03      	add	r3, sp, #12
 8016152:	9301      	str	r3, [sp, #4]
 8016154:	ab02      	add	r3, sp, #8
 8016156:	9300      	str	r3, [sp, #0]
 8016158:	ec45 4b10 	vmov	d0, r4, r5
 801615c:	4653      	mov	r3, sl
 801615e:	4632      	mov	r2, r6
 8016160:	f001 f88e 	bl	8017280 <_dtoa_r>
 8016164:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016168:	4607      	mov	r7, r0
 801616a:	d102      	bne.n	8016172 <__cvt+0x66>
 801616c:	f019 0f01 	tst.w	r9, #1
 8016170:	d022      	beq.n	80161b8 <__cvt+0xac>
 8016172:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016176:	eb07 0906 	add.w	r9, r7, r6
 801617a:	d110      	bne.n	801619e <__cvt+0x92>
 801617c:	783b      	ldrb	r3, [r7, #0]
 801617e:	2b30      	cmp	r3, #48	; 0x30
 8016180:	d10a      	bne.n	8016198 <__cvt+0x8c>
 8016182:	2200      	movs	r2, #0
 8016184:	2300      	movs	r3, #0
 8016186:	4620      	mov	r0, r4
 8016188:	4629      	mov	r1, r5
 801618a:	f7ea fcc5 	bl	8000b18 <__aeabi_dcmpeq>
 801618e:	b918      	cbnz	r0, 8016198 <__cvt+0x8c>
 8016190:	f1c6 0601 	rsb	r6, r6, #1
 8016194:	f8ca 6000 	str.w	r6, [sl]
 8016198:	f8da 3000 	ldr.w	r3, [sl]
 801619c:	4499      	add	r9, r3
 801619e:	2200      	movs	r2, #0
 80161a0:	2300      	movs	r3, #0
 80161a2:	4620      	mov	r0, r4
 80161a4:	4629      	mov	r1, r5
 80161a6:	f7ea fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 80161aa:	b108      	cbz	r0, 80161b0 <__cvt+0xa4>
 80161ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80161b0:	2230      	movs	r2, #48	; 0x30
 80161b2:	9b03      	ldr	r3, [sp, #12]
 80161b4:	454b      	cmp	r3, r9
 80161b6:	d307      	bcc.n	80161c8 <__cvt+0xbc>
 80161b8:	9b03      	ldr	r3, [sp, #12]
 80161ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161bc:	1bdb      	subs	r3, r3, r7
 80161be:	4638      	mov	r0, r7
 80161c0:	6013      	str	r3, [r2, #0]
 80161c2:	b004      	add	sp, #16
 80161c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161c8:	1c59      	adds	r1, r3, #1
 80161ca:	9103      	str	r1, [sp, #12]
 80161cc:	701a      	strb	r2, [r3, #0]
 80161ce:	e7f0      	b.n	80161b2 <__cvt+0xa6>

080161d0 <__exponent>:
 80161d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161d2:	4603      	mov	r3, r0
 80161d4:	2900      	cmp	r1, #0
 80161d6:	bfb8      	it	lt
 80161d8:	4249      	neglt	r1, r1
 80161da:	f803 2b02 	strb.w	r2, [r3], #2
 80161de:	bfb4      	ite	lt
 80161e0:	222d      	movlt	r2, #45	; 0x2d
 80161e2:	222b      	movge	r2, #43	; 0x2b
 80161e4:	2909      	cmp	r1, #9
 80161e6:	7042      	strb	r2, [r0, #1]
 80161e8:	dd2a      	ble.n	8016240 <__exponent+0x70>
 80161ea:	f10d 0207 	add.w	r2, sp, #7
 80161ee:	4617      	mov	r7, r2
 80161f0:	260a      	movs	r6, #10
 80161f2:	4694      	mov	ip, r2
 80161f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80161f8:	fb06 1415 	mls	r4, r6, r5, r1
 80161fc:	3430      	adds	r4, #48	; 0x30
 80161fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016202:	460c      	mov	r4, r1
 8016204:	2c63      	cmp	r4, #99	; 0x63
 8016206:	f102 32ff 	add.w	r2, r2, #4294967295
 801620a:	4629      	mov	r1, r5
 801620c:	dcf1      	bgt.n	80161f2 <__exponent+0x22>
 801620e:	3130      	adds	r1, #48	; 0x30
 8016210:	f1ac 0402 	sub.w	r4, ip, #2
 8016214:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016218:	1c41      	adds	r1, r0, #1
 801621a:	4622      	mov	r2, r4
 801621c:	42ba      	cmp	r2, r7
 801621e:	d30a      	bcc.n	8016236 <__exponent+0x66>
 8016220:	f10d 0209 	add.w	r2, sp, #9
 8016224:	eba2 020c 	sub.w	r2, r2, ip
 8016228:	42bc      	cmp	r4, r7
 801622a:	bf88      	it	hi
 801622c:	2200      	movhi	r2, #0
 801622e:	4413      	add	r3, r2
 8016230:	1a18      	subs	r0, r3, r0
 8016232:	b003      	add	sp, #12
 8016234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016236:	f812 5b01 	ldrb.w	r5, [r2], #1
 801623a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801623e:	e7ed      	b.n	801621c <__exponent+0x4c>
 8016240:	2330      	movs	r3, #48	; 0x30
 8016242:	3130      	adds	r1, #48	; 0x30
 8016244:	7083      	strb	r3, [r0, #2]
 8016246:	70c1      	strb	r1, [r0, #3]
 8016248:	1d03      	adds	r3, r0, #4
 801624a:	e7f1      	b.n	8016230 <__exponent+0x60>

0801624c <_printf_float>:
 801624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016250:	ed2d 8b02 	vpush	{d8}
 8016254:	b08d      	sub	sp, #52	; 0x34
 8016256:	460c      	mov	r4, r1
 8016258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801625c:	4616      	mov	r6, r2
 801625e:	461f      	mov	r7, r3
 8016260:	4605      	mov	r5, r0
 8016262:	f000 fef7 	bl	8017054 <_localeconv_r>
 8016266:	f8d0 a000 	ldr.w	sl, [r0]
 801626a:	4650      	mov	r0, sl
 801626c:	f7ea f828 	bl	80002c0 <strlen>
 8016270:	2300      	movs	r3, #0
 8016272:	930a      	str	r3, [sp, #40]	; 0x28
 8016274:	6823      	ldr	r3, [r4, #0]
 8016276:	9305      	str	r3, [sp, #20]
 8016278:	f8d8 3000 	ldr.w	r3, [r8]
 801627c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016280:	3307      	adds	r3, #7
 8016282:	f023 0307 	bic.w	r3, r3, #7
 8016286:	f103 0208 	add.w	r2, r3, #8
 801628a:	f8c8 2000 	str.w	r2, [r8]
 801628e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016292:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016296:	9307      	str	r3, [sp, #28]
 8016298:	f8cd 8018 	str.w	r8, [sp, #24]
 801629c:	ee08 0a10 	vmov	s16, r0
 80162a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80162a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162a8:	4b9e      	ldr	r3, [pc, #632]	; (8016524 <_printf_float+0x2d8>)
 80162aa:	f04f 32ff 	mov.w	r2, #4294967295
 80162ae:	f7ea fc65 	bl	8000b7c <__aeabi_dcmpun>
 80162b2:	bb88      	cbnz	r0, 8016318 <_printf_float+0xcc>
 80162b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162b8:	4b9a      	ldr	r3, [pc, #616]	; (8016524 <_printf_float+0x2d8>)
 80162ba:	f04f 32ff 	mov.w	r2, #4294967295
 80162be:	f7ea fc3f 	bl	8000b40 <__aeabi_dcmple>
 80162c2:	bb48      	cbnz	r0, 8016318 <_printf_float+0xcc>
 80162c4:	2200      	movs	r2, #0
 80162c6:	2300      	movs	r3, #0
 80162c8:	4640      	mov	r0, r8
 80162ca:	4649      	mov	r1, r9
 80162cc:	f7ea fc2e 	bl	8000b2c <__aeabi_dcmplt>
 80162d0:	b110      	cbz	r0, 80162d8 <_printf_float+0x8c>
 80162d2:	232d      	movs	r3, #45	; 0x2d
 80162d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162d8:	4a93      	ldr	r2, [pc, #588]	; (8016528 <_printf_float+0x2dc>)
 80162da:	4b94      	ldr	r3, [pc, #592]	; (801652c <_printf_float+0x2e0>)
 80162dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80162e0:	bf94      	ite	ls
 80162e2:	4690      	movls	r8, r2
 80162e4:	4698      	movhi	r8, r3
 80162e6:	2303      	movs	r3, #3
 80162e8:	6123      	str	r3, [r4, #16]
 80162ea:	9b05      	ldr	r3, [sp, #20]
 80162ec:	f023 0304 	bic.w	r3, r3, #4
 80162f0:	6023      	str	r3, [r4, #0]
 80162f2:	f04f 0900 	mov.w	r9, #0
 80162f6:	9700      	str	r7, [sp, #0]
 80162f8:	4633      	mov	r3, r6
 80162fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80162fc:	4621      	mov	r1, r4
 80162fe:	4628      	mov	r0, r5
 8016300:	f000 f9da 	bl	80166b8 <_printf_common>
 8016304:	3001      	adds	r0, #1
 8016306:	f040 8090 	bne.w	801642a <_printf_float+0x1de>
 801630a:	f04f 30ff 	mov.w	r0, #4294967295
 801630e:	b00d      	add	sp, #52	; 0x34
 8016310:	ecbd 8b02 	vpop	{d8}
 8016314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016318:	4642      	mov	r2, r8
 801631a:	464b      	mov	r3, r9
 801631c:	4640      	mov	r0, r8
 801631e:	4649      	mov	r1, r9
 8016320:	f7ea fc2c 	bl	8000b7c <__aeabi_dcmpun>
 8016324:	b140      	cbz	r0, 8016338 <_printf_float+0xec>
 8016326:	464b      	mov	r3, r9
 8016328:	2b00      	cmp	r3, #0
 801632a:	bfbc      	itt	lt
 801632c:	232d      	movlt	r3, #45	; 0x2d
 801632e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016332:	4a7f      	ldr	r2, [pc, #508]	; (8016530 <_printf_float+0x2e4>)
 8016334:	4b7f      	ldr	r3, [pc, #508]	; (8016534 <_printf_float+0x2e8>)
 8016336:	e7d1      	b.n	80162dc <_printf_float+0x90>
 8016338:	6863      	ldr	r3, [r4, #4]
 801633a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801633e:	9206      	str	r2, [sp, #24]
 8016340:	1c5a      	adds	r2, r3, #1
 8016342:	d13f      	bne.n	80163c4 <_printf_float+0x178>
 8016344:	2306      	movs	r3, #6
 8016346:	6063      	str	r3, [r4, #4]
 8016348:	9b05      	ldr	r3, [sp, #20]
 801634a:	6861      	ldr	r1, [r4, #4]
 801634c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016350:	2300      	movs	r3, #0
 8016352:	9303      	str	r3, [sp, #12]
 8016354:	ab0a      	add	r3, sp, #40	; 0x28
 8016356:	e9cd b301 	strd	fp, r3, [sp, #4]
 801635a:	ab09      	add	r3, sp, #36	; 0x24
 801635c:	ec49 8b10 	vmov	d0, r8, r9
 8016360:	9300      	str	r3, [sp, #0]
 8016362:	6022      	str	r2, [r4, #0]
 8016364:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016368:	4628      	mov	r0, r5
 801636a:	f7ff fecf 	bl	801610c <__cvt>
 801636e:	9b06      	ldr	r3, [sp, #24]
 8016370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016372:	2b47      	cmp	r3, #71	; 0x47
 8016374:	4680      	mov	r8, r0
 8016376:	d108      	bne.n	801638a <_printf_float+0x13e>
 8016378:	1cc8      	adds	r0, r1, #3
 801637a:	db02      	blt.n	8016382 <_printf_float+0x136>
 801637c:	6863      	ldr	r3, [r4, #4]
 801637e:	4299      	cmp	r1, r3
 8016380:	dd41      	ble.n	8016406 <_printf_float+0x1ba>
 8016382:	f1ab 0302 	sub.w	r3, fp, #2
 8016386:	fa5f fb83 	uxtb.w	fp, r3
 801638a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801638e:	d820      	bhi.n	80163d2 <_printf_float+0x186>
 8016390:	3901      	subs	r1, #1
 8016392:	465a      	mov	r2, fp
 8016394:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016398:	9109      	str	r1, [sp, #36]	; 0x24
 801639a:	f7ff ff19 	bl	80161d0 <__exponent>
 801639e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163a0:	1813      	adds	r3, r2, r0
 80163a2:	2a01      	cmp	r2, #1
 80163a4:	4681      	mov	r9, r0
 80163a6:	6123      	str	r3, [r4, #16]
 80163a8:	dc02      	bgt.n	80163b0 <_printf_float+0x164>
 80163aa:	6822      	ldr	r2, [r4, #0]
 80163ac:	07d2      	lsls	r2, r2, #31
 80163ae:	d501      	bpl.n	80163b4 <_printf_float+0x168>
 80163b0:	3301      	adds	r3, #1
 80163b2:	6123      	str	r3, [r4, #16]
 80163b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d09c      	beq.n	80162f6 <_printf_float+0xaa>
 80163bc:	232d      	movs	r3, #45	; 0x2d
 80163be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163c2:	e798      	b.n	80162f6 <_printf_float+0xaa>
 80163c4:	9a06      	ldr	r2, [sp, #24]
 80163c6:	2a47      	cmp	r2, #71	; 0x47
 80163c8:	d1be      	bne.n	8016348 <_printf_float+0xfc>
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1bc      	bne.n	8016348 <_printf_float+0xfc>
 80163ce:	2301      	movs	r3, #1
 80163d0:	e7b9      	b.n	8016346 <_printf_float+0xfa>
 80163d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80163d6:	d118      	bne.n	801640a <_printf_float+0x1be>
 80163d8:	2900      	cmp	r1, #0
 80163da:	6863      	ldr	r3, [r4, #4]
 80163dc:	dd0b      	ble.n	80163f6 <_printf_float+0x1aa>
 80163de:	6121      	str	r1, [r4, #16]
 80163e0:	b913      	cbnz	r3, 80163e8 <_printf_float+0x19c>
 80163e2:	6822      	ldr	r2, [r4, #0]
 80163e4:	07d0      	lsls	r0, r2, #31
 80163e6:	d502      	bpl.n	80163ee <_printf_float+0x1a2>
 80163e8:	3301      	adds	r3, #1
 80163ea:	440b      	add	r3, r1
 80163ec:	6123      	str	r3, [r4, #16]
 80163ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80163f0:	f04f 0900 	mov.w	r9, #0
 80163f4:	e7de      	b.n	80163b4 <_printf_float+0x168>
 80163f6:	b913      	cbnz	r3, 80163fe <_printf_float+0x1b2>
 80163f8:	6822      	ldr	r2, [r4, #0]
 80163fa:	07d2      	lsls	r2, r2, #31
 80163fc:	d501      	bpl.n	8016402 <_printf_float+0x1b6>
 80163fe:	3302      	adds	r3, #2
 8016400:	e7f4      	b.n	80163ec <_printf_float+0x1a0>
 8016402:	2301      	movs	r3, #1
 8016404:	e7f2      	b.n	80163ec <_printf_float+0x1a0>
 8016406:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801640a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801640c:	4299      	cmp	r1, r3
 801640e:	db05      	blt.n	801641c <_printf_float+0x1d0>
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	6121      	str	r1, [r4, #16]
 8016414:	07d8      	lsls	r0, r3, #31
 8016416:	d5ea      	bpl.n	80163ee <_printf_float+0x1a2>
 8016418:	1c4b      	adds	r3, r1, #1
 801641a:	e7e7      	b.n	80163ec <_printf_float+0x1a0>
 801641c:	2900      	cmp	r1, #0
 801641e:	bfd4      	ite	le
 8016420:	f1c1 0202 	rsble	r2, r1, #2
 8016424:	2201      	movgt	r2, #1
 8016426:	4413      	add	r3, r2
 8016428:	e7e0      	b.n	80163ec <_printf_float+0x1a0>
 801642a:	6823      	ldr	r3, [r4, #0]
 801642c:	055a      	lsls	r2, r3, #21
 801642e:	d407      	bmi.n	8016440 <_printf_float+0x1f4>
 8016430:	6923      	ldr	r3, [r4, #16]
 8016432:	4642      	mov	r2, r8
 8016434:	4631      	mov	r1, r6
 8016436:	4628      	mov	r0, r5
 8016438:	47b8      	blx	r7
 801643a:	3001      	adds	r0, #1
 801643c:	d12c      	bne.n	8016498 <_printf_float+0x24c>
 801643e:	e764      	b.n	801630a <_printf_float+0xbe>
 8016440:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016444:	f240 80e0 	bls.w	8016608 <_printf_float+0x3bc>
 8016448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801644c:	2200      	movs	r2, #0
 801644e:	2300      	movs	r3, #0
 8016450:	f7ea fb62 	bl	8000b18 <__aeabi_dcmpeq>
 8016454:	2800      	cmp	r0, #0
 8016456:	d034      	beq.n	80164c2 <_printf_float+0x276>
 8016458:	4a37      	ldr	r2, [pc, #220]	; (8016538 <_printf_float+0x2ec>)
 801645a:	2301      	movs	r3, #1
 801645c:	4631      	mov	r1, r6
 801645e:	4628      	mov	r0, r5
 8016460:	47b8      	blx	r7
 8016462:	3001      	adds	r0, #1
 8016464:	f43f af51 	beq.w	801630a <_printf_float+0xbe>
 8016468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801646c:	429a      	cmp	r2, r3
 801646e:	db02      	blt.n	8016476 <_printf_float+0x22a>
 8016470:	6823      	ldr	r3, [r4, #0]
 8016472:	07d8      	lsls	r0, r3, #31
 8016474:	d510      	bpl.n	8016498 <_printf_float+0x24c>
 8016476:	ee18 3a10 	vmov	r3, s16
 801647a:	4652      	mov	r2, sl
 801647c:	4631      	mov	r1, r6
 801647e:	4628      	mov	r0, r5
 8016480:	47b8      	blx	r7
 8016482:	3001      	adds	r0, #1
 8016484:	f43f af41 	beq.w	801630a <_printf_float+0xbe>
 8016488:	f04f 0800 	mov.w	r8, #0
 801648c:	f104 091a 	add.w	r9, r4, #26
 8016490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016492:	3b01      	subs	r3, #1
 8016494:	4543      	cmp	r3, r8
 8016496:	dc09      	bgt.n	80164ac <_printf_float+0x260>
 8016498:	6823      	ldr	r3, [r4, #0]
 801649a:	079b      	lsls	r3, r3, #30
 801649c:	f100 8107 	bmi.w	80166ae <_printf_float+0x462>
 80164a0:	68e0      	ldr	r0, [r4, #12]
 80164a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164a4:	4298      	cmp	r0, r3
 80164a6:	bfb8      	it	lt
 80164a8:	4618      	movlt	r0, r3
 80164aa:	e730      	b.n	801630e <_printf_float+0xc2>
 80164ac:	2301      	movs	r3, #1
 80164ae:	464a      	mov	r2, r9
 80164b0:	4631      	mov	r1, r6
 80164b2:	4628      	mov	r0, r5
 80164b4:	47b8      	blx	r7
 80164b6:	3001      	adds	r0, #1
 80164b8:	f43f af27 	beq.w	801630a <_printf_float+0xbe>
 80164bc:	f108 0801 	add.w	r8, r8, #1
 80164c0:	e7e6      	b.n	8016490 <_printf_float+0x244>
 80164c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	dc39      	bgt.n	801653c <_printf_float+0x2f0>
 80164c8:	4a1b      	ldr	r2, [pc, #108]	; (8016538 <_printf_float+0x2ec>)
 80164ca:	2301      	movs	r3, #1
 80164cc:	4631      	mov	r1, r6
 80164ce:	4628      	mov	r0, r5
 80164d0:	47b8      	blx	r7
 80164d2:	3001      	adds	r0, #1
 80164d4:	f43f af19 	beq.w	801630a <_printf_float+0xbe>
 80164d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80164dc:	4313      	orrs	r3, r2
 80164de:	d102      	bne.n	80164e6 <_printf_float+0x29a>
 80164e0:	6823      	ldr	r3, [r4, #0]
 80164e2:	07d9      	lsls	r1, r3, #31
 80164e4:	d5d8      	bpl.n	8016498 <_printf_float+0x24c>
 80164e6:	ee18 3a10 	vmov	r3, s16
 80164ea:	4652      	mov	r2, sl
 80164ec:	4631      	mov	r1, r6
 80164ee:	4628      	mov	r0, r5
 80164f0:	47b8      	blx	r7
 80164f2:	3001      	adds	r0, #1
 80164f4:	f43f af09 	beq.w	801630a <_printf_float+0xbe>
 80164f8:	f04f 0900 	mov.w	r9, #0
 80164fc:	f104 0a1a 	add.w	sl, r4, #26
 8016500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016502:	425b      	negs	r3, r3
 8016504:	454b      	cmp	r3, r9
 8016506:	dc01      	bgt.n	801650c <_printf_float+0x2c0>
 8016508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801650a:	e792      	b.n	8016432 <_printf_float+0x1e6>
 801650c:	2301      	movs	r3, #1
 801650e:	4652      	mov	r2, sl
 8016510:	4631      	mov	r1, r6
 8016512:	4628      	mov	r0, r5
 8016514:	47b8      	blx	r7
 8016516:	3001      	adds	r0, #1
 8016518:	f43f aef7 	beq.w	801630a <_printf_float+0xbe>
 801651c:	f109 0901 	add.w	r9, r9, #1
 8016520:	e7ee      	b.n	8016500 <_printf_float+0x2b4>
 8016522:	bf00      	nop
 8016524:	7fefffff 	.word	0x7fefffff
 8016528:	0801d5d8 	.word	0x0801d5d8
 801652c:	0801d5dc 	.word	0x0801d5dc
 8016530:	0801d5e0 	.word	0x0801d5e0
 8016534:	0801d5e4 	.word	0x0801d5e4
 8016538:	0801d5e8 	.word	0x0801d5e8
 801653c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801653e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016540:	429a      	cmp	r2, r3
 8016542:	bfa8      	it	ge
 8016544:	461a      	movge	r2, r3
 8016546:	2a00      	cmp	r2, #0
 8016548:	4691      	mov	r9, r2
 801654a:	dc37      	bgt.n	80165bc <_printf_float+0x370>
 801654c:	f04f 0b00 	mov.w	fp, #0
 8016550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016554:	f104 021a 	add.w	r2, r4, #26
 8016558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801655a:	9305      	str	r3, [sp, #20]
 801655c:	eba3 0309 	sub.w	r3, r3, r9
 8016560:	455b      	cmp	r3, fp
 8016562:	dc33      	bgt.n	80165cc <_printf_float+0x380>
 8016564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016568:	429a      	cmp	r2, r3
 801656a:	db3b      	blt.n	80165e4 <_printf_float+0x398>
 801656c:	6823      	ldr	r3, [r4, #0]
 801656e:	07da      	lsls	r2, r3, #31
 8016570:	d438      	bmi.n	80165e4 <_printf_float+0x398>
 8016572:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016576:	eba2 0903 	sub.w	r9, r2, r3
 801657a:	9b05      	ldr	r3, [sp, #20]
 801657c:	1ad2      	subs	r2, r2, r3
 801657e:	4591      	cmp	r9, r2
 8016580:	bfa8      	it	ge
 8016582:	4691      	movge	r9, r2
 8016584:	f1b9 0f00 	cmp.w	r9, #0
 8016588:	dc35      	bgt.n	80165f6 <_printf_float+0x3aa>
 801658a:	f04f 0800 	mov.w	r8, #0
 801658e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016592:	f104 0a1a 	add.w	sl, r4, #26
 8016596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801659a:	1a9b      	subs	r3, r3, r2
 801659c:	eba3 0309 	sub.w	r3, r3, r9
 80165a0:	4543      	cmp	r3, r8
 80165a2:	f77f af79 	ble.w	8016498 <_printf_float+0x24c>
 80165a6:	2301      	movs	r3, #1
 80165a8:	4652      	mov	r2, sl
 80165aa:	4631      	mov	r1, r6
 80165ac:	4628      	mov	r0, r5
 80165ae:	47b8      	blx	r7
 80165b0:	3001      	adds	r0, #1
 80165b2:	f43f aeaa 	beq.w	801630a <_printf_float+0xbe>
 80165b6:	f108 0801 	add.w	r8, r8, #1
 80165ba:	e7ec      	b.n	8016596 <_printf_float+0x34a>
 80165bc:	4613      	mov	r3, r2
 80165be:	4631      	mov	r1, r6
 80165c0:	4642      	mov	r2, r8
 80165c2:	4628      	mov	r0, r5
 80165c4:	47b8      	blx	r7
 80165c6:	3001      	adds	r0, #1
 80165c8:	d1c0      	bne.n	801654c <_printf_float+0x300>
 80165ca:	e69e      	b.n	801630a <_printf_float+0xbe>
 80165cc:	2301      	movs	r3, #1
 80165ce:	4631      	mov	r1, r6
 80165d0:	4628      	mov	r0, r5
 80165d2:	9205      	str	r2, [sp, #20]
 80165d4:	47b8      	blx	r7
 80165d6:	3001      	adds	r0, #1
 80165d8:	f43f ae97 	beq.w	801630a <_printf_float+0xbe>
 80165dc:	9a05      	ldr	r2, [sp, #20]
 80165de:	f10b 0b01 	add.w	fp, fp, #1
 80165e2:	e7b9      	b.n	8016558 <_printf_float+0x30c>
 80165e4:	ee18 3a10 	vmov	r3, s16
 80165e8:	4652      	mov	r2, sl
 80165ea:	4631      	mov	r1, r6
 80165ec:	4628      	mov	r0, r5
 80165ee:	47b8      	blx	r7
 80165f0:	3001      	adds	r0, #1
 80165f2:	d1be      	bne.n	8016572 <_printf_float+0x326>
 80165f4:	e689      	b.n	801630a <_printf_float+0xbe>
 80165f6:	9a05      	ldr	r2, [sp, #20]
 80165f8:	464b      	mov	r3, r9
 80165fa:	4442      	add	r2, r8
 80165fc:	4631      	mov	r1, r6
 80165fe:	4628      	mov	r0, r5
 8016600:	47b8      	blx	r7
 8016602:	3001      	adds	r0, #1
 8016604:	d1c1      	bne.n	801658a <_printf_float+0x33e>
 8016606:	e680      	b.n	801630a <_printf_float+0xbe>
 8016608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801660a:	2a01      	cmp	r2, #1
 801660c:	dc01      	bgt.n	8016612 <_printf_float+0x3c6>
 801660e:	07db      	lsls	r3, r3, #31
 8016610:	d53a      	bpl.n	8016688 <_printf_float+0x43c>
 8016612:	2301      	movs	r3, #1
 8016614:	4642      	mov	r2, r8
 8016616:	4631      	mov	r1, r6
 8016618:	4628      	mov	r0, r5
 801661a:	47b8      	blx	r7
 801661c:	3001      	adds	r0, #1
 801661e:	f43f ae74 	beq.w	801630a <_printf_float+0xbe>
 8016622:	ee18 3a10 	vmov	r3, s16
 8016626:	4652      	mov	r2, sl
 8016628:	4631      	mov	r1, r6
 801662a:	4628      	mov	r0, r5
 801662c:	47b8      	blx	r7
 801662e:	3001      	adds	r0, #1
 8016630:	f43f ae6b 	beq.w	801630a <_printf_float+0xbe>
 8016634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016638:	2200      	movs	r2, #0
 801663a:	2300      	movs	r3, #0
 801663c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016640:	f7ea fa6a 	bl	8000b18 <__aeabi_dcmpeq>
 8016644:	b9d8      	cbnz	r0, 801667e <_printf_float+0x432>
 8016646:	f10a 33ff 	add.w	r3, sl, #4294967295
 801664a:	f108 0201 	add.w	r2, r8, #1
 801664e:	4631      	mov	r1, r6
 8016650:	4628      	mov	r0, r5
 8016652:	47b8      	blx	r7
 8016654:	3001      	adds	r0, #1
 8016656:	d10e      	bne.n	8016676 <_printf_float+0x42a>
 8016658:	e657      	b.n	801630a <_printf_float+0xbe>
 801665a:	2301      	movs	r3, #1
 801665c:	4652      	mov	r2, sl
 801665e:	4631      	mov	r1, r6
 8016660:	4628      	mov	r0, r5
 8016662:	47b8      	blx	r7
 8016664:	3001      	adds	r0, #1
 8016666:	f43f ae50 	beq.w	801630a <_printf_float+0xbe>
 801666a:	f108 0801 	add.w	r8, r8, #1
 801666e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016670:	3b01      	subs	r3, #1
 8016672:	4543      	cmp	r3, r8
 8016674:	dcf1      	bgt.n	801665a <_printf_float+0x40e>
 8016676:	464b      	mov	r3, r9
 8016678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801667c:	e6da      	b.n	8016434 <_printf_float+0x1e8>
 801667e:	f04f 0800 	mov.w	r8, #0
 8016682:	f104 0a1a 	add.w	sl, r4, #26
 8016686:	e7f2      	b.n	801666e <_printf_float+0x422>
 8016688:	2301      	movs	r3, #1
 801668a:	4642      	mov	r2, r8
 801668c:	e7df      	b.n	801664e <_printf_float+0x402>
 801668e:	2301      	movs	r3, #1
 8016690:	464a      	mov	r2, r9
 8016692:	4631      	mov	r1, r6
 8016694:	4628      	mov	r0, r5
 8016696:	47b8      	blx	r7
 8016698:	3001      	adds	r0, #1
 801669a:	f43f ae36 	beq.w	801630a <_printf_float+0xbe>
 801669e:	f108 0801 	add.w	r8, r8, #1
 80166a2:	68e3      	ldr	r3, [r4, #12]
 80166a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166a6:	1a5b      	subs	r3, r3, r1
 80166a8:	4543      	cmp	r3, r8
 80166aa:	dcf0      	bgt.n	801668e <_printf_float+0x442>
 80166ac:	e6f8      	b.n	80164a0 <_printf_float+0x254>
 80166ae:	f04f 0800 	mov.w	r8, #0
 80166b2:	f104 0919 	add.w	r9, r4, #25
 80166b6:	e7f4      	b.n	80166a2 <_printf_float+0x456>

080166b8 <_printf_common>:
 80166b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166bc:	4616      	mov	r6, r2
 80166be:	4699      	mov	r9, r3
 80166c0:	688a      	ldr	r2, [r1, #8]
 80166c2:	690b      	ldr	r3, [r1, #16]
 80166c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80166c8:	4293      	cmp	r3, r2
 80166ca:	bfb8      	it	lt
 80166cc:	4613      	movlt	r3, r2
 80166ce:	6033      	str	r3, [r6, #0]
 80166d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80166d4:	4607      	mov	r7, r0
 80166d6:	460c      	mov	r4, r1
 80166d8:	b10a      	cbz	r2, 80166de <_printf_common+0x26>
 80166da:	3301      	adds	r3, #1
 80166dc:	6033      	str	r3, [r6, #0]
 80166de:	6823      	ldr	r3, [r4, #0]
 80166e0:	0699      	lsls	r1, r3, #26
 80166e2:	bf42      	ittt	mi
 80166e4:	6833      	ldrmi	r3, [r6, #0]
 80166e6:	3302      	addmi	r3, #2
 80166e8:	6033      	strmi	r3, [r6, #0]
 80166ea:	6825      	ldr	r5, [r4, #0]
 80166ec:	f015 0506 	ands.w	r5, r5, #6
 80166f0:	d106      	bne.n	8016700 <_printf_common+0x48>
 80166f2:	f104 0a19 	add.w	sl, r4, #25
 80166f6:	68e3      	ldr	r3, [r4, #12]
 80166f8:	6832      	ldr	r2, [r6, #0]
 80166fa:	1a9b      	subs	r3, r3, r2
 80166fc:	42ab      	cmp	r3, r5
 80166fe:	dc26      	bgt.n	801674e <_printf_common+0x96>
 8016700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016704:	1e13      	subs	r3, r2, #0
 8016706:	6822      	ldr	r2, [r4, #0]
 8016708:	bf18      	it	ne
 801670a:	2301      	movne	r3, #1
 801670c:	0692      	lsls	r2, r2, #26
 801670e:	d42b      	bmi.n	8016768 <_printf_common+0xb0>
 8016710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016714:	4649      	mov	r1, r9
 8016716:	4638      	mov	r0, r7
 8016718:	47c0      	blx	r8
 801671a:	3001      	adds	r0, #1
 801671c:	d01e      	beq.n	801675c <_printf_common+0xa4>
 801671e:	6823      	ldr	r3, [r4, #0]
 8016720:	6922      	ldr	r2, [r4, #16]
 8016722:	f003 0306 	and.w	r3, r3, #6
 8016726:	2b04      	cmp	r3, #4
 8016728:	bf02      	ittt	eq
 801672a:	68e5      	ldreq	r5, [r4, #12]
 801672c:	6833      	ldreq	r3, [r6, #0]
 801672e:	1aed      	subeq	r5, r5, r3
 8016730:	68a3      	ldr	r3, [r4, #8]
 8016732:	bf0c      	ite	eq
 8016734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016738:	2500      	movne	r5, #0
 801673a:	4293      	cmp	r3, r2
 801673c:	bfc4      	itt	gt
 801673e:	1a9b      	subgt	r3, r3, r2
 8016740:	18ed      	addgt	r5, r5, r3
 8016742:	2600      	movs	r6, #0
 8016744:	341a      	adds	r4, #26
 8016746:	42b5      	cmp	r5, r6
 8016748:	d11a      	bne.n	8016780 <_printf_common+0xc8>
 801674a:	2000      	movs	r0, #0
 801674c:	e008      	b.n	8016760 <_printf_common+0xa8>
 801674e:	2301      	movs	r3, #1
 8016750:	4652      	mov	r2, sl
 8016752:	4649      	mov	r1, r9
 8016754:	4638      	mov	r0, r7
 8016756:	47c0      	blx	r8
 8016758:	3001      	adds	r0, #1
 801675a:	d103      	bne.n	8016764 <_printf_common+0xac>
 801675c:	f04f 30ff 	mov.w	r0, #4294967295
 8016760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016764:	3501      	adds	r5, #1
 8016766:	e7c6      	b.n	80166f6 <_printf_common+0x3e>
 8016768:	18e1      	adds	r1, r4, r3
 801676a:	1c5a      	adds	r2, r3, #1
 801676c:	2030      	movs	r0, #48	; 0x30
 801676e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016772:	4422      	add	r2, r4
 8016774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801677c:	3302      	adds	r3, #2
 801677e:	e7c7      	b.n	8016710 <_printf_common+0x58>
 8016780:	2301      	movs	r3, #1
 8016782:	4622      	mov	r2, r4
 8016784:	4649      	mov	r1, r9
 8016786:	4638      	mov	r0, r7
 8016788:	47c0      	blx	r8
 801678a:	3001      	adds	r0, #1
 801678c:	d0e6      	beq.n	801675c <_printf_common+0xa4>
 801678e:	3601      	adds	r6, #1
 8016790:	e7d9      	b.n	8016746 <_printf_common+0x8e>
	...

08016794 <_printf_i>:
 8016794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016798:	7e0f      	ldrb	r7, [r1, #24]
 801679a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801679c:	2f78      	cmp	r7, #120	; 0x78
 801679e:	4691      	mov	r9, r2
 80167a0:	4680      	mov	r8, r0
 80167a2:	460c      	mov	r4, r1
 80167a4:	469a      	mov	sl, r3
 80167a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80167aa:	d807      	bhi.n	80167bc <_printf_i+0x28>
 80167ac:	2f62      	cmp	r7, #98	; 0x62
 80167ae:	d80a      	bhi.n	80167c6 <_printf_i+0x32>
 80167b0:	2f00      	cmp	r7, #0
 80167b2:	f000 80d4 	beq.w	801695e <_printf_i+0x1ca>
 80167b6:	2f58      	cmp	r7, #88	; 0x58
 80167b8:	f000 80c0 	beq.w	801693c <_printf_i+0x1a8>
 80167bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80167c4:	e03a      	b.n	801683c <_printf_i+0xa8>
 80167c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80167ca:	2b15      	cmp	r3, #21
 80167cc:	d8f6      	bhi.n	80167bc <_printf_i+0x28>
 80167ce:	a101      	add	r1, pc, #4	; (adr r1, 80167d4 <_printf_i+0x40>)
 80167d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80167d4:	0801682d 	.word	0x0801682d
 80167d8:	08016841 	.word	0x08016841
 80167dc:	080167bd 	.word	0x080167bd
 80167e0:	080167bd 	.word	0x080167bd
 80167e4:	080167bd 	.word	0x080167bd
 80167e8:	080167bd 	.word	0x080167bd
 80167ec:	08016841 	.word	0x08016841
 80167f0:	080167bd 	.word	0x080167bd
 80167f4:	080167bd 	.word	0x080167bd
 80167f8:	080167bd 	.word	0x080167bd
 80167fc:	080167bd 	.word	0x080167bd
 8016800:	08016945 	.word	0x08016945
 8016804:	0801686d 	.word	0x0801686d
 8016808:	080168ff 	.word	0x080168ff
 801680c:	080167bd 	.word	0x080167bd
 8016810:	080167bd 	.word	0x080167bd
 8016814:	08016967 	.word	0x08016967
 8016818:	080167bd 	.word	0x080167bd
 801681c:	0801686d 	.word	0x0801686d
 8016820:	080167bd 	.word	0x080167bd
 8016824:	080167bd 	.word	0x080167bd
 8016828:	08016907 	.word	0x08016907
 801682c:	682b      	ldr	r3, [r5, #0]
 801682e:	1d1a      	adds	r2, r3, #4
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	602a      	str	r2, [r5, #0]
 8016834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801683c:	2301      	movs	r3, #1
 801683e:	e09f      	b.n	8016980 <_printf_i+0x1ec>
 8016840:	6820      	ldr	r0, [r4, #0]
 8016842:	682b      	ldr	r3, [r5, #0]
 8016844:	0607      	lsls	r7, r0, #24
 8016846:	f103 0104 	add.w	r1, r3, #4
 801684a:	6029      	str	r1, [r5, #0]
 801684c:	d501      	bpl.n	8016852 <_printf_i+0xbe>
 801684e:	681e      	ldr	r6, [r3, #0]
 8016850:	e003      	b.n	801685a <_printf_i+0xc6>
 8016852:	0646      	lsls	r6, r0, #25
 8016854:	d5fb      	bpl.n	801684e <_printf_i+0xba>
 8016856:	f9b3 6000 	ldrsh.w	r6, [r3]
 801685a:	2e00      	cmp	r6, #0
 801685c:	da03      	bge.n	8016866 <_printf_i+0xd2>
 801685e:	232d      	movs	r3, #45	; 0x2d
 8016860:	4276      	negs	r6, r6
 8016862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016866:	485a      	ldr	r0, [pc, #360]	; (80169d0 <_printf_i+0x23c>)
 8016868:	230a      	movs	r3, #10
 801686a:	e012      	b.n	8016892 <_printf_i+0xfe>
 801686c:	682b      	ldr	r3, [r5, #0]
 801686e:	6820      	ldr	r0, [r4, #0]
 8016870:	1d19      	adds	r1, r3, #4
 8016872:	6029      	str	r1, [r5, #0]
 8016874:	0605      	lsls	r5, r0, #24
 8016876:	d501      	bpl.n	801687c <_printf_i+0xe8>
 8016878:	681e      	ldr	r6, [r3, #0]
 801687a:	e002      	b.n	8016882 <_printf_i+0xee>
 801687c:	0641      	lsls	r1, r0, #25
 801687e:	d5fb      	bpl.n	8016878 <_printf_i+0xe4>
 8016880:	881e      	ldrh	r6, [r3, #0]
 8016882:	4853      	ldr	r0, [pc, #332]	; (80169d0 <_printf_i+0x23c>)
 8016884:	2f6f      	cmp	r7, #111	; 0x6f
 8016886:	bf0c      	ite	eq
 8016888:	2308      	moveq	r3, #8
 801688a:	230a      	movne	r3, #10
 801688c:	2100      	movs	r1, #0
 801688e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016892:	6865      	ldr	r5, [r4, #4]
 8016894:	60a5      	str	r5, [r4, #8]
 8016896:	2d00      	cmp	r5, #0
 8016898:	bfa2      	ittt	ge
 801689a:	6821      	ldrge	r1, [r4, #0]
 801689c:	f021 0104 	bicge.w	r1, r1, #4
 80168a0:	6021      	strge	r1, [r4, #0]
 80168a2:	b90e      	cbnz	r6, 80168a8 <_printf_i+0x114>
 80168a4:	2d00      	cmp	r5, #0
 80168a6:	d04b      	beq.n	8016940 <_printf_i+0x1ac>
 80168a8:	4615      	mov	r5, r2
 80168aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80168ae:	fb03 6711 	mls	r7, r3, r1, r6
 80168b2:	5dc7      	ldrb	r7, [r0, r7]
 80168b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80168b8:	4637      	mov	r7, r6
 80168ba:	42bb      	cmp	r3, r7
 80168bc:	460e      	mov	r6, r1
 80168be:	d9f4      	bls.n	80168aa <_printf_i+0x116>
 80168c0:	2b08      	cmp	r3, #8
 80168c2:	d10b      	bne.n	80168dc <_printf_i+0x148>
 80168c4:	6823      	ldr	r3, [r4, #0]
 80168c6:	07de      	lsls	r6, r3, #31
 80168c8:	d508      	bpl.n	80168dc <_printf_i+0x148>
 80168ca:	6923      	ldr	r3, [r4, #16]
 80168cc:	6861      	ldr	r1, [r4, #4]
 80168ce:	4299      	cmp	r1, r3
 80168d0:	bfde      	ittt	le
 80168d2:	2330      	movle	r3, #48	; 0x30
 80168d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80168d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80168dc:	1b52      	subs	r2, r2, r5
 80168de:	6122      	str	r2, [r4, #16]
 80168e0:	f8cd a000 	str.w	sl, [sp]
 80168e4:	464b      	mov	r3, r9
 80168e6:	aa03      	add	r2, sp, #12
 80168e8:	4621      	mov	r1, r4
 80168ea:	4640      	mov	r0, r8
 80168ec:	f7ff fee4 	bl	80166b8 <_printf_common>
 80168f0:	3001      	adds	r0, #1
 80168f2:	d14a      	bne.n	801698a <_printf_i+0x1f6>
 80168f4:	f04f 30ff 	mov.w	r0, #4294967295
 80168f8:	b004      	add	sp, #16
 80168fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168fe:	6823      	ldr	r3, [r4, #0]
 8016900:	f043 0320 	orr.w	r3, r3, #32
 8016904:	6023      	str	r3, [r4, #0]
 8016906:	4833      	ldr	r0, [pc, #204]	; (80169d4 <_printf_i+0x240>)
 8016908:	2778      	movs	r7, #120	; 0x78
 801690a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801690e:	6823      	ldr	r3, [r4, #0]
 8016910:	6829      	ldr	r1, [r5, #0]
 8016912:	061f      	lsls	r7, r3, #24
 8016914:	f851 6b04 	ldr.w	r6, [r1], #4
 8016918:	d402      	bmi.n	8016920 <_printf_i+0x18c>
 801691a:	065f      	lsls	r7, r3, #25
 801691c:	bf48      	it	mi
 801691e:	b2b6      	uxthmi	r6, r6
 8016920:	07df      	lsls	r7, r3, #31
 8016922:	bf48      	it	mi
 8016924:	f043 0320 	orrmi.w	r3, r3, #32
 8016928:	6029      	str	r1, [r5, #0]
 801692a:	bf48      	it	mi
 801692c:	6023      	strmi	r3, [r4, #0]
 801692e:	b91e      	cbnz	r6, 8016938 <_printf_i+0x1a4>
 8016930:	6823      	ldr	r3, [r4, #0]
 8016932:	f023 0320 	bic.w	r3, r3, #32
 8016936:	6023      	str	r3, [r4, #0]
 8016938:	2310      	movs	r3, #16
 801693a:	e7a7      	b.n	801688c <_printf_i+0xf8>
 801693c:	4824      	ldr	r0, [pc, #144]	; (80169d0 <_printf_i+0x23c>)
 801693e:	e7e4      	b.n	801690a <_printf_i+0x176>
 8016940:	4615      	mov	r5, r2
 8016942:	e7bd      	b.n	80168c0 <_printf_i+0x12c>
 8016944:	682b      	ldr	r3, [r5, #0]
 8016946:	6826      	ldr	r6, [r4, #0]
 8016948:	6961      	ldr	r1, [r4, #20]
 801694a:	1d18      	adds	r0, r3, #4
 801694c:	6028      	str	r0, [r5, #0]
 801694e:	0635      	lsls	r5, r6, #24
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	d501      	bpl.n	8016958 <_printf_i+0x1c4>
 8016954:	6019      	str	r1, [r3, #0]
 8016956:	e002      	b.n	801695e <_printf_i+0x1ca>
 8016958:	0670      	lsls	r0, r6, #25
 801695a:	d5fb      	bpl.n	8016954 <_printf_i+0x1c0>
 801695c:	8019      	strh	r1, [r3, #0]
 801695e:	2300      	movs	r3, #0
 8016960:	6123      	str	r3, [r4, #16]
 8016962:	4615      	mov	r5, r2
 8016964:	e7bc      	b.n	80168e0 <_printf_i+0x14c>
 8016966:	682b      	ldr	r3, [r5, #0]
 8016968:	1d1a      	adds	r2, r3, #4
 801696a:	602a      	str	r2, [r5, #0]
 801696c:	681d      	ldr	r5, [r3, #0]
 801696e:	6862      	ldr	r2, [r4, #4]
 8016970:	2100      	movs	r1, #0
 8016972:	4628      	mov	r0, r5
 8016974:	f7e9 fc54 	bl	8000220 <memchr>
 8016978:	b108      	cbz	r0, 801697e <_printf_i+0x1ea>
 801697a:	1b40      	subs	r0, r0, r5
 801697c:	6060      	str	r0, [r4, #4]
 801697e:	6863      	ldr	r3, [r4, #4]
 8016980:	6123      	str	r3, [r4, #16]
 8016982:	2300      	movs	r3, #0
 8016984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016988:	e7aa      	b.n	80168e0 <_printf_i+0x14c>
 801698a:	6923      	ldr	r3, [r4, #16]
 801698c:	462a      	mov	r2, r5
 801698e:	4649      	mov	r1, r9
 8016990:	4640      	mov	r0, r8
 8016992:	47d0      	blx	sl
 8016994:	3001      	adds	r0, #1
 8016996:	d0ad      	beq.n	80168f4 <_printf_i+0x160>
 8016998:	6823      	ldr	r3, [r4, #0]
 801699a:	079b      	lsls	r3, r3, #30
 801699c:	d413      	bmi.n	80169c6 <_printf_i+0x232>
 801699e:	68e0      	ldr	r0, [r4, #12]
 80169a0:	9b03      	ldr	r3, [sp, #12]
 80169a2:	4298      	cmp	r0, r3
 80169a4:	bfb8      	it	lt
 80169a6:	4618      	movlt	r0, r3
 80169a8:	e7a6      	b.n	80168f8 <_printf_i+0x164>
 80169aa:	2301      	movs	r3, #1
 80169ac:	4632      	mov	r2, r6
 80169ae:	4649      	mov	r1, r9
 80169b0:	4640      	mov	r0, r8
 80169b2:	47d0      	blx	sl
 80169b4:	3001      	adds	r0, #1
 80169b6:	d09d      	beq.n	80168f4 <_printf_i+0x160>
 80169b8:	3501      	adds	r5, #1
 80169ba:	68e3      	ldr	r3, [r4, #12]
 80169bc:	9903      	ldr	r1, [sp, #12]
 80169be:	1a5b      	subs	r3, r3, r1
 80169c0:	42ab      	cmp	r3, r5
 80169c2:	dcf2      	bgt.n	80169aa <_printf_i+0x216>
 80169c4:	e7eb      	b.n	801699e <_printf_i+0x20a>
 80169c6:	2500      	movs	r5, #0
 80169c8:	f104 0619 	add.w	r6, r4, #25
 80169cc:	e7f5      	b.n	80169ba <_printf_i+0x226>
 80169ce:	bf00      	nop
 80169d0:	0801d5ea 	.word	0x0801d5ea
 80169d4:	0801d5fb 	.word	0x0801d5fb

080169d8 <_scanf_float>:
 80169d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169dc:	b087      	sub	sp, #28
 80169de:	4617      	mov	r7, r2
 80169e0:	9303      	str	r3, [sp, #12]
 80169e2:	688b      	ldr	r3, [r1, #8]
 80169e4:	1e5a      	subs	r2, r3, #1
 80169e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80169ea:	bf83      	ittte	hi
 80169ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80169f0:	195b      	addhi	r3, r3, r5
 80169f2:	9302      	strhi	r3, [sp, #8]
 80169f4:	2300      	movls	r3, #0
 80169f6:	bf86      	itte	hi
 80169f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80169fc:	608b      	strhi	r3, [r1, #8]
 80169fe:	9302      	strls	r3, [sp, #8]
 8016a00:	680b      	ldr	r3, [r1, #0]
 8016a02:	468b      	mov	fp, r1
 8016a04:	2500      	movs	r5, #0
 8016a06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016a0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8016a0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a12:	4680      	mov	r8, r0
 8016a14:	460c      	mov	r4, r1
 8016a16:	465e      	mov	r6, fp
 8016a18:	46aa      	mov	sl, r5
 8016a1a:	46a9      	mov	r9, r5
 8016a1c:	9501      	str	r5, [sp, #4]
 8016a1e:	68a2      	ldr	r2, [r4, #8]
 8016a20:	b152      	cbz	r2, 8016a38 <_scanf_float+0x60>
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	2b4e      	cmp	r3, #78	; 0x4e
 8016a28:	d864      	bhi.n	8016af4 <_scanf_float+0x11c>
 8016a2a:	2b40      	cmp	r3, #64	; 0x40
 8016a2c:	d83c      	bhi.n	8016aa8 <_scanf_float+0xd0>
 8016a2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016a32:	b2c8      	uxtb	r0, r1
 8016a34:	280e      	cmp	r0, #14
 8016a36:	d93a      	bls.n	8016aae <_scanf_float+0xd6>
 8016a38:	f1b9 0f00 	cmp.w	r9, #0
 8016a3c:	d003      	beq.n	8016a46 <_scanf_float+0x6e>
 8016a3e:	6823      	ldr	r3, [r4, #0]
 8016a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a44:	6023      	str	r3, [r4, #0]
 8016a46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a4a:	f1ba 0f01 	cmp.w	sl, #1
 8016a4e:	f200 8113 	bhi.w	8016c78 <_scanf_float+0x2a0>
 8016a52:	455e      	cmp	r6, fp
 8016a54:	f200 8105 	bhi.w	8016c62 <_scanf_float+0x28a>
 8016a58:	2501      	movs	r5, #1
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	b007      	add	sp, #28
 8016a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016a66:	2a0d      	cmp	r2, #13
 8016a68:	d8e6      	bhi.n	8016a38 <_scanf_float+0x60>
 8016a6a:	a101      	add	r1, pc, #4	; (adr r1, 8016a70 <_scanf_float+0x98>)
 8016a6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016a70:	08016baf 	.word	0x08016baf
 8016a74:	08016a39 	.word	0x08016a39
 8016a78:	08016a39 	.word	0x08016a39
 8016a7c:	08016a39 	.word	0x08016a39
 8016a80:	08016c0f 	.word	0x08016c0f
 8016a84:	08016be7 	.word	0x08016be7
 8016a88:	08016a39 	.word	0x08016a39
 8016a8c:	08016a39 	.word	0x08016a39
 8016a90:	08016bbd 	.word	0x08016bbd
 8016a94:	08016a39 	.word	0x08016a39
 8016a98:	08016a39 	.word	0x08016a39
 8016a9c:	08016a39 	.word	0x08016a39
 8016aa0:	08016a39 	.word	0x08016a39
 8016aa4:	08016b75 	.word	0x08016b75
 8016aa8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016aac:	e7db      	b.n	8016a66 <_scanf_float+0x8e>
 8016aae:	290e      	cmp	r1, #14
 8016ab0:	d8c2      	bhi.n	8016a38 <_scanf_float+0x60>
 8016ab2:	a001      	add	r0, pc, #4	; (adr r0, 8016ab8 <_scanf_float+0xe0>)
 8016ab4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016ab8:	08016b67 	.word	0x08016b67
 8016abc:	08016a39 	.word	0x08016a39
 8016ac0:	08016b67 	.word	0x08016b67
 8016ac4:	08016bfb 	.word	0x08016bfb
 8016ac8:	08016a39 	.word	0x08016a39
 8016acc:	08016b15 	.word	0x08016b15
 8016ad0:	08016b51 	.word	0x08016b51
 8016ad4:	08016b51 	.word	0x08016b51
 8016ad8:	08016b51 	.word	0x08016b51
 8016adc:	08016b51 	.word	0x08016b51
 8016ae0:	08016b51 	.word	0x08016b51
 8016ae4:	08016b51 	.word	0x08016b51
 8016ae8:	08016b51 	.word	0x08016b51
 8016aec:	08016b51 	.word	0x08016b51
 8016af0:	08016b51 	.word	0x08016b51
 8016af4:	2b6e      	cmp	r3, #110	; 0x6e
 8016af6:	d809      	bhi.n	8016b0c <_scanf_float+0x134>
 8016af8:	2b60      	cmp	r3, #96	; 0x60
 8016afa:	d8b2      	bhi.n	8016a62 <_scanf_float+0x8a>
 8016afc:	2b54      	cmp	r3, #84	; 0x54
 8016afe:	d077      	beq.n	8016bf0 <_scanf_float+0x218>
 8016b00:	2b59      	cmp	r3, #89	; 0x59
 8016b02:	d199      	bne.n	8016a38 <_scanf_float+0x60>
 8016b04:	2d07      	cmp	r5, #7
 8016b06:	d197      	bne.n	8016a38 <_scanf_float+0x60>
 8016b08:	2508      	movs	r5, #8
 8016b0a:	e029      	b.n	8016b60 <_scanf_float+0x188>
 8016b0c:	2b74      	cmp	r3, #116	; 0x74
 8016b0e:	d06f      	beq.n	8016bf0 <_scanf_float+0x218>
 8016b10:	2b79      	cmp	r3, #121	; 0x79
 8016b12:	e7f6      	b.n	8016b02 <_scanf_float+0x12a>
 8016b14:	6821      	ldr	r1, [r4, #0]
 8016b16:	05c8      	lsls	r0, r1, #23
 8016b18:	d51a      	bpl.n	8016b50 <_scanf_float+0x178>
 8016b1a:	9b02      	ldr	r3, [sp, #8]
 8016b1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016b20:	6021      	str	r1, [r4, #0]
 8016b22:	f109 0901 	add.w	r9, r9, #1
 8016b26:	b11b      	cbz	r3, 8016b30 <_scanf_float+0x158>
 8016b28:	3b01      	subs	r3, #1
 8016b2a:	3201      	adds	r2, #1
 8016b2c:	9302      	str	r3, [sp, #8]
 8016b2e:	60a2      	str	r2, [r4, #8]
 8016b30:	68a3      	ldr	r3, [r4, #8]
 8016b32:	3b01      	subs	r3, #1
 8016b34:	60a3      	str	r3, [r4, #8]
 8016b36:	6923      	ldr	r3, [r4, #16]
 8016b38:	3301      	adds	r3, #1
 8016b3a:	6123      	str	r3, [r4, #16]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	3b01      	subs	r3, #1
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	607b      	str	r3, [r7, #4]
 8016b44:	f340 8084 	ble.w	8016c50 <_scanf_float+0x278>
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	603b      	str	r3, [r7, #0]
 8016b4e:	e766      	b.n	8016a1e <_scanf_float+0x46>
 8016b50:	eb1a 0f05 	cmn.w	sl, r5
 8016b54:	f47f af70 	bne.w	8016a38 <_scanf_float+0x60>
 8016b58:	6822      	ldr	r2, [r4, #0]
 8016b5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016b5e:	6022      	str	r2, [r4, #0]
 8016b60:	f806 3b01 	strb.w	r3, [r6], #1
 8016b64:	e7e4      	b.n	8016b30 <_scanf_float+0x158>
 8016b66:	6822      	ldr	r2, [r4, #0]
 8016b68:	0610      	lsls	r0, r2, #24
 8016b6a:	f57f af65 	bpl.w	8016a38 <_scanf_float+0x60>
 8016b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016b72:	e7f4      	b.n	8016b5e <_scanf_float+0x186>
 8016b74:	f1ba 0f00 	cmp.w	sl, #0
 8016b78:	d10e      	bne.n	8016b98 <_scanf_float+0x1c0>
 8016b7a:	f1b9 0f00 	cmp.w	r9, #0
 8016b7e:	d10e      	bne.n	8016b9e <_scanf_float+0x1c6>
 8016b80:	6822      	ldr	r2, [r4, #0]
 8016b82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016b86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016b8a:	d108      	bne.n	8016b9e <_scanf_float+0x1c6>
 8016b8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b90:	6022      	str	r2, [r4, #0]
 8016b92:	f04f 0a01 	mov.w	sl, #1
 8016b96:	e7e3      	b.n	8016b60 <_scanf_float+0x188>
 8016b98:	f1ba 0f02 	cmp.w	sl, #2
 8016b9c:	d055      	beq.n	8016c4a <_scanf_float+0x272>
 8016b9e:	2d01      	cmp	r5, #1
 8016ba0:	d002      	beq.n	8016ba8 <_scanf_float+0x1d0>
 8016ba2:	2d04      	cmp	r5, #4
 8016ba4:	f47f af48 	bne.w	8016a38 <_scanf_float+0x60>
 8016ba8:	3501      	adds	r5, #1
 8016baa:	b2ed      	uxtb	r5, r5
 8016bac:	e7d8      	b.n	8016b60 <_scanf_float+0x188>
 8016bae:	f1ba 0f01 	cmp.w	sl, #1
 8016bb2:	f47f af41 	bne.w	8016a38 <_scanf_float+0x60>
 8016bb6:	f04f 0a02 	mov.w	sl, #2
 8016bba:	e7d1      	b.n	8016b60 <_scanf_float+0x188>
 8016bbc:	b97d      	cbnz	r5, 8016bde <_scanf_float+0x206>
 8016bbe:	f1b9 0f00 	cmp.w	r9, #0
 8016bc2:	f47f af3c 	bne.w	8016a3e <_scanf_float+0x66>
 8016bc6:	6822      	ldr	r2, [r4, #0]
 8016bc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016bcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016bd0:	f47f af39 	bne.w	8016a46 <_scanf_float+0x6e>
 8016bd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016bd8:	6022      	str	r2, [r4, #0]
 8016bda:	2501      	movs	r5, #1
 8016bdc:	e7c0      	b.n	8016b60 <_scanf_float+0x188>
 8016bde:	2d03      	cmp	r5, #3
 8016be0:	d0e2      	beq.n	8016ba8 <_scanf_float+0x1d0>
 8016be2:	2d05      	cmp	r5, #5
 8016be4:	e7de      	b.n	8016ba4 <_scanf_float+0x1cc>
 8016be6:	2d02      	cmp	r5, #2
 8016be8:	f47f af26 	bne.w	8016a38 <_scanf_float+0x60>
 8016bec:	2503      	movs	r5, #3
 8016bee:	e7b7      	b.n	8016b60 <_scanf_float+0x188>
 8016bf0:	2d06      	cmp	r5, #6
 8016bf2:	f47f af21 	bne.w	8016a38 <_scanf_float+0x60>
 8016bf6:	2507      	movs	r5, #7
 8016bf8:	e7b2      	b.n	8016b60 <_scanf_float+0x188>
 8016bfa:	6822      	ldr	r2, [r4, #0]
 8016bfc:	0591      	lsls	r1, r2, #22
 8016bfe:	f57f af1b 	bpl.w	8016a38 <_scanf_float+0x60>
 8016c02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016c06:	6022      	str	r2, [r4, #0]
 8016c08:	f8cd 9004 	str.w	r9, [sp, #4]
 8016c0c:	e7a8      	b.n	8016b60 <_scanf_float+0x188>
 8016c0e:	6822      	ldr	r2, [r4, #0]
 8016c10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016c14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016c18:	d006      	beq.n	8016c28 <_scanf_float+0x250>
 8016c1a:	0550      	lsls	r0, r2, #21
 8016c1c:	f57f af0c 	bpl.w	8016a38 <_scanf_float+0x60>
 8016c20:	f1b9 0f00 	cmp.w	r9, #0
 8016c24:	f43f af0f 	beq.w	8016a46 <_scanf_float+0x6e>
 8016c28:	0591      	lsls	r1, r2, #22
 8016c2a:	bf58      	it	pl
 8016c2c:	9901      	ldrpl	r1, [sp, #4]
 8016c2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c32:	bf58      	it	pl
 8016c34:	eba9 0101 	subpl.w	r1, r9, r1
 8016c38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016c3c:	bf58      	it	pl
 8016c3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016c42:	6022      	str	r2, [r4, #0]
 8016c44:	f04f 0900 	mov.w	r9, #0
 8016c48:	e78a      	b.n	8016b60 <_scanf_float+0x188>
 8016c4a:	f04f 0a03 	mov.w	sl, #3
 8016c4e:	e787      	b.n	8016b60 <_scanf_float+0x188>
 8016c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c54:	4639      	mov	r1, r7
 8016c56:	4640      	mov	r0, r8
 8016c58:	4798      	blx	r3
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	f43f aedf 	beq.w	8016a1e <_scanf_float+0x46>
 8016c60:	e6ea      	b.n	8016a38 <_scanf_float+0x60>
 8016c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c6a:	463a      	mov	r2, r7
 8016c6c:	4640      	mov	r0, r8
 8016c6e:	4798      	blx	r3
 8016c70:	6923      	ldr	r3, [r4, #16]
 8016c72:	3b01      	subs	r3, #1
 8016c74:	6123      	str	r3, [r4, #16]
 8016c76:	e6ec      	b.n	8016a52 <_scanf_float+0x7a>
 8016c78:	1e6b      	subs	r3, r5, #1
 8016c7a:	2b06      	cmp	r3, #6
 8016c7c:	d825      	bhi.n	8016cca <_scanf_float+0x2f2>
 8016c7e:	2d02      	cmp	r5, #2
 8016c80:	d836      	bhi.n	8016cf0 <_scanf_float+0x318>
 8016c82:	455e      	cmp	r6, fp
 8016c84:	f67f aee8 	bls.w	8016a58 <_scanf_float+0x80>
 8016c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c90:	463a      	mov	r2, r7
 8016c92:	4640      	mov	r0, r8
 8016c94:	4798      	blx	r3
 8016c96:	6923      	ldr	r3, [r4, #16]
 8016c98:	3b01      	subs	r3, #1
 8016c9a:	6123      	str	r3, [r4, #16]
 8016c9c:	e7f1      	b.n	8016c82 <_scanf_float+0x2aa>
 8016c9e:	9802      	ldr	r0, [sp, #8]
 8016ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ca4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016ca8:	9002      	str	r0, [sp, #8]
 8016caa:	463a      	mov	r2, r7
 8016cac:	4640      	mov	r0, r8
 8016cae:	4798      	blx	r3
 8016cb0:	6923      	ldr	r3, [r4, #16]
 8016cb2:	3b01      	subs	r3, #1
 8016cb4:	6123      	str	r3, [r4, #16]
 8016cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cba:	fa5f fa8a 	uxtb.w	sl, sl
 8016cbe:	f1ba 0f02 	cmp.w	sl, #2
 8016cc2:	d1ec      	bne.n	8016c9e <_scanf_float+0x2c6>
 8016cc4:	3d03      	subs	r5, #3
 8016cc6:	b2ed      	uxtb	r5, r5
 8016cc8:	1b76      	subs	r6, r6, r5
 8016cca:	6823      	ldr	r3, [r4, #0]
 8016ccc:	05da      	lsls	r2, r3, #23
 8016cce:	d52f      	bpl.n	8016d30 <_scanf_float+0x358>
 8016cd0:	055b      	lsls	r3, r3, #21
 8016cd2:	d510      	bpl.n	8016cf6 <_scanf_float+0x31e>
 8016cd4:	455e      	cmp	r6, fp
 8016cd6:	f67f aebf 	bls.w	8016a58 <_scanf_float+0x80>
 8016cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016ce2:	463a      	mov	r2, r7
 8016ce4:	4640      	mov	r0, r8
 8016ce6:	4798      	blx	r3
 8016ce8:	6923      	ldr	r3, [r4, #16]
 8016cea:	3b01      	subs	r3, #1
 8016cec:	6123      	str	r3, [r4, #16]
 8016cee:	e7f1      	b.n	8016cd4 <_scanf_float+0x2fc>
 8016cf0:	46aa      	mov	sl, r5
 8016cf2:	9602      	str	r6, [sp, #8]
 8016cf4:	e7df      	b.n	8016cb6 <_scanf_float+0x2de>
 8016cf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016cfa:	6923      	ldr	r3, [r4, #16]
 8016cfc:	2965      	cmp	r1, #101	; 0x65
 8016cfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8016d02:	f106 35ff 	add.w	r5, r6, #4294967295
 8016d06:	6123      	str	r3, [r4, #16]
 8016d08:	d00c      	beq.n	8016d24 <_scanf_float+0x34c>
 8016d0a:	2945      	cmp	r1, #69	; 0x45
 8016d0c:	d00a      	beq.n	8016d24 <_scanf_float+0x34c>
 8016d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d12:	463a      	mov	r2, r7
 8016d14:	4640      	mov	r0, r8
 8016d16:	4798      	blx	r3
 8016d18:	6923      	ldr	r3, [r4, #16]
 8016d1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016d1e:	3b01      	subs	r3, #1
 8016d20:	1eb5      	subs	r5, r6, #2
 8016d22:	6123      	str	r3, [r4, #16]
 8016d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d28:	463a      	mov	r2, r7
 8016d2a:	4640      	mov	r0, r8
 8016d2c:	4798      	blx	r3
 8016d2e:	462e      	mov	r6, r5
 8016d30:	6825      	ldr	r5, [r4, #0]
 8016d32:	f015 0510 	ands.w	r5, r5, #16
 8016d36:	d158      	bne.n	8016dea <_scanf_float+0x412>
 8016d38:	7035      	strb	r5, [r6, #0]
 8016d3a:	6823      	ldr	r3, [r4, #0]
 8016d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d44:	d11c      	bne.n	8016d80 <_scanf_float+0x3a8>
 8016d46:	9b01      	ldr	r3, [sp, #4]
 8016d48:	454b      	cmp	r3, r9
 8016d4a:	eba3 0209 	sub.w	r2, r3, r9
 8016d4e:	d124      	bne.n	8016d9a <_scanf_float+0x3c2>
 8016d50:	2200      	movs	r2, #0
 8016d52:	4659      	mov	r1, fp
 8016d54:	4640      	mov	r0, r8
 8016d56:	f002 fc3f 	bl	80195d8 <_strtod_r>
 8016d5a:	9b03      	ldr	r3, [sp, #12]
 8016d5c:	6821      	ldr	r1, [r4, #0]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	f011 0f02 	tst.w	r1, #2
 8016d64:	ec57 6b10 	vmov	r6, r7, d0
 8016d68:	f103 0204 	add.w	r2, r3, #4
 8016d6c:	d020      	beq.n	8016db0 <_scanf_float+0x3d8>
 8016d6e:	9903      	ldr	r1, [sp, #12]
 8016d70:	600a      	str	r2, [r1, #0]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	e9c3 6700 	strd	r6, r7, [r3]
 8016d78:	68e3      	ldr	r3, [r4, #12]
 8016d7a:	3301      	adds	r3, #1
 8016d7c:	60e3      	str	r3, [r4, #12]
 8016d7e:	e66c      	b.n	8016a5a <_scanf_float+0x82>
 8016d80:	9b04      	ldr	r3, [sp, #16]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d0e4      	beq.n	8016d50 <_scanf_float+0x378>
 8016d86:	9905      	ldr	r1, [sp, #20]
 8016d88:	230a      	movs	r3, #10
 8016d8a:	462a      	mov	r2, r5
 8016d8c:	3101      	adds	r1, #1
 8016d8e:	4640      	mov	r0, r8
 8016d90:	f002 fcaa 	bl	80196e8 <_strtol_r>
 8016d94:	9b04      	ldr	r3, [sp, #16]
 8016d96:	9e05      	ldr	r6, [sp, #20]
 8016d98:	1ac2      	subs	r2, r0, r3
 8016d9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016d9e:	429e      	cmp	r6, r3
 8016da0:	bf28      	it	cs
 8016da2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016da6:	4912      	ldr	r1, [pc, #72]	; (8016df0 <_scanf_float+0x418>)
 8016da8:	4630      	mov	r0, r6
 8016daa:	f000 f8e7 	bl	8016f7c <siprintf>
 8016dae:	e7cf      	b.n	8016d50 <_scanf_float+0x378>
 8016db0:	f011 0f04 	tst.w	r1, #4
 8016db4:	9903      	ldr	r1, [sp, #12]
 8016db6:	600a      	str	r2, [r1, #0]
 8016db8:	d1db      	bne.n	8016d72 <_scanf_float+0x39a>
 8016dba:	f8d3 8000 	ldr.w	r8, [r3]
 8016dbe:	ee10 2a10 	vmov	r2, s0
 8016dc2:	ee10 0a10 	vmov	r0, s0
 8016dc6:	463b      	mov	r3, r7
 8016dc8:	4639      	mov	r1, r7
 8016dca:	f7e9 fed7 	bl	8000b7c <__aeabi_dcmpun>
 8016dce:	b128      	cbz	r0, 8016ddc <_scanf_float+0x404>
 8016dd0:	4808      	ldr	r0, [pc, #32]	; (8016df4 <_scanf_float+0x41c>)
 8016dd2:	f000 f9c5 	bl	8017160 <nanf>
 8016dd6:	ed88 0a00 	vstr	s0, [r8]
 8016dda:	e7cd      	b.n	8016d78 <_scanf_float+0x3a0>
 8016ddc:	4630      	mov	r0, r6
 8016dde:	4639      	mov	r1, r7
 8016de0:	f7e9 ff2a 	bl	8000c38 <__aeabi_d2f>
 8016de4:	f8c8 0000 	str.w	r0, [r8]
 8016de8:	e7c6      	b.n	8016d78 <_scanf_float+0x3a0>
 8016dea:	2500      	movs	r5, #0
 8016dec:	e635      	b.n	8016a5a <_scanf_float+0x82>
 8016dee:	bf00      	nop
 8016df0:	0801d60c 	.word	0x0801d60c
 8016df4:	0801d99d 	.word	0x0801d99d

08016df8 <std>:
 8016df8:	2300      	movs	r3, #0
 8016dfa:	b510      	push	{r4, lr}
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8016e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e06:	6083      	str	r3, [r0, #8]
 8016e08:	8181      	strh	r1, [r0, #12]
 8016e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8016e0c:	81c2      	strh	r2, [r0, #14]
 8016e0e:	6183      	str	r3, [r0, #24]
 8016e10:	4619      	mov	r1, r3
 8016e12:	2208      	movs	r2, #8
 8016e14:	305c      	adds	r0, #92	; 0x5c
 8016e16:	f000 f914 	bl	8017042 <memset>
 8016e1a:	4b0d      	ldr	r3, [pc, #52]	; (8016e50 <std+0x58>)
 8016e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8016e1e:	4b0d      	ldr	r3, [pc, #52]	; (8016e54 <std+0x5c>)
 8016e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e22:	4b0d      	ldr	r3, [pc, #52]	; (8016e58 <std+0x60>)
 8016e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e26:	4b0d      	ldr	r3, [pc, #52]	; (8016e5c <std+0x64>)
 8016e28:	6323      	str	r3, [r4, #48]	; 0x30
 8016e2a:	4b0d      	ldr	r3, [pc, #52]	; (8016e60 <std+0x68>)
 8016e2c:	6224      	str	r4, [r4, #32]
 8016e2e:	429c      	cmp	r4, r3
 8016e30:	d006      	beq.n	8016e40 <std+0x48>
 8016e32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016e36:	4294      	cmp	r4, r2
 8016e38:	d002      	beq.n	8016e40 <std+0x48>
 8016e3a:	33d0      	adds	r3, #208	; 0xd0
 8016e3c:	429c      	cmp	r4, r3
 8016e3e:	d105      	bne.n	8016e4c <std+0x54>
 8016e40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e48:	f000 b978 	b.w	801713c <__retarget_lock_init_recursive>
 8016e4c:	bd10      	pop	{r4, pc}
 8016e4e:	bf00      	nop
 8016e50:	08016fbd 	.word	0x08016fbd
 8016e54:	08016fdf 	.word	0x08016fdf
 8016e58:	08017017 	.word	0x08017017
 8016e5c:	0801703b 	.word	0x0801703b
 8016e60:	200035ac 	.word	0x200035ac

08016e64 <stdio_exit_handler>:
 8016e64:	4a02      	ldr	r2, [pc, #8]	; (8016e70 <stdio_exit_handler+0xc>)
 8016e66:	4903      	ldr	r1, [pc, #12]	; (8016e74 <stdio_exit_handler+0x10>)
 8016e68:	4803      	ldr	r0, [pc, #12]	; (8016e78 <stdio_exit_handler+0x14>)
 8016e6a:	f000 b869 	b.w	8016f40 <_fwalk_sglue>
 8016e6e:	bf00      	nop
 8016e70:	20000378 	.word	0x20000378
 8016e74:	08019aa9 	.word	0x08019aa9
 8016e78:	20000384 	.word	0x20000384

08016e7c <cleanup_stdio>:
 8016e7c:	6841      	ldr	r1, [r0, #4]
 8016e7e:	4b0c      	ldr	r3, [pc, #48]	; (8016eb0 <cleanup_stdio+0x34>)
 8016e80:	4299      	cmp	r1, r3
 8016e82:	b510      	push	{r4, lr}
 8016e84:	4604      	mov	r4, r0
 8016e86:	d001      	beq.n	8016e8c <cleanup_stdio+0x10>
 8016e88:	f002 fe0e 	bl	8019aa8 <_fflush_r>
 8016e8c:	68a1      	ldr	r1, [r4, #8]
 8016e8e:	4b09      	ldr	r3, [pc, #36]	; (8016eb4 <cleanup_stdio+0x38>)
 8016e90:	4299      	cmp	r1, r3
 8016e92:	d002      	beq.n	8016e9a <cleanup_stdio+0x1e>
 8016e94:	4620      	mov	r0, r4
 8016e96:	f002 fe07 	bl	8019aa8 <_fflush_r>
 8016e9a:	68e1      	ldr	r1, [r4, #12]
 8016e9c:	4b06      	ldr	r3, [pc, #24]	; (8016eb8 <cleanup_stdio+0x3c>)
 8016e9e:	4299      	cmp	r1, r3
 8016ea0:	d004      	beq.n	8016eac <cleanup_stdio+0x30>
 8016ea2:	4620      	mov	r0, r4
 8016ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ea8:	f002 bdfe 	b.w	8019aa8 <_fflush_r>
 8016eac:	bd10      	pop	{r4, pc}
 8016eae:	bf00      	nop
 8016eb0:	200035ac 	.word	0x200035ac
 8016eb4:	20003614 	.word	0x20003614
 8016eb8:	2000367c 	.word	0x2000367c

08016ebc <global_stdio_init.part.0>:
 8016ebc:	b510      	push	{r4, lr}
 8016ebe:	4b0b      	ldr	r3, [pc, #44]	; (8016eec <global_stdio_init.part.0+0x30>)
 8016ec0:	4c0b      	ldr	r4, [pc, #44]	; (8016ef0 <global_stdio_init.part.0+0x34>)
 8016ec2:	4a0c      	ldr	r2, [pc, #48]	; (8016ef4 <global_stdio_init.part.0+0x38>)
 8016ec4:	601a      	str	r2, [r3, #0]
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	2200      	movs	r2, #0
 8016eca:	2104      	movs	r1, #4
 8016ecc:	f7ff ff94 	bl	8016df8 <std>
 8016ed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	2109      	movs	r1, #9
 8016ed8:	f7ff ff8e 	bl	8016df8 <std>
 8016edc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016ee0:	2202      	movs	r2, #2
 8016ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ee6:	2112      	movs	r1, #18
 8016ee8:	f7ff bf86 	b.w	8016df8 <std>
 8016eec:	200036e4 	.word	0x200036e4
 8016ef0:	200035ac 	.word	0x200035ac
 8016ef4:	08016e65 	.word	0x08016e65

08016ef8 <__sfp_lock_acquire>:
 8016ef8:	4801      	ldr	r0, [pc, #4]	; (8016f00 <__sfp_lock_acquire+0x8>)
 8016efa:	f000 b920 	b.w	801713e <__retarget_lock_acquire_recursive>
 8016efe:	bf00      	nop
 8016f00:	200036ed 	.word	0x200036ed

08016f04 <__sfp_lock_release>:
 8016f04:	4801      	ldr	r0, [pc, #4]	; (8016f0c <__sfp_lock_release+0x8>)
 8016f06:	f000 b91b 	b.w	8017140 <__retarget_lock_release_recursive>
 8016f0a:	bf00      	nop
 8016f0c:	200036ed 	.word	0x200036ed

08016f10 <__sinit>:
 8016f10:	b510      	push	{r4, lr}
 8016f12:	4604      	mov	r4, r0
 8016f14:	f7ff fff0 	bl	8016ef8 <__sfp_lock_acquire>
 8016f18:	6a23      	ldr	r3, [r4, #32]
 8016f1a:	b11b      	cbz	r3, 8016f24 <__sinit+0x14>
 8016f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f20:	f7ff bff0 	b.w	8016f04 <__sfp_lock_release>
 8016f24:	4b04      	ldr	r3, [pc, #16]	; (8016f38 <__sinit+0x28>)
 8016f26:	6223      	str	r3, [r4, #32]
 8016f28:	4b04      	ldr	r3, [pc, #16]	; (8016f3c <__sinit+0x2c>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d1f5      	bne.n	8016f1c <__sinit+0xc>
 8016f30:	f7ff ffc4 	bl	8016ebc <global_stdio_init.part.0>
 8016f34:	e7f2      	b.n	8016f1c <__sinit+0xc>
 8016f36:	bf00      	nop
 8016f38:	08016e7d 	.word	0x08016e7d
 8016f3c:	200036e4 	.word	0x200036e4

08016f40 <_fwalk_sglue>:
 8016f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f44:	4607      	mov	r7, r0
 8016f46:	4688      	mov	r8, r1
 8016f48:	4614      	mov	r4, r2
 8016f4a:	2600      	movs	r6, #0
 8016f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f50:	f1b9 0901 	subs.w	r9, r9, #1
 8016f54:	d505      	bpl.n	8016f62 <_fwalk_sglue+0x22>
 8016f56:	6824      	ldr	r4, [r4, #0]
 8016f58:	2c00      	cmp	r4, #0
 8016f5a:	d1f7      	bne.n	8016f4c <_fwalk_sglue+0xc>
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f62:	89ab      	ldrh	r3, [r5, #12]
 8016f64:	2b01      	cmp	r3, #1
 8016f66:	d907      	bls.n	8016f78 <_fwalk_sglue+0x38>
 8016f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f6c:	3301      	adds	r3, #1
 8016f6e:	d003      	beq.n	8016f78 <_fwalk_sglue+0x38>
 8016f70:	4629      	mov	r1, r5
 8016f72:	4638      	mov	r0, r7
 8016f74:	47c0      	blx	r8
 8016f76:	4306      	orrs	r6, r0
 8016f78:	3568      	adds	r5, #104	; 0x68
 8016f7a:	e7e9      	b.n	8016f50 <_fwalk_sglue+0x10>

08016f7c <siprintf>:
 8016f7c:	b40e      	push	{r1, r2, r3}
 8016f7e:	b500      	push	{lr}
 8016f80:	b09c      	sub	sp, #112	; 0x70
 8016f82:	ab1d      	add	r3, sp, #116	; 0x74
 8016f84:	9002      	str	r0, [sp, #8]
 8016f86:	9006      	str	r0, [sp, #24]
 8016f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f8c:	4809      	ldr	r0, [pc, #36]	; (8016fb4 <siprintf+0x38>)
 8016f8e:	9107      	str	r1, [sp, #28]
 8016f90:	9104      	str	r1, [sp, #16]
 8016f92:	4909      	ldr	r1, [pc, #36]	; (8016fb8 <siprintf+0x3c>)
 8016f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f98:	9105      	str	r1, [sp, #20]
 8016f9a:	6800      	ldr	r0, [r0, #0]
 8016f9c:	9301      	str	r3, [sp, #4]
 8016f9e:	a902      	add	r1, sp, #8
 8016fa0:	f002 fbfe 	bl	80197a0 <_svfiprintf_r>
 8016fa4:	9b02      	ldr	r3, [sp, #8]
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	701a      	strb	r2, [r3, #0]
 8016faa:	b01c      	add	sp, #112	; 0x70
 8016fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fb0:	b003      	add	sp, #12
 8016fb2:	4770      	bx	lr
 8016fb4:	200003d0 	.word	0x200003d0
 8016fb8:	ffff0208 	.word	0xffff0208

08016fbc <__sread>:
 8016fbc:	b510      	push	{r4, lr}
 8016fbe:	460c      	mov	r4, r1
 8016fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc4:	f000 f86c 	bl	80170a0 <_read_r>
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	bfab      	itete	ge
 8016fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016fce:	89a3      	ldrhlt	r3, [r4, #12]
 8016fd0:	181b      	addge	r3, r3, r0
 8016fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016fd6:	bfac      	ite	ge
 8016fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016fda:	81a3      	strhlt	r3, [r4, #12]
 8016fdc:	bd10      	pop	{r4, pc}

08016fde <__swrite>:
 8016fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe2:	461f      	mov	r7, r3
 8016fe4:	898b      	ldrh	r3, [r1, #12]
 8016fe6:	05db      	lsls	r3, r3, #23
 8016fe8:	4605      	mov	r5, r0
 8016fea:	460c      	mov	r4, r1
 8016fec:	4616      	mov	r6, r2
 8016fee:	d505      	bpl.n	8016ffc <__swrite+0x1e>
 8016ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff4:	2302      	movs	r3, #2
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	f000 f840 	bl	801707c <_lseek_r>
 8016ffc:	89a3      	ldrh	r3, [r4, #12]
 8016ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017006:	81a3      	strh	r3, [r4, #12]
 8017008:	4632      	mov	r2, r6
 801700a:	463b      	mov	r3, r7
 801700c:	4628      	mov	r0, r5
 801700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017012:	f000 b857 	b.w	80170c4 <_write_r>

08017016 <__sseek>:
 8017016:	b510      	push	{r4, lr}
 8017018:	460c      	mov	r4, r1
 801701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801701e:	f000 f82d 	bl	801707c <_lseek_r>
 8017022:	1c43      	adds	r3, r0, #1
 8017024:	89a3      	ldrh	r3, [r4, #12]
 8017026:	bf15      	itete	ne
 8017028:	6560      	strne	r0, [r4, #84]	; 0x54
 801702a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801702e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017032:	81a3      	strheq	r3, [r4, #12]
 8017034:	bf18      	it	ne
 8017036:	81a3      	strhne	r3, [r4, #12]
 8017038:	bd10      	pop	{r4, pc}

0801703a <__sclose>:
 801703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801703e:	f000 b80d 	b.w	801705c <_close_r>

08017042 <memset>:
 8017042:	4402      	add	r2, r0
 8017044:	4603      	mov	r3, r0
 8017046:	4293      	cmp	r3, r2
 8017048:	d100      	bne.n	801704c <memset+0xa>
 801704a:	4770      	bx	lr
 801704c:	f803 1b01 	strb.w	r1, [r3], #1
 8017050:	e7f9      	b.n	8017046 <memset+0x4>
	...

08017054 <_localeconv_r>:
 8017054:	4800      	ldr	r0, [pc, #0]	; (8017058 <_localeconv_r+0x4>)
 8017056:	4770      	bx	lr
 8017058:	200004c4 	.word	0x200004c4

0801705c <_close_r>:
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	4d06      	ldr	r5, [pc, #24]	; (8017078 <_close_r+0x1c>)
 8017060:	2300      	movs	r3, #0
 8017062:	4604      	mov	r4, r0
 8017064:	4608      	mov	r0, r1
 8017066:	602b      	str	r3, [r5, #0]
 8017068:	f7ee fab5 	bl	80055d6 <_close>
 801706c:	1c43      	adds	r3, r0, #1
 801706e:	d102      	bne.n	8017076 <_close_r+0x1a>
 8017070:	682b      	ldr	r3, [r5, #0]
 8017072:	b103      	cbz	r3, 8017076 <_close_r+0x1a>
 8017074:	6023      	str	r3, [r4, #0]
 8017076:	bd38      	pop	{r3, r4, r5, pc}
 8017078:	200036e8 	.word	0x200036e8

0801707c <_lseek_r>:
 801707c:	b538      	push	{r3, r4, r5, lr}
 801707e:	4d07      	ldr	r5, [pc, #28]	; (801709c <_lseek_r+0x20>)
 8017080:	4604      	mov	r4, r0
 8017082:	4608      	mov	r0, r1
 8017084:	4611      	mov	r1, r2
 8017086:	2200      	movs	r2, #0
 8017088:	602a      	str	r2, [r5, #0]
 801708a:	461a      	mov	r2, r3
 801708c:	f7ee faca 	bl	8005624 <_lseek>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d102      	bne.n	801709a <_lseek_r+0x1e>
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	b103      	cbz	r3, 801709a <_lseek_r+0x1e>
 8017098:	6023      	str	r3, [r4, #0]
 801709a:	bd38      	pop	{r3, r4, r5, pc}
 801709c:	200036e8 	.word	0x200036e8

080170a0 <_read_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d07      	ldr	r5, [pc, #28]	; (80170c0 <_read_r+0x20>)
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	4611      	mov	r1, r2
 80170aa:	2200      	movs	r2, #0
 80170ac:	602a      	str	r2, [r5, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	f7ee fa58 	bl	8005564 <_read>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_read_r+0x1e>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_read_r+0x1e>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	200036e8 	.word	0x200036e8

080170c4 <_write_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4d07      	ldr	r5, [pc, #28]	; (80170e4 <_write_r+0x20>)
 80170c8:	4604      	mov	r4, r0
 80170ca:	4608      	mov	r0, r1
 80170cc:	4611      	mov	r1, r2
 80170ce:	2200      	movs	r2, #0
 80170d0:	602a      	str	r2, [r5, #0]
 80170d2:	461a      	mov	r2, r3
 80170d4:	f7ee fa63 	bl	800559e <_write>
 80170d8:	1c43      	adds	r3, r0, #1
 80170da:	d102      	bne.n	80170e2 <_write_r+0x1e>
 80170dc:	682b      	ldr	r3, [r5, #0]
 80170de:	b103      	cbz	r3, 80170e2 <_write_r+0x1e>
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	bd38      	pop	{r3, r4, r5, pc}
 80170e4:	200036e8 	.word	0x200036e8

080170e8 <__errno>:
 80170e8:	4b01      	ldr	r3, [pc, #4]	; (80170f0 <__errno+0x8>)
 80170ea:	6818      	ldr	r0, [r3, #0]
 80170ec:	4770      	bx	lr
 80170ee:	bf00      	nop
 80170f0:	200003d0 	.word	0x200003d0

080170f4 <__libc_init_array>:
 80170f4:	b570      	push	{r4, r5, r6, lr}
 80170f6:	4d0d      	ldr	r5, [pc, #52]	; (801712c <__libc_init_array+0x38>)
 80170f8:	4c0d      	ldr	r4, [pc, #52]	; (8017130 <__libc_init_array+0x3c>)
 80170fa:	1b64      	subs	r4, r4, r5
 80170fc:	10a4      	asrs	r4, r4, #2
 80170fe:	2600      	movs	r6, #0
 8017100:	42a6      	cmp	r6, r4
 8017102:	d109      	bne.n	8017118 <__libc_init_array+0x24>
 8017104:	4d0b      	ldr	r5, [pc, #44]	; (8017134 <__libc_init_array+0x40>)
 8017106:	4c0c      	ldr	r4, [pc, #48]	; (8017138 <__libc_init_array+0x44>)
 8017108:	f003 fd5a 	bl	801abc0 <_init>
 801710c:	1b64      	subs	r4, r4, r5
 801710e:	10a4      	asrs	r4, r4, #2
 8017110:	2600      	movs	r6, #0
 8017112:	42a6      	cmp	r6, r4
 8017114:	d105      	bne.n	8017122 <__libc_init_array+0x2e>
 8017116:	bd70      	pop	{r4, r5, r6, pc}
 8017118:	f855 3b04 	ldr.w	r3, [r5], #4
 801711c:	4798      	blx	r3
 801711e:	3601      	adds	r6, #1
 8017120:	e7ee      	b.n	8017100 <__libc_init_array+0xc>
 8017122:	f855 3b04 	ldr.w	r3, [r5], #4
 8017126:	4798      	blx	r3
 8017128:	3601      	adds	r6, #1
 801712a:	e7f2      	b.n	8017112 <__libc_init_array+0x1e>
 801712c:	0801da18 	.word	0x0801da18
 8017130:	0801da18 	.word	0x0801da18
 8017134:	0801da18 	.word	0x0801da18
 8017138:	0801da1c 	.word	0x0801da1c

0801713c <__retarget_lock_init_recursive>:
 801713c:	4770      	bx	lr

0801713e <__retarget_lock_acquire_recursive>:
 801713e:	4770      	bx	lr

08017140 <__retarget_lock_release_recursive>:
 8017140:	4770      	bx	lr

08017142 <memcpy>:
 8017142:	440a      	add	r2, r1
 8017144:	4291      	cmp	r1, r2
 8017146:	f100 33ff 	add.w	r3, r0, #4294967295
 801714a:	d100      	bne.n	801714e <memcpy+0xc>
 801714c:	4770      	bx	lr
 801714e:	b510      	push	{r4, lr}
 8017150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017158:	4291      	cmp	r1, r2
 801715a:	d1f9      	bne.n	8017150 <memcpy+0xe>
 801715c:	bd10      	pop	{r4, pc}
	...

08017160 <nanf>:
 8017160:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017168 <nanf+0x8>
 8017164:	4770      	bx	lr
 8017166:	bf00      	nop
 8017168:	7fc00000 	.word	0x7fc00000

0801716c <quorem>:
 801716c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017170:	6903      	ldr	r3, [r0, #16]
 8017172:	690c      	ldr	r4, [r1, #16]
 8017174:	42a3      	cmp	r3, r4
 8017176:	4607      	mov	r7, r0
 8017178:	db7e      	blt.n	8017278 <quorem+0x10c>
 801717a:	3c01      	subs	r4, #1
 801717c:	f101 0814 	add.w	r8, r1, #20
 8017180:	f100 0514 	add.w	r5, r0, #20
 8017184:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017188:	9301      	str	r3, [sp, #4]
 801718a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801718e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017192:	3301      	adds	r3, #1
 8017194:	429a      	cmp	r2, r3
 8017196:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801719a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801719e:	fbb2 f6f3 	udiv	r6, r2, r3
 80171a2:	d331      	bcc.n	8017208 <quorem+0x9c>
 80171a4:	f04f 0e00 	mov.w	lr, #0
 80171a8:	4640      	mov	r0, r8
 80171aa:	46ac      	mov	ip, r5
 80171ac:	46f2      	mov	sl, lr
 80171ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80171b2:	b293      	uxth	r3, r2
 80171b4:	fb06 e303 	mla	r3, r6, r3, lr
 80171b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80171bc:	0c1a      	lsrs	r2, r3, #16
 80171be:	b29b      	uxth	r3, r3
 80171c0:	ebaa 0303 	sub.w	r3, sl, r3
 80171c4:	f8dc a000 	ldr.w	sl, [ip]
 80171c8:	fa13 f38a 	uxtah	r3, r3, sl
 80171cc:	fb06 220e 	mla	r2, r6, lr, r2
 80171d0:	9300      	str	r3, [sp, #0]
 80171d2:	9b00      	ldr	r3, [sp, #0]
 80171d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80171d8:	b292      	uxth	r2, r2
 80171da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80171de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80171e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80171e6:	4581      	cmp	r9, r0
 80171e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171ec:	f84c 3b04 	str.w	r3, [ip], #4
 80171f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80171f4:	d2db      	bcs.n	80171ae <quorem+0x42>
 80171f6:	f855 300b 	ldr.w	r3, [r5, fp]
 80171fa:	b92b      	cbnz	r3, 8017208 <quorem+0x9c>
 80171fc:	9b01      	ldr	r3, [sp, #4]
 80171fe:	3b04      	subs	r3, #4
 8017200:	429d      	cmp	r5, r3
 8017202:	461a      	mov	r2, r3
 8017204:	d32c      	bcc.n	8017260 <quorem+0xf4>
 8017206:	613c      	str	r4, [r7, #16]
 8017208:	4638      	mov	r0, r7
 801720a:	f001 f9f1 	bl	80185f0 <__mcmp>
 801720e:	2800      	cmp	r0, #0
 8017210:	db22      	blt.n	8017258 <quorem+0xec>
 8017212:	3601      	adds	r6, #1
 8017214:	4629      	mov	r1, r5
 8017216:	2000      	movs	r0, #0
 8017218:	f858 2b04 	ldr.w	r2, [r8], #4
 801721c:	f8d1 c000 	ldr.w	ip, [r1]
 8017220:	b293      	uxth	r3, r2
 8017222:	1ac3      	subs	r3, r0, r3
 8017224:	0c12      	lsrs	r2, r2, #16
 8017226:	fa13 f38c 	uxtah	r3, r3, ip
 801722a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801722e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017232:	b29b      	uxth	r3, r3
 8017234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017238:	45c1      	cmp	r9, r8
 801723a:	f841 3b04 	str.w	r3, [r1], #4
 801723e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017242:	d2e9      	bcs.n	8017218 <quorem+0xac>
 8017244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017248:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801724c:	b922      	cbnz	r2, 8017258 <quorem+0xec>
 801724e:	3b04      	subs	r3, #4
 8017250:	429d      	cmp	r5, r3
 8017252:	461a      	mov	r2, r3
 8017254:	d30a      	bcc.n	801726c <quorem+0x100>
 8017256:	613c      	str	r4, [r7, #16]
 8017258:	4630      	mov	r0, r6
 801725a:	b003      	add	sp, #12
 801725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017260:	6812      	ldr	r2, [r2, #0]
 8017262:	3b04      	subs	r3, #4
 8017264:	2a00      	cmp	r2, #0
 8017266:	d1ce      	bne.n	8017206 <quorem+0x9a>
 8017268:	3c01      	subs	r4, #1
 801726a:	e7c9      	b.n	8017200 <quorem+0x94>
 801726c:	6812      	ldr	r2, [r2, #0]
 801726e:	3b04      	subs	r3, #4
 8017270:	2a00      	cmp	r2, #0
 8017272:	d1f0      	bne.n	8017256 <quorem+0xea>
 8017274:	3c01      	subs	r4, #1
 8017276:	e7eb      	b.n	8017250 <quorem+0xe4>
 8017278:	2000      	movs	r0, #0
 801727a:	e7ee      	b.n	801725a <quorem+0xee>
 801727c:	0000      	movs	r0, r0
	...

08017280 <_dtoa_r>:
 8017280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017284:	ed2d 8b04 	vpush	{d8-d9}
 8017288:	69c5      	ldr	r5, [r0, #28]
 801728a:	b093      	sub	sp, #76	; 0x4c
 801728c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017290:	ec57 6b10 	vmov	r6, r7, d0
 8017294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017298:	9107      	str	r1, [sp, #28]
 801729a:	4604      	mov	r4, r0
 801729c:	920a      	str	r2, [sp, #40]	; 0x28
 801729e:	930d      	str	r3, [sp, #52]	; 0x34
 80172a0:	b975      	cbnz	r5, 80172c0 <_dtoa_r+0x40>
 80172a2:	2010      	movs	r0, #16
 80172a4:	f000 fe2a 	bl	8017efc <malloc>
 80172a8:	4602      	mov	r2, r0
 80172aa:	61e0      	str	r0, [r4, #28]
 80172ac:	b920      	cbnz	r0, 80172b8 <_dtoa_r+0x38>
 80172ae:	4bae      	ldr	r3, [pc, #696]	; (8017568 <_dtoa_r+0x2e8>)
 80172b0:	21ef      	movs	r1, #239	; 0xef
 80172b2:	48ae      	ldr	r0, [pc, #696]	; (801756c <_dtoa_r+0x2ec>)
 80172b4:	f002 fc64 	bl	8019b80 <__assert_func>
 80172b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80172bc:	6005      	str	r5, [r0, #0]
 80172be:	60c5      	str	r5, [r0, #12]
 80172c0:	69e3      	ldr	r3, [r4, #28]
 80172c2:	6819      	ldr	r1, [r3, #0]
 80172c4:	b151      	cbz	r1, 80172dc <_dtoa_r+0x5c>
 80172c6:	685a      	ldr	r2, [r3, #4]
 80172c8:	604a      	str	r2, [r1, #4]
 80172ca:	2301      	movs	r3, #1
 80172cc:	4093      	lsls	r3, r2
 80172ce:	608b      	str	r3, [r1, #8]
 80172d0:	4620      	mov	r0, r4
 80172d2:	f000 ff07 	bl	80180e4 <_Bfree>
 80172d6:	69e3      	ldr	r3, [r4, #28]
 80172d8:	2200      	movs	r2, #0
 80172da:	601a      	str	r2, [r3, #0]
 80172dc:	1e3b      	subs	r3, r7, #0
 80172de:	bfbb      	ittet	lt
 80172e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80172e4:	9303      	strlt	r3, [sp, #12]
 80172e6:	2300      	movge	r3, #0
 80172e8:	2201      	movlt	r2, #1
 80172ea:	bfac      	ite	ge
 80172ec:	f8c8 3000 	strge.w	r3, [r8]
 80172f0:	f8c8 2000 	strlt.w	r2, [r8]
 80172f4:	4b9e      	ldr	r3, [pc, #632]	; (8017570 <_dtoa_r+0x2f0>)
 80172f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80172fa:	ea33 0308 	bics.w	r3, r3, r8
 80172fe:	d11b      	bne.n	8017338 <_dtoa_r+0xb8>
 8017300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017302:	f242 730f 	movw	r3, #9999	; 0x270f
 8017306:	6013      	str	r3, [r2, #0]
 8017308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801730c:	4333      	orrs	r3, r6
 801730e:	f000 8593 	beq.w	8017e38 <_dtoa_r+0xbb8>
 8017312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017314:	b963      	cbnz	r3, 8017330 <_dtoa_r+0xb0>
 8017316:	4b97      	ldr	r3, [pc, #604]	; (8017574 <_dtoa_r+0x2f4>)
 8017318:	e027      	b.n	801736a <_dtoa_r+0xea>
 801731a:	4b97      	ldr	r3, [pc, #604]	; (8017578 <_dtoa_r+0x2f8>)
 801731c:	9300      	str	r3, [sp, #0]
 801731e:	3308      	adds	r3, #8
 8017320:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017322:	6013      	str	r3, [r2, #0]
 8017324:	9800      	ldr	r0, [sp, #0]
 8017326:	b013      	add	sp, #76	; 0x4c
 8017328:	ecbd 8b04 	vpop	{d8-d9}
 801732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017330:	4b90      	ldr	r3, [pc, #576]	; (8017574 <_dtoa_r+0x2f4>)
 8017332:	9300      	str	r3, [sp, #0]
 8017334:	3303      	adds	r3, #3
 8017336:	e7f3      	b.n	8017320 <_dtoa_r+0xa0>
 8017338:	ed9d 7b02 	vldr	d7, [sp, #8]
 801733c:	2200      	movs	r2, #0
 801733e:	ec51 0b17 	vmov	r0, r1, d7
 8017342:	eeb0 8a47 	vmov.f32	s16, s14
 8017346:	eef0 8a67 	vmov.f32	s17, s15
 801734a:	2300      	movs	r3, #0
 801734c:	f7e9 fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 8017350:	4681      	mov	r9, r0
 8017352:	b160      	cbz	r0, 801736e <_dtoa_r+0xee>
 8017354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017356:	2301      	movs	r3, #1
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801735c:	2b00      	cmp	r3, #0
 801735e:	f000 8568 	beq.w	8017e32 <_dtoa_r+0xbb2>
 8017362:	4b86      	ldr	r3, [pc, #536]	; (801757c <_dtoa_r+0x2fc>)
 8017364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017366:	6013      	str	r3, [r2, #0]
 8017368:	3b01      	subs	r3, #1
 801736a:	9300      	str	r3, [sp, #0]
 801736c:	e7da      	b.n	8017324 <_dtoa_r+0xa4>
 801736e:	aa10      	add	r2, sp, #64	; 0x40
 8017370:	a911      	add	r1, sp, #68	; 0x44
 8017372:	4620      	mov	r0, r4
 8017374:	eeb0 0a48 	vmov.f32	s0, s16
 8017378:	eef0 0a68 	vmov.f32	s1, s17
 801737c:	f001 fa4e 	bl	801881c <__d2b>
 8017380:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017384:	4682      	mov	sl, r0
 8017386:	2d00      	cmp	r5, #0
 8017388:	d07f      	beq.n	801748a <_dtoa_r+0x20a>
 801738a:	ee18 3a90 	vmov	r3, s17
 801738e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017392:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017396:	ec51 0b18 	vmov	r0, r1, d8
 801739a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801739e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80173a6:	4619      	mov	r1, r3
 80173a8:	2200      	movs	r2, #0
 80173aa:	4b75      	ldr	r3, [pc, #468]	; (8017580 <_dtoa_r+0x300>)
 80173ac:	f7e8 ff94 	bl	80002d8 <__aeabi_dsub>
 80173b0:	a367      	add	r3, pc, #412	; (adr r3, 8017550 <_dtoa_r+0x2d0>)
 80173b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b6:	f7e9 f947 	bl	8000648 <__aeabi_dmul>
 80173ba:	a367      	add	r3, pc, #412	; (adr r3, 8017558 <_dtoa_r+0x2d8>)
 80173bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c0:	f7e8 ff8c 	bl	80002dc <__adddf3>
 80173c4:	4606      	mov	r6, r0
 80173c6:	4628      	mov	r0, r5
 80173c8:	460f      	mov	r7, r1
 80173ca:	f7e9 f8d3 	bl	8000574 <__aeabi_i2d>
 80173ce:	a364      	add	r3, pc, #400	; (adr r3, 8017560 <_dtoa_r+0x2e0>)
 80173d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d4:	f7e9 f938 	bl	8000648 <__aeabi_dmul>
 80173d8:	4602      	mov	r2, r0
 80173da:	460b      	mov	r3, r1
 80173dc:	4630      	mov	r0, r6
 80173de:	4639      	mov	r1, r7
 80173e0:	f7e8 ff7c 	bl	80002dc <__adddf3>
 80173e4:	4606      	mov	r6, r0
 80173e6:	460f      	mov	r7, r1
 80173e8:	f7e9 fbde 	bl	8000ba8 <__aeabi_d2iz>
 80173ec:	2200      	movs	r2, #0
 80173ee:	4683      	mov	fp, r0
 80173f0:	2300      	movs	r3, #0
 80173f2:	4630      	mov	r0, r6
 80173f4:	4639      	mov	r1, r7
 80173f6:	f7e9 fb99 	bl	8000b2c <__aeabi_dcmplt>
 80173fa:	b148      	cbz	r0, 8017410 <_dtoa_r+0x190>
 80173fc:	4658      	mov	r0, fp
 80173fe:	f7e9 f8b9 	bl	8000574 <__aeabi_i2d>
 8017402:	4632      	mov	r2, r6
 8017404:	463b      	mov	r3, r7
 8017406:	f7e9 fb87 	bl	8000b18 <__aeabi_dcmpeq>
 801740a:	b908      	cbnz	r0, 8017410 <_dtoa_r+0x190>
 801740c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017410:	f1bb 0f16 	cmp.w	fp, #22
 8017414:	d857      	bhi.n	80174c6 <_dtoa_r+0x246>
 8017416:	4b5b      	ldr	r3, [pc, #364]	; (8017584 <_dtoa_r+0x304>)
 8017418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017420:	ec51 0b18 	vmov	r0, r1, d8
 8017424:	f7e9 fb82 	bl	8000b2c <__aeabi_dcmplt>
 8017428:	2800      	cmp	r0, #0
 801742a:	d04e      	beq.n	80174ca <_dtoa_r+0x24a>
 801742c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017430:	2300      	movs	r3, #0
 8017432:	930c      	str	r3, [sp, #48]	; 0x30
 8017434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017436:	1b5b      	subs	r3, r3, r5
 8017438:	1e5a      	subs	r2, r3, #1
 801743a:	bf45      	ittet	mi
 801743c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017440:	9305      	strmi	r3, [sp, #20]
 8017442:	2300      	movpl	r3, #0
 8017444:	2300      	movmi	r3, #0
 8017446:	9206      	str	r2, [sp, #24]
 8017448:	bf54      	ite	pl
 801744a:	9305      	strpl	r3, [sp, #20]
 801744c:	9306      	strmi	r3, [sp, #24]
 801744e:	f1bb 0f00 	cmp.w	fp, #0
 8017452:	db3c      	blt.n	80174ce <_dtoa_r+0x24e>
 8017454:	9b06      	ldr	r3, [sp, #24]
 8017456:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801745a:	445b      	add	r3, fp
 801745c:	9306      	str	r3, [sp, #24]
 801745e:	2300      	movs	r3, #0
 8017460:	9308      	str	r3, [sp, #32]
 8017462:	9b07      	ldr	r3, [sp, #28]
 8017464:	2b09      	cmp	r3, #9
 8017466:	d868      	bhi.n	801753a <_dtoa_r+0x2ba>
 8017468:	2b05      	cmp	r3, #5
 801746a:	bfc4      	itt	gt
 801746c:	3b04      	subgt	r3, #4
 801746e:	9307      	strgt	r3, [sp, #28]
 8017470:	9b07      	ldr	r3, [sp, #28]
 8017472:	f1a3 0302 	sub.w	r3, r3, #2
 8017476:	bfcc      	ite	gt
 8017478:	2500      	movgt	r5, #0
 801747a:	2501      	movle	r5, #1
 801747c:	2b03      	cmp	r3, #3
 801747e:	f200 8085 	bhi.w	801758c <_dtoa_r+0x30c>
 8017482:	e8df f003 	tbb	[pc, r3]
 8017486:	3b2e      	.short	0x3b2e
 8017488:	5839      	.short	0x5839
 801748a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801748e:	441d      	add	r5, r3
 8017490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017494:	2b20      	cmp	r3, #32
 8017496:	bfc1      	itttt	gt
 8017498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801749c:	fa08 f803 	lslgt.w	r8, r8, r3
 80174a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80174a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80174a8:	bfd6      	itet	le
 80174aa:	f1c3 0320 	rsble	r3, r3, #32
 80174ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80174b2:	fa06 f003 	lslle.w	r0, r6, r3
 80174b6:	f7e9 f84d 	bl	8000554 <__aeabi_ui2d>
 80174ba:	2201      	movs	r2, #1
 80174bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80174c0:	3d01      	subs	r5, #1
 80174c2:	920e      	str	r2, [sp, #56]	; 0x38
 80174c4:	e76f      	b.n	80173a6 <_dtoa_r+0x126>
 80174c6:	2301      	movs	r3, #1
 80174c8:	e7b3      	b.n	8017432 <_dtoa_r+0x1b2>
 80174ca:	900c      	str	r0, [sp, #48]	; 0x30
 80174cc:	e7b2      	b.n	8017434 <_dtoa_r+0x1b4>
 80174ce:	9b05      	ldr	r3, [sp, #20]
 80174d0:	eba3 030b 	sub.w	r3, r3, fp
 80174d4:	9305      	str	r3, [sp, #20]
 80174d6:	f1cb 0300 	rsb	r3, fp, #0
 80174da:	9308      	str	r3, [sp, #32]
 80174dc:	2300      	movs	r3, #0
 80174de:	930b      	str	r3, [sp, #44]	; 0x2c
 80174e0:	e7bf      	b.n	8017462 <_dtoa_r+0x1e2>
 80174e2:	2300      	movs	r3, #0
 80174e4:	9309      	str	r3, [sp, #36]	; 0x24
 80174e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	dc52      	bgt.n	8017592 <_dtoa_r+0x312>
 80174ec:	2301      	movs	r3, #1
 80174ee:	9301      	str	r3, [sp, #4]
 80174f0:	9304      	str	r3, [sp, #16]
 80174f2:	461a      	mov	r2, r3
 80174f4:	920a      	str	r2, [sp, #40]	; 0x28
 80174f6:	e00b      	b.n	8017510 <_dtoa_r+0x290>
 80174f8:	2301      	movs	r3, #1
 80174fa:	e7f3      	b.n	80174e4 <_dtoa_r+0x264>
 80174fc:	2300      	movs	r3, #0
 80174fe:	9309      	str	r3, [sp, #36]	; 0x24
 8017500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017502:	445b      	add	r3, fp
 8017504:	9301      	str	r3, [sp, #4]
 8017506:	3301      	adds	r3, #1
 8017508:	2b01      	cmp	r3, #1
 801750a:	9304      	str	r3, [sp, #16]
 801750c:	bfb8      	it	lt
 801750e:	2301      	movlt	r3, #1
 8017510:	69e0      	ldr	r0, [r4, #28]
 8017512:	2100      	movs	r1, #0
 8017514:	2204      	movs	r2, #4
 8017516:	f102 0614 	add.w	r6, r2, #20
 801751a:	429e      	cmp	r6, r3
 801751c:	d93d      	bls.n	801759a <_dtoa_r+0x31a>
 801751e:	6041      	str	r1, [r0, #4]
 8017520:	4620      	mov	r0, r4
 8017522:	f000 fd9f 	bl	8018064 <_Balloc>
 8017526:	9000      	str	r0, [sp, #0]
 8017528:	2800      	cmp	r0, #0
 801752a:	d139      	bne.n	80175a0 <_dtoa_r+0x320>
 801752c:	4b16      	ldr	r3, [pc, #88]	; (8017588 <_dtoa_r+0x308>)
 801752e:	4602      	mov	r2, r0
 8017530:	f240 11af 	movw	r1, #431	; 0x1af
 8017534:	e6bd      	b.n	80172b2 <_dtoa_r+0x32>
 8017536:	2301      	movs	r3, #1
 8017538:	e7e1      	b.n	80174fe <_dtoa_r+0x27e>
 801753a:	2501      	movs	r5, #1
 801753c:	2300      	movs	r3, #0
 801753e:	9307      	str	r3, [sp, #28]
 8017540:	9509      	str	r5, [sp, #36]	; 0x24
 8017542:	f04f 33ff 	mov.w	r3, #4294967295
 8017546:	9301      	str	r3, [sp, #4]
 8017548:	9304      	str	r3, [sp, #16]
 801754a:	2200      	movs	r2, #0
 801754c:	2312      	movs	r3, #18
 801754e:	e7d1      	b.n	80174f4 <_dtoa_r+0x274>
 8017550:	636f4361 	.word	0x636f4361
 8017554:	3fd287a7 	.word	0x3fd287a7
 8017558:	8b60c8b3 	.word	0x8b60c8b3
 801755c:	3fc68a28 	.word	0x3fc68a28
 8017560:	509f79fb 	.word	0x509f79fb
 8017564:	3fd34413 	.word	0x3fd34413
 8017568:	0801d61e 	.word	0x0801d61e
 801756c:	0801d635 	.word	0x0801d635
 8017570:	7ff00000 	.word	0x7ff00000
 8017574:	0801d61a 	.word	0x0801d61a
 8017578:	0801d611 	.word	0x0801d611
 801757c:	0801d5e9 	.word	0x0801d5e9
 8017580:	3ff80000 	.word	0x3ff80000
 8017584:	0801d720 	.word	0x0801d720
 8017588:	0801d68d 	.word	0x0801d68d
 801758c:	2301      	movs	r3, #1
 801758e:	9309      	str	r3, [sp, #36]	; 0x24
 8017590:	e7d7      	b.n	8017542 <_dtoa_r+0x2c2>
 8017592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017594:	9301      	str	r3, [sp, #4]
 8017596:	9304      	str	r3, [sp, #16]
 8017598:	e7ba      	b.n	8017510 <_dtoa_r+0x290>
 801759a:	3101      	adds	r1, #1
 801759c:	0052      	lsls	r2, r2, #1
 801759e:	e7ba      	b.n	8017516 <_dtoa_r+0x296>
 80175a0:	69e3      	ldr	r3, [r4, #28]
 80175a2:	9a00      	ldr	r2, [sp, #0]
 80175a4:	601a      	str	r2, [r3, #0]
 80175a6:	9b04      	ldr	r3, [sp, #16]
 80175a8:	2b0e      	cmp	r3, #14
 80175aa:	f200 80a8 	bhi.w	80176fe <_dtoa_r+0x47e>
 80175ae:	2d00      	cmp	r5, #0
 80175b0:	f000 80a5 	beq.w	80176fe <_dtoa_r+0x47e>
 80175b4:	f1bb 0f00 	cmp.w	fp, #0
 80175b8:	dd38      	ble.n	801762c <_dtoa_r+0x3ac>
 80175ba:	4bc0      	ldr	r3, [pc, #768]	; (80178bc <_dtoa_r+0x63c>)
 80175bc:	f00b 020f 	and.w	r2, fp, #15
 80175c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80175c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80175cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80175d0:	d019      	beq.n	8017606 <_dtoa_r+0x386>
 80175d2:	4bbb      	ldr	r3, [pc, #748]	; (80178c0 <_dtoa_r+0x640>)
 80175d4:	ec51 0b18 	vmov	r0, r1, d8
 80175d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80175dc:	f7e9 f95e 	bl	800089c <__aeabi_ddiv>
 80175e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175e4:	f008 080f 	and.w	r8, r8, #15
 80175e8:	2503      	movs	r5, #3
 80175ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80178c0 <_dtoa_r+0x640>
 80175ee:	f1b8 0f00 	cmp.w	r8, #0
 80175f2:	d10a      	bne.n	801760a <_dtoa_r+0x38a>
 80175f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175f8:	4632      	mov	r2, r6
 80175fa:	463b      	mov	r3, r7
 80175fc:	f7e9 f94e 	bl	800089c <__aeabi_ddiv>
 8017600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017604:	e02b      	b.n	801765e <_dtoa_r+0x3de>
 8017606:	2502      	movs	r5, #2
 8017608:	e7ef      	b.n	80175ea <_dtoa_r+0x36a>
 801760a:	f018 0f01 	tst.w	r8, #1
 801760e:	d008      	beq.n	8017622 <_dtoa_r+0x3a2>
 8017610:	4630      	mov	r0, r6
 8017612:	4639      	mov	r1, r7
 8017614:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017618:	f7e9 f816 	bl	8000648 <__aeabi_dmul>
 801761c:	3501      	adds	r5, #1
 801761e:	4606      	mov	r6, r0
 8017620:	460f      	mov	r7, r1
 8017622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017626:	f109 0908 	add.w	r9, r9, #8
 801762a:	e7e0      	b.n	80175ee <_dtoa_r+0x36e>
 801762c:	f000 809f 	beq.w	801776e <_dtoa_r+0x4ee>
 8017630:	f1cb 0600 	rsb	r6, fp, #0
 8017634:	4ba1      	ldr	r3, [pc, #644]	; (80178bc <_dtoa_r+0x63c>)
 8017636:	4fa2      	ldr	r7, [pc, #648]	; (80178c0 <_dtoa_r+0x640>)
 8017638:	f006 020f 	and.w	r2, r6, #15
 801763c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017644:	ec51 0b18 	vmov	r0, r1, d8
 8017648:	f7e8 fffe 	bl	8000648 <__aeabi_dmul>
 801764c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017650:	1136      	asrs	r6, r6, #4
 8017652:	2300      	movs	r3, #0
 8017654:	2502      	movs	r5, #2
 8017656:	2e00      	cmp	r6, #0
 8017658:	d17e      	bne.n	8017758 <_dtoa_r+0x4d8>
 801765a:	2b00      	cmp	r3, #0
 801765c:	d1d0      	bne.n	8017600 <_dtoa_r+0x380>
 801765e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017660:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017664:	2b00      	cmp	r3, #0
 8017666:	f000 8084 	beq.w	8017772 <_dtoa_r+0x4f2>
 801766a:	4b96      	ldr	r3, [pc, #600]	; (80178c4 <_dtoa_r+0x644>)
 801766c:	2200      	movs	r2, #0
 801766e:	4640      	mov	r0, r8
 8017670:	4649      	mov	r1, r9
 8017672:	f7e9 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8017676:	2800      	cmp	r0, #0
 8017678:	d07b      	beq.n	8017772 <_dtoa_r+0x4f2>
 801767a:	9b04      	ldr	r3, [sp, #16]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d078      	beq.n	8017772 <_dtoa_r+0x4f2>
 8017680:	9b01      	ldr	r3, [sp, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	dd39      	ble.n	80176fa <_dtoa_r+0x47a>
 8017686:	4b90      	ldr	r3, [pc, #576]	; (80178c8 <_dtoa_r+0x648>)
 8017688:	2200      	movs	r2, #0
 801768a:	4640      	mov	r0, r8
 801768c:	4649      	mov	r1, r9
 801768e:	f7e8 ffdb 	bl	8000648 <__aeabi_dmul>
 8017692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017696:	9e01      	ldr	r6, [sp, #4]
 8017698:	f10b 37ff 	add.w	r7, fp, #4294967295
 801769c:	3501      	adds	r5, #1
 801769e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80176a2:	4628      	mov	r0, r5
 80176a4:	f7e8 ff66 	bl	8000574 <__aeabi_i2d>
 80176a8:	4642      	mov	r2, r8
 80176aa:	464b      	mov	r3, r9
 80176ac:	f7e8 ffcc 	bl	8000648 <__aeabi_dmul>
 80176b0:	4b86      	ldr	r3, [pc, #536]	; (80178cc <_dtoa_r+0x64c>)
 80176b2:	2200      	movs	r2, #0
 80176b4:	f7e8 fe12 	bl	80002dc <__adddf3>
 80176b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80176bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176c0:	9303      	str	r3, [sp, #12]
 80176c2:	2e00      	cmp	r6, #0
 80176c4:	d158      	bne.n	8017778 <_dtoa_r+0x4f8>
 80176c6:	4b82      	ldr	r3, [pc, #520]	; (80178d0 <_dtoa_r+0x650>)
 80176c8:	2200      	movs	r2, #0
 80176ca:	4640      	mov	r0, r8
 80176cc:	4649      	mov	r1, r9
 80176ce:	f7e8 fe03 	bl	80002d8 <__aeabi_dsub>
 80176d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80176d6:	4680      	mov	r8, r0
 80176d8:	4689      	mov	r9, r1
 80176da:	f7e9 fa45 	bl	8000b68 <__aeabi_dcmpgt>
 80176de:	2800      	cmp	r0, #0
 80176e0:	f040 8296 	bne.w	8017c10 <_dtoa_r+0x990>
 80176e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80176e8:	4640      	mov	r0, r8
 80176ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176ee:	4649      	mov	r1, r9
 80176f0:	f7e9 fa1c 	bl	8000b2c <__aeabi_dcmplt>
 80176f4:	2800      	cmp	r0, #0
 80176f6:	f040 8289 	bne.w	8017c0c <_dtoa_r+0x98c>
 80176fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80176fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017700:	2b00      	cmp	r3, #0
 8017702:	f2c0 814e 	blt.w	80179a2 <_dtoa_r+0x722>
 8017706:	f1bb 0f0e 	cmp.w	fp, #14
 801770a:	f300 814a 	bgt.w	80179a2 <_dtoa_r+0x722>
 801770e:	4b6b      	ldr	r3, [pc, #428]	; (80178bc <_dtoa_r+0x63c>)
 8017710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801771a:	2b00      	cmp	r3, #0
 801771c:	f280 80dc 	bge.w	80178d8 <_dtoa_r+0x658>
 8017720:	9b04      	ldr	r3, [sp, #16]
 8017722:	2b00      	cmp	r3, #0
 8017724:	f300 80d8 	bgt.w	80178d8 <_dtoa_r+0x658>
 8017728:	f040 826f 	bne.w	8017c0a <_dtoa_r+0x98a>
 801772c:	4b68      	ldr	r3, [pc, #416]	; (80178d0 <_dtoa_r+0x650>)
 801772e:	2200      	movs	r2, #0
 8017730:	4640      	mov	r0, r8
 8017732:	4649      	mov	r1, r9
 8017734:	f7e8 ff88 	bl	8000648 <__aeabi_dmul>
 8017738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801773c:	f7e9 fa0a 	bl	8000b54 <__aeabi_dcmpge>
 8017740:	9e04      	ldr	r6, [sp, #16]
 8017742:	4637      	mov	r7, r6
 8017744:	2800      	cmp	r0, #0
 8017746:	f040 8245 	bne.w	8017bd4 <_dtoa_r+0x954>
 801774a:	9d00      	ldr	r5, [sp, #0]
 801774c:	2331      	movs	r3, #49	; 0x31
 801774e:	f805 3b01 	strb.w	r3, [r5], #1
 8017752:	f10b 0b01 	add.w	fp, fp, #1
 8017756:	e241      	b.n	8017bdc <_dtoa_r+0x95c>
 8017758:	07f2      	lsls	r2, r6, #31
 801775a:	d505      	bpl.n	8017768 <_dtoa_r+0x4e8>
 801775c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017760:	f7e8 ff72 	bl	8000648 <__aeabi_dmul>
 8017764:	3501      	adds	r5, #1
 8017766:	2301      	movs	r3, #1
 8017768:	1076      	asrs	r6, r6, #1
 801776a:	3708      	adds	r7, #8
 801776c:	e773      	b.n	8017656 <_dtoa_r+0x3d6>
 801776e:	2502      	movs	r5, #2
 8017770:	e775      	b.n	801765e <_dtoa_r+0x3de>
 8017772:	9e04      	ldr	r6, [sp, #16]
 8017774:	465f      	mov	r7, fp
 8017776:	e792      	b.n	801769e <_dtoa_r+0x41e>
 8017778:	9900      	ldr	r1, [sp, #0]
 801777a:	4b50      	ldr	r3, [pc, #320]	; (80178bc <_dtoa_r+0x63c>)
 801777c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017780:	4431      	add	r1, r6
 8017782:	9102      	str	r1, [sp, #8]
 8017784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017786:	eeb0 9a47 	vmov.f32	s18, s14
 801778a:	eef0 9a67 	vmov.f32	s19, s15
 801778e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017796:	2900      	cmp	r1, #0
 8017798:	d044      	beq.n	8017824 <_dtoa_r+0x5a4>
 801779a:	494e      	ldr	r1, [pc, #312]	; (80178d4 <_dtoa_r+0x654>)
 801779c:	2000      	movs	r0, #0
 801779e:	f7e9 f87d 	bl	800089c <__aeabi_ddiv>
 80177a2:	ec53 2b19 	vmov	r2, r3, d9
 80177a6:	f7e8 fd97 	bl	80002d8 <__aeabi_dsub>
 80177aa:	9d00      	ldr	r5, [sp, #0]
 80177ac:	ec41 0b19 	vmov	d9, r0, r1
 80177b0:	4649      	mov	r1, r9
 80177b2:	4640      	mov	r0, r8
 80177b4:	f7e9 f9f8 	bl	8000ba8 <__aeabi_d2iz>
 80177b8:	4606      	mov	r6, r0
 80177ba:	f7e8 fedb 	bl	8000574 <__aeabi_i2d>
 80177be:	4602      	mov	r2, r0
 80177c0:	460b      	mov	r3, r1
 80177c2:	4640      	mov	r0, r8
 80177c4:	4649      	mov	r1, r9
 80177c6:	f7e8 fd87 	bl	80002d8 <__aeabi_dsub>
 80177ca:	3630      	adds	r6, #48	; 0x30
 80177cc:	f805 6b01 	strb.w	r6, [r5], #1
 80177d0:	ec53 2b19 	vmov	r2, r3, d9
 80177d4:	4680      	mov	r8, r0
 80177d6:	4689      	mov	r9, r1
 80177d8:	f7e9 f9a8 	bl	8000b2c <__aeabi_dcmplt>
 80177dc:	2800      	cmp	r0, #0
 80177de:	d164      	bne.n	80178aa <_dtoa_r+0x62a>
 80177e0:	4642      	mov	r2, r8
 80177e2:	464b      	mov	r3, r9
 80177e4:	4937      	ldr	r1, [pc, #220]	; (80178c4 <_dtoa_r+0x644>)
 80177e6:	2000      	movs	r0, #0
 80177e8:	f7e8 fd76 	bl	80002d8 <__aeabi_dsub>
 80177ec:	ec53 2b19 	vmov	r2, r3, d9
 80177f0:	f7e9 f99c 	bl	8000b2c <__aeabi_dcmplt>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	f040 80b6 	bne.w	8017966 <_dtoa_r+0x6e6>
 80177fa:	9b02      	ldr	r3, [sp, #8]
 80177fc:	429d      	cmp	r5, r3
 80177fe:	f43f af7c 	beq.w	80176fa <_dtoa_r+0x47a>
 8017802:	4b31      	ldr	r3, [pc, #196]	; (80178c8 <_dtoa_r+0x648>)
 8017804:	ec51 0b19 	vmov	r0, r1, d9
 8017808:	2200      	movs	r2, #0
 801780a:	f7e8 ff1d 	bl	8000648 <__aeabi_dmul>
 801780e:	4b2e      	ldr	r3, [pc, #184]	; (80178c8 <_dtoa_r+0x648>)
 8017810:	ec41 0b19 	vmov	d9, r0, r1
 8017814:	2200      	movs	r2, #0
 8017816:	4640      	mov	r0, r8
 8017818:	4649      	mov	r1, r9
 801781a:	f7e8 ff15 	bl	8000648 <__aeabi_dmul>
 801781e:	4680      	mov	r8, r0
 8017820:	4689      	mov	r9, r1
 8017822:	e7c5      	b.n	80177b0 <_dtoa_r+0x530>
 8017824:	ec51 0b17 	vmov	r0, r1, d7
 8017828:	f7e8 ff0e 	bl	8000648 <__aeabi_dmul>
 801782c:	9b02      	ldr	r3, [sp, #8]
 801782e:	9d00      	ldr	r5, [sp, #0]
 8017830:	930f      	str	r3, [sp, #60]	; 0x3c
 8017832:	ec41 0b19 	vmov	d9, r0, r1
 8017836:	4649      	mov	r1, r9
 8017838:	4640      	mov	r0, r8
 801783a:	f7e9 f9b5 	bl	8000ba8 <__aeabi_d2iz>
 801783e:	4606      	mov	r6, r0
 8017840:	f7e8 fe98 	bl	8000574 <__aeabi_i2d>
 8017844:	3630      	adds	r6, #48	; 0x30
 8017846:	4602      	mov	r2, r0
 8017848:	460b      	mov	r3, r1
 801784a:	4640      	mov	r0, r8
 801784c:	4649      	mov	r1, r9
 801784e:	f7e8 fd43 	bl	80002d8 <__aeabi_dsub>
 8017852:	f805 6b01 	strb.w	r6, [r5], #1
 8017856:	9b02      	ldr	r3, [sp, #8]
 8017858:	429d      	cmp	r5, r3
 801785a:	4680      	mov	r8, r0
 801785c:	4689      	mov	r9, r1
 801785e:	f04f 0200 	mov.w	r2, #0
 8017862:	d124      	bne.n	80178ae <_dtoa_r+0x62e>
 8017864:	4b1b      	ldr	r3, [pc, #108]	; (80178d4 <_dtoa_r+0x654>)
 8017866:	ec51 0b19 	vmov	r0, r1, d9
 801786a:	f7e8 fd37 	bl	80002dc <__adddf3>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	4640      	mov	r0, r8
 8017874:	4649      	mov	r1, r9
 8017876:	f7e9 f977 	bl	8000b68 <__aeabi_dcmpgt>
 801787a:	2800      	cmp	r0, #0
 801787c:	d173      	bne.n	8017966 <_dtoa_r+0x6e6>
 801787e:	ec53 2b19 	vmov	r2, r3, d9
 8017882:	4914      	ldr	r1, [pc, #80]	; (80178d4 <_dtoa_r+0x654>)
 8017884:	2000      	movs	r0, #0
 8017886:	f7e8 fd27 	bl	80002d8 <__aeabi_dsub>
 801788a:	4602      	mov	r2, r0
 801788c:	460b      	mov	r3, r1
 801788e:	4640      	mov	r0, r8
 8017890:	4649      	mov	r1, r9
 8017892:	f7e9 f94b 	bl	8000b2c <__aeabi_dcmplt>
 8017896:	2800      	cmp	r0, #0
 8017898:	f43f af2f 	beq.w	80176fa <_dtoa_r+0x47a>
 801789c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801789e:	1e6b      	subs	r3, r5, #1
 80178a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80178a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178a6:	2b30      	cmp	r3, #48	; 0x30
 80178a8:	d0f8      	beq.n	801789c <_dtoa_r+0x61c>
 80178aa:	46bb      	mov	fp, r7
 80178ac:	e04a      	b.n	8017944 <_dtoa_r+0x6c4>
 80178ae:	4b06      	ldr	r3, [pc, #24]	; (80178c8 <_dtoa_r+0x648>)
 80178b0:	f7e8 feca 	bl	8000648 <__aeabi_dmul>
 80178b4:	4680      	mov	r8, r0
 80178b6:	4689      	mov	r9, r1
 80178b8:	e7bd      	b.n	8017836 <_dtoa_r+0x5b6>
 80178ba:	bf00      	nop
 80178bc:	0801d720 	.word	0x0801d720
 80178c0:	0801d6f8 	.word	0x0801d6f8
 80178c4:	3ff00000 	.word	0x3ff00000
 80178c8:	40240000 	.word	0x40240000
 80178cc:	401c0000 	.word	0x401c0000
 80178d0:	40140000 	.word	0x40140000
 80178d4:	3fe00000 	.word	0x3fe00000
 80178d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80178dc:	9d00      	ldr	r5, [sp, #0]
 80178de:	4642      	mov	r2, r8
 80178e0:	464b      	mov	r3, r9
 80178e2:	4630      	mov	r0, r6
 80178e4:	4639      	mov	r1, r7
 80178e6:	f7e8 ffd9 	bl	800089c <__aeabi_ddiv>
 80178ea:	f7e9 f95d 	bl	8000ba8 <__aeabi_d2iz>
 80178ee:	9001      	str	r0, [sp, #4]
 80178f0:	f7e8 fe40 	bl	8000574 <__aeabi_i2d>
 80178f4:	4642      	mov	r2, r8
 80178f6:	464b      	mov	r3, r9
 80178f8:	f7e8 fea6 	bl	8000648 <__aeabi_dmul>
 80178fc:	4602      	mov	r2, r0
 80178fe:	460b      	mov	r3, r1
 8017900:	4630      	mov	r0, r6
 8017902:	4639      	mov	r1, r7
 8017904:	f7e8 fce8 	bl	80002d8 <__aeabi_dsub>
 8017908:	9e01      	ldr	r6, [sp, #4]
 801790a:	9f04      	ldr	r7, [sp, #16]
 801790c:	3630      	adds	r6, #48	; 0x30
 801790e:	f805 6b01 	strb.w	r6, [r5], #1
 8017912:	9e00      	ldr	r6, [sp, #0]
 8017914:	1bae      	subs	r6, r5, r6
 8017916:	42b7      	cmp	r7, r6
 8017918:	4602      	mov	r2, r0
 801791a:	460b      	mov	r3, r1
 801791c:	d134      	bne.n	8017988 <_dtoa_r+0x708>
 801791e:	f7e8 fcdd 	bl	80002dc <__adddf3>
 8017922:	4642      	mov	r2, r8
 8017924:	464b      	mov	r3, r9
 8017926:	4606      	mov	r6, r0
 8017928:	460f      	mov	r7, r1
 801792a:	f7e9 f91d 	bl	8000b68 <__aeabi_dcmpgt>
 801792e:	b9c8      	cbnz	r0, 8017964 <_dtoa_r+0x6e4>
 8017930:	4642      	mov	r2, r8
 8017932:	464b      	mov	r3, r9
 8017934:	4630      	mov	r0, r6
 8017936:	4639      	mov	r1, r7
 8017938:	f7e9 f8ee 	bl	8000b18 <__aeabi_dcmpeq>
 801793c:	b110      	cbz	r0, 8017944 <_dtoa_r+0x6c4>
 801793e:	9b01      	ldr	r3, [sp, #4]
 8017940:	07db      	lsls	r3, r3, #31
 8017942:	d40f      	bmi.n	8017964 <_dtoa_r+0x6e4>
 8017944:	4651      	mov	r1, sl
 8017946:	4620      	mov	r0, r4
 8017948:	f000 fbcc 	bl	80180e4 <_Bfree>
 801794c:	2300      	movs	r3, #0
 801794e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017950:	702b      	strb	r3, [r5, #0]
 8017952:	f10b 0301 	add.w	r3, fp, #1
 8017956:	6013      	str	r3, [r2, #0]
 8017958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801795a:	2b00      	cmp	r3, #0
 801795c:	f43f ace2 	beq.w	8017324 <_dtoa_r+0xa4>
 8017960:	601d      	str	r5, [r3, #0]
 8017962:	e4df      	b.n	8017324 <_dtoa_r+0xa4>
 8017964:	465f      	mov	r7, fp
 8017966:	462b      	mov	r3, r5
 8017968:	461d      	mov	r5, r3
 801796a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801796e:	2a39      	cmp	r2, #57	; 0x39
 8017970:	d106      	bne.n	8017980 <_dtoa_r+0x700>
 8017972:	9a00      	ldr	r2, [sp, #0]
 8017974:	429a      	cmp	r2, r3
 8017976:	d1f7      	bne.n	8017968 <_dtoa_r+0x6e8>
 8017978:	9900      	ldr	r1, [sp, #0]
 801797a:	2230      	movs	r2, #48	; 0x30
 801797c:	3701      	adds	r7, #1
 801797e:	700a      	strb	r2, [r1, #0]
 8017980:	781a      	ldrb	r2, [r3, #0]
 8017982:	3201      	adds	r2, #1
 8017984:	701a      	strb	r2, [r3, #0]
 8017986:	e790      	b.n	80178aa <_dtoa_r+0x62a>
 8017988:	4ba3      	ldr	r3, [pc, #652]	; (8017c18 <_dtoa_r+0x998>)
 801798a:	2200      	movs	r2, #0
 801798c:	f7e8 fe5c 	bl	8000648 <__aeabi_dmul>
 8017990:	2200      	movs	r2, #0
 8017992:	2300      	movs	r3, #0
 8017994:	4606      	mov	r6, r0
 8017996:	460f      	mov	r7, r1
 8017998:	f7e9 f8be 	bl	8000b18 <__aeabi_dcmpeq>
 801799c:	2800      	cmp	r0, #0
 801799e:	d09e      	beq.n	80178de <_dtoa_r+0x65e>
 80179a0:	e7d0      	b.n	8017944 <_dtoa_r+0x6c4>
 80179a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179a4:	2a00      	cmp	r2, #0
 80179a6:	f000 80ca 	beq.w	8017b3e <_dtoa_r+0x8be>
 80179aa:	9a07      	ldr	r2, [sp, #28]
 80179ac:	2a01      	cmp	r2, #1
 80179ae:	f300 80ad 	bgt.w	8017b0c <_dtoa_r+0x88c>
 80179b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179b4:	2a00      	cmp	r2, #0
 80179b6:	f000 80a5 	beq.w	8017b04 <_dtoa_r+0x884>
 80179ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80179be:	9e08      	ldr	r6, [sp, #32]
 80179c0:	9d05      	ldr	r5, [sp, #20]
 80179c2:	9a05      	ldr	r2, [sp, #20]
 80179c4:	441a      	add	r2, r3
 80179c6:	9205      	str	r2, [sp, #20]
 80179c8:	9a06      	ldr	r2, [sp, #24]
 80179ca:	2101      	movs	r1, #1
 80179cc:	441a      	add	r2, r3
 80179ce:	4620      	mov	r0, r4
 80179d0:	9206      	str	r2, [sp, #24]
 80179d2:	f000 fc87 	bl	80182e4 <__i2b>
 80179d6:	4607      	mov	r7, r0
 80179d8:	b165      	cbz	r5, 80179f4 <_dtoa_r+0x774>
 80179da:	9b06      	ldr	r3, [sp, #24]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	dd09      	ble.n	80179f4 <_dtoa_r+0x774>
 80179e0:	42ab      	cmp	r3, r5
 80179e2:	9a05      	ldr	r2, [sp, #20]
 80179e4:	bfa8      	it	ge
 80179e6:	462b      	movge	r3, r5
 80179e8:	1ad2      	subs	r2, r2, r3
 80179ea:	9205      	str	r2, [sp, #20]
 80179ec:	9a06      	ldr	r2, [sp, #24]
 80179ee:	1aed      	subs	r5, r5, r3
 80179f0:	1ad3      	subs	r3, r2, r3
 80179f2:	9306      	str	r3, [sp, #24]
 80179f4:	9b08      	ldr	r3, [sp, #32]
 80179f6:	b1f3      	cbz	r3, 8017a36 <_dtoa_r+0x7b6>
 80179f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	f000 80a3 	beq.w	8017b46 <_dtoa_r+0x8c6>
 8017a00:	2e00      	cmp	r6, #0
 8017a02:	dd10      	ble.n	8017a26 <_dtoa_r+0x7a6>
 8017a04:	4639      	mov	r1, r7
 8017a06:	4632      	mov	r2, r6
 8017a08:	4620      	mov	r0, r4
 8017a0a:	f000 fd2b 	bl	8018464 <__pow5mult>
 8017a0e:	4652      	mov	r2, sl
 8017a10:	4601      	mov	r1, r0
 8017a12:	4607      	mov	r7, r0
 8017a14:	4620      	mov	r0, r4
 8017a16:	f000 fc7b 	bl	8018310 <__multiply>
 8017a1a:	4651      	mov	r1, sl
 8017a1c:	4680      	mov	r8, r0
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f000 fb60 	bl	80180e4 <_Bfree>
 8017a24:	46c2      	mov	sl, r8
 8017a26:	9b08      	ldr	r3, [sp, #32]
 8017a28:	1b9a      	subs	r2, r3, r6
 8017a2a:	d004      	beq.n	8017a36 <_dtoa_r+0x7b6>
 8017a2c:	4651      	mov	r1, sl
 8017a2e:	4620      	mov	r0, r4
 8017a30:	f000 fd18 	bl	8018464 <__pow5mult>
 8017a34:	4682      	mov	sl, r0
 8017a36:	2101      	movs	r1, #1
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f000 fc53 	bl	80182e4 <__i2b>
 8017a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	4606      	mov	r6, r0
 8017a44:	f340 8081 	ble.w	8017b4a <_dtoa_r+0x8ca>
 8017a48:	461a      	mov	r2, r3
 8017a4a:	4601      	mov	r1, r0
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	f000 fd09 	bl	8018464 <__pow5mult>
 8017a52:	9b07      	ldr	r3, [sp, #28]
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	4606      	mov	r6, r0
 8017a58:	dd7a      	ble.n	8017b50 <_dtoa_r+0x8d0>
 8017a5a:	f04f 0800 	mov.w	r8, #0
 8017a5e:	6933      	ldr	r3, [r6, #16]
 8017a60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017a64:	6918      	ldr	r0, [r3, #16]
 8017a66:	f000 fbef 	bl	8018248 <__hi0bits>
 8017a6a:	f1c0 0020 	rsb	r0, r0, #32
 8017a6e:	9b06      	ldr	r3, [sp, #24]
 8017a70:	4418      	add	r0, r3
 8017a72:	f010 001f 	ands.w	r0, r0, #31
 8017a76:	f000 8094 	beq.w	8017ba2 <_dtoa_r+0x922>
 8017a7a:	f1c0 0320 	rsb	r3, r0, #32
 8017a7e:	2b04      	cmp	r3, #4
 8017a80:	f340 8085 	ble.w	8017b8e <_dtoa_r+0x90e>
 8017a84:	9b05      	ldr	r3, [sp, #20]
 8017a86:	f1c0 001c 	rsb	r0, r0, #28
 8017a8a:	4403      	add	r3, r0
 8017a8c:	9305      	str	r3, [sp, #20]
 8017a8e:	9b06      	ldr	r3, [sp, #24]
 8017a90:	4403      	add	r3, r0
 8017a92:	4405      	add	r5, r0
 8017a94:	9306      	str	r3, [sp, #24]
 8017a96:	9b05      	ldr	r3, [sp, #20]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	dd05      	ble.n	8017aa8 <_dtoa_r+0x828>
 8017a9c:	4651      	mov	r1, sl
 8017a9e:	461a      	mov	r2, r3
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	f000 fd39 	bl	8018518 <__lshift>
 8017aa6:	4682      	mov	sl, r0
 8017aa8:	9b06      	ldr	r3, [sp, #24]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	dd05      	ble.n	8017aba <_dtoa_r+0x83a>
 8017aae:	4631      	mov	r1, r6
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	f000 fd30 	bl	8018518 <__lshift>
 8017ab8:	4606      	mov	r6, r0
 8017aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d072      	beq.n	8017ba6 <_dtoa_r+0x926>
 8017ac0:	4631      	mov	r1, r6
 8017ac2:	4650      	mov	r0, sl
 8017ac4:	f000 fd94 	bl	80185f0 <__mcmp>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	da6c      	bge.n	8017ba6 <_dtoa_r+0x926>
 8017acc:	2300      	movs	r3, #0
 8017ace:	4651      	mov	r1, sl
 8017ad0:	220a      	movs	r2, #10
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f000 fb28 	bl	8018128 <__multadd>
 8017ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ada:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017ade:	4682      	mov	sl, r0
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	f000 81b0 	beq.w	8017e46 <_dtoa_r+0xbc6>
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	4639      	mov	r1, r7
 8017aea:	220a      	movs	r2, #10
 8017aec:	4620      	mov	r0, r4
 8017aee:	f000 fb1b 	bl	8018128 <__multadd>
 8017af2:	9b01      	ldr	r3, [sp, #4]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	4607      	mov	r7, r0
 8017af8:	f300 8096 	bgt.w	8017c28 <_dtoa_r+0x9a8>
 8017afc:	9b07      	ldr	r3, [sp, #28]
 8017afe:	2b02      	cmp	r3, #2
 8017b00:	dc59      	bgt.n	8017bb6 <_dtoa_r+0x936>
 8017b02:	e091      	b.n	8017c28 <_dtoa_r+0x9a8>
 8017b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b0a:	e758      	b.n	80179be <_dtoa_r+0x73e>
 8017b0c:	9b04      	ldr	r3, [sp, #16]
 8017b0e:	1e5e      	subs	r6, r3, #1
 8017b10:	9b08      	ldr	r3, [sp, #32]
 8017b12:	42b3      	cmp	r3, r6
 8017b14:	bfbf      	itttt	lt
 8017b16:	9b08      	ldrlt	r3, [sp, #32]
 8017b18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017b1a:	9608      	strlt	r6, [sp, #32]
 8017b1c:	1af3      	sublt	r3, r6, r3
 8017b1e:	bfb4      	ite	lt
 8017b20:	18d2      	addlt	r2, r2, r3
 8017b22:	1b9e      	subge	r6, r3, r6
 8017b24:	9b04      	ldr	r3, [sp, #16]
 8017b26:	bfbc      	itt	lt
 8017b28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017b2a:	2600      	movlt	r6, #0
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	bfb7      	itett	lt
 8017b30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017b34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017b38:	1a9d      	sublt	r5, r3, r2
 8017b3a:	2300      	movlt	r3, #0
 8017b3c:	e741      	b.n	80179c2 <_dtoa_r+0x742>
 8017b3e:	9e08      	ldr	r6, [sp, #32]
 8017b40:	9d05      	ldr	r5, [sp, #20]
 8017b42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017b44:	e748      	b.n	80179d8 <_dtoa_r+0x758>
 8017b46:	9a08      	ldr	r2, [sp, #32]
 8017b48:	e770      	b.n	8017a2c <_dtoa_r+0x7ac>
 8017b4a:	9b07      	ldr	r3, [sp, #28]
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	dc19      	bgt.n	8017b84 <_dtoa_r+0x904>
 8017b50:	9b02      	ldr	r3, [sp, #8]
 8017b52:	b9bb      	cbnz	r3, 8017b84 <_dtoa_r+0x904>
 8017b54:	9b03      	ldr	r3, [sp, #12]
 8017b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b5a:	b99b      	cbnz	r3, 8017b84 <_dtoa_r+0x904>
 8017b5c:	9b03      	ldr	r3, [sp, #12]
 8017b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b62:	0d1b      	lsrs	r3, r3, #20
 8017b64:	051b      	lsls	r3, r3, #20
 8017b66:	b183      	cbz	r3, 8017b8a <_dtoa_r+0x90a>
 8017b68:	9b05      	ldr	r3, [sp, #20]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	9305      	str	r3, [sp, #20]
 8017b6e:	9b06      	ldr	r3, [sp, #24]
 8017b70:	3301      	adds	r3, #1
 8017b72:	9306      	str	r3, [sp, #24]
 8017b74:	f04f 0801 	mov.w	r8, #1
 8017b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f47f af6f 	bne.w	8017a5e <_dtoa_r+0x7de>
 8017b80:	2001      	movs	r0, #1
 8017b82:	e774      	b.n	8017a6e <_dtoa_r+0x7ee>
 8017b84:	f04f 0800 	mov.w	r8, #0
 8017b88:	e7f6      	b.n	8017b78 <_dtoa_r+0x8f8>
 8017b8a:	4698      	mov	r8, r3
 8017b8c:	e7f4      	b.n	8017b78 <_dtoa_r+0x8f8>
 8017b8e:	d082      	beq.n	8017a96 <_dtoa_r+0x816>
 8017b90:	9a05      	ldr	r2, [sp, #20]
 8017b92:	331c      	adds	r3, #28
 8017b94:	441a      	add	r2, r3
 8017b96:	9205      	str	r2, [sp, #20]
 8017b98:	9a06      	ldr	r2, [sp, #24]
 8017b9a:	441a      	add	r2, r3
 8017b9c:	441d      	add	r5, r3
 8017b9e:	9206      	str	r2, [sp, #24]
 8017ba0:	e779      	b.n	8017a96 <_dtoa_r+0x816>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	e7f4      	b.n	8017b90 <_dtoa_r+0x910>
 8017ba6:	9b04      	ldr	r3, [sp, #16]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	dc37      	bgt.n	8017c1c <_dtoa_r+0x99c>
 8017bac:	9b07      	ldr	r3, [sp, #28]
 8017bae:	2b02      	cmp	r3, #2
 8017bb0:	dd34      	ble.n	8017c1c <_dtoa_r+0x99c>
 8017bb2:	9b04      	ldr	r3, [sp, #16]
 8017bb4:	9301      	str	r3, [sp, #4]
 8017bb6:	9b01      	ldr	r3, [sp, #4]
 8017bb8:	b963      	cbnz	r3, 8017bd4 <_dtoa_r+0x954>
 8017bba:	4631      	mov	r1, r6
 8017bbc:	2205      	movs	r2, #5
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f000 fab2 	bl	8018128 <__multadd>
 8017bc4:	4601      	mov	r1, r0
 8017bc6:	4606      	mov	r6, r0
 8017bc8:	4650      	mov	r0, sl
 8017bca:	f000 fd11 	bl	80185f0 <__mcmp>
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	f73f adbb 	bgt.w	801774a <_dtoa_r+0x4ca>
 8017bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bd6:	9d00      	ldr	r5, [sp, #0]
 8017bd8:	ea6f 0b03 	mvn.w	fp, r3
 8017bdc:	f04f 0800 	mov.w	r8, #0
 8017be0:	4631      	mov	r1, r6
 8017be2:	4620      	mov	r0, r4
 8017be4:	f000 fa7e 	bl	80180e4 <_Bfree>
 8017be8:	2f00      	cmp	r7, #0
 8017bea:	f43f aeab 	beq.w	8017944 <_dtoa_r+0x6c4>
 8017bee:	f1b8 0f00 	cmp.w	r8, #0
 8017bf2:	d005      	beq.n	8017c00 <_dtoa_r+0x980>
 8017bf4:	45b8      	cmp	r8, r7
 8017bf6:	d003      	beq.n	8017c00 <_dtoa_r+0x980>
 8017bf8:	4641      	mov	r1, r8
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	f000 fa72 	bl	80180e4 <_Bfree>
 8017c00:	4639      	mov	r1, r7
 8017c02:	4620      	mov	r0, r4
 8017c04:	f000 fa6e 	bl	80180e4 <_Bfree>
 8017c08:	e69c      	b.n	8017944 <_dtoa_r+0x6c4>
 8017c0a:	2600      	movs	r6, #0
 8017c0c:	4637      	mov	r7, r6
 8017c0e:	e7e1      	b.n	8017bd4 <_dtoa_r+0x954>
 8017c10:	46bb      	mov	fp, r7
 8017c12:	4637      	mov	r7, r6
 8017c14:	e599      	b.n	801774a <_dtoa_r+0x4ca>
 8017c16:	bf00      	nop
 8017c18:	40240000 	.word	0x40240000
 8017c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	f000 80c8 	beq.w	8017db4 <_dtoa_r+0xb34>
 8017c24:	9b04      	ldr	r3, [sp, #16]
 8017c26:	9301      	str	r3, [sp, #4]
 8017c28:	2d00      	cmp	r5, #0
 8017c2a:	dd05      	ble.n	8017c38 <_dtoa_r+0x9b8>
 8017c2c:	4639      	mov	r1, r7
 8017c2e:	462a      	mov	r2, r5
 8017c30:	4620      	mov	r0, r4
 8017c32:	f000 fc71 	bl	8018518 <__lshift>
 8017c36:	4607      	mov	r7, r0
 8017c38:	f1b8 0f00 	cmp.w	r8, #0
 8017c3c:	d05b      	beq.n	8017cf6 <_dtoa_r+0xa76>
 8017c3e:	6879      	ldr	r1, [r7, #4]
 8017c40:	4620      	mov	r0, r4
 8017c42:	f000 fa0f 	bl	8018064 <_Balloc>
 8017c46:	4605      	mov	r5, r0
 8017c48:	b928      	cbnz	r0, 8017c56 <_dtoa_r+0x9d6>
 8017c4a:	4b83      	ldr	r3, [pc, #524]	; (8017e58 <_dtoa_r+0xbd8>)
 8017c4c:	4602      	mov	r2, r0
 8017c4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017c52:	f7ff bb2e 	b.w	80172b2 <_dtoa_r+0x32>
 8017c56:	693a      	ldr	r2, [r7, #16]
 8017c58:	3202      	adds	r2, #2
 8017c5a:	0092      	lsls	r2, r2, #2
 8017c5c:	f107 010c 	add.w	r1, r7, #12
 8017c60:	300c      	adds	r0, #12
 8017c62:	f7ff fa6e 	bl	8017142 <memcpy>
 8017c66:	2201      	movs	r2, #1
 8017c68:	4629      	mov	r1, r5
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f000 fc54 	bl	8018518 <__lshift>
 8017c70:	9b00      	ldr	r3, [sp, #0]
 8017c72:	3301      	adds	r3, #1
 8017c74:	9304      	str	r3, [sp, #16]
 8017c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c7a:	4413      	add	r3, r2
 8017c7c:	9308      	str	r3, [sp, #32]
 8017c7e:	9b02      	ldr	r3, [sp, #8]
 8017c80:	f003 0301 	and.w	r3, r3, #1
 8017c84:	46b8      	mov	r8, r7
 8017c86:	9306      	str	r3, [sp, #24]
 8017c88:	4607      	mov	r7, r0
 8017c8a:	9b04      	ldr	r3, [sp, #16]
 8017c8c:	4631      	mov	r1, r6
 8017c8e:	3b01      	subs	r3, #1
 8017c90:	4650      	mov	r0, sl
 8017c92:	9301      	str	r3, [sp, #4]
 8017c94:	f7ff fa6a 	bl	801716c <quorem>
 8017c98:	4641      	mov	r1, r8
 8017c9a:	9002      	str	r0, [sp, #8]
 8017c9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017ca0:	4650      	mov	r0, sl
 8017ca2:	f000 fca5 	bl	80185f0 <__mcmp>
 8017ca6:	463a      	mov	r2, r7
 8017ca8:	9005      	str	r0, [sp, #20]
 8017caa:	4631      	mov	r1, r6
 8017cac:	4620      	mov	r0, r4
 8017cae:	f000 fcbb 	bl	8018628 <__mdiff>
 8017cb2:	68c2      	ldr	r2, [r0, #12]
 8017cb4:	4605      	mov	r5, r0
 8017cb6:	bb02      	cbnz	r2, 8017cfa <_dtoa_r+0xa7a>
 8017cb8:	4601      	mov	r1, r0
 8017cba:	4650      	mov	r0, sl
 8017cbc:	f000 fc98 	bl	80185f0 <__mcmp>
 8017cc0:	4602      	mov	r2, r0
 8017cc2:	4629      	mov	r1, r5
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8017cc8:	f000 fa0c 	bl	80180e4 <_Bfree>
 8017ccc:	9b07      	ldr	r3, [sp, #28]
 8017cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cd0:	9d04      	ldr	r5, [sp, #16]
 8017cd2:	ea43 0102 	orr.w	r1, r3, r2
 8017cd6:	9b06      	ldr	r3, [sp, #24]
 8017cd8:	4319      	orrs	r1, r3
 8017cda:	d110      	bne.n	8017cfe <_dtoa_r+0xa7e>
 8017cdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017ce0:	d029      	beq.n	8017d36 <_dtoa_r+0xab6>
 8017ce2:	9b05      	ldr	r3, [sp, #20]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	dd02      	ble.n	8017cee <_dtoa_r+0xa6e>
 8017ce8:	9b02      	ldr	r3, [sp, #8]
 8017cea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	f883 9000 	strb.w	r9, [r3]
 8017cf4:	e774      	b.n	8017be0 <_dtoa_r+0x960>
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	e7ba      	b.n	8017c70 <_dtoa_r+0x9f0>
 8017cfa:	2201      	movs	r2, #1
 8017cfc:	e7e1      	b.n	8017cc2 <_dtoa_r+0xa42>
 8017cfe:	9b05      	ldr	r3, [sp, #20]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	db04      	blt.n	8017d0e <_dtoa_r+0xa8e>
 8017d04:	9907      	ldr	r1, [sp, #28]
 8017d06:	430b      	orrs	r3, r1
 8017d08:	9906      	ldr	r1, [sp, #24]
 8017d0a:	430b      	orrs	r3, r1
 8017d0c:	d120      	bne.n	8017d50 <_dtoa_r+0xad0>
 8017d0e:	2a00      	cmp	r2, #0
 8017d10:	dded      	ble.n	8017cee <_dtoa_r+0xa6e>
 8017d12:	4651      	mov	r1, sl
 8017d14:	2201      	movs	r2, #1
 8017d16:	4620      	mov	r0, r4
 8017d18:	f000 fbfe 	bl	8018518 <__lshift>
 8017d1c:	4631      	mov	r1, r6
 8017d1e:	4682      	mov	sl, r0
 8017d20:	f000 fc66 	bl	80185f0 <__mcmp>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	dc03      	bgt.n	8017d30 <_dtoa_r+0xab0>
 8017d28:	d1e1      	bne.n	8017cee <_dtoa_r+0xa6e>
 8017d2a:	f019 0f01 	tst.w	r9, #1
 8017d2e:	d0de      	beq.n	8017cee <_dtoa_r+0xa6e>
 8017d30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d34:	d1d8      	bne.n	8017ce8 <_dtoa_r+0xa68>
 8017d36:	9a01      	ldr	r2, [sp, #4]
 8017d38:	2339      	movs	r3, #57	; 0x39
 8017d3a:	7013      	strb	r3, [r2, #0]
 8017d3c:	462b      	mov	r3, r5
 8017d3e:	461d      	mov	r5, r3
 8017d40:	3b01      	subs	r3, #1
 8017d42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d46:	2a39      	cmp	r2, #57	; 0x39
 8017d48:	d06c      	beq.n	8017e24 <_dtoa_r+0xba4>
 8017d4a:	3201      	adds	r2, #1
 8017d4c:	701a      	strb	r2, [r3, #0]
 8017d4e:	e747      	b.n	8017be0 <_dtoa_r+0x960>
 8017d50:	2a00      	cmp	r2, #0
 8017d52:	dd07      	ble.n	8017d64 <_dtoa_r+0xae4>
 8017d54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d58:	d0ed      	beq.n	8017d36 <_dtoa_r+0xab6>
 8017d5a:	9a01      	ldr	r2, [sp, #4]
 8017d5c:	f109 0301 	add.w	r3, r9, #1
 8017d60:	7013      	strb	r3, [r2, #0]
 8017d62:	e73d      	b.n	8017be0 <_dtoa_r+0x960>
 8017d64:	9b04      	ldr	r3, [sp, #16]
 8017d66:	9a08      	ldr	r2, [sp, #32]
 8017d68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017d6c:	4293      	cmp	r3, r2
 8017d6e:	d043      	beq.n	8017df8 <_dtoa_r+0xb78>
 8017d70:	4651      	mov	r1, sl
 8017d72:	2300      	movs	r3, #0
 8017d74:	220a      	movs	r2, #10
 8017d76:	4620      	mov	r0, r4
 8017d78:	f000 f9d6 	bl	8018128 <__multadd>
 8017d7c:	45b8      	cmp	r8, r7
 8017d7e:	4682      	mov	sl, r0
 8017d80:	f04f 0300 	mov.w	r3, #0
 8017d84:	f04f 020a 	mov.w	r2, #10
 8017d88:	4641      	mov	r1, r8
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	d107      	bne.n	8017d9e <_dtoa_r+0xb1e>
 8017d8e:	f000 f9cb 	bl	8018128 <__multadd>
 8017d92:	4680      	mov	r8, r0
 8017d94:	4607      	mov	r7, r0
 8017d96:	9b04      	ldr	r3, [sp, #16]
 8017d98:	3301      	adds	r3, #1
 8017d9a:	9304      	str	r3, [sp, #16]
 8017d9c:	e775      	b.n	8017c8a <_dtoa_r+0xa0a>
 8017d9e:	f000 f9c3 	bl	8018128 <__multadd>
 8017da2:	4639      	mov	r1, r7
 8017da4:	4680      	mov	r8, r0
 8017da6:	2300      	movs	r3, #0
 8017da8:	220a      	movs	r2, #10
 8017daa:	4620      	mov	r0, r4
 8017dac:	f000 f9bc 	bl	8018128 <__multadd>
 8017db0:	4607      	mov	r7, r0
 8017db2:	e7f0      	b.n	8017d96 <_dtoa_r+0xb16>
 8017db4:	9b04      	ldr	r3, [sp, #16]
 8017db6:	9301      	str	r3, [sp, #4]
 8017db8:	9d00      	ldr	r5, [sp, #0]
 8017dba:	4631      	mov	r1, r6
 8017dbc:	4650      	mov	r0, sl
 8017dbe:	f7ff f9d5 	bl	801716c <quorem>
 8017dc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017dc6:	9b00      	ldr	r3, [sp, #0]
 8017dc8:	f805 9b01 	strb.w	r9, [r5], #1
 8017dcc:	1aea      	subs	r2, r5, r3
 8017dce:	9b01      	ldr	r3, [sp, #4]
 8017dd0:	4293      	cmp	r3, r2
 8017dd2:	dd07      	ble.n	8017de4 <_dtoa_r+0xb64>
 8017dd4:	4651      	mov	r1, sl
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	220a      	movs	r2, #10
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f000 f9a4 	bl	8018128 <__multadd>
 8017de0:	4682      	mov	sl, r0
 8017de2:	e7ea      	b.n	8017dba <_dtoa_r+0xb3a>
 8017de4:	9b01      	ldr	r3, [sp, #4]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	bfc8      	it	gt
 8017dea:	461d      	movgt	r5, r3
 8017dec:	9b00      	ldr	r3, [sp, #0]
 8017dee:	bfd8      	it	le
 8017df0:	2501      	movle	r5, #1
 8017df2:	441d      	add	r5, r3
 8017df4:	f04f 0800 	mov.w	r8, #0
 8017df8:	4651      	mov	r1, sl
 8017dfa:	2201      	movs	r2, #1
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	f000 fb8b 	bl	8018518 <__lshift>
 8017e02:	4631      	mov	r1, r6
 8017e04:	4682      	mov	sl, r0
 8017e06:	f000 fbf3 	bl	80185f0 <__mcmp>
 8017e0a:	2800      	cmp	r0, #0
 8017e0c:	dc96      	bgt.n	8017d3c <_dtoa_r+0xabc>
 8017e0e:	d102      	bne.n	8017e16 <_dtoa_r+0xb96>
 8017e10:	f019 0f01 	tst.w	r9, #1
 8017e14:	d192      	bne.n	8017d3c <_dtoa_r+0xabc>
 8017e16:	462b      	mov	r3, r5
 8017e18:	461d      	mov	r5, r3
 8017e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e1e:	2a30      	cmp	r2, #48	; 0x30
 8017e20:	d0fa      	beq.n	8017e18 <_dtoa_r+0xb98>
 8017e22:	e6dd      	b.n	8017be0 <_dtoa_r+0x960>
 8017e24:	9a00      	ldr	r2, [sp, #0]
 8017e26:	429a      	cmp	r2, r3
 8017e28:	d189      	bne.n	8017d3e <_dtoa_r+0xabe>
 8017e2a:	f10b 0b01 	add.w	fp, fp, #1
 8017e2e:	2331      	movs	r3, #49	; 0x31
 8017e30:	e796      	b.n	8017d60 <_dtoa_r+0xae0>
 8017e32:	4b0a      	ldr	r3, [pc, #40]	; (8017e5c <_dtoa_r+0xbdc>)
 8017e34:	f7ff ba99 	b.w	801736a <_dtoa_r+0xea>
 8017e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	f47f aa6d 	bne.w	801731a <_dtoa_r+0x9a>
 8017e40:	4b07      	ldr	r3, [pc, #28]	; (8017e60 <_dtoa_r+0xbe0>)
 8017e42:	f7ff ba92 	b.w	801736a <_dtoa_r+0xea>
 8017e46:	9b01      	ldr	r3, [sp, #4]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	dcb5      	bgt.n	8017db8 <_dtoa_r+0xb38>
 8017e4c:	9b07      	ldr	r3, [sp, #28]
 8017e4e:	2b02      	cmp	r3, #2
 8017e50:	f73f aeb1 	bgt.w	8017bb6 <_dtoa_r+0x936>
 8017e54:	e7b0      	b.n	8017db8 <_dtoa_r+0xb38>
 8017e56:	bf00      	nop
 8017e58:	0801d68d 	.word	0x0801d68d
 8017e5c:	0801d5e8 	.word	0x0801d5e8
 8017e60:	0801d611 	.word	0x0801d611

08017e64 <_free_r>:
 8017e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e66:	2900      	cmp	r1, #0
 8017e68:	d044      	beq.n	8017ef4 <_free_r+0x90>
 8017e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e6e:	9001      	str	r0, [sp, #4]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	f1a1 0404 	sub.w	r4, r1, #4
 8017e76:	bfb8      	it	lt
 8017e78:	18e4      	addlt	r4, r4, r3
 8017e7a:	f000 f8e7 	bl	801804c <__malloc_lock>
 8017e7e:	4a1e      	ldr	r2, [pc, #120]	; (8017ef8 <_free_r+0x94>)
 8017e80:	9801      	ldr	r0, [sp, #4]
 8017e82:	6813      	ldr	r3, [r2, #0]
 8017e84:	b933      	cbnz	r3, 8017e94 <_free_r+0x30>
 8017e86:	6063      	str	r3, [r4, #4]
 8017e88:	6014      	str	r4, [r2, #0]
 8017e8a:	b003      	add	sp, #12
 8017e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e90:	f000 b8e2 	b.w	8018058 <__malloc_unlock>
 8017e94:	42a3      	cmp	r3, r4
 8017e96:	d908      	bls.n	8017eaa <_free_r+0x46>
 8017e98:	6825      	ldr	r5, [r4, #0]
 8017e9a:	1961      	adds	r1, r4, r5
 8017e9c:	428b      	cmp	r3, r1
 8017e9e:	bf01      	itttt	eq
 8017ea0:	6819      	ldreq	r1, [r3, #0]
 8017ea2:	685b      	ldreq	r3, [r3, #4]
 8017ea4:	1949      	addeq	r1, r1, r5
 8017ea6:	6021      	streq	r1, [r4, #0]
 8017ea8:	e7ed      	b.n	8017e86 <_free_r+0x22>
 8017eaa:	461a      	mov	r2, r3
 8017eac:	685b      	ldr	r3, [r3, #4]
 8017eae:	b10b      	cbz	r3, 8017eb4 <_free_r+0x50>
 8017eb0:	42a3      	cmp	r3, r4
 8017eb2:	d9fa      	bls.n	8017eaa <_free_r+0x46>
 8017eb4:	6811      	ldr	r1, [r2, #0]
 8017eb6:	1855      	adds	r5, r2, r1
 8017eb8:	42a5      	cmp	r5, r4
 8017eba:	d10b      	bne.n	8017ed4 <_free_r+0x70>
 8017ebc:	6824      	ldr	r4, [r4, #0]
 8017ebe:	4421      	add	r1, r4
 8017ec0:	1854      	adds	r4, r2, r1
 8017ec2:	42a3      	cmp	r3, r4
 8017ec4:	6011      	str	r1, [r2, #0]
 8017ec6:	d1e0      	bne.n	8017e8a <_free_r+0x26>
 8017ec8:	681c      	ldr	r4, [r3, #0]
 8017eca:	685b      	ldr	r3, [r3, #4]
 8017ecc:	6053      	str	r3, [r2, #4]
 8017ece:	440c      	add	r4, r1
 8017ed0:	6014      	str	r4, [r2, #0]
 8017ed2:	e7da      	b.n	8017e8a <_free_r+0x26>
 8017ed4:	d902      	bls.n	8017edc <_free_r+0x78>
 8017ed6:	230c      	movs	r3, #12
 8017ed8:	6003      	str	r3, [r0, #0]
 8017eda:	e7d6      	b.n	8017e8a <_free_r+0x26>
 8017edc:	6825      	ldr	r5, [r4, #0]
 8017ede:	1961      	adds	r1, r4, r5
 8017ee0:	428b      	cmp	r3, r1
 8017ee2:	bf04      	itt	eq
 8017ee4:	6819      	ldreq	r1, [r3, #0]
 8017ee6:	685b      	ldreq	r3, [r3, #4]
 8017ee8:	6063      	str	r3, [r4, #4]
 8017eea:	bf04      	itt	eq
 8017eec:	1949      	addeq	r1, r1, r5
 8017eee:	6021      	streq	r1, [r4, #0]
 8017ef0:	6054      	str	r4, [r2, #4]
 8017ef2:	e7ca      	b.n	8017e8a <_free_r+0x26>
 8017ef4:	b003      	add	sp, #12
 8017ef6:	bd30      	pop	{r4, r5, pc}
 8017ef8:	200036f0 	.word	0x200036f0

08017efc <malloc>:
 8017efc:	4b02      	ldr	r3, [pc, #8]	; (8017f08 <malloc+0xc>)
 8017efe:	4601      	mov	r1, r0
 8017f00:	6818      	ldr	r0, [r3, #0]
 8017f02:	f000 b823 	b.w	8017f4c <_malloc_r>
 8017f06:	bf00      	nop
 8017f08:	200003d0 	.word	0x200003d0

08017f0c <sbrk_aligned>:
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	4e0e      	ldr	r6, [pc, #56]	; (8017f48 <sbrk_aligned+0x3c>)
 8017f10:	460c      	mov	r4, r1
 8017f12:	6831      	ldr	r1, [r6, #0]
 8017f14:	4605      	mov	r5, r0
 8017f16:	b911      	cbnz	r1, 8017f1e <sbrk_aligned+0x12>
 8017f18:	f001 fe1a 	bl	8019b50 <_sbrk_r>
 8017f1c:	6030      	str	r0, [r6, #0]
 8017f1e:	4621      	mov	r1, r4
 8017f20:	4628      	mov	r0, r5
 8017f22:	f001 fe15 	bl	8019b50 <_sbrk_r>
 8017f26:	1c43      	adds	r3, r0, #1
 8017f28:	d00a      	beq.n	8017f40 <sbrk_aligned+0x34>
 8017f2a:	1cc4      	adds	r4, r0, #3
 8017f2c:	f024 0403 	bic.w	r4, r4, #3
 8017f30:	42a0      	cmp	r0, r4
 8017f32:	d007      	beq.n	8017f44 <sbrk_aligned+0x38>
 8017f34:	1a21      	subs	r1, r4, r0
 8017f36:	4628      	mov	r0, r5
 8017f38:	f001 fe0a 	bl	8019b50 <_sbrk_r>
 8017f3c:	3001      	adds	r0, #1
 8017f3e:	d101      	bne.n	8017f44 <sbrk_aligned+0x38>
 8017f40:	f04f 34ff 	mov.w	r4, #4294967295
 8017f44:	4620      	mov	r0, r4
 8017f46:	bd70      	pop	{r4, r5, r6, pc}
 8017f48:	200036f4 	.word	0x200036f4

08017f4c <_malloc_r>:
 8017f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f50:	1ccd      	adds	r5, r1, #3
 8017f52:	f025 0503 	bic.w	r5, r5, #3
 8017f56:	3508      	adds	r5, #8
 8017f58:	2d0c      	cmp	r5, #12
 8017f5a:	bf38      	it	cc
 8017f5c:	250c      	movcc	r5, #12
 8017f5e:	2d00      	cmp	r5, #0
 8017f60:	4607      	mov	r7, r0
 8017f62:	db01      	blt.n	8017f68 <_malloc_r+0x1c>
 8017f64:	42a9      	cmp	r1, r5
 8017f66:	d905      	bls.n	8017f74 <_malloc_r+0x28>
 8017f68:	230c      	movs	r3, #12
 8017f6a:	603b      	str	r3, [r7, #0]
 8017f6c:	2600      	movs	r6, #0
 8017f6e:	4630      	mov	r0, r6
 8017f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018048 <_malloc_r+0xfc>
 8017f78:	f000 f868 	bl	801804c <__malloc_lock>
 8017f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f80:	461c      	mov	r4, r3
 8017f82:	bb5c      	cbnz	r4, 8017fdc <_malloc_r+0x90>
 8017f84:	4629      	mov	r1, r5
 8017f86:	4638      	mov	r0, r7
 8017f88:	f7ff ffc0 	bl	8017f0c <sbrk_aligned>
 8017f8c:	1c43      	adds	r3, r0, #1
 8017f8e:	4604      	mov	r4, r0
 8017f90:	d155      	bne.n	801803e <_malloc_r+0xf2>
 8017f92:	f8d8 4000 	ldr.w	r4, [r8]
 8017f96:	4626      	mov	r6, r4
 8017f98:	2e00      	cmp	r6, #0
 8017f9a:	d145      	bne.n	8018028 <_malloc_r+0xdc>
 8017f9c:	2c00      	cmp	r4, #0
 8017f9e:	d048      	beq.n	8018032 <_malloc_r+0xe6>
 8017fa0:	6823      	ldr	r3, [r4, #0]
 8017fa2:	4631      	mov	r1, r6
 8017fa4:	4638      	mov	r0, r7
 8017fa6:	eb04 0903 	add.w	r9, r4, r3
 8017faa:	f001 fdd1 	bl	8019b50 <_sbrk_r>
 8017fae:	4581      	cmp	r9, r0
 8017fb0:	d13f      	bne.n	8018032 <_malloc_r+0xe6>
 8017fb2:	6821      	ldr	r1, [r4, #0]
 8017fb4:	1a6d      	subs	r5, r5, r1
 8017fb6:	4629      	mov	r1, r5
 8017fb8:	4638      	mov	r0, r7
 8017fba:	f7ff ffa7 	bl	8017f0c <sbrk_aligned>
 8017fbe:	3001      	adds	r0, #1
 8017fc0:	d037      	beq.n	8018032 <_malloc_r+0xe6>
 8017fc2:	6823      	ldr	r3, [r4, #0]
 8017fc4:	442b      	add	r3, r5
 8017fc6:	6023      	str	r3, [r4, #0]
 8017fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d038      	beq.n	8018042 <_malloc_r+0xf6>
 8017fd0:	685a      	ldr	r2, [r3, #4]
 8017fd2:	42a2      	cmp	r2, r4
 8017fd4:	d12b      	bne.n	801802e <_malloc_r+0xe2>
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	605a      	str	r2, [r3, #4]
 8017fda:	e00f      	b.n	8017ffc <_malloc_r+0xb0>
 8017fdc:	6822      	ldr	r2, [r4, #0]
 8017fde:	1b52      	subs	r2, r2, r5
 8017fe0:	d41f      	bmi.n	8018022 <_malloc_r+0xd6>
 8017fe2:	2a0b      	cmp	r2, #11
 8017fe4:	d917      	bls.n	8018016 <_malloc_r+0xca>
 8017fe6:	1961      	adds	r1, r4, r5
 8017fe8:	42a3      	cmp	r3, r4
 8017fea:	6025      	str	r5, [r4, #0]
 8017fec:	bf18      	it	ne
 8017fee:	6059      	strne	r1, [r3, #4]
 8017ff0:	6863      	ldr	r3, [r4, #4]
 8017ff2:	bf08      	it	eq
 8017ff4:	f8c8 1000 	streq.w	r1, [r8]
 8017ff8:	5162      	str	r2, [r4, r5]
 8017ffa:	604b      	str	r3, [r1, #4]
 8017ffc:	4638      	mov	r0, r7
 8017ffe:	f104 060b 	add.w	r6, r4, #11
 8018002:	f000 f829 	bl	8018058 <__malloc_unlock>
 8018006:	f026 0607 	bic.w	r6, r6, #7
 801800a:	1d23      	adds	r3, r4, #4
 801800c:	1af2      	subs	r2, r6, r3
 801800e:	d0ae      	beq.n	8017f6e <_malloc_r+0x22>
 8018010:	1b9b      	subs	r3, r3, r6
 8018012:	50a3      	str	r3, [r4, r2]
 8018014:	e7ab      	b.n	8017f6e <_malloc_r+0x22>
 8018016:	42a3      	cmp	r3, r4
 8018018:	6862      	ldr	r2, [r4, #4]
 801801a:	d1dd      	bne.n	8017fd8 <_malloc_r+0x8c>
 801801c:	f8c8 2000 	str.w	r2, [r8]
 8018020:	e7ec      	b.n	8017ffc <_malloc_r+0xb0>
 8018022:	4623      	mov	r3, r4
 8018024:	6864      	ldr	r4, [r4, #4]
 8018026:	e7ac      	b.n	8017f82 <_malloc_r+0x36>
 8018028:	4634      	mov	r4, r6
 801802a:	6876      	ldr	r6, [r6, #4]
 801802c:	e7b4      	b.n	8017f98 <_malloc_r+0x4c>
 801802e:	4613      	mov	r3, r2
 8018030:	e7cc      	b.n	8017fcc <_malloc_r+0x80>
 8018032:	230c      	movs	r3, #12
 8018034:	603b      	str	r3, [r7, #0]
 8018036:	4638      	mov	r0, r7
 8018038:	f000 f80e 	bl	8018058 <__malloc_unlock>
 801803c:	e797      	b.n	8017f6e <_malloc_r+0x22>
 801803e:	6025      	str	r5, [r4, #0]
 8018040:	e7dc      	b.n	8017ffc <_malloc_r+0xb0>
 8018042:	605b      	str	r3, [r3, #4]
 8018044:	deff      	udf	#255	; 0xff
 8018046:	bf00      	nop
 8018048:	200036f0 	.word	0x200036f0

0801804c <__malloc_lock>:
 801804c:	4801      	ldr	r0, [pc, #4]	; (8018054 <__malloc_lock+0x8>)
 801804e:	f7ff b876 	b.w	801713e <__retarget_lock_acquire_recursive>
 8018052:	bf00      	nop
 8018054:	200036ec 	.word	0x200036ec

08018058 <__malloc_unlock>:
 8018058:	4801      	ldr	r0, [pc, #4]	; (8018060 <__malloc_unlock+0x8>)
 801805a:	f7ff b871 	b.w	8017140 <__retarget_lock_release_recursive>
 801805e:	bf00      	nop
 8018060:	200036ec 	.word	0x200036ec

08018064 <_Balloc>:
 8018064:	b570      	push	{r4, r5, r6, lr}
 8018066:	69c6      	ldr	r6, [r0, #28]
 8018068:	4604      	mov	r4, r0
 801806a:	460d      	mov	r5, r1
 801806c:	b976      	cbnz	r6, 801808c <_Balloc+0x28>
 801806e:	2010      	movs	r0, #16
 8018070:	f7ff ff44 	bl	8017efc <malloc>
 8018074:	4602      	mov	r2, r0
 8018076:	61e0      	str	r0, [r4, #28]
 8018078:	b920      	cbnz	r0, 8018084 <_Balloc+0x20>
 801807a:	4b18      	ldr	r3, [pc, #96]	; (80180dc <_Balloc+0x78>)
 801807c:	4818      	ldr	r0, [pc, #96]	; (80180e0 <_Balloc+0x7c>)
 801807e:	216b      	movs	r1, #107	; 0x6b
 8018080:	f001 fd7e 	bl	8019b80 <__assert_func>
 8018084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018088:	6006      	str	r6, [r0, #0]
 801808a:	60c6      	str	r6, [r0, #12]
 801808c:	69e6      	ldr	r6, [r4, #28]
 801808e:	68f3      	ldr	r3, [r6, #12]
 8018090:	b183      	cbz	r3, 80180b4 <_Balloc+0x50>
 8018092:	69e3      	ldr	r3, [r4, #28]
 8018094:	68db      	ldr	r3, [r3, #12]
 8018096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801809a:	b9b8      	cbnz	r0, 80180cc <_Balloc+0x68>
 801809c:	2101      	movs	r1, #1
 801809e:	fa01 f605 	lsl.w	r6, r1, r5
 80180a2:	1d72      	adds	r2, r6, #5
 80180a4:	0092      	lsls	r2, r2, #2
 80180a6:	4620      	mov	r0, r4
 80180a8:	f001 fd88 	bl	8019bbc <_calloc_r>
 80180ac:	b160      	cbz	r0, 80180c8 <_Balloc+0x64>
 80180ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80180b2:	e00e      	b.n	80180d2 <_Balloc+0x6e>
 80180b4:	2221      	movs	r2, #33	; 0x21
 80180b6:	2104      	movs	r1, #4
 80180b8:	4620      	mov	r0, r4
 80180ba:	f001 fd7f 	bl	8019bbc <_calloc_r>
 80180be:	69e3      	ldr	r3, [r4, #28]
 80180c0:	60f0      	str	r0, [r6, #12]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d1e4      	bne.n	8018092 <_Balloc+0x2e>
 80180c8:	2000      	movs	r0, #0
 80180ca:	bd70      	pop	{r4, r5, r6, pc}
 80180cc:	6802      	ldr	r2, [r0, #0]
 80180ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80180d2:	2300      	movs	r3, #0
 80180d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80180d8:	e7f7      	b.n	80180ca <_Balloc+0x66>
 80180da:	bf00      	nop
 80180dc:	0801d61e 	.word	0x0801d61e
 80180e0:	0801d69e 	.word	0x0801d69e

080180e4 <_Bfree>:
 80180e4:	b570      	push	{r4, r5, r6, lr}
 80180e6:	69c6      	ldr	r6, [r0, #28]
 80180e8:	4605      	mov	r5, r0
 80180ea:	460c      	mov	r4, r1
 80180ec:	b976      	cbnz	r6, 801810c <_Bfree+0x28>
 80180ee:	2010      	movs	r0, #16
 80180f0:	f7ff ff04 	bl	8017efc <malloc>
 80180f4:	4602      	mov	r2, r0
 80180f6:	61e8      	str	r0, [r5, #28]
 80180f8:	b920      	cbnz	r0, 8018104 <_Bfree+0x20>
 80180fa:	4b09      	ldr	r3, [pc, #36]	; (8018120 <_Bfree+0x3c>)
 80180fc:	4809      	ldr	r0, [pc, #36]	; (8018124 <_Bfree+0x40>)
 80180fe:	218f      	movs	r1, #143	; 0x8f
 8018100:	f001 fd3e 	bl	8019b80 <__assert_func>
 8018104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018108:	6006      	str	r6, [r0, #0]
 801810a:	60c6      	str	r6, [r0, #12]
 801810c:	b13c      	cbz	r4, 801811e <_Bfree+0x3a>
 801810e:	69eb      	ldr	r3, [r5, #28]
 8018110:	6862      	ldr	r2, [r4, #4]
 8018112:	68db      	ldr	r3, [r3, #12]
 8018114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018118:	6021      	str	r1, [r4, #0]
 801811a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801811e:	bd70      	pop	{r4, r5, r6, pc}
 8018120:	0801d61e 	.word	0x0801d61e
 8018124:	0801d69e 	.word	0x0801d69e

08018128 <__multadd>:
 8018128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801812c:	690d      	ldr	r5, [r1, #16]
 801812e:	4607      	mov	r7, r0
 8018130:	460c      	mov	r4, r1
 8018132:	461e      	mov	r6, r3
 8018134:	f101 0c14 	add.w	ip, r1, #20
 8018138:	2000      	movs	r0, #0
 801813a:	f8dc 3000 	ldr.w	r3, [ip]
 801813e:	b299      	uxth	r1, r3
 8018140:	fb02 6101 	mla	r1, r2, r1, r6
 8018144:	0c1e      	lsrs	r6, r3, #16
 8018146:	0c0b      	lsrs	r3, r1, #16
 8018148:	fb02 3306 	mla	r3, r2, r6, r3
 801814c:	b289      	uxth	r1, r1
 801814e:	3001      	adds	r0, #1
 8018150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018154:	4285      	cmp	r5, r0
 8018156:	f84c 1b04 	str.w	r1, [ip], #4
 801815a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801815e:	dcec      	bgt.n	801813a <__multadd+0x12>
 8018160:	b30e      	cbz	r6, 80181a6 <__multadd+0x7e>
 8018162:	68a3      	ldr	r3, [r4, #8]
 8018164:	42ab      	cmp	r3, r5
 8018166:	dc19      	bgt.n	801819c <__multadd+0x74>
 8018168:	6861      	ldr	r1, [r4, #4]
 801816a:	4638      	mov	r0, r7
 801816c:	3101      	adds	r1, #1
 801816e:	f7ff ff79 	bl	8018064 <_Balloc>
 8018172:	4680      	mov	r8, r0
 8018174:	b928      	cbnz	r0, 8018182 <__multadd+0x5a>
 8018176:	4602      	mov	r2, r0
 8018178:	4b0c      	ldr	r3, [pc, #48]	; (80181ac <__multadd+0x84>)
 801817a:	480d      	ldr	r0, [pc, #52]	; (80181b0 <__multadd+0x88>)
 801817c:	21ba      	movs	r1, #186	; 0xba
 801817e:	f001 fcff 	bl	8019b80 <__assert_func>
 8018182:	6922      	ldr	r2, [r4, #16]
 8018184:	3202      	adds	r2, #2
 8018186:	f104 010c 	add.w	r1, r4, #12
 801818a:	0092      	lsls	r2, r2, #2
 801818c:	300c      	adds	r0, #12
 801818e:	f7fe ffd8 	bl	8017142 <memcpy>
 8018192:	4621      	mov	r1, r4
 8018194:	4638      	mov	r0, r7
 8018196:	f7ff ffa5 	bl	80180e4 <_Bfree>
 801819a:	4644      	mov	r4, r8
 801819c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80181a0:	3501      	adds	r5, #1
 80181a2:	615e      	str	r6, [r3, #20]
 80181a4:	6125      	str	r5, [r4, #16]
 80181a6:	4620      	mov	r0, r4
 80181a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181ac:	0801d68d 	.word	0x0801d68d
 80181b0:	0801d69e 	.word	0x0801d69e

080181b4 <__s2b>:
 80181b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181b8:	460c      	mov	r4, r1
 80181ba:	4615      	mov	r5, r2
 80181bc:	461f      	mov	r7, r3
 80181be:	2209      	movs	r2, #9
 80181c0:	3308      	adds	r3, #8
 80181c2:	4606      	mov	r6, r0
 80181c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80181c8:	2100      	movs	r1, #0
 80181ca:	2201      	movs	r2, #1
 80181cc:	429a      	cmp	r2, r3
 80181ce:	db09      	blt.n	80181e4 <__s2b+0x30>
 80181d0:	4630      	mov	r0, r6
 80181d2:	f7ff ff47 	bl	8018064 <_Balloc>
 80181d6:	b940      	cbnz	r0, 80181ea <__s2b+0x36>
 80181d8:	4602      	mov	r2, r0
 80181da:	4b19      	ldr	r3, [pc, #100]	; (8018240 <__s2b+0x8c>)
 80181dc:	4819      	ldr	r0, [pc, #100]	; (8018244 <__s2b+0x90>)
 80181de:	21d3      	movs	r1, #211	; 0xd3
 80181e0:	f001 fcce 	bl	8019b80 <__assert_func>
 80181e4:	0052      	lsls	r2, r2, #1
 80181e6:	3101      	adds	r1, #1
 80181e8:	e7f0      	b.n	80181cc <__s2b+0x18>
 80181ea:	9b08      	ldr	r3, [sp, #32]
 80181ec:	6143      	str	r3, [r0, #20]
 80181ee:	2d09      	cmp	r5, #9
 80181f0:	f04f 0301 	mov.w	r3, #1
 80181f4:	6103      	str	r3, [r0, #16]
 80181f6:	dd16      	ble.n	8018226 <__s2b+0x72>
 80181f8:	f104 0909 	add.w	r9, r4, #9
 80181fc:	46c8      	mov	r8, r9
 80181fe:	442c      	add	r4, r5
 8018200:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018204:	4601      	mov	r1, r0
 8018206:	3b30      	subs	r3, #48	; 0x30
 8018208:	220a      	movs	r2, #10
 801820a:	4630      	mov	r0, r6
 801820c:	f7ff ff8c 	bl	8018128 <__multadd>
 8018210:	45a0      	cmp	r8, r4
 8018212:	d1f5      	bne.n	8018200 <__s2b+0x4c>
 8018214:	f1a5 0408 	sub.w	r4, r5, #8
 8018218:	444c      	add	r4, r9
 801821a:	1b2d      	subs	r5, r5, r4
 801821c:	1963      	adds	r3, r4, r5
 801821e:	42bb      	cmp	r3, r7
 8018220:	db04      	blt.n	801822c <__s2b+0x78>
 8018222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018226:	340a      	adds	r4, #10
 8018228:	2509      	movs	r5, #9
 801822a:	e7f6      	b.n	801821a <__s2b+0x66>
 801822c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018230:	4601      	mov	r1, r0
 8018232:	3b30      	subs	r3, #48	; 0x30
 8018234:	220a      	movs	r2, #10
 8018236:	4630      	mov	r0, r6
 8018238:	f7ff ff76 	bl	8018128 <__multadd>
 801823c:	e7ee      	b.n	801821c <__s2b+0x68>
 801823e:	bf00      	nop
 8018240:	0801d68d 	.word	0x0801d68d
 8018244:	0801d69e 	.word	0x0801d69e

08018248 <__hi0bits>:
 8018248:	0c03      	lsrs	r3, r0, #16
 801824a:	041b      	lsls	r3, r3, #16
 801824c:	b9d3      	cbnz	r3, 8018284 <__hi0bits+0x3c>
 801824e:	0400      	lsls	r0, r0, #16
 8018250:	2310      	movs	r3, #16
 8018252:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018256:	bf04      	itt	eq
 8018258:	0200      	lsleq	r0, r0, #8
 801825a:	3308      	addeq	r3, #8
 801825c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018260:	bf04      	itt	eq
 8018262:	0100      	lsleq	r0, r0, #4
 8018264:	3304      	addeq	r3, #4
 8018266:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801826a:	bf04      	itt	eq
 801826c:	0080      	lsleq	r0, r0, #2
 801826e:	3302      	addeq	r3, #2
 8018270:	2800      	cmp	r0, #0
 8018272:	db05      	blt.n	8018280 <__hi0bits+0x38>
 8018274:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018278:	f103 0301 	add.w	r3, r3, #1
 801827c:	bf08      	it	eq
 801827e:	2320      	moveq	r3, #32
 8018280:	4618      	mov	r0, r3
 8018282:	4770      	bx	lr
 8018284:	2300      	movs	r3, #0
 8018286:	e7e4      	b.n	8018252 <__hi0bits+0xa>

08018288 <__lo0bits>:
 8018288:	6803      	ldr	r3, [r0, #0]
 801828a:	f013 0207 	ands.w	r2, r3, #7
 801828e:	d00c      	beq.n	80182aa <__lo0bits+0x22>
 8018290:	07d9      	lsls	r1, r3, #31
 8018292:	d422      	bmi.n	80182da <__lo0bits+0x52>
 8018294:	079a      	lsls	r2, r3, #30
 8018296:	bf49      	itett	mi
 8018298:	085b      	lsrmi	r3, r3, #1
 801829a:	089b      	lsrpl	r3, r3, #2
 801829c:	6003      	strmi	r3, [r0, #0]
 801829e:	2201      	movmi	r2, #1
 80182a0:	bf5c      	itt	pl
 80182a2:	6003      	strpl	r3, [r0, #0]
 80182a4:	2202      	movpl	r2, #2
 80182a6:	4610      	mov	r0, r2
 80182a8:	4770      	bx	lr
 80182aa:	b299      	uxth	r1, r3
 80182ac:	b909      	cbnz	r1, 80182b2 <__lo0bits+0x2a>
 80182ae:	0c1b      	lsrs	r3, r3, #16
 80182b0:	2210      	movs	r2, #16
 80182b2:	b2d9      	uxtb	r1, r3
 80182b4:	b909      	cbnz	r1, 80182ba <__lo0bits+0x32>
 80182b6:	3208      	adds	r2, #8
 80182b8:	0a1b      	lsrs	r3, r3, #8
 80182ba:	0719      	lsls	r1, r3, #28
 80182bc:	bf04      	itt	eq
 80182be:	091b      	lsreq	r3, r3, #4
 80182c0:	3204      	addeq	r2, #4
 80182c2:	0799      	lsls	r1, r3, #30
 80182c4:	bf04      	itt	eq
 80182c6:	089b      	lsreq	r3, r3, #2
 80182c8:	3202      	addeq	r2, #2
 80182ca:	07d9      	lsls	r1, r3, #31
 80182cc:	d403      	bmi.n	80182d6 <__lo0bits+0x4e>
 80182ce:	085b      	lsrs	r3, r3, #1
 80182d0:	f102 0201 	add.w	r2, r2, #1
 80182d4:	d003      	beq.n	80182de <__lo0bits+0x56>
 80182d6:	6003      	str	r3, [r0, #0]
 80182d8:	e7e5      	b.n	80182a6 <__lo0bits+0x1e>
 80182da:	2200      	movs	r2, #0
 80182dc:	e7e3      	b.n	80182a6 <__lo0bits+0x1e>
 80182de:	2220      	movs	r2, #32
 80182e0:	e7e1      	b.n	80182a6 <__lo0bits+0x1e>
	...

080182e4 <__i2b>:
 80182e4:	b510      	push	{r4, lr}
 80182e6:	460c      	mov	r4, r1
 80182e8:	2101      	movs	r1, #1
 80182ea:	f7ff febb 	bl	8018064 <_Balloc>
 80182ee:	4602      	mov	r2, r0
 80182f0:	b928      	cbnz	r0, 80182fe <__i2b+0x1a>
 80182f2:	4b05      	ldr	r3, [pc, #20]	; (8018308 <__i2b+0x24>)
 80182f4:	4805      	ldr	r0, [pc, #20]	; (801830c <__i2b+0x28>)
 80182f6:	f240 1145 	movw	r1, #325	; 0x145
 80182fa:	f001 fc41 	bl	8019b80 <__assert_func>
 80182fe:	2301      	movs	r3, #1
 8018300:	6144      	str	r4, [r0, #20]
 8018302:	6103      	str	r3, [r0, #16]
 8018304:	bd10      	pop	{r4, pc}
 8018306:	bf00      	nop
 8018308:	0801d68d 	.word	0x0801d68d
 801830c:	0801d69e 	.word	0x0801d69e

08018310 <__multiply>:
 8018310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018314:	4691      	mov	r9, r2
 8018316:	690a      	ldr	r2, [r1, #16]
 8018318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801831c:	429a      	cmp	r2, r3
 801831e:	bfb8      	it	lt
 8018320:	460b      	movlt	r3, r1
 8018322:	460c      	mov	r4, r1
 8018324:	bfbc      	itt	lt
 8018326:	464c      	movlt	r4, r9
 8018328:	4699      	movlt	r9, r3
 801832a:	6927      	ldr	r7, [r4, #16]
 801832c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018330:	68a3      	ldr	r3, [r4, #8]
 8018332:	6861      	ldr	r1, [r4, #4]
 8018334:	eb07 060a 	add.w	r6, r7, sl
 8018338:	42b3      	cmp	r3, r6
 801833a:	b085      	sub	sp, #20
 801833c:	bfb8      	it	lt
 801833e:	3101      	addlt	r1, #1
 8018340:	f7ff fe90 	bl	8018064 <_Balloc>
 8018344:	b930      	cbnz	r0, 8018354 <__multiply+0x44>
 8018346:	4602      	mov	r2, r0
 8018348:	4b44      	ldr	r3, [pc, #272]	; (801845c <__multiply+0x14c>)
 801834a:	4845      	ldr	r0, [pc, #276]	; (8018460 <__multiply+0x150>)
 801834c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018350:	f001 fc16 	bl	8019b80 <__assert_func>
 8018354:	f100 0514 	add.w	r5, r0, #20
 8018358:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801835c:	462b      	mov	r3, r5
 801835e:	2200      	movs	r2, #0
 8018360:	4543      	cmp	r3, r8
 8018362:	d321      	bcc.n	80183a8 <__multiply+0x98>
 8018364:	f104 0314 	add.w	r3, r4, #20
 8018368:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801836c:	f109 0314 	add.w	r3, r9, #20
 8018370:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018374:	9202      	str	r2, [sp, #8]
 8018376:	1b3a      	subs	r2, r7, r4
 8018378:	3a15      	subs	r2, #21
 801837a:	f022 0203 	bic.w	r2, r2, #3
 801837e:	3204      	adds	r2, #4
 8018380:	f104 0115 	add.w	r1, r4, #21
 8018384:	428f      	cmp	r7, r1
 8018386:	bf38      	it	cc
 8018388:	2204      	movcc	r2, #4
 801838a:	9201      	str	r2, [sp, #4]
 801838c:	9a02      	ldr	r2, [sp, #8]
 801838e:	9303      	str	r3, [sp, #12]
 8018390:	429a      	cmp	r2, r3
 8018392:	d80c      	bhi.n	80183ae <__multiply+0x9e>
 8018394:	2e00      	cmp	r6, #0
 8018396:	dd03      	ble.n	80183a0 <__multiply+0x90>
 8018398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801839c:	2b00      	cmp	r3, #0
 801839e:	d05b      	beq.n	8018458 <__multiply+0x148>
 80183a0:	6106      	str	r6, [r0, #16]
 80183a2:	b005      	add	sp, #20
 80183a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183a8:	f843 2b04 	str.w	r2, [r3], #4
 80183ac:	e7d8      	b.n	8018360 <__multiply+0x50>
 80183ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80183b2:	f1ba 0f00 	cmp.w	sl, #0
 80183b6:	d024      	beq.n	8018402 <__multiply+0xf2>
 80183b8:	f104 0e14 	add.w	lr, r4, #20
 80183bc:	46a9      	mov	r9, r5
 80183be:	f04f 0c00 	mov.w	ip, #0
 80183c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80183c6:	f8d9 1000 	ldr.w	r1, [r9]
 80183ca:	fa1f fb82 	uxth.w	fp, r2
 80183ce:	b289      	uxth	r1, r1
 80183d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80183d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80183d8:	f8d9 2000 	ldr.w	r2, [r9]
 80183dc:	4461      	add	r1, ip
 80183de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80183e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80183e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80183ea:	b289      	uxth	r1, r1
 80183ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80183f0:	4577      	cmp	r7, lr
 80183f2:	f849 1b04 	str.w	r1, [r9], #4
 80183f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80183fa:	d8e2      	bhi.n	80183c2 <__multiply+0xb2>
 80183fc:	9a01      	ldr	r2, [sp, #4]
 80183fe:	f845 c002 	str.w	ip, [r5, r2]
 8018402:	9a03      	ldr	r2, [sp, #12]
 8018404:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018408:	3304      	adds	r3, #4
 801840a:	f1b9 0f00 	cmp.w	r9, #0
 801840e:	d021      	beq.n	8018454 <__multiply+0x144>
 8018410:	6829      	ldr	r1, [r5, #0]
 8018412:	f104 0c14 	add.w	ip, r4, #20
 8018416:	46ae      	mov	lr, r5
 8018418:	f04f 0a00 	mov.w	sl, #0
 801841c:	f8bc b000 	ldrh.w	fp, [ip]
 8018420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018424:	fb09 220b 	mla	r2, r9, fp, r2
 8018428:	4452      	add	r2, sl
 801842a:	b289      	uxth	r1, r1
 801842c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018430:	f84e 1b04 	str.w	r1, [lr], #4
 8018434:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018438:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801843c:	f8be 1000 	ldrh.w	r1, [lr]
 8018440:	fb09 110a 	mla	r1, r9, sl, r1
 8018444:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018448:	4567      	cmp	r7, ip
 801844a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801844e:	d8e5      	bhi.n	801841c <__multiply+0x10c>
 8018450:	9a01      	ldr	r2, [sp, #4]
 8018452:	50a9      	str	r1, [r5, r2]
 8018454:	3504      	adds	r5, #4
 8018456:	e799      	b.n	801838c <__multiply+0x7c>
 8018458:	3e01      	subs	r6, #1
 801845a:	e79b      	b.n	8018394 <__multiply+0x84>
 801845c:	0801d68d 	.word	0x0801d68d
 8018460:	0801d69e 	.word	0x0801d69e

08018464 <__pow5mult>:
 8018464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018468:	4615      	mov	r5, r2
 801846a:	f012 0203 	ands.w	r2, r2, #3
 801846e:	4606      	mov	r6, r0
 8018470:	460f      	mov	r7, r1
 8018472:	d007      	beq.n	8018484 <__pow5mult+0x20>
 8018474:	4c25      	ldr	r4, [pc, #148]	; (801850c <__pow5mult+0xa8>)
 8018476:	3a01      	subs	r2, #1
 8018478:	2300      	movs	r3, #0
 801847a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801847e:	f7ff fe53 	bl	8018128 <__multadd>
 8018482:	4607      	mov	r7, r0
 8018484:	10ad      	asrs	r5, r5, #2
 8018486:	d03d      	beq.n	8018504 <__pow5mult+0xa0>
 8018488:	69f4      	ldr	r4, [r6, #28]
 801848a:	b97c      	cbnz	r4, 80184ac <__pow5mult+0x48>
 801848c:	2010      	movs	r0, #16
 801848e:	f7ff fd35 	bl	8017efc <malloc>
 8018492:	4602      	mov	r2, r0
 8018494:	61f0      	str	r0, [r6, #28]
 8018496:	b928      	cbnz	r0, 80184a4 <__pow5mult+0x40>
 8018498:	4b1d      	ldr	r3, [pc, #116]	; (8018510 <__pow5mult+0xac>)
 801849a:	481e      	ldr	r0, [pc, #120]	; (8018514 <__pow5mult+0xb0>)
 801849c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80184a0:	f001 fb6e 	bl	8019b80 <__assert_func>
 80184a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80184a8:	6004      	str	r4, [r0, #0]
 80184aa:	60c4      	str	r4, [r0, #12]
 80184ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80184b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80184b4:	b94c      	cbnz	r4, 80184ca <__pow5mult+0x66>
 80184b6:	f240 2171 	movw	r1, #625	; 0x271
 80184ba:	4630      	mov	r0, r6
 80184bc:	f7ff ff12 	bl	80182e4 <__i2b>
 80184c0:	2300      	movs	r3, #0
 80184c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80184c6:	4604      	mov	r4, r0
 80184c8:	6003      	str	r3, [r0, #0]
 80184ca:	f04f 0900 	mov.w	r9, #0
 80184ce:	07eb      	lsls	r3, r5, #31
 80184d0:	d50a      	bpl.n	80184e8 <__pow5mult+0x84>
 80184d2:	4639      	mov	r1, r7
 80184d4:	4622      	mov	r2, r4
 80184d6:	4630      	mov	r0, r6
 80184d8:	f7ff ff1a 	bl	8018310 <__multiply>
 80184dc:	4639      	mov	r1, r7
 80184de:	4680      	mov	r8, r0
 80184e0:	4630      	mov	r0, r6
 80184e2:	f7ff fdff 	bl	80180e4 <_Bfree>
 80184e6:	4647      	mov	r7, r8
 80184e8:	106d      	asrs	r5, r5, #1
 80184ea:	d00b      	beq.n	8018504 <__pow5mult+0xa0>
 80184ec:	6820      	ldr	r0, [r4, #0]
 80184ee:	b938      	cbnz	r0, 8018500 <__pow5mult+0x9c>
 80184f0:	4622      	mov	r2, r4
 80184f2:	4621      	mov	r1, r4
 80184f4:	4630      	mov	r0, r6
 80184f6:	f7ff ff0b 	bl	8018310 <__multiply>
 80184fa:	6020      	str	r0, [r4, #0]
 80184fc:	f8c0 9000 	str.w	r9, [r0]
 8018500:	4604      	mov	r4, r0
 8018502:	e7e4      	b.n	80184ce <__pow5mult+0x6a>
 8018504:	4638      	mov	r0, r7
 8018506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801850a:	bf00      	nop
 801850c:	0801d7e8 	.word	0x0801d7e8
 8018510:	0801d61e 	.word	0x0801d61e
 8018514:	0801d69e 	.word	0x0801d69e

08018518 <__lshift>:
 8018518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801851c:	460c      	mov	r4, r1
 801851e:	6849      	ldr	r1, [r1, #4]
 8018520:	6923      	ldr	r3, [r4, #16]
 8018522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018526:	68a3      	ldr	r3, [r4, #8]
 8018528:	4607      	mov	r7, r0
 801852a:	4691      	mov	r9, r2
 801852c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018530:	f108 0601 	add.w	r6, r8, #1
 8018534:	42b3      	cmp	r3, r6
 8018536:	db0b      	blt.n	8018550 <__lshift+0x38>
 8018538:	4638      	mov	r0, r7
 801853a:	f7ff fd93 	bl	8018064 <_Balloc>
 801853e:	4605      	mov	r5, r0
 8018540:	b948      	cbnz	r0, 8018556 <__lshift+0x3e>
 8018542:	4602      	mov	r2, r0
 8018544:	4b28      	ldr	r3, [pc, #160]	; (80185e8 <__lshift+0xd0>)
 8018546:	4829      	ldr	r0, [pc, #164]	; (80185ec <__lshift+0xd4>)
 8018548:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801854c:	f001 fb18 	bl	8019b80 <__assert_func>
 8018550:	3101      	adds	r1, #1
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	e7ee      	b.n	8018534 <__lshift+0x1c>
 8018556:	2300      	movs	r3, #0
 8018558:	f100 0114 	add.w	r1, r0, #20
 801855c:	f100 0210 	add.w	r2, r0, #16
 8018560:	4618      	mov	r0, r3
 8018562:	4553      	cmp	r3, sl
 8018564:	db33      	blt.n	80185ce <__lshift+0xb6>
 8018566:	6920      	ldr	r0, [r4, #16]
 8018568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801856c:	f104 0314 	add.w	r3, r4, #20
 8018570:	f019 091f 	ands.w	r9, r9, #31
 8018574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801857c:	d02b      	beq.n	80185d6 <__lshift+0xbe>
 801857e:	f1c9 0e20 	rsb	lr, r9, #32
 8018582:	468a      	mov	sl, r1
 8018584:	2200      	movs	r2, #0
 8018586:	6818      	ldr	r0, [r3, #0]
 8018588:	fa00 f009 	lsl.w	r0, r0, r9
 801858c:	4310      	orrs	r0, r2
 801858e:	f84a 0b04 	str.w	r0, [sl], #4
 8018592:	f853 2b04 	ldr.w	r2, [r3], #4
 8018596:	459c      	cmp	ip, r3
 8018598:	fa22 f20e 	lsr.w	r2, r2, lr
 801859c:	d8f3      	bhi.n	8018586 <__lshift+0x6e>
 801859e:	ebac 0304 	sub.w	r3, ip, r4
 80185a2:	3b15      	subs	r3, #21
 80185a4:	f023 0303 	bic.w	r3, r3, #3
 80185a8:	3304      	adds	r3, #4
 80185aa:	f104 0015 	add.w	r0, r4, #21
 80185ae:	4584      	cmp	ip, r0
 80185b0:	bf38      	it	cc
 80185b2:	2304      	movcc	r3, #4
 80185b4:	50ca      	str	r2, [r1, r3]
 80185b6:	b10a      	cbz	r2, 80185bc <__lshift+0xa4>
 80185b8:	f108 0602 	add.w	r6, r8, #2
 80185bc:	3e01      	subs	r6, #1
 80185be:	4638      	mov	r0, r7
 80185c0:	612e      	str	r6, [r5, #16]
 80185c2:	4621      	mov	r1, r4
 80185c4:	f7ff fd8e 	bl	80180e4 <_Bfree>
 80185c8:	4628      	mov	r0, r5
 80185ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80185d2:	3301      	adds	r3, #1
 80185d4:	e7c5      	b.n	8018562 <__lshift+0x4a>
 80185d6:	3904      	subs	r1, #4
 80185d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80185dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80185e0:	459c      	cmp	ip, r3
 80185e2:	d8f9      	bhi.n	80185d8 <__lshift+0xc0>
 80185e4:	e7ea      	b.n	80185bc <__lshift+0xa4>
 80185e6:	bf00      	nop
 80185e8:	0801d68d 	.word	0x0801d68d
 80185ec:	0801d69e 	.word	0x0801d69e

080185f0 <__mcmp>:
 80185f0:	b530      	push	{r4, r5, lr}
 80185f2:	6902      	ldr	r2, [r0, #16]
 80185f4:	690c      	ldr	r4, [r1, #16]
 80185f6:	1b12      	subs	r2, r2, r4
 80185f8:	d10e      	bne.n	8018618 <__mcmp+0x28>
 80185fa:	f100 0314 	add.w	r3, r0, #20
 80185fe:	3114      	adds	r1, #20
 8018600:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018608:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801860c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018610:	42a5      	cmp	r5, r4
 8018612:	d003      	beq.n	801861c <__mcmp+0x2c>
 8018614:	d305      	bcc.n	8018622 <__mcmp+0x32>
 8018616:	2201      	movs	r2, #1
 8018618:	4610      	mov	r0, r2
 801861a:	bd30      	pop	{r4, r5, pc}
 801861c:	4283      	cmp	r3, r0
 801861e:	d3f3      	bcc.n	8018608 <__mcmp+0x18>
 8018620:	e7fa      	b.n	8018618 <__mcmp+0x28>
 8018622:	f04f 32ff 	mov.w	r2, #4294967295
 8018626:	e7f7      	b.n	8018618 <__mcmp+0x28>

08018628 <__mdiff>:
 8018628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801862c:	460c      	mov	r4, r1
 801862e:	4606      	mov	r6, r0
 8018630:	4611      	mov	r1, r2
 8018632:	4620      	mov	r0, r4
 8018634:	4690      	mov	r8, r2
 8018636:	f7ff ffdb 	bl	80185f0 <__mcmp>
 801863a:	1e05      	subs	r5, r0, #0
 801863c:	d110      	bne.n	8018660 <__mdiff+0x38>
 801863e:	4629      	mov	r1, r5
 8018640:	4630      	mov	r0, r6
 8018642:	f7ff fd0f 	bl	8018064 <_Balloc>
 8018646:	b930      	cbnz	r0, 8018656 <__mdiff+0x2e>
 8018648:	4b3a      	ldr	r3, [pc, #232]	; (8018734 <__mdiff+0x10c>)
 801864a:	4602      	mov	r2, r0
 801864c:	f240 2137 	movw	r1, #567	; 0x237
 8018650:	4839      	ldr	r0, [pc, #228]	; (8018738 <__mdiff+0x110>)
 8018652:	f001 fa95 	bl	8019b80 <__assert_func>
 8018656:	2301      	movs	r3, #1
 8018658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801865c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018660:	bfa4      	itt	ge
 8018662:	4643      	movge	r3, r8
 8018664:	46a0      	movge	r8, r4
 8018666:	4630      	mov	r0, r6
 8018668:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801866c:	bfa6      	itte	ge
 801866e:	461c      	movge	r4, r3
 8018670:	2500      	movge	r5, #0
 8018672:	2501      	movlt	r5, #1
 8018674:	f7ff fcf6 	bl	8018064 <_Balloc>
 8018678:	b920      	cbnz	r0, 8018684 <__mdiff+0x5c>
 801867a:	4b2e      	ldr	r3, [pc, #184]	; (8018734 <__mdiff+0x10c>)
 801867c:	4602      	mov	r2, r0
 801867e:	f240 2145 	movw	r1, #581	; 0x245
 8018682:	e7e5      	b.n	8018650 <__mdiff+0x28>
 8018684:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018688:	6926      	ldr	r6, [r4, #16]
 801868a:	60c5      	str	r5, [r0, #12]
 801868c:	f104 0914 	add.w	r9, r4, #20
 8018690:	f108 0514 	add.w	r5, r8, #20
 8018694:	f100 0e14 	add.w	lr, r0, #20
 8018698:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801869c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80186a0:	f108 0210 	add.w	r2, r8, #16
 80186a4:	46f2      	mov	sl, lr
 80186a6:	2100      	movs	r1, #0
 80186a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80186ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80186b0:	fa11 f88b 	uxtah	r8, r1, fp
 80186b4:	b299      	uxth	r1, r3
 80186b6:	0c1b      	lsrs	r3, r3, #16
 80186b8:	eba8 0801 	sub.w	r8, r8, r1
 80186bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80186c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80186c4:	fa1f f888 	uxth.w	r8, r8
 80186c8:	1419      	asrs	r1, r3, #16
 80186ca:	454e      	cmp	r6, r9
 80186cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80186d0:	f84a 3b04 	str.w	r3, [sl], #4
 80186d4:	d8e8      	bhi.n	80186a8 <__mdiff+0x80>
 80186d6:	1b33      	subs	r3, r6, r4
 80186d8:	3b15      	subs	r3, #21
 80186da:	f023 0303 	bic.w	r3, r3, #3
 80186de:	3304      	adds	r3, #4
 80186e0:	3415      	adds	r4, #21
 80186e2:	42a6      	cmp	r6, r4
 80186e4:	bf38      	it	cc
 80186e6:	2304      	movcc	r3, #4
 80186e8:	441d      	add	r5, r3
 80186ea:	4473      	add	r3, lr
 80186ec:	469e      	mov	lr, r3
 80186ee:	462e      	mov	r6, r5
 80186f0:	4566      	cmp	r6, ip
 80186f2:	d30e      	bcc.n	8018712 <__mdiff+0xea>
 80186f4:	f10c 0203 	add.w	r2, ip, #3
 80186f8:	1b52      	subs	r2, r2, r5
 80186fa:	f022 0203 	bic.w	r2, r2, #3
 80186fe:	3d03      	subs	r5, #3
 8018700:	45ac      	cmp	ip, r5
 8018702:	bf38      	it	cc
 8018704:	2200      	movcc	r2, #0
 8018706:	4413      	add	r3, r2
 8018708:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801870c:	b17a      	cbz	r2, 801872e <__mdiff+0x106>
 801870e:	6107      	str	r7, [r0, #16]
 8018710:	e7a4      	b.n	801865c <__mdiff+0x34>
 8018712:	f856 8b04 	ldr.w	r8, [r6], #4
 8018716:	fa11 f288 	uxtah	r2, r1, r8
 801871a:	1414      	asrs	r4, r2, #16
 801871c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018720:	b292      	uxth	r2, r2
 8018722:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018726:	f84e 2b04 	str.w	r2, [lr], #4
 801872a:	1421      	asrs	r1, r4, #16
 801872c:	e7e0      	b.n	80186f0 <__mdiff+0xc8>
 801872e:	3f01      	subs	r7, #1
 8018730:	e7ea      	b.n	8018708 <__mdiff+0xe0>
 8018732:	bf00      	nop
 8018734:	0801d68d 	.word	0x0801d68d
 8018738:	0801d69e 	.word	0x0801d69e

0801873c <__ulp>:
 801873c:	b082      	sub	sp, #8
 801873e:	ed8d 0b00 	vstr	d0, [sp]
 8018742:	9a01      	ldr	r2, [sp, #4]
 8018744:	4b0f      	ldr	r3, [pc, #60]	; (8018784 <__ulp+0x48>)
 8018746:	4013      	ands	r3, r2
 8018748:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801874c:	2b00      	cmp	r3, #0
 801874e:	dc08      	bgt.n	8018762 <__ulp+0x26>
 8018750:	425b      	negs	r3, r3
 8018752:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8018756:	ea4f 5223 	mov.w	r2, r3, asr #20
 801875a:	da04      	bge.n	8018766 <__ulp+0x2a>
 801875c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018760:	4113      	asrs	r3, r2
 8018762:	2200      	movs	r2, #0
 8018764:	e008      	b.n	8018778 <__ulp+0x3c>
 8018766:	f1a2 0314 	sub.w	r3, r2, #20
 801876a:	2b1e      	cmp	r3, #30
 801876c:	bfda      	itte	le
 801876e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018772:	40da      	lsrle	r2, r3
 8018774:	2201      	movgt	r2, #1
 8018776:	2300      	movs	r3, #0
 8018778:	4619      	mov	r1, r3
 801877a:	4610      	mov	r0, r2
 801877c:	ec41 0b10 	vmov	d0, r0, r1
 8018780:	b002      	add	sp, #8
 8018782:	4770      	bx	lr
 8018784:	7ff00000 	.word	0x7ff00000

08018788 <__b2d>:
 8018788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801878c:	6906      	ldr	r6, [r0, #16]
 801878e:	f100 0814 	add.w	r8, r0, #20
 8018792:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018796:	1f37      	subs	r7, r6, #4
 8018798:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801879c:	4610      	mov	r0, r2
 801879e:	f7ff fd53 	bl	8018248 <__hi0bits>
 80187a2:	f1c0 0320 	rsb	r3, r0, #32
 80187a6:	280a      	cmp	r0, #10
 80187a8:	600b      	str	r3, [r1, #0]
 80187aa:	491b      	ldr	r1, [pc, #108]	; (8018818 <__b2d+0x90>)
 80187ac:	dc15      	bgt.n	80187da <__b2d+0x52>
 80187ae:	f1c0 0c0b 	rsb	ip, r0, #11
 80187b2:	fa22 f30c 	lsr.w	r3, r2, ip
 80187b6:	45b8      	cmp	r8, r7
 80187b8:	ea43 0501 	orr.w	r5, r3, r1
 80187bc:	bf34      	ite	cc
 80187be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80187c2:	2300      	movcs	r3, #0
 80187c4:	3015      	adds	r0, #21
 80187c6:	fa02 f000 	lsl.w	r0, r2, r0
 80187ca:	fa23 f30c 	lsr.w	r3, r3, ip
 80187ce:	4303      	orrs	r3, r0
 80187d0:	461c      	mov	r4, r3
 80187d2:	ec45 4b10 	vmov	d0, r4, r5
 80187d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187da:	45b8      	cmp	r8, r7
 80187dc:	bf3a      	itte	cc
 80187de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80187e2:	f1a6 0708 	subcc.w	r7, r6, #8
 80187e6:	2300      	movcs	r3, #0
 80187e8:	380b      	subs	r0, #11
 80187ea:	d012      	beq.n	8018812 <__b2d+0x8a>
 80187ec:	f1c0 0120 	rsb	r1, r0, #32
 80187f0:	fa23 f401 	lsr.w	r4, r3, r1
 80187f4:	4082      	lsls	r2, r0
 80187f6:	4322      	orrs	r2, r4
 80187f8:	4547      	cmp	r7, r8
 80187fa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80187fe:	bf8c      	ite	hi
 8018800:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018804:	2200      	movls	r2, #0
 8018806:	4083      	lsls	r3, r0
 8018808:	40ca      	lsrs	r2, r1
 801880a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801880e:	4313      	orrs	r3, r2
 8018810:	e7de      	b.n	80187d0 <__b2d+0x48>
 8018812:	ea42 0501 	orr.w	r5, r2, r1
 8018816:	e7db      	b.n	80187d0 <__b2d+0x48>
 8018818:	3ff00000 	.word	0x3ff00000

0801881c <__d2b>:
 801881c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018820:	460f      	mov	r7, r1
 8018822:	2101      	movs	r1, #1
 8018824:	ec59 8b10 	vmov	r8, r9, d0
 8018828:	4616      	mov	r6, r2
 801882a:	f7ff fc1b 	bl	8018064 <_Balloc>
 801882e:	4604      	mov	r4, r0
 8018830:	b930      	cbnz	r0, 8018840 <__d2b+0x24>
 8018832:	4602      	mov	r2, r0
 8018834:	4b24      	ldr	r3, [pc, #144]	; (80188c8 <__d2b+0xac>)
 8018836:	4825      	ldr	r0, [pc, #148]	; (80188cc <__d2b+0xb0>)
 8018838:	f240 310f 	movw	r1, #783	; 0x30f
 801883c:	f001 f9a0 	bl	8019b80 <__assert_func>
 8018840:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018848:	bb2d      	cbnz	r5, 8018896 <__d2b+0x7a>
 801884a:	9301      	str	r3, [sp, #4]
 801884c:	f1b8 0300 	subs.w	r3, r8, #0
 8018850:	d026      	beq.n	80188a0 <__d2b+0x84>
 8018852:	4668      	mov	r0, sp
 8018854:	9300      	str	r3, [sp, #0]
 8018856:	f7ff fd17 	bl	8018288 <__lo0bits>
 801885a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801885e:	b1e8      	cbz	r0, 801889c <__d2b+0x80>
 8018860:	f1c0 0320 	rsb	r3, r0, #32
 8018864:	fa02 f303 	lsl.w	r3, r2, r3
 8018868:	430b      	orrs	r3, r1
 801886a:	40c2      	lsrs	r2, r0
 801886c:	6163      	str	r3, [r4, #20]
 801886e:	9201      	str	r2, [sp, #4]
 8018870:	9b01      	ldr	r3, [sp, #4]
 8018872:	61a3      	str	r3, [r4, #24]
 8018874:	2b00      	cmp	r3, #0
 8018876:	bf14      	ite	ne
 8018878:	2202      	movne	r2, #2
 801887a:	2201      	moveq	r2, #1
 801887c:	6122      	str	r2, [r4, #16]
 801887e:	b1bd      	cbz	r5, 80188b0 <__d2b+0x94>
 8018880:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018884:	4405      	add	r5, r0
 8018886:	603d      	str	r5, [r7, #0]
 8018888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801888c:	6030      	str	r0, [r6, #0]
 801888e:	4620      	mov	r0, r4
 8018890:	b003      	add	sp, #12
 8018892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801889a:	e7d6      	b.n	801884a <__d2b+0x2e>
 801889c:	6161      	str	r1, [r4, #20]
 801889e:	e7e7      	b.n	8018870 <__d2b+0x54>
 80188a0:	a801      	add	r0, sp, #4
 80188a2:	f7ff fcf1 	bl	8018288 <__lo0bits>
 80188a6:	9b01      	ldr	r3, [sp, #4]
 80188a8:	6163      	str	r3, [r4, #20]
 80188aa:	3020      	adds	r0, #32
 80188ac:	2201      	movs	r2, #1
 80188ae:	e7e5      	b.n	801887c <__d2b+0x60>
 80188b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80188b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80188b8:	6038      	str	r0, [r7, #0]
 80188ba:	6918      	ldr	r0, [r3, #16]
 80188bc:	f7ff fcc4 	bl	8018248 <__hi0bits>
 80188c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80188c4:	e7e2      	b.n	801888c <__d2b+0x70>
 80188c6:	bf00      	nop
 80188c8:	0801d68d 	.word	0x0801d68d
 80188cc:	0801d69e 	.word	0x0801d69e

080188d0 <__ratio>:
 80188d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	4688      	mov	r8, r1
 80188d6:	4669      	mov	r1, sp
 80188d8:	4681      	mov	r9, r0
 80188da:	f7ff ff55 	bl	8018788 <__b2d>
 80188de:	a901      	add	r1, sp, #4
 80188e0:	4640      	mov	r0, r8
 80188e2:	ec55 4b10 	vmov	r4, r5, d0
 80188e6:	f7ff ff4f 	bl	8018788 <__b2d>
 80188ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80188ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80188f2:	eba3 0c02 	sub.w	ip, r3, r2
 80188f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80188fa:	1a9b      	subs	r3, r3, r2
 80188fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018900:	ec51 0b10 	vmov	r0, r1, d0
 8018904:	2b00      	cmp	r3, #0
 8018906:	bfd6      	itet	le
 8018908:	460a      	movle	r2, r1
 801890a:	462a      	movgt	r2, r5
 801890c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018910:	468b      	mov	fp, r1
 8018912:	462f      	mov	r7, r5
 8018914:	bfd4      	ite	le
 8018916:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801891a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801891e:	4620      	mov	r0, r4
 8018920:	ee10 2a10 	vmov	r2, s0
 8018924:	465b      	mov	r3, fp
 8018926:	4639      	mov	r1, r7
 8018928:	f7e7 ffb8 	bl	800089c <__aeabi_ddiv>
 801892c:	ec41 0b10 	vmov	d0, r0, r1
 8018930:	b003      	add	sp, #12
 8018932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018936 <__copybits>:
 8018936:	3901      	subs	r1, #1
 8018938:	b570      	push	{r4, r5, r6, lr}
 801893a:	1149      	asrs	r1, r1, #5
 801893c:	6914      	ldr	r4, [r2, #16]
 801893e:	3101      	adds	r1, #1
 8018940:	f102 0314 	add.w	r3, r2, #20
 8018944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018948:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801894c:	1f05      	subs	r5, r0, #4
 801894e:	42a3      	cmp	r3, r4
 8018950:	d30c      	bcc.n	801896c <__copybits+0x36>
 8018952:	1aa3      	subs	r3, r4, r2
 8018954:	3b11      	subs	r3, #17
 8018956:	f023 0303 	bic.w	r3, r3, #3
 801895a:	3211      	adds	r2, #17
 801895c:	42a2      	cmp	r2, r4
 801895e:	bf88      	it	hi
 8018960:	2300      	movhi	r3, #0
 8018962:	4418      	add	r0, r3
 8018964:	2300      	movs	r3, #0
 8018966:	4288      	cmp	r0, r1
 8018968:	d305      	bcc.n	8018976 <__copybits+0x40>
 801896a:	bd70      	pop	{r4, r5, r6, pc}
 801896c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018970:	f845 6f04 	str.w	r6, [r5, #4]!
 8018974:	e7eb      	b.n	801894e <__copybits+0x18>
 8018976:	f840 3b04 	str.w	r3, [r0], #4
 801897a:	e7f4      	b.n	8018966 <__copybits+0x30>

0801897c <__any_on>:
 801897c:	f100 0214 	add.w	r2, r0, #20
 8018980:	6900      	ldr	r0, [r0, #16]
 8018982:	114b      	asrs	r3, r1, #5
 8018984:	4298      	cmp	r0, r3
 8018986:	b510      	push	{r4, lr}
 8018988:	db11      	blt.n	80189ae <__any_on+0x32>
 801898a:	dd0a      	ble.n	80189a2 <__any_on+0x26>
 801898c:	f011 011f 	ands.w	r1, r1, #31
 8018990:	d007      	beq.n	80189a2 <__any_on+0x26>
 8018992:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018996:	fa24 f001 	lsr.w	r0, r4, r1
 801899a:	fa00 f101 	lsl.w	r1, r0, r1
 801899e:	428c      	cmp	r4, r1
 80189a0:	d10b      	bne.n	80189ba <__any_on+0x3e>
 80189a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80189a6:	4293      	cmp	r3, r2
 80189a8:	d803      	bhi.n	80189b2 <__any_on+0x36>
 80189aa:	2000      	movs	r0, #0
 80189ac:	bd10      	pop	{r4, pc}
 80189ae:	4603      	mov	r3, r0
 80189b0:	e7f7      	b.n	80189a2 <__any_on+0x26>
 80189b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189b6:	2900      	cmp	r1, #0
 80189b8:	d0f5      	beq.n	80189a6 <__any_on+0x2a>
 80189ba:	2001      	movs	r0, #1
 80189bc:	e7f6      	b.n	80189ac <__any_on+0x30>

080189be <sulp>:
 80189be:	b570      	push	{r4, r5, r6, lr}
 80189c0:	4604      	mov	r4, r0
 80189c2:	460d      	mov	r5, r1
 80189c4:	ec45 4b10 	vmov	d0, r4, r5
 80189c8:	4616      	mov	r6, r2
 80189ca:	f7ff feb7 	bl	801873c <__ulp>
 80189ce:	ec51 0b10 	vmov	r0, r1, d0
 80189d2:	b17e      	cbz	r6, 80189f4 <sulp+0x36>
 80189d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80189d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80189dc:	2b00      	cmp	r3, #0
 80189de:	dd09      	ble.n	80189f4 <sulp+0x36>
 80189e0:	051b      	lsls	r3, r3, #20
 80189e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80189e6:	2400      	movs	r4, #0
 80189e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80189ec:	4622      	mov	r2, r4
 80189ee:	462b      	mov	r3, r5
 80189f0:	f7e7 fe2a 	bl	8000648 <__aeabi_dmul>
 80189f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080189f8 <_strtod_l>:
 80189f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189fc:	ed2d 8b02 	vpush	{d8}
 8018a00:	b09b      	sub	sp, #108	; 0x6c
 8018a02:	4604      	mov	r4, r0
 8018a04:	9213      	str	r2, [sp, #76]	; 0x4c
 8018a06:	2200      	movs	r2, #0
 8018a08:	9216      	str	r2, [sp, #88]	; 0x58
 8018a0a:	460d      	mov	r5, r1
 8018a0c:	f04f 0800 	mov.w	r8, #0
 8018a10:	f04f 0900 	mov.w	r9, #0
 8018a14:	460a      	mov	r2, r1
 8018a16:	9215      	str	r2, [sp, #84]	; 0x54
 8018a18:	7811      	ldrb	r1, [r2, #0]
 8018a1a:	292b      	cmp	r1, #43	; 0x2b
 8018a1c:	d04c      	beq.n	8018ab8 <_strtod_l+0xc0>
 8018a1e:	d83a      	bhi.n	8018a96 <_strtod_l+0x9e>
 8018a20:	290d      	cmp	r1, #13
 8018a22:	d834      	bhi.n	8018a8e <_strtod_l+0x96>
 8018a24:	2908      	cmp	r1, #8
 8018a26:	d834      	bhi.n	8018a92 <_strtod_l+0x9a>
 8018a28:	2900      	cmp	r1, #0
 8018a2a:	d03d      	beq.n	8018aa8 <_strtod_l+0xb0>
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	920a      	str	r2, [sp, #40]	; 0x28
 8018a30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8018a32:	7832      	ldrb	r2, [r6, #0]
 8018a34:	2a30      	cmp	r2, #48	; 0x30
 8018a36:	f040 80b4 	bne.w	8018ba2 <_strtod_l+0x1aa>
 8018a3a:	7872      	ldrb	r2, [r6, #1]
 8018a3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8018a40:	2a58      	cmp	r2, #88	; 0x58
 8018a42:	d170      	bne.n	8018b26 <_strtod_l+0x12e>
 8018a44:	9302      	str	r3, [sp, #8]
 8018a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a48:	9301      	str	r3, [sp, #4]
 8018a4a:	ab16      	add	r3, sp, #88	; 0x58
 8018a4c:	9300      	str	r3, [sp, #0]
 8018a4e:	4a8e      	ldr	r2, [pc, #568]	; (8018c88 <_strtod_l+0x290>)
 8018a50:	ab17      	add	r3, sp, #92	; 0x5c
 8018a52:	a915      	add	r1, sp, #84	; 0x54
 8018a54:	4620      	mov	r0, r4
 8018a56:	f001 f92f 	bl	8019cb8 <__gethex>
 8018a5a:	f010 070f 	ands.w	r7, r0, #15
 8018a5e:	4605      	mov	r5, r0
 8018a60:	d005      	beq.n	8018a6e <_strtod_l+0x76>
 8018a62:	2f06      	cmp	r7, #6
 8018a64:	d12a      	bne.n	8018abc <_strtod_l+0xc4>
 8018a66:	3601      	adds	r6, #1
 8018a68:	2300      	movs	r3, #0
 8018a6a:	9615      	str	r6, [sp, #84]	; 0x54
 8018a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8018a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	f040 857f 	bne.w	8019574 <_strtod_l+0xb7c>
 8018a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a78:	b1db      	cbz	r3, 8018ab2 <_strtod_l+0xba>
 8018a7a:	4642      	mov	r2, r8
 8018a7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018a80:	ec43 2b10 	vmov	d0, r2, r3
 8018a84:	b01b      	add	sp, #108	; 0x6c
 8018a86:	ecbd 8b02 	vpop	{d8}
 8018a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a8e:	2920      	cmp	r1, #32
 8018a90:	d1cc      	bne.n	8018a2c <_strtod_l+0x34>
 8018a92:	3201      	adds	r2, #1
 8018a94:	e7bf      	b.n	8018a16 <_strtod_l+0x1e>
 8018a96:	292d      	cmp	r1, #45	; 0x2d
 8018a98:	d1c8      	bne.n	8018a2c <_strtod_l+0x34>
 8018a9a:	2101      	movs	r1, #1
 8018a9c:	910a      	str	r1, [sp, #40]	; 0x28
 8018a9e:	1c51      	adds	r1, r2, #1
 8018aa0:	9115      	str	r1, [sp, #84]	; 0x54
 8018aa2:	7852      	ldrb	r2, [r2, #1]
 8018aa4:	2a00      	cmp	r2, #0
 8018aa6:	d1c3      	bne.n	8018a30 <_strtod_l+0x38>
 8018aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018aaa:	9515      	str	r5, [sp, #84]	; 0x54
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	f040 855f 	bne.w	8019570 <_strtod_l+0xb78>
 8018ab2:	4642      	mov	r2, r8
 8018ab4:	464b      	mov	r3, r9
 8018ab6:	e7e3      	b.n	8018a80 <_strtod_l+0x88>
 8018ab8:	2100      	movs	r1, #0
 8018aba:	e7ef      	b.n	8018a9c <_strtod_l+0xa4>
 8018abc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018abe:	b13a      	cbz	r2, 8018ad0 <_strtod_l+0xd8>
 8018ac0:	2135      	movs	r1, #53	; 0x35
 8018ac2:	a818      	add	r0, sp, #96	; 0x60
 8018ac4:	f7ff ff37 	bl	8018936 <__copybits>
 8018ac8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018aca:	4620      	mov	r0, r4
 8018acc:	f7ff fb0a 	bl	80180e4 <_Bfree>
 8018ad0:	3f01      	subs	r7, #1
 8018ad2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018ad4:	2f04      	cmp	r7, #4
 8018ad6:	d806      	bhi.n	8018ae6 <_strtod_l+0xee>
 8018ad8:	e8df f007 	tbb	[pc, r7]
 8018adc:	201d0314 	.word	0x201d0314
 8018ae0:	14          	.byte	0x14
 8018ae1:	00          	.byte	0x00
 8018ae2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8018ae6:	05e9      	lsls	r1, r5, #23
 8018ae8:	bf48      	it	mi
 8018aea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8018aee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018af2:	0d1b      	lsrs	r3, r3, #20
 8018af4:	051b      	lsls	r3, r3, #20
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d1b9      	bne.n	8018a6e <_strtod_l+0x76>
 8018afa:	f7fe faf5 	bl	80170e8 <__errno>
 8018afe:	2322      	movs	r3, #34	; 0x22
 8018b00:	6003      	str	r3, [r0, #0]
 8018b02:	e7b4      	b.n	8018a6e <_strtod_l+0x76>
 8018b04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8018b08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018b0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018b10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018b14:	e7e7      	b.n	8018ae6 <_strtod_l+0xee>
 8018b16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018c90 <_strtod_l+0x298>
 8018b1a:	e7e4      	b.n	8018ae6 <_strtod_l+0xee>
 8018b1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018b20:	f04f 38ff 	mov.w	r8, #4294967295
 8018b24:	e7df      	b.n	8018ae6 <_strtod_l+0xee>
 8018b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b28:	1c5a      	adds	r2, r3, #1
 8018b2a:	9215      	str	r2, [sp, #84]	; 0x54
 8018b2c:	785b      	ldrb	r3, [r3, #1]
 8018b2e:	2b30      	cmp	r3, #48	; 0x30
 8018b30:	d0f9      	beq.n	8018b26 <_strtod_l+0x12e>
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d09b      	beq.n	8018a6e <_strtod_l+0x76>
 8018b36:	2301      	movs	r3, #1
 8018b38:	f04f 0a00 	mov.w	sl, #0
 8018b3c:	9304      	str	r3, [sp, #16]
 8018b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018b46:	46d3      	mov	fp, sl
 8018b48:	220a      	movs	r2, #10
 8018b4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018b4c:	7806      	ldrb	r6, [r0, #0]
 8018b4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018b52:	b2d9      	uxtb	r1, r3
 8018b54:	2909      	cmp	r1, #9
 8018b56:	d926      	bls.n	8018ba6 <_strtod_l+0x1ae>
 8018b58:	494c      	ldr	r1, [pc, #304]	; (8018c8c <_strtod_l+0x294>)
 8018b5a:	2201      	movs	r2, #1
 8018b5c:	f000 ffe6 	bl	8019b2c <strncmp>
 8018b60:	2800      	cmp	r0, #0
 8018b62:	d030      	beq.n	8018bc6 <_strtod_l+0x1ce>
 8018b64:	2000      	movs	r0, #0
 8018b66:	4632      	mov	r2, r6
 8018b68:	9005      	str	r0, [sp, #20]
 8018b6a:	465e      	mov	r6, fp
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	2a65      	cmp	r2, #101	; 0x65
 8018b70:	d001      	beq.n	8018b76 <_strtod_l+0x17e>
 8018b72:	2a45      	cmp	r2, #69	; 0x45
 8018b74:	d113      	bne.n	8018b9e <_strtod_l+0x1a6>
 8018b76:	b91e      	cbnz	r6, 8018b80 <_strtod_l+0x188>
 8018b78:	9a04      	ldr	r2, [sp, #16]
 8018b7a:	4302      	orrs	r2, r0
 8018b7c:	d094      	beq.n	8018aa8 <_strtod_l+0xb0>
 8018b7e:	2600      	movs	r6, #0
 8018b80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018b82:	1c6a      	adds	r2, r5, #1
 8018b84:	9215      	str	r2, [sp, #84]	; 0x54
 8018b86:	786a      	ldrb	r2, [r5, #1]
 8018b88:	2a2b      	cmp	r2, #43	; 0x2b
 8018b8a:	d074      	beq.n	8018c76 <_strtod_l+0x27e>
 8018b8c:	2a2d      	cmp	r2, #45	; 0x2d
 8018b8e:	d078      	beq.n	8018c82 <_strtod_l+0x28a>
 8018b90:	f04f 0c00 	mov.w	ip, #0
 8018b94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018b98:	2909      	cmp	r1, #9
 8018b9a:	d97f      	bls.n	8018c9c <_strtod_l+0x2a4>
 8018b9c:	9515      	str	r5, [sp, #84]	; 0x54
 8018b9e:	2700      	movs	r7, #0
 8018ba0:	e09e      	b.n	8018ce0 <_strtod_l+0x2e8>
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	e7c8      	b.n	8018b38 <_strtod_l+0x140>
 8018ba6:	f1bb 0f08 	cmp.w	fp, #8
 8018baa:	bfd8      	it	le
 8018bac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018bae:	f100 0001 	add.w	r0, r0, #1
 8018bb2:	bfda      	itte	le
 8018bb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8018bb8:	9309      	strle	r3, [sp, #36]	; 0x24
 8018bba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8018bbe:	f10b 0b01 	add.w	fp, fp, #1
 8018bc2:	9015      	str	r0, [sp, #84]	; 0x54
 8018bc4:	e7c1      	b.n	8018b4a <_strtod_l+0x152>
 8018bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bc8:	1c5a      	adds	r2, r3, #1
 8018bca:	9215      	str	r2, [sp, #84]	; 0x54
 8018bcc:	785a      	ldrb	r2, [r3, #1]
 8018bce:	f1bb 0f00 	cmp.w	fp, #0
 8018bd2:	d037      	beq.n	8018c44 <_strtod_l+0x24c>
 8018bd4:	9005      	str	r0, [sp, #20]
 8018bd6:	465e      	mov	r6, fp
 8018bd8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018bdc:	2b09      	cmp	r3, #9
 8018bde:	d912      	bls.n	8018c06 <_strtod_l+0x20e>
 8018be0:	2301      	movs	r3, #1
 8018be2:	e7c4      	b.n	8018b6e <_strtod_l+0x176>
 8018be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018be6:	1c5a      	adds	r2, r3, #1
 8018be8:	9215      	str	r2, [sp, #84]	; 0x54
 8018bea:	785a      	ldrb	r2, [r3, #1]
 8018bec:	3001      	adds	r0, #1
 8018bee:	2a30      	cmp	r2, #48	; 0x30
 8018bf0:	d0f8      	beq.n	8018be4 <_strtod_l+0x1ec>
 8018bf2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018bf6:	2b08      	cmp	r3, #8
 8018bf8:	f200 84c1 	bhi.w	801957e <_strtod_l+0xb86>
 8018bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bfe:	9005      	str	r0, [sp, #20]
 8018c00:	2000      	movs	r0, #0
 8018c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c04:	4606      	mov	r6, r0
 8018c06:	3a30      	subs	r2, #48	; 0x30
 8018c08:	f100 0301 	add.w	r3, r0, #1
 8018c0c:	d014      	beq.n	8018c38 <_strtod_l+0x240>
 8018c0e:	9905      	ldr	r1, [sp, #20]
 8018c10:	4419      	add	r1, r3
 8018c12:	9105      	str	r1, [sp, #20]
 8018c14:	4633      	mov	r3, r6
 8018c16:	eb00 0c06 	add.w	ip, r0, r6
 8018c1a:	210a      	movs	r1, #10
 8018c1c:	4563      	cmp	r3, ip
 8018c1e:	d113      	bne.n	8018c48 <_strtod_l+0x250>
 8018c20:	1833      	adds	r3, r6, r0
 8018c22:	2b08      	cmp	r3, #8
 8018c24:	f106 0601 	add.w	r6, r6, #1
 8018c28:	4406      	add	r6, r0
 8018c2a:	dc1a      	bgt.n	8018c62 <_strtod_l+0x26a>
 8018c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c2e:	230a      	movs	r3, #10
 8018c30:	fb03 2301 	mla	r3, r3, r1, r2
 8018c34:	9309      	str	r3, [sp, #36]	; 0x24
 8018c36:	2300      	movs	r3, #0
 8018c38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018c3a:	1c51      	adds	r1, r2, #1
 8018c3c:	9115      	str	r1, [sp, #84]	; 0x54
 8018c3e:	7852      	ldrb	r2, [r2, #1]
 8018c40:	4618      	mov	r0, r3
 8018c42:	e7c9      	b.n	8018bd8 <_strtod_l+0x1e0>
 8018c44:	4658      	mov	r0, fp
 8018c46:	e7d2      	b.n	8018bee <_strtod_l+0x1f6>
 8018c48:	2b08      	cmp	r3, #8
 8018c4a:	f103 0301 	add.w	r3, r3, #1
 8018c4e:	dc03      	bgt.n	8018c58 <_strtod_l+0x260>
 8018c50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018c52:	434f      	muls	r7, r1
 8018c54:	9709      	str	r7, [sp, #36]	; 0x24
 8018c56:	e7e1      	b.n	8018c1c <_strtod_l+0x224>
 8018c58:	2b10      	cmp	r3, #16
 8018c5a:	bfd8      	it	le
 8018c5c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8018c60:	e7dc      	b.n	8018c1c <_strtod_l+0x224>
 8018c62:	2e10      	cmp	r6, #16
 8018c64:	bfdc      	itt	le
 8018c66:	230a      	movle	r3, #10
 8018c68:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8018c6c:	e7e3      	b.n	8018c36 <_strtod_l+0x23e>
 8018c6e:	2300      	movs	r3, #0
 8018c70:	9305      	str	r3, [sp, #20]
 8018c72:	2301      	movs	r3, #1
 8018c74:	e780      	b.n	8018b78 <_strtod_l+0x180>
 8018c76:	f04f 0c00 	mov.w	ip, #0
 8018c7a:	1caa      	adds	r2, r5, #2
 8018c7c:	9215      	str	r2, [sp, #84]	; 0x54
 8018c7e:	78aa      	ldrb	r2, [r5, #2]
 8018c80:	e788      	b.n	8018b94 <_strtod_l+0x19c>
 8018c82:	f04f 0c01 	mov.w	ip, #1
 8018c86:	e7f8      	b.n	8018c7a <_strtod_l+0x282>
 8018c88:	0801d7f8 	.word	0x0801d7f8
 8018c8c:	0801d7f4 	.word	0x0801d7f4
 8018c90:	7ff00000 	.word	0x7ff00000
 8018c94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018c96:	1c51      	adds	r1, r2, #1
 8018c98:	9115      	str	r1, [sp, #84]	; 0x54
 8018c9a:	7852      	ldrb	r2, [r2, #1]
 8018c9c:	2a30      	cmp	r2, #48	; 0x30
 8018c9e:	d0f9      	beq.n	8018c94 <_strtod_l+0x29c>
 8018ca0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018ca4:	2908      	cmp	r1, #8
 8018ca6:	f63f af7a 	bhi.w	8018b9e <_strtod_l+0x1a6>
 8018caa:	3a30      	subs	r2, #48	; 0x30
 8018cac:	9208      	str	r2, [sp, #32]
 8018cae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018cb0:	920c      	str	r2, [sp, #48]	; 0x30
 8018cb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018cb4:	1c57      	adds	r7, r2, #1
 8018cb6:	9715      	str	r7, [sp, #84]	; 0x54
 8018cb8:	7852      	ldrb	r2, [r2, #1]
 8018cba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8018cbe:	f1be 0f09 	cmp.w	lr, #9
 8018cc2:	d938      	bls.n	8018d36 <_strtod_l+0x33e>
 8018cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018cc6:	1a7f      	subs	r7, r7, r1
 8018cc8:	2f08      	cmp	r7, #8
 8018cca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018cce:	dc03      	bgt.n	8018cd8 <_strtod_l+0x2e0>
 8018cd0:	9908      	ldr	r1, [sp, #32]
 8018cd2:	428f      	cmp	r7, r1
 8018cd4:	bfa8      	it	ge
 8018cd6:	460f      	movge	r7, r1
 8018cd8:	f1bc 0f00 	cmp.w	ip, #0
 8018cdc:	d000      	beq.n	8018ce0 <_strtod_l+0x2e8>
 8018cde:	427f      	negs	r7, r7
 8018ce0:	2e00      	cmp	r6, #0
 8018ce2:	d14f      	bne.n	8018d84 <_strtod_l+0x38c>
 8018ce4:	9904      	ldr	r1, [sp, #16]
 8018ce6:	4301      	orrs	r1, r0
 8018ce8:	f47f aec1 	bne.w	8018a6e <_strtod_l+0x76>
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f47f aedb 	bne.w	8018aa8 <_strtod_l+0xb0>
 8018cf2:	2a69      	cmp	r2, #105	; 0x69
 8018cf4:	d029      	beq.n	8018d4a <_strtod_l+0x352>
 8018cf6:	dc26      	bgt.n	8018d46 <_strtod_l+0x34e>
 8018cf8:	2a49      	cmp	r2, #73	; 0x49
 8018cfa:	d026      	beq.n	8018d4a <_strtod_l+0x352>
 8018cfc:	2a4e      	cmp	r2, #78	; 0x4e
 8018cfe:	f47f aed3 	bne.w	8018aa8 <_strtod_l+0xb0>
 8018d02:	499b      	ldr	r1, [pc, #620]	; (8018f70 <_strtod_l+0x578>)
 8018d04:	a815      	add	r0, sp, #84	; 0x54
 8018d06:	f001 fa17 	bl	801a138 <__match>
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	f43f aecc 	beq.w	8018aa8 <_strtod_l+0xb0>
 8018d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	2b28      	cmp	r3, #40	; 0x28
 8018d16:	d12f      	bne.n	8018d78 <_strtod_l+0x380>
 8018d18:	4996      	ldr	r1, [pc, #600]	; (8018f74 <_strtod_l+0x57c>)
 8018d1a:	aa18      	add	r2, sp, #96	; 0x60
 8018d1c:	a815      	add	r0, sp, #84	; 0x54
 8018d1e:	f001 fa1f 	bl	801a160 <__hexnan>
 8018d22:	2805      	cmp	r0, #5
 8018d24:	d128      	bne.n	8018d78 <_strtod_l+0x380>
 8018d26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018d28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018d2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018d30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018d34:	e69b      	b.n	8018a6e <_strtod_l+0x76>
 8018d36:	9f08      	ldr	r7, [sp, #32]
 8018d38:	210a      	movs	r1, #10
 8018d3a:	fb01 2107 	mla	r1, r1, r7, r2
 8018d3e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018d42:	9208      	str	r2, [sp, #32]
 8018d44:	e7b5      	b.n	8018cb2 <_strtod_l+0x2ba>
 8018d46:	2a6e      	cmp	r2, #110	; 0x6e
 8018d48:	e7d9      	b.n	8018cfe <_strtod_l+0x306>
 8018d4a:	498b      	ldr	r1, [pc, #556]	; (8018f78 <_strtod_l+0x580>)
 8018d4c:	a815      	add	r0, sp, #84	; 0x54
 8018d4e:	f001 f9f3 	bl	801a138 <__match>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	f43f aea8 	beq.w	8018aa8 <_strtod_l+0xb0>
 8018d58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d5a:	4988      	ldr	r1, [pc, #544]	; (8018f7c <_strtod_l+0x584>)
 8018d5c:	3b01      	subs	r3, #1
 8018d5e:	a815      	add	r0, sp, #84	; 0x54
 8018d60:	9315      	str	r3, [sp, #84]	; 0x54
 8018d62:	f001 f9e9 	bl	801a138 <__match>
 8018d66:	b910      	cbnz	r0, 8018d6e <_strtod_l+0x376>
 8018d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d6a:	3301      	adds	r3, #1
 8018d6c:	9315      	str	r3, [sp, #84]	; 0x54
 8018d6e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8018f8c <_strtod_l+0x594>
 8018d72:	f04f 0800 	mov.w	r8, #0
 8018d76:	e67a      	b.n	8018a6e <_strtod_l+0x76>
 8018d78:	4881      	ldr	r0, [pc, #516]	; (8018f80 <_strtod_l+0x588>)
 8018d7a:	f000 fef9 	bl	8019b70 <nan>
 8018d7e:	ec59 8b10 	vmov	r8, r9, d0
 8018d82:	e674      	b.n	8018a6e <_strtod_l+0x76>
 8018d84:	9b05      	ldr	r3, [sp, #20]
 8018d86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d88:	1afb      	subs	r3, r7, r3
 8018d8a:	f1bb 0f00 	cmp.w	fp, #0
 8018d8e:	bf08      	it	eq
 8018d90:	46b3      	moveq	fp, r6
 8018d92:	2e10      	cmp	r6, #16
 8018d94:	9308      	str	r3, [sp, #32]
 8018d96:	4635      	mov	r5, r6
 8018d98:	bfa8      	it	ge
 8018d9a:	2510      	movge	r5, #16
 8018d9c:	f7e7 fbda 	bl	8000554 <__aeabi_ui2d>
 8018da0:	2e09      	cmp	r6, #9
 8018da2:	4680      	mov	r8, r0
 8018da4:	4689      	mov	r9, r1
 8018da6:	dd13      	ble.n	8018dd0 <_strtod_l+0x3d8>
 8018da8:	4b76      	ldr	r3, [pc, #472]	; (8018f84 <_strtod_l+0x58c>)
 8018daa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018dae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018db2:	f7e7 fc49 	bl	8000648 <__aeabi_dmul>
 8018db6:	4680      	mov	r8, r0
 8018db8:	4650      	mov	r0, sl
 8018dba:	4689      	mov	r9, r1
 8018dbc:	f7e7 fbca 	bl	8000554 <__aeabi_ui2d>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	4640      	mov	r0, r8
 8018dc6:	4649      	mov	r1, r9
 8018dc8:	f7e7 fa88 	bl	80002dc <__adddf3>
 8018dcc:	4680      	mov	r8, r0
 8018dce:	4689      	mov	r9, r1
 8018dd0:	2e0f      	cmp	r6, #15
 8018dd2:	dc38      	bgt.n	8018e46 <_strtod_l+0x44e>
 8018dd4:	9b08      	ldr	r3, [sp, #32]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	f43f ae49 	beq.w	8018a6e <_strtod_l+0x76>
 8018ddc:	dd24      	ble.n	8018e28 <_strtod_l+0x430>
 8018dde:	2b16      	cmp	r3, #22
 8018de0:	dc0b      	bgt.n	8018dfa <_strtod_l+0x402>
 8018de2:	4968      	ldr	r1, [pc, #416]	; (8018f84 <_strtod_l+0x58c>)
 8018de4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018dec:	4642      	mov	r2, r8
 8018dee:	464b      	mov	r3, r9
 8018df0:	f7e7 fc2a 	bl	8000648 <__aeabi_dmul>
 8018df4:	4680      	mov	r8, r0
 8018df6:	4689      	mov	r9, r1
 8018df8:	e639      	b.n	8018a6e <_strtod_l+0x76>
 8018dfa:	9a08      	ldr	r2, [sp, #32]
 8018dfc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8018e00:	4293      	cmp	r3, r2
 8018e02:	db20      	blt.n	8018e46 <_strtod_l+0x44e>
 8018e04:	4c5f      	ldr	r4, [pc, #380]	; (8018f84 <_strtod_l+0x58c>)
 8018e06:	f1c6 060f 	rsb	r6, r6, #15
 8018e0a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8018e0e:	4642      	mov	r2, r8
 8018e10:	464b      	mov	r3, r9
 8018e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e16:	f7e7 fc17 	bl	8000648 <__aeabi_dmul>
 8018e1a:	9b08      	ldr	r3, [sp, #32]
 8018e1c:	1b9e      	subs	r6, r3, r6
 8018e1e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8018e22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018e26:	e7e3      	b.n	8018df0 <_strtod_l+0x3f8>
 8018e28:	9b08      	ldr	r3, [sp, #32]
 8018e2a:	3316      	adds	r3, #22
 8018e2c:	db0b      	blt.n	8018e46 <_strtod_l+0x44e>
 8018e2e:	9b05      	ldr	r3, [sp, #20]
 8018e30:	1bdf      	subs	r7, r3, r7
 8018e32:	4b54      	ldr	r3, [pc, #336]	; (8018f84 <_strtod_l+0x58c>)
 8018e34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8018e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e3c:	4640      	mov	r0, r8
 8018e3e:	4649      	mov	r1, r9
 8018e40:	f7e7 fd2c 	bl	800089c <__aeabi_ddiv>
 8018e44:	e7d6      	b.n	8018df4 <_strtod_l+0x3fc>
 8018e46:	9b08      	ldr	r3, [sp, #32]
 8018e48:	1b75      	subs	r5, r6, r5
 8018e4a:	441d      	add	r5, r3
 8018e4c:	2d00      	cmp	r5, #0
 8018e4e:	dd70      	ble.n	8018f32 <_strtod_l+0x53a>
 8018e50:	f015 030f 	ands.w	r3, r5, #15
 8018e54:	d00a      	beq.n	8018e6c <_strtod_l+0x474>
 8018e56:	494b      	ldr	r1, [pc, #300]	; (8018f84 <_strtod_l+0x58c>)
 8018e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018e5c:	4642      	mov	r2, r8
 8018e5e:	464b      	mov	r3, r9
 8018e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e64:	f7e7 fbf0 	bl	8000648 <__aeabi_dmul>
 8018e68:	4680      	mov	r8, r0
 8018e6a:	4689      	mov	r9, r1
 8018e6c:	f035 050f 	bics.w	r5, r5, #15
 8018e70:	d04d      	beq.n	8018f0e <_strtod_l+0x516>
 8018e72:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8018e76:	dd22      	ble.n	8018ebe <_strtod_l+0x4c6>
 8018e78:	2500      	movs	r5, #0
 8018e7a:	46ab      	mov	fp, r5
 8018e7c:	9509      	str	r5, [sp, #36]	; 0x24
 8018e7e:	9505      	str	r5, [sp, #20]
 8018e80:	2322      	movs	r3, #34	; 0x22
 8018e82:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018f8c <_strtod_l+0x594>
 8018e86:	6023      	str	r3, [r4, #0]
 8018e88:	f04f 0800 	mov.w	r8, #0
 8018e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	f43f aded 	beq.w	8018a6e <_strtod_l+0x76>
 8018e94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018e96:	4620      	mov	r0, r4
 8018e98:	f7ff f924 	bl	80180e4 <_Bfree>
 8018e9c:	9905      	ldr	r1, [sp, #20]
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	f7ff f920 	bl	80180e4 <_Bfree>
 8018ea4:	4659      	mov	r1, fp
 8018ea6:	4620      	mov	r0, r4
 8018ea8:	f7ff f91c 	bl	80180e4 <_Bfree>
 8018eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018eae:	4620      	mov	r0, r4
 8018eb0:	f7ff f918 	bl	80180e4 <_Bfree>
 8018eb4:	4629      	mov	r1, r5
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f7ff f914 	bl	80180e4 <_Bfree>
 8018ebc:	e5d7      	b.n	8018a6e <_strtod_l+0x76>
 8018ebe:	4b32      	ldr	r3, [pc, #200]	; (8018f88 <_strtod_l+0x590>)
 8018ec0:	9304      	str	r3, [sp, #16]
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	112d      	asrs	r5, r5, #4
 8018ec6:	4640      	mov	r0, r8
 8018ec8:	4649      	mov	r1, r9
 8018eca:	469a      	mov	sl, r3
 8018ecc:	2d01      	cmp	r5, #1
 8018ece:	dc21      	bgt.n	8018f14 <_strtod_l+0x51c>
 8018ed0:	b10b      	cbz	r3, 8018ed6 <_strtod_l+0x4de>
 8018ed2:	4680      	mov	r8, r0
 8018ed4:	4689      	mov	r9, r1
 8018ed6:	492c      	ldr	r1, [pc, #176]	; (8018f88 <_strtod_l+0x590>)
 8018ed8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018edc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018ee0:	4642      	mov	r2, r8
 8018ee2:	464b      	mov	r3, r9
 8018ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ee8:	f7e7 fbae 	bl	8000648 <__aeabi_dmul>
 8018eec:	4b27      	ldr	r3, [pc, #156]	; (8018f8c <_strtod_l+0x594>)
 8018eee:	460a      	mov	r2, r1
 8018ef0:	400b      	ands	r3, r1
 8018ef2:	4927      	ldr	r1, [pc, #156]	; (8018f90 <_strtod_l+0x598>)
 8018ef4:	428b      	cmp	r3, r1
 8018ef6:	4680      	mov	r8, r0
 8018ef8:	d8be      	bhi.n	8018e78 <_strtod_l+0x480>
 8018efa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018efe:	428b      	cmp	r3, r1
 8018f00:	bf86      	itte	hi
 8018f02:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8018f94 <_strtod_l+0x59c>
 8018f06:	f04f 38ff 	movhi.w	r8, #4294967295
 8018f0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8018f0e:	2300      	movs	r3, #0
 8018f10:	9304      	str	r3, [sp, #16]
 8018f12:	e07b      	b.n	801900c <_strtod_l+0x614>
 8018f14:	07ea      	lsls	r2, r5, #31
 8018f16:	d505      	bpl.n	8018f24 <_strtod_l+0x52c>
 8018f18:	9b04      	ldr	r3, [sp, #16]
 8018f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f1e:	f7e7 fb93 	bl	8000648 <__aeabi_dmul>
 8018f22:	2301      	movs	r3, #1
 8018f24:	9a04      	ldr	r2, [sp, #16]
 8018f26:	3208      	adds	r2, #8
 8018f28:	f10a 0a01 	add.w	sl, sl, #1
 8018f2c:	106d      	asrs	r5, r5, #1
 8018f2e:	9204      	str	r2, [sp, #16]
 8018f30:	e7cc      	b.n	8018ecc <_strtod_l+0x4d4>
 8018f32:	d0ec      	beq.n	8018f0e <_strtod_l+0x516>
 8018f34:	426d      	negs	r5, r5
 8018f36:	f015 020f 	ands.w	r2, r5, #15
 8018f3a:	d00a      	beq.n	8018f52 <_strtod_l+0x55a>
 8018f3c:	4b11      	ldr	r3, [pc, #68]	; (8018f84 <_strtod_l+0x58c>)
 8018f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018f42:	4640      	mov	r0, r8
 8018f44:	4649      	mov	r1, r9
 8018f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f4a:	f7e7 fca7 	bl	800089c <__aeabi_ddiv>
 8018f4e:	4680      	mov	r8, r0
 8018f50:	4689      	mov	r9, r1
 8018f52:	112d      	asrs	r5, r5, #4
 8018f54:	d0db      	beq.n	8018f0e <_strtod_l+0x516>
 8018f56:	2d1f      	cmp	r5, #31
 8018f58:	dd1e      	ble.n	8018f98 <_strtod_l+0x5a0>
 8018f5a:	2500      	movs	r5, #0
 8018f5c:	46ab      	mov	fp, r5
 8018f5e:	9509      	str	r5, [sp, #36]	; 0x24
 8018f60:	9505      	str	r5, [sp, #20]
 8018f62:	2322      	movs	r3, #34	; 0x22
 8018f64:	f04f 0800 	mov.w	r8, #0
 8018f68:	f04f 0900 	mov.w	r9, #0
 8018f6c:	6023      	str	r3, [r4, #0]
 8018f6e:	e78d      	b.n	8018e8c <_strtod_l+0x494>
 8018f70:	0801d5e5 	.word	0x0801d5e5
 8018f74:	0801d80c 	.word	0x0801d80c
 8018f78:	0801d5dd 	.word	0x0801d5dd
 8018f7c:	0801d614 	.word	0x0801d614
 8018f80:	0801d99d 	.word	0x0801d99d
 8018f84:	0801d720 	.word	0x0801d720
 8018f88:	0801d6f8 	.word	0x0801d6f8
 8018f8c:	7ff00000 	.word	0x7ff00000
 8018f90:	7ca00000 	.word	0x7ca00000
 8018f94:	7fefffff 	.word	0x7fefffff
 8018f98:	f015 0310 	ands.w	r3, r5, #16
 8018f9c:	bf18      	it	ne
 8018f9e:	236a      	movne	r3, #106	; 0x6a
 8018fa0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8019344 <_strtod_l+0x94c>
 8018fa4:	9304      	str	r3, [sp, #16]
 8018fa6:	4640      	mov	r0, r8
 8018fa8:	4649      	mov	r1, r9
 8018faa:	2300      	movs	r3, #0
 8018fac:	07ea      	lsls	r2, r5, #31
 8018fae:	d504      	bpl.n	8018fba <_strtod_l+0x5c2>
 8018fb0:	e9da 2300 	ldrd	r2, r3, [sl]
 8018fb4:	f7e7 fb48 	bl	8000648 <__aeabi_dmul>
 8018fb8:	2301      	movs	r3, #1
 8018fba:	106d      	asrs	r5, r5, #1
 8018fbc:	f10a 0a08 	add.w	sl, sl, #8
 8018fc0:	d1f4      	bne.n	8018fac <_strtod_l+0x5b4>
 8018fc2:	b10b      	cbz	r3, 8018fc8 <_strtod_l+0x5d0>
 8018fc4:	4680      	mov	r8, r0
 8018fc6:	4689      	mov	r9, r1
 8018fc8:	9b04      	ldr	r3, [sp, #16]
 8018fca:	b1bb      	cbz	r3, 8018ffc <_strtod_l+0x604>
 8018fcc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018fd0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	4649      	mov	r1, r9
 8018fd8:	dd10      	ble.n	8018ffc <_strtod_l+0x604>
 8018fda:	2b1f      	cmp	r3, #31
 8018fdc:	f340 811e 	ble.w	801921c <_strtod_l+0x824>
 8018fe0:	2b34      	cmp	r3, #52	; 0x34
 8018fe2:	bfde      	ittt	le
 8018fe4:	f04f 33ff 	movle.w	r3, #4294967295
 8018fe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8018fec:	4093      	lslle	r3, r2
 8018fee:	f04f 0800 	mov.w	r8, #0
 8018ff2:	bfcc      	ite	gt
 8018ff4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018ff8:	ea03 0901 	andle.w	r9, r3, r1
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	2300      	movs	r3, #0
 8019000:	4640      	mov	r0, r8
 8019002:	4649      	mov	r1, r9
 8019004:	f7e7 fd88 	bl	8000b18 <__aeabi_dcmpeq>
 8019008:	2800      	cmp	r0, #0
 801900a:	d1a6      	bne.n	8018f5a <_strtod_l+0x562>
 801900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801900e:	9300      	str	r3, [sp, #0]
 8019010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019012:	4633      	mov	r3, r6
 8019014:	465a      	mov	r2, fp
 8019016:	4620      	mov	r0, r4
 8019018:	f7ff f8cc 	bl	80181b4 <__s2b>
 801901c:	9009      	str	r0, [sp, #36]	; 0x24
 801901e:	2800      	cmp	r0, #0
 8019020:	f43f af2a 	beq.w	8018e78 <_strtod_l+0x480>
 8019024:	9a08      	ldr	r2, [sp, #32]
 8019026:	9b05      	ldr	r3, [sp, #20]
 8019028:	2a00      	cmp	r2, #0
 801902a:	eba3 0307 	sub.w	r3, r3, r7
 801902e:	bfa8      	it	ge
 8019030:	2300      	movge	r3, #0
 8019032:	930c      	str	r3, [sp, #48]	; 0x30
 8019034:	2500      	movs	r5, #0
 8019036:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801903a:	9312      	str	r3, [sp, #72]	; 0x48
 801903c:	46ab      	mov	fp, r5
 801903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019040:	4620      	mov	r0, r4
 8019042:	6859      	ldr	r1, [r3, #4]
 8019044:	f7ff f80e 	bl	8018064 <_Balloc>
 8019048:	9005      	str	r0, [sp, #20]
 801904a:	2800      	cmp	r0, #0
 801904c:	f43f af18 	beq.w	8018e80 <_strtod_l+0x488>
 8019050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019052:	691a      	ldr	r2, [r3, #16]
 8019054:	3202      	adds	r2, #2
 8019056:	f103 010c 	add.w	r1, r3, #12
 801905a:	0092      	lsls	r2, r2, #2
 801905c:	300c      	adds	r0, #12
 801905e:	f7fe f870 	bl	8017142 <memcpy>
 8019062:	ec49 8b10 	vmov	d0, r8, r9
 8019066:	aa18      	add	r2, sp, #96	; 0x60
 8019068:	a917      	add	r1, sp, #92	; 0x5c
 801906a:	4620      	mov	r0, r4
 801906c:	f7ff fbd6 	bl	801881c <__d2b>
 8019070:	ec49 8b18 	vmov	d8, r8, r9
 8019074:	9016      	str	r0, [sp, #88]	; 0x58
 8019076:	2800      	cmp	r0, #0
 8019078:	f43f af02 	beq.w	8018e80 <_strtod_l+0x488>
 801907c:	2101      	movs	r1, #1
 801907e:	4620      	mov	r0, r4
 8019080:	f7ff f930 	bl	80182e4 <__i2b>
 8019084:	4683      	mov	fp, r0
 8019086:	2800      	cmp	r0, #0
 8019088:	f43f aefa 	beq.w	8018e80 <_strtod_l+0x488>
 801908c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801908e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019090:	2e00      	cmp	r6, #0
 8019092:	bfab      	itete	ge
 8019094:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8019096:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8019098:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801909a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801909e:	bfac      	ite	ge
 80190a0:	eb06 0a03 	addge.w	sl, r6, r3
 80190a4:	1b9f      	sublt	r7, r3, r6
 80190a6:	9b04      	ldr	r3, [sp, #16]
 80190a8:	1af6      	subs	r6, r6, r3
 80190aa:	4416      	add	r6, r2
 80190ac:	4ba0      	ldr	r3, [pc, #640]	; (8019330 <_strtod_l+0x938>)
 80190ae:	3e01      	subs	r6, #1
 80190b0:	429e      	cmp	r6, r3
 80190b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80190b6:	f280 80c4 	bge.w	8019242 <_strtod_l+0x84a>
 80190ba:	1b9b      	subs	r3, r3, r6
 80190bc:	2b1f      	cmp	r3, #31
 80190be:	eba2 0203 	sub.w	r2, r2, r3
 80190c2:	f04f 0101 	mov.w	r1, #1
 80190c6:	f300 80b0 	bgt.w	801922a <_strtod_l+0x832>
 80190ca:	fa01 f303 	lsl.w	r3, r1, r3
 80190ce:	930e      	str	r3, [sp, #56]	; 0x38
 80190d0:	2300      	movs	r3, #0
 80190d2:	930d      	str	r3, [sp, #52]	; 0x34
 80190d4:	eb0a 0602 	add.w	r6, sl, r2
 80190d8:	9b04      	ldr	r3, [sp, #16]
 80190da:	45b2      	cmp	sl, r6
 80190dc:	4417      	add	r7, r2
 80190de:	441f      	add	r7, r3
 80190e0:	4653      	mov	r3, sl
 80190e2:	bfa8      	it	ge
 80190e4:	4633      	movge	r3, r6
 80190e6:	42bb      	cmp	r3, r7
 80190e8:	bfa8      	it	ge
 80190ea:	463b      	movge	r3, r7
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	bfc2      	ittt	gt
 80190f0:	1af6      	subgt	r6, r6, r3
 80190f2:	1aff      	subgt	r7, r7, r3
 80190f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80190f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	dd17      	ble.n	801912e <_strtod_l+0x736>
 80190fe:	4659      	mov	r1, fp
 8019100:	461a      	mov	r2, r3
 8019102:	4620      	mov	r0, r4
 8019104:	f7ff f9ae 	bl	8018464 <__pow5mult>
 8019108:	4683      	mov	fp, r0
 801910a:	2800      	cmp	r0, #0
 801910c:	f43f aeb8 	beq.w	8018e80 <_strtod_l+0x488>
 8019110:	4601      	mov	r1, r0
 8019112:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019114:	4620      	mov	r0, r4
 8019116:	f7ff f8fb 	bl	8018310 <__multiply>
 801911a:	900b      	str	r0, [sp, #44]	; 0x2c
 801911c:	2800      	cmp	r0, #0
 801911e:	f43f aeaf 	beq.w	8018e80 <_strtod_l+0x488>
 8019122:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019124:	4620      	mov	r0, r4
 8019126:	f7fe ffdd 	bl	80180e4 <_Bfree>
 801912a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801912c:	9316      	str	r3, [sp, #88]	; 0x58
 801912e:	2e00      	cmp	r6, #0
 8019130:	f300 808c 	bgt.w	801924c <_strtod_l+0x854>
 8019134:	9b08      	ldr	r3, [sp, #32]
 8019136:	2b00      	cmp	r3, #0
 8019138:	dd08      	ble.n	801914c <_strtod_l+0x754>
 801913a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801913c:	9905      	ldr	r1, [sp, #20]
 801913e:	4620      	mov	r0, r4
 8019140:	f7ff f990 	bl	8018464 <__pow5mult>
 8019144:	9005      	str	r0, [sp, #20]
 8019146:	2800      	cmp	r0, #0
 8019148:	f43f ae9a 	beq.w	8018e80 <_strtod_l+0x488>
 801914c:	2f00      	cmp	r7, #0
 801914e:	dd08      	ble.n	8019162 <_strtod_l+0x76a>
 8019150:	9905      	ldr	r1, [sp, #20]
 8019152:	463a      	mov	r2, r7
 8019154:	4620      	mov	r0, r4
 8019156:	f7ff f9df 	bl	8018518 <__lshift>
 801915a:	9005      	str	r0, [sp, #20]
 801915c:	2800      	cmp	r0, #0
 801915e:	f43f ae8f 	beq.w	8018e80 <_strtod_l+0x488>
 8019162:	f1ba 0f00 	cmp.w	sl, #0
 8019166:	dd08      	ble.n	801917a <_strtod_l+0x782>
 8019168:	4659      	mov	r1, fp
 801916a:	4652      	mov	r2, sl
 801916c:	4620      	mov	r0, r4
 801916e:	f7ff f9d3 	bl	8018518 <__lshift>
 8019172:	4683      	mov	fp, r0
 8019174:	2800      	cmp	r0, #0
 8019176:	f43f ae83 	beq.w	8018e80 <_strtod_l+0x488>
 801917a:	9a05      	ldr	r2, [sp, #20]
 801917c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801917e:	4620      	mov	r0, r4
 8019180:	f7ff fa52 	bl	8018628 <__mdiff>
 8019184:	4605      	mov	r5, r0
 8019186:	2800      	cmp	r0, #0
 8019188:	f43f ae7a 	beq.w	8018e80 <_strtod_l+0x488>
 801918c:	68c3      	ldr	r3, [r0, #12]
 801918e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019190:	2300      	movs	r3, #0
 8019192:	60c3      	str	r3, [r0, #12]
 8019194:	4659      	mov	r1, fp
 8019196:	f7ff fa2b 	bl	80185f0 <__mcmp>
 801919a:	2800      	cmp	r0, #0
 801919c:	da60      	bge.n	8019260 <_strtod_l+0x868>
 801919e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191a0:	ea53 0308 	orrs.w	r3, r3, r8
 80191a4:	f040 8084 	bne.w	80192b0 <_strtod_l+0x8b8>
 80191a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d17f      	bne.n	80192b0 <_strtod_l+0x8b8>
 80191b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80191b4:	0d1b      	lsrs	r3, r3, #20
 80191b6:	051b      	lsls	r3, r3, #20
 80191b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80191bc:	d978      	bls.n	80192b0 <_strtod_l+0x8b8>
 80191be:	696b      	ldr	r3, [r5, #20]
 80191c0:	b913      	cbnz	r3, 80191c8 <_strtod_l+0x7d0>
 80191c2:	692b      	ldr	r3, [r5, #16]
 80191c4:	2b01      	cmp	r3, #1
 80191c6:	dd73      	ble.n	80192b0 <_strtod_l+0x8b8>
 80191c8:	4629      	mov	r1, r5
 80191ca:	2201      	movs	r2, #1
 80191cc:	4620      	mov	r0, r4
 80191ce:	f7ff f9a3 	bl	8018518 <__lshift>
 80191d2:	4659      	mov	r1, fp
 80191d4:	4605      	mov	r5, r0
 80191d6:	f7ff fa0b 	bl	80185f0 <__mcmp>
 80191da:	2800      	cmp	r0, #0
 80191dc:	dd68      	ble.n	80192b0 <_strtod_l+0x8b8>
 80191de:	9904      	ldr	r1, [sp, #16]
 80191e0:	4a54      	ldr	r2, [pc, #336]	; (8019334 <_strtod_l+0x93c>)
 80191e2:	464b      	mov	r3, r9
 80191e4:	2900      	cmp	r1, #0
 80191e6:	f000 8084 	beq.w	80192f2 <_strtod_l+0x8fa>
 80191ea:	ea02 0109 	and.w	r1, r2, r9
 80191ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80191f2:	dc7e      	bgt.n	80192f2 <_strtod_l+0x8fa>
 80191f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80191f8:	f77f aeb3 	ble.w	8018f62 <_strtod_l+0x56a>
 80191fc:	4b4e      	ldr	r3, [pc, #312]	; (8019338 <_strtod_l+0x940>)
 80191fe:	4640      	mov	r0, r8
 8019200:	4649      	mov	r1, r9
 8019202:	2200      	movs	r2, #0
 8019204:	f7e7 fa20 	bl	8000648 <__aeabi_dmul>
 8019208:	4b4a      	ldr	r3, [pc, #296]	; (8019334 <_strtod_l+0x93c>)
 801920a:	400b      	ands	r3, r1
 801920c:	4680      	mov	r8, r0
 801920e:	4689      	mov	r9, r1
 8019210:	2b00      	cmp	r3, #0
 8019212:	f47f ae3f 	bne.w	8018e94 <_strtod_l+0x49c>
 8019216:	2322      	movs	r3, #34	; 0x22
 8019218:	6023      	str	r3, [r4, #0]
 801921a:	e63b      	b.n	8018e94 <_strtod_l+0x49c>
 801921c:	f04f 32ff 	mov.w	r2, #4294967295
 8019220:	fa02 f303 	lsl.w	r3, r2, r3
 8019224:	ea03 0808 	and.w	r8, r3, r8
 8019228:	e6e8      	b.n	8018ffc <_strtod_l+0x604>
 801922a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801922e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8019232:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019236:	36e2      	adds	r6, #226	; 0xe2
 8019238:	fa01 f306 	lsl.w	r3, r1, r6
 801923c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019240:	e748      	b.n	80190d4 <_strtod_l+0x6dc>
 8019242:	2100      	movs	r1, #0
 8019244:	2301      	movs	r3, #1
 8019246:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801924a:	e743      	b.n	80190d4 <_strtod_l+0x6dc>
 801924c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801924e:	4632      	mov	r2, r6
 8019250:	4620      	mov	r0, r4
 8019252:	f7ff f961 	bl	8018518 <__lshift>
 8019256:	9016      	str	r0, [sp, #88]	; 0x58
 8019258:	2800      	cmp	r0, #0
 801925a:	f47f af6b 	bne.w	8019134 <_strtod_l+0x73c>
 801925e:	e60f      	b.n	8018e80 <_strtod_l+0x488>
 8019260:	46ca      	mov	sl, r9
 8019262:	d171      	bne.n	8019348 <_strtod_l+0x950>
 8019264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019266:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801926a:	b352      	cbz	r2, 80192c2 <_strtod_l+0x8ca>
 801926c:	4a33      	ldr	r2, [pc, #204]	; (801933c <_strtod_l+0x944>)
 801926e:	4293      	cmp	r3, r2
 8019270:	d12a      	bne.n	80192c8 <_strtod_l+0x8d0>
 8019272:	9b04      	ldr	r3, [sp, #16]
 8019274:	4641      	mov	r1, r8
 8019276:	b1fb      	cbz	r3, 80192b8 <_strtod_l+0x8c0>
 8019278:	4b2e      	ldr	r3, [pc, #184]	; (8019334 <_strtod_l+0x93c>)
 801927a:	ea09 0303 	and.w	r3, r9, r3
 801927e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019282:	f04f 32ff 	mov.w	r2, #4294967295
 8019286:	d81a      	bhi.n	80192be <_strtod_l+0x8c6>
 8019288:	0d1b      	lsrs	r3, r3, #20
 801928a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801928e:	fa02 f303 	lsl.w	r3, r2, r3
 8019292:	4299      	cmp	r1, r3
 8019294:	d118      	bne.n	80192c8 <_strtod_l+0x8d0>
 8019296:	4b2a      	ldr	r3, [pc, #168]	; (8019340 <_strtod_l+0x948>)
 8019298:	459a      	cmp	sl, r3
 801929a:	d102      	bne.n	80192a2 <_strtod_l+0x8aa>
 801929c:	3101      	adds	r1, #1
 801929e:	f43f adef 	beq.w	8018e80 <_strtod_l+0x488>
 80192a2:	4b24      	ldr	r3, [pc, #144]	; (8019334 <_strtod_l+0x93c>)
 80192a4:	ea0a 0303 	and.w	r3, sl, r3
 80192a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80192ac:	f04f 0800 	mov.w	r8, #0
 80192b0:	9b04      	ldr	r3, [sp, #16]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d1a2      	bne.n	80191fc <_strtod_l+0x804>
 80192b6:	e5ed      	b.n	8018e94 <_strtod_l+0x49c>
 80192b8:	f04f 33ff 	mov.w	r3, #4294967295
 80192bc:	e7e9      	b.n	8019292 <_strtod_l+0x89a>
 80192be:	4613      	mov	r3, r2
 80192c0:	e7e7      	b.n	8019292 <_strtod_l+0x89a>
 80192c2:	ea53 0308 	orrs.w	r3, r3, r8
 80192c6:	d08a      	beq.n	80191de <_strtod_l+0x7e6>
 80192c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192ca:	b1e3      	cbz	r3, 8019306 <_strtod_l+0x90e>
 80192cc:	ea13 0f0a 	tst.w	r3, sl
 80192d0:	d0ee      	beq.n	80192b0 <_strtod_l+0x8b8>
 80192d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192d4:	9a04      	ldr	r2, [sp, #16]
 80192d6:	4640      	mov	r0, r8
 80192d8:	4649      	mov	r1, r9
 80192da:	b1c3      	cbz	r3, 801930e <_strtod_l+0x916>
 80192dc:	f7ff fb6f 	bl	80189be <sulp>
 80192e0:	4602      	mov	r2, r0
 80192e2:	460b      	mov	r3, r1
 80192e4:	ec51 0b18 	vmov	r0, r1, d8
 80192e8:	f7e6 fff8 	bl	80002dc <__adddf3>
 80192ec:	4680      	mov	r8, r0
 80192ee:	4689      	mov	r9, r1
 80192f0:	e7de      	b.n	80192b0 <_strtod_l+0x8b8>
 80192f2:	4013      	ands	r3, r2
 80192f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80192f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80192fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019300:	f04f 38ff 	mov.w	r8, #4294967295
 8019304:	e7d4      	b.n	80192b0 <_strtod_l+0x8b8>
 8019306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019308:	ea13 0f08 	tst.w	r3, r8
 801930c:	e7e0      	b.n	80192d0 <_strtod_l+0x8d8>
 801930e:	f7ff fb56 	bl	80189be <sulp>
 8019312:	4602      	mov	r2, r0
 8019314:	460b      	mov	r3, r1
 8019316:	ec51 0b18 	vmov	r0, r1, d8
 801931a:	f7e6 ffdd 	bl	80002d8 <__aeabi_dsub>
 801931e:	2200      	movs	r2, #0
 8019320:	2300      	movs	r3, #0
 8019322:	4680      	mov	r8, r0
 8019324:	4689      	mov	r9, r1
 8019326:	f7e7 fbf7 	bl	8000b18 <__aeabi_dcmpeq>
 801932a:	2800      	cmp	r0, #0
 801932c:	d0c0      	beq.n	80192b0 <_strtod_l+0x8b8>
 801932e:	e618      	b.n	8018f62 <_strtod_l+0x56a>
 8019330:	fffffc02 	.word	0xfffffc02
 8019334:	7ff00000 	.word	0x7ff00000
 8019338:	39500000 	.word	0x39500000
 801933c:	000fffff 	.word	0x000fffff
 8019340:	7fefffff 	.word	0x7fefffff
 8019344:	0801d820 	.word	0x0801d820
 8019348:	4659      	mov	r1, fp
 801934a:	4628      	mov	r0, r5
 801934c:	f7ff fac0 	bl	80188d0 <__ratio>
 8019350:	ec57 6b10 	vmov	r6, r7, d0
 8019354:	ee10 0a10 	vmov	r0, s0
 8019358:	2200      	movs	r2, #0
 801935a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801935e:	4639      	mov	r1, r7
 8019360:	f7e7 fbee 	bl	8000b40 <__aeabi_dcmple>
 8019364:	2800      	cmp	r0, #0
 8019366:	d071      	beq.n	801944c <_strtod_l+0xa54>
 8019368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801936a:	2b00      	cmp	r3, #0
 801936c:	d17c      	bne.n	8019468 <_strtod_l+0xa70>
 801936e:	f1b8 0f00 	cmp.w	r8, #0
 8019372:	d15a      	bne.n	801942a <_strtod_l+0xa32>
 8019374:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019378:	2b00      	cmp	r3, #0
 801937a:	d15d      	bne.n	8019438 <_strtod_l+0xa40>
 801937c:	4b90      	ldr	r3, [pc, #576]	; (80195c0 <_strtod_l+0xbc8>)
 801937e:	2200      	movs	r2, #0
 8019380:	4630      	mov	r0, r6
 8019382:	4639      	mov	r1, r7
 8019384:	f7e7 fbd2 	bl	8000b2c <__aeabi_dcmplt>
 8019388:	2800      	cmp	r0, #0
 801938a:	d15c      	bne.n	8019446 <_strtod_l+0xa4e>
 801938c:	4630      	mov	r0, r6
 801938e:	4639      	mov	r1, r7
 8019390:	4b8c      	ldr	r3, [pc, #560]	; (80195c4 <_strtod_l+0xbcc>)
 8019392:	2200      	movs	r2, #0
 8019394:	f7e7 f958 	bl	8000648 <__aeabi_dmul>
 8019398:	4606      	mov	r6, r0
 801939a:	460f      	mov	r7, r1
 801939c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80193a0:	9606      	str	r6, [sp, #24]
 80193a2:	9307      	str	r3, [sp, #28]
 80193a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80193ac:	4b86      	ldr	r3, [pc, #536]	; (80195c8 <_strtod_l+0xbd0>)
 80193ae:	ea0a 0303 	and.w	r3, sl, r3
 80193b2:	930d      	str	r3, [sp, #52]	; 0x34
 80193b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193b6:	4b85      	ldr	r3, [pc, #532]	; (80195cc <_strtod_l+0xbd4>)
 80193b8:	429a      	cmp	r2, r3
 80193ba:	f040 8090 	bne.w	80194de <_strtod_l+0xae6>
 80193be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80193c2:	ec49 8b10 	vmov	d0, r8, r9
 80193c6:	f7ff f9b9 	bl	801873c <__ulp>
 80193ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193ce:	ec51 0b10 	vmov	r0, r1, d0
 80193d2:	f7e7 f939 	bl	8000648 <__aeabi_dmul>
 80193d6:	4642      	mov	r2, r8
 80193d8:	464b      	mov	r3, r9
 80193da:	f7e6 ff7f 	bl	80002dc <__adddf3>
 80193de:	460b      	mov	r3, r1
 80193e0:	4979      	ldr	r1, [pc, #484]	; (80195c8 <_strtod_l+0xbd0>)
 80193e2:	4a7b      	ldr	r2, [pc, #492]	; (80195d0 <_strtod_l+0xbd8>)
 80193e4:	4019      	ands	r1, r3
 80193e6:	4291      	cmp	r1, r2
 80193e8:	4680      	mov	r8, r0
 80193ea:	d944      	bls.n	8019476 <_strtod_l+0xa7e>
 80193ec:	ee18 2a90 	vmov	r2, s17
 80193f0:	4b78      	ldr	r3, [pc, #480]	; (80195d4 <_strtod_l+0xbdc>)
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d104      	bne.n	8019400 <_strtod_l+0xa08>
 80193f6:	ee18 3a10 	vmov	r3, s16
 80193fa:	3301      	adds	r3, #1
 80193fc:	f43f ad40 	beq.w	8018e80 <_strtod_l+0x488>
 8019400:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80195d4 <_strtod_l+0xbdc>
 8019404:	f04f 38ff 	mov.w	r8, #4294967295
 8019408:	9916      	ldr	r1, [sp, #88]	; 0x58
 801940a:	4620      	mov	r0, r4
 801940c:	f7fe fe6a 	bl	80180e4 <_Bfree>
 8019410:	9905      	ldr	r1, [sp, #20]
 8019412:	4620      	mov	r0, r4
 8019414:	f7fe fe66 	bl	80180e4 <_Bfree>
 8019418:	4659      	mov	r1, fp
 801941a:	4620      	mov	r0, r4
 801941c:	f7fe fe62 	bl	80180e4 <_Bfree>
 8019420:	4629      	mov	r1, r5
 8019422:	4620      	mov	r0, r4
 8019424:	f7fe fe5e 	bl	80180e4 <_Bfree>
 8019428:	e609      	b.n	801903e <_strtod_l+0x646>
 801942a:	f1b8 0f01 	cmp.w	r8, #1
 801942e:	d103      	bne.n	8019438 <_strtod_l+0xa40>
 8019430:	f1b9 0f00 	cmp.w	r9, #0
 8019434:	f43f ad95 	beq.w	8018f62 <_strtod_l+0x56a>
 8019438:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019590 <_strtod_l+0xb98>
 801943c:	4f60      	ldr	r7, [pc, #384]	; (80195c0 <_strtod_l+0xbc8>)
 801943e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019442:	2600      	movs	r6, #0
 8019444:	e7ae      	b.n	80193a4 <_strtod_l+0x9ac>
 8019446:	4f5f      	ldr	r7, [pc, #380]	; (80195c4 <_strtod_l+0xbcc>)
 8019448:	2600      	movs	r6, #0
 801944a:	e7a7      	b.n	801939c <_strtod_l+0x9a4>
 801944c:	4b5d      	ldr	r3, [pc, #372]	; (80195c4 <_strtod_l+0xbcc>)
 801944e:	4630      	mov	r0, r6
 8019450:	4639      	mov	r1, r7
 8019452:	2200      	movs	r2, #0
 8019454:	f7e7 f8f8 	bl	8000648 <__aeabi_dmul>
 8019458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801945a:	4606      	mov	r6, r0
 801945c:	460f      	mov	r7, r1
 801945e:	2b00      	cmp	r3, #0
 8019460:	d09c      	beq.n	801939c <_strtod_l+0x9a4>
 8019462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019466:	e79d      	b.n	80193a4 <_strtod_l+0x9ac>
 8019468:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019598 <_strtod_l+0xba0>
 801946c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019470:	ec57 6b17 	vmov	r6, r7, d7
 8019474:	e796      	b.n	80193a4 <_strtod_l+0x9ac>
 8019476:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801947a:	9b04      	ldr	r3, [sp, #16]
 801947c:	46ca      	mov	sl, r9
 801947e:	2b00      	cmp	r3, #0
 8019480:	d1c2      	bne.n	8019408 <_strtod_l+0xa10>
 8019482:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019488:	0d1b      	lsrs	r3, r3, #20
 801948a:	051b      	lsls	r3, r3, #20
 801948c:	429a      	cmp	r2, r3
 801948e:	d1bb      	bne.n	8019408 <_strtod_l+0xa10>
 8019490:	4630      	mov	r0, r6
 8019492:	4639      	mov	r1, r7
 8019494:	f7e7 fc38 	bl	8000d08 <__aeabi_d2lz>
 8019498:	f7e7 f8a8 	bl	80005ec <__aeabi_l2d>
 801949c:	4602      	mov	r2, r0
 801949e:	460b      	mov	r3, r1
 80194a0:	4630      	mov	r0, r6
 80194a2:	4639      	mov	r1, r7
 80194a4:	f7e6 ff18 	bl	80002d8 <__aeabi_dsub>
 80194a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80194aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80194ae:	ea43 0308 	orr.w	r3, r3, r8
 80194b2:	4313      	orrs	r3, r2
 80194b4:	4606      	mov	r6, r0
 80194b6:	460f      	mov	r7, r1
 80194b8:	d054      	beq.n	8019564 <_strtod_l+0xb6c>
 80194ba:	a339      	add	r3, pc, #228	; (adr r3, 80195a0 <_strtod_l+0xba8>)
 80194bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c0:	f7e7 fb34 	bl	8000b2c <__aeabi_dcmplt>
 80194c4:	2800      	cmp	r0, #0
 80194c6:	f47f ace5 	bne.w	8018e94 <_strtod_l+0x49c>
 80194ca:	a337      	add	r3, pc, #220	; (adr r3, 80195a8 <_strtod_l+0xbb0>)
 80194cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d0:	4630      	mov	r0, r6
 80194d2:	4639      	mov	r1, r7
 80194d4:	f7e7 fb48 	bl	8000b68 <__aeabi_dcmpgt>
 80194d8:	2800      	cmp	r0, #0
 80194da:	d095      	beq.n	8019408 <_strtod_l+0xa10>
 80194dc:	e4da      	b.n	8018e94 <_strtod_l+0x49c>
 80194de:	9b04      	ldr	r3, [sp, #16]
 80194e0:	b333      	cbz	r3, 8019530 <_strtod_l+0xb38>
 80194e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80194e8:	d822      	bhi.n	8019530 <_strtod_l+0xb38>
 80194ea:	a331      	add	r3, pc, #196	; (adr r3, 80195b0 <_strtod_l+0xbb8>)
 80194ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f0:	4630      	mov	r0, r6
 80194f2:	4639      	mov	r1, r7
 80194f4:	f7e7 fb24 	bl	8000b40 <__aeabi_dcmple>
 80194f8:	b1a0      	cbz	r0, 8019524 <_strtod_l+0xb2c>
 80194fa:	4639      	mov	r1, r7
 80194fc:	4630      	mov	r0, r6
 80194fe:	f7e7 fb7b 	bl	8000bf8 <__aeabi_d2uiz>
 8019502:	2801      	cmp	r0, #1
 8019504:	bf38      	it	cc
 8019506:	2001      	movcc	r0, #1
 8019508:	f7e7 f824 	bl	8000554 <__aeabi_ui2d>
 801950c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801950e:	4606      	mov	r6, r0
 8019510:	460f      	mov	r7, r1
 8019512:	bb23      	cbnz	r3, 801955e <_strtod_l+0xb66>
 8019514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019518:	9010      	str	r0, [sp, #64]	; 0x40
 801951a:	9311      	str	r3, [sp, #68]	; 0x44
 801951c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019520:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019528:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801952c:	1a9b      	subs	r3, r3, r2
 801952e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019530:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019534:	eeb0 0a48 	vmov.f32	s0, s16
 8019538:	eef0 0a68 	vmov.f32	s1, s17
 801953c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019540:	f7ff f8fc 	bl	801873c <__ulp>
 8019544:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019548:	ec53 2b10 	vmov	r2, r3, d0
 801954c:	f7e7 f87c 	bl	8000648 <__aeabi_dmul>
 8019550:	ec53 2b18 	vmov	r2, r3, d8
 8019554:	f7e6 fec2 	bl	80002dc <__adddf3>
 8019558:	4680      	mov	r8, r0
 801955a:	4689      	mov	r9, r1
 801955c:	e78d      	b.n	801947a <_strtod_l+0xa82>
 801955e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019562:	e7db      	b.n	801951c <_strtod_l+0xb24>
 8019564:	a314      	add	r3, pc, #80	; (adr r3, 80195b8 <_strtod_l+0xbc0>)
 8019566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801956a:	f7e7 fadf 	bl	8000b2c <__aeabi_dcmplt>
 801956e:	e7b3      	b.n	80194d8 <_strtod_l+0xae0>
 8019570:	2300      	movs	r3, #0
 8019572:	930a      	str	r3, [sp, #40]	; 0x28
 8019574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019578:	6013      	str	r3, [r2, #0]
 801957a:	f7ff ba7c 	b.w	8018a76 <_strtod_l+0x7e>
 801957e:	2a65      	cmp	r2, #101	; 0x65
 8019580:	f43f ab75 	beq.w	8018c6e <_strtod_l+0x276>
 8019584:	2a45      	cmp	r2, #69	; 0x45
 8019586:	f43f ab72 	beq.w	8018c6e <_strtod_l+0x276>
 801958a:	2301      	movs	r3, #1
 801958c:	f7ff bbaa 	b.w	8018ce4 <_strtod_l+0x2ec>
 8019590:	00000000 	.word	0x00000000
 8019594:	bff00000 	.word	0xbff00000
 8019598:	00000000 	.word	0x00000000
 801959c:	3ff00000 	.word	0x3ff00000
 80195a0:	94a03595 	.word	0x94a03595
 80195a4:	3fdfffff 	.word	0x3fdfffff
 80195a8:	35afe535 	.word	0x35afe535
 80195ac:	3fe00000 	.word	0x3fe00000
 80195b0:	ffc00000 	.word	0xffc00000
 80195b4:	41dfffff 	.word	0x41dfffff
 80195b8:	94a03595 	.word	0x94a03595
 80195bc:	3fcfffff 	.word	0x3fcfffff
 80195c0:	3ff00000 	.word	0x3ff00000
 80195c4:	3fe00000 	.word	0x3fe00000
 80195c8:	7ff00000 	.word	0x7ff00000
 80195cc:	7fe00000 	.word	0x7fe00000
 80195d0:	7c9fffff 	.word	0x7c9fffff
 80195d4:	7fefffff 	.word	0x7fefffff

080195d8 <_strtod_r>:
 80195d8:	4b01      	ldr	r3, [pc, #4]	; (80195e0 <_strtod_r+0x8>)
 80195da:	f7ff ba0d 	b.w	80189f8 <_strtod_l>
 80195de:	bf00      	nop
 80195e0:	200003d4 	.word	0x200003d4

080195e4 <_strtol_l.constprop.0>:
 80195e4:	2b01      	cmp	r3, #1
 80195e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195ea:	d001      	beq.n	80195f0 <_strtol_l.constprop.0+0xc>
 80195ec:	2b24      	cmp	r3, #36	; 0x24
 80195ee:	d906      	bls.n	80195fe <_strtol_l.constprop.0+0x1a>
 80195f0:	f7fd fd7a 	bl	80170e8 <__errno>
 80195f4:	2316      	movs	r3, #22
 80195f6:	6003      	str	r3, [r0, #0]
 80195f8:	2000      	movs	r0, #0
 80195fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80196e4 <_strtol_l.constprop.0+0x100>
 8019602:	460d      	mov	r5, r1
 8019604:	462e      	mov	r6, r5
 8019606:	f815 4b01 	ldrb.w	r4, [r5], #1
 801960a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801960e:	f017 0708 	ands.w	r7, r7, #8
 8019612:	d1f7      	bne.n	8019604 <_strtol_l.constprop.0+0x20>
 8019614:	2c2d      	cmp	r4, #45	; 0x2d
 8019616:	d132      	bne.n	801967e <_strtol_l.constprop.0+0x9a>
 8019618:	782c      	ldrb	r4, [r5, #0]
 801961a:	2701      	movs	r7, #1
 801961c:	1cb5      	adds	r5, r6, #2
 801961e:	2b00      	cmp	r3, #0
 8019620:	d05b      	beq.n	80196da <_strtol_l.constprop.0+0xf6>
 8019622:	2b10      	cmp	r3, #16
 8019624:	d109      	bne.n	801963a <_strtol_l.constprop.0+0x56>
 8019626:	2c30      	cmp	r4, #48	; 0x30
 8019628:	d107      	bne.n	801963a <_strtol_l.constprop.0+0x56>
 801962a:	782c      	ldrb	r4, [r5, #0]
 801962c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019630:	2c58      	cmp	r4, #88	; 0x58
 8019632:	d14d      	bne.n	80196d0 <_strtol_l.constprop.0+0xec>
 8019634:	786c      	ldrb	r4, [r5, #1]
 8019636:	2310      	movs	r3, #16
 8019638:	3502      	adds	r5, #2
 801963a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801963e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019642:	f04f 0e00 	mov.w	lr, #0
 8019646:	fbb8 f9f3 	udiv	r9, r8, r3
 801964a:	4676      	mov	r6, lr
 801964c:	fb03 8a19 	mls	sl, r3, r9, r8
 8019650:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019654:	f1bc 0f09 	cmp.w	ip, #9
 8019658:	d816      	bhi.n	8019688 <_strtol_l.constprop.0+0xa4>
 801965a:	4664      	mov	r4, ip
 801965c:	42a3      	cmp	r3, r4
 801965e:	dd24      	ble.n	80196aa <_strtol_l.constprop.0+0xc6>
 8019660:	f1be 3fff 	cmp.w	lr, #4294967295
 8019664:	d008      	beq.n	8019678 <_strtol_l.constprop.0+0x94>
 8019666:	45b1      	cmp	r9, r6
 8019668:	d31c      	bcc.n	80196a4 <_strtol_l.constprop.0+0xc0>
 801966a:	d101      	bne.n	8019670 <_strtol_l.constprop.0+0x8c>
 801966c:	45a2      	cmp	sl, r4
 801966e:	db19      	blt.n	80196a4 <_strtol_l.constprop.0+0xc0>
 8019670:	fb06 4603 	mla	r6, r6, r3, r4
 8019674:	f04f 0e01 	mov.w	lr, #1
 8019678:	f815 4b01 	ldrb.w	r4, [r5], #1
 801967c:	e7e8      	b.n	8019650 <_strtol_l.constprop.0+0x6c>
 801967e:	2c2b      	cmp	r4, #43	; 0x2b
 8019680:	bf04      	itt	eq
 8019682:	782c      	ldrbeq	r4, [r5, #0]
 8019684:	1cb5      	addeq	r5, r6, #2
 8019686:	e7ca      	b.n	801961e <_strtol_l.constprop.0+0x3a>
 8019688:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801968c:	f1bc 0f19 	cmp.w	ip, #25
 8019690:	d801      	bhi.n	8019696 <_strtol_l.constprop.0+0xb2>
 8019692:	3c37      	subs	r4, #55	; 0x37
 8019694:	e7e2      	b.n	801965c <_strtol_l.constprop.0+0x78>
 8019696:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801969a:	f1bc 0f19 	cmp.w	ip, #25
 801969e:	d804      	bhi.n	80196aa <_strtol_l.constprop.0+0xc6>
 80196a0:	3c57      	subs	r4, #87	; 0x57
 80196a2:	e7db      	b.n	801965c <_strtol_l.constprop.0+0x78>
 80196a4:	f04f 3eff 	mov.w	lr, #4294967295
 80196a8:	e7e6      	b.n	8019678 <_strtol_l.constprop.0+0x94>
 80196aa:	f1be 3fff 	cmp.w	lr, #4294967295
 80196ae:	d105      	bne.n	80196bc <_strtol_l.constprop.0+0xd8>
 80196b0:	2322      	movs	r3, #34	; 0x22
 80196b2:	6003      	str	r3, [r0, #0]
 80196b4:	4646      	mov	r6, r8
 80196b6:	b942      	cbnz	r2, 80196ca <_strtol_l.constprop.0+0xe6>
 80196b8:	4630      	mov	r0, r6
 80196ba:	e79e      	b.n	80195fa <_strtol_l.constprop.0+0x16>
 80196bc:	b107      	cbz	r7, 80196c0 <_strtol_l.constprop.0+0xdc>
 80196be:	4276      	negs	r6, r6
 80196c0:	2a00      	cmp	r2, #0
 80196c2:	d0f9      	beq.n	80196b8 <_strtol_l.constprop.0+0xd4>
 80196c4:	f1be 0f00 	cmp.w	lr, #0
 80196c8:	d000      	beq.n	80196cc <_strtol_l.constprop.0+0xe8>
 80196ca:	1e69      	subs	r1, r5, #1
 80196cc:	6011      	str	r1, [r2, #0]
 80196ce:	e7f3      	b.n	80196b8 <_strtol_l.constprop.0+0xd4>
 80196d0:	2430      	movs	r4, #48	; 0x30
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d1b1      	bne.n	801963a <_strtol_l.constprop.0+0x56>
 80196d6:	2308      	movs	r3, #8
 80196d8:	e7af      	b.n	801963a <_strtol_l.constprop.0+0x56>
 80196da:	2c30      	cmp	r4, #48	; 0x30
 80196dc:	d0a5      	beq.n	801962a <_strtol_l.constprop.0+0x46>
 80196de:	230a      	movs	r3, #10
 80196e0:	e7ab      	b.n	801963a <_strtol_l.constprop.0+0x56>
 80196e2:	bf00      	nop
 80196e4:	0801d849 	.word	0x0801d849

080196e8 <_strtol_r>:
 80196e8:	f7ff bf7c 	b.w	80195e4 <_strtol_l.constprop.0>

080196ec <__ssputs_r>:
 80196ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196f0:	688e      	ldr	r6, [r1, #8]
 80196f2:	461f      	mov	r7, r3
 80196f4:	42be      	cmp	r6, r7
 80196f6:	680b      	ldr	r3, [r1, #0]
 80196f8:	4682      	mov	sl, r0
 80196fa:	460c      	mov	r4, r1
 80196fc:	4690      	mov	r8, r2
 80196fe:	d82c      	bhi.n	801975a <__ssputs_r+0x6e>
 8019700:	898a      	ldrh	r2, [r1, #12]
 8019702:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019706:	d026      	beq.n	8019756 <__ssputs_r+0x6a>
 8019708:	6965      	ldr	r5, [r4, #20]
 801970a:	6909      	ldr	r1, [r1, #16]
 801970c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019710:	eba3 0901 	sub.w	r9, r3, r1
 8019714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019718:	1c7b      	adds	r3, r7, #1
 801971a:	444b      	add	r3, r9
 801971c:	106d      	asrs	r5, r5, #1
 801971e:	429d      	cmp	r5, r3
 8019720:	bf38      	it	cc
 8019722:	461d      	movcc	r5, r3
 8019724:	0553      	lsls	r3, r2, #21
 8019726:	d527      	bpl.n	8019778 <__ssputs_r+0x8c>
 8019728:	4629      	mov	r1, r5
 801972a:	f7fe fc0f 	bl	8017f4c <_malloc_r>
 801972e:	4606      	mov	r6, r0
 8019730:	b360      	cbz	r0, 801978c <__ssputs_r+0xa0>
 8019732:	6921      	ldr	r1, [r4, #16]
 8019734:	464a      	mov	r2, r9
 8019736:	f7fd fd04 	bl	8017142 <memcpy>
 801973a:	89a3      	ldrh	r3, [r4, #12]
 801973c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019744:	81a3      	strh	r3, [r4, #12]
 8019746:	6126      	str	r6, [r4, #16]
 8019748:	6165      	str	r5, [r4, #20]
 801974a:	444e      	add	r6, r9
 801974c:	eba5 0509 	sub.w	r5, r5, r9
 8019750:	6026      	str	r6, [r4, #0]
 8019752:	60a5      	str	r5, [r4, #8]
 8019754:	463e      	mov	r6, r7
 8019756:	42be      	cmp	r6, r7
 8019758:	d900      	bls.n	801975c <__ssputs_r+0x70>
 801975a:	463e      	mov	r6, r7
 801975c:	6820      	ldr	r0, [r4, #0]
 801975e:	4632      	mov	r2, r6
 8019760:	4641      	mov	r1, r8
 8019762:	f000 f9c9 	bl	8019af8 <memmove>
 8019766:	68a3      	ldr	r3, [r4, #8]
 8019768:	1b9b      	subs	r3, r3, r6
 801976a:	60a3      	str	r3, [r4, #8]
 801976c:	6823      	ldr	r3, [r4, #0]
 801976e:	4433      	add	r3, r6
 8019770:	6023      	str	r3, [r4, #0]
 8019772:	2000      	movs	r0, #0
 8019774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019778:	462a      	mov	r2, r5
 801977a:	f000 fd9e 	bl	801a2ba <_realloc_r>
 801977e:	4606      	mov	r6, r0
 8019780:	2800      	cmp	r0, #0
 8019782:	d1e0      	bne.n	8019746 <__ssputs_r+0x5a>
 8019784:	6921      	ldr	r1, [r4, #16]
 8019786:	4650      	mov	r0, sl
 8019788:	f7fe fb6c 	bl	8017e64 <_free_r>
 801978c:	230c      	movs	r3, #12
 801978e:	f8ca 3000 	str.w	r3, [sl]
 8019792:	89a3      	ldrh	r3, [r4, #12]
 8019794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019798:	81a3      	strh	r3, [r4, #12]
 801979a:	f04f 30ff 	mov.w	r0, #4294967295
 801979e:	e7e9      	b.n	8019774 <__ssputs_r+0x88>

080197a0 <_svfiprintf_r>:
 80197a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a4:	4698      	mov	r8, r3
 80197a6:	898b      	ldrh	r3, [r1, #12]
 80197a8:	061b      	lsls	r3, r3, #24
 80197aa:	b09d      	sub	sp, #116	; 0x74
 80197ac:	4607      	mov	r7, r0
 80197ae:	460d      	mov	r5, r1
 80197b0:	4614      	mov	r4, r2
 80197b2:	d50e      	bpl.n	80197d2 <_svfiprintf_r+0x32>
 80197b4:	690b      	ldr	r3, [r1, #16]
 80197b6:	b963      	cbnz	r3, 80197d2 <_svfiprintf_r+0x32>
 80197b8:	2140      	movs	r1, #64	; 0x40
 80197ba:	f7fe fbc7 	bl	8017f4c <_malloc_r>
 80197be:	6028      	str	r0, [r5, #0]
 80197c0:	6128      	str	r0, [r5, #16]
 80197c2:	b920      	cbnz	r0, 80197ce <_svfiprintf_r+0x2e>
 80197c4:	230c      	movs	r3, #12
 80197c6:	603b      	str	r3, [r7, #0]
 80197c8:	f04f 30ff 	mov.w	r0, #4294967295
 80197cc:	e0d0      	b.n	8019970 <_svfiprintf_r+0x1d0>
 80197ce:	2340      	movs	r3, #64	; 0x40
 80197d0:	616b      	str	r3, [r5, #20]
 80197d2:	2300      	movs	r3, #0
 80197d4:	9309      	str	r3, [sp, #36]	; 0x24
 80197d6:	2320      	movs	r3, #32
 80197d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80197e0:	2330      	movs	r3, #48	; 0x30
 80197e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019988 <_svfiprintf_r+0x1e8>
 80197e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197ea:	f04f 0901 	mov.w	r9, #1
 80197ee:	4623      	mov	r3, r4
 80197f0:	469a      	mov	sl, r3
 80197f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197f6:	b10a      	cbz	r2, 80197fc <_svfiprintf_r+0x5c>
 80197f8:	2a25      	cmp	r2, #37	; 0x25
 80197fa:	d1f9      	bne.n	80197f0 <_svfiprintf_r+0x50>
 80197fc:	ebba 0b04 	subs.w	fp, sl, r4
 8019800:	d00b      	beq.n	801981a <_svfiprintf_r+0x7a>
 8019802:	465b      	mov	r3, fp
 8019804:	4622      	mov	r2, r4
 8019806:	4629      	mov	r1, r5
 8019808:	4638      	mov	r0, r7
 801980a:	f7ff ff6f 	bl	80196ec <__ssputs_r>
 801980e:	3001      	adds	r0, #1
 8019810:	f000 80a9 	beq.w	8019966 <_svfiprintf_r+0x1c6>
 8019814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019816:	445a      	add	r2, fp
 8019818:	9209      	str	r2, [sp, #36]	; 0x24
 801981a:	f89a 3000 	ldrb.w	r3, [sl]
 801981e:	2b00      	cmp	r3, #0
 8019820:	f000 80a1 	beq.w	8019966 <_svfiprintf_r+0x1c6>
 8019824:	2300      	movs	r3, #0
 8019826:	f04f 32ff 	mov.w	r2, #4294967295
 801982a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801982e:	f10a 0a01 	add.w	sl, sl, #1
 8019832:	9304      	str	r3, [sp, #16]
 8019834:	9307      	str	r3, [sp, #28]
 8019836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801983a:	931a      	str	r3, [sp, #104]	; 0x68
 801983c:	4654      	mov	r4, sl
 801983e:	2205      	movs	r2, #5
 8019840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019844:	4850      	ldr	r0, [pc, #320]	; (8019988 <_svfiprintf_r+0x1e8>)
 8019846:	f7e6 fceb 	bl	8000220 <memchr>
 801984a:	9a04      	ldr	r2, [sp, #16]
 801984c:	b9d8      	cbnz	r0, 8019886 <_svfiprintf_r+0xe6>
 801984e:	06d0      	lsls	r0, r2, #27
 8019850:	bf44      	itt	mi
 8019852:	2320      	movmi	r3, #32
 8019854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019858:	0711      	lsls	r1, r2, #28
 801985a:	bf44      	itt	mi
 801985c:	232b      	movmi	r3, #43	; 0x2b
 801985e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019862:	f89a 3000 	ldrb.w	r3, [sl]
 8019866:	2b2a      	cmp	r3, #42	; 0x2a
 8019868:	d015      	beq.n	8019896 <_svfiprintf_r+0xf6>
 801986a:	9a07      	ldr	r2, [sp, #28]
 801986c:	4654      	mov	r4, sl
 801986e:	2000      	movs	r0, #0
 8019870:	f04f 0c0a 	mov.w	ip, #10
 8019874:	4621      	mov	r1, r4
 8019876:	f811 3b01 	ldrb.w	r3, [r1], #1
 801987a:	3b30      	subs	r3, #48	; 0x30
 801987c:	2b09      	cmp	r3, #9
 801987e:	d94d      	bls.n	801991c <_svfiprintf_r+0x17c>
 8019880:	b1b0      	cbz	r0, 80198b0 <_svfiprintf_r+0x110>
 8019882:	9207      	str	r2, [sp, #28]
 8019884:	e014      	b.n	80198b0 <_svfiprintf_r+0x110>
 8019886:	eba0 0308 	sub.w	r3, r0, r8
 801988a:	fa09 f303 	lsl.w	r3, r9, r3
 801988e:	4313      	orrs	r3, r2
 8019890:	9304      	str	r3, [sp, #16]
 8019892:	46a2      	mov	sl, r4
 8019894:	e7d2      	b.n	801983c <_svfiprintf_r+0x9c>
 8019896:	9b03      	ldr	r3, [sp, #12]
 8019898:	1d19      	adds	r1, r3, #4
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	9103      	str	r1, [sp, #12]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	bfbb      	ittet	lt
 80198a2:	425b      	neglt	r3, r3
 80198a4:	f042 0202 	orrlt.w	r2, r2, #2
 80198a8:	9307      	strge	r3, [sp, #28]
 80198aa:	9307      	strlt	r3, [sp, #28]
 80198ac:	bfb8      	it	lt
 80198ae:	9204      	strlt	r2, [sp, #16]
 80198b0:	7823      	ldrb	r3, [r4, #0]
 80198b2:	2b2e      	cmp	r3, #46	; 0x2e
 80198b4:	d10c      	bne.n	80198d0 <_svfiprintf_r+0x130>
 80198b6:	7863      	ldrb	r3, [r4, #1]
 80198b8:	2b2a      	cmp	r3, #42	; 0x2a
 80198ba:	d134      	bne.n	8019926 <_svfiprintf_r+0x186>
 80198bc:	9b03      	ldr	r3, [sp, #12]
 80198be:	1d1a      	adds	r2, r3, #4
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	9203      	str	r2, [sp, #12]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	bfb8      	it	lt
 80198c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80198cc:	3402      	adds	r4, #2
 80198ce:	9305      	str	r3, [sp, #20]
 80198d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019998 <_svfiprintf_r+0x1f8>
 80198d4:	7821      	ldrb	r1, [r4, #0]
 80198d6:	2203      	movs	r2, #3
 80198d8:	4650      	mov	r0, sl
 80198da:	f7e6 fca1 	bl	8000220 <memchr>
 80198de:	b138      	cbz	r0, 80198f0 <_svfiprintf_r+0x150>
 80198e0:	9b04      	ldr	r3, [sp, #16]
 80198e2:	eba0 000a 	sub.w	r0, r0, sl
 80198e6:	2240      	movs	r2, #64	; 0x40
 80198e8:	4082      	lsls	r2, r0
 80198ea:	4313      	orrs	r3, r2
 80198ec:	3401      	adds	r4, #1
 80198ee:	9304      	str	r3, [sp, #16]
 80198f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198f4:	4825      	ldr	r0, [pc, #148]	; (801998c <_svfiprintf_r+0x1ec>)
 80198f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198fa:	2206      	movs	r2, #6
 80198fc:	f7e6 fc90 	bl	8000220 <memchr>
 8019900:	2800      	cmp	r0, #0
 8019902:	d038      	beq.n	8019976 <_svfiprintf_r+0x1d6>
 8019904:	4b22      	ldr	r3, [pc, #136]	; (8019990 <_svfiprintf_r+0x1f0>)
 8019906:	bb1b      	cbnz	r3, 8019950 <_svfiprintf_r+0x1b0>
 8019908:	9b03      	ldr	r3, [sp, #12]
 801990a:	3307      	adds	r3, #7
 801990c:	f023 0307 	bic.w	r3, r3, #7
 8019910:	3308      	adds	r3, #8
 8019912:	9303      	str	r3, [sp, #12]
 8019914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019916:	4433      	add	r3, r6
 8019918:	9309      	str	r3, [sp, #36]	; 0x24
 801991a:	e768      	b.n	80197ee <_svfiprintf_r+0x4e>
 801991c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019920:	460c      	mov	r4, r1
 8019922:	2001      	movs	r0, #1
 8019924:	e7a6      	b.n	8019874 <_svfiprintf_r+0xd4>
 8019926:	2300      	movs	r3, #0
 8019928:	3401      	adds	r4, #1
 801992a:	9305      	str	r3, [sp, #20]
 801992c:	4619      	mov	r1, r3
 801992e:	f04f 0c0a 	mov.w	ip, #10
 8019932:	4620      	mov	r0, r4
 8019934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019938:	3a30      	subs	r2, #48	; 0x30
 801993a:	2a09      	cmp	r2, #9
 801993c:	d903      	bls.n	8019946 <_svfiprintf_r+0x1a6>
 801993e:	2b00      	cmp	r3, #0
 8019940:	d0c6      	beq.n	80198d0 <_svfiprintf_r+0x130>
 8019942:	9105      	str	r1, [sp, #20]
 8019944:	e7c4      	b.n	80198d0 <_svfiprintf_r+0x130>
 8019946:	fb0c 2101 	mla	r1, ip, r1, r2
 801994a:	4604      	mov	r4, r0
 801994c:	2301      	movs	r3, #1
 801994e:	e7f0      	b.n	8019932 <_svfiprintf_r+0x192>
 8019950:	ab03      	add	r3, sp, #12
 8019952:	9300      	str	r3, [sp, #0]
 8019954:	462a      	mov	r2, r5
 8019956:	4b0f      	ldr	r3, [pc, #60]	; (8019994 <_svfiprintf_r+0x1f4>)
 8019958:	a904      	add	r1, sp, #16
 801995a:	4638      	mov	r0, r7
 801995c:	f7fc fc76 	bl	801624c <_printf_float>
 8019960:	1c42      	adds	r2, r0, #1
 8019962:	4606      	mov	r6, r0
 8019964:	d1d6      	bne.n	8019914 <_svfiprintf_r+0x174>
 8019966:	89ab      	ldrh	r3, [r5, #12]
 8019968:	065b      	lsls	r3, r3, #25
 801996a:	f53f af2d 	bmi.w	80197c8 <_svfiprintf_r+0x28>
 801996e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019970:	b01d      	add	sp, #116	; 0x74
 8019972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019976:	ab03      	add	r3, sp, #12
 8019978:	9300      	str	r3, [sp, #0]
 801997a:	462a      	mov	r2, r5
 801997c:	4b05      	ldr	r3, [pc, #20]	; (8019994 <_svfiprintf_r+0x1f4>)
 801997e:	a904      	add	r1, sp, #16
 8019980:	4638      	mov	r0, r7
 8019982:	f7fc ff07 	bl	8016794 <_printf_i>
 8019986:	e7eb      	b.n	8019960 <_svfiprintf_r+0x1c0>
 8019988:	0801d949 	.word	0x0801d949
 801998c:	0801d953 	.word	0x0801d953
 8019990:	0801624d 	.word	0x0801624d
 8019994:	080196ed 	.word	0x080196ed
 8019998:	0801d94f 	.word	0x0801d94f

0801999c <__sflush_r>:
 801999c:	898a      	ldrh	r2, [r1, #12]
 801999e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199a2:	4605      	mov	r5, r0
 80199a4:	0710      	lsls	r0, r2, #28
 80199a6:	460c      	mov	r4, r1
 80199a8:	d458      	bmi.n	8019a5c <__sflush_r+0xc0>
 80199aa:	684b      	ldr	r3, [r1, #4]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	dc05      	bgt.n	80199bc <__sflush_r+0x20>
 80199b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	dc02      	bgt.n	80199bc <__sflush_r+0x20>
 80199b6:	2000      	movs	r0, #0
 80199b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199be:	2e00      	cmp	r6, #0
 80199c0:	d0f9      	beq.n	80199b6 <__sflush_r+0x1a>
 80199c2:	2300      	movs	r3, #0
 80199c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80199c8:	682f      	ldr	r7, [r5, #0]
 80199ca:	6a21      	ldr	r1, [r4, #32]
 80199cc:	602b      	str	r3, [r5, #0]
 80199ce:	d032      	beq.n	8019a36 <__sflush_r+0x9a>
 80199d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80199d2:	89a3      	ldrh	r3, [r4, #12]
 80199d4:	075a      	lsls	r2, r3, #29
 80199d6:	d505      	bpl.n	80199e4 <__sflush_r+0x48>
 80199d8:	6863      	ldr	r3, [r4, #4]
 80199da:	1ac0      	subs	r0, r0, r3
 80199dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199de:	b10b      	cbz	r3, 80199e4 <__sflush_r+0x48>
 80199e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80199e2:	1ac0      	subs	r0, r0, r3
 80199e4:	2300      	movs	r3, #0
 80199e6:	4602      	mov	r2, r0
 80199e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199ea:	6a21      	ldr	r1, [r4, #32]
 80199ec:	4628      	mov	r0, r5
 80199ee:	47b0      	blx	r6
 80199f0:	1c43      	adds	r3, r0, #1
 80199f2:	89a3      	ldrh	r3, [r4, #12]
 80199f4:	d106      	bne.n	8019a04 <__sflush_r+0x68>
 80199f6:	6829      	ldr	r1, [r5, #0]
 80199f8:	291d      	cmp	r1, #29
 80199fa:	d82b      	bhi.n	8019a54 <__sflush_r+0xb8>
 80199fc:	4a29      	ldr	r2, [pc, #164]	; (8019aa4 <__sflush_r+0x108>)
 80199fe:	410a      	asrs	r2, r1
 8019a00:	07d6      	lsls	r6, r2, #31
 8019a02:	d427      	bmi.n	8019a54 <__sflush_r+0xb8>
 8019a04:	2200      	movs	r2, #0
 8019a06:	6062      	str	r2, [r4, #4]
 8019a08:	04d9      	lsls	r1, r3, #19
 8019a0a:	6922      	ldr	r2, [r4, #16]
 8019a0c:	6022      	str	r2, [r4, #0]
 8019a0e:	d504      	bpl.n	8019a1a <__sflush_r+0x7e>
 8019a10:	1c42      	adds	r2, r0, #1
 8019a12:	d101      	bne.n	8019a18 <__sflush_r+0x7c>
 8019a14:	682b      	ldr	r3, [r5, #0]
 8019a16:	b903      	cbnz	r3, 8019a1a <__sflush_r+0x7e>
 8019a18:	6560      	str	r0, [r4, #84]	; 0x54
 8019a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a1c:	602f      	str	r7, [r5, #0]
 8019a1e:	2900      	cmp	r1, #0
 8019a20:	d0c9      	beq.n	80199b6 <__sflush_r+0x1a>
 8019a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a26:	4299      	cmp	r1, r3
 8019a28:	d002      	beq.n	8019a30 <__sflush_r+0x94>
 8019a2a:	4628      	mov	r0, r5
 8019a2c:	f7fe fa1a 	bl	8017e64 <_free_r>
 8019a30:	2000      	movs	r0, #0
 8019a32:	6360      	str	r0, [r4, #52]	; 0x34
 8019a34:	e7c0      	b.n	80199b8 <__sflush_r+0x1c>
 8019a36:	2301      	movs	r3, #1
 8019a38:	4628      	mov	r0, r5
 8019a3a:	47b0      	blx	r6
 8019a3c:	1c41      	adds	r1, r0, #1
 8019a3e:	d1c8      	bne.n	80199d2 <__sflush_r+0x36>
 8019a40:	682b      	ldr	r3, [r5, #0]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d0c5      	beq.n	80199d2 <__sflush_r+0x36>
 8019a46:	2b1d      	cmp	r3, #29
 8019a48:	d001      	beq.n	8019a4e <__sflush_r+0xb2>
 8019a4a:	2b16      	cmp	r3, #22
 8019a4c:	d101      	bne.n	8019a52 <__sflush_r+0xb6>
 8019a4e:	602f      	str	r7, [r5, #0]
 8019a50:	e7b1      	b.n	80199b6 <__sflush_r+0x1a>
 8019a52:	89a3      	ldrh	r3, [r4, #12]
 8019a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a58:	81a3      	strh	r3, [r4, #12]
 8019a5a:	e7ad      	b.n	80199b8 <__sflush_r+0x1c>
 8019a5c:	690f      	ldr	r7, [r1, #16]
 8019a5e:	2f00      	cmp	r7, #0
 8019a60:	d0a9      	beq.n	80199b6 <__sflush_r+0x1a>
 8019a62:	0793      	lsls	r3, r2, #30
 8019a64:	680e      	ldr	r6, [r1, #0]
 8019a66:	bf08      	it	eq
 8019a68:	694b      	ldreq	r3, [r1, #20]
 8019a6a:	600f      	str	r7, [r1, #0]
 8019a6c:	bf18      	it	ne
 8019a6e:	2300      	movne	r3, #0
 8019a70:	eba6 0807 	sub.w	r8, r6, r7
 8019a74:	608b      	str	r3, [r1, #8]
 8019a76:	f1b8 0f00 	cmp.w	r8, #0
 8019a7a:	dd9c      	ble.n	80199b6 <__sflush_r+0x1a>
 8019a7c:	6a21      	ldr	r1, [r4, #32]
 8019a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a80:	4643      	mov	r3, r8
 8019a82:	463a      	mov	r2, r7
 8019a84:	4628      	mov	r0, r5
 8019a86:	47b0      	blx	r6
 8019a88:	2800      	cmp	r0, #0
 8019a8a:	dc06      	bgt.n	8019a9a <__sflush_r+0xfe>
 8019a8c:	89a3      	ldrh	r3, [r4, #12]
 8019a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a92:	81a3      	strh	r3, [r4, #12]
 8019a94:	f04f 30ff 	mov.w	r0, #4294967295
 8019a98:	e78e      	b.n	80199b8 <__sflush_r+0x1c>
 8019a9a:	4407      	add	r7, r0
 8019a9c:	eba8 0800 	sub.w	r8, r8, r0
 8019aa0:	e7e9      	b.n	8019a76 <__sflush_r+0xda>
 8019aa2:	bf00      	nop
 8019aa4:	dfbffffe 	.word	0xdfbffffe

08019aa8 <_fflush_r>:
 8019aa8:	b538      	push	{r3, r4, r5, lr}
 8019aaa:	690b      	ldr	r3, [r1, #16]
 8019aac:	4605      	mov	r5, r0
 8019aae:	460c      	mov	r4, r1
 8019ab0:	b913      	cbnz	r3, 8019ab8 <_fflush_r+0x10>
 8019ab2:	2500      	movs	r5, #0
 8019ab4:	4628      	mov	r0, r5
 8019ab6:	bd38      	pop	{r3, r4, r5, pc}
 8019ab8:	b118      	cbz	r0, 8019ac2 <_fflush_r+0x1a>
 8019aba:	6a03      	ldr	r3, [r0, #32]
 8019abc:	b90b      	cbnz	r3, 8019ac2 <_fflush_r+0x1a>
 8019abe:	f7fd fa27 	bl	8016f10 <__sinit>
 8019ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d0f3      	beq.n	8019ab2 <_fflush_r+0xa>
 8019aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019acc:	07d0      	lsls	r0, r2, #31
 8019ace:	d404      	bmi.n	8019ada <_fflush_r+0x32>
 8019ad0:	0599      	lsls	r1, r3, #22
 8019ad2:	d402      	bmi.n	8019ada <_fflush_r+0x32>
 8019ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ad6:	f7fd fb32 	bl	801713e <__retarget_lock_acquire_recursive>
 8019ada:	4628      	mov	r0, r5
 8019adc:	4621      	mov	r1, r4
 8019ade:	f7ff ff5d 	bl	801999c <__sflush_r>
 8019ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ae4:	07da      	lsls	r2, r3, #31
 8019ae6:	4605      	mov	r5, r0
 8019ae8:	d4e4      	bmi.n	8019ab4 <_fflush_r+0xc>
 8019aea:	89a3      	ldrh	r3, [r4, #12]
 8019aec:	059b      	lsls	r3, r3, #22
 8019aee:	d4e1      	bmi.n	8019ab4 <_fflush_r+0xc>
 8019af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019af2:	f7fd fb25 	bl	8017140 <__retarget_lock_release_recursive>
 8019af6:	e7dd      	b.n	8019ab4 <_fflush_r+0xc>

08019af8 <memmove>:
 8019af8:	4288      	cmp	r0, r1
 8019afa:	b510      	push	{r4, lr}
 8019afc:	eb01 0402 	add.w	r4, r1, r2
 8019b00:	d902      	bls.n	8019b08 <memmove+0x10>
 8019b02:	4284      	cmp	r4, r0
 8019b04:	4623      	mov	r3, r4
 8019b06:	d807      	bhi.n	8019b18 <memmove+0x20>
 8019b08:	1e43      	subs	r3, r0, #1
 8019b0a:	42a1      	cmp	r1, r4
 8019b0c:	d008      	beq.n	8019b20 <memmove+0x28>
 8019b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019b16:	e7f8      	b.n	8019b0a <memmove+0x12>
 8019b18:	4402      	add	r2, r0
 8019b1a:	4601      	mov	r1, r0
 8019b1c:	428a      	cmp	r2, r1
 8019b1e:	d100      	bne.n	8019b22 <memmove+0x2a>
 8019b20:	bd10      	pop	{r4, pc}
 8019b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b2a:	e7f7      	b.n	8019b1c <memmove+0x24>

08019b2c <strncmp>:
 8019b2c:	b510      	push	{r4, lr}
 8019b2e:	b16a      	cbz	r2, 8019b4c <strncmp+0x20>
 8019b30:	3901      	subs	r1, #1
 8019b32:	1884      	adds	r4, r0, r2
 8019b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019b3c:	429a      	cmp	r2, r3
 8019b3e:	d103      	bne.n	8019b48 <strncmp+0x1c>
 8019b40:	42a0      	cmp	r0, r4
 8019b42:	d001      	beq.n	8019b48 <strncmp+0x1c>
 8019b44:	2a00      	cmp	r2, #0
 8019b46:	d1f5      	bne.n	8019b34 <strncmp+0x8>
 8019b48:	1ad0      	subs	r0, r2, r3
 8019b4a:	bd10      	pop	{r4, pc}
 8019b4c:	4610      	mov	r0, r2
 8019b4e:	e7fc      	b.n	8019b4a <strncmp+0x1e>

08019b50 <_sbrk_r>:
 8019b50:	b538      	push	{r3, r4, r5, lr}
 8019b52:	4d06      	ldr	r5, [pc, #24]	; (8019b6c <_sbrk_r+0x1c>)
 8019b54:	2300      	movs	r3, #0
 8019b56:	4604      	mov	r4, r0
 8019b58:	4608      	mov	r0, r1
 8019b5a:	602b      	str	r3, [r5, #0]
 8019b5c:	f7eb fd70 	bl	8005640 <_sbrk>
 8019b60:	1c43      	adds	r3, r0, #1
 8019b62:	d102      	bne.n	8019b6a <_sbrk_r+0x1a>
 8019b64:	682b      	ldr	r3, [r5, #0]
 8019b66:	b103      	cbz	r3, 8019b6a <_sbrk_r+0x1a>
 8019b68:	6023      	str	r3, [r4, #0]
 8019b6a:	bd38      	pop	{r3, r4, r5, pc}
 8019b6c:	200036e8 	.word	0x200036e8

08019b70 <nan>:
 8019b70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019b78 <nan+0x8>
 8019b74:	4770      	bx	lr
 8019b76:	bf00      	nop
 8019b78:	00000000 	.word	0x00000000
 8019b7c:	7ff80000 	.word	0x7ff80000

08019b80 <__assert_func>:
 8019b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b82:	4614      	mov	r4, r2
 8019b84:	461a      	mov	r2, r3
 8019b86:	4b09      	ldr	r3, [pc, #36]	; (8019bac <__assert_func+0x2c>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	4605      	mov	r5, r0
 8019b8c:	68d8      	ldr	r0, [r3, #12]
 8019b8e:	b14c      	cbz	r4, 8019ba4 <__assert_func+0x24>
 8019b90:	4b07      	ldr	r3, [pc, #28]	; (8019bb0 <__assert_func+0x30>)
 8019b92:	9100      	str	r1, [sp, #0]
 8019b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b98:	4906      	ldr	r1, [pc, #24]	; (8019bb4 <__assert_func+0x34>)
 8019b9a:	462b      	mov	r3, r5
 8019b9c:	f000 fbca 	bl	801a334 <fiprintf>
 8019ba0:	f000 fbda 	bl	801a358 <abort>
 8019ba4:	4b04      	ldr	r3, [pc, #16]	; (8019bb8 <__assert_func+0x38>)
 8019ba6:	461c      	mov	r4, r3
 8019ba8:	e7f3      	b.n	8019b92 <__assert_func+0x12>
 8019baa:	bf00      	nop
 8019bac:	200003d0 	.word	0x200003d0
 8019bb0:	0801d962 	.word	0x0801d962
 8019bb4:	0801d96f 	.word	0x0801d96f
 8019bb8:	0801d99d 	.word	0x0801d99d

08019bbc <_calloc_r>:
 8019bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bbe:	fba1 2402 	umull	r2, r4, r1, r2
 8019bc2:	b94c      	cbnz	r4, 8019bd8 <_calloc_r+0x1c>
 8019bc4:	4611      	mov	r1, r2
 8019bc6:	9201      	str	r2, [sp, #4]
 8019bc8:	f7fe f9c0 	bl	8017f4c <_malloc_r>
 8019bcc:	9a01      	ldr	r2, [sp, #4]
 8019bce:	4605      	mov	r5, r0
 8019bd0:	b930      	cbnz	r0, 8019be0 <_calloc_r+0x24>
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	b003      	add	sp, #12
 8019bd6:	bd30      	pop	{r4, r5, pc}
 8019bd8:	220c      	movs	r2, #12
 8019bda:	6002      	str	r2, [r0, #0]
 8019bdc:	2500      	movs	r5, #0
 8019bde:	e7f8      	b.n	8019bd2 <_calloc_r+0x16>
 8019be0:	4621      	mov	r1, r4
 8019be2:	f7fd fa2e 	bl	8017042 <memset>
 8019be6:	e7f4      	b.n	8019bd2 <_calloc_r+0x16>

08019be8 <rshift>:
 8019be8:	6903      	ldr	r3, [r0, #16]
 8019bea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019bee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019bf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019bf6:	f100 0414 	add.w	r4, r0, #20
 8019bfa:	dd45      	ble.n	8019c88 <rshift+0xa0>
 8019bfc:	f011 011f 	ands.w	r1, r1, #31
 8019c00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019c04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019c08:	d10c      	bne.n	8019c24 <rshift+0x3c>
 8019c0a:	f100 0710 	add.w	r7, r0, #16
 8019c0e:	4629      	mov	r1, r5
 8019c10:	42b1      	cmp	r1, r6
 8019c12:	d334      	bcc.n	8019c7e <rshift+0x96>
 8019c14:	1a9b      	subs	r3, r3, r2
 8019c16:	009b      	lsls	r3, r3, #2
 8019c18:	1eea      	subs	r2, r5, #3
 8019c1a:	4296      	cmp	r6, r2
 8019c1c:	bf38      	it	cc
 8019c1e:	2300      	movcc	r3, #0
 8019c20:	4423      	add	r3, r4
 8019c22:	e015      	b.n	8019c50 <rshift+0x68>
 8019c24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019c28:	f1c1 0820 	rsb	r8, r1, #32
 8019c2c:	40cf      	lsrs	r7, r1
 8019c2e:	f105 0e04 	add.w	lr, r5, #4
 8019c32:	46a1      	mov	r9, r4
 8019c34:	4576      	cmp	r6, lr
 8019c36:	46f4      	mov	ip, lr
 8019c38:	d815      	bhi.n	8019c66 <rshift+0x7e>
 8019c3a:	1a9a      	subs	r2, r3, r2
 8019c3c:	0092      	lsls	r2, r2, #2
 8019c3e:	3a04      	subs	r2, #4
 8019c40:	3501      	adds	r5, #1
 8019c42:	42ae      	cmp	r6, r5
 8019c44:	bf38      	it	cc
 8019c46:	2200      	movcc	r2, #0
 8019c48:	18a3      	adds	r3, r4, r2
 8019c4a:	50a7      	str	r7, [r4, r2]
 8019c4c:	b107      	cbz	r7, 8019c50 <rshift+0x68>
 8019c4e:	3304      	adds	r3, #4
 8019c50:	1b1a      	subs	r2, r3, r4
 8019c52:	42a3      	cmp	r3, r4
 8019c54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019c58:	bf08      	it	eq
 8019c5a:	2300      	moveq	r3, #0
 8019c5c:	6102      	str	r2, [r0, #16]
 8019c5e:	bf08      	it	eq
 8019c60:	6143      	streq	r3, [r0, #20]
 8019c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c66:	f8dc c000 	ldr.w	ip, [ip]
 8019c6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8019c6e:	ea4c 0707 	orr.w	r7, ip, r7
 8019c72:	f849 7b04 	str.w	r7, [r9], #4
 8019c76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019c7a:	40cf      	lsrs	r7, r1
 8019c7c:	e7da      	b.n	8019c34 <rshift+0x4c>
 8019c7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8019c82:	f847 cf04 	str.w	ip, [r7, #4]!
 8019c86:	e7c3      	b.n	8019c10 <rshift+0x28>
 8019c88:	4623      	mov	r3, r4
 8019c8a:	e7e1      	b.n	8019c50 <rshift+0x68>

08019c8c <__hexdig_fun>:
 8019c8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019c90:	2b09      	cmp	r3, #9
 8019c92:	d802      	bhi.n	8019c9a <__hexdig_fun+0xe>
 8019c94:	3820      	subs	r0, #32
 8019c96:	b2c0      	uxtb	r0, r0
 8019c98:	4770      	bx	lr
 8019c9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019c9e:	2b05      	cmp	r3, #5
 8019ca0:	d801      	bhi.n	8019ca6 <__hexdig_fun+0x1a>
 8019ca2:	3847      	subs	r0, #71	; 0x47
 8019ca4:	e7f7      	b.n	8019c96 <__hexdig_fun+0xa>
 8019ca6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019caa:	2b05      	cmp	r3, #5
 8019cac:	d801      	bhi.n	8019cb2 <__hexdig_fun+0x26>
 8019cae:	3827      	subs	r0, #39	; 0x27
 8019cb0:	e7f1      	b.n	8019c96 <__hexdig_fun+0xa>
 8019cb2:	2000      	movs	r0, #0
 8019cb4:	4770      	bx	lr
	...

08019cb8 <__gethex>:
 8019cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cbc:	4617      	mov	r7, r2
 8019cbe:	680a      	ldr	r2, [r1, #0]
 8019cc0:	b085      	sub	sp, #20
 8019cc2:	f102 0b02 	add.w	fp, r2, #2
 8019cc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019cca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019cce:	4681      	mov	r9, r0
 8019cd0:	468a      	mov	sl, r1
 8019cd2:	9302      	str	r3, [sp, #8]
 8019cd4:	32fe      	adds	r2, #254	; 0xfe
 8019cd6:	eb02 030b 	add.w	r3, r2, fp
 8019cda:	46d8      	mov	r8, fp
 8019cdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8019ce0:	9301      	str	r3, [sp, #4]
 8019ce2:	2830      	cmp	r0, #48	; 0x30
 8019ce4:	d0f7      	beq.n	8019cd6 <__gethex+0x1e>
 8019ce6:	f7ff ffd1 	bl	8019c8c <__hexdig_fun>
 8019cea:	4604      	mov	r4, r0
 8019cec:	2800      	cmp	r0, #0
 8019cee:	d138      	bne.n	8019d62 <__gethex+0xaa>
 8019cf0:	49a7      	ldr	r1, [pc, #668]	; (8019f90 <__gethex+0x2d8>)
 8019cf2:	2201      	movs	r2, #1
 8019cf4:	4640      	mov	r0, r8
 8019cf6:	f7ff ff19 	bl	8019b2c <strncmp>
 8019cfa:	4606      	mov	r6, r0
 8019cfc:	2800      	cmp	r0, #0
 8019cfe:	d169      	bne.n	8019dd4 <__gethex+0x11c>
 8019d00:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019d04:	465d      	mov	r5, fp
 8019d06:	f7ff ffc1 	bl	8019c8c <__hexdig_fun>
 8019d0a:	2800      	cmp	r0, #0
 8019d0c:	d064      	beq.n	8019dd8 <__gethex+0x120>
 8019d0e:	465a      	mov	r2, fp
 8019d10:	7810      	ldrb	r0, [r2, #0]
 8019d12:	2830      	cmp	r0, #48	; 0x30
 8019d14:	4690      	mov	r8, r2
 8019d16:	f102 0201 	add.w	r2, r2, #1
 8019d1a:	d0f9      	beq.n	8019d10 <__gethex+0x58>
 8019d1c:	f7ff ffb6 	bl	8019c8c <__hexdig_fun>
 8019d20:	2301      	movs	r3, #1
 8019d22:	fab0 f480 	clz	r4, r0
 8019d26:	0964      	lsrs	r4, r4, #5
 8019d28:	465e      	mov	r6, fp
 8019d2a:	9301      	str	r3, [sp, #4]
 8019d2c:	4642      	mov	r2, r8
 8019d2e:	4615      	mov	r5, r2
 8019d30:	3201      	adds	r2, #1
 8019d32:	7828      	ldrb	r0, [r5, #0]
 8019d34:	f7ff ffaa 	bl	8019c8c <__hexdig_fun>
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	d1f8      	bne.n	8019d2e <__gethex+0x76>
 8019d3c:	4994      	ldr	r1, [pc, #592]	; (8019f90 <__gethex+0x2d8>)
 8019d3e:	2201      	movs	r2, #1
 8019d40:	4628      	mov	r0, r5
 8019d42:	f7ff fef3 	bl	8019b2c <strncmp>
 8019d46:	b978      	cbnz	r0, 8019d68 <__gethex+0xb0>
 8019d48:	b946      	cbnz	r6, 8019d5c <__gethex+0xa4>
 8019d4a:	1c6e      	adds	r6, r5, #1
 8019d4c:	4632      	mov	r2, r6
 8019d4e:	4615      	mov	r5, r2
 8019d50:	3201      	adds	r2, #1
 8019d52:	7828      	ldrb	r0, [r5, #0]
 8019d54:	f7ff ff9a 	bl	8019c8c <__hexdig_fun>
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	d1f8      	bne.n	8019d4e <__gethex+0x96>
 8019d5c:	1b73      	subs	r3, r6, r5
 8019d5e:	009e      	lsls	r6, r3, #2
 8019d60:	e004      	b.n	8019d6c <__gethex+0xb4>
 8019d62:	2400      	movs	r4, #0
 8019d64:	4626      	mov	r6, r4
 8019d66:	e7e1      	b.n	8019d2c <__gethex+0x74>
 8019d68:	2e00      	cmp	r6, #0
 8019d6a:	d1f7      	bne.n	8019d5c <__gethex+0xa4>
 8019d6c:	782b      	ldrb	r3, [r5, #0]
 8019d6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019d72:	2b50      	cmp	r3, #80	; 0x50
 8019d74:	d13d      	bne.n	8019df2 <__gethex+0x13a>
 8019d76:	786b      	ldrb	r3, [r5, #1]
 8019d78:	2b2b      	cmp	r3, #43	; 0x2b
 8019d7a:	d02f      	beq.n	8019ddc <__gethex+0x124>
 8019d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8019d7e:	d031      	beq.n	8019de4 <__gethex+0x12c>
 8019d80:	1c69      	adds	r1, r5, #1
 8019d82:	f04f 0b00 	mov.w	fp, #0
 8019d86:	7808      	ldrb	r0, [r1, #0]
 8019d88:	f7ff ff80 	bl	8019c8c <__hexdig_fun>
 8019d8c:	1e42      	subs	r2, r0, #1
 8019d8e:	b2d2      	uxtb	r2, r2
 8019d90:	2a18      	cmp	r2, #24
 8019d92:	d82e      	bhi.n	8019df2 <__gethex+0x13a>
 8019d94:	f1a0 0210 	sub.w	r2, r0, #16
 8019d98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019d9c:	f7ff ff76 	bl	8019c8c <__hexdig_fun>
 8019da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8019da4:	fa5f fc8c 	uxtb.w	ip, ip
 8019da8:	f1bc 0f18 	cmp.w	ip, #24
 8019dac:	d91d      	bls.n	8019dea <__gethex+0x132>
 8019dae:	f1bb 0f00 	cmp.w	fp, #0
 8019db2:	d000      	beq.n	8019db6 <__gethex+0xfe>
 8019db4:	4252      	negs	r2, r2
 8019db6:	4416      	add	r6, r2
 8019db8:	f8ca 1000 	str.w	r1, [sl]
 8019dbc:	b1dc      	cbz	r4, 8019df6 <__gethex+0x13e>
 8019dbe:	9b01      	ldr	r3, [sp, #4]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	bf14      	ite	ne
 8019dc4:	f04f 0800 	movne.w	r8, #0
 8019dc8:	f04f 0806 	moveq.w	r8, #6
 8019dcc:	4640      	mov	r0, r8
 8019dce:	b005      	add	sp, #20
 8019dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd4:	4645      	mov	r5, r8
 8019dd6:	4626      	mov	r6, r4
 8019dd8:	2401      	movs	r4, #1
 8019dda:	e7c7      	b.n	8019d6c <__gethex+0xb4>
 8019ddc:	f04f 0b00 	mov.w	fp, #0
 8019de0:	1ca9      	adds	r1, r5, #2
 8019de2:	e7d0      	b.n	8019d86 <__gethex+0xce>
 8019de4:	f04f 0b01 	mov.w	fp, #1
 8019de8:	e7fa      	b.n	8019de0 <__gethex+0x128>
 8019dea:	230a      	movs	r3, #10
 8019dec:	fb03 0002 	mla	r0, r3, r2, r0
 8019df0:	e7d0      	b.n	8019d94 <__gethex+0xdc>
 8019df2:	4629      	mov	r1, r5
 8019df4:	e7e0      	b.n	8019db8 <__gethex+0x100>
 8019df6:	eba5 0308 	sub.w	r3, r5, r8
 8019dfa:	3b01      	subs	r3, #1
 8019dfc:	4621      	mov	r1, r4
 8019dfe:	2b07      	cmp	r3, #7
 8019e00:	dc0a      	bgt.n	8019e18 <__gethex+0x160>
 8019e02:	4648      	mov	r0, r9
 8019e04:	f7fe f92e 	bl	8018064 <_Balloc>
 8019e08:	4604      	mov	r4, r0
 8019e0a:	b940      	cbnz	r0, 8019e1e <__gethex+0x166>
 8019e0c:	4b61      	ldr	r3, [pc, #388]	; (8019f94 <__gethex+0x2dc>)
 8019e0e:	4602      	mov	r2, r0
 8019e10:	21e4      	movs	r1, #228	; 0xe4
 8019e12:	4861      	ldr	r0, [pc, #388]	; (8019f98 <__gethex+0x2e0>)
 8019e14:	f7ff feb4 	bl	8019b80 <__assert_func>
 8019e18:	3101      	adds	r1, #1
 8019e1a:	105b      	asrs	r3, r3, #1
 8019e1c:	e7ef      	b.n	8019dfe <__gethex+0x146>
 8019e1e:	f100 0a14 	add.w	sl, r0, #20
 8019e22:	2300      	movs	r3, #0
 8019e24:	495a      	ldr	r1, [pc, #360]	; (8019f90 <__gethex+0x2d8>)
 8019e26:	f8cd a004 	str.w	sl, [sp, #4]
 8019e2a:	469b      	mov	fp, r3
 8019e2c:	45a8      	cmp	r8, r5
 8019e2e:	d342      	bcc.n	8019eb6 <__gethex+0x1fe>
 8019e30:	9801      	ldr	r0, [sp, #4]
 8019e32:	f840 bb04 	str.w	fp, [r0], #4
 8019e36:	eba0 000a 	sub.w	r0, r0, sl
 8019e3a:	1080      	asrs	r0, r0, #2
 8019e3c:	6120      	str	r0, [r4, #16]
 8019e3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8019e42:	4658      	mov	r0, fp
 8019e44:	f7fe fa00 	bl	8018248 <__hi0bits>
 8019e48:	683d      	ldr	r5, [r7, #0]
 8019e4a:	eba8 0000 	sub.w	r0, r8, r0
 8019e4e:	42a8      	cmp	r0, r5
 8019e50:	dd59      	ble.n	8019f06 <__gethex+0x24e>
 8019e52:	eba0 0805 	sub.w	r8, r0, r5
 8019e56:	4641      	mov	r1, r8
 8019e58:	4620      	mov	r0, r4
 8019e5a:	f7fe fd8f 	bl	801897c <__any_on>
 8019e5e:	4683      	mov	fp, r0
 8019e60:	b1b8      	cbz	r0, 8019e92 <__gethex+0x1da>
 8019e62:	f108 33ff 	add.w	r3, r8, #4294967295
 8019e66:	1159      	asrs	r1, r3, #5
 8019e68:	f003 021f 	and.w	r2, r3, #31
 8019e6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019e70:	f04f 0b01 	mov.w	fp, #1
 8019e74:	fa0b f202 	lsl.w	r2, fp, r2
 8019e78:	420a      	tst	r2, r1
 8019e7a:	d00a      	beq.n	8019e92 <__gethex+0x1da>
 8019e7c:	455b      	cmp	r3, fp
 8019e7e:	dd06      	ble.n	8019e8e <__gethex+0x1d6>
 8019e80:	f1a8 0102 	sub.w	r1, r8, #2
 8019e84:	4620      	mov	r0, r4
 8019e86:	f7fe fd79 	bl	801897c <__any_on>
 8019e8a:	2800      	cmp	r0, #0
 8019e8c:	d138      	bne.n	8019f00 <__gethex+0x248>
 8019e8e:	f04f 0b02 	mov.w	fp, #2
 8019e92:	4641      	mov	r1, r8
 8019e94:	4620      	mov	r0, r4
 8019e96:	f7ff fea7 	bl	8019be8 <rshift>
 8019e9a:	4446      	add	r6, r8
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	42b3      	cmp	r3, r6
 8019ea0:	da41      	bge.n	8019f26 <__gethex+0x26e>
 8019ea2:	4621      	mov	r1, r4
 8019ea4:	4648      	mov	r0, r9
 8019ea6:	f7fe f91d 	bl	80180e4 <_Bfree>
 8019eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019eac:	2300      	movs	r3, #0
 8019eae:	6013      	str	r3, [r2, #0]
 8019eb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8019eb4:	e78a      	b.n	8019dcc <__gethex+0x114>
 8019eb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8019eba:	2a2e      	cmp	r2, #46	; 0x2e
 8019ebc:	d014      	beq.n	8019ee8 <__gethex+0x230>
 8019ebe:	2b20      	cmp	r3, #32
 8019ec0:	d106      	bne.n	8019ed0 <__gethex+0x218>
 8019ec2:	9b01      	ldr	r3, [sp, #4]
 8019ec4:	f843 bb04 	str.w	fp, [r3], #4
 8019ec8:	f04f 0b00 	mov.w	fp, #0
 8019ecc:	9301      	str	r3, [sp, #4]
 8019ece:	465b      	mov	r3, fp
 8019ed0:	7828      	ldrb	r0, [r5, #0]
 8019ed2:	9303      	str	r3, [sp, #12]
 8019ed4:	f7ff feda 	bl	8019c8c <__hexdig_fun>
 8019ed8:	9b03      	ldr	r3, [sp, #12]
 8019eda:	f000 000f 	and.w	r0, r0, #15
 8019ede:	4098      	lsls	r0, r3
 8019ee0:	ea4b 0b00 	orr.w	fp, fp, r0
 8019ee4:	3304      	adds	r3, #4
 8019ee6:	e7a1      	b.n	8019e2c <__gethex+0x174>
 8019ee8:	45a8      	cmp	r8, r5
 8019eea:	d8e8      	bhi.n	8019ebe <__gethex+0x206>
 8019eec:	2201      	movs	r2, #1
 8019eee:	4628      	mov	r0, r5
 8019ef0:	9303      	str	r3, [sp, #12]
 8019ef2:	f7ff fe1b 	bl	8019b2c <strncmp>
 8019ef6:	4926      	ldr	r1, [pc, #152]	; (8019f90 <__gethex+0x2d8>)
 8019ef8:	9b03      	ldr	r3, [sp, #12]
 8019efa:	2800      	cmp	r0, #0
 8019efc:	d1df      	bne.n	8019ebe <__gethex+0x206>
 8019efe:	e795      	b.n	8019e2c <__gethex+0x174>
 8019f00:	f04f 0b03 	mov.w	fp, #3
 8019f04:	e7c5      	b.n	8019e92 <__gethex+0x1da>
 8019f06:	da0b      	bge.n	8019f20 <__gethex+0x268>
 8019f08:	eba5 0800 	sub.w	r8, r5, r0
 8019f0c:	4621      	mov	r1, r4
 8019f0e:	4642      	mov	r2, r8
 8019f10:	4648      	mov	r0, r9
 8019f12:	f7fe fb01 	bl	8018518 <__lshift>
 8019f16:	eba6 0608 	sub.w	r6, r6, r8
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	f100 0a14 	add.w	sl, r0, #20
 8019f20:	f04f 0b00 	mov.w	fp, #0
 8019f24:	e7ba      	b.n	8019e9c <__gethex+0x1e4>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	42b3      	cmp	r3, r6
 8019f2a:	dd73      	ble.n	801a014 <__gethex+0x35c>
 8019f2c:	1b9e      	subs	r6, r3, r6
 8019f2e:	42b5      	cmp	r5, r6
 8019f30:	dc34      	bgt.n	8019f9c <__gethex+0x2e4>
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	2b02      	cmp	r3, #2
 8019f36:	d023      	beq.n	8019f80 <__gethex+0x2c8>
 8019f38:	2b03      	cmp	r3, #3
 8019f3a:	d025      	beq.n	8019f88 <__gethex+0x2d0>
 8019f3c:	2b01      	cmp	r3, #1
 8019f3e:	d115      	bne.n	8019f6c <__gethex+0x2b4>
 8019f40:	42b5      	cmp	r5, r6
 8019f42:	d113      	bne.n	8019f6c <__gethex+0x2b4>
 8019f44:	2d01      	cmp	r5, #1
 8019f46:	d10b      	bne.n	8019f60 <__gethex+0x2a8>
 8019f48:	9a02      	ldr	r2, [sp, #8]
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6013      	str	r3, [r2, #0]
 8019f4e:	2301      	movs	r3, #1
 8019f50:	6123      	str	r3, [r4, #16]
 8019f52:	f8ca 3000 	str.w	r3, [sl]
 8019f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f58:	f04f 0862 	mov.w	r8, #98	; 0x62
 8019f5c:	601c      	str	r4, [r3, #0]
 8019f5e:	e735      	b.n	8019dcc <__gethex+0x114>
 8019f60:	1e69      	subs	r1, r5, #1
 8019f62:	4620      	mov	r0, r4
 8019f64:	f7fe fd0a 	bl	801897c <__any_on>
 8019f68:	2800      	cmp	r0, #0
 8019f6a:	d1ed      	bne.n	8019f48 <__gethex+0x290>
 8019f6c:	4621      	mov	r1, r4
 8019f6e:	4648      	mov	r0, r9
 8019f70:	f7fe f8b8 	bl	80180e4 <_Bfree>
 8019f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f76:	2300      	movs	r3, #0
 8019f78:	6013      	str	r3, [r2, #0]
 8019f7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8019f7e:	e725      	b.n	8019dcc <__gethex+0x114>
 8019f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d1f2      	bne.n	8019f6c <__gethex+0x2b4>
 8019f86:	e7df      	b.n	8019f48 <__gethex+0x290>
 8019f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d1dc      	bne.n	8019f48 <__gethex+0x290>
 8019f8e:	e7ed      	b.n	8019f6c <__gethex+0x2b4>
 8019f90:	0801d7f4 	.word	0x0801d7f4
 8019f94:	0801d68d 	.word	0x0801d68d
 8019f98:	0801d99e 	.word	0x0801d99e
 8019f9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8019fa0:	f1bb 0f00 	cmp.w	fp, #0
 8019fa4:	d133      	bne.n	801a00e <__gethex+0x356>
 8019fa6:	f1b8 0f00 	cmp.w	r8, #0
 8019faa:	d004      	beq.n	8019fb6 <__gethex+0x2fe>
 8019fac:	4641      	mov	r1, r8
 8019fae:	4620      	mov	r0, r4
 8019fb0:	f7fe fce4 	bl	801897c <__any_on>
 8019fb4:	4683      	mov	fp, r0
 8019fb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8019fba:	2301      	movs	r3, #1
 8019fbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019fc0:	f008 081f 	and.w	r8, r8, #31
 8019fc4:	fa03 f308 	lsl.w	r3, r3, r8
 8019fc8:	4213      	tst	r3, r2
 8019fca:	4631      	mov	r1, r6
 8019fcc:	4620      	mov	r0, r4
 8019fce:	bf18      	it	ne
 8019fd0:	f04b 0b02 	orrne.w	fp, fp, #2
 8019fd4:	1bad      	subs	r5, r5, r6
 8019fd6:	f7ff fe07 	bl	8019be8 <rshift>
 8019fda:	687e      	ldr	r6, [r7, #4]
 8019fdc:	f04f 0802 	mov.w	r8, #2
 8019fe0:	f1bb 0f00 	cmp.w	fp, #0
 8019fe4:	d04a      	beq.n	801a07c <__gethex+0x3c4>
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	2b02      	cmp	r3, #2
 8019fea:	d016      	beq.n	801a01a <__gethex+0x362>
 8019fec:	2b03      	cmp	r3, #3
 8019fee:	d018      	beq.n	801a022 <__gethex+0x36a>
 8019ff0:	2b01      	cmp	r3, #1
 8019ff2:	d109      	bne.n	801a008 <__gethex+0x350>
 8019ff4:	f01b 0f02 	tst.w	fp, #2
 8019ff8:	d006      	beq.n	801a008 <__gethex+0x350>
 8019ffa:	f8da 3000 	ldr.w	r3, [sl]
 8019ffe:	ea4b 0b03 	orr.w	fp, fp, r3
 801a002:	f01b 0f01 	tst.w	fp, #1
 801a006:	d10f      	bne.n	801a028 <__gethex+0x370>
 801a008:	f048 0810 	orr.w	r8, r8, #16
 801a00c:	e036      	b.n	801a07c <__gethex+0x3c4>
 801a00e:	f04f 0b01 	mov.w	fp, #1
 801a012:	e7d0      	b.n	8019fb6 <__gethex+0x2fe>
 801a014:	f04f 0801 	mov.w	r8, #1
 801a018:	e7e2      	b.n	8019fe0 <__gethex+0x328>
 801a01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a01c:	f1c3 0301 	rsb	r3, r3, #1
 801a020:	930f      	str	r3, [sp, #60]	; 0x3c
 801a022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a024:	2b00      	cmp	r3, #0
 801a026:	d0ef      	beq.n	801a008 <__gethex+0x350>
 801a028:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a02c:	f104 0214 	add.w	r2, r4, #20
 801a030:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801a034:	9301      	str	r3, [sp, #4]
 801a036:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801a03a:	2300      	movs	r3, #0
 801a03c:	4694      	mov	ip, r2
 801a03e:	f852 1b04 	ldr.w	r1, [r2], #4
 801a042:	f1b1 3fff 	cmp.w	r1, #4294967295
 801a046:	d01e      	beq.n	801a086 <__gethex+0x3ce>
 801a048:	3101      	adds	r1, #1
 801a04a:	f8cc 1000 	str.w	r1, [ip]
 801a04e:	f1b8 0f02 	cmp.w	r8, #2
 801a052:	f104 0214 	add.w	r2, r4, #20
 801a056:	d13d      	bne.n	801a0d4 <__gethex+0x41c>
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	3b01      	subs	r3, #1
 801a05c:	42ab      	cmp	r3, r5
 801a05e:	d10b      	bne.n	801a078 <__gethex+0x3c0>
 801a060:	1169      	asrs	r1, r5, #5
 801a062:	2301      	movs	r3, #1
 801a064:	f005 051f 	and.w	r5, r5, #31
 801a068:	fa03 f505 	lsl.w	r5, r3, r5
 801a06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a070:	421d      	tst	r5, r3
 801a072:	bf18      	it	ne
 801a074:	f04f 0801 	movne.w	r8, #1
 801a078:	f048 0820 	orr.w	r8, r8, #32
 801a07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a07e:	601c      	str	r4, [r3, #0]
 801a080:	9b02      	ldr	r3, [sp, #8]
 801a082:	601e      	str	r6, [r3, #0]
 801a084:	e6a2      	b.n	8019dcc <__gethex+0x114>
 801a086:	4290      	cmp	r0, r2
 801a088:	f842 3c04 	str.w	r3, [r2, #-4]
 801a08c:	d8d6      	bhi.n	801a03c <__gethex+0x384>
 801a08e:	68a2      	ldr	r2, [r4, #8]
 801a090:	4593      	cmp	fp, r2
 801a092:	db17      	blt.n	801a0c4 <__gethex+0x40c>
 801a094:	6861      	ldr	r1, [r4, #4]
 801a096:	4648      	mov	r0, r9
 801a098:	3101      	adds	r1, #1
 801a09a:	f7fd ffe3 	bl	8018064 <_Balloc>
 801a09e:	4682      	mov	sl, r0
 801a0a0:	b918      	cbnz	r0, 801a0aa <__gethex+0x3f2>
 801a0a2:	4b1b      	ldr	r3, [pc, #108]	; (801a110 <__gethex+0x458>)
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	2184      	movs	r1, #132	; 0x84
 801a0a8:	e6b3      	b.n	8019e12 <__gethex+0x15a>
 801a0aa:	6922      	ldr	r2, [r4, #16]
 801a0ac:	3202      	adds	r2, #2
 801a0ae:	f104 010c 	add.w	r1, r4, #12
 801a0b2:	0092      	lsls	r2, r2, #2
 801a0b4:	300c      	adds	r0, #12
 801a0b6:	f7fd f844 	bl	8017142 <memcpy>
 801a0ba:	4621      	mov	r1, r4
 801a0bc:	4648      	mov	r0, r9
 801a0be:	f7fe f811 	bl	80180e4 <_Bfree>
 801a0c2:	4654      	mov	r4, sl
 801a0c4:	6922      	ldr	r2, [r4, #16]
 801a0c6:	1c51      	adds	r1, r2, #1
 801a0c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a0cc:	6121      	str	r1, [r4, #16]
 801a0ce:	2101      	movs	r1, #1
 801a0d0:	6151      	str	r1, [r2, #20]
 801a0d2:	e7bc      	b.n	801a04e <__gethex+0x396>
 801a0d4:	6921      	ldr	r1, [r4, #16]
 801a0d6:	4559      	cmp	r1, fp
 801a0d8:	dd0b      	ble.n	801a0f2 <__gethex+0x43a>
 801a0da:	2101      	movs	r1, #1
 801a0dc:	4620      	mov	r0, r4
 801a0de:	f7ff fd83 	bl	8019be8 <rshift>
 801a0e2:	68bb      	ldr	r3, [r7, #8]
 801a0e4:	3601      	adds	r6, #1
 801a0e6:	42b3      	cmp	r3, r6
 801a0e8:	f6ff aedb 	blt.w	8019ea2 <__gethex+0x1ea>
 801a0ec:	f04f 0801 	mov.w	r8, #1
 801a0f0:	e7c2      	b.n	801a078 <__gethex+0x3c0>
 801a0f2:	f015 051f 	ands.w	r5, r5, #31
 801a0f6:	d0f9      	beq.n	801a0ec <__gethex+0x434>
 801a0f8:	9b01      	ldr	r3, [sp, #4]
 801a0fa:	441a      	add	r2, r3
 801a0fc:	f1c5 0520 	rsb	r5, r5, #32
 801a100:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801a104:	f7fe f8a0 	bl	8018248 <__hi0bits>
 801a108:	42a8      	cmp	r0, r5
 801a10a:	dbe6      	blt.n	801a0da <__gethex+0x422>
 801a10c:	e7ee      	b.n	801a0ec <__gethex+0x434>
 801a10e:	bf00      	nop
 801a110:	0801d68d 	.word	0x0801d68d

0801a114 <L_shift>:
 801a114:	f1c2 0208 	rsb	r2, r2, #8
 801a118:	0092      	lsls	r2, r2, #2
 801a11a:	b570      	push	{r4, r5, r6, lr}
 801a11c:	f1c2 0620 	rsb	r6, r2, #32
 801a120:	6843      	ldr	r3, [r0, #4]
 801a122:	6804      	ldr	r4, [r0, #0]
 801a124:	fa03 f506 	lsl.w	r5, r3, r6
 801a128:	432c      	orrs	r4, r5
 801a12a:	40d3      	lsrs	r3, r2
 801a12c:	6004      	str	r4, [r0, #0]
 801a12e:	f840 3f04 	str.w	r3, [r0, #4]!
 801a132:	4288      	cmp	r0, r1
 801a134:	d3f4      	bcc.n	801a120 <L_shift+0xc>
 801a136:	bd70      	pop	{r4, r5, r6, pc}

0801a138 <__match>:
 801a138:	b530      	push	{r4, r5, lr}
 801a13a:	6803      	ldr	r3, [r0, #0]
 801a13c:	3301      	adds	r3, #1
 801a13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a142:	b914      	cbnz	r4, 801a14a <__match+0x12>
 801a144:	6003      	str	r3, [r0, #0]
 801a146:	2001      	movs	r0, #1
 801a148:	bd30      	pop	{r4, r5, pc}
 801a14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a14e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a152:	2d19      	cmp	r5, #25
 801a154:	bf98      	it	ls
 801a156:	3220      	addls	r2, #32
 801a158:	42a2      	cmp	r2, r4
 801a15a:	d0f0      	beq.n	801a13e <__match+0x6>
 801a15c:	2000      	movs	r0, #0
 801a15e:	e7f3      	b.n	801a148 <__match+0x10>

0801a160 <__hexnan>:
 801a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a164:	680b      	ldr	r3, [r1, #0]
 801a166:	6801      	ldr	r1, [r0, #0]
 801a168:	115e      	asrs	r6, r3, #5
 801a16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a16e:	f013 031f 	ands.w	r3, r3, #31
 801a172:	b087      	sub	sp, #28
 801a174:	bf18      	it	ne
 801a176:	3604      	addne	r6, #4
 801a178:	2500      	movs	r5, #0
 801a17a:	1f37      	subs	r7, r6, #4
 801a17c:	4682      	mov	sl, r0
 801a17e:	4690      	mov	r8, r2
 801a180:	9301      	str	r3, [sp, #4]
 801a182:	f846 5c04 	str.w	r5, [r6, #-4]
 801a186:	46b9      	mov	r9, r7
 801a188:	463c      	mov	r4, r7
 801a18a:	9502      	str	r5, [sp, #8]
 801a18c:	46ab      	mov	fp, r5
 801a18e:	784a      	ldrb	r2, [r1, #1]
 801a190:	1c4b      	adds	r3, r1, #1
 801a192:	9303      	str	r3, [sp, #12]
 801a194:	b342      	cbz	r2, 801a1e8 <__hexnan+0x88>
 801a196:	4610      	mov	r0, r2
 801a198:	9105      	str	r1, [sp, #20]
 801a19a:	9204      	str	r2, [sp, #16]
 801a19c:	f7ff fd76 	bl	8019c8c <__hexdig_fun>
 801a1a0:	2800      	cmp	r0, #0
 801a1a2:	d14f      	bne.n	801a244 <__hexnan+0xe4>
 801a1a4:	9a04      	ldr	r2, [sp, #16]
 801a1a6:	9905      	ldr	r1, [sp, #20]
 801a1a8:	2a20      	cmp	r2, #32
 801a1aa:	d818      	bhi.n	801a1de <__hexnan+0x7e>
 801a1ac:	9b02      	ldr	r3, [sp, #8]
 801a1ae:	459b      	cmp	fp, r3
 801a1b0:	dd13      	ble.n	801a1da <__hexnan+0x7a>
 801a1b2:	454c      	cmp	r4, r9
 801a1b4:	d206      	bcs.n	801a1c4 <__hexnan+0x64>
 801a1b6:	2d07      	cmp	r5, #7
 801a1b8:	dc04      	bgt.n	801a1c4 <__hexnan+0x64>
 801a1ba:	462a      	mov	r2, r5
 801a1bc:	4649      	mov	r1, r9
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f7ff ffa8 	bl	801a114 <L_shift>
 801a1c4:	4544      	cmp	r4, r8
 801a1c6:	d950      	bls.n	801a26a <__hexnan+0x10a>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	f1a4 0904 	sub.w	r9, r4, #4
 801a1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 801a1d2:	f8cd b008 	str.w	fp, [sp, #8]
 801a1d6:	464c      	mov	r4, r9
 801a1d8:	461d      	mov	r5, r3
 801a1da:	9903      	ldr	r1, [sp, #12]
 801a1dc:	e7d7      	b.n	801a18e <__hexnan+0x2e>
 801a1de:	2a29      	cmp	r2, #41	; 0x29
 801a1e0:	d155      	bne.n	801a28e <__hexnan+0x12e>
 801a1e2:	3102      	adds	r1, #2
 801a1e4:	f8ca 1000 	str.w	r1, [sl]
 801a1e8:	f1bb 0f00 	cmp.w	fp, #0
 801a1ec:	d04f      	beq.n	801a28e <__hexnan+0x12e>
 801a1ee:	454c      	cmp	r4, r9
 801a1f0:	d206      	bcs.n	801a200 <__hexnan+0xa0>
 801a1f2:	2d07      	cmp	r5, #7
 801a1f4:	dc04      	bgt.n	801a200 <__hexnan+0xa0>
 801a1f6:	462a      	mov	r2, r5
 801a1f8:	4649      	mov	r1, r9
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	f7ff ff8a 	bl	801a114 <L_shift>
 801a200:	4544      	cmp	r4, r8
 801a202:	d934      	bls.n	801a26e <__hexnan+0x10e>
 801a204:	f1a8 0204 	sub.w	r2, r8, #4
 801a208:	4623      	mov	r3, r4
 801a20a:	f853 1b04 	ldr.w	r1, [r3], #4
 801a20e:	f842 1f04 	str.w	r1, [r2, #4]!
 801a212:	429f      	cmp	r7, r3
 801a214:	d2f9      	bcs.n	801a20a <__hexnan+0xaa>
 801a216:	1b3b      	subs	r3, r7, r4
 801a218:	f023 0303 	bic.w	r3, r3, #3
 801a21c:	3304      	adds	r3, #4
 801a21e:	3e03      	subs	r6, #3
 801a220:	3401      	adds	r4, #1
 801a222:	42a6      	cmp	r6, r4
 801a224:	bf38      	it	cc
 801a226:	2304      	movcc	r3, #4
 801a228:	4443      	add	r3, r8
 801a22a:	2200      	movs	r2, #0
 801a22c:	f843 2b04 	str.w	r2, [r3], #4
 801a230:	429f      	cmp	r7, r3
 801a232:	d2fb      	bcs.n	801a22c <__hexnan+0xcc>
 801a234:	683b      	ldr	r3, [r7, #0]
 801a236:	b91b      	cbnz	r3, 801a240 <__hexnan+0xe0>
 801a238:	4547      	cmp	r7, r8
 801a23a:	d126      	bne.n	801a28a <__hexnan+0x12a>
 801a23c:	2301      	movs	r3, #1
 801a23e:	603b      	str	r3, [r7, #0]
 801a240:	2005      	movs	r0, #5
 801a242:	e025      	b.n	801a290 <__hexnan+0x130>
 801a244:	3501      	adds	r5, #1
 801a246:	2d08      	cmp	r5, #8
 801a248:	f10b 0b01 	add.w	fp, fp, #1
 801a24c:	dd06      	ble.n	801a25c <__hexnan+0xfc>
 801a24e:	4544      	cmp	r4, r8
 801a250:	d9c3      	bls.n	801a1da <__hexnan+0x7a>
 801a252:	2300      	movs	r3, #0
 801a254:	f844 3c04 	str.w	r3, [r4, #-4]
 801a258:	2501      	movs	r5, #1
 801a25a:	3c04      	subs	r4, #4
 801a25c:	6822      	ldr	r2, [r4, #0]
 801a25e:	f000 000f 	and.w	r0, r0, #15
 801a262:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a266:	6020      	str	r0, [r4, #0]
 801a268:	e7b7      	b.n	801a1da <__hexnan+0x7a>
 801a26a:	2508      	movs	r5, #8
 801a26c:	e7b5      	b.n	801a1da <__hexnan+0x7a>
 801a26e:	9b01      	ldr	r3, [sp, #4]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d0df      	beq.n	801a234 <__hexnan+0xd4>
 801a274:	f1c3 0320 	rsb	r3, r3, #32
 801a278:	f04f 32ff 	mov.w	r2, #4294967295
 801a27c:	40da      	lsrs	r2, r3
 801a27e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a282:	4013      	ands	r3, r2
 801a284:	f846 3c04 	str.w	r3, [r6, #-4]
 801a288:	e7d4      	b.n	801a234 <__hexnan+0xd4>
 801a28a:	3f04      	subs	r7, #4
 801a28c:	e7d2      	b.n	801a234 <__hexnan+0xd4>
 801a28e:	2004      	movs	r0, #4
 801a290:	b007      	add	sp, #28
 801a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a296 <__ascii_mbtowc>:
 801a296:	b082      	sub	sp, #8
 801a298:	b901      	cbnz	r1, 801a29c <__ascii_mbtowc+0x6>
 801a29a:	a901      	add	r1, sp, #4
 801a29c:	b142      	cbz	r2, 801a2b0 <__ascii_mbtowc+0x1a>
 801a29e:	b14b      	cbz	r3, 801a2b4 <__ascii_mbtowc+0x1e>
 801a2a0:	7813      	ldrb	r3, [r2, #0]
 801a2a2:	600b      	str	r3, [r1, #0]
 801a2a4:	7812      	ldrb	r2, [r2, #0]
 801a2a6:	1e10      	subs	r0, r2, #0
 801a2a8:	bf18      	it	ne
 801a2aa:	2001      	movne	r0, #1
 801a2ac:	b002      	add	sp, #8
 801a2ae:	4770      	bx	lr
 801a2b0:	4610      	mov	r0, r2
 801a2b2:	e7fb      	b.n	801a2ac <__ascii_mbtowc+0x16>
 801a2b4:	f06f 0001 	mvn.w	r0, #1
 801a2b8:	e7f8      	b.n	801a2ac <__ascii_mbtowc+0x16>

0801a2ba <_realloc_r>:
 801a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2be:	4680      	mov	r8, r0
 801a2c0:	4614      	mov	r4, r2
 801a2c2:	460e      	mov	r6, r1
 801a2c4:	b921      	cbnz	r1, 801a2d0 <_realloc_r+0x16>
 801a2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ca:	4611      	mov	r1, r2
 801a2cc:	f7fd be3e 	b.w	8017f4c <_malloc_r>
 801a2d0:	b92a      	cbnz	r2, 801a2de <_realloc_r+0x24>
 801a2d2:	f7fd fdc7 	bl	8017e64 <_free_r>
 801a2d6:	4625      	mov	r5, r4
 801a2d8:	4628      	mov	r0, r5
 801a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2de:	f000 f842 	bl	801a366 <_malloc_usable_size_r>
 801a2e2:	4284      	cmp	r4, r0
 801a2e4:	4607      	mov	r7, r0
 801a2e6:	d802      	bhi.n	801a2ee <_realloc_r+0x34>
 801a2e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a2ec:	d812      	bhi.n	801a314 <_realloc_r+0x5a>
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	4640      	mov	r0, r8
 801a2f2:	f7fd fe2b 	bl	8017f4c <_malloc_r>
 801a2f6:	4605      	mov	r5, r0
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	d0ed      	beq.n	801a2d8 <_realloc_r+0x1e>
 801a2fc:	42bc      	cmp	r4, r7
 801a2fe:	4622      	mov	r2, r4
 801a300:	4631      	mov	r1, r6
 801a302:	bf28      	it	cs
 801a304:	463a      	movcs	r2, r7
 801a306:	f7fc ff1c 	bl	8017142 <memcpy>
 801a30a:	4631      	mov	r1, r6
 801a30c:	4640      	mov	r0, r8
 801a30e:	f7fd fda9 	bl	8017e64 <_free_r>
 801a312:	e7e1      	b.n	801a2d8 <_realloc_r+0x1e>
 801a314:	4635      	mov	r5, r6
 801a316:	e7df      	b.n	801a2d8 <_realloc_r+0x1e>

0801a318 <__ascii_wctomb>:
 801a318:	b149      	cbz	r1, 801a32e <__ascii_wctomb+0x16>
 801a31a:	2aff      	cmp	r2, #255	; 0xff
 801a31c:	bf85      	ittet	hi
 801a31e:	238a      	movhi	r3, #138	; 0x8a
 801a320:	6003      	strhi	r3, [r0, #0]
 801a322:	700a      	strbls	r2, [r1, #0]
 801a324:	f04f 30ff 	movhi.w	r0, #4294967295
 801a328:	bf98      	it	ls
 801a32a:	2001      	movls	r0, #1
 801a32c:	4770      	bx	lr
 801a32e:	4608      	mov	r0, r1
 801a330:	4770      	bx	lr
	...

0801a334 <fiprintf>:
 801a334:	b40e      	push	{r1, r2, r3}
 801a336:	b503      	push	{r0, r1, lr}
 801a338:	4601      	mov	r1, r0
 801a33a:	ab03      	add	r3, sp, #12
 801a33c:	4805      	ldr	r0, [pc, #20]	; (801a354 <fiprintf+0x20>)
 801a33e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a342:	6800      	ldr	r0, [r0, #0]
 801a344:	9301      	str	r3, [sp, #4]
 801a346:	f000 f83f 	bl	801a3c8 <_vfiprintf_r>
 801a34a:	b002      	add	sp, #8
 801a34c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a350:	b003      	add	sp, #12
 801a352:	4770      	bx	lr
 801a354:	200003d0 	.word	0x200003d0

0801a358 <abort>:
 801a358:	b508      	push	{r3, lr}
 801a35a:	2006      	movs	r0, #6
 801a35c:	f000 fa0c 	bl	801a778 <raise>
 801a360:	2001      	movs	r0, #1
 801a362:	f7eb f8f5 	bl	8005550 <_exit>

0801a366 <_malloc_usable_size_r>:
 801a366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a36a:	1f18      	subs	r0, r3, #4
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	bfbc      	itt	lt
 801a370:	580b      	ldrlt	r3, [r1, r0]
 801a372:	18c0      	addlt	r0, r0, r3
 801a374:	4770      	bx	lr

0801a376 <__sfputc_r>:
 801a376:	6893      	ldr	r3, [r2, #8]
 801a378:	3b01      	subs	r3, #1
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	b410      	push	{r4}
 801a37e:	6093      	str	r3, [r2, #8]
 801a380:	da08      	bge.n	801a394 <__sfputc_r+0x1e>
 801a382:	6994      	ldr	r4, [r2, #24]
 801a384:	42a3      	cmp	r3, r4
 801a386:	db01      	blt.n	801a38c <__sfputc_r+0x16>
 801a388:	290a      	cmp	r1, #10
 801a38a:	d103      	bne.n	801a394 <__sfputc_r+0x1e>
 801a38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a390:	f000 b934 	b.w	801a5fc <__swbuf_r>
 801a394:	6813      	ldr	r3, [r2, #0]
 801a396:	1c58      	adds	r0, r3, #1
 801a398:	6010      	str	r0, [r2, #0]
 801a39a:	7019      	strb	r1, [r3, #0]
 801a39c:	4608      	mov	r0, r1
 801a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3a2:	4770      	bx	lr

0801a3a4 <__sfputs_r>:
 801a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a6:	4606      	mov	r6, r0
 801a3a8:	460f      	mov	r7, r1
 801a3aa:	4614      	mov	r4, r2
 801a3ac:	18d5      	adds	r5, r2, r3
 801a3ae:	42ac      	cmp	r4, r5
 801a3b0:	d101      	bne.n	801a3b6 <__sfputs_r+0x12>
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	e007      	b.n	801a3c6 <__sfputs_r+0x22>
 801a3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3ba:	463a      	mov	r2, r7
 801a3bc:	4630      	mov	r0, r6
 801a3be:	f7ff ffda 	bl	801a376 <__sfputc_r>
 801a3c2:	1c43      	adds	r3, r0, #1
 801a3c4:	d1f3      	bne.n	801a3ae <__sfputs_r+0xa>
 801a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a3c8 <_vfiprintf_r>:
 801a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3cc:	460d      	mov	r5, r1
 801a3ce:	b09d      	sub	sp, #116	; 0x74
 801a3d0:	4614      	mov	r4, r2
 801a3d2:	4698      	mov	r8, r3
 801a3d4:	4606      	mov	r6, r0
 801a3d6:	b118      	cbz	r0, 801a3e0 <_vfiprintf_r+0x18>
 801a3d8:	6a03      	ldr	r3, [r0, #32]
 801a3da:	b90b      	cbnz	r3, 801a3e0 <_vfiprintf_r+0x18>
 801a3dc:	f7fc fd98 	bl	8016f10 <__sinit>
 801a3e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3e2:	07d9      	lsls	r1, r3, #31
 801a3e4:	d405      	bmi.n	801a3f2 <_vfiprintf_r+0x2a>
 801a3e6:	89ab      	ldrh	r3, [r5, #12]
 801a3e8:	059a      	lsls	r2, r3, #22
 801a3ea:	d402      	bmi.n	801a3f2 <_vfiprintf_r+0x2a>
 801a3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3ee:	f7fc fea6 	bl	801713e <__retarget_lock_acquire_recursive>
 801a3f2:	89ab      	ldrh	r3, [r5, #12]
 801a3f4:	071b      	lsls	r3, r3, #28
 801a3f6:	d501      	bpl.n	801a3fc <_vfiprintf_r+0x34>
 801a3f8:	692b      	ldr	r3, [r5, #16]
 801a3fa:	b99b      	cbnz	r3, 801a424 <_vfiprintf_r+0x5c>
 801a3fc:	4629      	mov	r1, r5
 801a3fe:	4630      	mov	r0, r6
 801a400:	f000 f93a 	bl	801a678 <__swsetup_r>
 801a404:	b170      	cbz	r0, 801a424 <_vfiprintf_r+0x5c>
 801a406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a408:	07dc      	lsls	r4, r3, #31
 801a40a:	d504      	bpl.n	801a416 <_vfiprintf_r+0x4e>
 801a40c:	f04f 30ff 	mov.w	r0, #4294967295
 801a410:	b01d      	add	sp, #116	; 0x74
 801a412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a416:	89ab      	ldrh	r3, [r5, #12]
 801a418:	0598      	lsls	r0, r3, #22
 801a41a:	d4f7      	bmi.n	801a40c <_vfiprintf_r+0x44>
 801a41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a41e:	f7fc fe8f 	bl	8017140 <__retarget_lock_release_recursive>
 801a422:	e7f3      	b.n	801a40c <_vfiprintf_r+0x44>
 801a424:	2300      	movs	r3, #0
 801a426:	9309      	str	r3, [sp, #36]	; 0x24
 801a428:	2320      	movs	r3, #32
 801a42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a42e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a432:	2330      	movs	r3, #48	; 0x30
 801a434:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a5e8 <_vfiprintf_r+0x220>
 801a438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a43c:	f04f 0901 	mov.w	r9, #1
 801a440:	4623      	mov	r3, r4
 801a442:	469a      	mov	sl, r3
 801a444:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a448:	b10a      	cbz	r2, 801a44e <_vfiprintf_r+0x86>
 801a44a:	2a25      	cmp	r2, #37	; 0x25
 801a44c:	d1f9      	bne.n	801a442 <_vfiprintf_r+0x7a>
 801a44e:	ebba 0b04 	subs.w	fp, sl, r4
 801a452:	d00b      	beq.n	801a46c <_vfiprintf_r+0xa4>
 801a454:	465b      	mov	r3, fp
 801a456:	4622      	mov	r2, r4
 801a458:	4629      	mov	r1, r5
 801a45a:	4630      	mov	r0, r6
 801a45c:	f7ff ffa2 	bl	801a3a4 <__sfputs_r>
 801a460:	3001      	adds	r0, #1
 801a462:	f000 80a9 	beq.w	801a5b8 <_vfiprintf_r+0x1f0>
 801a466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a468:	445a      	add	r2, fp
 801a46a:	9209      	str	r2, [sp, #36]	; 0x24
 801a46c:	f89a 3000 	ldrb.w	r3, [sl]
 801a470:	2b00      	cmp	r3, #0
 801a472:	f000 80a1 	beq.w	801a5b8 <_vfiprintf_r+0x1f0>
 801a476:	2300      	movs	r3, #0
 801a478:	f04f 32ff 	mov.w	r2, #4294967295
 801a47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a480:	f10a 0a01 	add.w	sl, sl, #1
 801a484:	9304      	str	r3, [sp, #16]
 801a486:	9307      	str	r3, [sp, #28]
 801a488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a48c:	931a      	str	r3, [sp, #104]	; 0x68
 801a48e:	4654      	mov	r4, sl
 801a490:	2205      	movs	r2, #5
 801a492:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a496:	4854      	ldr	r0, [pc, #336]	; (801a5e8 <_vfiprintf_r+0x220>)
 801a498:	f7e5 fec2 	bl	8000220 <memchr>
 801a49c:	9a04      	ldr	r2, [sp, #16]
 801a49e:	b9d8      	cbnz	r0, 801a4d8 <_vfiprintf_r+0x110>
 801a4a0:	06d1      	lsls	r1, r2, #27
 801a4a2:	bf44      	itt	mi
 801a4a4:	2320      	movmi	r3, #32
 801a4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4aa:	0713      	lsls	r3, r2, #28
 801a4ac:	bf44      	itt	mi
 801a4ae:	232b      	movmi	r3, #43	; 0x2b
 801a4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4b4:	f89a 3000 	ldrb.w	r3, [sl]
 801a4b8:	2b2a      	cmp	r3, #42	; 0x2a
 801a4ba:	d015      	beq.n	801a4e8 <_vfiprintf_r+0x120>
 801a4bc:	9a07      	ldr	r2, [sp, #28]
 801a4be:	4654      	mov	r4, sl
 801a4c0:	2000      	movs	r0, #0
 801a4c2:	f04f 0c0a 	mov.w	ip, #10
 801a4c6:	4621      	mov	r1, r4
 801a4c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a4cc:	3b30      	subs	r3, #48	; 0x30
 801a4ce:	2b09      	cmp	r3, #9
 801a4d0:	d94d      	bls.n	801a56e <_vfiprintf_r+0x1a6>
 801a4d2:	b1b0      	cbz	r0, 801a502 <_vfiprintf_r+0x13a>
 801a4d4:	9207      	str	r2, [sp, #28]
 801a4d6:	e014      	b.n	801a502 <_vfiprintf_r+0x13a>
 801a4d8:	eba0 0308 	sub.w	r3, r0, r8
 801a4dc:	fa09 f303 	lsl.w	r3, r9, r3
 801a4e0:	4313      	orrs	r3, r2
 801a4e2:	9304      	str	r3, [sp, #16]
 801a4e4:	46a2      	mov	sl, r4
 801a4e6:	e7d2      	b.n	801a48e <_vfiprintf_r+0xc6>
 801a4e8:	9b03      	ldr	r3, [sp, #12]
 801a4ea:	1d19      	adds	r1, r3, #4
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	9103      	str	r1, [sp, #12]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	bfbb      	ittet	lt
 801a4f4:	425b      	neglt	r3, r3
 801a4f6:	f042 0202 	orrlt.w	r2, r2, #2
 801a4fa:	9307      	strge	r3, [sp, #28]
 801a4fc:	9307      	strlt	r3, [sp, #28]
 801a4fe:	bfb8      	it	lt
 801a500:	9204      	strlt	r2, [sp, #16]
 801a502:	7823      	ldrb	r3, [r4, #0]
 801a504:	2b2e      	cmp	r3, #46	; 0x2e
 801a506:	d10c      	bne.n	801a522 <_vfiprintf_r+0x15a>
 801a508:	7863      	ldrb	r3, [r4, #1]
 801a50a:	2b2a      	cmp	r3, #42	; 0x2a
 801a50c:	d134      	bne.n	801a578 <_vfiprintf_r+0x1b0>
 801a50e:	9b03      	ldr	r3, [sp, #12]
 801a510:	1d1a      	adds	r2, r3, #4
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	9203      	str	r2, [sp, #12]
 801a516:	2b00      	cmp	r3, #0
 801a518:	bfb8      	it	lt
 801a51a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a51e:	3402      	adds	r4, #2
 801a520:	9305      	str	r3, [sp, #20]
 801a522:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a5f8 <_vfiprintf_r+0x230>
 801a526:	7821      	ldrb	r1, [r4, #0]
 801a528:	2203      	movs	r2, #3
 801a52a:	4650      	mov	r0, sl
 801a52c:	f7e5 fe78 	bl	8000220 <memchr>
 801a530:	b138      	cbz	r0, 801a542 <_vfiprintf_r+0x17a>
 801a532:	9b04      	ldr	r3, [sp, #16]
 801a534:	eba0 000a 	sub.w	r0, r0, sl
 801a538:	2240      	movs	r2, #64	; 0x40
 801a53a:	4082      	lsls	r2, r0
 801a53c:	4313      	orrs	r3, r2
 801a53e:	3401      	adds	r4, #1
 801a540:	9304      	str	r3, [sp, #16]
 801a542:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a546:	4829      	ldr	r0, [pc, #164]	; (801a5ec <_vfiprintf_r+0x224>)
 801a548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a54c:	2206      	movs	r2, #6
 801a54e:	f7e5 fe67 	bl	8000220 <memchr>
 801a552:	2800      	cmp	r0, #0
 801a554:	d03f      	beq.n	801a5d6 <_vfiprintf_r+0x20e>
 801a556:	4b26      	ldr	r3, [pc, #152]	; (801a5f0 <_vfiprintf_r+0x228>)
 801a558:	bb1b      	cbnz	r3, 801a5a2 <_vfiprintf_r+0x1da>
 801a55a:	9b03      	ldr	r3, [sp, #12]
 801a55c:	3307      	adds	r3, #7
 801a55e:	f023 0307 	bic.w	r3, r3, #7
 801a562:	3308      	adds	r3, #8
 801a564:	9303      	str	r3, [sp, #12]
 801a566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a568:	443b      	add	r3, r7
 801a56a:	9309      	str	r3, [sp, #36]	; 0x24
 801a56c:	e768      	b.n	801a440 <_vfiprintf_r+0x78>
 801a56e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a572:	460c      	mov	r4, r1
 801a574:	2001      	movs	r0, #1
 801a576:	e7a6      	b.n	801a4c6 <_vfiprintf_r+0xfe>
 801a578:	2300      	movs	r3, #0
 801a57a:	3401      	adds	r4, #1
 801a57c:	9305      	str	r3, [sp, #20]
 801a57e:	4619      	mov	r1, r3
 801a580:	f04f 0c0a 	mov.w	ip, #10
 801a584:	4620      	mov	r0, r4
 801a586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a58a:	3a30      	subs	r2, #48	; 0x30
 801a58c:	2a09      	cmp	r2, #9
 801a58e:	d903      	bls.n	801a598 <_vfiprintf_r+0x1d0>
 801a590:	2b00      	cmp	r3, #0
 801a592:	d0c6      	beq.n	801a522 <_vfiprintf_r+0x15a>
 801a594:	9105      	str	r1, [sp, #20]
 801a596:	e7c4      	b.n	801a522 <_vfiprintf_r+0x15a>
 801a598:	fb0c 2101 	mla	r1, ip, r1, r2
 801a59c:	4604      	mov	r4, r0
 801a59e:	2301      	movs	r3, #1
 801a5a0:	e7f0      	b.n	801a584 <_vfiprintf_r+0x1bc>
 801a5a2:	ab03      	add	r3, sp, #12
 801a5a4:	9300      	str	r3, [sp, #0]
 801a5a6:	462a      	mov	r2, r5
 801a5a8:	4b12      	ldr	r3, [pc, #72]	; (801a5f4 <_vfiprintf_r+0x22c>)
 801a5aa:	a904      	add	r1, sp, #16
 801a5ac:	4630      	mov	r0, r6
 801a5ae:	f7fb fe4d 	bl	801624c <_printf_float>
 801a5b2:	4607      	mov	r7, r0
 801a5b4:	1c78      	adds	r0, r7, #1
 801a5b6:	d1d6      	bne.n	801a566 <_vfiprintf_r+0x19e>
 801a5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5ba:	07d9      	lsls	r1, r3, #31
 801a5bc:	d405      	bmi.n	801a5ca <_vfiprintf_r+0x202>
 801a5be:	89ab      	ldrh	r3, [r5, #12]
 801a5c0:	059a      	lsls	r2, r3, #22
 801a5c2:	d402      	bmi.n	801a5ca <_vfiprintf_r+0x202>
 801a5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5c6:	f7fc fdbb 	bl	8017140 <__retarget_lock_release_recursive>
 801a5ca:	89ab      	ldrh	r3, [r5, #12]
 801a5cc:	065b      	lsls	r3, r3, #25
 801a5ce:	f53f af1d 	bmi.w	801a40c <_vfiprintf_r+0x44>
 801a5d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a5d4:	e71c      	b.n	801a410 <_vfiprintf_r+0x48>
 801a5d6:	ab03      	add	r3, sp, #12
 801a5d8:	9300      	str	r3, [sp, #0]
 801a5da:	462a      	mov	r2, r5
 801a5dc:	4b05      	ldr	r3, [pc, #20]	; (801a5f4 <_vfiprintf_r+0x22c>)
 801a5de:	a904      	add	r1, sp, #16
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	f7fc f8d7 	bl	8016794 <_printf_i>
 801a5e6:	e7e4      	b.n	801a5b2 <_vfiprintf_r+0x1ea>
 801a5e8:	0801d949 	.word	0x0801d949
 801a5ec:	0801d953 	.word	0x0801d953
 801a5f0:	0801624d 	.word	0x0801624d
 801a5f4:	0801a3a5 	.word	0x0801a3a5
 801a5f8:	0801d94f 	.word	0x0801d94f

0801a5fc <__swbuf_r>:
 801a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5fe:	460e      	mov	r6, r1
 801a600:	4614      	mov	r4, r2
 801a602:	4605      	mov	r5, r0
 801a604:	b118      	cbz	r0, 801a60e <__swbuf_r+0x12>
 801a606:	6a03      	ldr	r3, [r0, #32]
 801a608:	b90b      	cbnz	r3, 801a60e <__swbuf_r+0x12>
 801a60a:	f7fc fc81 	bl	8016f10 <__sinit>
 801a60e:	69a3      	ldr	r3, [r4, #24]
 801a610:	60a3      	str	r3, [r4, #8]
 801a612:	89a3      	ldrh	r3, [r4, #12]
 801a614:	071a      	lsls	r2, r3, #28
 801a616:	d525      	bpl.n	801a664 <__swbuf_r+0x68>
 801a618:	6923      	ldr	r3, [r4, #16]
 801a61a:	b31b      	cbz	r3, 801a664 <__swbuf_r+0x68>
 801a61c:	6823      	ldr	r3, [r4, #0]
 801a61e:	6922      	ldr	r2, [r4, #16]
 801a620:	1a98      	subs	r0, r3, r2
 801a622:	6963      	ldr	r3, [r4, #20]
 801a624:	b2f6      	uxtb	r6, r6
 801a626:	4283      	cmp	r3, r0
 801a628:	4637      	mov	r7, r6
 801a62a:	dc04      	bgt.n	801a636 <__swbuf_r+0x3a>
 801a62c:	4621      	mov	r1, r4
 801a62e:	4628      	mov	r0, r5
 801a630:	f7ff fa3a 	bl	8019aa8 <_fflush_r>
 801a634:	b9e0      	cbnz	r0, 801a670 <__swbuf_r+0x74>
 801a636:	68a3      	ldr	r3, [r4, #8]
 801a638:	3b01      	subs	r3, #1
 801a63a:	60a3      	str	r3, [r4, #8]
 801a63c:	6823      	ldr	r3, [r4, #0]
 801a63e:	1c5a      	adds	r2, r3, #1
 801a640:	6022      	str	r2, [r4, #0]
 801a642:	701e      	strb	r6, [r3, #0]
 801a644:	6962      	ldr	r2, [r4, #20]
 801a646:	1c43      	adds	r3, r0, #1
 801a648:	429a      	cmp	r2, r3
 801a64a:	d004      	beq.n	801a656 <__swbuf_r+0x5a>
 801a64c:	89a3      	ldrh	r3, [r4, #12]
 801a64e:	07db      	lsls	r3, r3, #31
 801a650:	d506      	bpl.n	801a660 <__swbuf_r+0x64>
 801a652:	2e0a      	cmp	r6, #10
 801a654:	d104      	bne.n	801a660 <__swbuf_r+0x64>
 801a656:	4621      	mov	r1, r4
 801a658:	4628      	mov	r0, r5
 801a65a:	f7ff fa25 	bl	8019aa8 <_fflush_r>
 801a65e:	b938      	cbnz	r0, 801a670 <__swbuf_r+0x74>
 801a660:	4638      	mov	r0, r7
 801a662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a664:	4621      	mov	r1, r4
 801a666:	4628      	mov	r0, r5
 801a668:	f000 f806 	bl	801a678 <__swsetup_r>
 801a66c:	2800      	cmp	r0, #0
 801a66e:	d0d5      	beq.n	801a61c <__swbuf_r+0x20>
 801a670:	f04f 37ff 	mov.w	r7, #4294967295
 801a674:	e7f4      	b.n	801a660 <__swbuf_r+0x64>
	...

0801a678 <__swsetup_r>:
 801a678:	b538      	push	{r3, r4, r5, lr}
 801a67a:	4b2a      	ldr	r3, [pc, #168]	; (801a724 <__swsetup_r+0xac>)
 801a67c:	4605      	mov	r5, r0
 801a67e:	6818      	ldr	r0, [r3, #0]
 801a680:	460c      	mov	r4, r1
 801a682:	b118      	cbz	r0, 801a68c <__swsetup_r+0x14>
 801a684:	6a03      	ldr	r3, [r0, #32]
 801a686:	b90b      	cbnz	r3, 801a68c <__swsetup_r+0x14>
 801a688:	f7fc fc42 	bl	8016f10 <__sinit>
 801a68c:	89a3      	ldrh	r3, [r4, #12]
 801a68e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a692:	0718      	lsls	r0, r3, #28
 801a694:	d422      	bmi.n	801a6dc <__swsetup_r+0x64>
 801a696:	06d9      	lsls	r1, r3, #27
 801a698:	d407      	bmi.n	801a6aa <__swsetup_r+0x32>
 801a69a:	2309      	movs	r3, #9
 801a69c:	602b      	str	r3, [r5, #0]
 801a69e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a6a2:	81a3      	strh	r3, [r4, #12]
 801a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a6a8:	e034      	b.n	801a714 <__swsetup_r+0x9c>
 801a6aa:	0758      	lsls	r0, r3, #29
 801a6ac:	d512      	bpl.n	801a6d4 <__swsetup_r+0x5c>
 801a6ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6b0:	b141      	cbz	r1, 801a6c4 <__swsetup_r+0x4c>
 801a6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6b6:	4299      	cmp	r1, r3
 801a6b8:	d002      	beq.n	801a6c0 <__swsetup_r+0x48>
 801a6ba:	4628      	mov	r0, r5
 801a6bc:	f7fd fbd2 	bl	8017e64 <_free_r>
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	6363      	str	r3, [r4, #52]	; 0x34
 801a6c4:	89a3      	ldrh	r3, [r4, #12]
 801a6c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a6ca:	81a3      	strh	r3, [r4, #12]
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	6063      	str	r3, [r4, #4]
 801a6d0:	6923      	ldr	r3, [r4, #16]
 801a6d2:	6023      	str	r3, [r4, #0]
 801a6d4:	89a3      	ldrh	r3, [r4, #12]
 801a6d6:	f043 0308 	orr.w	r3, r3, #8
 801a6da:	81a3      	strh	r3, [r4, #12]
 801a6dc:	6923      	ldr	r3, [r4, #16]
 801a6de:	b94b      	cbnz	r3, 801a6f4 <__swsetup_r+0x7c>
 801a6e0:	89a3      	ldrh	r3, [r4, #12]
 801a6e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6ea:	d003      	beq.n	801a6f4 <__swsetup_r+0x7c>
 801a6ec:	4621      	mov	r1, r4
 801a6ee:	4628      	mov	r0, r5
 801a6f0:	f000 f884 	bl	801a7fc <__smakebuf_r>
 801a6f4:	89a0      	ldrh	r0, [r4, #12]
 801a6f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6fa:	f010 0301 	ands.w	r3, r0, #1
 801a6fe:	d00a      	beq.n	801a716 <__swsetup_r+0x9e>
 801a700:	2300      	movs	r3, #0
 801a702:	60a3      	str	r3, [r4, #8]
 801a704:	6963      	ldr	r3, [r4, #20]
 801a706:	425b      	negs	r3, r3
 801a708:	61a3      	str	r3, [r4, #24]
 801a70a:	6923      	ldr	r3, [r4, #16]
 801a70c:	b943      	cbnz	r3, 801a720 <__swsetup_r+0xa8>
 801a70e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a712:	d1c4      	bne.n	801a69e <__swsetup_r+0x26>
 801a714:	bd38      	pop	{r3, r4, r5, pc}
 801a716:	0781      	lsls	r1, r0, #30
 801a718:	bf58      	it	pl
 801a71a:	6963      	ldrpl	r3, [r4, #20]
 801a71c:	60a3      	str	r3, [r4, #8]
 801a71e:	e7f4      	b.n	801a70a <__swsetup_r+0x92>
 801a720:	2000      	movs	r0, #0
 801a722:	e7f7      	b.n	801a714 <__swsetup_r+0x9c>
 801a724:	200003d0 	.word	0x200003d0

0801a728 <_raise_r>:
 801a728:	291f      	cmp	r1, #31
 801a72a:	b538      	push	{r3, r4, r5, lr}
 801a72c:	4604      	mov	r4, r0
 801a72e:	460d      	mov	r5, r1
 801a730:	d904      	bls.n	801a73c <_raise_r+0x14>
 801a732:	2316      	movs	r3, #22
 801a734:	6003      	str	r3, [r0, #0]
 801a736:	f04f 30ff 	mov.w	r0, #4294967295
 801a73a:	bd38      	pop	{r3, r4, r5, pc}
 801a73c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a73e:	b112      	cbz	r2, 801a746 <_raise_r+0x1e>
 801a740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a744:	b94b      	cbnz	r3, 801a75a <_raise_r+0x32>
 801a746:	4620      	mov	r0, r4
 801a748:	f000 f830 	bl	801a7ac <_getpid_r>
 801a74c:	462a      	mov	r2, r5
 801a74e:	4601      	mov	r1, r0
 801a750:	4620      	mov	r0, r4
 801a752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a756:	f000 b817 	b.w	801a788 <_kill_r>
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d00a      	beq.n	801a774 <_raise_r+0x4c>
 801a75e:	1c59      	adds	r1, r3, #1
 801a760:	d103      	bne.n	801a76a <_raise_r+0x42>
 801a762:	2316      	movs	r3, #22
 801a764:	6003      	str	r3, [r0, #0]
 801a766:	2001      	movs	r0, #1
 801a768:	e7e7      	b.n	801a73a <_raise_r+0x12>
 801a76a:	2400      	movs	r4, #0
 801a76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a770:	4628      	mov	r0, r5
 801a772:	4798      	blx	r3
 801a774:	2000      	movs	r0, #0
 801a776:	e7e0      	b.n	801a73a <_raise_r+0x12>

0801a778 <raise>:
 801a778:	4b02      	ldr	r3, [pc, #8]	; (801a784 <raise+0xc>)
 801a77a:	4601      	mov	r1, r0
 801a77c:	6818      	ldr	r0, [r3, #0]
 801a77e:	f7ff bfd3 	b.w	801a728 <_raise_r>
 801a782:	bf00      	nop
 801a784:	200003d0 	.word	0x200003d0

0801a788 <_kill_r>:
 801a788:	b538      	push	{r3, r4, r5, lr}
 801a78a:	4d07      	ldr	r5, [pc, #28]	; (801a7a8 <_kill_r+0x20>)
 801a78c:	2300      	movs	r3, #0
 801a78e:	4604      	mov	r4, r0
 801a790:	4608      	mov	r0, r1
 801a792:	4611      	mov	r1, r2
 801a794:	602b      	str	r3, [r5, #0]
 801a796:	f7ea fecb 	bl	8005530 <_kill>
 801a79a:	1c43      	adds	r3, r0, #1
 801a79c:	d102      	bne.n	801a7a4 <_kill_r+0x1c>
 801a79e:	682b      	ldr	r3, [r5, #0]
 801a7a0:	b103      	cbz	r3, 801a7a4 <_kill_r+0x1c>
 801a7a2:	6023      	str	r3, [r4, #0]
 801a7a4:	bd38      	pop	{r3, r4, r5, pc}
 801a7a6:	bf00      	nop
 801a7a8:	200036e8 	.word	0x200036e8

0801a7ac <_getpid_r>:
 801a7ac:	f7ea beb8 	b.w	8005520 <_getpid>

0801a7b0 <__swhatbuf_r>:
 801a7b0:	b570      	push	{r4, r5, r6, lr}
 801a7b2:	460c      	mov	r4, r1
 801a7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7b8:	2900      	cmp	r1, #0
 801a7ba:	b096      	sub	sp, #88	; 0x58
 801a7bc:	4615      	mov	r5, r2
 801a7be:	461e      	mov	r6, r3
 801a7c0:	da0d      	bge.n	801a7de <__swhatbuf_r+0x2e>
 801a7c2:	89a3      	ldrh	r3, [r4, #12]
 801a7c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a7c8:	f04f 0100 	mov.w	r1, #0
 801a7cc:	bf0c      	ite	eq
 801a7ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a7d2:	2340      	movne	r3, #64	; 0x40
 801a7d4:	2000      	movs	r0, #0
 801a7d6:	6031      	str	r1, [r6, #0]
 801a7d8:	602b      	str	r3, [r5, #0]
 801a7da:	b016      	add	sp, #88	; 0x58
 801a7dc:	bd70      	pop	{r4, r5, r6, pc}
 801a7de:	466a      	mov	r2, sp
 801a7e0:	f000 f848 	bl	801a874 <_fstat_r>
 801a7e4:	2800      	cmp	r0, #0
 801a7e6:	dbec      	blt.n	801a7c2 <__swhatbuf_r+0x12>
 801a7e8:	9901      	ldr	r1, [sp, #4]
 801a7ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a7ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a7f2:	4259      	negs	r1, r3
 801a7f4:	4159      	adcs	r1, r3
 801a7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7fa:	e7eb      	b.n	801a7d4 <__swhatbuf_r+0x24>

0801a7fc <__smakebuf_r>:
 801a7fc:	898b      	ldrh	r3, [r1, #12]
 801a7fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a800:	079d      	lsls	r5, r3, #30
 801a802:	4606      	mov	r6, r0
 801a804:	460c      	mov	r4, r1
 801a806:	d507      	bpl.n	801a818 <__smakebuf_r+0x1c>
 801a808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a80c:	6023      	str	r3, [r4, #0]
 801a80e:	6123      	str	r3, [r4, #16]
 801a810:	2301      	movs	r3, #1
 801a812:	6163      	str	r3, [r4, #20]
 801a814:	b002      	add	sp, #8
 801a816:	bd70      	pop	{r4, r5, r6, pc}
 801a818:	ab01      	add	r3, sp, #4
 801a81a:	466a      	mov	r2, sp
 801a81c:	f7ff ffc8 	bl	801a7b0 <__swhatbuf_r>
 801a820:	9900      	ldr	r1, [sp, #0]
 801a822:	4605      	mov	r5, r0
 801a824:	4630      	mov	r0, r6
 801a826:	f7fd fb91 	bl	8017f4c <_malloc_r>
 801a82a:	b948      	cbnz	r0, 801a840 <__smakebuf_r+0x44>
 801a82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a830:	059a      	lsls	r2, r3, #22
 801a832:	d4ef      	bmi.n	801a814 <__smakebuf_r+0x18>
 801a834:	f023 0303 	bic.w	r3, r3, #3
 801a838:	f043 0302 	orr.w	r3, r3, #2
 801a83c:	81a3      	strh	r3, [r4, #12]
 801a83e:	e7e3      	b.n	801a808 <__smakebuf_r+0xc>
 801a840:	89a3      	ldrh	r3, [r4, #12]
 801a842:	6020      	str	r0, [r4, #0]
 801a844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a848:	81a3      	strh	r3, [r4, #12]
 801a84a:	9b00      	ldr	r3, [sp, #0]
 801a84c:	6163      	str	r3, [r4, #20]
 801a84e:	9b01      	ldr	r3, [sp, #4]
 801a850:	6120      	str	r0, [r4, #16]
 801a852:	b15b      	cbz	r3, 801a86c <__smakebuf_r+0x70>
 801a854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a858:	4630      	mov	r0, r6
 801a85a:	f000 f81d 	bl	801a898 <_isatty_r>
 801a85e:	b128      	cbz	r0, 801a86c <__smakebuf_r+0x70>
 801a860:	89a3      	ldrh	r3, [r4, #12]
 801a862:	f023 0303 	bic.w	r3, r3, #3
 801a866:	f043 0301 	orr.w	r3, r3, #1
 801a86a:	81a3      	strh	r3, [r4, #12]
 801a86c:	89a3      	ldrh	r3, [r4, #12]
 801a86e:	431d      	orrs	r5, r3
 801a870:	81a5      	strh	r5, [r4, #12]
 801a872:	e7cf      	b.n	801a814 <__smakebuf_r+0x18>

0801a874 <_fstat_r>:
 801a874:	b538      	push	{r3, r4, r5, lr}
 801a876:	4d07      	ldr	r5, [pc, #28]	; (801a894 <_fstat_r+0x20>)
 801a878:	2300      	movs	r3, #0
 801a87a:	4604      	mov	r4, r0
 801a87c:	4608      	mov	r0, r1
 801a87e:	4611      	mov	r1, r2
 801a880:	602b      	str	r3, [r5, #0]
 801a882:	f7ea feb4 	bl	80055ee <_fstat>
 801a886:	1c43      	adds	r3, r0, #1
 801a888:	d102      	bne.n	801a890 <_fstat_r+0x1c>
 801a88a:	682b      	ldr	r3, [r5, #0]
 801a88c:	b103      	cbz	r3, 801a890 <_fstat_r+0x1c>
 801a88e:	6023      	str	r3, [r4, #0]
 801a890:	bd38      	pop	{r3, r4, r5, pc}
 801a892:	bf00      	nop
 801a894:	200036e8 	.word	0x200036e8

0801a898 <_isatty_r>:
 801a898:	b538      	push	{r3, r4, r5, lr}
 801a89a:	4d06      	ldr	r5, [pc, #24]	; (801a8b4 <_isatty_r+0x1c>)
 801a89c:	2300      	movs	r3, #0
 801a89e:	4604      	mov	r4, r0
 801a8a0:	4608      	mov	r0, r1
 801a8a2:	602b      	str	r3, [r5, #0]
 801a8a4:	f7ea feb3 	bl	800560e <_isatty>
 801a8a8:	1c43      	adds	r3, r0, #1
 801a8aa:	d102      	bne.n	801a8b2 <_isatty_r+0x1a>
 801a8ac:	682b      	ldr	r3, [r5, #0]
 801a8ae:	b103      	cbz	r3, 801a8b2 <_isatty_r+0x1a>
 801a8b0:	6023      	str	r3, [r4, #0]
 801a8b2:	bd38      	pop	{r3, r4, r5, pc}
 801a8b4:	200036e8 	.word	0x200036e8

0801a8b8 <fmod>:
 801a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ba:	ed2d 8b02 	vpush	{d8}
 801a8be:	ec57 6b10 	vmov	r6, r7, d0
 801a8c2:	ec55 4b11 	vmov	r4, r5, d1
 801a8c6:	f000 f86d 	bl	801a9a4 <__ieee754_fmod>
 801a8ca:	4622      	mov	r2, r4
 801a8cc:	462b      	mov	r3, r5
 801a8ce:	4630      	mov	r0, r6
 801a8d0:	4639      	mov	r1, r7
 801a8d2:	eeb0 8a40 	vmov.f32	s16, s0
 801a8d6:	eef0 8a60 	vmov.f32	s17, s1
 801a8da:	f7e6 f94f 	bl	8000b7c <__aeabi_dcmpun>
 801a8de:	b990      	cbnz	r0, 801a906 <fmod+0x4e>
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	4629      	mov	r1, r5
 801a8e8:	f7e6 f916 	bl	8000b18 <__aeabi_dcmpeq>
 801a8ec:	b158      	cbz	r0, 801a906 <fmod+0x4e>
 801a8ee:	f7fc fbfb 	bl	80170e8 <__errno>
 801a8f2:	2321      	movs	r3, #33	; 0x21
 801a8f4:	6003      	str	r3, [r0, #0]
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	4610      	mov	r0, r2
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	f7e5 ffcd 	bl	800089c <__aeabi_ddiv>
 801a902:	ec41 0b18 	vmov	d8, r0, r1
 801a906:	eeb0 0a48 	vmov.f32	s0, s16
 801a90a:	eef0 0a68 	vmov.f32	s1, s17
 801a90e:	ecbd 8b02 	vpop	{d8}
 801a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a914 <round>:
 801a914:	ec53 2b10 	vmov	r2, r3, d0
 801a918:	b570      	push	{r4, r5, r6, lr}
 801a91a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801a91e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801a922:	2813      	cmp	r0, #19
 801a924:	ee10 5a10 	vmov	r5, s0
 801a928:	4619      	mov	r1, r3
 801a92a:	dc18      	bgt.n	801a95e <round+0x4a>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	da09      	bge.n	801a944 <round+0x30>
 801a930:	3001      	adds	r0, #1
 801a932:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801a936:	d103      	bne.n	801a940 <round+0x2c>
 801a938:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a93c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a940:	2300      	movs	r3, #0
 801a942:	e02a      	b.n	801a99a <round+0x86>
 801a944:	4c16      	ldr	r4, [pc, #88]	; (801a9a0 <round+0x8c>)
 801a946:	4104      	asrs	r4, r0
 801a948:	ea03 0604 	and.w	r6, r3, r4
 801a94c:	4316      	orrs	r6, r2
 801a94e:	d011      	beq.n	801a974 <round+0x60>
 801a950:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a954:	4103      	asrs	r3, r0
 801a956:	440b      	add	r3, r1
 801a958:	ea23 0104 	bic.w	r1, r3, r4
 801a95c:	e7f0      	b.n	801a940 <round+0x2c>
 801a95e:	2833      	cmp	r0, #51	; 0x33
 801a960:	dd0b      	ble.n	801a97a <round+0x66>
 801a962:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a966:	d105      	bne.n	801a974 <round+0x60>
 801a968:	ee10 0a10 	vmov	r0, s0
 801a96c:	f7e5 fcb6 	bl	80002dc <__adddf3>
 801a970:	4602      	mov	r2, r0
 801a972:	460b      	mov	r3, r1
 801a974:	ec43 2b10 	vmov	d0, r2, r3
 801a978:	bd70      	pop	{r4, r5, r6, pc}
 801a97a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801a97e:	f04f 34ff 	mov.w	r4, #4294967295
 801a982:	40f4      	lsrs	r4, r6
 801a984:	4214      	tst	r4, r2
 801a986:	d0f5      	beq.n	801a974 <round+0x60>
 801a988:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801a98c:	2301      	movs	r3, #1
 801a98e:	4083      	lsls	r3, r0
 801a990:	195b      	adds	r3, r3, r5
 801a992:	bf28      	it	cs
 801a994:	3101      	addcs	r1, #1
 801a996:	ea23 0304 	bic.w	r3, r3, r4
 801a99a:	461a      	mov	r2, r3
 801a99c:	460b      	mov	r3, r1
 801a99e:	e7e9      	b.n	801a974 <round+0x60>
 801a9a0:	000fffff 	.word	0x000fffff

0801a9a4 <__ieee754_fmod>:
 801a9a4:	ec53 2b11 	vmov	r2, r3, d1
 801a9a8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9b0:	ea5c 0402 	orrs.w	r4, ip, r2
 801a9b4:	ec51 0b10 	vmov	r0, r1, d0
 801a9b8:	ee11 7a10 	vmov	r7, s2
 801a9bc:	ee11 ea10 	vmov	lr, s2
 801a9c0:	461e      	mov	r6, r3
 801a9c2:	d00c      	beq.n	801a9de <__ieee754_fmod+0x3a>
 801a9c4:	4c78      	ldr	r4, [pc, #480]	; (801aba8 <__ieee754_fmod+0x204>)
 801a9c6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801a9ca:	45a0      	cmp	r8, r4
 801a9cc:	4689      	mov	r9, r1
 801a9ce:	dc06      	bgt.n	801a9de <__ieee754_fmod+0x3a>
 801a9d0:	4254      	negs	r4, r2
 801a9d2:	4d76      	ldr	r5, [pc, #472]	; (801abac <__ieee754_fmod+0x208>)
 801a9d4:	4314      	orrs	r4, r2
 801a9d6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801a9da:	42ac      	cmp	r4, r5
 801a9dc:	d909      	bls.n	801a9f2 <__ieee754_fmod+0x4e>
 801a9de:	f7e5 fe33 	bl	8000648 <__aeabi_dmul>
 801a9e2:	4602      	mov	r2, r0
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	f7e5 ff59 	bl	800089c <__aeabi_ddiv>
 801a9ea:	ec41 0b10 	vmov	d0, r0, r1
 801a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9f2:	45e0      	cmp	r8, ip
 801a9f4:	ee10 aa10 	vmov	sl, s0
 801a9f8:	ee10 4a10 	vmov	r4, s0
 801a9fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801aa00:	dc09      	bgt.n	801aa16 <__ieee754_fmod+0x72>
 801aa02:	dbf2      	blt.n	801a9ea <__ieee754_fmod+0x46>
 801aa04:	4290      	cmp	r0, r2
 801aa06:	d3f0      	bcc.n	801a9ea <__ieee754_fmod+0x46>
 801aa08:	d105      	bne.n	801aa16 <__ieee754_fmod+0x72>
 801aa0a:	4b69      	ldr	r3, [pc, #420]	; (801abb0 <__ieee754_fmod+0x20c>)
 801aa0c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801aa10:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa14:	e7e9      	b.n	801a9ea <__ieee754_fmod+0x46>
 801aa16:	4a65      	ldr	r2, [pc, #404]	; (801abac <__ieee754_fmod+0x208>)
 801aa18:	ea19 0f02 	tst.w	r9, r2
 801aa1c:	d148      	bne.n	801aab0 <__ieee754_fmod+0x10c>
 801aa1e:	f1b8 0f00 	cmp.w	r8, #0
 801aa22:	d13d      	bne.n	801aaa0 <__ieee754_fmod+0xfc>
 801aa24:	4963      	ldr	r1, [pc, #396]	; (801abb4 <__ieee754_fmod+0x210>)
 801aa26:	4653      	mov	r3, sl
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	dc36      	bgt.n	801aa9a <__ieee754_fmod+0xf6>
 801aa2c:	4216      	tst	r6, r2
 801aa2e:	d14f      	bne.n	801aad0 <__ieee754_fmod+0x12c>
 801aa30:	f1bc 0f00 	cmp.w	ip, #0
 801aa34:	d144      	bne.n	801aac0 <__ieee754_fmod+0x11c>
 801aa36:	4a5f      	ldr	r2, [pc, #380]	; (801abb4 <__ieee754_fmod+0x210>)
 801aa38:	463b      	mov	r3, r7
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	dc3d      	bgt.n	801aaba <__ieee754_fmod+0x116>
 801aa3e:	485e      	ldr	r0, [pc, #376]	; (801abb8 <__ieee754_fmod+0x214>)
 801aa40:	4281      	cmp	r1, r0
 801aa42:	db4a      	blt.n	801aada <__ieee754_fmod+0x136>
 801aa44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aa48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aa4c:	485a      	ldr	r0, [pc, #360]	; (801abb8 <__ieee754_fmod+0x214>)
 801aa4e:	4282      	cmp	r2, r0
 801aa50:	db57      	blt.n	801ab02 <__ieee754_fmod+0x15e>
 801aa52:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801aa56:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801aa5a:	1a89      	subs	r1, r1, r2
 801aa5c:	1b98      	subs	r0, r3, r6
 801aa5e:	eba4 070e 	sub.w	r7, r4, lr
 801aa62:	2900      	cmp	r1, #0
 801aa64:	d162      	bne.n	801ab2c <__ieee754_fmod+0x188>
 801aa66:	4574      	cmp	r4, lr
 801aa68:	bf38      	it	cc
 801aa6a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	bfa4      	itt	ge
 801aa72:	463c      	movge	r4, r7
 801aa74:	4603      	movge	r3, r0
 801aa76:	ea53 0104 	orrs.w	r1, r3, r4
 801aa7a:	d0c6      	beq.n	801aa0a <__ieee754_fmod+0x66>
 801aa7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801aa80:	db69      	blt.n	801ab56 <__ieee754_fmod+0x1b2>
 801aa82:	494d      	ldr	r1, [pc, #308]	; (801abb8 <__ieee754_fmod+0x214>)
 801aa84:	428a      	cmp	r2, r1
 801aa86:	db6c      	blt.n	801ab62 <__ieee754_fmod+0x1be>
 801aa88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801aa8c:	432b      	orrs	r3, r5
 801aa8e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801aa92:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801aa96:	4620      	mov	r0, r4
 801aa98:	e7a7      	b.n	801a9ea <__ieee754_fmod+0x46>
 801aa9a:	3901      	subs	r1, #1
 801aa9c:	005b      	lsls	r3, r3, #1
 801aa9e:	e7c3      	b.n	801aa28 <__ieee754_fmod+0x84>
 801aaa0:	4945      	ldr	r1, [pc, #276]	; (801abb8 <__ieee754_fmod+0x214>)
 801aaa2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	ddc0      	ble.n	801aa2c <__ieee754_fmod+0x88>
 801aaaa:	3901      	subs	r1, #1
 801aaac:	005b      	lsls	r3, r3, #1
 801aaae:	e7fa      	b.n	801aaa6 <__ieee754_fmod+0x102>
 801aab0:	ea4f 5128 	mov.w	r1, r8, asr #20
 801aab4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801aab8:	e7b8      	b.n	801aa2c <__ieee754_fmod+0x88>
 801aaba:	3a01      	subs	r2, #1
 801aabc:	005b      	lsls	r3, r3, #1
 801aabe:	e7bc      	b.n	801aa3a <__ieee754_fmod+0x96>
 801aac0:	4a3d      	ldr	r2, [pc, #244]	; (801abb8 <__ieee754_fmod+0x214>)
 801aac2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	ddb9      	ble.n	801aa3e <__ieee754_fmod+0x9a>
 801aaca:	3a01      	subs	r2, #1
 801aacc:	005b      	lsls	r3, r3, #1
 801aace:	e7fa      	b.n	801aac6 <__ieee754_fmod+0x122>
 801aad0:	ea4f 522c 	mov.w	r2, ip, asr #20
 801aad4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aad8:	e7b1      	b.n	801aa3e <__ieee754_fmod+0x9a>
 801aada:	1a40      	subs	r0, r0, r1
 801aadc:	281f      	cmp	r0, #31
 801aade:	dc0a      	bgt.n	801aaf6 <__ieee754_fmod+0x152>
 801aae0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801aae4:	fa08 f800 	lsl.w	r8, r8, r0
 801aae8:	fa2a f303 	lsr.w	r3, sl, r3
 801aaec:	ea43 0308 	orr.w	r3, r3, r8
 801aaf0:	fa0a f400 	lsl.w	r4, sl, r0
 801aaf4:	e7aa      	b.n	801aa4c <__ieee754_fmod+0xa8>
 801aaf6:	4b31      	ldr	r3, [pc, #196]	; (801abbc <__ieee754_fmod+0x218>)
 801aaf8:	1a5b      	subs	r3, r3, r1
 801aafa:	fa0a f303 	lsl.w	r3, sl, r3
 801aafe:	2400      	movs	r4, #0
 801ab00:	e7a4      	b.n	801aa4c <__ieee754_fmod+0xa8>
 801ab02:	1a80      	subs	r0, r0, r2
 801ab04:	281f      	cmp	r0, #31
 801ab06:	dc0a      	bgt.n	801ab1e <__ieee754_fmod+0x17a>
 801ab08:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801ab0c:	fa0c fc00 	lsl.w	ip, ip, r0
 801ab10:	fa27 f606 	lsr.w	r6, r7, r6
 801ab14:	ea46 060c 	orr.w	r6, r6, ip
 801ab18:	fa07 fe00 	lsl.w	lr, r7, r0
 801ab1c:	e79d      	b.n	801aa5a <__ieee754_fmod+0xb6>
 801ab1e:	4e27      	ldr	r6, [pc, #156]	; (801abbc <__ieee754_fmod+0x218>)
 801ab20:	1ab6      	subs	r6, r6, r2
 801ab22:	fa07 f606 	lsl.w	r6, r7, r6
 801ab26:	f04f 0e00 	mov.w	lr, #0
 801ab2a:	e796      	b.n	801aa5a <__ieee754_fmod+0xb6>
 801ab2c:	4574      	cmp	r4, lr
 801ab2e:	bf38      	it	cc
 801ab30:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801ab34:	2800      	cmp	r0, #0
 801ab36:	da05      	bge.n	801ab44 <__ieee754_fmod+0x1a0>
 801ab38:	0fe0      	lsrs	r0, r4, #31
 801ab3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ab3e:	0064      	lsls	r4, r4, #1
 801ab40:	3901      	subs	r1, #1
 801ab42:	e78b      	b.n	801aa5c <__ieee754_fmod+0xb8>
 801ab44:	ea50 0307 	orrs.w	r3, r0, r7
 801ab48:	f43f af5f 	beq.w	801aa0a <__ieee754_fmod+0x66>
 801ab4c:	0ffb      	lsrs	r3, r7, #31
 801ab4e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801ab52:	007c      	lsls	r4, r7, #1
 801ab54:	e7f4      	b.n	801ab40 <__ieee754_fmod+0x19c>
 801ab56:	0fe1      	lsrs	r1, r4, #31
 801ab58:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ab5c:	0064      	lsls	r4, r4, #1
 801ab5e:	3a01      	subs	r2, #1
 801ab60:	e78c      	b.n	801aa7c <__ieee754_fmod+0xd8>
 801ab62:	1a89      	subs	r1, r1, r2
 801ab64:	2914      	cmp	r1, #20
 801ab66:	dc0a      	bgt.n	801ab7e <__ieee754_fmod+0x1da>
 801ab68:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801ab6c:	fa03 f202 	lsl.w	r2, r3, r2
 801ab70:	40cc      	lsrs	r4, r1
 801ab72:	4322      	orrs	r2, r4
 801ab74:	410b      	asrs	r3, r1
 801ab76:	ea43 0105 	orr.w	r1, r3, r5
 801ab7a:	4610      	mov	r0, r2
 801ab7c:	e735      	b.n	801a9ea <__ieee754_fmod+0x46>
 801ab7e:	291f      	cmp	r1, #31
 801ab80:	dc07      	bgt.n	801ab92 <__ieee754_fmod+0x1ee>
 801ab82:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801ab86:	40cc      	lsrs	r4, r1
 801ab88:	fa03 f202 	lsl.w	r2, r3, r2
 801ab8c:	4322      	orrs	r2, r4
 801ab8e:	462b      	mov	r3, r5
 801ab90:	e7f1      	b.n	801ab76 <__ieee754_fmod+0x1d2>
 801ab92:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801ab96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ab9a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801ab9e:	32e2      	adds	r2, #226	; 0xe2
 801aba0:	fa43 f202 	asr.w	r2, r3, r2
 801aba4:	e7f3      	b.n	801ab8e <__ieee754_fmod+0x1ea>
 801aba6:	bf00      	nop
 801aba8:	7fefffff 	.word	0x7fefffff
 801abac:	7ff00000 	.word	0x7ff00000
 801abb0:	0801da00 	.word	0x0801da00
 801abb4:	fffffbed 	.word	0xfffffbed
 801abb8:	fffffc02 	.word	0xfffffc02
 801abbc:	fffffbe2 	.word	0xfffffbe2

0801abc0 <_init>:
 801abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abc2:	bf00      	nop
 801abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abc6:	bc08      	pop	{r3}
 801abc8:	469e      	mov	lr, r3
 801abca:	4770      	bx	lr

0801abcc <_fini>:
 801abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abce:	bf00      	nop
 801abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abd2:	bc08      	pop	{r3}
 801abd4:	469e      	mov	lr, r3
 801abd6:	4770      	bx	lr
