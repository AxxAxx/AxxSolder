
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a160  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d98  0801a340  0801a340  0002a340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0d8  0801d0d8  00030540  2**0
                  CONTENTS
  4 .ARM          00000008  0801d0d8  0801d0d8  0002d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0e0  0801d0e0  00030540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d0e0  0801d0e0  0002d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d0e4  0801d0e4  0002d0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  0801d0e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e88  20000540  0801d628  00030540  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033c8  0801d628  000333c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f4dd  00000000  00000000  000305b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065c5  00000000  00000000  0005fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002990  00000000  00000000  00066058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fdd  00000000  00000000  000689e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002895b  00000000  00000000  0006a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035537  00000000  00000000  00093320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee767  00000000  00000000  000c8857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c6c8  00000000  00000000  001b6fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000540 	.word	0x20000540
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a328 	.word	0x0801a328

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000544 	.word	0x20000544
 800021c:	0801a328 	.word	0x0801a328

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f007 f818 	bl	80080c8 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001b44 	.word	0x20001b44

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000560 	.word	0x20000560
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2348      	movs	r3, #72	; 0x48
 800118c:	461a      	mov	r2, r3
 800118e:	f015 fb8c 	bl	80168aa <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000560 	.word	0x20000560

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2348      	movs	r3, #72	; 0x48
 80011e8:	461a      	mov	r2, r3
 80011ea:	f015 fb5e 	bl	80168aa <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f006 ff66 	bl	80080c8 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f007 fc46 	bl	8008a98 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f007 fd0e 	bl	8008c70 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f007 fb85 	bl	80089c0 <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 fb70 	bl	80089c0 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f007 fbf9 	bl	8008adc <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f007 fbec 	bl	8008adc <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000055c 	.word	0x2000055c
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000560 	.word	0x20000560
 8001320:	20000000 	.word	0x20000000
 8001324:	20001b44 	.word	0x20001b44
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	200005a8 	.word	0x200005a8

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000628 	.word	0x20000628
 8001408:	2000062c 	.word	0x2000062c
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fdcb 	bl	800401c <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	6193      	str	r3, [r2, #24]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	20000a30 	.word	0x20000a30
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f007 fe5b 	bl	80091ec <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f007 fe55 	bl	80091ec <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	200006a0 	.word	0x200006a0
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fd4e 	bl	800401c <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000d5c 	.word	0x20000d5c
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fee8 	bl	8001394 <get_mean_ADC_reading_indexed>
 80015c4:	ec53 2b10 	vmov	r2, r3, d0
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fb14 	bl	8000bf8 <__aeabi_d2uiz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4977      	ldr	r1, [pc, #476]	; (80017b0 <get_thermocouple_temperature+0x1f8>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fd21 	bl	800401c <Moving_Average_Compute>
 80015da:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <get_thermocouple_temperature+0x1fc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d12e      	bne.n	8001644 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80015e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ee:	f7ff f82b 	bl	8000648 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	a357      	add	r3, pc, #348	; (adr r3, 8001758 <get_thermocouple_temperature+0x1a0>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f822 	bl	8000648 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4614      	mov	r4, r2
 800160a:	461d      	mov	r5, r3
 800160c:	a354      	add	r3, pc, #336	; (adr r3, 8001760 <get_thermocouple_temperature+0x1a8>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001616:	f7ff f817 	bl	8000648 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4620      	mov	r0, r4
 8001620:	4629      	mov	r1, r5
 8001622:	f7fe fe5b 	bl	80002dc <__adddf3>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	a34e      	add	r3, pc, #312	; (adr r3, 8001768 <get_thermocouple_temperature+0x1b0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fe52 	bl	80002dc <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	495e      	ldr	r1, [pc, #376]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800163e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001642:	e064      	b.n	800170e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <get_thermocouple_temperature+0x1fc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d12e      	bne.n	80016aa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800164c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001654:	f7fe fff8 	bl	8000648 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	a343      	add	r3, pc, #268	; (adr r3, 8001770 <get_thermocouple_temperature+0x1b8>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4614      	mov	r4, r2
 8001670:	461d      	mov	r5, r3
 8001672:	a341      	add	r3, pc, #260	; (adr r3, 8001778 <get_thermocouple_temperature+0x1c0>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167c:	f7fe ffe4 	bl	8000648 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fe28 	bl	80002dc <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	a33a      	add	r3, pc, #232	; (adr r3, 8001780 <get_thermocouple_temperature+0x1c8>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fe1f 	bl	80002dc <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4945      	ldr	r1, [pc, #276]	; (80017b8 <get_thermocouple_temperature+0x200>)
 80016a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016a8:	e031      	b.n	800170e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <get_thermocouple_temperature+0x1fc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d12d      	bne.n	800170e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 80016b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ba:	f7fe ffc5 	bl	8000648 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	a330      	add	r3, pc, #192	; (adr r3, 8001788 <get_thermocouple_temperature+0x1d0>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	a32d      	add	r3, pc, #180	; (adr r3, 8001790 <get_thermocouple_temperature+0x1d8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e2:	f7fe ffb1 	bl	8000648 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdf5 	bl	80002dc <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	a327      	add	r3, pc, #156	; (adr r3, 8001798 <get_thermocouple_temperature+0x1e0>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe fdec 	bl	80002dc <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	492b      	ldr	r1, [pc, #172]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800170a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <get_thermocouple_temperature+0x200>)
 8001710:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <get_thermocouple_temperature+0x204>)
 8001716:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800171a:	f7fe fddf 	bl	80002dc <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4925      	ldr	r1, [pc, #148]	; (80017b8 <get_thermocouple_temperature+0x200>)
 8001724:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800172a:	ed93 7b02 	vldr	d7, [r3, #8]
 800172e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017a0 <get_thermocouple_temperature+0x1e8>
 8001732:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017a8 <get_thermocouple_temperature+0x1f0>
 8001736:	eeb0 0a47 	vmov.f32	s0, s14
 800173a:	eef0 0a67 	vmov.f32	s1, s15
 800173e:	f7ff fdf9 	bl	8001334 <clamp>
 8001742:	eeb0 7a40 	vmov.f32	s14, s0
 8001746:	eef0 7a60 	vmov.f32	s15, s1
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <get_thermocouple_temperature+0x200>)
 800174c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	92e63abf 	.word	0x92e63abf
 800175c:	3ee1b6ee 	.word	0x3ee1b6ee
 8001760:	1a8bcf67 	.word	0x1a8bcf67
 8001764:	3fd3ea38 	.word	0x3fd3ea38
 8001768:	ef80bf90 	.word	0xef80bf90
 800176c:	403810db 	.word	0x403810db
 8001770:	82fead10 	.word	0x82fead10
 8001774:	3ea7dc92 	.word	0x3ea7dc92
 8001778:	c53ce03f 	.word	0xc53ce03f
 800177c:	3fbd94aa 	.word	0x3fbd94aa
 8001780:	34da2134 	.word	0x34da2134
 8001784:	403a2648 	.word	0x403a2648
 8001788:	202b3c5a 	.word	0x202b3c5a
 800178c:	3f0edf88 	.word	0x3f0edf88
 8001790:	15fb4706 	.word	0x15fb4706
 8001794:	3fda2f75 	.word	0x3fda2f75
 8001798:	53430524 	.word	0x53430524
 800179c:	40381413 	.word	0x40381413
 80017a0:	00000000 	.word	0x00000000
 80017a4:	408f3800 	.word	0x408f3800
	...
 80017b0:	20000704 	.word	0x20000704
 80017b4:	200005b8 	.word	0x200005b8
 80017b8:	20000038 	.word	0x20000038
 80017bc:	200006a0 	.word	0x200006a0

080017c0 <settings_menue>:

void settings_menue(){
 80017c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017c4:	b08d      	sub	sp, #52	; 0x34
 80017c6:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 80017c8:	2120      	movs	r1, #32
 80017ca:	48c1      	ldr	r0, [pc, #772]	; (8001ad0 <settings_menue+0x310>)
 80017cc:	f007 fcf6 	bl	80091bc <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	f040 82cb 	bne.w	8001d6e <settings_menue+0x5ae>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80017d8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80017dc:	f7ff fe74 	bl	80014c8 <RGB_to_BRG>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461c      	mov	r4, r3
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fe6f 	bl	80014c8 <RGB_to_BRG>
 80017ea:	4603      	mov	r3, r0
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	9400      	str	r4, [sp, #0]
 80017f0:	4bb8      	ldr	r3, [pc, #736]	; (8001ad4 <settings_menue+0x314>)
 80017f2:	4ab9      	ldr	r2, [pc, #740]	; (8001ad8 <settings_menue+0x318>)
 80017f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017f8:	2000      	movs	r0, #0
 80017fa:	f004 f969 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80017fe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001802:	f7ff fe61 	bl	80014c8 <RGB_to_BRG>
 8001806:	4603      	mov	r3, r0
 8001808:	461c      	mov	r4, r3
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fe5c 	bl	80014c8 <RGB_to_BRG>
 8001810:	4603      	mov	r3, r0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	9400      	str	r4, [sp, #0]
 8001816:	4baf      	ldr	r3, [pc, #700]	; (8001ad4 <settings_menue+0x314>)
 8001818:	4ab0      	ldr	r2, [pc, #704]	; (8001adc <settings_menue+0x31c>)
 800181a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800181e:	2096      	movs	r0, #150	; 0x96
 8001820:	f004 f956 	bl	8005ad0 <LCD_PutStr>

		TIM2->CNT = 1000;
 8001824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001848:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800184c:	f7ff fe3c 	bl	80014c8 <RGB_to_BRG>
 8001850:	4603      	mov	r3, r0
 8001852:	461c      	mov	r4, r3
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fe37 	bl	80014c8 <RGB_to_BRG>
 800185a:	4603      	mov	r3, r0
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	9400      	str	r4, [sp, #0]
 8001860:	4b9c      	ldr	r3, [pc, #624]	; (8001ad4 <settings_menue+0x314>)
 8001862:	4a9f      	ldr	r2, [pc, #636]	; (8001ae0 <settings_menue+0x320>)
 8001864:	210c      	movs	r1, #12
 8001866:	203c      	movs	r0, #60	; 0x3c
 8001868:	f004 f932 	bl	8005ad0 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 800186c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001870:	f7ff fe2a 	bl	80014c8 <RGB_to_BRG>
 8001874:	4603      	mov	r3, r0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2328      	movs	r3, #40	; 0x28
 800187a:	22f0      	movs	r2, #240	; 0xf0
 800187c:	2128      	movs	r1, #40	; 0x28
 800187e:	2000      	movs	r0, #0
 8001880:	f004 f8e8 	bl	8005a54 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001884:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001888:	f7ff fe1e 	bl	80014c8 <RGB_to_BRG>
 800188c:	4603      	mov	r3, r0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2329      	movs	r3, #41	; 0x29
 8001892:	22f0      	movs	r2, #240	; 0xf0
 8001894:	2129      	movs	r1, #41	; 0x29
 8001896:	2000      	movs	r0, #0
 8001898:	f004 f8dc 	bl	8005a54 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 800189c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80018a0:	f7ff fe12 	bl	80014c8 <RGB_to_BRG>
 80018a4:	4603      	mov	r3, r0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	232a      	movs	r3, #42	; 0x2a
 80018aa:	22f0      	movs	r2, #240	; 0xf0
 80018ac:	212a      	movs	r1, #42	; 0x2a
 80018ae:	2000      	movs	r0, #0
 80018b0:	f004 f8d0 	bl	8005a54 <LCD_DrawLine>

		HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f004 fa24 	bl	8005d04 <HAL_Delay>
		while(menu_active == 1){
 80018bc:	e253      	b.n	8001d66 <settings_menue+0x5a6>
			if(menue_level == 0){
 80018be:	8c3b      	ldrh	r3, [r7, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d120      	bne.n	8001906 <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 80018c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe42 	bl	8000554 <__aeabi_ui2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8001ab8 <settings_menue+0x2f8>
 80018d8:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001ac0 <settings_menue+0x300>
 80018dc:	ec43 2b10 	vmov	d0, r2, r3
 80018e0:	f7ff fd28 	bl	8001334 <clamp>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f982 	bl	8000bf8 <__aeabi_d2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 80018f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001906:	8c3b      	ldrh	r3, [r7, #32]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 8091 	bne.w	8001a30 <settings_menue+0x270>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 800190e:	69b8      	ldr	r0, [r7, #24]
 8001910:	f7fe fe42 	bl	8000598 <__aeabi_f2d>
 8001914:	4604      	mov	r4, r0
 8001916:	460d      	mov	r5, r1
 8001918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe18 	bl	8000554 <__aeabi_ui2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <settings_menue+0x324>)
 800192a:	f7fe fcd5 	bl	80002d8 <__aeabi_dsub>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f97f 	bl	8000c38 <__aeabi_d2f>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe2b 	bl	8000598 <__aeabi_f2d>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800194a:	f7fe ffa7 	bl	800089c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fcc1 	bl	80002dc <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	ee17 0a90 	vmov	r0, s15
 8001970:	f7fe fe12 	bl	8000598 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	485a      	ldr	r0, [pc, #360]	; (8001ae8 <settings_menue+0x328>)
 800197e:	180c      	adds	r4, r1, r0
 8001980:	4640      	mov	r0, r8
 8001982:	4649      	mov	r1, r9
 8001984:	f7fe fca8 	bl	80002d8 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001992:	2b05      	cmp	r3, #5
 8001994:	d002      	beq.n	800199c <settings_menue+0x1dc>
 8001996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001998:	2b08      	cmp	r3, #8
 800199a:	d12c      	bne.n	80019f6 <settings_menue+0x236>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 800199c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4a51      	ldr	r2, [pc, #324]	; (8001ae8 <settings_menue+0x328>)
 80019a2:	4413      	add	r3, r2
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8fc 	bl	8000ba8 <__aeabi_d2iz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bfb8      	it	lt
 80019b6:	425b      	neglt	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fddb 	bl	8000574 <__aeabi_i2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001ac8 <settings_menue+0x308>
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	f018 fb29 	bl	801a020 <fmod>
 80019ce:	eeb0 7a40 	vmov.f32	s14, s0
 80019d2:	eef0 7a60 	vmov.f32	s15, s1
 80019d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <settings_menue+0x328>)
 80019dc:	189c      	adds	r4, r3, r2
 80019de:	eeb0 0a47 	vmov.f32	s0, s14
 80019e2:	eef0 0a67 	vmov.f32	s1, s15
 80019e6:	f018 fb49 	bl	801a07c <round>
 80019ea:	eeb0 7a40 	vmov.f32	s14, s0
 80019ee:	eef0 7a60 	vmov.f32	s15, s1
 80019f2:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 80019f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d019      	beq.n	8001a30 <settings_menue+0x270>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 80019fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <settings_menue+0x328>)
 8001a02:	4413      	add	r3, r2
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8cc 	bl	8000ba8 <__aeabi_d2iz>
 8001a10:	4603      	mov	r3, r0
 8001a12:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a16:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4932      	ldr	r1, [pc, #200]	; (8001ae8 <settings_menue+0x328>)
 8001a20:	185c      	adds	r4, r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	f7fe fda6 	bl	8000574 <__aeabi_i2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a32:	2b0b      	cmp	r3, #11
 8001a34:	d906      	bls.n	8001a44 <settings_menue+0x284>
							menu_cursor_position = menu_length-1;
 8001a36:	230b      	movs	r3, #11
 8001a38:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 8001a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d903      	bls.n	8001a52 <settings_menue+0x292>
				menue_start = menu_cursor_position-7;
 8001a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a4c:	3b07      	subs	r3, #7
 8001a4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a50:	e001      	b.n	8001a56 <settings_menue+0x296>
			}
			else{
				menue_start = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001a56:	2120      	movs	r1, #32
 8001a58:	481d      	ldr	r0, [pc, #116]	; (8001ad0 <settings_menue+0x310>)
 8001a5a:	f007 fbaf 	bl	80091bc <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d143      	bne.n	8001aec <settings_menue+0x32c>
 8001a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d840      	bhi.n	8001aec <settings_menue+0x32c>
				if(menue_level == 0){
 8001a6a:	8c3b      	ldrh	r3, [r7, #32]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <settings_menue+0x2cc>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <settings_menue+0x328>)
 8001a76:	4413      	add	r3, r2
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f8da 	bl	8000c38 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a8a:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001a8c:	8c3b      	ldrh	r3, [r7, #32]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d106      	bne.n	8001aa0 <settings_menue+0x2e0>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a98:	005a      	lsls	r2, r3, #1
 8001a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001aa0:	8c3b      	ldrh	r3, [r7, #32]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bfb8      	it	lt
 8001aa8:	425b      	neglt	r3, r3
 8001aaa:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001aac:	20c8      	movs	r0, #200	; 0xc8
 8001aae:	f004 f929 	bl	8005d04 <HAL_Delay>
 8001ab2:	e04a      	b.n	8001b4a <settings_menue+0x38a>
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	412e8480 	.word	0x412e8480
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	408f4000 	.word	0x408f4000
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	40000000 	.word	0x40000000
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	0801b53c 	.word	0x0801b53c
 8001ad8:	0801a340 	.word	0x0801a340
 8001adc:	0801a34c 	.word	0x0801a34c
 8001ae0:	0801a354 	.word	0x0801a354
 8001ae4:	408f4000 	.word	0x408f4000
 8001ae8:	200006a0 	.word	0x200006a0
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001aec:	2120      	movs	r1, #32
 8001aee:	48a4      	ldr	r0, [pc, #656]	; (8001d80 <settings_menue+0x5c0>)
 8001af0:	f007 fb64 	bl	80091bc <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d105      	bne.n	8001b06 <settings_menue+0x346>
 8001afa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	d102      	bne.n	8001b06 <settings_menue+0x346>
				menu_active = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	83fb      	strh	r3, [r7, #30]
 8001b04:	e021      	b.n	8001b4a <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001b06:	2120      	movs	r1, #32
 8001b08:	489d      	ldr	r0, [pc, #628]	; (8001d80 <settings_menue+0x5c0>)
 8001b0a:	f007 fb57 	bl	80091bc <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d108      	bne.n	8001b26 <settings_menue+0x366>
 8001b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d105      	bne.n	8001b26 <settings_menue+0x366>
				menu_active = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001b1e:	4899      	ldr	r0, [pc, #612]	; (8001d84 <settings_menue+0x5c4>)
 8001b20:	f7ff fb40 	bl	80011a4 <FlashWrite>
 8001b24:	e011      	b.n	8001b4a <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001b26:	2120      	movs	r1, #32
 8001b28:	4895      	ldr	r0, [pc, #596]	; (8001d80 <settings_menue+0x5c0>)
 8001b2a:	f007 fb47 	bl	80091bc <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d10a      	bne.n	8001b4a <settings_menue+0x38a>
 8001b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b36:	2b09      	cmp	r3, #9
 8001b38:	d107      	bne.n	8001b4a <settings_menue+0x38a>
				flash_values = default_flash_values;
 8001b3a:	4a92      	ldr	r2, [pc, #584]	; (8001d84 <settings_menue+0x5c4>)
 8001b3c:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <settings_menue+0x5c8>)
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	2348      	movs	r3, #72	; 0x48
 8001b44:	461a      	mov	r2, r3
 8001b46:	f014 feb0 	bl	80168aa <memcpy>
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001b4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e104      	b.n	8001d5a <settings_menue+0x59a>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001b50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d12b      	bne.n	8001bb0 <settings_menue+0x3f0>
 8001b58:	8c3b      	ldrh	r3, [r7, #32]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d128      	bne.n	8001bb0 <settings_menue+0x3f0>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001b5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	0091      	lsls	r1, r2, #2
 8001b70:	461a      	mov	r2, r3
 8001b72:	460b      	mov	r3, r1
 8001b74:	4413      	add	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	332d      	adds	r3, #45	; 0x2d
 8001b7a:	b29c      	uxth	r4, r3
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4a81      	ldr	r2, [pc, #516]	; (8001d8c <settings_menue+0x5cc>)
 8001b88:	189d      	adds	r5, r3, r2
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fc9c 	bl	80014c8 <RGB_to_BRG>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461e      	mov	r6, r3
 8001b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b98:	f7ff fc96 	bl	80014c8 <RGB_to_BRG>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	9600      	str	r6, [sp, #0]
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <settings_menue+0x5d0>)
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	2005      	movs	r0, #5
 8001baa:	f003 ff91 	bl	8005ad0 <LCD_PutStr>
 8001bae:	e027      	b.n	8001c00 <settings_menue+0x440>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001bb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	0091      	lsls	r1, r2, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	332d      	adds	r3, #45	; 0x2d
 8001bcc:	b29c      	uxth	r4, r3
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4a6c      	ldr	r2, [pc, #432]	; (8001d8c <settings_menue+0x5cc>)
 8001bda:	189d      	adds	r5, r3, r2
 8001bdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001be0:	f7ff fc72 	bl	80014c8 <RGB_to_BRG>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461e      	mov	r6, r3
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff fc6d 	bl	80014c8 <RGB_to_BRG>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	9600      	str	r6, [sp, #0]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <settings_menue+0x5d0>)
 8001bf6:	462a      	mov	r2, r5
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f003 ff68 	bl	8005ad0 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001c00:	463b      	mov	r3, r7
 8001c02:	2214      	movs	r2, #20
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f014 fdcf 	bl	80167aa <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <settings_menue+0x5c4>)
 8001c12:	4413      	add	r3, r2
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	4638      	mov	r0, r7
 8001c1a:	495e      	ldr	r1, [pc, #376]	; (8001d94 <settings_menue+0x5d4>)
 8001c1c:	f014 fd62 	bl	80166e4 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <settings_menue+0x5c4>)
 8001c26:	4413      	add	r3, r2
 8001c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <settings_menue+0x5d8>)
 8001c32:	f7fe ff7b 	bl	8000b2c <__aeabi_dcmplt>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <settings_menue+0x48e>
					str[1] = 32;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001c40:	2320      	movs	r3, #32
 8001c42:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001c44:	2320      	movs	r3, #32
 8001c46:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	713b      	strb	r3, [r7, #4]
 8001c4c:	e011      	b.n	8001c72 <settings_menue+0x4b2>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <settings_menue+0x5c4>)
 8001c54:	4413      	add	r3, r2
 8001c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5a:	a347      	add	r3, pc, #284	; (adr r3, 8001d78 <settings_menue+0x5b8>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe ff64 	bl	8000b2c <__aeabi_dcmplt>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <settings_menue+0x4b2>
					str[2] = 32;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	dc49      	bgt.n	8001d0c <settings_menue+0x54c>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d124      	bne.n	8001cca <settings_menue+0x50a>
 8001c80:	8c3b      	ldrh	r3, [r7, #32]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d121      	bne.n	8001cca <settings_menue+0x50a>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	0091      	lsls	r1, r2, #2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	332d      	adds	r3, #45	; 0x2d
 8001ca2:	b29c      	uxth	r4, r3
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fc0f 	bl	80014c8 <RGB_to_BRG>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461d      	mov	r5, r3
 8001cae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cb2:	f7ff fc09 	bl	80014c8 <RGB_to_BRG>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	463a      	mov	r2, r7
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	9500      	str	r5, [sp, #0]
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <settings_menue+0x5d0>)
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	20c8      	movs	r0, #200	; 0xc8
 8001cc4:	f003 ff04 	bl	8005ad0 <LCD_PutStr>
 8001cc8:	e020      	b.n	8001d0c <settings_menue+0x54c>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	0091      	lsls	r1, r2, #2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	332d      	adds	r3, #45	; 0x2d
 8001ce6:	b29c      	uxth	r4, r3
 8001ce8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cec:	f7ff fbec 	bl	80014c8 <RGB_to_BRG>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fbe7 	bl	80014c8 <RGB_to_BRG>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	463a      	mov	r2, r7
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	9500      	str	r5, [sp, #0]
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <settings_menue+0x5d0>)
 8001d04:	4621      	mov	r1, r4
 8001d06:	20c8      	movs	r0, #200	; 0xc8
 8001d08:	f003 fee2 	bl	8005ad0 <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	dd20      	ble.n	8001d54 <settings_menue+0x594>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	0091      	lsls	r1, r2, #2
 8001d24:	461a      	mov	r2, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	332d      	adds	r3, #45	; 0x2d
 8001d2e:	b29c      	uxth	r4, r3
 8001d30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d34:	f7ff fbc8 	bl	80014c8 <RGB_to_BRG>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff fbc3 	bl	80014c8 <RGB_to_BRG>
 8001d42:	4603      	mov	r3, r0
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	9500      	str	r5, [sp, #0]
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <settings_menue+0x5d0>)
 8001d4a:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <settings_menue+0x5dc>)
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	20c8      	movs	r0, #200	; 0xc8
 8001d50:	f003 febe 	bl	8005ad0 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d5c:	3307      	adds	r3, #7
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f77f aef5 	ble.w	8001b50 <settings_menue+0x390>
		while(menu_active == 1){
 8001d66:	8bfb      	ldrh	r3, [r7, #30]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f43f ada8 	beq.w	80018be <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001d6e:	bf00      	nop
 8001d70:	372c      	adds	r7, #44	; 0x2c
 8001d72:	46bd      	mov	sp, r7
 8001d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	4058e000 	.word	0x4058e000
 8001d80:	48000400 	.word	0x48000400
 8001d84:	200006a0 	.word	0x200006a0
 8001d88:	20000088 	.word	0x20000088
 8001d8c:	200000d0 	.word	0x200000d0
 8001d90:	0801b53c 	.word	0x0801b53c
 8001d94:	0801a360 	.word	0x0801a360
 8001d98:	40230000 	.word	0x40230000
 8001d9c:	0801a368 	.word	0x0801a368

08001da0 <update_display>:

void update_display(){
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001da6:	2228      	movs	r2, #40	; 0x28
 8001da8:	2100      	movs	r1, #0
 8001daa:	4875      	ldr	r0, [pc, #468]	; (8001f80 <update_display+0x1e0>)
 8001dac:	f014 fcfd 	bl	80167aa <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001db0:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <update_display+0x1e4>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	4974      	ldr	r1, [pc, #464]	; (8001f88 <update_display+0x1e8>)
 8001db8:	4871      	ldr	r0, [pc, #452]	; (8001f80 <update_display+0x1e0>)
 8001dba:	f014 fc93 	bl	80166e4 <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001dbe:	4b71      	ldr	r3, [pc, #452]	; (8001f84 <update_display+0x1e4>)
 8001dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc4:	a36c      	add	r3, pc, #432	; (adr r3, 8001f78 <update_display+0x1d8>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe feaf 	bl	8000b2c <__aeabi_dcmplt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <update_display+0x40>
		buffer[2] = 32;
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <update_display+0x1e0>)
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001dda:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <update_display+0x1e0>)
 8001ddc:	2220      	movs	r2, #32
 8001dde:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001de0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001de4:	f7ff fb70 	bl	80014c8 <RGB_to_BRG>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461c      	mov	r4, r3
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fb6b 	bl	80014c8 <RGB_to_BRG>
 8001df2:	4603      	mov	r3, r0
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <update_display+0x1ec>)
 8001dfa:	4a61      	ldr	r2, [pc, #388]	; (8001f80 <update_display+0x1e0>)
 8001dfc:	214b      	movs	r1, #75	; 0x4b
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f003 fe66 	bl	8005ad0 <LCD_PutStr>

	if(sensor_values.heater_current < 10){
 8001e04:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <update_display+0x1e4>)
 8001e06:	8a9b      	ldrh	r3, [r3, #20]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d812      	bhi.n	8001e32 <update_display+0x92>
	  	LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e10:	f7ff fb5a 	bl	80014c8 <RGB_to_BRG>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461c      	mov	r4, r3
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fb55 	bl	80014c8 <RGB_to_BRG>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	9400      	str	r4, [sp, #0]
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <update_display+0x1ec>)
 8001e26:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <update_display+0x1f0>)
 8001e28:	21a5      	movs	r1, #165	; 0xa5
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f003 fe50 	bl	8005ad0 <LCD_PutStr>
 8001e30:	e02e      	b.n	8001e90 <update_display+0xf0>
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8001e32:	2228      	movs	r2, #40	; 0x28
 8001e34:	2100      	movs	r1, #0
 8001e36:	4852      	ldr	r0, [pc, #328]	; (8001f80 <update_display+0x1e0>)
 8001e38:	f014 fcb7 	bl	80167aa <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <update_display+0x1e4>)
 8001e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e42:	4951      	ldr	r1, [pc, #324]	; (8001f88 <update_display+0x1e8>)
 8001e44:	484e      	ldr	r0, [pc, #312]	; (8001f80 <update_display+0x1e0>)
 8001e46:	f014 fc4d 	bl	80166e4 <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <update_display+0x1e4>)
 8001e4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e50:	a349      	add	r3, pc, #292	; (adr r3, 8001f78 <update_display+0x1d8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fe69 	bl	8000b2c <__aeabi_dcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <update_display+0xcc>
			buffer[2] = 32;
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <update_display+0x1e0>)
 8001e62:	2220      	movs	r2, #32
 8001e64:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <update_display+0x1e0>)
 8001e68:	2220      	movs	r2, #32
 8001e6a:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e70:	f7ff fb2a 	bl	80014c8 <RGB_to_BRG>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461c      	mov	r4, r3
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fb25 	bl	80014c8 <RGB_to_BRG>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	9400      	str	r4, [sp, #0]
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <update_display+0x1ec>)
 8001e86:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <update_display+0x1e0>)
 8001e88:	21a5      	movs	r1, #165	; 0xa5
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f003 fe20 	bl	8005ad0 <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 8001e90:	2228      	movs	r2, #40	; 0x28
 8001e92:	2100      	movs	r1, #0
 8001e94:	483a      	ldr	r0, [pc, #232]	; (8001f80 <update_display+0x1e0>)
 8001e96:	f014 fc88 	bl	80167aa <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <update_display+0x1e4>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb7a 	bl	8000598 <__aeabi_f2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	493a      	ldr	r1, [pc, #232]	; (8001f94 <update_display+0x1f4>)
 8001eaa:	4835      	ldr	r0, [pc, #212]	; (8001f80 <update_display+0x1e0>)
 8001eac:	f014 fc1a 	bl	80166e4 <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001eb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eb4:	f7ff fb08 	bl	80014c8 <RGB_to_BRG>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461c      	mov	r4, r3
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fb03 	bl	80014c8 <RGB_to_BRG>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	9400      	str	r4, [sp, #0]
 8001ec8:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <update_display+0x1f8>)
 8001eca:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <update_display+0x1e0>)
 8001ecc:	21ff      	movs	r1, #255	; 0xff
 8001ece:	2064      	movs	r0, #100	; 0x64
 8001ed0:	f003 fdfe 	bl	8005ad0 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8001ed4:	2228      	movs	r2, #40	; 0x28
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4829      	ldr	r0, [pc, #164]	; (8001f80 <update_display+0x1e0>)
 8001eda:	f014 fc66 	bl	80167aa <memset>
	sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <update_display+0x1e4>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb58 	bl	8000598 <__aeabi_f2d>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4929      	ldr	r1, [pc, #164]	; (8001f94 <update_display+0x1f4>)
 8001eee:	4824      	ldr	r0, [pc, #144]	; (8001f80 <update_display+0x1e0>)
 8001ef0:	f014 fbf8 	bl	80166e4 <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ef4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ef8:	f7ff fae6 	bl	80014c8 <RGB_to_BRG>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461c      	mov	r4, r3
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fae1 	bl	80014c8 <RGB_to_BRG>
 8001f06:	4603      	mov	r3, r0
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	9400      	str	r4, [sp, #0]
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <update_display+0x1f8>)
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <update_display+0x1e0>)
 8001f10:	f240 1113 	movw	r1, #275	; 0x113
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f003 fddb 	bl	8005ad0 <LCD_PutStr>

	if(handle == T210){
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <update_display+0x1fc>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d112      	bne.n	8001f48 <update_display+0x1a8>
		LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f26:	f7ff facf 	bl	80014c8 <RGB_to_BRG>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff faca 	bl	80014c8 <RGB_to_BRG>
 8001f34:	4603      	mov	r3, r0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	9400      	str	r4, [sp, #0]
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <update_display+0x1f8>)
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <update_display+0x200>)
 8001f3e:	21eb      	movs	r1, #235	; 0xeb
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f003 fdc5 	bl	8005ad0 <LCD_PutStr>
 8001f46:	e045      	b.n	8001fd4 <update_display+0x234>
	}
	else if(handle == T245){
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <update_display+0x1fc>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d12b      	bne.n	8001fa8 <update_display+0x208>
		LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f54:	f7ff fab8 	bl	80014c8 <RGB_to_BRG>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff fab3 	bl	80014c8 <RGB_to_BRG>
 8001f62:	4603      	mov	r3, r0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	9400      	str	r4, [sp, #0]
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <update_display+0x1f8>)
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <update_display+0x204>)
 8001f6c:	21eb      	movs	r1, #235	; 0xeb
 8001f6e:	2064      	movs	r0, #100	; 0x64
 8001f70:	f003 fdae 	bl	8005ad0 <LCD_PutStr>
 8001f74:	e02e      	b.n	8001fd4 <update_display+0x234>
 8001f76:	bf00      	nop
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	4058e000 	.word	0x4058e000
 8001f80:	20000600 	.word	0x20000600
 8001f84:	20000038 	.word	0x20000038
 8001f88:	0801a370 	.word	0x0801a370
 8001f8c:	0801c4b4 	.word	0x0801c4b4
 8001f90:	0801a374 	.word	0x0801a374
 8001f94:	0801a37c 	.word	0x0801a37c
 8001f98:	0801a56c 	.word	0x0801a56c
 8001f9c:	200005b8 	.word	0x200005b8
 8001fa0:	0801a384 	.word	0x0801a384
 8001fa4:	0801a38c 	.word	0x0801a38c
	}
	else if(handle == NT115){
 8001fa8:	4bab      	ldr	r3, [pc, #684]	; (8002258 <update_display+0x4b8>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d111      	bne.n	8001fd4 <update_display+0x234>
		LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001fb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fb4:	f7ff fa88 	bl	80014c8 <RGB_to_BRG>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461c      	mov	r4, r3
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fa83 	bl	80014c8 <RGB_to_BRG>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	9400      	str	r4, [sp, #0]
 8001fc8:	4ba4      	ldr	r3, [pc, #656]	; (800225c <update_display+0x4bc>)
 8001fca:	4aa5      	ldr	r2, [pc, #660]	; (8002260 <update_display+0x4c0>)
 8001fcc:	21eb      	movs	r1, #235	; 0xeb
 8001fce:	2064      	movs	r0, #100	; 0x64
 8001fd0:	f003 fd7e 	bl	8005ad0 <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8001fd4:	4ba3      	ldr	r3, [pc, #652]	; (8002264 <update_display+0x4c4>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d008      	beq.n	8001fee <update_display+0x24e>
 8001fdc:	4ba1      	ldr	r3, [pc, #644]	; (8002264 <update_display+0x4c4>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d004      	beq.n	8001fee <update_display+0x24e>
 8001fe4:	4b9f      	ldr	r3, [pc, #636]	; (8002264 <update_display+0x4c4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	f040 8098 	bne.w	800211e <update_display+0x37e>
 8001fee:	4b9e      	ldr	r3, [pc, #632]	; (8002268 <update_display+0x4c8>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8093 	bne.w	800211e <update_display+0x37e>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8001ff8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001ffc:	f7ff fa64 	bl	80014c8 <RGB_to_BRG>
 8002000:	4603      	mov	r3, r0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002008:	22e6      	movs	r2, #230	; 0xe6
 800200a:	2137      	movs	r1, #55	; 0x37
 800200c:	20d2      	movs	r0, #210	; 0xd2
 800200e:	f00f fcd5 	bl	80119bc <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff fa58 	bl	80014c8 <RGB_to_BRG>
 8002018:	4603      	mov	r3, r0
 800201a:	461c      	mov	r4, r3
 800201c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002020:	f7ff fa52 	bl	80014c8 <RGB_to_BRG>
 8002024:	4603      	mov	r3, r0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	9400      	str	r4, [sp, #0]
 800202a:	4b90      	ldr	r3, [pc, #576]	; (800226c <update_display+0x4cc>)
 800202c:	4a90      	ldr	r2, [pc, #576]	; (8002270 <update_display+0x4d0>)
 800202e:	213a      	movs	r1, #58	; 0x3a
 8002030:	20d6      	movs	r0, #214	; 0xd6
 8002032:	f003 fd4d 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fa46 	bl	80014c8 <RGB_to_BRG>
 800203c:	4603      	mov	r3, r0
 800203e:	461c      	mov	r4, r3
 8002040:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002044:	f7ff fa40 	bl	80014c8 <RGB_to_BRG>
 8002048:	4603      	mov	r3, r0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	9400      	str	r4, [sp, #0]
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <update_display+0x4cc>)
 8002050:	4a88      	ldr	r2, [pc, #544]	; (8002274 <update_display+0x4d4>)
 8002052:	215c      	movs	r1, #92	; 0x5c
 8002054:	20d8      	movs	r0, #216	; 0xd8
 8002056:	f003 fd3b 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff fa34 	bl	80014c8 <RGB_to_BRG>
 8002060:	4603      	mov	r3, r0
 8002062:	461c      	mov	r4, r3
 8002064:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002068:	f7ff fa2e 	bl	80014c8 <RGB_to_BRG>
 800206c:	4603      	mov	r3, r0
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	9400      	str	r4, [sp, #0]
 8002072:	4b7e      	ldr	r3, [pc, #504]	; (800226c <update_display+0x4cc>)
 8002074:	4a7e      	ldr	r2, [pc, #504]	; (8002270 <update_display+0x4d0>)
 8002076:	217e      	movs	r1, #126	; 0x7e
 8002078:	20d6      	movs	r0, #214	; 0xd6
 800207a:	f003 fd29 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fa22 	bl	80014c8 <RGB_to_BRG>
 8002084:	4603      	mov	r3, r0
 8002086:	461c      	mov	r4, r3
 8002088:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800208c:	f7ff fa1c 	bl	80014c8 <RGB_to_BRG>
 8002090:	4603      	mov	r3, r0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	9400      	str	r4, [sp, #0]
 8002096:	4b75      	ldr	r3, [pc, #468]	; (800226c <update_display+0x4cc>)
 8002098:	4a76      	ldr	r2, [pc, #472]	; (8002274 <update_display+0x4d4>)
 800209a:	21a1      	movs	r1, #161	; 0xa1
 800209c:	20d8      	movs	r0, #216	; 0xd8
 800209e:	f003 fd17 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fa10 	bl	80014c8 <RGB_to_BRG>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461c      	mov	r4, r3
 80020ac:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020b0:	f7ff fa0a 	bl	80014c8 <RGB_to_BRG>
 80020b4:	4603      	mov	r3, r0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	9400      	str	r4, [sp, #0]
 80020ba:	4b6c      	ldr	r3, [pc, #432]	; (800226c <update_display+0x4cc>)
 80020bc:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <update_display+0x4d0>)
 80020be:	21c2      	movs	r1, #194	; 0xc2
 80020c0:	20d6      	movs	r0, #214	; 0xd6
 80020c2:	f003 fd05 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff f9fe 	bl	80014c8 <RGB_to_BRG>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461c      	mov	r4, r3
 80020d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020d4:	f7ff f9f8 	bl	80014c8 <RGB_to_BRG>
 80020d8:	4603      	mov	r3, r0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	9400      	str	r4, [sp, #0]
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <update_display+0x4cc>)
 80020e0:	4a64      	ldr	r2, [pc, #400]	; (8002274 <update_display+0x4d4>)
 80020e2:	21e4      	movs	r1, #228	; 0xe4
 80020e4:	20d8      	movs	r0, #216	; 0xd8
 80020e6:	f003 fcf3 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff f9ec 	bl	80014c8 <RGB_to_BRG>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461c      	mov	r4, r3
 80020f4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020f8:	f7ff f9e6 	bl	80014c8 <RGB_to_BRG>
 80020fc:	4603      	mov	r3, r0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	9400      	str	r4, [sp, #0]
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <update_display+0x4cc>)
 8002104:	4a5a      	ldr	r2, [pc, #360]	; (8002270 <update_display+0x4d0>)
 8002106:	f44f 7183 	mov.w	r1, #262	; 0x106
 800210a:	20d6      	movs	r0, #214	; 0xd6
 800210c:	f003 fce0 	bl	8005ad0 <LCD_PutStr>
		sleep_state_written_to_LCD = 1;
 8002110:	4b55      	ldr	r3, [pc, #340]	; (8002268 <update_display+0x4c8>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
		standby_state_written_to_LCD = 0;
 8002116:	4b58      	ldr	r3, [pc, #352]	; (8002278 <update_display+0x4d8>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e128      	b.n	8002370 <update_display+0x5d0>
	}
	else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800211e:	4b51      	ldr	r3, [pc, #324]	; (8002264 <update_display+0x4c4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	f040 80b8 	bne.w	8002298 <update_display+0x4f8>
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <update_display+0x4d8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 80b3 	bne.w	8002298 <update_display+0x4f8>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 8002132:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002136:	f7ff f9c7 	bl	80014c8 <RGB_to_BRG>
 800213a:	4603      	mov	r3, r0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002142:	22e6      	movs	r2, #230	; 0xe6
 8002144:	2137      	movs	r1, #55	; 0x37
 8002146:	20d2      	movs	r0, #210	; 0xd2
 8002148:	f00f fc38 	bl	80119bc <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff f9bb 	bl	80014c8 <RGB_to_BRG>
 8002152:	4603      	mov	r3, r0
 8002154:	461c      	mov	r4, r3
 8002156:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800215a:	f7ff f9b5 	bl	80014c8 <RGB_to_BRG>
 800215e:	4603      	mov	r3, r0
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9400      	str	r4, [sp, #0]
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <update_display+0x4cc>)
 8002166:	4a45      	ldr	r2, [pc, #276]	; (800227c <update_display+0x4dc>)
 8002168:	213a      	movs	r1, #58	; 0x3a
 800216a:	20d6      	movs	r0, #214	; 0xd6
 800216c:	f003 fcb0 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff f9a9 	bl	80014c8 <RGB_to_BRG>
 8002176:	4603      	mov	r3, r0
 8002178:	461c      	mov	r4, r3
 800217a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800217e:	f7ff f9a3 	bl	80014c8 <RGB_to_BRG>
 8002182:	4603      	mov	r3, r0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	9400      	str	r4, [sp, #0]
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <update_display+0x4cc>)
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <update_display+0x4e0>)
 800218c:	215c      	movs	r1, #92	; 0x5c
 800218e:	20d6      	movs	r0, #214	; 0xd6
 8002190:	f003 fc9e 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff f997 	bl	80014c8 <RGB_to_BRG>
 800219a:	4603      	mov	r3, r0
 800219c:	461c      	mov	r4, r3
 800219e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021a2:	f7ff f991 	bl	80014c8 <RGB_to_BRG>
 80021a6:	4603      	mov	r3, r0
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	9400      	str	r4, [sp, #0]
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <update_display+0x4cc>)
 80021ae:	4a35      	ldr	r2, [pc, #212]	; (8002284 <update_display+0x4e4>)
 80021b0:	217e      	movs	r1, #126	; 0x7e
 80021b2:	20d6      	movs	r0, #214	; 0xd6
 80021b4:	f003 fc8c 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff f985 	bl	80014c8 <RGB_to_BRG>
 80021be:	4603      	mov	r3, r0
 80021c0:	461c      	mov	r4, r3
 80021c2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021c6:	f7ff f97f 	bl	80014c8 <RGB_to_BRG>
 80021ca:	4603      	mov	r3, r0
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	9400      	str	r4, [sp, #0]
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <update_display+0x4cc>)
 80021d2:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <update_display+0x4e8>)
 80021d4:	21a1      	movs	r1, #161	; 0xa1
 80021d6:	20d6      	movs	r0, #214	; 0xd6
 80021d8:	f003 fc7a 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff f973 	bl	80014c8 <RGB_to_BRG>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461c      	mov	r4, r3
 80021e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021ea:	f7ff f96d 	bl	80014c8 <RGB_to_BRG>
 80021ee:	4603      	mov	r3, r0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9400      	str	r4, [sp, #0]
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <update_display+0x4cc>)
 80021f6:	4a25      	ldr	r2, [pc, #148]	; (800228c <update_display+0x4ec>)
 80021f8:	21c2      	movs	r1, #194	; 0xc2
 80021fa:	20d6      	movs	r0, #214	; 0xd6
 80021fc:	f003 fc68 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff f961 	bl	80014c8 <RGB_to_BRG>
 8002206:	4603      	mov	r3, r0
 8002208:	461c      	mov	r4, r3
 800220a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800220e:	f7ff f95b 	bl	80014c8 <RGB_to_BRG>
 8002212:	4603      	mov	r3, r0
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	9400      	str	r4, [sp, #0]
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <update_display+0x4cc>)
 800221a:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <update_display+0x4f0>)
 800221c:	21e4      	movs	r1, #228	; 0xe4
 800221e:	20d6      	movs	r0, #214	; 0xd6
 8002220:	f003 fc56 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff f94f 	bl	80014c8 <RGB_to_BRG>
 800222a:	4603      	mov	r3, r0
 800222c:	461c      	mov	r4, r3
 800222e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002232:	f7ff f949 	bl	80014c8 <RGB_to_BRG>
 8002236:	4603      	mov	r3, r0
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	9400      	str	r4, [sp, #0]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <update_display+0x4cc>)
 800223e:	4a15      	ldr	r2, [pc, #84]	; (8002294 <update_display+0x4f4>)
 8002240:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002244:	20d6      	movs	r0, #214	; 0xd6
 8002246:	f003 fc43 	bl	8005ad0 <LCD_PutStr>
		standby_state_written_to_LCD = 1;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <update_display+0x4d8>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <update_display+0x4c8>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e08b      	b.n	8002370 <update_display+0x5d0>
 8002258:	200005b8 	.word	0x200005b8
 800225c:	0801a56c 	.word	0x0801a56c
 8002260:	0801a394 	.word	0x0801a394
 8002264:	2000001d 	.word	0x2000001d
 8002268:	200005df 	.word	0x200005df
 800226c:	0801b53c 	.word	0x0801b53c
 8002270:	0801a39c 	.word	0x0801a39c
 8002274:	0801a3a0 	.word	0x0801a3a0
 8002278:	200005e0 	.word	0x200005e0
 800227c:	0801a3a4 	.word	0x0801a3a4
 8002280:	0801a3a8 	.word	0x0801a3a8
 8002284:	0801a3ac 	.word	0x0801a3ac
 8002288:	0801a3b0 	.word	0x0801a3b0
 800228c:	0801a3b4 	.word	0x0801a3b4
 8002290:	0801a3b8 	.word	0x0801a3b8
 8002294:	0801a3bc 	.word	0x0801a3bc
	}
	else if(active_state == RUN){
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <update_display+0x5e8>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d167      	bne.n	8002370 <update_display+0x5d0>
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80022a0:	4b3a      	ldr	r3, [pc, #232]	; (800238c <update_display+0x5ec>)
 80022a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <update_display+0x5f0>)
 80022ac:	f7fe faf6 	bl	800089c <__aeabi_ddiv>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <update_display+0x5f4>)
 80022be:	f7fe f9c3 	bl	8000648 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	a12c      	add	r1, pc, #176	; (adr r1, 8002378 <update_display+0x5d8>)
 80022c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022cc:	f7fe f804 	bl	80002d8 <__aeabi_dsub>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fc66 	bl	8000ba8 <__aeabi_d2iz>
 80022dc:	4603      	mov	r3, r0
 80022de:	b21c      	sxth	r4, r3
 80022e0:	f248 607e 	movw	r0, #34430	; 0x867e
 80022e4:	f7ff f8f0 	bl	80014c8 <RGB_to_BRG>
 80022e8:	4603      	mov	r3, r0
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f240 131f 	movw	r3, #287	; 0x11f
 80022f0:	22e6      	movs	r2, #230	; 0xe6
 80022f2:	4621      	mov	r1, r4
 80022f4:	20d2      	movs	r0, #210	; 0xd2
 80022f6:	f00f fb61 	bl	80119bc <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <update_display+0x5ec>)
 80022fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <update_display+0x5f0>)
 8002306:	f7fe fac9 	bl	800089c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	a31b      	add	r3, pc, #108	; (adr r3, 8002380 <update_display+0x5e0>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f996 	bl	8000648 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	a115      	add	r1, pc, #84	; (adr r1, 8002378 <update_display+0x5d8>)
 8002322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002326:	f7fd ffd7 	bl	80002d8 <__aeabi_dsub>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <update_display+0x5f8>)
 8002338:	f7fd ffce 	bl	80002d8 <__aeabi_dsub>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc30 	bl	8000ba8 <__aeabi_d2iz>
 8002348:	4603      	mov	r3, r0
 800234a:	b21c      	sxth	r4, r3
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff f8bb 	bl	80014c8 <RGB_to_BRG>
 8002352:	4603      	mov	r3, r0
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4623      	mov	r3, r4
 8002358:	22e6      	movs	r2, #230	; 0xe6
 800235a:	2137      	movs	r1, #55	; 0x37
 800235c:	20d2      	movs	r0, #210	; 0xd2
 800235e:	f00f fb2d 	bl	80119bc <UG_FillFrame>
		standby_state_written_to_LCD = 0;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <update_display+0x5fc>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <update_display+0x600>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
	}
}
 800236e:	e7ff      	b.n	8002370 <update_display+0x5d0>
 8002370:	bf00      	nop
 8002372:	3704      	adds	r7, #4
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	00000000 	.word	0x00000000
 800237c:	4071f000 	.word	0x4071f000
 8002380:	00000000 	.word	0x00000000
 8002384:	406ce000 	.word	0x406ce000
 8002388:	2000001d 	.word	0x2000001d
 800238c:	200006e8 	.word	0x200006e8
 8002390:	407f4000 	.word	0x407f4000
 8002394:	406d0000 	.word	0x406d0000
 8002398:	3ff00000 	.word	0x3ff00000
 800239c:	200005e0 	.word	0x200005e0
 80023a0:	200005df 	.word	0x200005df

080023a4 <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff f88c 	bl	80014c8 <RGB_to_BRG>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f00f fade 	bl	8011974 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80023b8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023bc:	f7ff f884 	bl	80014c8 <RGB_to_BRG>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461c      	mov	r4, r3
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff f87f 	bl	80014c8 <RGB_to_BRG>
 80023ca:	4603      	mov	r3, r0
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	9400      	str	r4, [sp, #0]
 80023d0:	4bc3      	ldr	r3, [pc, #780]	; (80026e0 <LCD_draw_main_screen+0x33c>)
 80023d2:	4ac4      	ldr	r2, [pc, #784]	; (80026e4 <LCD_draw_main_screen+0x340>)
 80023d4:	210c      	movs	r1, #12
 80023d6:	2035      	movs	r0, #53	; 0x35
 80023d8:	f003 fb7a 	bl	8005ad0 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 80023dc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023e0:	f7ff f872 	bl	80014c8 <RGB_to_BRG>
 80023e4:	4603      	mov	r3, r0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2328      	movs	r3, #40	; 0x28
 80023ea:	22f0      	movs	r2, #240	; 0xf0
 80023ec:	2128      	movs	r1, #40	; 0x28
 80023ee:	2000      	movs	r0, #0
 80023f0:	f003 fb30 	bl	8005a54 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 80023f4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023f8:	f7ff f866 	bl	80014c8 <RGB_to_BRG>
 80023fc:	4603      	mov	r3, r0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2329      	movs	r3, #41	; 0x29
 8002402:	22f0      	movs	r2, #240	; 0xf0
 8002404:	2129      	movs	r1, #41	; 0x29
 8002406:	2000      	movs	r0, #0
 8002408:	f003 fb24 	bl	8005a54 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 800240c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002410:	f7ff f85a 	bl	80014c8 <RGB_to_BRG>
 8002414:	4603      	mov	r3, r0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	232a      	movs	r3, #42	; 0x2a
 800241a:	22f0      	movs	r2, #240	; 0xf0
 800241c:	212a      	movs	r1, #42	; 0x2a
 800241e:	2000      	movs	r0, #0
 8002420:	f003 fb18 	bl	8005a54 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002424:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002428:	f7ff f84e 	bl	80014c8 <RGB_to_BRG>
 800242c:	4603      	mov	r3, r0
 800242e:	461c      	mov	r4, r3
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff f849 	bl	80014c8 <RGB_to_BRG>
 8002436:	4603      	mov	r3, r0
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9400      	str	r4, [sp, #0]
 800243c:	4baa      	ldr	r3, [pc, #680]	; (80026e8 <LCD_draw_main_screen+0x344>)
 800243e:	4aab      	ldr	r2, [pc, #684]	; (80026ec <LCD_draw_main_screen+0x348>)
 8002440:	2132      	movs	r1, #50	; 0x32
 8002442:	200a      	movs	r0, #10
 8002444:	f003 fb44 	bl	8005ad0 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002448:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800244c:	f7ff f83c 	bl	80014c8 <RGB_to_BRG>
 8002450:	4603      	mov	r3, r0
 8002452:	2205      	movs	r2, #5
 8002454:	2155      	movs	r1, #85	; 0x55
 8002456:	2078      	movs	r0, #120	; 0x78
 8002458:	f00f fb6a 	bl	8011b30 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 800245c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002460:	f7ff f832 	bl	80014c8 <RGB_to_BRG>
 8002464:	4603      	mov	r3, r0
 8002466:	2204      	movs	r2, #4
 8002468:	2155      	movs	r1, #85	; 0x55
 800246a:	2078      	movs	r0, #120	; 0x78
 800246c:	f00f fb60 	bl	8011b30 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002470:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002474:	f7ff f828 	bl	80014c8 <RGB_to_BRG>
 8002478:	4603      	mov	r3, r0
 800247a:	2203      	movs	r2, #3
 800247c:	2155      	movs	r1, #85	; 0x55
 800247e:	2078      	movs	r0, #120	; 0x78
 8002480:	f00f fb56 	bl	8011b30 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002484:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002488:	f7ff f81e 	bl	80014c8 <RGB_to_BRG>
 800248c:	4603      	mov	r3, r0
 800248e:	461c      	mov	r4, r3
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff f819 	bl	80014c8 <RGB_to_BRG>
 8002496:	4603      	mov	r3, r0
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	9400      	str	r4, [sp, #0]
 800249c:	4b94      	ldr	r3, [pc, #592]	; (80026f0 <LCD_draw_main_screen+0x34c>)
 800249e:	4a95      	ldr	r2, [pc, #596]	; (80026f4 <LCD_draw_main_screen+0x350>)
 80024a0:	214b      	movs	r1, #75	; 0x4b
 80024a2:	2082      	movs	r0, #130	; 0x82
 80024a4:	f003 fb14 	bl	8005ad0 <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80024a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024ac:	f7ff f80c 	bl	80014c8 <RGB_to_BRG>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7ff f807 	bl	80014c8 <RGB_to_BRG>
 80024ba:	4603      	mov	r3, r0
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9400      	str	r4, [sp, #0]
 80024c0:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <LCD_draw_main_screen+0x344>)
 80024c2:	4a8d      	ldr	r2, [pc, #564]	; (80026f8 <LCD_draw_main_screen+0x354>)
 80024c4:	218c      	movs	r1, #140	; 0x8c
 80024c6:	200a      	movs	r0, #10
 80024c8:	f003 fb02 	bl	8005ad0 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 80024cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024d0:	f7fe fffa 	bl	80014c8 <RGB_to_BRG>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2205      	movs	r2, #5
 80024d8:	21af      	movs	r1, #175	; 0xaf
 80024da:	2078      	movs	r0, #120	; 0x78
 80024dc:	f00f fb28 	bl	8011b30 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 80024e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024e4:	f7fe fff0 	bl	80014c8 <RGB_to_BRG>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2204      	movs	r2, #4
 80024ec:	21af      	movs	r1, #175	; 0xaf
 80024ee:	2078      	movs	r0, #120	; 0x78
 80024f0:	f00f fb1e 	bl	8011b30 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 80024f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024f8:	f7fe ffe6 	bl	80014c8 <RGB_to_BRG>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2203      	movs	r2, #3
 8002500:	21af      	movs	r1, #175	; 0xaf
 8002502:	2078      	movs	r0, #120	; 0x78
 8002504:	f00f fb14 	bl	8011b30 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002508:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800250c:	f7fe ffdc 	bl	80014c8 <RGB_to_BRG>
 8002510:	4603      	mov	r3, r0
 8002512:	461c      	mov	r4, r3
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe ffd7 	bl	80014c8 <RGB_to_BRG>
 800251a:	4603      	mov	r3, r0
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	9400      	str	r4, [sp, #0]
 8002520:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <LCD_draw_main_screen+0x34c>)
 8002522:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <LCD_draw_main_screen+0x350>)
 8002524:	21a5      	movs	r1, #165	; 0xa5
 8002526:	2082      	movs	r0, #130	; 0x82
 8002528:	f003 fad2 	bl	8005ad0 <LCD_PutStr>

		UG_DrawFrame(4, 134, 182, 220, RGB_to_BRG(C_WHITE));
 800252c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002530:	f7fe ffca 	bl	80014c8 <RGB_to_BRG>
 8002534:	4603      	mov	r3, r0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	23dc      	movs	r3, #220	; 0xdc
 800253a:	22b6      	movs	r2, #182	; 0xb6
 800253c:	2186      	movs	r1, #134	; 0x86
 800253e:	2004      	movs	r0, #4
 8002540:	f00f faae 	bl	8011aa0 <UG_DrawFrame>
		UG_DrawFrame(3, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002544:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002548:	f7fe ffbe 	bl	80014c8 <RGB_to_BRG>
 800254c:	4603      	mov	r3, r0
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	23dd      	movs	r3, #221	; 0xdd
 8002552:	22b7      	movs	r2, #183	; 0xb7
 8002554:	2185      	movs	r1, #133	; 0x85
 8002556:	2003      	movs	r0, #3
 8002558:	f00f faa2 	bl	8011aa0 <UG_DrawFrame>

		LCD_PutStr(2, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800255c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002560:	f7fe ffb2 	bl	80014c8 <RGB_to_BRG>
 8002564:	4603      	mov	r3, r0
 8002566:	461c      	mov	r4, r3
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe ffad 	bl	80014c8 <RGB_to_BRG>
 800256e:	4603      	mov	r3, r0
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	9400      	str	r4, [sp, #0]
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <LCD_draw_main_screen+0x358>)
 8002576:	4a62      	ldr	r2, [pc, #392]	; (8002700 <LCD_draw_main_screen+0x35c>)
 8002578:	21eb      	movs	r1, #235	; 0xeb
 800257a:	2002      	movs	r0, #2
 800257c:	f003 faa8 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002580:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002584:	f7fe ffa0 	bl	80014c8 <RGB_to_BRG>
 8002588:	4603      	mov	r3, r0
 800258a:	461c      	mov	r4, r3
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe ff9b 	bl	80014c8 <RGB_to_BRG>
 8002592:	4603      	mov	r3, r0
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	9400      	str	r4, [sp, #0]
 8002598:	4b58      	ldr	r3, [pc, #352]	; (80026fc <LCD_draw_main_screen+0x358>)
 800259a:	4a5a      	ldr	r2, [pc, #360]	; (8002704 <LCD_draw_main_screen+0x360>)
 800259c:	21ff      	movs	r1, #255	; 0xff
 800259e:	2002      	movs	r0, #2
 80025a0:	f003 fa96 	bl	8005ad0 <LCD_PutStr>
		LCD_PutStr(2, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025a8:	f7fe ff8e 	bl	80014c8 <RGB_to_BRG>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461c      	mov	r4, r3
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe ff89 	bl	80014c8 <RGB_to_BRG>
 80025b6:	4603      	mov	r3, r0
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9400      	str	r4, [sp, #0]
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <LCD_draw_main_screen+0x358>)
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <LCD_draw_main_screen+0x364>)
 80025c0:	f240 1113 	movw	r1, #275	; 0x113
 80025c4:	2002      	movs	r0, #2
 80025c6:	f003 fa83 	bl	8005ad0 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 80025ca:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80025ce:	f7fe ff7b 	bl	80014c8 <RGB_to_BRG>
 80025d2:	4603      	mov	r3, r0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	f44f 7394 	mov.w	r3, #296	; 0x128
 80025da:	22f0      	movs	r2, #240	; 0xf0
 80025dc:	f44f 7194 	mov.w	r1, #296	; 0x128
 80025e0:	2002      	movs	r0, #2
 80025e2:	f00f fb8b 	bl	8011cfc <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 80025e6:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80025ea:	f7fe ff6d 	bl	80014c8 <RGB_to_BRG>
 80025ee:	4603      	mov	r3, r0
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f240 1329 	movw	r3, #297	; 0x129
 80025f6:	22f0      	movs	r2, #240	; 0xf0
 80025f8:	f240 1129 	movw	r1, #297	; 0x129
 80025fc:	2002      	movs	r0, #2
 80025fe:	f00f fb7d 	bl	8011cfc <UG_DrawLine>


		LCD_PutStr(2, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002602:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002606:	f7fe ff5f 	bl	80014c8 <RGB_to_BRG>
 800260a:	4603      	mov	r3, r0
 800260c:	461c      	mov	r4, r3
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe ff5a 	bl	80014c8 <RGB_to_BRG>
 8002614:	4603      	mov	r3, r0
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	9400      	str	r4, [sp, #0]
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <LCD_draw_main_screen+0x344>)
 800261c:	4a3b      	ldr	r2, [pc, #236]	; (800270c <LCD_draw_main_screen+0x368>)
 800261e:	f240 112d 	movw	r1, #301	; 0x12d
 8002622:	2002      	movs	r0, #2
 8002624:	f003 fa54 	bl	8005ad0 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002628:	2228      	movs	r2, #40	; 0x28
 800262a:	2100      	movs	r1, #0
 800262c:	4838      	ldr	r0, [pc, #224]	; (8002710 <LCD_draw_main_screen+0x36c>)
 800262e:	f014 f8bc 	bl	80167aa <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <LCD_draw_main_screen+0x370>)
 8002634:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002638:	4937      	ldr	r1, [pc, #220]	; (8002718 <LCD_draw_main_screen+0x374>)
 800263a:	4835      	ldr	r0, [pc, #212]	; (8002710 <LCD_draw_main_screen+0x36c>)
 800263c:	f014 f852 	bl	80166e4 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002640:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002644:	f7fe ff40 	bl	80014c8 <RGB_to_BRG>
 8002648:	4603      	mov	r3, r0
 800264a:	461c      	mov	r4, r3
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe ff3b 	bl	80014c8 <RGB_to_BRG>
 8002652:	4603      	mov	r3, r0
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	9400      	str	r4, [sp, #0]
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <LCD_draw_main_screen+0x344>)
 800265a:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <LCD_draw_main_screen+0x36c>)
 800265c:	f240 112d 	movw	r1, #301	; 0x12d
 8002660:	2082      	movs	r0, #130	; 0x82
 8002662:	f003 fa35 	bl	8005ad0 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002666:	2228      	movs	r2, #40	; 0x28
 8002668:	2100      	movs	r1, #0
 800266a:	4829      	ldr	r0, [pc, #164]	; (8002710 <LCD_draw_main_screen+0x36c>)
 800266c:	f014 f89d 	bl	80167aa <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <LCD_draw_main_screen+0x370>)
 8002672:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002676:	4928      	ldr	r1, [pc, #160]	; (8002718 <LCD_draw_main_screen+0x374>)
 8002678:	4825      	ldr	r0, [pc, #148]	; (8002710 <LCD_draw_main_screen+0x36c>)
 800267a:	f014 f833 	bl	80166e4 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 800267e:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002682:	f7fe ff21 	bl	80014c8 <RGB_to_BRG>
 8002686:	4603      	mov	r3, r0
 8002688:	461c      	mov	r4, r3
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe ff1c 	bl	80014c8 <RGB_to_BRG>
 8002690:	4603      	mov	r3, r0
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	9400      	str	r4, [sp, #0]
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <LCD_draw_main_screen+0x344>)
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <LCD_draw_main_screen+0x36c>)
 800269a:	f240 112d 	movw	r1, #301	; 0x12d
 800269e:	20be      	movs	r0, #190	; 0xbe
 80026a0:	f003 fa16 	bl	8005ad0 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 80026a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026a8:	f7fe ff0e 	bl	80014c8 <RGB_to_BRG>
 80026ac:	4603      	mov	r3, r0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f240 1321 	movw	r3, #289	; 0x121
 80026b4:	22e8      	movs	r2, #232	; 0xe8
 80026b6:	2135      	movs	r1, #53	; 0x35
 80026b8:	20d0      	movs	r0, #208	; 0xd0
 80026ba:	f00f f9f1 	bl	8011aa0 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 80026be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026c2:	f7fe ff01 	bl	80014c8 <RGB_to_BRG>
 80026c6:	4603      	mov	r3, r0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f44f 7390 	mov.w	r3, #288	; 0x120
 80026ce:	22e7      	movs	r2, #231	; 0xe7
 80026d0:	2136      	movs	r1, #54	; 0x36
 80026d2:	20d1      	movs	r0, #209	; 0xd1
 80026d4:	f00f f9e4 	bl	8011aa0 <UG_DrawFrame>
}
 80026d8:	bf00      	nop
 80026da:	3704      	adds	r7, #4
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}
 80026e0:	0801b308 	.word	0x0801b308
 80026e4:	0801a3c0 	.word	0x0801a3c0
 80026e8:	0801b53c 	.word	0x0801b53c
 80026ec:	0801a3cc 	.word	0x0801a3cc
 80026f0:	0801c3d4 	.word	0x0801c3d4
 80026f4:	0801a3d8 	.word	0x0801a3d8
 80026f8:	0801a3dc 	.word	0x0801a3dc
 80026fc:	0801a56c 	.word	0x0801a56c
 8002700:	0801a3e8 	.word	0x0801a3e8
 8002704:	0801a3f8 	.word	0x0801a3f8
 8002708:	0801a414 	.word	0x0801a414
 800270c:	0801a434 	.word	0x0801a434
 8002710:	20000600 	.word	0x20000600
 8002714:	200006a0 	.word	0x200006a0
 8002718:	0801a360 	.word	0x0801a360

0800271c <get_set_temperature>:

}


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 800271c:	b598      	push	{r3, r4, r7, lr}
 800271e:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <get_set_temperature+0x70>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12f      	bne.n	8002788 <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8002728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff10 	bl	8000554 <__aeabi_ui2d>
 8002734:	4b16      	ldr	r3, [pc, #88]	; (8002790 <get_set_temperature+0x74>)
 8002736:	ed93 7b00 	vldr	d7, [r3]
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <get_set_temperature+0x78>)
 800273c:	ed93 6b00 	vldr	d6, [r3]
 8002740:	eeb0 2a46 	vmov.f32	s4, s12
 8002744:	eef0 2a66 	vmov.f32	s5, s13
 8002748:	eeb0 1a47 	vmov.f32	s2, s14
 800274c:	eef0 1a67 	vmov.f32	s3, s15
 8002750:	ec41 0b10 	vmov	d0, r0, r1
 8002754:	f7fe fdee 	bl	8001334 <clamp>
 8002758:	ec53 2b10 	vmov	r2, r3, d0
 800275c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa48 	bl	8000bf8 <__aeabi_d2uiz>
 8002768:	4603      	mov	r3, r0
 800276a:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 800276c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fefb 	bl	8000574 <__aeabi_i2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4905      	ldr	r1, [pc, #20]	; (8002798 <get_set_temperature+0x7c>)
 8002784:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8002788:	bf00      	nop
 800278a:	bd98      	pop	{r3, r4, r7, pc}
 800278c:	2000069e 	.word	0x2000069e
 8002790:	20000028 	.word	0x20000028
 8002794:	20000030 	.word	0x20000030
 8002798:	20000038 	.word	0x20000038

0800279c <beep>:

/* Beep the beeper */
void beep(){
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <beep+0x30>)
 80027a2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <beep+0x34>)
 80027ac:	f7fe f9b4 	bl	8000b18 <__aeabi_dcmpeq>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d100      	bne.n	80027b8 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 80027b6:	e006      	b.n	80027c6 <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80027b8:	2104      	movs	r1, #4
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <beep+0x38>)
 80027bc:	f00a f9da 	bl	800cb74 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <beep+0x3c>)
 80027c2:	f00a f8e7 	bl	800c994 <HAL_TIM_Base_Start_IT>
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200006a0 	.word	0x200006a0
 80027d0:	3ff00000 	.word	0x3ff00000
 80027d4:	20001d18 	.word	0x20001d18
 80027d8:	20001e94 	.word	0x20001e94
 80027dc:	00000000 	.word	0x00000000

080027e0 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <handle_emergency_shutdown+0xd8>)
 80027e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <handle_emergency_shutdown+0x20>
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <handle_emergency_shutdown+0xdc>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 80027f6:	f003 fa79 	bl	8005cec <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <handle_emergency_shutdown+0xe0>)
 80027fe:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <handle_emergency_shutdown+0xd8>)
 8002802:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	f7fe f983 	bl	8000b18 <__aeabi_dcmpeq>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d024      	beq.n	8002862 <handle_emergency_shutdown+0x82>
 8002818:	f003 fa68 	bl	8005cec <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <handle_emergency_shutdown+0xe0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe95 	bl	8000554 <__aeabi_ui2d>
 800282a:	4604      	mov	r4, r0
 800282c:	460d      	mov	r5, r1
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <handle_emergency_shutdown+0xe4>)
 8002830:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002834:	a31e      	add	r3, pc, #120	; (adr r3, 80028b0 <handle_emergency_shutdown+0xd0>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd ff05 	bl	8000648 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fe f985 	bl	8000b54 <__aeabi_dcmpge>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <handle_emergency_shutdown+0x82>
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <handle_emergency_shutdown+0xdc>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d104      	bne.n	8002862 <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8002858:	2003      	movs	r0, #3
 800285a:	f7fe fe4b 	bl	80014f4 <change_state>
		beep();
 800285e:	f7ff ff9d 	bl	800279c <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <handle_emergency_shutdown+0xd8>)
 8002864:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <handle_emergency_shutdown+0xe8>)
 800286e:	f7fe f97b 	bl	8000b68 <__aeabi_dcmpgt>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <handle_emergency_shutdown+0xaa>
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <handle_emergency_shutdown+0xdc>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <handle_emergency_shutdown+0xaa>
		change_state(EMERGENCY_SLEEP);
 8002880:	2003      	movs	r0, #3
 8002882:	f7fe fe37 	bl	80014f4 <change_state>
		beep();
 8002886:	f7ff ff89 	bl	800279c <beep>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if(sensor_values.bus_voltage <= MIN_BUSVOLTAGE){
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <handle_emergency_shutdown+0xd8>)
 800288c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002890:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	d900      	bls.n	80028a0 <handle_emergency_shutdown+0xc0>
		change_state(EMERGENCY_SLEEP);
	}
}
 800289e:	e002      	b.n	80028a6 <handle_emergency_shutdown+0xc6>
		change_state(EMERGENCY_SLEEP);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f7fe fe27 	bl	80014f4 <change_state>
}
 80028a6:	bf00      	nop
 80028a8:	bdb0      	pop	{r4, r5, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40ed4c00 	.word	0x40ed4c00
 80028b8:	20000038 	.word	0x20000038
 80028bc:	2000001d 	.word	0x2000001d
 80028c0:	200005c8 	.word	0x200005c8
 80028c4:	200006a0 	.word	0x200006a0
 80028c8:	407e0000 	.word	0x407e0000

080028cc <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 80028cc:	b598      	push	{r3, r4, r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <handle_button_status+0x98>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d11e      	bne.n	8002916 <handle_button_status+0x4a>
		SW_1_pressed = 0;
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <handle_button_status+0x98>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <handle_button_status+0x9c>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <handle_button_status+0x22>
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <handle_button_status+0x9c>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d103      	bne.n	80028f6 <handle_button_status+0x2a>
			change_state(HALTED);
 80028ee:	2004      	movs	r0, #4
 80028f0:	f7fe fe00 	bl	80014f4 <change_state>
 80028f4:	e00a      	b.n	800290c <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <handle_button_status+0x9c>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d003      	beq.n	8002906 <handle_button_status+0x3a>
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <handle_button_status+0x9c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d102      	bne.n	800290c <handle_button_status+0x40>
			change_state(RUN);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fdf4 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 800290c:	f003 f9ee 	bl	8005cec <HAL_GetTick>
 8002910:	4603      	mov	r3, r0
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <handle_button_status+0xa0>)
 8002914:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <handle_button_status+0xa4>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10d      	bne.n	800293a <handle_button_status+0x6e>
		SW_2_pressed = 0;
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <handle_button_status+0xa4>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <handle_button_status+0xa8>)
 8002926:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800292a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fe f961 	bl	8000bf8 <__aeabi_d2uiz>
 8002936:	4603      	mov	r3, r0
 8002938:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <handle_button_status+0xac>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10d      	bne.n	800295e <handle_button_status+0x92>
		SW_3_pressed = 0;
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <handle_button_status+0xac>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <handle_button_status+0xa8>)
 800294a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800294e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f94f 	bl	8000bf8 <__aeabi_d2uiz>
 800295a:	4603      	mov	r3, r0
 800295c:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 800295e:	bf00      	nop
 8002960:	bd98      	pop	{r3, r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	200005dc 	.word	0x200005dc
 8002968:	2000001d 	.word	0x2000001d
 800296c:	200005c4 	.word	0x200005c4
 8002970:	200005dd 	.word	0x200005dd
 8002974:	200006a0 	.word	0x200006a0
 8002978:	200005de 	.word	0x200005de
 800297c:	00000000 	.word	0x00000000

08002980 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298c:	f006 fc16 	bl	80091bc <HAL_GPIO_ReadPin>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <get_stand_status+0x1c>
		stand_status = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	71fb      	strb	r3, [r7, #7]
 800299a:	e001      	b.n	80029a0 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	493b      	ldr	r1, [pc, #236]	; (8002a90 <get_stand_status+0x110>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fb39 	bl	800401c <Moving_Average_Compute>
 80029aa:	eeb0 7a40 	vmov.f32	s14, s0
 80029ae:	eef0 7a60 	vmov.f32	s15, s1
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <get_stand_status+0x114>)
 80029b4:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 80029b8:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <get_stand_status+0x114>)
 80029ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80029be:	a330      	add	r3, pc, #192	; (adr r3, 8002a80 <get_stand_status+0x100>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fe f8c6 	bl	8000b54 <__aeabi_dcmpge>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d039      	beq.n	8002a42 <get_stand_status+0xc2>
		if(active_state == RUN){
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <get_stand_status+0x118>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <get_stand_status+0x66>
			change_state(STANDBY);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe fd8c 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 80029dc:	f003 f986 	bl	8005cec <HAL_GetTick>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <get_stand_status+0x11c>)
 80029e4:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 80029e6:	f003 f981 	bl	8005cec <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <get_stand_status+0x11c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fdae 	bl	8000554 <__aeabi_ui2d>
 80029f8:	4604      	mov	r4, r0
 80029fa:	460d      	mov	r5, r1
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <get_stand_status+0x120>)
 80029fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a02:	a321      	add	r3, pc, #132	; (adr r3, 8002a88 <get_stand_status+0x108>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f7fd fe1e 	bl	8000648 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4620      	mov	r0, r4
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7fe f89e 	bl	8000b54 <__aeabi_dcmpge>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <get_stand_status+0xac>
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <get_stand_status+0x118>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <get_stand_status+0xac>
			change_state(SLEEP);
 8002a26:	2002      	movs	r0, #2
 8002a28:	f7fe fd64 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <get_stand_status+0x118>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d003      	beq.n	8002a3c <get_stand_status+0xbc>
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <get_stand_status+0x118>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d102      	bne.n	8002a42 <get_stand_status+0xc2>
			change_state(SLEEP);
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f7fe fd59 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <get_stand_status+0x114>)
 8002a44:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002a48:	a30d      	add	r3, pc, #52	; (adr r3, 8002a80 <get_stand_status+0x100>)
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	f7fe f86d 	bl	8000b2c <__aeabi_dcmplt>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d100      	bne.n	8002a5a <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 8002a58:	e00e      	b.n	8002a78 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <get_stand_status+0x118>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d007      	beq.n	8002a72 <get_stand_status+0xf2>
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <get_stand_status+0x118>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d003      	beq.n	8002a72 <get_stand_status+0xf2>
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <get_stand_status+0x118>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <get_stand_status+0xf8>
			change_state(RUN);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe fd3e 	bl	80014f4 <change_state>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a80:	9999999a 	.word	0x9999999a
 8002a84:	3fc99999 	.word	0x3fc99999
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40ed4c00 	.word	0x40ed4c00
 8002a90:	20001088 	.word	0x20001088
 8002a94:	20000038 	.word	0x20000038
 8002a98:	2000001d 	.word	0x2000001d
 8002a9c:	200005cc 	.word	0x200005cc
 8002aa0:	200006a0 	.word	0x200006a0
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8002aae:	2110      	movs	r1, #16
 8002ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab4:	f006 fb82 	bl	80091bc <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <get_handle_type+0x1c>
		handle_status = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	e001      	b.n	8002ac8 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	496f      	ldr	r1, [pc, #444]	; (8002c88 <get_handle_type+0x1e0>)
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 faa5 	bl	800401c <Moving_Average_Compute>
 8002ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ad6:	eef0 7a60 	vmov.f32	s15, s1
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <get_handle_type+0x1e4>)
 8002adc:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae6:	f006 fb69 	bl	80091bc <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <get_handle_type+0x4e>
		handle_status = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	e001      	b.n	8002afa <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	4964      	ldr	r1, [pc, #400]	; (8002c90 <get_handle_type+0x1e8>)
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 fa8c 	bl	800401c <Moving_Average_Compute>
 8002b04:	eeb0 7a40 	vmov.f32	s14, s0
 8002b08:	eef0 7a60 	vmov.f32	s15, s1
 8002b0c:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <get_handle_type+0x1e4>)
 8002b0e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8002b12:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <get_handle_type+0x1e4>)
 8002b14:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <get_handle_type+0x1ec>)
 8002b1e:	f7fe f819 	bl	8000b54 <__aeabi_dcmpge>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d029      	beq.n	8002b7c <get_handle_type+0xd4>
 8002b28:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <get_handle_type+0x1e4>)
 8002b2a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <get_handle_type+0x1ec>)
 8002b34:	f7fd fffa 	bl	8000b2c <__aeabi_dcmplt>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01e      	beq.n	8002b7c <get_handle_type+0xd4>
		handle = NT115;
 8002b3e:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <get_handle_type+0x1f0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 8002b44:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <get_handle_type+0x1e4>)
 8002b46:	4a55      	ldr	r2, [pc, #340]	; (8002c9c <get_handle_type+0x1f4>)
 8002b48:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 8002b4a:	4955      	ldr	r1, [pc, #340]	; (8002ca0 <get_handle_type+0x1f8>)
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b54      	ldr	r3, [pc, #336]	; (8002ca4 <get_handle_type+0x1fc>)
 8002b52:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 8002b56:	4954      	ldr	r1, [pc, #336]	; (8002ca8 <get_handle_type+0x200>)
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <get_handle_type+0x204>)
 8002b5e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002b62:	4953      	ldr	r1, [pc, #332]	; (8002cb0 <get_handle_type+0x208>)
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	4b52      	ldr	r3, [pc, #328]	; (8002cb4 <get_handle_type+0x20c>)
 8002b6a:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 20;
 8002b6e:	4952      	ldr	r1, [pc, #328]	; (8002cb8 <get_handle_type+0x210>)
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <get_handle_type+0x214>)
 8002b76:	e9c1 2300 	strd	r2, r3, [r1]
 8002b7a:	e052      	b.n	8002c22 <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 8002b7c:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <get_handle_type+0x1e4>)
 8002b7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <get_handle_type+0x1ec>)
 8002b88:	f7fd ffd0 	bl	8000b2c <__aeabi_dcmplt>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d029      	beq.n	8002be6 <get_handle_type+0x13e>
 8002b92:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <get_handle_type+0x1e4>)
 8002b94:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <get_handle_type+0x1ec>)
 8002b9e:	f7fd ffd9 	bl	8000b54 <__aeabi_dcmpge>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01e      	beq.n	8002be6 <get_handle_type+0x13e>
		handle = T210;
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <get_handle_type+0x1f0>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <get_handle_type+0x1e4>)
 8002bb0:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <get_handle_type+0x218>)
 8002bb2:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 8002bb4:	493a      	ldr	r1, [pc, #232]	; (8002ca0 <get_handle_type+0x1f8>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <get_handle_type+0x21c>)
 8002bbc:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8002bc0:	4939      	ldr	r1, [pc, #228]	; (8002ca8 <get_handle_type+0x200>)
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <get_handle_type+0x21c>)
 8002bc8:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002bcc:	4938      	ldr	r1, [pc, #224]	; (8002cb0 <get_handle_type+0x208>)
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <get_handle_type+0x1ec>)
 8002bd4:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 50;
 8002bd8:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <get_handle_type+0x210>)
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <get_handle_type+0x220>)
 8002be0:	e9c1 2300 	strd	r2, r3, [r1]
 8002be4:	e01d      	b.n	8002c22 <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <get_handle_type+0x1f0>)
 8002be8:	2202      	movs	r2, #2
 8002bea:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <get_handle_type+0x1e4>)
 8002bee:	4a37      	ldr	r2, [pc, #220]	; (8002ccc <get_handle_type+0x224>)
 8002bf0:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 8002bf2:	492b      	ldr	r1, [pc, #172]	; (8002ca0 <get_handle_type+0x1f8>)
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <get_handle_type+0x228>)
 8002bfa:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8002bfe:	492a      	ldr	r1, [pc, #168]	; (8002ca8 <get_handle_type+0x200>)
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <get_handle_type+0x1fc>)
 8002c06:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002c0a:	4929      	ldr	r1, [pc, #164]	; (8002cb0 <get_handle_type+0x208>)
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <get_handle_type+0x1ec>)
 8002c12:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 8002c16:	4928      	ldr	r1, [pc, #160]	; (8002cb8 <get_handle_type+0x210>)
 8002c18:	a319      	add	r3, pc, #100	; (adr r3, 8002c80 <get_handle_type+0x1d8>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <get_handle_type+0x1f8>)
 8002c24:	ed93 7b00 	vldr	d7, [r3]
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <get_handle_type+0x200>)
 8002c2a:	ed93 6b00 	vldr	d6, [r3]
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <get_handle_type+0x208>)
 8002c30:	ed93 5b00 	vldr	d5, [r3]
 8002c34:	eeb0 2a45 	vmov.f32	s4, s10
 8002c38:	eef0 2a65 	vmov.f32	s5, s11
 8002c3c:	eeb0 1a46 	vmov.f32	s2, s12
 8002c40:	eef0 1a66 	vmov.f32	s3, s13
 8002c44:	eeb0 0a47 	vmov.f32	s0, s14
 8002c48:	eef0 0a67 	vmov.f32	s1, s15
 8002c4c:	4821      	ldr	r0, [pc, #132]	; (8002cd4 <get_handle_type+0x22c>)
 8002c4e:	f001 fcbe 	bl	80045ce <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <get_handle_type+0x210>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	4614      	mov	r4, r2
 8002c5a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <get_handle_type+0x210>)
 8002c60:	ed93 7b00 	vldr	d7, [r3]
 8002c64:	eeb0 1a47 	vmov.f32	s2, s14
 8002c68:	eef0 1a67 	vmov.f32	s3, s15
 8002c6c:	ec45 4b10 	vmov	d0, r4, r5
 8002c70:	4818      	ldr	r0, [pc, #96]	; (8002cd4 <get_handle_type+0x22c>)
 8002c72:	f001 fc8c 	bl	800458e <PID_SetILimits>

}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	00000000 	.word	0x00000000
 8002c84:	4062c000 	.word	0x4062c000
 8002c88:	200013b4 	.word	0x200013b4
 8002c8c:	20000038 	.word	0x20000038
 8002c90:	200016e0 	.word	0x200016e0
 8002c94:	3fe00000 	.word	0x3fe00000
 8002c98:	200005b8 	.word	0x200005b8
 8002c9c:	41a00000 	.word	0x41a00000
 8002ca0:	200005e8 	.word	0x200005e8
 8002ca4:	40080000 	.word	0x40080000
 8002ca8:	200005f0 	.word	0x200005f0
 8002cac:	3ff00000 	.word	0x3ff00000
 8002cb0:	200005f8 	.word	0x200005f8
 8002cb4:	3fd00000 	.word	0x3fd00000
 8002cb8:	20000020 	.word	0x20000020
 8002cbc:	40340000 	.word	0x40340000
 8002cc0:	42700000 	.word	0x42700000
 8002cc4:	40140000 	.word	0x40140000
 8002cc8:	40490000 	.word	0x40490000
 8002ccc:	42f00000 	.word	0x42f00000
 8002cd0:	40200000 	.word	0x40200000
 8002cd4:	20001f78 	.word	0x20001f78

08002cd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d006      	beq.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x1e>
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	2b80      	cmp	r3, #128	; 0x80
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x1e>
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf4:	d109      	bne.n	8002d0a <HAL_GPIO_EXTI_Callback+0x32>
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8002cfe:	4806      	ldr	r0, [pc, #24]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x40>)
 8002d00:	f009 fe48 	bl	800c994 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    }
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000001c 	.word	0x2000001c
 8002d18:	20001e48 	.word	0x20001e48

08002d1c <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7f1b      	ldrb	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d003      	beq.n	8002d34 <HAL_TIM_IC_CaptureCallback+0x18>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7f1b      	ldrb	r3, [r3, #28]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8002d34:	f7ff fd32 	bl	800279c <beep>
	}
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <set_heater_duty+0x48>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fc0d 	bl	8000574 <__aeabi_i2d>
 8002d5a:	a309      	add	r3, pc, #36	; (adr r3, 8002d80 <set_heater_duty+0x40>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fc72 	bl	8000648 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4907      	ldr	r1, [pc, #28]	; (8002d88 <set_heater_duty+0x48>)
 8002d6a:	680c      	ldr	r4, [r1, #0]
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd ff42 	bl	8000bf8 <__aeabi_d2uiz>
 8002d74:	4603      	mov	r3, r0
 8002d76:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	33333333 	.word	0x33333333
 8002d84:	3fd33333 	.word	0x3fd33333
 8002d88:	20001c80 	.word	0x20001c80
 8002d8c:	00000000 	.word	0x00000000

08002d90 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8002d90:	b5b0      	push	{r4, r5, r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <heater_on+0xa0>)
 8002d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fbfd 	bl	8000598 <__aeabi_f2d>
 8002d9e:	a31e      	add	r3, pc, #120	; (adr r3, 8002e18 <heater_on+0x88>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fc50 	bl	8000648 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <heater_on+0xa0>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbef 	bl	8000598 <__aeabi_f2d>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f7fd fd6b 	bl	800089c <__aeabi_ddiv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <heater_on+0xa4>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fc38 	bl	8000648 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <heater_on+0xa8>)
 8002dde:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <heater_on+0xa8>)
 8002de4:	ed93 7b00 	vldr	d7, [r3]
 8002de8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8002e20 <heater_on+0x90>
 8002dec:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002e28 <heater_on+0x98>
 8002df0:	eeb0 0a47 	vmov.f32	s0, s14
 8002df4:	eef0 0a67 	vmov.f32	s1, s15
 8002df8:	f7fe fa9c 	bl	8001334 <clamp>
 8002dfc:	ec53 2b10 	vmov	r2, r3, d0
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7fd fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff97 	bl	8002d40 <set_heater_duty>
}
 8002e12:	bf00      	nop
 8002e14:	bdb0      	pop	{r4, r5, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	a5e353f8 	.word	0xa5e353f8
 8002e1c:	3fc0c49b 	.word	0x3fc0c49b
 8002e20:	00000000 	.word	0x00000000
 8002e24:	407f4000 	.word	0x407f4000
	...
 8002e30:	20000038 	.word	0x20000038
 8002e34:	200006e8 	.word	0x200006e8
 8002e38:	200006f8 	.word	0x200006f8

08002e3c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7ff ff7d 	bl	8002d40 <set_heater_duty>
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10d      	bne.n	8002e78 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7f1b      	ldrb	r3, [r3, #28]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d109      	bne.n	8002e78 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		current_measurement_requested = 0;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8002e74:	f003 fb7a 	bl	800656c <HAL_ADC_Start_IT>
	}
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20001c80 	.word	0x20001c80
 8002e84:	20000700 	.word	0x20000700
 8002e88:	20001a78 	.word	0x20001a78

08002e8c <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		thermocouple_measurement_done = 0;
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
		heater_off();
 8002ea2:	f7ff ffcb 	bl	8002e3c <heater_off>
		__HAL_TIM_ENABLE(&htim7);
 8002ea6:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d104      	bne.n	8002ec8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8002ebe:	2239      	movs	r2, #57	; 0x39
 8002ec0:	492d      	ldr	r1, [pc, #180]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002ec2:	482e      	ldr	r0, [pc, #184]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002ec4:	f003 fc82 	bl	80067cc <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d106      	bne.n	8002ede <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 8002ed0:	482b      	ldr	r0, [pc, #172]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ed2:	f009 fdc9 	bl	800ca68 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	482a      	ldr	r0, [pc, #168]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002eda:	f009 ff97 	bl	800ce0c <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d13d      	bne.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8002ee6:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d139      	bne.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8002eee:	2120      	movs	r1, #32
 8002ef0:	4827      	ldr	r0, [pc, #156]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002ef2:	f006 f963 	bl	80091bc <HAL_GPIO_ReadPin>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d10b      	bne.n	8002f14 <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
			beep();
 8002f08:	f7ff fc48 	bl	800279c <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8002f0c:	481e      	ldr	r0, [pc, #120]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002f0e:	f009 fdab 	bl	800ca68 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 8002f12:	e026      	b.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1a:	f006 f94f 	bl	80091bc <HAL_GPIO_ReadPin>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
			beep();
 8002f30:	f7ff fc34 	bl	800279c <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8002f34:	4814      	ldr	r0, [pc, #80]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002f36:	f009 fd97 	bl	800ca68 <HAL_TIM_Base_Stop_IT>
}
 8002f3a:	e012      	b.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8002f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f40:	4813      	ldr	r0, [pc, #76]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002f42:	f006 f93b 	bl	80091bc <HAL_GPIO_ReadPin>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10a      	bne.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
			beep();
 8002f58:	f7ff fc20 	bl	800279c <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8002f5c:	480a      	ldr	r0, [pc, #40]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002f5e:	f009 fd83 	bl	800ca68 <HAL_TIM_Base_Stop_IT>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20001d64 	.word	0x20001d64
 8002f70:	200001c1 	.word	0x200001c1
 8002f74:	20001db0 	.word	0x20001db0
 8002f78:	2000062c 	.word	0x2000062c
 8002f7c:	20001a0c 	.word	0x20001a0c
 8002f80:	20001e94 	.word	0x20001e94
 8002f84:	20001d18 	.word	0x20001d18
 8002f88:	20001e48 	.word	0x20001e48
 8002f8c:	2000001c 	.word	0x2000001c
 8002f90:	48000400 	.word	0x48000400
 8002f94:	200005dc 	.word	0x200005dc
 8002f98:	200005dd 	.word	0x200005dd
 8002f9c:	200005de 	.word	0x200005de

08002fa0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb0:	d110      	bne.n	8002fd4 <HAL_ADC_ConvCpltCallback+0x34>
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <HAL_ADC_ConvCpltCallback+0x60>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 8002fba:	f7fe fafd 	bl	80015b8 <get_thermocouple_temperature>
		heater_on();
 8002fbe:	f7ff fee7 	bl	8002d90 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8002fc2:	4810      	ldr	r0, [pc, #64]	; (8003004 <HAL_ADC_ConvCpltCallback+0x64>)
 8002fc4:	f001 f910 	bl	80041e8 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8002fc8:	480f      	ldr	r0, [pc, #60]	; (8003008 <HAL_ADC_ConvCpltCallback+0x68>)
 8002fca:	f003 fcb3 	bl	8006934 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_ADC_ConvCpltCallback+0x60>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2)){
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_ADC_ConvCpltCallback+0x6c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_ADC_ConvCpltCallback+0x56>
		sensor_values.heater_current = HAL_ADC_GetValue(&hadc2);
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <HAL_ADC_ConvCpltCallback+0x70>)
 8002fe0:	f003 fd09 	bl	80069f6 <HAL_ADC_GetValue>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_ADC_ConvCpltCallback+0x74>)
 8002fea:	829a      	strh	r2, [r3, #20]
		heater_on();
 8002fec:	f7ff fed0 	bl	8002d90 <heater_on>
		current_measurement_done = 1;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_ADC_ConvCpltCallback+0x78>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
	}
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200001c1 	.word	0x200001c1
 8003004:	20001f78 	.word	0x20001f78
 8003008:	20001a0c 	.word	0x20001a0c
 800300c:	50000100 	.word	0x50000100
 8003010:	20001a78 	.word	0x20001a78
 8003014:	20000038 	.word	0x20000038
 8003018:	200001c0 	.word	0x200001c0
 800301c:	00000000 	.word	0x00000000

08003020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003024:	ed2d 8b04 	vpush	{d8-d9}
 8003028:	b08c      	sub	sp, #48	; 0x30
 800302a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800302c:	f002 fdfa 	bl	8005c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003030:	f000 fa4a 	bl	80034c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003034:	f000 ff0e 	bl	8003e54 <MX_GPIO_Init>
  MX_DMA_Init();
 8003038:	f000 feda 	bl	8003df0 <MX_DMA_Init>
  MX_ADC1_Init();
 800303c:	f000 fa92 	bl	8003564 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003040:	f000 fb28 	bl	8003694 <MX_ADC2_Init>
  MX_CRC_Init();
 8003044:	f000 fb8c 	bl	8003760 <MX_CRC_Init>
  MX_TIM1_Init();
 8003048:	f000 fc2a 	bl	80038a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800304c:	f000 fcc8 	bl	80039e0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003050:	f000 fd1a 	bl	8003a88 <MX_TIM4_Init>
  MX_SPI2_Init();
 8003054:	f000 fbe6 	bl	8003824 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003058:	f000 fba4 	bl	80037a4 <MX_I2C1_Init>
  MX_USB_Device_Init();
 800305c:	f011 ff00 	bl	8014e60 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8003060:	f000 fe4a 	bl	8003cf8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003064:	f000 fe78 	bl	8003d58 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003068:	f000 fd9e 	bl	8003ba8 <MX_TIM7_Init>
  MX_TIM8_Init();
 800306c:	f000 fddc 	bl	8003c28 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003070:	f000 fd64 	bl	8003b3c <MX_TIM6_Init>
  MX_TIM16_Init();
 8003074:	f000 fe18 	bl	8003ca8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003078:	2000      	movs	r0, #0
 800307a:	f7ff fe61 	bl	8002d40 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 800307e:	2108      	movs	r1, #8
 8003080:	488b      	ldr	r0, [pc, #556]	; (80032b0 <main+0x290>)
 8003082:	f00a ff7b 	bl	800df7c <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003086:	213c      	movs	r1, #60	; 0x3c
 8003088:	488a      	ldr	r0, [pc, #552]	; (80032b4 <main+0x294>)
 800308a:	f00a f899 	bl	800d1c0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800308e:	2100      	movs	r1, #0
 8003090:	4887      	ldr	r0, [pc, #540]	; (80032b0 <main+0x290>)
 8003092:	f009 fd6f 	bl	800cb74 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <main+0x298>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2205      	movs	r2, #5
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 800309e:	4887      	ldr	r0, [pc, #540]	; (80032bc <main+0x29c>)
 80030a0:	f009 fc78 	bl	800c994 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80030a4:	4b86      	ldr	r3, [pc, #536]	; (80032c0 <main+0x2a0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b85      	ldr	r3, [pc, #532]	; (80032c0 <main+0x2a0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80030b4:	217f      	movs	r1, #127	; 0x7f
 80030b6:	4883      	ldr	r0, [pc, #524]	; (80032c4 <main+0x2a4>)
 80030b8:	f004 fd5a 	bl	8007b70 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80030bc:	217f      	movs	r1, #127	; 0x7f
 80030be:	4882      	ldr	r0, [pc, #520]	; (80032c8 <main+0x2a8>)
 80030c0:	f004 fd56 	bl	8007b70 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 80030c4:	2239      	movs	r2, #57	; 0x39
 80030c6:	4981      	ldr	r1, [pc, #516]	; (80032cc <main+0x2ac>)
 80030c8:	487f      	ldr	r0, [pc, #508]	; (80032c8 <main+0x2a8>)
 80030ca:	f003 fb7f 	bl	80067cc <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 80030ce:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80030d2:	487f      	ldr	r0, [pc, #508]	; (80032d0 <main+0x2b0>)
 80030d4:	f000 ff71 	bl	8003fba <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 80030d8:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80032d4 <main+0x2b4>
 80030dc:	487e      	ldr	r0, [pc, #504]	; (80032d8 <main+0x2b8>)
 80030de:	f000 ff6c 	bl	8003fba <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 80030e2:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80030e6:	487d      	ldr	r0, [pc, #500]	; (80032dc <main+0x2bc>)
 80030e8:	f000 ff67 	bl	8003fba <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 80030ec:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80030f0:	487b      	ldr	r0, [pc, #492]	; (80032e0 <main+0x2c0>)
 80030f2:	f000 ff62 	bl	8003fba <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 80030f6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80030fa:	487a      	ldr	r0, [pc, #488]	; (80032e4 <main+0x2c4>)
 80030fc:	f000 ff5d 	bl	8003fba <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003100:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003104:	4878      	ldr	r0, [pc, #480]	; (80032e8 <main+0x2c8>)
 8003106:	f000 ff58 	bl	8003fba <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 800310a:	20c8      	movs	r0, #200	; 0xc8
 800310c:	f002 fdfa 	bl	8005d04 <HAL_Delay>
	LCD_init();
 8003110:	f002 fd1c 	bl	8005b4c <LCD_init>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003114:	f7fd ffa2 	bl	800105c <FlashCheckCRC>
 8003118:	4603      	mov	r3, r0
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <main+0x10a>
  	    	FlashWrite(&default_flash_values);
 8003124:	4871      	ldr	r0, [pc, #452]	; (80032ec <main+0x2cc>)
 8003126:	f7fe f83d 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 800312a:	4871      	ldr	r0, [pc, #452]	; (80032f0 <main+0x2d0>)
 800312c:	f7fe f820 	bl	8001170 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 8003130:	2004      	movs	r0, #4
 8003132:	f7fe f9df 	bl	80014f4 <change_state>

  		settings_menue();
 8003136:	f7fe fb43 	bl	80017c0 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <main+0x2d0>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd56 	bl	8000bf8 <__aeabi_d2uiz>
 800314c:	4603      	mov	r3, r0
 800314e:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003150:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <main+0x2d4>)
 8003152:	ed93 7b00 	vldr	d7, [r3]
 8003156:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <main+0x2d8>)
 8003158:	ed93 6b00 	vldr	d6, [r3]
 800315c:	4b67      	ldr	r3, [pc, #412]	; (80032fc <main+0x2dc>)
 800315e:	ed93 5b00 	vldr	d5, [r3]
 8003162:	2300      	movs	r3, #0
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	2301      	movs	r3, #1
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	eeb0 2a45 	vmov.f32	s4, s10
 800316e:	eef0 2a65 	vmov.f32	s5, s11
 8003172:	eeb0 1a46 	vmov.f32	s2, s12
 8003176:	eef0 1a66 	vmov.f32	s3, s13
 800317a:	eeb0 0a47 	vmov.f32	s0, s14
 800317e:	eef0 0a67 	vmov.f32	s1, s15
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <main+0x2e0>)
 8003184:	4a5f      	ldr	r2, [pc, #380]	; (8003304 <main+0x2e4>)
 8003186:	4960      	ldr	r1, [pc, #384]	; (8003308 <main+0x2e8>)
 8003188:	4860      	ldr	r0, [pc, #384]	; (800330c <main+0x2ec>)
 800318a:	f000 ffe1 	bl	8004150 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800318e:	2101      	movs	r1, #1
 8003190:	485e      	ldr	r0, [pc, #376]	; (800330c <main+0x2ec>)
 8003192:	f001 f970 	bl	8004476 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8003196:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <main+0x2f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	4619      	mov	r1, r3
 800319e:	485b      	ldr	r0, [pc, #364]	; (800330c <main+0x2ec>)
 80031a0:	f001 fb18 	bl	80047d4 <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 80031a4:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 80032a0 <main+0x280>
 80031a8:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 80032a8 <main+0x288>
 80031ac:	4857      	ldr	r0, [pc, #348]	; (800330c <main+0x2ec>)
 80031ae:	f001 f980 	bl	80044b2 <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 80031b2:	4b58      	ldr	r3, [pc, #352]	; (8003314 <main+0x2f4>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	4690      	mov	r8, r2
 80031ba:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80031be:	4b55      	ldr	r3, [pc, #340]	; (8003314 <main+0x2f4>)
 80031c0:	ed93 7b00 	vldr	d7, [r3]
 80031c4:	eeb0 1a47 	vmov.f32	s2, s14
 80031c8:	eef0 1a67 	vmov.f32	s3, s15
 80031cc:	ec49 8b10 	vmov	d0, r8, r9
 80031d0:	484e      	ldr	r0, [pc, #312]	; (800330c <main+0x2ec>)
 80031d2:	f001 f9dc 	bl	800458e <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 80031d6:	f7ff f8e5 	bl	80023a4 <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	e00e      	b.n	80031fe <main+0x1de>
  			get_bus_voltage();
 80031e0:	f7fe f9be 	bl	8001560 <get_bus_voltage>
  			get_mcu_temp();
 80031e4:	f7fe f914 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 80031e8:	f7fe f9e6 	bl	80015b8 <get_thermocouple_temperature>
  			get_handle_type();
 80031ec:	f7ff fc5c 	bl	8002aa8 <get_handle_type>
  			get_stand_status();
 80031f0:	f7ff fbc6 	bl	8002980 <get_stand_status>
  			handle_button_status();
 80031f4:	f7ff fb6a 	bl	80028cc <handle_button_status>
  		for (int i = 0; i<200;i++){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2bc7      	cmp	r3, #199	; 0xc7
 8003202:	dded      	ble.n	80031e0 <main+0x1c0>
  		}

  		/* Start-up beep */
  		beep();
 8003204:	f7ff faca 	bl	800279c <beep>
  		HAL_Delay(100);
 8003208:	2064      	movs	r0, #100	; 0x64
 800320a:	f002 fd7b 	bl	8005d04 <HAL_Delay>
  		beep();
 800320e:	f7ff fac5 	bl	800279c <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003212:	f002 fd6b 	bl	8005cec <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <main+0x2f8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <main+0x2fc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d30e      	bcc.n	8003244 <main+0x224>
  				get_stand_status();
 8003226:	f7ff fbab 	bl	8002980 <get_stand_status>
  				get_handle_type();
 800322a:	f7ff fc3d 	bl	8002aa8 <get_handle_type>
  				get_set_temperature();
 800322e:	f7ff fa75 	bl	800271c <get_set_temperature>
  				handle_button_status();
 8003232:	f7ff fb4b 	bl	80028cc <handle_button_status>
  	  			handle_emergency_shutdown();
 8003236:	f7ff fad3 	bl	80027e0 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 800323a:	f002 fd57 	bl	8005cec <HAL_GetTick>
 800323e:	4603      	mov	r3, r0
 8003240:	4a35      	ldr	r2, [pc, #212]	; (8003318 <main+0x2f8>)
 8003242:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003244:	f002 fd52 	bl	8005cec <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <main+0x300>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <main+0x304>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d308      	bcc.n	800326a <main+0x24a>
  				get_bus_voltage();
 8003258:	f7fe f982 	bl	8001560 <get_bus_voltage>
  				get_mcu_temp();
 800325c:	f7fe f8d8 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 8003260:	f002 fd44 	bl	8005cec <HAL_GetTick>
 8003264:	4603      	mov	r3, r0
 8003266:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <main+0x300>)
 8003268:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <main+0x308>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	dc66      	bgt.n	8003340 <main+0x320>
 8003272:	2b02      	cmp	r3, #2
 8003274:	da5c      	bge.n	8003330 <main+0x310>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <main+0x260>
 800327a:	2b01      	cmp	r3, #1
 800327c:	d007      	beq.n	800328e <main+0x26e>
 800327e:	e05f      	b.n	8003340 <main+0x320>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <main+0x30c>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	491e      	ldr	r1, [pc, #120]	; (8003300 <main+0x2e0>)
 8003288:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800328c:	e058      	b.n	8003340 <main+0x320>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <main+0x2d0>)
 8003290:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003294:	491a      	ldr	r1, [pc, #104]	; (8003300 <main+0x2e0>)
 8003296:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800329a:	e051      	b.n	8003340 <main+0x320>
 800329c:	f3af 8000 	nop.w
 80032a0:	00000000 	.word	0x00000000
 80032a4:	407f4000 	.word	0x407f4000
	...
 80032b0:	20001c80 	.word	0x20001c80
 80032b4:	20001ccc 	.word	0x20001ccc
 80032b8:	20001d18 	.word	0x20001d18
 80032bc:	20001d64 	.word	0x20001d64
 80032c0:	20001db0 	.word	0x20001db0
 80032c4:	20001a78 	.word	0x20001a78
 80032c8:	20001a0c 	.word	0x20001a0c
 80032cc:	2000062c 	.word	0x2000062c
 80032d0:	20000704 	.word	0x20000704
 80032d4:	42c80000 	.word	0x42c80000
 80032d8:	20000a30 	.word	0x20000a30
 80032dc:	20000d5c 	.word	0x20000d5c
 80032e0:	20001088 	.word	0x20001088
 80032e4:	200013b4 	.word	0x200013b4
 80032e8:	200016e0 	.word	0x200016e0
 80032ec:	20000088 	.word	0x20000088
 80032f0:	200006a0 	.word	0x200006a0
 80032f4:	200005e8 	.word	0x200005e8
 80032f8:	200005f0 	.word	0x200005f0
 80032fc:	200005f8 	.word	0x200005f8
 8003300:	200006f0 	.word	0x200006f0
 8003304:	200006e8 	.word	0x200006e8
 8003308:	20000040 	.word	0x20000040
 800330c:	20001f78 	.word	0x20001f78
 8003310:	2000000c 	.word	0x2000000c
 8003314:	20000020 	.word	0x20000020
 8003318:	200005d4 	.word	0x200005d4
 800331c:	20000014 	.word	0x20000014
 8003320:	200005d8 	.word	0x200005d8
 8003324:	20000018 	.word	0x20000018
 8003328:	2000001d 	.word	0x2000001d
 800332c:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003330:	4953      	ldr	r1, [pc, #332]	; (8003480 <main+0x460>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800333e:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003340:	f002 fcd4 	bl	8005cec <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <main+0x464>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	4b4e      	ldr	r3, [pc, #312]	; (8003488 <main+0x468>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d365      	bcc.n	8003420 <main+0x400>
  				memset(&buffer, '\0', sizeof(buffer));
 8003354:	2228      	movs	r2, #40	; 0x28
 8003356:	2100      	movs	r1, #0
 8003358:	484c      	ldr	r0, [pc, #304]	; (800348c <main+0x46c>)
 800335a:	f013 fa26 	bl	80167aa <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800335e:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <main+0x470>)
 8003360:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8003364:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <main+0x470>)
 8003366:	e9d3 4500 	ldrd	r4, r5, [r3]
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 800336a:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <main+0x474>)
 800336c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <main+0x478>)
 8003376:	f7fd fa91 	bl	800089c <__aeabi_ddiv>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	4b45      	ldr	r3, [pc, #276]	; (800349c <main+0x47c>)
 8003388:	f7fd f95e 	bl	8000648 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 8003394:	4842      	ldr	r0, [pc, #264]	; (80034a0 <main+0x480>)
 8003396:	f001 fa61 	bl	800485c <PID_GetPpart>
 800339a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <main+0x484>)
 80033a4:	f7fd fa7a 	bl	800089c <__aeabi_ddiv>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 80033b0:	483b      	ldr	r0, [pc, #236]	; (80034a0 <main+0x480>)
 80033b2:	f001 fa65 	bl	8004880 <PID_GetIpart>
 80033b6:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b39      	ldr	r3, [pc, #228]	; (80034a4 <main+0x484>)
 80033c0:	f7fd fa6c 	bl	800089c <__aeabi_ddiv>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4692      	mov	sl, r2
 80033ca:	469b      	mov	fp, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 80033cc:	4834      	ldr	r0, [pc, #208]	; (80034a0 <main+0x480>)
 80033ce:	f001 fa69 	bl	80048a4 <PID_GetDpart>
 80033d2:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <main+0x484>)
 80033dc:	f7fd fa5e 	bl	800089c <__aeabi_ddiv>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80033e8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80033ec:	ed8d 9b04 	vstr	d9, [sp, #16]
 80033f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80033f4:	e9cd 4500 	strd	r4, r5, [sp]
 80033f8:	4642      	mov	r2, r8
 80033fa:	464b      	mov	r3, r9
 80033fc:	492a      	ldr	r1, [pc, #168]	; (80034a8 <main+0x488>)
 80033fe:	4823      	ldr	r0, [pc, #140]	; (800348c <main+0x46c>)
 8003400:	f013 f970 	bl	80166e4 <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 8003404:	4821      	ldr	r0, [pc, #132]	; (800348c <main+0x46c>)
 8003406:	f7fc ff5b 	bl	80002c0 <strlen>
 800340a:	4603      	mov	r3, r0
 800340c:	b29b      	uxth	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	481e      	ldr	r0, [pc, #120]	; (800348c <main+0x46c>)
 8003412:	f011 fde3 	bl	8014fdc <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8003416:	f002 fc69 	bl	8005cec <HAL_GetTick>
 800341a:	4603      	mov	r3, r0
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <main+0x464>)
 800341e:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003420:	f002 fc64 	bl	8005cec <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	4b21      	ldr	r3, [pc, #132]	; (80034ac <main+0x48c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <main+0x490>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d311      	bcc.n	8003458 <main+0x438>
  					if(thermocouple_measurement_done == 1){
 8003434:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <main+0x494>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10d      	bne.n	8003458 <main+0x438>
						current_measurement_done = 0;
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <main+0x498>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8003442:	20fa      	movs	r0, #250	; 0xfa
 8003444:	f7ff fc7c 	bl	8002d40 <set_heater_duty>
						current_measurement_requested = 1;
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <main+0x49c>)
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 800344e:	f002 fc4d 	bl	8005cec <HAL_GetTick>
 8003452:	4603      	mov	r3, r0
 8003454:	4a15      	ldr	r2, [pc, #84]	; (80034ac <main+0x48c>)
 8003456:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8003458:	f002 fc48 	bl	8005cec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <main+0x4a0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1ad2      	subs	r2, r2, r3
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <main+0x4a4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	f4ff aed2 	bcc.w	8003212 <main+0x1f2>
  				update_display();
 800346e:	f7fe fc97 	bl	8001da0 <update_display>
  				previous_millis_display = HAL_GetTick();
 8003472:	f002 fc3b 	bl	8005cec <HAL_GetTick>
 8003476:	4603      	mov	r3, r0
 8003478:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <main+0x4a0>)
 800347a:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 800347c:	e6c9      	b.n	8003212 <main+0x1f2>
 800347e:	bf00      	nop
 8003480:	200006f0 	.word	0x200006f0
 8003484:	200005c0 	.word	0x200005c0
 8003488:	20000008 	.word	0x20000008
 800348c:	20000600 	.word	0x20000600
 8003490:	20000038 	.word	0x20000038
 8003494:	200006e8 	.word	0x200006e8
 8003498:	407f4000 	.word	0x407f4000
 800349c:	40590000 	.word	0x40590000
 80034a0:	20001f78 	.word	0x20001f78
 80034a4:	40240000 	.word	0x40240000
 80034a8:	0801a470 	.word	0x0801a470
 80034ac:	200005d0 	.word	0x200005d0
 80034b0:	20000010 	.word	0x20000010
 80034b4:	200001c1 	.word	0x200001c1
 80034b8:	200001c0 	.word	0x200001c0
 80034bc:	20000700 	.word	0x20000700
 80034c0:	200005bc 	.word	0x200005bc
 80034c4:	20000004 	.word	0x20000004

080034c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b094      	sub	sp, #80	; 0x50
 80034cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ce:	f107 0318 	add.w	r3, r7, #24
 80034d2:	2238      	movs	r2, #56	; 0x38
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f013 f967 	bl	80167aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f007 fd14 	bl	800af18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80034f0:	2322      	movs	r3, #34	; 0x22
 80034f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034fa:	2340      	movs	r3, #64	; 0x40
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80034fe:	2301      	movs	r3, #1
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003502:	2302      	movs	r3, #2
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003506:	2302      	movs	r3, #2
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800350a:	2304      	movs	r3, #4
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800350e:	2355      	movs	r3, #85	; 0x55
 8003510:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003512:	2302      	movs	r3, #2
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003516:	2302      	movs	r3, #2
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800351a:	2302      	movs	r3, #2
 800351c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800351e:	f107 0318 	add.w	r3, r7, #24
 8003522:	4618      	mov	r0, r3
 8003524:	f007 fdac 	bl	800b080 <HAL_RCC_OscConfig>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800352e:	f000 fd3f 	bl	8003fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003532:	230f      	movs	r3, #15
 8003534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003536:	2303      	movs	r3, #3
 8003538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	2104      	movs	r1, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f008 f8aa 	bl	800b6a4 <HAL_RCC_ClockConfig>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003556:	f000 fd2b 	bl	8003fb0 <Error_Handler>
  }
}
 800355a:	bf00      	nop
 800355c:	3750      	adds	r7, #80	; 0x50
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	; 0x30
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800356a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	2220      	movs	r2, #32
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f013 f914 	bl	80167aa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003582:	4b40      	ldr	r3, [pc, #256]	; (8003684 <MX_ADC1_Init+0x120>)
 8003584:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <MX_ADC1_Init+0x120>)
 800358c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <MX_ADC1_Init+0x120>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <MX_ADC1_Init+0x120>)
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <MX_ADC1_Init+0x120>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80035a4:	4b37      	ldr	r3, [pc, #220]	; (8003684 <MX_ADC1_Init+0x120>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <MX_ADC1_Init+0x120>)
 80035ac:	2204      	movs	r2, #4
 80035ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <MX_ADC1_Init+0x120>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <MX_ADC1_Init+0x120>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80035bc:	4b31      	ldr	r3, [pc, #196]	; (8003684 <MX_ADC1_Init+0x120>)
 80035be:	2203      	movs	r2, #3
 80035c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <MX_ADC1_Init+0x120>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <MX_ADC1_Init+0x120>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <MX_ADC1_Init+0x120>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <MX_ADC1_Init+0x120>)
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <MX_ADC1_Init+0x120>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <MX_ADC1_Init+0x120>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035ec:	4825      	ldr	r0, [pc, #148]	; (8003684 <MX_ADC1_Init+0x120>)
 80035ee:	f002 fe39 	bl	8006264 <HAL_ADC_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80035f8:	f000 fcda 	bl	8003fb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	4619      	mov	r1, r3
 8003606:	481f      	ldr	r0, [pc, #124]	; (8003684 <MX_ADC1_Init+0x120>)
 8003608:	f004 fb46 	bl	8007c98 <HAL_ADCEx_MultiModeConfigChannel>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003612:	f000 fccd 	bl	8003fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <MX_ADC1_Init+0x124>)
 8003618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800361a:	2306      	movs	r3, #6
 800361c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800361e:	2306      	movs	r3, #6
 8003620:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003622:	237f      	movs	r3, #127	; 0x7f
 8003624:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003626:	2304      	movs	r3, #4
 8003628:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4814      	ldr	r0, [pc, #80]	; (8003684 <MX_ADC1_Init+0x120>)
 8003634:	f003 fc24 	bl	8006e80 <HAL_ADC_ConfigChannel>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800363e:	f000 fcb7 	bl	8003fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <MX_ADC1_Init+0x128>)
 8003644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003646:	230c      	movs	r3, #12
 8003648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	4619      	mov	r1, r3
 800364e:	480d      	ldr	r0, [pc, #52]	; (8003684 <MX_ADC1_Init+0x120>)
 8003650:	f003 fc16 	bl	8006e80 <HAL_ADC_ConfigChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800365a:	f000 fca9 	bl	8003fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <MX_ADC1_Init+0x12c>)
 8003660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003662:	2312      	movs	r3, #18
 8003664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4806      	ldr	r0, [pc, #24]	; (8003684 <MX_ADC1_Init+0x120>)
 800366c:	f003 fc08 	bl	8006e80 <HAL_ADC_ConfigChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8003676:	f000 fc9b 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800367a:	bf00      	nop
 800367c:	3730      	adds	r7, #48	; 0x30
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20001a0c 	.word	0x20001a0c
 8003688:	0c900008 	.word	0x0c900008
 800368c:	10c00010 	.word	0x10c00010
 8003690:	c3210000 	.word	0xc3210000

08003694 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800369a:	463b      	mov	r3, r7
 800369c:	2220      	movs	r2, #32
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f013 f882 	bl	80167aa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80036a6:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036a8:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <MX_ADC2_Init+0xc4>)
 80036aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036bc:	2200      	movs	r2, #0
 80036be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036ce:	2204      	movs	r2, #4
 80036d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <MX_ADC2_Init+0xc0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <MX_ADC2_Init+0xc0>)
 8003702:	2200      	movs	r2, #0
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <MX_ADC2_Init+0xc0>)
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800370e:	4811      	ldr	r0, [pc, #68]	; (8003754 <MX_ADC2_Init+0xc0>)
 8003710:	f002 fda8 	bl	8006264 <HAL_ADC_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800371a:	f000 fc49 	bl	8003fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <MX_ADC2_Init+0xc8>)
 8003720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003722:	2306      	movs	r3, #6
 8003724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003726:	2306      	movs	r3, #6
 8003728:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800372a:	237f      	movs	r3, #127	; 0x7f
 800372c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800372e:	2304      	movs	r3, #4
 8003730:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003736:	463b      	mov	r3, r7
 8003738:	4619      	mov	r1, r3
 800373a:	4806      	ldr	r0, [pc, #24]	; (8003754 <MX_ADC2_Init+0xc0>)
 800373c:	f003 fba0 	bl	8006e80 <HAL_ADC_ConfigChannel>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003746:	f000 fc33 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20001a78 	.word	0x20001a78
 8003758:	50000100 	.word	0x50000100
 800375c:	2a000400 	.word	0x2a000400

08003760 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <MX_CRC_Init+0x3c>)
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <MX_CRC_Init+0x40>)
 8003768:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <MX_CRC_Init+0x3c>)
 800376c:	2200      	movs	r2, #0
 800376e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <MX_CRC_Init+0x3c>)
 8003772:	2200      	movs	r2, #0
 8003774:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <MX_CRC_Init+0x3c>)
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <MX_CRC_Init+0x3c>)
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <MX_CRC_Init+0x3c>)
 8003784:	2201      	movs	r2, #1
 8003786:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <MX_CRC_Init+0x3c>)
 800378a:	f004 fc39 	bl	8008000 <HAL_CRC_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003794:	f000 fc0c 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20001b44 	.word	0x20001b44
 80037a0:	40023000 	.word	0x40023000

080037a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <MX_I2C1_Init+0x74>)
 80037aa:	4a1c      	ldr	r2, [pc, #112]	; (800381c <MX_I2C1_Init+0x78>)
 80037ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <MX_I2C1_Init+0x74>)
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <MX_I2C1_Init+0x7c>)
 80037b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <MX_I2C1_Init+0x74>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <MX_I2C1_Init+0x74>)
 80037bc:	2201      	movs	r2, #1
 80037be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037c0:	4b15      	ldr	r3, [pc, #84]	; (8003818 <MX_I2C1_Init+0x74>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <MX_I2C1_Init+0x74>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <MX_I2C1_Init+0x74>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_I2C1_Init+0x74>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <MX_I2C1_Init+0x74>)
 80037da:	2200      	movs	r2, #0
 80037dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037de:	480e      	ldr	r0, [pc, #56]	; (8003818 <MX_I2C1_Init+0x74>)
 80037e0:	f005 fd34 	bl	800924c <HAL_I2C_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037ea:	f000 fbe1 	bl	8003fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037ee:	2100      	movs	r1, #0
 80037f0:	4809      	ldr	r0, [pc, #36]	; (8003818 <MX_I2C1_Init+0x74>)
 80037f2:	f005 fdc6 	bl	8009382 <HAL_I2CEx_ConfigAnalogFilter>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80037fc:	f000 fbd8 	bl	8003fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003800:	2100      	movs	r1, #0
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_I2C1_Init+0x74>)
 8003804:	f005 fe08 	bl	8009418 <HAL_I2CEx_ConfigDigitalFilter>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800380e:	f000 fbcf 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20001b68 	.word	0x20001b68
 800381c:	40005400 	.word	0x40005400
 8003820:	30a0a7fb 	.word	0x30a0a7fb

08003824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <MX_SPI2_Init+0x74>)
 800382a:	4a1c      	ldr	r2, [pc, #112]	; (800389c <MX_SPI2_Init+0x78>)
 800382c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <MX_SPI2_Init+0x74>)
 8003830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003836:	4b18      	ldr	r3, [pc, #96]	; (8003898 <MX_SPI2_Init+0x74>)
 8003838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800383c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <MX_SPI2_Init+0x74>)
 8003840:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <MX_SPI2_Init+0x74>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <MX_SPI2_Init+0x74>)
 800384e:	2200      	movs	r2, #0
 8003850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_SPI2_Init+0x74>)
 8003854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <MX_SPI2_Init+0x74>)
 800385c:	2210      	movs	r2, #16
 800385e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <MX_SPI2_Init+0x74>)
 8003862:	2200      	movs	r2, #0
 8003864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <MX_SPI2_Init+0x74>)
 8003868:	2200      	movs	r2, #0
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <MX_SPI2_Init+0x74>)
 800386e:	2200      	movs	r2, #0
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <MX_SPI2_Init+0x74>)
 8003874:	2207      	movs	r2, #7
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <MX_SPI2_Init+0x74>)
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <MX_SPI2_Init+0x74>)
 8003880:	2208      	movs	r2, #8
 8003882:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <MX_SPI2_Init+0x74>)
 8003886:	f008 fb19 	bl	800bebc <HAL_SPI_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003890:	f000 fb8e 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20001bbc 	.word	0x20001bbc
 800389c:	40003800 	.word	0x40003800

080038a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b098      	sub	sp, #96	; 0x60
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	615a      	str	r2, [r3, #20]
 80038c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	2234      	movs	r2, #52	; 0x34
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f012 ff6c 	bl	80167aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038d4:	4a41      	ldr	r2, [pc, #260]	; (80039dc <MX_TIM1_Init+0x13c>)
 80038d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038da:	2213      	movs	r2, #19
 80038dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80038e4:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ec:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038f2:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <MX_TIM1_Init+0x138>)
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80038fe:	4836      	ldr	r0, [pc, #216]	; (80039d8 <MX_TIM1_Init+0x138>)
 8003900:	f009 f8e1 	bl	800cac6 <HAL_TIM_PWM_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800390a:	f000 fb51 	bl	8003fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800391a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800391e:	4619      	mov	r1, r3
 8003920:	482d      	ldr	r0, [pc, #180]	; (80039d8 <MX_TIM1_Init+0x138>)
 8003922:	f00a fc33 	bl	800e18c <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800392c:	f000 fb40 	bl	8003fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003930:	2360      	movs	r3, #96	; 0x60
 8003932:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003938:	2300      	movs	r3, #0
 800393a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800393c:	2300      	movs	r3, #0
 800393e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800394c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003950:	2200      	movs	r2, #0
 8003952:	4619      	mov	r1, r3
 8003954:	4820      	ldr	r0, [pc, #128]	; (80039d8 <MX_TIM1_Init+0x138>)
 8003956:	f009 fe31 	bl	800d5bc <HAL_TIM_PWM_ConfigChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003960:	f000 fb26 	bl	8003fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003968:	2208      	movs	r2, #8
 800396a:	4619      	mov	r1, r3
 800396c:	481a      	ldr	r0, [pc, #104]	; (80039d8 <MX_TIM1_Init+0x138>)
 800396e:	f009 fe25 	bl	800d5bc <HAL_TIM_PWM_ConfigChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003978:	f000 fb1a 	bl	8003fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800397c:	2300      	movs	r3, #0
 800397e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003980:	2300      	movs	r3, #0
 8003982:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003994:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80039a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80039ac:	2300      	movs	r3, #0
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	4619      	mov	r1, r3
 80039b8:	4807      	ldr	r0, [pc, #28]	; (80039d8 <MX_TIM1_Init+0x138>)
 80039ba:	f00a fc69 	bl	800e290 <HAL_TIMEx_ConfigBreakDeadTime>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80039c4:	f000 faf4 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039c8:	4803      	ldr	r0, [pc, #12]	; (80039d8 <MX_TIM1_Init+0x138>)
 80039ca:	f001 fad9 	bl	8004f80 <HAL_TIM_MspPostInit>

}
 80039ce:	bf00      	nop
 80039d0:	3760      	adds	r7, #96	; 0x60
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20001c80 	.word	0x20001c80
 80039dc:	40012c00 	.word	0x40012c00

080039e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f012 fedb 	bl	80167aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f4:	463b      	mov	r3, r7
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8003a12:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a20:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a26:	2303      	movs	r3, #3
 8003a28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	4619      	mov	r1, r3
 8003a50:	480c      	ldr	r0, [pc, #48]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a52:	f009 fb0f 	bl	800d074 <HAL_TIM_Encoder_Init>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003a5c:	f000 faa8 	bl	8003fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a68:	463b      	mov	r3, r7
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4805      	ldr	r0, [pc, #20]	; (8003a84 <MX_TIM2_Init+0xa4>)
 8003a6e:	f00a fb8d 	bl	800e18c <HAL_TIMEx_MasterConfigSynchronization>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003a78:	f000 fa9a 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a7c:	bf00      	nop
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20001ccc 	.word	0x20001ccc

08003a88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a8e:	f107 031c 	add.w	r3, r7, #28
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
 8003aa8:	615a      	str	r2, [r3, #20]
 8003aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <MX_TIM4_Init+0xb0>)
 8003ab0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003ab4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ab8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ad2:	4818      	ldr	r0, [pc, #96]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003ad4:	f008 fff7 	bl	800cac6 <HAL_TIM_PWM_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003ade:	f000 fa67 	bl	8003fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aea:	f107 031c 	add.w	r3, r7, #28
 8003aee:	4619      	mov	r1, r3
 8003af0:	4810      	ldr	r0, [pc, #64]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003af2:	f00a fb4b 	bl	800e18c <HAL_TIMEx_MasterConfigSynchronization>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003afc:	f000 fa58 	bl	8003fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b00:	2360      	movs	r3, #96	; 0x60
 8003b02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b10:	463b      	mov	r3, r7
 8003b12:	2204      	movs	r2, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4807      	ldr	r0, [pc, #28]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003b18:	f009 fd50 	bl	800d5bc <HAL_TIM_PWM_ConfigChannel>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003b22:	f000 fa45 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b26:	4803      	ldr	r0, [pc, #12]	; (8003b34 <MX_TIM4_Init+0xac>)
 8003b28:	f001 fa2a 	bl	8004f80 <HAL_TIM_MspPostInit>

}
 8003b2c:	bf00      	nop
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20001d18 	.word	0x20001d18
 8003b38:	40000800 	.word	0x40000800

08003b3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b4e:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <MX_TIM6_Init+0x68>)
 8003b50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b54:	f244 2267 	movw	r2, #16999	; 0x4267
 8003b58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b62:	22fa      	movs	r2, #250	; 0xfa
 8003b64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b6c:	480c      	ldr	r0, [pc, #48]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b6e:	f008 feb9 	bl	800c8e4 <HAL_TIM_Base_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003b78:	f000 fa1a 	bl	8003fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_TIM6_Init+0x64>)
 8003b8a:	f00a faff 	bl	800e18c <HAL_TIMEx_MasterConfigSynchronization>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003b94:	f000 fa0c 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20001d64 	.word	0x20001d64
 8003ba4:	40001000 	.word	0x40001000

08003ba8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <MX_TIM7_Init+0x7c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bc0:	f242 1233 	movw	r2, #8499	; 0x2133
 8003bc4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bce:	2209      	movs	r2, #9
 8003bd0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003bd8:	4811      	ldr	r0, [pc, #68]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bda:	f008 fe83 	bl	800c8e4 <HAL_TIM_Base_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003be4:	f000 f9e4 	bl	8003fb0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003be8:	2108      	movs	r1, #8
 8003bea:	480d      	ldr	r0, [pc, #52]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003bec:	f009 f9f2 	bl	800cfd4 <HAL_TIM_OnePulse_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8003bf6:	f000 f9db 	bl	8003fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4806      	ldr	r0, [pc, #24]	; (8003c20 <MX_TIM7_Init+0x78>)
 8003c08:	f00a fac0 	bl	800e18c <HAL_TIMEx_MasterConfigSynchronization>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8003c12:	f000 f9cd 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20001db0 	.word	0x20001db0
 8003c24:	40001400 	.word	0x40001400

08003c28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <MX_TIM8_Init+0x7c>)
 8003c3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003c64:	2108      	movs	r1, #8
 8003c66:	480e      	ldr	r0, [pc, #56]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c68:	f009 f9b4 	bl	800cfd4 <HAL_TIM_OnePulse_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8003c72:	f000 f99d 	bl	8003fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <MX_TIM8_Init+0x78>)
 8003c88:	f00a fa80 	bl	800e18c <HAL_TIMEx_MasterConfigSynchronization>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003c92:	f000 f98d 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001dfc 	.word	0x20001dfc
 8003ca4:	40013400 	.word	0x40013400

08003ca8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <MX_TIM16_Init+0x4c>)
 8003cb0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cb4:	f244 2267 	movw	r2, #16999	; 0x4267
 8003cb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cc2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003cc6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <MX_TIM16_Init+0x48>)
 8003cdc:	f008 fe02 	bl	800c8e4 <HAL_TIM_Base_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003ce6:	f000 f963 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20001e48 	.word	0x20001e48
 8003cf4:	40014400 	.word	0x40014400

08003cf8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <MX_TIM17_Init+0x5c>)
 8003d00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d04:	f244 2267 	movw	r2, #16999	; 0x4267
 8003d08:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d12:	2231      	movs	r2, #49	; 0x31
 8003d14:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003d28:	4809      	ldr	r0, [pc, #36]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d2a:	f008 fddb 	bl	800c8e4 <HAL_TIM_Base_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003d34:	f000 f93c 	bl	8003fb0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003d38:	2108      	movs	r1, #8
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_TIM17_Init+0x58>)
 8003d3c:	f009 f94a 	bl	800cfd4 <HAL_TIM_OnePulse_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003d46:	f000 f933 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20001e94 	.word	0x20001e94
 8003d54:	40014800 	.word	0x40014800

08003d58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d5e:	4a23      	ldr	r2, [pc, #140]	; (8003dec <MX_USART1_UART_Init+0x94>)
 8003d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d62:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003da0:	4811      	ldr	r0, [pc, #68]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003da2:	f00a fb6c 	bl	800e47e <HAL_UART_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003dac:	f000 f900 	bl	8003fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003db0:	2100      	movs	r1, #0
 8003db2:	480d      	ldr	r0, [pc, #52]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003db4:	f00b f8d8 	bl	800ef68 <HAL_UARTEx_SetTxFifoThreshold>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003dbe:	f000 f8f7 	bl	8003fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4808      	ldr	r0, [pc, #32]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003dc6:	f00b f90d 	bl	800efe4 <HAL_UARTEx_SetRxFifoThreshold>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003dd0:	f000 f8ee 	bl	8003fb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003dd4:	4804      	ldr	r0, [pc, #16]	; (8003de8 <MX_USART1_UART_Init+0x90>)
 8003dd6:	f00b f88e 	bl	800eef6 <HAL_UARTEx_DisableFifoMode>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003de0:	f000 f8e6 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20001ee0 	.word	0x20001ee0
 8003dec:	40013800 	.word	0x40013800

08003df0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <MX_DMA_Init+0x60>)
 8003df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <MX_DMA_Init+0x60>)
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	6493      	str	r3, [r2, #72]	; 0x48
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <MX_DMA_Init+0x60>)
 8003e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <MX_DMA_Init+0x60>)
 8003e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e12:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <MX_DMA_Init+0x60>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6493      	str	r3, [r2, #72]	; 0x48
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <MX_DMA_Init+0x60>)
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	200b      	movs	r0, #11
 8003e2c:	f004 f8b3 	bl	8007f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e30:	200b      	movs	r0, #11
 8003e32:	f004 f8ca 	bl	8007fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	200d      	movs	r0, #13
 8003e3c:	f004 f8ab 	bl	8007f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003e40:	200d      	movs	r0, #13
 8003e42:	f004 f8c2 	bl	8007fca <HAL_NVIC_EnableIRQ>

}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000

08003e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5a:	f107 0314 	add.w	r3, r7, #20
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	60da      	str	r2, [r3, #12]
 8003e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	4a4d      	ldr	r2, [pc, #308]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e76:	4b4b      	ldr	r3, [pc, #300]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e82:	4b48      	ldr	r3, [pc, #288]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	4a47      	ldr	r2, [pc, #284]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e8e:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	4a41      	ldr	r2, [pc, #260]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb2:	4b3c      	ldr	r3, [pc, #240]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <MX_GPIO_Init+0x150>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2102      	movs	r1, #2
 8003ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed2:	f005 f98b 	bl	80091ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f645 4107 	movw	r1, #23559	; 0x5c07
 8003edc:	4832      	ldr	r0, [pc, #200]	; (8003fa8 <MX_GPIO_Init+0x154>)
 8003ede:	f005 f985 	bl	80091ec <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8003ee2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	482d      	ldr	r0, [pc, #180]	; (8003fac <MX_GPIO_Init+0x158>)
 8003ef8:	f004 ffde 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8003efc:	2302      	movs	r3, #2
 8003efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f00:	2301      	movs	r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	4619      	mov	r1, r3
 8003f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f16:	f004 ffcf 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8003f1a:	2370      	movs	r3, #112	; 0x70
 8003f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f30:	f004 ffc2 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	4619      	mov	r1, r3
 8003f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f4c:	f004 ffb4 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003f50:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003f54:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f62:	f107 0314 	add.w	r3, r7, #20
 8003f66:	4619      	mov	r1, r3
 8003f68:	480f      	ldr	r0, [pc, #60]	; (8003fa8 <MX_GPIO_Init+0x154>)
 8003f6a:	f004 ffa5 	bl	8008eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8003f6e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	4808      	ldr	r0, [pc, #32]	; (8003fa8 <MX_GPIO_Init+0x154>)
 8003f86:	f004 ff97 	bl	8008eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2017      	movs	r0, #23
 8003f90:	f004 f801 	bl	8007f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003f94:	2017      	movs	r0, #23
 8003f96:	f004 f818 	bl	8007fca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f9a:	bf00      	nop
 8003f9c:	3728      	adds	r7, #40	; 0x28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	48000400 	.word	0x48000400
 8003fac:	48000800 	.word	0x48000800

08003fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb4:	b672      	cpsid	i
}
 8003fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fb8:	e7fe      	b.n	8003fb8 <Error_Handler+0x8>

08003fba <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e008      	b.n	8003ff4 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	d4e9      	bmi.n	8003fe2 <Moving_Average_Init+0x28>
	}
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	441a      	add	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800407e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004086:	d507      	bpl.n	8004098 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004096:	e003      	b.n	80040a0 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040b8:	ee16 0a90 	vmov	r0, s13
 80040bc:	f7fc fa6c 	bl	8000598 <__aeabi_f2d>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80040c8:	eeb0 0a47 	vmov.f32	s0, s14
 80040cc:	eef0 0a67 	vmov.f32	s1, s15
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004106:	f7fc fd2f 	bl	8000b68 <__aeabi_dcmpgt>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 800411c:	e011      	b.n	8004142 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800412a:	f7fc fcff 	bl	8000b2c <__aeabi_dcmplt>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <PID_Init+0x60>
}
 8004134:	e005      	b.n	8004142 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	0000      	movs	r0, r0
 800414c:	0000      	movs	r0, r0
	...

08004150 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6278      	str	r0, [r7, #36]	; 0x24
 8004158:	6239      	str	r1, [r7, #32]
 800415a:	61fa      	str	r2, [r7, #28]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004162:	ed87 1b02 	vstr	d1, [r7, #8]
 8004166:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	6a3a      	ldr	r2, [r7, #32]
 8004174:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2200      	movs	r2, #0
 8004180:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004182:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80041d8 <PID+0x88>
 8004186:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80041e0 <PID+0x90>
 800418a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800418c:	f000 f991 	bl	80044b2 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	2264      	movs	r2, #100	; 0x64
 8004194:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004196:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800419a:	4619      	mov	r1, r3
 800419c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800419e:	f000 fad9 	bl	8004754 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80041a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80041a6:	4619      	mov	r1, r3
 80041a8:	ed97 2b00 	vldr	d2, [r7]
 80041ac:	ed97 1b02 	vldr	d1, [r7, #8]
 80041b0:	ed97 0b04 	vldr	d0, [r7, #16]
 80041b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b6:	f000 fa25 	bl	8004604 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80041ba:	f001 fd97 	bl	8005cec <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	1ad2      	subs	r2, r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	605a      	str	r2, [r3, #4]

}
 80041ca:	bf00      	nop
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	f3af 8000 	nop.w
 80041d8:	00000000 	.word	0x00000000
 80041dc:	406fe000 	.word	0x406fe000
	...

080041e8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b08c      	sub	sp, #48	; 0x30
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <PID_Compute+0x16>
	{
		return _FALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e136      	b.n	800446c <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80041fe:	f001 fd75 	bl	8005cec <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	429a      	cmp	r2, r3
 8004216:	d204      	bcs.n	8004222 <PID_Compute+0x3a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8124 	beq.w	800446a <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423a:	f7fc f84d 	bl	80002d8 <__aeabi_dsub>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800424c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004250:	f7fc f842 	bl	80002d8 <__aeabi_dsub>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800426c:	f7fc f9ec 	bl	8000648 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4650      	mov	r0, sl
 8004276:	4659      	mov	r1, fp
 8004278:	f7fc f830 	bl	80002dc <__adddf3>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004292:	f7fc fc69 	bl	8000b68 <__aeabi_dcmpgt>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80042a8:	e010      	b.n	80042cc <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80042b6:	f7fc fc39 	bl	8000b2c <__aeabi_dcmplt>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d114      	bne.n	800430a <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80042ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f0:	f7fc f9aa 	bl	8000648 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4650      	mov	r0, sl
 80042fa:	4659      	mov	r1, fp
 80042fc:	f7fb ffec 	bl	80002d8 <__aeabi_dsub>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004316:	f7fc fc27 	bl	8000b68 <__aeabi_dcmpgt>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800432c:	e010      	b.n	8004350 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800433a:	f7fc fbf7 	bl	8000b2c <__aeabi_dcmplt>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004356:	4690      	mov	r8, r2
 8004358:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800435c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004360:	4640      	mov	r0, r8
 8004362:	4649      	mov	r1, r9
 8004364:	f7fc f970 	bl	8000648 <__aeabi_dmul>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d017      	beq.n	80043aa <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004384:	f7fc f960 	bl	8000648 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004396:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800439a:	f7fc f955 	bl	8000648 <__aeabi_dmul>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80043a8:	e005      	b.n	80043b6 <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80043c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c6:	f7fc f93f 	bl	8000648 <__aeabi_dmul>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4640      	mov	r0, r8
 80043d0:	4649      	mov	r1, r9
 80043d2:	f7fb ff81 	bl	80002d8 <__aeabi_dsub>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043de:	f7fb ff7d 	bl	80002dc <__adddf3>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80043f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f4:	f7fc fbb8 	bl	8000b68 <__aeabi_dcmpgt>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004404:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004408:	e00e      	b.n	8004428 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004410:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004414:	f7fc fb8a 	bl	8000b2c <__aeabi_dcmplt>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004424:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800442e:	4614      	mov	r4, r2
 8004430:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004438:	4620      	mov	r0, r4
 800443a:	4629      	mov	r1, r5
 800443c:	f7fc f904 	bl	8000648 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800444e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004452:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 800446a:	2300      	movs	r3, #0
	}

}
 800446c:	4618      	mov	r0, r3
 800446e:	3730      	adds	r7, #48	; 0x30
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004476 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <PID_SetMode+0x2e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	785b      	ldrb	r3, [r3, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fe19 	bl	80040d6 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	705a      	strb	r2, [r3, #1]

}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6178      	str	r0, [r7, #20]
 80044ba:	ed87 0b02 	vstr	d0, [r7, #8]
 80044be:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80044c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ca:	f7fc fb43 	bl	8000b54 <__aeabi_dcmpge>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d158      	bne.n	8004586 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044da:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d04b      	beq.n	8004588 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80044fe:	f7fc fb33 	bl	8000b68 <__aeabi_dcmpgt>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004512:	e9c1 2300 	strd	r2, r3, [r1]
 8004516:	e012      	b.n	800453e <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004526:	f7fc fb01 	bl	8000b2c <__aeabi_dcmplt>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d006      	beq.n	800453e <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800453a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800454a:	f7fc fb0d 	bl	8000b68 <__aeabi_dcmpgt>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004560:	e012      	b.n	8004588 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800456e:	f7fc fadd 	bl	8000b2c <__aeabi_dcmplt>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004584:	e000      	b.n	8004588 <PID_SetOutputLimits+0xd6>
		return;
 8004586:	bf00      	nop
		}
		else { }

	}

}
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	6178      	str	r0, [r7, #20]
 8004596:	ed87 0b02 	vstr	d0, [r7, #8]
 800459a:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800459e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045a6:	f7fc fad5 	bl	8000b54 <__aeabi_dcmpge>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 80045b0:	6979      	ldr	r1, [r7, #20]
 80045b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80045c4:	e000      	b.n	80045c8 <PID_SetILimits+0x3a>
		return;
 80045c6:	bf00      	nop
}
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	61f8      	str	r0, [r7, #28]
 80045d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80045da:	ed87 1b02 	vstr	d1, [r7, #8]
 80045de:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	789b      	ldrb	r3, [r3, #2]
 80045e6:	4619      	mov	r1, r3
 80045e8:	ed97 2b00 	vldr	d2, [r7]
 80045ec:	ed97 1b02 	vldr	d1, [r7, #8]
 80045f0:	ed97 0b04 	vldr	d0, [r7, #16]
 80045f4:	69f8      	ldr	r0, [r7, #28]
 80045f6:	f000 f805 	bl	8004604 <PID_SetTunings2>
}
 80045fa:	bf00      	nop
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	61f8      	str	r0, [r7, #28]
 800460c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004610:	ed87 1b02 	vstr	d1, [r7, #8]
 8004614:	ed87 2b00 	vstr	d2, [r7]
 8004618:	460b      	mov	r3, r1
 800461a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004628:	f7fc fa80 	bl	8000b2c <__aeabi_dcmplt>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 8089 	bne.w	8004746 <PID_SetTunings2+0x142>
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004640:	f7fc fa74 	bl	8000b2c <__aeabi_dcmplt>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d17d      	bne.n	8004746 <PID_SetTunings2+0x142>
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004656:	f7fc fa69 	bl	8000b2c <__aeabi_dcmplt>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d172      	bne.n	8004746 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	7efa      	ldrb	r2, [r7, #27]
 8004664:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8004666:	7efb      	ldrb	r3, [r7, #27]
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004678:	69f9      	ldr	r1, [r7, #28]
 800467a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800467e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004688:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800468c:	69f9      	ldr	r1, [r7, #28]
 800468e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004692:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb ff5a 	bl	8000554 <__aeabi_ui2d>
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <PID_SetTunings2+0x14c>)
 80046a6:	f7fc f8f9 	bl	800089c <__aeabi_ddiv>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80046b2:	69f9      	ldr	r1, [r7, #28]
 80046b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80046bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c4:	f7fb ffc0 	bl	8000648 <__aeabi_dmul>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	69f9      	ldr	r1, [r7, #28]
 80046ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80046d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046da:	f7fc f8df 	bl	800089c <__aeabi_ddiv>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	69f9      	ldr	r1, [r7, #28]
 80046e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	78db      	ldrb	r3, [r3, #3]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d12b      	bne.n	8004748 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80046f6:	f04f 0000 	mov.w	r0, #0
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	f7fb fdeb 	bl	80002d8 <__aeabi_dsub>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	69f9      	ldr	r1, [r7, #28]
 8004708:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	f7fb fddd 	bl	80002d8 <__aeabi_dsub>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	69f9      	ldr	r1, [r7, #28]
 8004724:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800472e:	f04f 0000 	mov.w	r0, #0
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	f7fb fdcf 	bl	80002d8 <__aeabi_dsub>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004744:	e000      	b.n	8004748 <PID_SetTunings2+0x144>
		return;
 8004746:	bf00      	nop

	}

}
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	408f4000 	.word	0x408f4000

08004754 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02e      	beq.n	80047c6 <PID_SetControllerDirection+0x72>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	78db      	ldrb	r3, [r3, #3]
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	429a      	cmp	r2, r3
 8004770:	d029      	beq.n	80047c6 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	f7fb fdaa 	bl	80002d8 <__aeabi_dsub>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f7fb fd9c 	bl	80002d8 <__aeabi_dsub>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	f7fb fd8e 	bl	80002d8 <__aeabi_dsub>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	70da      	strb	r2, [r3, #3]

}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 80047d4:	b5b0      	push	{r4, r5, r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dd01      	ble.n	80047ea <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dd2e      	ble.n	8004854 <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80047f6:	68b8      	ldr	r0, [r7, #8]
 80047f8:	f7fb febc 	bl	8000574 <__aeabi_i2d>
 80047fc:	4604      	mov	r4, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fb fea5 	bl	8000554 <__aeabi_ui2d>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f7fc f843 	bl	800089c <__aeabi_ddiv>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004824:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004828:	f7fb ff0e 	bl	8000648 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800483c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004840:	f7fc f82c 	bl	800089c <__aeabi_ddiv>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]

	}

}
 8004854:	bf00      	nop
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bdb0      	pop	{r4, r5, r7, pc}

0800485c <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800486a:	ec43 2b17 	vmov	d7, r2, r3
}
 800486e:	eeb0 0a47 	vmov.f32	s0, s14
 8004872:	eef0 0a67 	vmov.f32	s1, s15
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800488e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004892:	eeb0 0a47 	vmov.f32	s0, s14
 8004896:	eef0 0a67 	vmov.f32	s1, s15
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80048b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80048b6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ba:	eef0 0a67 	vmov.f32	s1, s15
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <HAL_MspInit+0x44>)
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <HAL_MspInit+0x44>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6613      	str	r3, [r2, #96]	; 0x60
 80048da:	4b0c      	ldr	r3, [pc, #48]	; (800490c <HAL_MspInit+0x44>)
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_MspInit+0x44>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_MspInit+0x44>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6593      	str	r3, [r2, #88]	; 0x58
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_MspInit+0x44>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80048fe:	f006 fbaf 	bl	800b060 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000

08004910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b09c      	sub	sp, #112	; 0x70
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004928:	f107 0318 	add.w	r3, r7, #24
 800492c:	2244      	movs	r2, #68	; 0x44
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f011 ff3a 	bl	80167aa <memset>
  if(hadc->Instance==ADC1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800493e:	d171      	bne.n	8004a24 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004944:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004946:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800494c:	f107 0318 	add.w	r3, r7, #24
 8004950:	4618      	mov	r0, r3
 8004952:	f007 f8c3 	bl	800badc <HAL_RCCEx_PeriphCLKConfig>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800495c:	f7ff fb28 	bl	8003fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004960:	4b57      	ldr	r3, [pc, #348]	; (8004ac0 <HAL_ADC_MspInit+0x1b0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	4a56      	ldr	r2, [pc, #344]	; (8004ac0 <HAL_ADC_MspInit+0x1b0>)
 8004968:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800496a:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_ADC_MspInit+0x1b0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10b      	bne.n	800498a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004976:	4a53      	ldr	r2, [pc, #332]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800497c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800497e:	4b51      	ldr	r3, [pc, #324]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	4b4e      	ldr	r3, [pc, #312]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	4a4d      	ldr	r2, [pc, #308]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 80049a2:	230c      	movs	r3, #12
 80049a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049a6:	2303      	movs	r3, #3
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049b8:	f004 fa7e 	bl	8008eb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80049bc:	4b42      	ldr	r3, [pc, #264]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049be:	4a43      	ldr	r2, [pc, #268]	; (8004acc <HAL_ADC_MspInit+0x1bc>)
 80049c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049c4:	2205      	movs	r2, #5
 80049c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c8:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ce:	4b3e      	ldr	r3, [pc, #248]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049d4:	4b3c      	ldr	r3, [pc, #240]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049da:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049e2:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049f6:	4834      	ldr	r0, [pc, #208]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 80049f8:	f003 fd08 	bl	800840c <HAL_DMA_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004a02:	f7ff fad5 	bl	8003fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <HAL_ADC_MspInit+0x1b8>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004a12:	2200      	movs	r2, #0
 8004a14:	210a      	movs	r1, #10
 8004a16:	2012      	movs	r0, #18
 8004a18:	f003 fabd 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004a1c:	2012      	movs	r0, #18
 8004a1e:	f003 fad4 	bl	8007fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a22:	e049      	b.n	8004ab8 <HAL_ADC_MspInit+0x1a8>
  else if(hadc->Instance==ADC2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a29      	ldr	r2, [pc, #164]	; (8004ad0 <HAL_ADC_MspInit+0x1c0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d144      	bne.n	8004ab8 <HAL_ADC_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a34:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004a38:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a3a:	f107 0318 	add.w	r3, r7, #24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f007 f84c 	bl	800badc <HAL_RCCEx_PeriphCLKConfig>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004a4a:	f7ff fab1 	bl	8003fb0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <HAL_ADC_MspInit+0x1b0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <HAL_ADC_MspInit+0x1b0>)
 8004a56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <HAL_ADC_MspInit+0x1b0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10b      	bne.n	8004a78 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004a7e:	f043 0320 	orr.w	r3, r3, #32
 8004a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <HAL_ADC_MspInit+0x1b4>)
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 8004a90:	2302      	movs	r3, #2
 8004a92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a94:	2303      	movs	r3, #3
 8004a96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 8004a9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	480c      	ldr	r0, [pc, #48]	; (8004ad4 <HAL_ADC_MspInit+0x1c4>)
 8004aa4:	f004 fa08 	bl	8008eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	210a      	movs	r1, #10
 8004aac:	2012      	movs	r0, #18
 8004aae:	f003 fa72 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004ab2:	2012      	movs	r0, #18
 8004ab4:	f003 fa89 	bl	8007fca <HAL_NVIC_EnableIRQ>
}
 8004ab8:	bf00      	nop
 8004aba:	3770      	adds	r7, #112	; 0x70
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20002010 	.word	0x20002010
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	20001ae4 	.word	0x20001ae4
 8004acc:	40020030 	.word	0x40020030
 8004ad0:	50000100 	.word	0x50000100
 8004ad4:	48001400 	.word	0x48001400

08004ad8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_CRC_MspInit+0x38>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10b      	bne.n	8004b02 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_CRC_MspInit+0x3c>)
 8004aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <HAL_CRC_MspInit+0x3c>)
 8004af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004af4:	6493      	str	r3, [r2, #72]	; 0x48
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <HAL_CRC_MspInit+0x3c>)
 8004af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40023000 	.word	0x40023000
 8004b14:	40021000 	.word	0x40021000

08004b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b09c      	sub	sp, #112	; 0x70
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b30:	f107 0318 	add.w	r3, r7, #24
 8004b34:	2244      	movs	r2, #68	; 0x44
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f011 fe36 	bl	80167aa <memset>
  if(hi2c->Instance==I2C1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <HAL_I2C_MspInit+0xe4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d154      	bne.n	8004bf2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b48:	2340      	movs	r3, #64	; 0x40
 8004b4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b50:	f107 0318 	add.w	r3, r7, #24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f006 ffc1 	bl	800badc <HAL_RCCEx_PeriphCLKConfig>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004b60:	f7ff fa26 	bl	8003fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b70:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004b82:	f043 0302 	orr.w	r3, r3, #2
 8004b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b9a:	2312      	movs	r3, #18
 8004b9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004baa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bb4:	f004 f980 	bl	8008eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bbe:	2312      	movs	r3, #18
 8004bc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bca:	2304      	movs	r3, #4
 8004bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	480b      	ldr	r0, [pc, #44]	; (8004c04 <HAL_I2C_MspInit+0xec>)
 8004bd6:	f004 f96f 	bl	8008eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_I2C_MspInit+0xe8>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004bf2:	bf00      	nop
 8004bf4:	3770      	adds	r7, #112	; 0x70
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40005400 	.word	0x40005400
 8004c00:	40021000 	.word	0x40021000
 8004c04:	48000400 	.word	0x48000400

08004c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2c      	ldr	r2, [pc, #176]	; (8004cd8 <HAL_SPI_MspInit+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d151      	bne.n	8004cce <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <HAL_SPI_MspInit+0xd4>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	4a2b      	ldr	r2, [pc, #172]	; (8004cdc <HAL_SPI_MspInit+0xd4>)
 8004c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_SPI_MspInit+0xd4>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c42:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <HAL_SPI_MspInit+0xd4>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <HAL_SPI_MspInit+0xd4>)
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4e:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <HAL_SPI_MspInit+0xd4>)
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004c5a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c60:	2302      	movs	r3, #2
 8004c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c6c:	2305      	movs	r3, #5
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	4619      	mov	r1, r3
 8004c76:	481a      	ldr	r0, [pc, #104]	; (8004ce0 <HAL_SPI_MspInit+0xd8>)
 8004c78:	f004 f91e 	bl	8008eb8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_SPI_MspInit+0xe0>)
 8004c80:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004c84:	220d      	movs	r2, #13
 8004c86:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004c96:	2280      	movs	r2, #128	; 0x80
 8004c98:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004cb2:	480c      	ldr	r0, [pc, #48]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004cb4:	f003 fbaa 	bl	800840c <HAL_DMA_Init>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004cbe:	f7ff f977 	bl	8003fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
 8004cc8:	4a06      	ldr	r2, [pc, #24]	; (8004ce4 <HAL_SPI_MspInit+0xdc>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cce:	bf00      	nop
 8004cd0:	3728      	adds	r7, #40	; 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40003800 	.word	0x40003800
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	48000400 	.word	0x48000400
 8004ce4:	20001c20 	.word	0x20001c20
 8004ce8:	40020008 	.word	0x40020008

08004cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <HAL_TIM_PWM_MspInit+0x98>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12c      	bne.n	8004d58 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_TIM_PWM_MspInit+0x9c>)
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <HAL_TIM_PWM_MspInit+0x9c>)
 8004d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d08:	6613      	str	r3, [r2, #96]	; 0x60
 8004d0a:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <HAL_TIM_PWM_MspInit+0x9c>)
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2100      	movs	r1, #0
 8004d1a:	2018      	movs	r0, #24
 8004d1c:	f003 f93b 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004d20:	2018      	movs	r0, #24
 8004d22:	f003 f952 	bl	8007fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2019      	movs	r0, #25
 8004d2c:	f003 f933 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d30:	2019      	movs	r0, #25
 8004d32:	f003 f94a 	bl	8007fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	2100      	movs	r1, #0
 8004d3a:	201a      	movs	r0, #26
 8004d3c:	f003 f92b 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004d40:	201a      	movs	r0, #26
 8004d42:	f003 f942 	bl	8007fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2100      	movs	r1, #0
 8004d4a:	201b      	movs	r0, #27
 8004d4c:	f003 f923 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004d50:	201b      	movs	r0, #27
 8004d52:	f003 f93a 	bl	8007fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d56:	e010      	b.n	8004d7a <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <HAL_TIM_PWM_MspInit+0xa0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10b      	bne.n	8004d7a <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_TIM_PWM_MspInit+0x9c>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <HAL_TIM_PWM_MspInit+0x9c>)
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_TIM_PWM_MspInit+0x9c>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40000800 	.word	0x40000800

08004d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d144      	bne.n	8004e3c <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004de2:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4619      	mov	r1, r3
 8004e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e18:	f004 f84e 	bl	8008eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e20:	2302      	movs	r3, #2
 8004e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	4619      	mov	r1, r3
 8004e36:	4804      	ldr	r0, [pc, #16]	; (8004e48 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004e38:	f004 f83e 	bl	8008eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e3c:	bf00      	nop
 8004e3e:	3728      	adds	r7, #40	; 0x28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	48000400 	.word	0x48000400

08004e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a34      	ldr	r2, [pc, #208]	; (8004f2c <HAL_TIM_Base_MspInit+0xe0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d114      	bne.n	8004e88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e5e:	4b34      	ldr	r3, [pc, #208]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004e64:	f043 0310 	orr.w	r3, r3, #16
 8004e68:	6593      	str	r3, [r2, #88]	; 0x58
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004e76:	2200      	movs	r2, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	2036      	movs	r0, #54	; 0x36
 8004e7c:	f003 f88b 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e80:	2036      	movs	r0, #54	; 0x36
 8004e82:	f003 f8a2 	bl	8007fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004e86:	e04c      	b.n	8004f22 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a29      	ldr	r2, [pc, #164]	; (8004f34 <HAL_TIM_Base_MspInit+0xe8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d114      	bne.n	8004ebc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e92:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004e98:	f043 0320 	orr.w	r3, r3, #32
 8004e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	2037      	movs	r0, #55	; 0x37
 8004eb0:	f003 f871 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004eb4:	2037      	movs	r0, #55	; 0x37
 8004eb6:	f003 f888 	bl	8007fca <HAL_NVIC_EnableIRQ>
}
 8004eba:	e032      	b.n	8004f22 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <HAL_TIM_Base_MspInit+0xec>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d114      	bne.n	8004ef0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	2019      	movs	r0, #25
 8004ee4:	f003 f857 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ee8:	2019      	movs	r0, #25
 8004eea:	f003 f86e 	bl	8007fca <HAL_NVIC_EnableIRQ>
}
 8004eee:	e018      	b.n	8004f22 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <HAL_TIM_Base_MspInit+0xf0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f04:	6613      	str	r3, [r2, #96]	; 0x60
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_TIM_Base_MspInit+0xe4>)
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	201a      	movs	r0, #26
 8004f18:	f003 f83d 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004f1c:	201a      	movs	r0, #26
 8004f1e:	f003 f854 	bl	8007fca <HAL_NVIC_EnableIRQ>
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40001000 	.word	0x40001000
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40001400 	.word	0x40001400
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <HAL_TIM_OnePulse_MspInit+0x38>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10b      	bne.n	8004f6a <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40013400 	.word	0x40013400
 8004f7c:	40021000 	.word	0x40021000

08004f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a22      	ldr	r2, [pc, #136]	; (8005028 <HAL_TIM_MspPostInit+0xa8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d11c      	bne.n	8004fdc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <HAL_TIM_MspPostInit+0xac>)
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	4a21      	ldr	r2, [pc, #132]	; (800502c <HAL_TIM_MspPostInit+0xac>)
 8004fa8:	f043 0320 	orr.w	r3, r3, #32
 8004fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fae:	4b1f      	ldr	r3, [pc, #124]	; (800502c <HAL_TIM_MspPostInit+0xac>)
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004fca:	2306      	movs	r3, #6
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4816      	ldr	r0, [pc, #88]	; (8005030 <HAL_TIM_MspPostInit+0xb0>)
 8004fd6:	f003 ff6f 	bl	8008eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004fda:	e020      	b.n	800501e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <HAL_TIM_MspPostInit+0xb4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d11b      	bne.n	800501e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_TIM_MspPostInit+0xac>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <HAL_TIM_MspPostInit+0xac>)
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <HAL_TIM_MspPostInit+0xac>)
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005002:	2302      	movs	r3, #2
 8005004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800500e:	2302      	movs	r3, #2
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	4619      	mov	r1, r3
 8005018:	4807      	ldr	r0, [pc, #28]	; (8005038 <HAL_TIM_MspPostInit+0xb8>)
 800501a:	f003 ff4d 	bl	8008eb8 <HAL_GPIO_Init>
}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40021000 	.word	0x40021000
 8005030:	48001400 	.word	0x48001400
 8005034:	40000800 	.word	0x40000800
 8005038:	48000400 	.word	0x48000400

0800503c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b09a      	sub	sp, #104	; 0x68
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	2244      	movs	r2, #68	; 0x44
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f011 fba4 	bl	80167aa <memset>
  if(huart->Instance==USART1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_UART_MspInit+0xa8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d137      	bne.n	80050dc <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800506c:	2301      	movs	r3, #1
 800506e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005074:	f107 0310 	add.w	r3, r7, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f006 fd2f 	bl	800badc <HAL_RCCEx_PeriphCLKConfig>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005084:	f7fe ff94 	bl	8003fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_UART_MspInit+0xac>)
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_UART_MspInit+0xac>)
 800508e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005092:	6613      	str	r3, [r2, #96]	; 0x60
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_UART_MspInit+0xac>)
 8005096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <HAL_UART_MspInit+0xac>)
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <HAL_UART_MspInit+0xac>)
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <HAL_UART_MspInit+0xac>)
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050bc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050be:	2302      	movs	r3, #2
 80050c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c6:	2300      	movs	r3, #0
 80050c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050ca:	2307      	movs	r3, #7
 80050cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80050d2:	4619      	mov	r1, r3
 80050d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d8:	f003 feee 	bl	8008eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80050dc:	bf00      	nop
 80050de:	3768      	adds	r7, #104	; 0x68
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40021000 	.word	0x40021000

080050ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050f0:	e7fe      	b.n	80050f0 <NMI_Handler+0x4>

080050f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050f6:	e7fe      	b.n	80050f6 <HardFault_Handler+0x4>

080050f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050fc:	e7fe      	b.n	80050fc <MemManage_Handler+0x4>

080050fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005102:	e7fe      	b.n	8005102 <BusFault_Handler+0x4>

08005104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005108:	e7fe      	b.n	8005108 <UsageFault_Handler+0x4>

0800510a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800510a:	b480      	push	{r7}
 800510c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005138:	f000 fdc6 	bl	8005cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005144:	4802      	ldr	r0, [pc, #8]	; (8005150 <DMA1_Channel1_IRQHandler+0x10>)
 8005146:	f003 fadd 	bl	8008704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20001c20 	.word	0x20001c20

08005154 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005158:	4802      	ldr	r0, [pc, #8]	; (8005164 <DMA1_Channel3_IRQHandler+0x10>)
 800515a:	f003 fad3 	bl	8008704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20001ae4 	.word	0x20001ae4

08005168 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800516c:	4803      	ldr	r0, [pc, #12]	; (800517c <ADC1_2_IRQHandler+0x14>)
 800516e:	f001 fc4f 	bl	8006a10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005172:	4803      	ldr	r0, [pc, #12]	; (8005180 <ADC1_2_IRQHandler+0x18>)
 8005174:	f001 fc4c 	bl	8006a10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005178:	bf00      	nop
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20001a0c 	.word	0x20001a0c
 8005180:	20001a78 	.word	0x20001a78

08005184 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005188:	4802      	ldr	r0, [pc, #8]	; (8005194 <USB_LP_IRQHandler+0x10>)
 800518a:	f004 fa81 	bl	8009690 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20002d80 	.word	0x20002d80

08005198 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 800519c:	2020      	movs	r0, #32
 800519e:	f004 f83d 	bl	800921c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 80051a2:	2080      	movs	r0, #128	; 0x80
 80051a4:	f004 f83a 	bl	800921c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 80051a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80051ac:	f004 f836 	bl	800921c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80051b0:	bf00      	nop
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80051b8:	4802      	ldr	r0, [pc, #8]	; (80051c4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80051ba:	f008 f8af 	bl	800d31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20001c80 	.word	0x20001c80

080051c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80051cc:	4803      	ldr	r0, [pc, #12]	; (80051dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80051ce:	f008 f8a5 	bl	800d31c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80051d2:	4803      	ldr	r0, [pc, #12]	; (80051e0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80051d4:	f008 f8a2 	bl	800d31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80051d8:	bf00      	nop
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20001c80 	.word	0x20001c80
 80051e0:	20001e48 	.word	0x20001e48

080051e4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80051ea:	f008 f897 	bl	800d31c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80051ee:	4803      	ldr	r0, [pc, #12]	; (80051fc <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80051f0:	f008 f894 	bl	800d31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80051f4:	bf00      	nop
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20001c80 	.word	0x20001c80
 80051fc:	20001e94 	.word	0x20001e94

08005200 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005204:	4802      	ldr	r0, [pc, #8]	; (8005210 <TIM1_CC_IRQHandler+0x10>)
 8005206:	f008 f889 	bl	800d31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20001c80 	.word	0x20001c80

08005214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <TIM6_DAC_IRQHandler+0x10>)
 800521a:	f008 f87f 	bl	800d31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20001d64 	.word	0x20001d64

08005228 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <TIM7_IRQHandler+0x10>)
 800522e:	f008 f875 	bl	800d31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20001db0 	.word	0x20001db0

0800523c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return 1;
 8005240:	2301      	movs	r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <_kill>:

int _kill(int pid, int sig)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005256:	f011 fafb 	bl	8016850 <__errno>
 800525a:	4603      	mov	r3, r0
 800525c:	2216      	movs	r2, #22
 800525e:	601a      	str	r2, [r3, #0]
  return -1;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <_exit>:

void _exit (int status)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005274:	f04f 31ff 	mov.w	r1, #4294967295
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ffe7 	bl	800524c <_kill>
  while (1) {}    /* Make sure we hang here */
 800527e:	e7fe      	b.n	800527e <_exit+0x12>

08005280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e00a      	b.n	80052a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005292:	f3af 8000 	nop.w
 8005296:	4601      	mov	r1, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	60ba      	str	r2, [r7, #8]
 800529e:	b2ca      	uxtb	r2, r1
 80052a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	3301      	adds	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	dbf0      	blt.n	8005292 <_read+0x12>
  }

  return len;
 80052b0:	687b      	ldr	r3, [r7, #4]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e009      	b.n	80052e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	60ba      	str	r2, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	3301      	adds	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	dbf1      	blt.n	80052cc <_write+0x12>
  }
  return len;
 80052e8:	687b      	ldr	r3, [r7, #4]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_close>:

int _close(int file)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80052fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800531a:	605a      	str	r2, [r3, #4]
  return 0;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <_isatty>:

int _isatty(int file)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005332:	2301      	movs	r3, #1
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <_sbrk+0x5c>)
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <_sbrk+0x60>)
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005370:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <_sbrk+0x64>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <_sbrk+0x64>)
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <_sbrk+0x68>)
 800537c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <_sbrk+0x64>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d207      	bcs.n	800539c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800538c:	f011 fa60 	bl	8016850 <__errno>
 8005390:	4603      	mov	r3, r0
 8005392:	220c      	movs	r2, #12
 8005394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	e009      	b.n	80053b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <_sbrk+0x64>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <_sbrk+0x64>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4413      	add	r3, r2
 80053aa:	4a05      	ldr	r2, [pc, #20]	; (80053c0 <_sbrk+0x64>)
 80053ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053ae:	68fb      	ldr	r3, [r7, #12]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20008000 	.word	0x20008000
 80053bc:	00000400 	.word	0x00000400
 80053c0:	20002014 	.word	0x20002014
 80053c4:	200033c8 	.word	0x200033c8

080053c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <SystemInit+0x20>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <SystemInit+0x20>)
 80053d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	e000ed00 	.word	0xe000ed00

080053ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053ec:	480d      	ldr	r0, [pc, #52]	; (8005424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80053f0:	f7ff ffea 	bl	80053c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053f4:	480c      	ldr	r0, [pc, #48]	; (8005428 <LoopForever+0x6>)
  ldr r1, =_edata
 80053f6:	490d      	ldr	r1, [pc, #52]	; (800542c <LoopForever+0xa>)
  ldr r2, =_sidata
 80053f8:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <LoopForever+0xe>)
  movs r3, #0
 80053fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80053fc:	e002      	b.n	8005404 <LoopCopyDataInit>

080053fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005402:	3304      	adds	r3, #4

08005404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005408:	d3f9      	bcc.n	80053fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800540c:	4c0a      	ldr	r4, [pc, #40]	; (8005438 <LoopForever+0x16>)
  movs r3, #0
 800540e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005410:	e001      	b.n	8005416 <LoopFillZerobss>

08005412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005414:	3204      	adds	r2, #4

08005416 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005418:	d3fb      	bcc.n	8005412 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800541a:	f011 fa1f 	bl	801685c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800541e:	f7fd fdff 	bl	8003020 <main>

08005422 <LoopForever>:

LoopForever:
    b LoopForever
 8005422:	e7fe      	b.n	8005422 <LoopForever>
  ldr   r0, =_estack
 8005424:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800542c:	20000540 	.word	0x20000540
  ldr r2, =_sidata
 8005430:	0801d0e8 	.word	0x0801d0e8
  ldr r2, =_sbss
 8005434:	20000540 	.word	0x20000540
  ldr r4, =_ebss
 8005438:	200033c8 	.word	0x200033c8

0800543c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800543c:	e7fe      	b.n	800543c <COMP1_2_3_IRQHandler>
	...

08005440 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <setSPI_Size+0x54>)
 800544c:	f993 3000 	ldrsb.w	r3, [r3]
 8005450:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d017      	beq.n	8005488 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <setSPI_Size+0x58>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <setSPI_Size+0x58>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005466:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <setSPI_Size+0x54>)
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800546e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d104      	bne.n	8005480 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <setSPI_Size+0x58>)
 8005478:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800547c:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800547e:	e003      	b.n	8005488 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <setSPI_Size+0x58>)
 8005482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005486:	60da      	str	r2, [r3, #12]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	200001c8 	.word	0x200001c8
 8005498:	20001bbc 	.word	0x20001bbc

0800549c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	460a      	mov	r2, r1
 80054a6:	71fb      	strb	r3, [r7, #7]
 80054a8:	4613      	mov	r3, r2
 80054aa:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80054ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ffc5 	bl	8005440 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80054b6:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <setDMAMemMode+0x10c>)
 80054b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80054bc:	461a      	mov	r2, r3
 80054be:	79bb      	ldrb	r3, [r7, #6]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d106      	bne.n	80054d2 <setDMAMemMode+0x36>
 80054c4:	4b38      	ldr	r3, [pc, #224]	; (80055a8 <setDMAMemMode+0x10c>)
 80054c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80054ca:	461a      	mov	r2, r3
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d066      	beq.n	80055a0 <setDMAMemMode+0x104>
    config.dma_sz =size;
 80054d2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80054d6:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <setDMAMemMode+0x10c>)
 80054d8:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80054da:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80054de:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <setDMAMemMode+0x10c>)
 80054e0:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80054e2:	4b32      	ldr	r3, [pc, #200]	; (80055ac <setDMAMemMode+0x110>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b30      	ldr	r3, [pc, #192]	; (80055ac <setDMAMemMode+0x110>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 80054f6:	bf00      	nop
 80054f8:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <setDMAMemMode+0x110>)
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f7      	bne.n	80054f8 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10e      	bne.n	800552c <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800550e:	4b27      	ldr	r3, [pc, #156]	; (80055ac <setDMAMemMode+0x110>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	2280      	movs	r2, #128	; 0x80
 8005514:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8005516:	4b25      	ldr	r3, [pc, #148]	; (80055ac <setDMAMemMode+0x110>)
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <setDMAMemMode+0x110>)
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e00d      	b.n	8005548 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <setDMAMemMode+0x110>)
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2200      	movs	r2, #0
 8005532:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <setDMAMemMode+0x110>)
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <setDMAMemMode+0x110>)
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005546:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8005548:	79bb      	ldrb	r3, [r7, #6]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d116      	bne.n	800557c <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <setDMAMemMode+0x110>)
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005556:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <setDMAMemMode+0x110>)
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005560:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <setDMAMemMode+0x110>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <setDMAMemMode+0x110>)
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8005578:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800557a:	e011      	b.n	80055a0 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <setDMAMemMode+0x110>)
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	2200      	movs	r2, #0
 8005582:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005584:	4b09      	ldr	r3, [pc, #36]	; (80055ac <setDMAMemMode+0x110>)
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	2200      	movs	r2, #0
 800558a:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <setDMAMemMode+0x110>)
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <setDMAMemMode+0x110>)
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	200001c8 	.word	0x200001c8
 80055ac:	20001bbc 	.word	0x20001bbc

080055b0 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80055bc:	2000      	movs	r0, #0
 80055be:	f7ff ff3f 	bl	8005440 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80055c2:	2200      	movs	r2, #0
 80055c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055c8:	4815      	ldr	r0, [pc, #84]	; (8005620 <LCD_WriteCommand+0x70>)
 80055ca:	f003 fe0f 	bl	80091ec <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80055ce:	2200      	movs	r2, #0
 80055d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055d4:	4812      	ldr	r0, [pc, #72]	; (8005620 <LCD_WriteCommand+0x70>)
 80055d6:	f003 fe09 	bl	80091ec <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80055da:	f04f 33ff 	mov.w	r3, #4294967295
 80055de:	2201      	movs	r2, #1
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4810      	ldr	r0, [pc, #64]	; (8005624 <LCD_WriteCommand+0x74>)
 80055e4:	f006 fd15 	bl	800c012 <HAL_SPI_Transmit>
  if(argc){
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00e      	beq.n	800560c <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80055ee:	2201      	movs	r2, #1
 80055f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055f4:	480a      	ldr	r0, [pc, #40]	; (8005620 <LCD_WriteCommand+0x70>)
 80055f6:	f003 fdf9 	bl	80091ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	1c59      	adds	r1, r3, #1
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	b29a      	uxth	r2, r3
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	4807      	ldr	r0, [pc, #28]	; (8005624 <LCD_WriteCommand+0x74>)
 8005608:	f006 fd03 	bl	800c012 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800560c:	2201      	movs	r2, #1
 800560e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005612:	4803      	ldr	r0, [pc, #12]	; (8005620 <LCD_WriteCommand+0x70>)
 8005614:	f003 fdea 	bl	80091ec <HAL_GPIO_WritePin>
#endif
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	48000400 	.word	0x48000400
 8005624:	20001bbc 	.word	0x20001bbc

08005628 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005632:	2201      	movs	r2, #1
 8005634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005638:	4830      	ldr	r0, [pc, #192]	; (80056fc <LCD_WriteData+0xd4>)
 800563a:	f003 fdd7 	bl	80091ec <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005644:	482d      	ldr	r0, [pc, #180]	; (80056fc <LCD_WriteData+0xd4>)
 8005646:	f003 fdd1 	bl	80091ec <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800564a:	e049      	b.n	80056e0 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005652:	4293      	cmp	r3, r2
 8005654:	bf28      	it	cs
 8005656:	4613      	movcs	r3, r2
 8005658:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b20      	cmp	r3, #32
 800565e:	d924      	bls.n	80056aa <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8005660:	89fb      	ldrh	r3, [r7, #14]
 8005662:	461a      	mov	r2, r3
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4826      	ldr	r0, [pc, #152]	; (8005700 <LCD_WriteData+0xd8>)
 8005668:	f006 fe48 	bl	800c2fc <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 800566c:	bf00      	nop
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <LCD_WriteData+0xd8>)
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	4618      	mov	r0, r3
 8005674:	f003 f8f5 	bl	8008862 <HAL_DMA_GetState>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d1f7      	bne.n	800566e <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800567e:	4b21      	ldr	r3, [pc, #132]	; (8005704 <LCD_WriteData+0xdc>)
 8005680:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d127      	bne.n	80056d8 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8005688:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <LCD_WriteData+0xdc>)
 800568a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d104      	bne.n	800569c <LCD_WriteData+0x74>
          buff += chunk_size;
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4413      	add	r3, r2
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	e01d      	b.n	80056d8 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 800569c:	89fb      	ldrh	r3, [r7, #14]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	461a      	mov	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	e016      	b.n	80056d8 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80056aa:	89fa      	ldrh	r2, [r7, #14]
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4813      	ldr	r0, [pc, #76]	; (8005700 <LCD_WriteData+0xd8>)
 80056b4:	f006 fcad 	bl	800c012 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <LCD_WriteData+0xdc>)
 80056ba:	f993 3000 	ldrsb.w	r3, [r3]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d104      	bne.n	80056cc <LCD_WriteData+0xa4>
        buff += chunk_size;
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e005      	b.n	80056d8 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80056cc:	89fb      	ldrh	r3, [r7, #14]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1b2      	bne.n	800564c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80056e6:	2201      	movs	r2, #1
 80056e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056ec:	4803      	ldr	r0, [pc, #12]	; (80056fc <LCD_WriteData+0xd4>)
 80056ee:	f003 fd7d 	bl	80091ec <HAL_GPIO_WritePin>
#endif
}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	48000400 	.word	0x48000400
 8005700:	20001bbc 	.word	0x20001bbc
 8005704:	200001c8 	.word	0x200001c8

08005708 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8005708:	b590      	push	{r4, r7, lr}
 800570a:	b08b      	sub	sp, #44	; 0x2c
 800570c:	af00      	add	r7, sp, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	80fb      	strh	r3, [r7, #6]
 800571a:	4603      	mov	r3, r0
 800571c:	80bb      	strh	r3, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	807b      	strh	r3, [r7, #2]
 8005722:	4613      	mov	r3, r2
 8005724:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	84fb      	strh	r3, [r7, #38]	; 0x26
 800572a:	887b      	ldrh	r3, [r7, #2]
 800572c:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800572e:	88bb      	ldrh	r3, [r7, #4]
 8005730:	847b      	strh	r3, [r7, #34]	; 0x22
 8005732:	883b      	ldrh	r3, [r7, #0]
 8005734:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005736:	232a      	movs	r3, #42	; 0x2a
 8005738:	763b      	strb	r3, [r7, #24]
 800573a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800573e:	121b      	asrs	r3, r3, #8
 8005740:	b21b      	sxth	r3, r3
 8005742:	b2db      	uxtb	r3, r3
 8005744:	767b      	strb	r3, [r7, #25]
 8005746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005748:	b2db      	uxtb	r3, r3
 800574a:	76bb      	strb	r3, [r7, #26]
 800574c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005750:	121b      	asrs	r3, r3, #8
 8005752:	b21b      	sxth	r3, r3
 8005754:	b2db      	uxtb	r3, r3
 8005756:	76fb      	strb	r3, [r7, #27]
 8005758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800575a:	b2db      	uxtb	r3, r3
 800575c:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800575e:	f107 0318 	add.w	r3, r7, #24
 8005762:	2104      	movs	r1, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ff23 	bl	80055b0 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800576a:	232b      	movs	r3, #43	; 0x2b
 800576c:	743b      	strb	r3, [r7, #16]
 800576e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005772:	121b      	asrs	r3, r3, #8
 8005774:	b21b      	sxth	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	747b      	strb	r3, [r7, #17]
 800577a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800577c:	b2db      	uxtb	r3, r3
 800577e:	74bb      	strb	r3, [r7, #18]
 8005780:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005784:	121b      	asrs	r3, r3, #8
 8005786:	b21b      	sxth	r3, r3
 8005788:	b2db      	uxtb	r3, r3
 800578a:	74fb      	strb	r3, [r7, #19]
 800578c:	8c3b      	ldrh	r3, [r7, #32]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005792:	f107 0310 	add.w	r3, r7, #16
 8005796:	2104      	movs	r1, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff ff09 	bl	80055b0 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800579e:	232c      	movs	r3, #44	; 0x2c
 80057a0:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80057a2:	f107 030c 	add.w	r3, r7, #12
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff01 	bl	80055b0 <LCD_WriteCommand>
  }
}
 80057ae:	bf00      	nop
 80057b0:	372c      	adds	r7, #44	; 0x2c
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}
	...

080057b8 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
 80057c2:	460b      	mov	r3, r1
 80057c4:	80bb      	strh	r3, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80057ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db39      	blt.n	8005846 <LCD_DrawPixel+0x8e>
 80057d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057d6:	2bef      	cmp	r3, #239	; 0xef
 80057d8:	dc35      	bgt.n	8005846 <LCD_DrawPixel+0x8e>
 80057da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	db31      	blt.n	8005846 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80057e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80057ea:	da2c      	bge.n	8005846 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	733b      	strb	r3, [r7, #12]
 80057f6:	887b      	ldrh	r3, [r7, #2]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80057fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005800:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005804:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005808:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800580c:	f7ff ff7c 	bl	8005708 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005810:	2201      	movs	r2, #1
 8005812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005816:	480e      	ldr	r0, [pc, #56]	; (8005850 <LCD_DrawPixel+0x98>)
 8005818:	f003 fce8 	bl	80091ec <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800581c:	2200      	movs	r2, #0
 800581e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005822:	480b      	ldr	r0, [pc, #44]	; (8005850 <LCD_DrawPixel+0x98>)
 8005824:	f003 fce2 	bl	80091ec <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005828:	f107 010c 	add.w	r1, r7, #12
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	2202      	movs	r2, #2
 8005832:	4808      	ldr	r0, [pc, #32]	; (8005854 <LCD_DrawPixel+0x9c>)
 8005834:	f006 fbed 	bl	800c012 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005838:	2201      	movs	r2, #1
 800583a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800583e:	4804      	ldr	r0, [pc, #16]	; (8005850 <LCD_DrawPixel+0x98>)
 8005840:	f003 fcd4 	bl	80091ec <HAL_GPIO_WritePin>
 8005844:	e000      	b.n	8005848 <LCD_DrawPixel+0x90>
    return;
 8005846:	bf00      	nop
#endif
}
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	48000400 	.word	0x48000400
 8005854:	20001bbc 	.word	0x20001bbc

08005858 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005858:	b580      	push	{r7, lr}
 800585a:	b094      	sub	sp, #80	; 0x50
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b20      	cmp	r3, #32
 8005868:	d905      	bls.n	8005876 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800586a:	1cbb      	adds	r3, r7, #2
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff feda 	bl	8005628 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8005874:	e026      	b.n	80058c4 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005876:	2300      	movs	r3, #0
 8005878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587a:	e009      	b.n	8005890 <LCD_FillPixels+0x38>
      fill[t]=color;
 800587c:	887a      	ldrh	r2, [r7, #2]
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	3350      	adds	r3, #80	; 0x50
 8005884:	443b      	add	r3, r7
 8005886:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800588a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588c:	3301      	adds	r3, #1
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b20      	cmp	r3, #32
 8005894:	bf28      	it	cs
 8005896:	2320      	movcs	r3, #32
 8005898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800589a:	429a      	cmp	r2, r3
 800589c:	d3ee      	bcc.n	800587c <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 800589e:	e00e      	b.n	80058be <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	bf28      	it	cs
 80058a6:	2320      	movcs	r3, #32
 80058a8:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff feb9 	bl	8005628 <LCD_WriteData>
      pixels-=sz;
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1ed      	bne.n	80058a0 <LCD_FillPixels+0x48>
}
 80058c4:	bf00      	nop
 80058c6:	3750      	adds	r7, #80	; 0x50
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80058cc:	b590      	push	{r4, r7, lr}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	461a      	mov	r2, r3
 80058da:	4623      	mov	r3, r4
 80058dc:	80fb      	strh	r3, [r7, #6]
 80058de:	4603      	mov	r3, r0
 80058e0:	80bb      	strh	r3, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	807b      	strh	r3, [r7, #2]
 80058e6:	4613      	mov	r3, r2
 80058e8:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80058ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d105      	bne.n	8005900 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80058f4:	2100      	movs	r1, #0
 80058f6:	2001      	movs	r0, #1
 80058f8:	f7ff fdd0 	bl	800549c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e014      	b.n	800592a <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8005900:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005904:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005908:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800590c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005910:	f7ff fefa 	bl	8005708 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005914:	2101      	movs	r1, #1
 8005916:	2000      	movs	r0, #0
 8005918:	f7ff fdc0 	bl	800549c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800591c:	2201      	movs	r2, #1
 800591e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005922:	4804      	ldr	r0, [pc, #16]	; (8005934 <LCD_FillArea+0x68>)
 8005924:	f003 fc62 	bl	80091ec <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <LCD_FillArea+0x6c>)
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	bf00      	nop
 8005934:	48000400 	.word	0x48000400
 8005938:	08005859 	.word	0x08005859

0800593c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	4611      	mov	r1, r2
 8005948:	461a      	mov	r2, r3
 800594a:	4623      	mov	r3, r4
 800594c:	80fb      	strh	r3, [r7, #6]
 800594e:	4603      	mov	r3, r0
 8005950:	80bb      	strh	r3, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	807b      	strh	r3, [r7, #2]
 8005956:	4613      	mov	r3, r2
 8005958:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800595a:	887a      	ldrh	r2, [r7, #2]
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	3301      	adds	r3, #1
 8005962:	4619      	mov	r1, r3
 8005964:	883a      	ldrh	r2, [r7, #0]
 8005966:	88bb      	ldrh	r3, [r7, #4]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	3301      	adds	r3, #1
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8005972:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005976:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800597a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800597e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005982:	f7ff fec1 	bl	8005708 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005986:	2101      	movs	r1, #1
 8005988:	2000      	movs	r0, #0
 800598a:	f7ff fd87 	bl	800549c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800598e:	8c3b      	ldrh	r3, [r7, #32]
 8005990:	4619      	mov	r1, r3
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff ff60 	bl	8005858 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005998:	2100      	movs	r1, #0
 800599a:	2001      	movs	r0, #1
 800599c:	f7ff fd7e 	bl	800549c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd90      	pop	{r4, r7, pc}

080059aa <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80059aa:	b590      	push	{r4, r7, lr}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	4603      	mov	r3, r0
 80059b2:	603a      	str	r2, [r7, #0]
 80059b4:	80fb      	strh	r3, [r7, #6]
 80059b6:	460b      	mov	r3, r1
 80059b8:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	889b      	ldrh	r3, [r3, #4]
 80059be:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	88db      	ldrh	r3, [r3, #6]
 80059c4:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2bef      	cmp	r3, #239	; 0xef
 80059ca:	d839      	bhi.n	8005a40 <LCD_DrawImage+0x96>
 80059cc:	88bb      	ldrh	r3, [r7, #4]
 80059ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059d2:	d235      	bcs.n	8005a40 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	4413      	add	r3, r2
 80059da:	2bf0      	cmp	r3, #240	; 0xf0
 80059dc:	dc32      	bgt.n	8005a44 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80059de:	88ba      	ldrh	r2, [r7, #4]
 80059e0:	89bb      	ldrh	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059e8:	dc2e      	bgt.n	8005a48 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	7a1b      	ldrb	r3, [r3, #8]
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d12c      	bne.n	8005a4c <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80059f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80059f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	89fb      	ldrh	r3, [r7, #14]
 80059fe:	4413      	add	r3, r2
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	b21c      	sxth	r4, r3
 8005a08:	88ba      	ldrh	r2, [r7, #4]
 8005a0a:	89bb      	ldrh	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	4622      	mov	r2, r4
 8005a18:	f7ff fe76 	bl	8005708 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7ff fd3c 	bl	800549c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	89fb      	ldrh	r3, [r7, #14]
 8005a2a:	89ba      	ldrh	r2, [r7, #12]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7ff fdf9 	bl	8005628 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005a36:	2100      	movs	r1, #0
 8005a38:	2001      	movs	r0, #1
 8005a3a:	f7ff fd2f 	bl	800549c <setDMAMemMode>
 8005a3e:	e006      	b.n	8005a4e <LCD_DrawImage+0xa4>
    return;
 8005a40:	bf00      	nop
 8005a42:	e004      	b.n	8005a4e <LCD_DrawImage+0xa4>
    return;
 8005a44:	bf00      	nop
 8005a46:	e002      	b.n	8005a4e <LCD_DrawImage+0xa4>
    return;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <LCD_DrawImage+0xa4>
    return;
 8005a4c:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}

08005a54 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4623      	mov	r3, r4
 8005a64:	80fb      	strh	r3, [r7, #6]
 8005a66:	4603      	mov	r3, r0
 8005a68:	80bb      	strh	r3, [r7, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	807b      	strh	r3, [r7, #2]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d10a      	bne.n	8005a90 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8005a7a:	88ba      	ldrh	r2, [r7, #4]
 8005a7c:	883b      	ldrh	r3, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d918      	bls.n	8005ab4 <LCD_DrawLine+0x60>
 8005a82:	88bb      	ldrh	r3, [r7, #4]
 8005a84:	81bb      	strh	r3, [r7, #12]
 8005a86:	883b      	ldrh	r3, [r7, #0]
 8005a88:	80bb      	strh	r3, [r7, #4]
 8005a8a:	89bb      	ldrh	r3, [r7, #12]
 8005a8c:	803b      	strh	r3, [r7, #0]
 8005a8e:	e011      	b.n	8005ab4 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8005a90:	88ba      	ldrh	r2, [r7, #4]
 8005a92:	883b      	ldrh	r3, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d10a      	bne.n	8005aae <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d909      	bls.n	8005ab4 <LCD_DrawLine+0x60>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	81fb      	strh	r3, [r7, #14]
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	80fb      	strh	r3, [r7, #6]
 8005aa8:	89fb      	ldrh	r3, [r7, #14]
 8005aaa:	807b      	strh	r3, [r7, #2]
 8005aac:	e002      	b.n	8005ab4 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	e009      	b.n	8005ac8 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005ab4:	883c      	ldrh	r4, [r7, #0]
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	88b9      	ldrh	r1, [r7, #4]
 8005aba:	88f8      	ldrh	r0, [r7, #6]
 8005abc:	8c3b      	ldrh	r3, [r7, #32]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	f7ff ff3b 	bl	800593c <LCD_Fill>
  return UG_RESULT_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd90      	pop	{r4, r7, pc}

08005ad0 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60ba      	str	r2, [r7, #8]
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	4603      	mov	r3, r0
 8005adc:	81fb      	strh	r3, [r7, #14]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f00b ff36 	bl	8011954 <UG_FontSelect>
  UG_SetForecolor(color);
 8005ae8:	8b3b      	ldrh	r3, [r7, #24]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f00c fa7e 	bl	8011fec <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8005af0:	8bbb      	ldrh	r3, [r7, #28]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f00c fa8c 	bl	8012010 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005af8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005afc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f00c f9da 	bl	8011ebc <UG_PutString>
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <LCD_setPower+0x14>
 8005b20:	2329      	movs	r3, #41	; 0x29
 8005b22:	e000      	b.n	8005b26 <LCD_setPower+0x16>
 8005b24:	2328      	movs	r3, #40	; 0x28
 8005b26:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005b28:	f107 030c 	add.w	r3, r7, #12
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fd3e 	bl	80055b0 <LCD_WriteCommand>
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <LCD_Update>:

static void LCD_Update(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005b40:	2100      	movs	r1, #0
 8005b42:	2001      	movs	r0, #1
 8005b44:	f7ff fcaa 	bl	800549c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005b48:	bf00      	nop
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005b52:	2201      	movs	r2, #1
 8005b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b58:	482a      	ldr	r0, [pc, #168]	; (8005c04 <LCD_init+0xb8>)
 8005b5a:	f003 fb47 	bl	80091ec <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b64:	4827      	ldr	r0, [pc, #156]	; (8005c04 <LCD_init+0xb8>)
 8005b66:	f003 fb41 	bl	80091ec <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	f000 f8ca 	bl	8005d04 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005b70:	2201      	movs	r2, #1
 8005b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b76:	4823      	ldr	r0, [pc, #140]	; (8005c04 <LCD_init+0xb8>)
 8005b78:	f003 fb38 	bl	80091ec <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8005b7c:	20c8      	movs	r0, #200	; 0xc8
 8005b7e:	f000 f8c1 	bl	8005d04 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005b82:	4921      	ldr	r1, [pc, #132]	; (8005c08 <LCD_init+0xbc>)
 8005b84:	4821      	ldr	r0, [pc, #132]	; (8005c0c <LCD_init+0xc0>)
 8005b86:	f00b fe4b 	bl	8011820 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8005b8a:	4921      	ldr	r1, [pc, #132]	; (8005c10 <LCD_init+0xc4>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f00d fad5 	bl	801313c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005b92:	4920      	ldr	r1, [pc, #128]	; (8005c14 <LCD_init+0xc8>)
 8005b94:	2001      	movs	r0, #1
 8005b96:	f00d fad1 	bl	801313c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005b9a:	491f      	ldr	r1, [pc, #124]	; (8005c18 <LCD_init+0xcc>)
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f00d facd 	bl	801313c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005ba2:	491e      	ldr	r1, [pc, #120]	; (8005c1c <LCD_init+0xd0>)
 8005ba4:	2003      	movs	r0, #3
 8005ba6:	f00d fac9 	bl	801313c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005baa:	2000      	movs	r0, #0
 8005bac:	f00c fa42 	bl	8012034 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f00c fa53 	bl	801205c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	80fb      	strh	r3, [r7, #6]
 8005bba:	e013      	b.n	8005be4 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <LCD_init+0xd4>)
 8005bc2:	441a      	add	r2, r3
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	4916      	ldr	r1, [pc, #88]	; (8005c20 <LCD_init+0xd4>)
 8005bc8:	5ccb      	ldrb	r3, [r1, r3]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7ff fcef 	bl	80055b0 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <LCD_init+0xd4>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	4413      	add	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3302      	adds	r3, #2
 8005be2:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b4b      	cmp	r3, #75	; 0x4b
 8005be8:	d9e8      	bls.n	8005bbc <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005bea:	2000      	movs	r0, #0
 8005bec:	f00b fec2 	bl	8011974 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7ff ff8d 	bl	8005b10 <LCD_setPower>
  UG_Update();
 8005bf6:	f00d fac3 	bl	8013180 <UG_Update>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	48000400 	.word	0x48000400
 8005c08:	200001cc 	.word	0x200001cc
 8005c0c:	20002018 	.word	0x20002018
 8005c10:	08005a55 	.word	0x08005a55
 8005c14:	0800593d 	.word	0x0800593d
 8005c18:	080058cd 	.word	0x080058cd
 8005c1c:	080059ab 	.word	0x080059ab
 8005c20:	0801a4f8 	.word	0x0801a4f8

08005c24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c2e:	2003      	movs	r0, #3
 8005c30:	f002 f9a6 	bl	8007f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c34:	200f      	movs	r0, #15
 8005c36:	f000 f80d 	bl	8005c54 <HAL_InitTick>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	71fb      	strb	r3, [r7, #7]
 8005c44:	e001      	b.n	8005c4a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c46:	f7fe fe3f 	bl	80048c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c4a:	79fb      	ldrb	r3, [r7, #7]

}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005c60:	4b16      	ldr	r3, [pc, #88]	; (8005cbc <HAL_InitTick+0x68>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d022      	beq.n	8005cae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <HAL_InitTick+0x6c>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <HAL_InitTick+0x68>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f002 f9b2 	bl	8007fe6 <HAL_SYSTICK_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10f      	bne.n	8005ca8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d809      	bhi.n	8005ca2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	f002 f97e 	bl	8007f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <HAL_InitTick+0x70>)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e007      	b.n	8005cb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
 8005ca6:	e004      	b.n	8005cb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	e001      	b.n	8005cb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	200001dc 	.word	0x200001dc
 8005cc0:	200001c4 	.word	0x200001c4
 8005cc4:	200001d8 	.word	0x200001d8

08005cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_IncTick+0x1c>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_IncTick+0x20>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a03      	ldr	r2, [pc, #12]	; (8005ce4 <HAL_IncTick+0x1c>)
 8005cd8:	6013      	str	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	2000208c 	.word	0x2000208c
 8005ce8:	200001dc 	.word	0x200001dc

08005cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return uwTick;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <HAL_GetTick+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	2000208c 	.word	0x2000208c

08005d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7ff ffee 	bl	8005cec <HAL_GetTick>
 8005d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d004      	beq.n	8005d28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <HAL_Delay+0x40>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d28:	bf00      	nop
 8005d2a:	f7ff ffdf 	bl	8005cec <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d8f7      	bhi.n	8005d2a <HAL_Delay+0x26>
  {
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200001dc 	.word	0x200001dc

08005d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	609a      	str	r2, [r3, #8]
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3360      	adds	r3, #96	; 0x60
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <LL_ADC_SetOffset+0x44>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	03fff000 	.word	0x03fff000

08005df8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3360      	adds	r3, #96	; 0x60
 8005e06:	461a      	mov	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3360      	adds	r3, #96	; 0x60
 8005e34:	461a      	mov	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3360      	adds	r3, #96	; 0x60
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3360      	adds	r3, #96	; 0x60
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	615a      	str	r2, [r3, #20]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3330      	adds	r3, #48	; 0x30
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	4413      	add	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	211f      	movs	r1, #31
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	401a      	ands	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0e9b      	lsrs	r3, r3, #26
 8005f4a:	f003 011f 	and.w	r1, r3, #31
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3314      	adds	r3, #20
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	0e5b      	lsrs	r3, r3, #25
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	4413      	add	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	0d1b      	lsrs	r3, r3, #20
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2107      	movs	r1, #7
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	401a      	ands	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	0d1b      	lsrs	r3, r3, #20
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006000:	43db      	mvns	r3, r3
 8006002:	401a      	ands	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0318 	and.w	r3, r3, #24
 800600a:	4908      	ldr	r1, [pc, #32]	; (800602c <LL_ADC_SetChannelSingleDiff+0x44>)
 800600c:	40d9      	lsrs	r1, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	400b      	ands	r3, r1
 8006012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006016:	431a      	orrs	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	0007ffff 	.word	0x0007ffff

08006030 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 031f 	and.w	r3, r3, #31
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6093      	str	r3, [r2, #8]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800609c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a0:	d101      	bne.n	80060a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80060c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060f0:	d101      	bne.n	80060f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006114:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800613c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006140:	f043 0202 	orr.w	r2, r3, #2
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <LL_ADC_IsEnabled+0x18>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <LL_ADC_IsEnabled+0x1a>
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d101      	bne.n	8006192 <LL_ADC_IsDisableOngoing+0x18>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <LL_ADC_IsDisableOngoing+0x1a>
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061b4:	f043 0204 	orr.w	r2, r3, #4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061dc:	f043 0210 	orr.w	r2, r3, #16
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d101      	bne.n	8006208 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006226:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d101      	bne.n	8006256 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e167      	b.n	800654e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fe fb3f 	bl	8004910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fef1 	bl	800608c <LL_ADC_IsDeepPowerDownEnabled>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fed7 	bl	8006068 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff ff0c 	bl	80060dc <LL_ADC_IsInternalRegulatorEnabled>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d115      	bne.n	80062f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fef0 	bl	80060b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062d4:	4ba0      	ldr	r3, [pc, #640]	; (8006558 <HAL_ADC_Init+0x2f4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	099b      	lsrs	r3, r3, #6
 80062da:	4aa0      	ldr	r2, [pc, #640]	; (800655c <HAL_ADC_Init+0x2f8>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	099b      	lsrs	r3, r3, #6
 80062e2:	3301      	adds	r3, #1
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80062e8:	e002      	b.n	80062f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f9      	bne.n	80062ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff feee 	bl	80060dc <LL_ADC_IsInternalRegulatorEnabled>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10d      	bne.n	8006322 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	f043 0210 	orr.w	r2, r3, #16
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006316:	f043 0201 	orr.w	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff62 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 800632c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b00      	cmp	r3, #0
 8006338:	f040 8100 	bne.w	800653c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 80fc 	bne.w	800653c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006348:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800634c:	f043 0202 	orr.w	r2, r3, #2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fefb 	bl	8006154 <LL_ADC_IsEnabled>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d111      	bne.n	8006388 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006364:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006368:	f7ff fef4 	bl	8006154 <LL_ADC_IsEnabled>
 800636c:	4604      	mov	r4, r0
 800636e:	487c      	ldr	r0, [pc, #496]	; (8006560 <HAL_ADC_Init+0x2fc>)
 8006370:	f7ff fef0 	bl	8006154 <LL_ADC_IsEnabled>
 8006374:	4603      	mov	r3, r0
 8006376:	4323      	orrs	r3, r4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4619      	mov	r1, r3
 8006382:	4878      	ldr	r0, [pc, #480]	; (8006564 <HAL_ADC_Init+0x300>)
 8006384:	f7ff fce0 	bl	8005d48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7f5b      	ldrb	r3, [r3, #29]
 800638c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006392:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006398:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800639e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80063a8:	4313      	orrs	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d106      	bne.n	80063c4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	3b01      	subs	r3, #1
 80063bc:	045b      	lsls	r3, r3, #17
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	4b60      	ldr	r3, [pc, #384]	; (8006568 <HAL_ADC_Init+0x304>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	69b9      	ldr	r1, [r7, #24]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff ff15 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 8006414:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d16d      	bne.n	80064f8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d16a      	bne.n	80064f8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006426:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800642e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006430:	4313      	orrs	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800643e:	f023 0302 	bic.w	r3, r3, #2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	69b9      	ldr	r1, [r7, #24]
 8006448:	430b      	orrs	r3, r1
 800644a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d017      	beq.n	8006484 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006462:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800646c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6911      	ldr	r1, [r2, #16]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	430b      	orrs	r3, r1
 800647e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006482:	e013      	b.n	80064ac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006492:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80064a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d118      	bne.n	80064e8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064c0:	f023 0304 	bic.w	r3, r3, #4
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80064d2:	4311      	orrs	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80064d8:	430a      	orrs	r2, r1
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0201 	orr.w	r2, r2, #1
 80064e4:	611a      	str	r2, [r3, #16]
 80064e6:	e007      	b.n	80064f8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10c      	bne.n	800651a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f023 010f 	bic.w	r1, r3, #15
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
 8006518:	e007      	b.n	800652a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 020f 	bic.w	r2, r2, #15
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	f043 0201 	orr.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	65da      	str	r2, [r3, #92]	; 0x5c
 800653a:	e007      	b.n	800654c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006540:	f043 0210 	orr.w	r2, r3, #16
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800654c:	7ffb      	ldrb	r3, [r7, #31]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3724      	adds	r7, #36	; 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd90      	pop	{r4, r7, pc}
 8006556:	bf00      	nop
 8006558:	200001c4 	.word	0x200001c4
 800655c:	053e2d63 	.word	0x053e2d63
 8006560:	50000100 	.word	0x50000100
 8006564:	50000300 	.word	0x50000300
 8006568:	fff04007 	.word	0xfff04007

0800656c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006574:	4893      	ldr	r0, [pc, #588]	; (80067c4 <HAL_ADC_Start_IT+0x258>)
 8006576:	f7ff fd5b 	bl	8006030 <LL_ADC_GetMultimode>
 800657a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff fe35 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 8113 	bne.w	80067b4 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_ADC_Start_IT+0x30>
 8006598:	2302      	movs	r3, #2
 800659a:	e10e      	b.n	80067ba <HAL_ADC_Start_IT+0x24e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f917 	bl	80077d8 <ADC_Enable>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 80fa 	bne.w	80067aa <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a7e      	ldr	r2, [pc, #504]	; (80067c8 <HAL_ADC_Start_IT+0x25c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d002      	beq.n	80065da <HAL_ADC_Start_IT+0x6e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	e001      	b.n	80065de <HAL_ADC_Start_IT+0x72>
 80065da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d002      	beq.n	80065ec <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006608:	f023 0206 	bic.w	r2, r3, #6
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	661a      	str	r2, [r3, #96]	; 0x60
 8006610:	e002      	b.n	8006618 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	221c      	movs	r2, #28
 800661e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 021c 	bic.w	r2, r2, #28
 8006636:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d108      	bne.n	8006652 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	605a      	str	r2, [r3, #4]
          break;
 8006650:	e008      	b.n	8006664 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0204 	orr.w	r2, r2, #4
 8006660:	605a      	str	r2, [r3, #4]
          break;
 8006662:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d107      	bne.n	800667c <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0210 	orr.w	r2, r2, #16
 800667a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a51      	ldr	r2, [pc, #324]	; (80067c8 <HAL_ADC_Start_IT+0x25c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d002      	beq.n	800668c <HAL_ADC_Start_IT+0x120>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	e001      	b.n	8006690 <HAL_ADC_Start_IT+0x124>
 800668c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	4293      	cmp	r3, r2
 8006696:	d008      	beq.n	80066aa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b05      	cmp	r3, #5
 80066a2:	d002      	beq.n	80066aa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b09      	cmp	r3, #9
 80066a8:	d13a      	bne.n	8006720 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02d      	beq.n	8006714 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d110      	bne.n	80066f2 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0220 	bic.w	r2, r2, #32
 80066de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ee:	605a      	str	r2, [r3, #4]
              break;
 80066f0:	e010      	b.n	8006714 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006700:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0220 	orr.w	r2, r2, #32
 8006710:	605a      	str	r2, [r3, #4]
              break;
 8006712:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fd41 	bl	80061a0 <LL_ADC_REG_StartConversion>
 800671e:	e04b      	b.n	80067b8 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006724:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <HAL_ADC_Start_IT+0x25c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d002      	beq.n	800673c <HAL_ADC_Start_IT+0x1d0>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	e001      	b.n	8006740 <HAL_ADC_Start_IT+0x1d4>
 800673c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006740:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d034      	beq.n	80067b8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006756:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d110      	bne.n	8006788 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0220 	bic.w	r2, r2, #32
 8006774:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006784:	605a      	str	r2, [r3, #4]
              break;
 8006786:	e017      	b.n	80067b8 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006796:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0220 	orr.w	r2, r2, #32
 80067a6:	605a      	str	r2, [r3, #4]
              break;
 80067a8:	e006      	b.n	80067b8 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80067b2:	e001      	b.n	80067b8 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
 80067b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	50000300 	.word	0x50000300
 80067c8:	50000100 	.word	0x50000100

080067cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067d8:	4851      	ldr	r0, [pc, #324]	; (8006920 <HAL_ADC_Start_DMA+0x154>)
 80067da:	f7ff fc29 	bl	8006030 <LL_ADC_GetMultimode>
 80067de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fd03 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 808f 	bne.w	8006910 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_ADC_Start_DMA+0x34>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e08a      	b.n	8006916 <HAL_ADC_Start_DMA+0x14a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b05      	cmp	r3, #5
 8006812:	d002      	beq.n	800681a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b09      	cmp	r3, #9
 8006818:	d173      	bne.n	8006902 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 ffdc 	bl	80077d8 <ADC_Enable>
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d166      	bne.n	80068f8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a38      	ldr	r2, [pc, #224]	; (8006924 <HAL_ADC_Start_DMA+0x158>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d002      	beq.n	800684e <HAL_ADC_Start_DMA+0x82>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	e001      	b.n	8006852 <HAL_ADC_Start_DMA+0x86>
 800684e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	6812      	ldr	r2, [r2, #0]
 8006856:	4293      	cmp	r3, r2
 8006858:	d002      	beq.n	8006860 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d105      	bne.n	800686c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687c:	f023 0206 	bic.w	r2, r3, #6
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	661a      	str	r2, [r3, #96]	; 0x60
 8006884:	e002      	b.n	800688c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006890:	4a25      	ldr	r2, [pc, #148]	; (8006928 <HAL_ADC_Start_DMA+0x15c>)
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	4a24      	ldr	r2, [pc, #144]	; (800692c <HAL_ADC_Start_DMA+0x160>)
 800689a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a0:	4a23      	ldr	r2, [pc, #140]	; (8006930 <HAL_ADC_Start_DMA+0x164>)
 80068a2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	221c      	movs	r2, #28
 80068aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0210 	orr.w	r2, r2, #16
 80068c2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3340      	adds	r3, #64	; 0x40
 80068de:	4619      	mov	r1, r3
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f001 fe3a 	bl	800855c <HAL_DMA_Start_IT>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fc55 	bl	80061a0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80068f6:	e00d      	b.n	8006914 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006900:	e008      	b.n	8006914 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800690e:	e001      	b.n	8006914 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006910:	2302      	movs	r3, #2
 8006912:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	50000300 	.word	0x50000300
 8006924:	50000100 	.word	0x50000100
 8006928:	080079a3 	.word	0x080079a3
 800692c:	08007a7b 	.word	0x08007a7b
 8006930:	08007a97 	.word	0x08007a97

08006934 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_ADC_Stop_DMA+0x16>
 8006946:	2302      	movs	r3, #2
 8006948:	e051      	b.n	80069ee <HAL_ADC_Stop_DMA+0xba>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006952:	2103      	movs	r1, #3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fe83 	bl	8007660 <ADC_ConversionStop>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d13f      	bne.n	80069e4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d10f      	bne.n	80069a2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fe63 	bl	8008652 <HAL_DMA_Abort>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0210 	bic.w	r2, r2, #16
 80069b0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 ff93 	bl	80078e4 <ADC_Disable>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
 80069c2:	e002      	b.n	80069ca <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 ff8d 	bl	80078e4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	f043 0201 	orr.w	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006a18:	2300      	movs	r3, #0
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a2c:	4883      	ldr	r0, [pc, #524]	; (8006c3c <HAL_ADC_IRQHandler+0x22c>)
 8006a2e:	f7ff faff 	bl	8006030 <LL_ADC_GetMultimode>
 8006a32:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d017      	beq.n	8006a6e <HAL_ADC_IRQHandler+0x5e>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a58:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f90f 	bl	8007c84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <HAL_ADC_IRQHandler+0x72>
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8085 	beq.w	8006b98 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d07f      	beq.n	8006b98 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fa19 	bl	8005eec <LL_ADC_REG_IsTriggerSourceSWStart>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d064      	beq.n	8006b8a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a5e      	ldr	r2, [pc, #376]	; (8006c40 <HAL_ADC_IRQHandler+0x230>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d002      	beq.n	8006ad0 <HAL_ADC_IRQHandler+0xc0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	e001      	b.n	8006ad4 <HAL_ADC_IRQHandler+0xc4>
 8006ad0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d008      	beq.n	8006aee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d002      	beq.n	8006aee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d104      	bne.n	8006af8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	e00d      	b.n	8006b14 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a50      	ldr	r2, [pc, #320]	; (8006c40 <HAL_ADC_IRQHandler+0x230>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d002      	beq.n	8006b08 <HAL_ADC_IRQHandler+0xf8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	e001      	b.n	8006b0c <HAL_ADC_IRQHandler+0xfc>
 8006b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d135      	bne.n	8006b8a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d12e      	bne.n	8006b8a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fb5d 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d11a      	bne.n	8006b72 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 020c 	bic.w	r2, r2, #12
 8006b4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d112      	bne.n	8006b8a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b68:	f043 0201 	orr.w	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b70:	e00b      	b.n	8006b8a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b76:	f043 0210 	orr.w	r2, r3, #16
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b82:	f043 0201 	orr.w	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fc fa08 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	220c      	movs	r2, #12
 8006b96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <HAL_ADC_IRQHandler+0x19c>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 809e 	beq.w	8006cf4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8098 	beq.w	8006cf4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff f9c2 	bl	8005f6a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006be6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff f97d 	bl	8005eec <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bf2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a11      	ldr	r2, [pc, #68]	; (8006c40 <HAL_ADC_IRQHandler+0x230>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d002      	beq.n	8006c04 <HAL_ADC_IRQHandler+0x1f4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	e001      	b.n	8006c08 <HAL_ADC_IRQHandler+0x1f8>
 8006c04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d008      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b06      	cmp	r3, #6
 8006c1a:	d002      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	d104      	bne.n	8006c2c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	623b      	str	r3, [r7, #32]
 8006c2a:	e011      	b.n	8006c50 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a03      	ldr	r2, [pc, #12]	; (8006c40 <HAL_ADC_IRQHandler+0x230>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d006      	beq.n	8006c44 <HAL_ADC_IRQHandler+0x234>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	e005      	b.n	8006c48 <HAL_ADC_IRQHandler+0x238>
 8006c3c:	50000300 	.word	0x50000300
 8006c40:	50000100 	.word	0x50000100
 8006c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c48:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d047      	beq.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_ADC_IRQHandler+0x260>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d03f      	beq.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d13a      	bne.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d133      	bne.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d12e      	bne.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fad6 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11a      	bne.n	8006cce <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ca6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d112      	bne.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	f043 0201 	orr.w	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ccc:	e00b      	b.n	8006ce6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	f043 0210 	orr.w	r2, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cde:	f043 0201 	orr.w	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 ffa4 	bl	8007c34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2260      	movs	r2, #96	; 0x60
 8006cf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d011      	beq.n	8006d22 <HAL_ADC_IRQHandler+0x312>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f89f 	bl	8006e58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d012      	beq.n	8006d52 <HAL_ADC_IRQHandler+0x342>
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 ff8a 	bl	8007c5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d012      	beq.n	8006d82 <HAL_ADC_IRQHandler+0x372>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 ff7c 	bl	8007c70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d036      	beq.n	8006dfa <HAL_ADC_IRQHandler+0x3ea>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f003 0310 	and.w	r3, r3, #16
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d031      	beq.n	8006dfa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
 8006da2:	e014      	b.n	8006dce <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d008      	beq.n	8006dbc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006daa:	4825      	ldr	r0, [pc, #148]	; (8006e40 <HAL_ADC_IRQHandler+0x430>)
 8006dac:	f7ff f94e 	bl	800604c <LL_ADC_GetMultiDMATransfer>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00b      	beq.n	8006dce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006db6:	2301      	movs	r3, #1
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dba:	e008      	b.n	8006dce <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d10e      	bne.n	8006df2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de4:	f043 0202 	orr.w	r2, r3, #2
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f83d 	bl	8006e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2210      	movs	r2, #16
 8006df8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d018      	beq.n	8006e36 <HAL_ADC_IRQHandler+0x426>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d013      	beq.n	8006e36 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e12:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1e:	f043 0208 	orr.w	r2, r3, #8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e2e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 ff09 	bl	8007c48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006e36:	bf00      	nop
 8006e38:	3728      	adds	r7, #40	; 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	50000300 	.word	0x50000300

08006e44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b0b6      	sub	sp, #216	; 0xd8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_ADC_ConfigChannel+0x22>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e3c8      	b.n	8007634 <HAL_ADC_ConfigChannel+0x7b4>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff f99e 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 83ad 	bne.w	8007616 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	6859      	ldr	r1, [r3, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f7ff f822 	bl	8005f12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff f98c 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 8006ed8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff f9ac 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 8006ee6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006eea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 81d9 	bne.w	80072a6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 81d4 	bne.w	80072a6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f06:	d10f      	bne.n	8006f28 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2200      	movs	r2, #0
 8006f12:	4619      	mov	r1, r3
 8006f14:	f7ff f83c 	bl	8005f90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe ffd0 	bl	8005ec6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006f26:	e00e      	b.n	8006f46 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6819      	ldr	r1, [r3, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	461a      	mov	r2, r3
 8006f36:	f7ff f82b 	bl	8005f90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe ffc0 	bl	8005ec6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d022      	beq.n	8006fae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6919      	ldr	r1, [r3, #16]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f78:	f7fe ff1a 	bl	8005db0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6919      	ldr	r1, [r3, #16]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f7fe ff66 	bl	8005e5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d102      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x124>
 8006f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fa2:	e000      	b.n	8006fa6 <HAL_ADC_ConfigChannel+0x126>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fe ff72 	bl	8005e90 <LL_ADC_SetOffsetSaturation>
 8006fac:	e17b      	b.n	80072a6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe ff1f 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <HAL_ADC_ConfigChannel+0x15a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe ff14 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	0e9b      	lsrs	r3, r3, #26
 8006fd4:	f003 021f 	and.w	r2, r3, #31
 8006fd8:	e01e      	b.n	8007018 <HAL_ADC_ConfigChannel+0x198>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe ff09 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ff0:	fa93 f3a3 	rbit	r3, r3
 8006ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007000:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007008:	2320      	movs	r3, #32
 800700a:	e004      	b.n	8007016 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800700c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007010:	fab3 f383 	clz	r3, r3
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_ADC_ConfigChannel+0x1b0>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	0e9b      	lsrs	r3, r3, #26
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	e018      	b.n	8007062 <HAL_ADC_ConfigChannel+0x1e2>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800703c:	fa93 f3a3 	rbit	r3, r3
 8007040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800704c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007054:	2320      	movs	r3, #32
 8007056:	e004      	b.n	8007062 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800705c:	fab3 f383 	clz	r3, r3
 8007060:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007062:	429a      	cmp	r2, r3
 8007064:	d106      	bne.n	8007074 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fed8 	bl	8005e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2101      	movs	r1, #1
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe febc 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8007080:	4603      	mov	r3, r0
 8007082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x220>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2101      	movs	r1, #1
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe feb1 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8007096:	4603      	mov	r3, r0
 8007098:	0e9b      	lsrs	r3, r3, #26
 800709a:	f003 021f 	and.w	r2, r3, #31
 800709e:	e01e      	b.n	80070de <HAL_ADC_ConfigChannel+0x25e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2101      	movs	r1, #1
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fea6 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070b6:	fa93 f3a3 	rbit	r3, r3
 80070ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80070be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80070c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80070ce:	2320      	movs	r3, #32
 80070d0:	e004      	b.n	80070dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80070d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070d6:	fab3 f383 	clz	r3, r3
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x276>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	0e9b      	lsrs	r3, r3, #26
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	e018      	b.n	8007128 <HAL_ADC_ConfigChannel+0x2a8>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007102:	fa93 f3a3 	rbit	r3, r3
 8007106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800710a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800710e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800711a:	2320      	movs	r3, #32
 800711c:	e004      	b.n	8007128 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800711e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007122:	fab3 f383 	clz	r3, r3
 8007126:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007128:	429a      	cmp	r2, r3
 800712a:	d106      	bne.n	800713a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2200      	movs	r2, #0
 8007132:	2101      	movs	r1, #1
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fe75 	bl	8005e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2102      	movs	r1, #2
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fe59 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8007146:	4603      	mov	r3, r0
 8007148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <HAL_ADC_ConfigChannel+0x2e6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2102      	movs	r1, #2
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fe4e 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 800715c:	4603      	mov	r3, r0
 800715e:	0e9b      	lsrs	r3, r3, #26
 8007160:	f003 021f 	and.w	r2, r3, #31
 8007164:	e01e      	b.n	80071a4 <HAL_ADC_ConfigChannel+0x324>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fe43 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8007172:	4603      	mov	r3, r0
 8007174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800717c:	fa93 f3a3 	rbit	r3, r3
 8007180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800718c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007194:	2320      	movs	r3, #32
 8007196:	e004      	b.n	80071a2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800719c:	fab3 f383 	clz	r3, r3
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <HAL_ADC_ConfigChannel+0x33c>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	0e9b      	lsrs	r3, r3, #26
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	e016      	b.n	80071ea <HAL_ADC_ConfigChannel+0x36a>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071c8:	fa93 f3a3 	rbit	r3, r3
 80071cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80071ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80071d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80071dc:	2320      	movs	r3, #32
 80071de:	e004      	b.n	80071ea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80071e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071e4:	fab3 f383 	clz	r3, r3
 80071e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d106      	bne.n	80071fc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	2102      	movs	r1, #2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fe14 	bl	8005e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2103      	movs	r1, #3
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fdf8 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8007208:	4603      	mov	r3, r0
 800720a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <HAL_ADC_ConfigChannel+0x3a8>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2103      	movs	r1, #3
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fded 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 800721e:	4603      	mov	r3, r0
 8007220:	0e9b      	lsrs	r3, r3, #26
 8007222:	f003 021f 	and.w	r2, r3, #31
 8007226:	e017      	b.n	8007258 <HAL_ADC_ConfigChannel+0x3d8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2103      	movs	r1, #3
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fde2 	bl	8005df8 <LL_ADC_GetOffsetChannel>
 8007234:	4603      	mov	r3, r0
 8007236:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723a:	fa93 f3a3 	rbit	r3, r3
 800723e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007242:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800724a:	2320      	movs	r3, #32
 800724c:	e003      	b.n	8007256 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800724e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007250:	fab3 f383 	clz	r3, r3
 8007254:	b2db      	uxtb	r3, r3
 8007256:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007260:	2b00      	cmp	r3, #0
 8007262:	d105      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x3f0>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	0e9b      	lsrs	r3, r3, #26
 800726a:	f003 031f 	and.w	r3, r3, #31
 800726e:	e011      	b.n	8007294 <HAL_ADC_ConfigChannel+0x414>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007278:	fa93 f3a3 	rbit	r3, r3
 800727c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800727e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007280:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007288:	2320      	movs	r3, #32
 800728a:	e003      	b.n	8007294 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800728c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728e:	fab3 f383 	clz	r3, r3
 8007292:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007294:	429a      	cmp	r2, r3
 8007296:	d106      	bne.n	80072a6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	2103      	movs	r1, #3
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fdbf 	bl	8005e24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe ff52 	bl	8006154 <LL_ADC_IsEnabled>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f040 8140 	bne.w	8007538 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	461a      	mov	r2, r3
 80072c6:	f7fe fe8f 	bl	8005fe8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	4a8f      	ldr	r2, [pc, #572]	; (800750c <HAL_ADC_ConfigChannel+0x68c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	f040 8131 	bne.w	8007538 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <HAL_ADC_ConfigChannel+0x47e>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	0e9b      	lsrs	r3, r3, #26
 80072ec:	3301      	adds	r3, #1
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	2b09      	cmp	r3, #9
 80072f4:	bf94      	ite	ls
 80072f6:	2301      	movls	r3, #1
 80072f8:	2300      	movhi	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	e019      	b.n	8007332 <HAL_ADC_ConfigChannel+0x4b2>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800730c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800730e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8007316:	2320      	movs	r3, #32
 8007318:	e003      	b.n	8007322 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800731a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800731c:	fab3 f383 	clz	r3, r3
 8007320:	b2db      	uxtb	r3, r3
 8007322:	3301      	adds	r3, #1
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2b09      	cmp	r3, #9
 800732a:	bf94      	ite	ls
 800732c:	2301      	movls	r3, #1
 800732e:	2300      	movhi	r3, #0
 8007330:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007332:	2b00      	cmp	r3, #0
 8007334:	d079      	beq.n	800742a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <HAL_ADC_ConfigChannel+0x4d2>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	0e9b      	lsrs	r3, r3, #26
 8007348:	3301      	adds	r3, #1
 800734a:	069b      	lsls	r3, r3, #26
 800734c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007350:	e015      	b.n	800737e <HAL_ADC_ConfigChannel+0x4fe>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735a:	fa93 f3a3 	rbit	r3, r3
 800735e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800736a:	2320      	movs	r3, #32
 800736c:	e003      	b.n	8007376 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800736e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007370:	fab3 f383 	clz	r3, r3
 8007374:	b2db      	uxtb	r3, r3
 8007376:	3301      	adds	r3, #1
 8007378:	069b      	lsls	r3, r3, #26
 800737a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <HAL_ADC_ConfigChannel+0x51e>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	0e9b      	lsrs	r3, r3, #26
 8007390:	3301      	adds	r3, #1
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2101      	movs	r1, #1
 8007398:	fa01 f303 	lsl.w	r3, r1, r3
 800739c:	e017      	b.n	80073ce <HAL_ADC_ConfigChannel+0x54e>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a6:	fa93 f3a3 	rbit	r3, r3
 80073aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80073ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80073b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80073b6:	2320      	movs	r3, #32
 80073b8:	e003      	b.n	80073c2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80073ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	3301      	adds	r3, #1
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2101      	movs	r1, #1
 80073ca:	fa01 f303 	lsl.w	r3, r1, r3
 80073ce:	ea42 0103 	orr.w	r1, r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <HAL_ADC_ConfigChannel+0x574>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	0e9b      	lsrs	r3, r3, #26
 80073e4:	3301      	adds	r3, #1
 80073e6:	f003 021f 	and.w	r2, r3, #31
 80073ea:	4613      	mov	r3, r2
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	051b      	lsls	r3, r3, #20
 80073f2:	e018      	b.n	8007426 <HAL_ADC_ConfigChannel+0x5a6>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	fa93 f3a3 	rbit	r3, r3
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800740c:	2320      	movs	r3, #32
 800740e:	e003      	b.n	8007418 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	fab3 f383 	clz	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	3301      	adds	r3, #1
 800741a:	f003 021f 	and.w	r2, r3, #31
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007426:	430b      	orrs	r3, r1
 8007428:	e081      	b.n	800752e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <HAL_ADC_ConfigChannel+0x5c6>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0e9b      	lsrs	r3, r3, #26
 800743c:	3301      	adds	r3, #1
 800743e:	069b      	lsls	r3, r3, #26
 8007440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007444:	e015      	b.n	8007472 <HAL_ADC_ConfigChannel+0x5f2>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	fa93 f3a3 	rbit	r3, r3
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800745e:	2320      	movs	r3, #32
 8007460:	e003      	b.n	800746a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	fab3 f383 	clz	r3, r3
 8007468:	b2db      	uxtb	r3, r3
 800746a:	3301      	adds	r3, #1
 800746c:	069b      	lsls	r3, r3, #26
 800746e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x612>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	0e9b      	lsrs	r3, r3, #26
 8007484:	3301      	adds	r3, #1
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2101      	movs	r1, #1
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	e017      	b.n	80074c2 <HAL_ADC_ConfigChannel+0x642>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	fa93 f3a3 	rbit	r3, r3
 800749e:	61fb      	str	r3, [r7, #28]
  return result;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80074aa:	2320      	movs	r3, #32
 80074ac:	e003      	b.n	80074b6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	fab3 f383 	clz	r3, r3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	3301      	adds	r3, #1
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2101      	movs	r1, #1
 80074be:	fa01 f303 	lsl.w	r3, r1, r3
 80074c2:	ea42 0103 	orr.w	r1, r2, r3
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10d      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x66e>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	0e9b      	lsrs	r3, r3, #26
 80074d8:	3301      	adds	r3, #1
 80074da:	f003 021f 	and.w	r2, r3, #31
 80074de:	4613      	mov	r3, r2
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	4413      	add	r3, r2
 80074e4:	3b1e      	subs	r3, #30
 80074e6:	051b      	lsls	r3, r3, #20
 80074e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074ec:	e01e      	b.n	800752c <HAL_ADC_ConfigChannel+0x6ac>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	fa93 f3a3 	rbit	r3, r3
 80074fa:	613b      	str	r3, [r7, #16]
  return result;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8007506:	2320      	movs	r3, #32
 8007508:	e006      	b.n	8007518 <HAL_ADC_ConfigChannel+0x698>
 800750a:	bf00      	nop
 800750c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	fab3 f383 	clz	r3, r3
 8007516:	b2db      	uxtb	r3, r3
 8007518:	3301      	adds	r3, #1
 800751a:	f003 021f 	and.w	r2, r3, #31
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	3b1e      	subs	r3, #30
 8007526:	051b      	lsls	r3, r3, #20
 8007528:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800752c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007532:	4619      	mov	r1, r3
 8007534:	f7fe fd2c 	bl	8005f90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b3f      	ldr	r3, [pc, #252]	; (800763c <HAL_ADC_ConfigChannel+0x7bc>)
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d071      	beq.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007544:	483e      	ldr	r0, [pc, #248]	; (8007640 <HAL_ADC_ConfigChannel+0x7c0>)
 8007546:	f7fe fc25 	bl	8005d94 <LL_ADC_GetCommonPathInternalCh>
 800754a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a3c      	ldr	r2, [pc, #240]	; (8007644 <HAL_ADC_ConfigChannel+0x7c4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d004      	beq.n	8007562 <HAL_ADC_ConfigChannel+0x6e2>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a3a      	ldr	r2, [pc, #232]	; (8007648 <HAL_ADC_ConfigChannel+0x7c8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d127      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007562:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d121      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007576:	d157      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800757c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007580:	4619      	mov	r1, r3
 8007582:	482f      	ldr	r0, [pc, #188]	; (8007640 <HAL_ADC_ConfigChannel+0x7c0>)
 8007584:	f7fe fbf3 	bl	8005d6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007588:	4b30      	ldr	r3, [pc, #192]	; (800764c <HAL_ADC_ConfigChannel+0x7cc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	099b      	lsrs	r3, r3, #6
 800758e:	4a30      	ldr	r2, [pc, #192]	; (8007650 <HAL_ADC_ConfigChannel+0x7d0>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	099b      	lsrs	r3, r3, #6
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80075a2:	e002      	b.n	80075aa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f9      	bne.n	80075a4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075b0:	e03a      	b.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a27      	ldr	r2, [pc, #156]	; (8007654 <HAL_ADC_ConfigChannel+0x7d4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d113      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80075bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10d      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a22      	ldr	r2, [pc, #136]	; (8007658 <HAL_ADC_ConfigChannel+0x7d8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02a      	beq.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075da:	4619      	mov	r1, r3
 80075dc:	4818      	ldr	r0, [pc, #96]	; (8007640 <HAL_ADC_ConfigChannel+0x7c0>)
 80075de:	f7fe fbc6 	bl	8005d6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075e2:	e021      	b.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <HAL_ADC_ConfigChannel+0x7dc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d11c      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80075ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d116      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a16      	ldr	r2, [pc, #88]	; (8007658 <HAL_ADC_ConfigChannel+0x7d8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d011      	beq.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800760c:	4619      	mov	r1, r3
 800760e:	480c      	ldr	r0, [pc, #48]	; (8007640 <HAL_ADC_ConfigChannel+0x7c0>)
 8007610:	f7fe fbad 	bl	8005d6e <LL_ADC_SetCommonPathInternalCh>
 8007614:	e008      	b.n	8007628 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007630:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007634:	4618      	mov	r0, r3
 8007636:	37d8      	adds	r7, #216	; 0xd8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	80080000 	.word	0x80080000
 8007640:	50000300 	.word	0x50000300
 8007644:	c3210000 	.word	0xc3210000
 8007648:	90c00010 	.word	0x90c00010
 800764c:	200001c4 	.word	0x200001c4
 8007650:	053e2d63 	.word	0x053e2d63
 8007654:	c7520000 	.word	0xc7520000
 8007658:	50000100 	.word	0x50000100
 800765c:	cb840000 	.word	0xcb840000

08007660 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fdba 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 800767c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fddb 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 8007688:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d103      	bne.n	8007698 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8098 	beq.w	80077c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02a      	beq.n	80076fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7f5b      	ldrb	r3, [r3, #29]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d126      	bne.n	80076fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7f1b      	ldrb	r3, [r3, #28]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d122      	bne.n	80076fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80076b6:	2301      	movs	r3, #1
 80076b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80076ba:	e014      	b.n	80076e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4a45      	ldr	r2, [pc, #276]	; (80077d4 <ADC_ConversionStop+0x174>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d90d      	bls.n	80076e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c8:	f043 0210 	orr.w	r2, r3, #16
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d4:	f043 0201 	orr.w	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e074      	b.n	80077ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	3301      	adds	r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d1e3      	bne.n	80076bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2240      	movs	r2, #64	; 0x40
 80076fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d014      	beq.n	800772c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fd72 	bl	80061f0 <LL_ADC_REG_IsConversionOngoing>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fd2f 	bl	800617a <LL_ADC_IsDisableOngoing>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fd4e 	bl	80061c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d014      	beq.n	800775c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fd81 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fd17 	bl	800617a <LL_ADC_IsDisableOngoing>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fd5d 	bl	8006216 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d005      	beq.n	800776e <ADC_ConversionStop+0x10e>
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d105      	bne.n	8007774 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007768:	230c      	movs	r3, #12
 800776a:	617b      	str	r3, [r7, #20]
        break;
 800776c:	e005      	b.n	800777a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800776e:	2308      	movs	r3, #8
 8007770:	617b      	str	r3, [r7, #20]
        break;
 8007772:	e002      	b.n	800777a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007774:	2304      	movs	r3, #4
 8007776:	617b      	str	r3, [r7, #20]
        break;
 8007778:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800777a:	f7fe fab7 	bl	8005cec <HAL_GetTick>
 800777e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007780:	e01b      	b.n	80077ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007782:	f7fe fab3 	bl	8005cec <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b05      	cmp	r3, #5
 800778e:	d914      	bls.n	80077ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a2:	f043 0210 	orr.w	r2, r3, #16
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e007      	b.n	80077ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1dc      	bne.n	8007782 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	a33fffff 	.word	0xa33fffff

080077d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe fcb3 	bl	8006154 <LL_ADC_IsEnabled>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d169      	bne.n	80078c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <ADC_Enable+0xfc>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00d      	beq.n	800781e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	f043 0210 	orr.w	r2, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007812:	f043 0201 	orr.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e055      	b.n	80078ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fc6e 	bl	8006104 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007828:	482b      	ldr	r0, [pc, #172]	; (80078d8 <ADC_Enable+0x100>)
 800782a:	f7fe fab3 	bl	8005d94 <LL_ADC_GetCommonPathInternalCh>
 800782e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007834:	2b00      	cmp	r3, #0
 8007836:	d013      	beq.n	8007860 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007838:	4b28      	ldr	r3, [pc, #160]	; (80078dc <ADC_Enable+0x104>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	099b      	lsrs	r3, r3, #6
 800783e:	4a28      	ldr	r2, [pc, #160]	; (80078e0 <ADC_Enable+0x108>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	099b      	lsrs	r3, r3, #6
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	4613      	mov	r3, r2
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007852:	e002      	b.n	800785a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3b01      	subs	r3, #1
 8007858:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f9      	bne.n	8007854 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007860:	f7fe fa44 	bl	8005cec <HAL_GetTick>
 8007864:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007866:	e028      	b.n	80078ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fc71 	bl	8006154 <LL_ADC_IsEnabled>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fc41 	bl	8006104 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007882:	f7fe fa33 	bl	8005cec <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d914      	bls.n	80078ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00d      	beq.n	80078ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a2:	f043 0210 	orr.w	r2, r3, #16
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ae:	f043 0201 	orr.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e007      	b.n	80078ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d1cf      	bne.n	8007868 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	8000003f 	.word	0x8000003f
 80078d8:	50000300 	.word	0x50000300
 80078dc:	200001c4 	.word	0x200001c4
 80078e0:	053e2d63 	.word	0x053e2d63

080078e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fc42 	bl	800617a <LL_ADC_IsDisableOngoing>
 80078f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fc29 	bl	8006154 <LL_ADC_IsEnabled>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d047      	beq.n	8007998 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d144      	bne.n	8007998 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 030d 	and.w	r3, r3, #13
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10c      	bne.n	8007936 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe fc03 	bl	800612c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2203      	movs	r2, #3
 800792c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800792e:	f7fe f9dd 	bl	8005cec <HAL_GetTick>
 8007932:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007934:	e029      	b.n	800798a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793a:	f043 0210 	orr.w	r2, r3, #16
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	f043 0201 	orr.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e023      	b.n	800799a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007952:	f7fe f9cb 	bl	8005cec <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d914      	bls.n	800798a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007972:	f043 0210 	orr.w	r2, r3, #16
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e007      	b.n	800799a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1dc      	bne.n	8007952 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d14b      	bne.n	8007a54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d021      	beq.n	8007a1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fa86 	bl	8005eec <LL_ADC_REG_IsTriggerSourceSWStart>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d032      	beq.n	8007a4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d12b      	bne.n	8007a4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d11f      	bne.n	8007a4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a10:	f043 0201 	orr.w	r2, r3, #1
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a18:	e018      	b.n	8007a4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d111      	bne.n	8007a4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a44:	f043 0201 	orr.w	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7fb faa7 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007a52:	e00e      	b.n	8007a72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fa03 	bl	8006e6c <HAL_ADC_ErrorCallback>
}
 8007a66:	e004      	b.n	8007a72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
}
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff f9db 	bl	8006e44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab4:	f043 0204 	orr.w	r2, r3, #4
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff f9d5 	bl	8006e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <LL_ADC_IsEnabled>:
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <LL_ADC_IsEnabled+0x18>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <LL_ADC_IsEnabled+0x1a>
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <LL_ADC_StartCalibration>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	609a      	str	r2, [r3, #8]
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <LL_ADC_IsCalibrationOnGoing>:
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b36:	d101      	bne.n	8007b3c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <LL_ADC_REG_IsConversionOngoing>:
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d101      	bne.n	8007b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_ADCEx_Calibration_Start+0x1c>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e04d      	b.n	8007c28 <HAL_ADCEx_Calibration_Start+0xb8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fea5 	bl	80078e4 <ADC_Disable>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d136      	bne.n	8007c12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007bac:	f023 0302 	bic.w	r3, r3, #2
 8007bb0:	f043 0202 	orr.w	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff ff96 	bl	8007af0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007bc4:	e014      	b.n	8007bf0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d90d      	bls.n	8007bf0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	f023 0312 	bic.w	r3, r3, #18
 8007bdc:	f043 0210 	orr.w	r2, r3, #16
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e01b      	b.n	8007c28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff ff94 	bl	8007b22 <LL_ADC_IsCalibrationOnGoing>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e2      	bne.n	8007bc6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c04:	f023 0303 	bic.w	r3, r3, #3
 8007c08:	f043 0201 	orr.w	r2, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c10:	e005      	b.n	8007c1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c16:	f043 0210 	orr.w	r2, r3, #16
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	0004de01 	.word	0x0004de01

08007c34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b0a1      	sub	sp, #132	; 0x84
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e08b      	b.n	8007dce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007cd0:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007cd2:	60bb      	str	r3, [r7, #8]
 8007cd4:	e001      	b.n	8007cda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10b      	bne.n	8007cf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e06a      	b.n	8007dce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ff25 	bl	8007b4a <LL_ADC_REG_IsConversionOngoing>
 8007d00:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff ff1f 	bl	8007b4a <LL_ADC_REG_IsConversionOngoing>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d14c      	bne.n	8007dac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d149      	bne.n	8007dac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007d18:	4b30      	ldr	r3, [pc, #192]	; (8007ddc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007d1a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d028      	beq.n	8007d76 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	6859      	ldr	r1, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d36:	035b      	lsls	r3, r3, #13
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007d44:	f7ff fec1 	bl	8007aca <LL_ADC_IsEnabled>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	4823      	ldr	r0, [pc, #140]	; (8007dd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007d4c:	f7ff febd 	bl	8007aca <LL_ADC_IsEnabled>
 8007d50:	4603      	mov	r3, r0
 8007d52:	4323      	orrs	r3, r4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d133      	bne.n	8007dc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007d60:	f023 030f 	bic.w	r3, r3, #15
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	6811      	ldr	r1, [r2, #0]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	6892      	ldr	r2, [r2, #8]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d72:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007d74:	e024      	b.n	8007dc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d82:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007d86:	f7ff fea0 	bl	8007aca <LL_ADC_IsEnabled>
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4812      	ldr	r0, [pc, #72]	; (8007dd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007d8e:	f7ff fe9c 	bl	8007aca <LL_ADC_IsEnabled>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4323      	orrs	r3, r4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d112      	bne.n	8007dc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007da2:	f023 030f 	bic.w	r3, r3, #15
 8007da6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007da8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007daa:	e009      	b.n	8007dc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db0:	f043 0220 	orr.w	r2, r3, #32
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007dbe:	e000      	b.n	8007dc2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007dc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007dca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3784      	adds	r7, #132	; 0x84
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd90      	pop	{r4, r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	50000100 	.word	0x50000100
 8007ddc:	50000300 	.word	0x50000300

08007de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007df0:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <__NVIC_SetPriorityGrouping+0x44>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e12:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <__NVIC_SetPriorityGrouping+0x44>)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	60d3      	str	r3, [r2, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	e000ed00 	.word	0xe000ed00

08007e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <__NVIC_GetPriorityGrouping+0x18>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	0a1b      	lsrs	r3, r3, #8
 8007e32:	f003 0307 	and.w	r3, r3, #7
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	e000ed00 	.word	0xe000ed00

08007e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	db0b      	blt.n	8007e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	f003 021f 	and.w	r2, r3, #31
 8007e5c:	4907      	ldr	r1, [pc, #28]	; (8007e7c <__NVIC_EnableIRQ+0x38>)
 8007e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	2001      	movs	r0, #1
 8007e66:	fa00 f202 	lsl.w	r2, r0, r2
 8007e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	e000e100 	.word	0xe000e100

08007e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db0a      	blt.n	8007eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	490c      	ldr	r1, [pc, #48]	; (8007ecc <__NVIC_SetPriority+0x4c>)
 8007e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9e:	0112      	lsls	r2, r2, #4
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ea8:	e00a      	b.n	8007ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	4908      	ldr	r1, [pc, #32]	; (8007ed0 <__NVIC_SetPriority+0x50>)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	3b04      	subs	r3, #4
 8007eb8:	0112      	lsls	r2, r2, #4
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	761a      	strb	r2, [r3, #24]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	e000e100 	.word	0xe000e100
 8007ed0:	e000ed00 	.word	0xe000ed00

08007ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b089      	sub	sp, #36	; 0x24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f1c3 0307 	rsb	r3, r3, #7
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	bf28      	it	cs
 8007ef2:	2304      	movcs	r3, #4
 8007ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d902      	bls.n	8007f04 <NVIC_EncodePriority+0x30>
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3b03      	subs	r3, #3
 8007f02:	e000      	b.n	8007f06 <NVIC_EncodePriority+0x32>
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	43da      	mvns	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	401a      	ands	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	fa01 f303 	lsl.w	r3, r1, r3
 8007f26:	43d9      	mvns	r1, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f2c:	4313      	orrs	r3, r2
         );
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3724      	adds	r7, #36	; 0x24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f4c:	d301      	bcc.n	8007f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e00f      	b.n	8007f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f52:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <SysTick_Config+0x40>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f5a:	210f      	movs	r1, #15
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	f7ff ff8e 	bl	8007e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <SysTick_Config+0x40>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f6a:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <SysTick_Config+0x40>)
 8007f6c:	2207      	movs	r2, #7
 8007f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	e000e010 	.word	0xe000e010

08007f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff ff29 	bl	8007de0 <__NVIC_SetPriorityGrouping>
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b086      	sub	sp, #24
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007fa4:	f7ff ff40 	bl	8007e28 <__NVIC_GetPriorityGrouping>
 8007fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f7ff ff90 	bl	8007ed4 <NVIC_EncodePriority>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff ff5f 	bl	8007e80 <__NVIC_SetPriority>
}
 8007fc2:	bf00      	nop
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff ff33 	bl	8007e44 <__NVIC_EnableIRQ>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff ffa4 	bl	8007f3c <SysTick_Config>
 8007ff4:	4603      	mov	r3, r0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e054      	b.n	80080bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7f5b      	ldrb	r3, [r3, #29]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fc fd58 	bl	8004ad8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10c      	bne.n	8008050 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a22      	ldr	r2, [pc, #136]	; (80080c4 <HAL_CRC_Init+0xc4>)
 800803c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0218 	bic.w	r2, r2, #24
 800804c:	609a      	str	r2, [r3, #8]
 800804e:	e00c      	b.n	800806a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6899      	ldr	r1, [r3, #8]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	461a      	mov	r2, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f948 	bl	80082f0 <HAL_CRCEx_Polynomial_Set>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e028      	b.n	80080bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	795b      	ldrb	r3, [r3, #5]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f04f 32ff 	mov.w	r2, #4294967295
 800807a:	611a      	str	r2, [r3, #16]
 800807c:	e004      	b.n	8008088 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6912      	ldr	r2, [r2, #16]
 8008086:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	04c11db7 	.word	0x04c11db7

080080c8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2202      	movs	r2, #2
 80080dc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f042 0201 	orr.w	r2, r2, #1
 80080ec:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d006      	beq.n	8008104 <HAL_CRC_Calculate+0x3c>
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d829      	bhi.n	800814e <HAL_CRC_Calculate+0x86>
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d019      	beq.n	8008132 <HAL_CRC_Calculate+0x6a>
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d01e      	beq.n	8008140 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8008102:	e024      	b.n	800814e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e00a      	b.n	8008120 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	3301      	adds	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d3f0      	bcc.n	800810a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	613b      	str	r3, [r7, #16]
      break;
 8008130:	e00e      	b.n	8008150 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f812 	bl	8008160 <CRC_Handle_8>
 800813c:	6138      	str	r0, [r7, #16]
      break;
 800813e:	e007      	b.n	8008150 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f899 	bl	800827c <CRC_Handle_16>
 800814a:	6138      	str	r0, [r7, #16]
      break;
 800814c:	e000      	b.n	8008150 <HAL_CRC_Calculate+0x88>
      break;
 800814e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008156:	693b      	ldr	r3, [r7, #16]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e023      	b.n	80081ba <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	3301      	adds	r3, #1
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	440b      	add	r3, r1
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800818c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	3302      	adds	r3, #2
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	440b      	add	r3, r1
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800819c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	3303      	adds	r3, #3
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	440b      	add	r3, r1
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80081b0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80081b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3301      	adds	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	089b      	lsrs	r3, r3, #2
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d3d6      	bcc.n	8008172 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d04d      	beq.n	800826a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d107      	bne.n	80081e8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d116      	bne.n	8008220 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	b21a      	sxth	r2, r3
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	3301      	adds	r3, #1
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	440b      	add	r3, r1
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b21b      	sxth	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b21b      	sxth	r3, r3
 8008212:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	8b7a      	ldrh	r2, [r7, #26]
 800821e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	2b03      	cmp	r3, #3
 8008228:	d11f      	bne.n	800826a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	b21a      	sxth	r2, r3
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	3301      	adds	r3, #1
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	440b      	add	r3, r1
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b21b      	sxth	r3, r3
 8008246:	4313      	orrs	r3, r2
 8008248:	b21b      	sxth	r3, r3
 800824a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	8b7a      	ldrh	r2, [r7, #26]
 8008256:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	3302      	adds	r3, #2
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3724      	adds	r7, #36	; 0x24
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	e013      	b.n	80082b6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	041a      	lsls	r2, r3, #16
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	3302      	adds	r3, #2
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	440b      	add	r3, r1
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	4619      	mov	r1, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	3301      	adds	r3, #1
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d3e6      	bcc.n	800828e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	881a      	ldrh	r2, [r3, #0]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008300:	231f      	movs	r3, #31
 8008302:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
 8008312:	e063      	b.n	80083dc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008314:	bf00      	nop
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1e5a      	subs	r2, r3, #1
 800831a:	613a      	str	r2, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <HAL_CRCEx_Polynomial_Set+0x44>
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b18      	cmp	r3, #24
 8008338:	d846      	bhi.n	80083c8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <HAL_CRCEx_Polynomial_Set+0x50>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	080083cf 	.word	0x080083cf
 8008344:	080083c9 	.word	0x080083c9
 8008348:	080083c9 	.word	0x080083c9
 800834c:	080083c9 	.word	0x080083c9
 8008350:	080083c9 	.word	0x080083c9
 8008354:	080083c9 	.word	0x080083c9
 8008358:	080083c9 	.word	0x080083c9
 800835c:	080083c9 	.word	0x080083c9
 8008360:	080083bd 	.word	0x080083bd
 8008364:	080083c9 	.word	0x080083c9
 8008368:	080083c9 	.word	0x080083c9
 800836c:	080083c9 	.word	0x080083c9
 8008370:	080083c9 	.word	0x080083c9
 8008374:	080083c9 	.word	0x080083c9
 8008378:	080083c9 	.word	0x080083c9
 800837c:	080083c9 	.word	0x080083c9
 8008380:	080083b1 	.word	0x080083b1
 8008384:	080083c9 	.word	0x080083c9
 8008388:	080083c9 	.word	0x080083c9
 800838c:	080083c9 	.word	0x080083c9
 8008390:	080083c9 	.word	0x080083c9
 8008394:	080083c9 	.word	0x080083c9
 8008398:	080083c9 	.word	0x080083c9
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	080083a5 	.word	0x080083a5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b06      	cmp	r3, #6
 80083a8:	d913      	bls.n	80083d2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80083ae:	e010      	b.n	80083d2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b07      	cmp	r3, #7
 80083b4:	d90f      	bls.n	80083d6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80083ba:	e00c      	b.n	80083d6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b0f      	cmp	r3, #15
 80083c0:	d90b      	bls.n	80083da <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80083c6:	e008      	b.n	80083da <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
        break;
 80083cc:	e006      	b.n	80083dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80083ce:	bf00      	nop
 80083d0:	e004      	b.n	80083dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80083d2:	bf00      	nop
 80083d4:	e002      	b.n	80083dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80083d6:	bf00      	nop
 80083d8:	e000      	b.n	80083dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80083da:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10d      	bne.n	80083fe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f023 0118 	bic.w	r1, r3, #24
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e08d      	b.n	800853a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	4b47      	ldr	r3, [pc, #284]	; (8008544 <HAL_DMA_Init+0x138>)
 8008426:	429a      	cmp	r2, r3
 8008428:	d80f      	bhi.n	800844a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	4b45      	ldr	r3, [pc, #276]	; (8008548 <HAL_DMA_Init+0x13c>)
 8008432:	4413      	add	r3, r2
 8008434:	4a45      	ldr	r2, [pc, #276]	; (800854c <HAL_DMA_Init+0x140>)
 8008436:	fba2 2303 	umull	r2, r3, r2, r3
 800843a:	091b      	lsrs	r3, r3, #4
 800843c:	009a      	lsls	r2, r3, #2
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a42      	ldr	r2, [pc, #264]	; (8008550 <HAL_DMA_Init+0x144>)
 8008446:	641a      	str	r2, [r3, #64]	; 0x40
 8008448:	e00e      	b.n	8008468 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	4b40      	ldr	r3, [pc, #256]	; (8008554 <HAL_DMA_Init+0x148>)
 8008452:	4413      	add	r3, r2
 8008454:	4a3d      	ldr	r2, [pc, #244]	; (800854c <HAL_DMA_Init+0x140>)
 8008456:	fba2 2303 	umull	r2, r3, r2, r3
 800845a:	091b      	lsrs	r3, r3, #4
 800845c:	009a      	lsls	r2, r3, #2
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a3c      	ldr	r2, [pc, #240]	; (8008558 <HAL_DMA_Init+0x14c>)
 8008466:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800847e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800848c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa1e 	bl	80088fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084c8:	d102      	bne.n	80084d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d010      	beq.n	8008510 <HAL_DMA_Init+0x104>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d80c      	bhi.n	8008510 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa3e 	bl	8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800850c:	605a      	str	r2, [r3, #4]
 800850e:	e008      	b.n	8008522 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40020407 	.word	0x40020407
 8008548:	bffdfff8 	.word	0xbffdfff8
 800854c:	cccccccd 	.word	0xcccccccd
 8008550:	40020000 	.word	0x40020000
 8008554:	bffdfbf8 	.word	0xbffdfbf8
 8008558:	40020400 	.word	0x40020400

0800855c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008574:	2b01      	cmp	r3, #1
 8008576:	d101      	bne.n	800857c <HAL_DMA_Start_IT+0x20>
 8008578:	2302      	movs	r3, #2
 800857a:	e066      	b.n	800864a <HAL_DMA_Start_IT+0xee>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	d155      	bne.n	800863c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0201 	bic.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f962 	bl	800887e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d008      	beq.n	80085d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 020e 	orr.w	r2, r2, #14
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e00f      	b.n	80085f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0204 	bic.w	r2, r2, #4
 80085e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 020a 	orr.w	r2, r2, #10
 80085f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008610:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008628:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0201 	orr.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e005      	b.n	8008648 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008644:	2302      	movs	r3, #2
 8008646:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d005      	beq.n	8008676 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2204      	movs	r2, #4
 800866e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
 8008674:	e037      	b.n	80086e6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 020e 	bic.w	r2, r2, #14
 8008684:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008694:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0201 	bic.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086aa:	f003 021f 	and.w	r2, r3, #31
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	2101      	movs	r1, #1
 80086b4:	fa01 f202 	lsl.w	r2, r1, r2
 80086b8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80086c2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086da:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80086e4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2204      	movs	r2, #4
 8008726:	409a      	lsls	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d026      	beq.n	800877e <HAL_DMA_IRQHandler+0x7a>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d021      	beq.n	800877e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d107      	bne.n	8008758 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0204 	bic.w	r2, r2, #4
 8008756:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875c:	f003 021f 	and.w	r2, r3, #31
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	2104      	movs	r1, #4
 8008766:	fa01 f202 	lsl.w	r2, r1, r2
 800876a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	2b00      	cmp	r3, #0
 8008772:	d071      	beq.n	8008858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800877c:	e06c      	b.n	8008858 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2202      	movs	r2, #2
 8008788:	409a      	lsls	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d02e      	beq.n	80087f0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d029      	beq.n	80087f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 020a 	bic.w	r2, r2, #10
 80087b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c6:	f003 021f 	and.w	r2, r3, #31
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	2102      	movs	r1, #2
 80087d0:	fa01 f202 	lsl.w	r2, r1, r2
 80087d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d038      	beq.n	8008858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80087ee:	e033      	b.n	8008858 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	2208      	movs	r2, #8
 80087fa:	409a      	lsls	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02a      	beq.n	800885a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d025      	beq.n	800885a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 020e 	bic.w	r2, r2, #14
 800881c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008822:	f003 021f 	and.w	r2, r3, #31
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	2101      	movs	r1, #1
 800882c:	fa01 f202 	lsl.w	r2, r1, r2
 8008830:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008858:	bf00      	nop
 800885a:	bf00      	nop
}
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008870:	b2db      	uxtb	r3, r3
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008894:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	2b00      	cmp	r3, #0
 800889c:	d004      	beq.n	80088a8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80088a6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ac:	f003 021f 	and.w	r2, r3, #31
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f202 	lsl.w	r2, r1, r2
 80088ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b10      	cmp	r3, #16
 80088ca:	d108      	bne.n	80088de <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80088dc:	e007      	b.n	80088ee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	60da      	str	r2, [r3, #12]
}
 80088ee:	bf00      	nop
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
	...

080088fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	4b16      	ldr	r3, [pc, #88]	; (8008964 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800890c:	429a      	cmp	r2, r3
 800890e:	d802      	bhi.n	8008916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008910:	4b15      	ldr	r3, [pc, #84]	; (8008968 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008912:	617b      	str	r3, [r7, #20]
 8008914:	e001      	b.n	800891a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008918:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	3b08      	subs	r3, #8
 8008926:	4a12      	ldr	r2, [pc, #72]	; (8008970 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	091b      	lsrs	r3, r3, #4
 800892e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008934:	089b      	lsrs	r3, r3, #2
 8008936:	009a      	lsls	r2, r3, #2
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	4413      	add	r3, r2
 800893c:	461a      	mov	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a0b      	ldr	r2, [pc, #44]	; (8008974 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008946:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f003 031f 	and.w	r3, r3, #31
 800894e:	2201      	movs	r2, #1
 8008950:	409a      	lsls	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	40020407 	.word	0x40020407
 8008968:	40020800 	.word	0x40020800
 800896c:	40020820 	.word	0x40020820
 8008970:	cccccccd 	.word	0xcccccccd
 8008974:	40020880 	.word	0x40020880

08008978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	461a      	mov	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a08      	ldr	r2, [pc, #32]	; (80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800899a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3b01      	subs	r3, #1
 80089a0:	f003 031f 	and.w	r3, r3, #31
 80089a4:	2201      	movs	r2, #1
 80089a6:	409a      	lsls	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	1000823f 	.word	0x1000823f
 80089bc:	40020940 	.word	0x40020940

080089c0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80089d2:	4b2f      	ldr	r3, [pc, #188]	; (8008a90 <HAL_FLASH_Program+0xd0>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_FLASH_Program+0x1e>
 80089da:	2302      	movs	r3, #2
 80089dc:	e053      	b.n	8008a86 <HAL_FLASH_Program+0xc6>
 80089de:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <HAL_FLASH_Program+0xd0>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089e8:	f000 f892 	bl	8008b10 <FLASH_WaitForLastOperation>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d143      	bne.n	8008a7e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80089f6:	4b26      	ldr	r3, [pc, #152]	; (8008a90 <HAL_FLASH_Program+0xd0>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80089fc:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <HAL_FLASH_Program+0xd4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008a08:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <HAL_FLASH_Program+0xd4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <HAL_FLASH_Program+0xd4>)
 8008a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a12:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008a14:	4b1e      	ldr	r3, [pc, #120]	; (8008a90 <HAL_FLASH_Program+0xd0>)
 8008a16:	2202      	movs	r2, #2
 8008a18:	771a      	strb	r2, [r3, #28]
 8008a1a:	e002      	b.n	8008a22 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <HAL_FLASH_Program+0xd0>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d107      	bne.n	8008a38 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	68b8      	ldr	r0, [r7, #8]
 8008a2e:	f000 f8c3 	bl	8008bb8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008a32:	2301      	movs	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	e010      	b.n	8008a5a <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d002      	beq.n	8008a44 <HAL_FLASH_Program+0x84>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d10a      	bne.n	8008a5a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	4619      	mov	r1, r3
 8008a48:	68b8      	ldr	r0, [r7, #8]
 8008a4a:	f000 f8db 	bl	8008c04 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d102      	bne.n	8008a5a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008a54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a58:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a5e:	f000 f857 	bl	8008b10 <FLASH_WaitForLastOperation>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008a6c:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <HAL_FLASH_Program+0xd4>)
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	43db      	mvns	r3, r3
 8008a74:	4907      	ldr	r1, [pc, #28]	; (8008a94 <HAL_FLASH_Program+0xd4>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008a7a:	f000 f9d3 	bl	8008e24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a7e:	4b04      	ldr	r3, [pc, #16]	; (8008a90 <HAL_FLASH_Program+0xd0>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200001e0 	.word	0x200001e0
 8008a94:	40022000 	.word	0x40022000

08008a98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <HAL_FLASH_Unlock+0x38>)
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da0b      	bge.n	8008ac2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <HAL_FLASH_Unlock+0x38>)
 8008aac:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <HAL_FLASH_Unlock+0x3c>)
 8008aae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <HAL_FLASH_Unlock+0x38>)
 8008ab2:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <HAL_FLASH_Unlock+0x40>)
 8008ab4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <HAL_FLASH_Unlock+0x38>)
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	da01      	bge.n	8008ac2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	40022000 	.word	0x40022000
 8008ad4:	45670123 	.word	0x45670123
 8008ad8:	cdef89ab 	.word	0xcdef89ab

08008adc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <HAL_FLASH_Lock+0x30>)
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	4a08      	ldr	r2, [pc, #32]	; (8008b0c <HAL_FLASH_Lock+0x30>)
 8008aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008af0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <HAL_FLASH_Lock+0x30>)
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	da01      	bge.n	8008afe <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008afe:	79fb      	ldrb	r3, [r7, #7]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40022000 	.word	0x40022000

08008b10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8008b18:	f7fd f8e8 	bl	8005cec <HAL_GetTick>
 8008b1c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008b1e:	e009      	b.n	8008b34 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008b20:	f7fd f8e4 	bl	8005cec <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d201      	bcs.n	8008b34 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e038      	b.n	8008ba6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008b34:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b40:	d0ee      	beq.n	8008b20 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01e      	beq.n	8008b92 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <FLASH_WaitForLastOperation+0xa4>)
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <FLASH_WaitForLastOperation+0xa4>)
 8008b5e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d007      	beq.n	8008b7a <FLASH_WaitForLastOperation+0x6a>
 8008b6a:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b74:	490e      	ldr	r1, [pc, #56]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	618b      	str	r3, [r1, #24]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <FLASH_WaitForLastOperation+0x7e>
 8008b84:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008b8c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e009      	b.n	8008ba6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008b92:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d102      	bne.n	8008ba4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008b9e:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <FLASH_WaitForLastOperation+0xa0>)
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	40022000 	.word	0x40022000
 8008bb4:	200001e0 	.word	0x200001e0

08008bb8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008bc4:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <FLASH_Program_DoubleWord+0x48>)
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	4a0d      	ldr	r2, [pc, #52]	; (8008c00 <FLASH_Program_DoubleWord+0x48>)
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008bd6:	f3bf 8f6f 	isb	sy
}
 8008bda:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008bdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008be0:	f04f 0200 	mov.w	r2, #0
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	000a      	movs	r2, r1
 8008bea:	2300      	movs	r3, #0
 8008bec:	68f9      	ldr	r1, [r7, #12]
 8008bee:	3104      	adds	r1, #4
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	600b      	str	r3, [r1, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	40022000 	.word	0x40022000

08008c04 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b089      	sub	sp, #36	; 0x24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <FLASH_Program_Fast+0x68>)
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <FLASH_Program_Fast+0x68>)
 8008c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c24:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c26:	f3ef 8310 	mrs	r3, PRIMASK
 8008c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c2c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8008c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c30:	b672      	cpsid	i
}
 8008c32:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	3304      	adds	r3, #4
 8008c46:	617b      	str	r3, [r7, #20]
    row_index--;
 8008c48:	7ffb      	ldrb	r3, [r7, #31]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8008c4e:	7ffb      	ldrb	r3, [r7, #31]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1ef      	bne.n	8008c34 <FLASH_Program_Fast+0x30>
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f383 8810 	msr	PRIMASK, r3
}
 8008c5e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008c60:	bf00      	nop
 8008c62:	3724      	adds	r7, #36	; 0x24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	40022000 	.word	0x40022000

08008c70 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008c7a:	4b47      	ldr	r3, [pc, #284]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d101      	bne.n	8008c86 <HAL_FLASHEx_Erase+0x16>
 8008c82:	2302      	movs	r3, #2
 8008c84:	e083      	b.n	8008d8e <HAL_FLASHEx_Erase+0x11e>
 8008c86:	4b44      	ldr	r3, [pc, #272]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008c88:	2201      	movs	r2, #1
 8008c8a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c90:	f7ff ff3e 	bl	8008b10 <FLASH_WaitForLastOperation>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d173      	bne.n	8008d86 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008c9e:	4b3e      	ldr	r3, [pc, #248]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008ca4:	4b3d      	ldr	r3, [pc, #244]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d013      	beq.n	8008cd8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008cb0:	4b3a      	ldr	r3, [pc, #232]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d009      	beq.n	8008cd0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008cbc:	4b37      	ldr	r3, [pc, #220]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a36      	ldr	r2, [pc, #216]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cc6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008cc8:	4b33      	ldr	r3, [pc, #204]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008cca:	2203      	movs	r2, #3
 8008ccc:	771a      	strb	r2, [r3, #28]
 8008cce:	e016      	b.n	8008cfe <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008cd0:	4b31      	ldr	r3, [pc, #196]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	771a      	strb	r2, [r3, #28]
 8008cd6:	e012      	b.n	8008cfe <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008cd8:	4b30      	ldr	r3, [pc, #192]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008ce4:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a2c      	ldr	r2, [pc, #176]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cee:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008cf0:	4b29      	ldr	r3, [pc, #164]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	771a      	strb	r2, [r3, #28]
 8008cf6:	e002      	b.n	8008cfe <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008cf8:	4b27      	ldr	r3, [pc, #156]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d111      	bne.n	8008d2a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 f848 	bl	8008da0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d14:	f7ff fefc 	bl	8008b10 <FLASH_WaitForLastOperation>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8008d1c:	4b1f      	ldr	r3, [pc, #124]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	4a1e      	ldr	r2, [pc, #120]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008d22:	f023 0304 	bic.w	r3, r3, #4
 8008d26:	6153      	str	r3, [r2, #20]
 8008d28:	e02b      	b.n	8008d82 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	60bb      	str	r3, [r7, #8]
 8008d38:	e01b      	b.n	8008d72 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	68b8      	ldr	r0, [r7, #8]
 8008d42:	f000 f84b 	bl	8008ddc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d4a:	f7ff fee1 	bl	8008b10 <FLASH_WaitForLastOperation>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008d52:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	4a11      	ldr	r2, [pc, #68]	; (8008d9c <HAL_FLASHEx_Erase+0x12c>)
 8008d58:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008d5c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	601a      	str	r2, [r3, #0]
          break;
 8008d6a:	e00a      	b.n	8008d82 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60bb      	str	r3, [r7, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3db      	bcc.n	8008d3a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008d82:	f000 f84f 	bl	8008e24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d86:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <HAL_FLASHEx_Erase+0x128>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]

  return status;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200001e0 	.word	0x200001e0
 8008d9c:	40022000 	.word	0x40022000

08008da0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <FLASH_MassErase+0x38>)
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <FLASH_MassErase+0x38>)
 8008db8:	f043 0304 	orr.w	r3, r3, #4
 8008dbc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008dbe:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <FLASH_MassErase+0x38>)
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	4a05      	ldr	r2, [pc, #20]	; (8008dd8 <FLASH_MassErase+0x38>)
 8008dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc8:	6153      	str	r3, [r2, #20]
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40022000 	.word	0x40022000

08008ddc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008de6:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <FLASH_PageErase+0x44>)
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008df6:	490a      	ldr	r1, [pc, #40]	; (8008e20 <FLASH_PageErase+0x44>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008dfc:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <FLASH_PageErase+0x44>)
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	4a07      	ldr	r2, [pc, #28]	; (8008e20 <FLASH_PageErase+0x44>)
 8008e02:	f043 0302 	orr.w	r3, r3, #2
 8008e06:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <FLASH_PageErase+0x44>)
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	4a04      	ldr	r2, [pc, #16]	; (8008e20 <FLASH_PageErase+0x44>)
 8008e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e12:	6153      	str	r3, [r2, #20]
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	40022000 	.word	0x40022000

08008e24 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008e2a:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <FLASH_FlushCaches+0x8c>)
 8008e2c:	7f1b      	ldrb	r3, [r3, #28]
 8008e2e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d002      	beq.n	8008e3c <FLASH_FlushCaches+0x18>
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d117      	bne.n	8008e6c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1c      	ldr	r2, [pc, #112]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e46:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a19      	ldr	r2, [pc, #100]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a16      	ldr	r2, [pc, #88]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e5e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e60:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e6a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d002      	beq.n	8008e78 <FLASH_FlushCaches+0x54>
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d111      	bne.n	8008e9c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008e78:	4b0e      	ldr	r3, [pc, #56]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a0d      	ldr	r2, [pc, #52]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a0a      	ldr	r2, [pc, #40]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e8e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e90:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a07      	ldr	r2, [pc, #28]	; (8008eb4 <FLASH_FlushCaches+0x90>)
 8008e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e9a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <FLASH_FlushCaches+0x8c>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	771a      	strb	r2, [r3, #28]
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	200001e0 	.word	0x200001e0
 8008eb4:	40022000 	.word	0x40022000

08008eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ec6:	e15a      	b.n	800917e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	2101      	movs	r1, #1
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 814c 	beq.w	8009178 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d005      	beq.n	8008ef8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d130      	bne.n	8008f5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	2203      	movs	r2, #3
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f2e:	2201      	movs	r2, #1
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	43db      	mvns	r3, r3
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	091b      	lsrs	r3, r3, #4
 8008f44:	f003 0201 	and.w	r2, r3, #1
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d017      	beq.n	8008f96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	2203      	movs	r2, #3
 8008f72:	fa02 f303 	lsl.w	r3, r2, r3
 8008f76:	43db      	mvns	r3, r3
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d123      	bne.n	8008fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	08da      	lsrs	r2, r3, #3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3208      	adds	r2, #8
 8008faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	220f      	movs	r2, #15
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	43db      	mvns	r3, r3
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	08da      	lsrs	r2, r3, #3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3208      	adds	r2, #8
 8008fe4:	6939      	ldr	r1, [r7, #16]
 8008fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	43db      	mvns	r3, r3
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4013      	ands	r3, r2
 8009000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f003 0203 	and.w	r2, r3, #3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 80a6 	beq.w	8009178 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800902c:	4b5b      	ldr	r3, [pc, #364]	; (800919c <HAL_GPIO_Init+0x2e4>)
 800902e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009030:	4a5a      	ldr	r2, [pc, #360]	; (800919c <HAL_GPIO_Init+0x2e4>)
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	6613      	str	r3, [r2, #96]	; 0x60
 8009038:	4b58      	ldr	r3, [pc, #352]	; (800919c <HAL_GPIO_Init+0x2e4>)
 800903a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	60bb      	str	r3, [r7, #8]
 8009042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009044:	4a56      	ldr	r2, [pc, #344]	; (80091a0 <HAL_GPIO_Init+0x2e8>)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	089b      	lsrs	r3, r3, #2
 800904a:	3302      	adds	r3, #2
 800904c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	220f      	movs	r2, #15
 800905c:	fa02 f303 	lsl.w	r3, r2, r3
 8009060:	43db      	mvns	r3, r3
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	4013      	ands	r3, r2
 8009066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800906e:	d01f      	beq.n	80090b0 <HAL_GPIO_Init+0x1f8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a4c      	ldr	r2, [pc, #304]	; (80091a4 <HAL_GPIO_Init+0x2ec>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d019      	beq.n	80090ac <HAL_GPIO_Init+0x1f4>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a4b      	ldr	r2, [pc, #300]	; (80091a8 <HAL_GPIO_Init+0x2f0>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <HAL_GPIO_Init+0x1f0>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a4a      	ldr	r2, [pc, #296]	; (80091ac <HAL_GPIO_Init+0x2f4>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d00d      	beq.n	80090a4 <HAL_GPIO_Init+0x1ec>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a49      	ldr	r2, [pc, #292]	; (80091b0 <HAL_GPIO_Init+0x2f8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d007      	beq.n	80090a0 <HAL_GPIO_Init+0x1e8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a48      	ldr	r2, [pc, #288]	; (80091b4 <HAL_GPIO_Init+0x2fc>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d101      	bne.n	800909c <HAL_GPIO_Init+0x1e4>
 8009098:	2305      	movs	r3, #5
 800909a:	e00a      	b.n	80090b2 <HAL_GPIO_Init+0x1fa>
 800909c:	2306      	movs	r3, #6
 800909e:	e008      	b.n	80090b2 <HAL_GPIO_Init+0x1fa>
 80090a0:	2304      	movs	r3, #4
 80090a2:	e006      	b.n	80090b2 <HAL_GPIO_Init+0x1fa>
 80090a4:	2303      	movs	r3, #3
 80090a6:	e004      	b.n	80090b2 <HAL_GPIO_Init+0x1fa>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e002      	b.n	80090b2 <HAL_GPIO_Init+0x1fa>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <HAL_GPIO_Init+0x1fa>
 80090b0:	2300      	movs	r3, #0
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	f002 0203 	and.w	r2, r2, #3
 80090b8:	0092      	lsls	r2, r2, #2
 80090ba:	4093      	lsls	r3, r2
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090c2:	4937      	ldr	r1, [pc, #220]	; (80091a0 <HAL_GPIO_Init+0x2e8>)
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	089b      	lsrs	r3, r3, #2
 80090c8:	3302      	adds	r3, #2
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80090d0:	4b39      	ldr	r3, [pc, #228]	; (80091b8 <HAL_GPIO_Init+0x300>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	43db      	mvns	r3, r3
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4013      	ands	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80090f4:	4a30      	ldr	r2, [pc, #192]	; (80091b8 <HAL_GPIO_Init+0x300>)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80090fa:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <HAL_GPIO_Init+0x300>)
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	43db      	mvns	r3, r3
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4013      	ands	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800911e:	4a26      	ldr	r2, [pc, #152]	; (80091b8 <HAL_GPIO_Init+0x300>)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009124:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <HAL_GPIO_Init+0x300>)
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	43db      	mvns	r3, r3
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4013      	ands	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009148:	4a1b      	ldr	r2, [pc, #108]	; (80091b8 <HAL_GPIO_Init+0x300>)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800914e:	4b1a      	ldr	r3, [pc, #104]	; (80091b8 <HAL_GPIO_Init+0x300>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	43db      	mvns	r3, r3
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4013      	ands	r3, r2
 800915c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009172:	4a11      	ldr	r2, [pc, #68]	; (80091b8 <HAL_GPIO_Init+0x300>)
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	3301      	adds	r3, #1
 800917c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	fa22 f303 	lsr.w	r3, r2, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f ae9d 	bne.w	8008ec8 <HAL_GPIO_Init+0x10>
  }
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	40021000 	.word	0x40021000
 80091a0:	40010000 	.word	0x40010000
 80091a4:	48000400 	.word	0x48000400
 80091a8:	48000800 	.word	0x48000800
 80091ac:	48000c00 	.word	0x48000c00
 80091b0:	48001000 	.word	0x48001000
 80091b4:	48001400 	.word	0x48001400
 80091b8:	40010400 	.word	0x40010400

080091bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691a      	ldr	r2, [r3, #16]
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	4013      	ands	r3, r2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
 80091d8:	e001      	b.n	80091de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	807b      	strh	r3, [r7, #2]
 80091f8:	4613      	mov	r3, r2
 80091fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091fc:	787b      	ldrb	r3, [r7, #1]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009202:	887a      	ldrh	r2, [r7, #2]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009208:	e002      	b.n	8009210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800920a:	887a      	ldrh	r2, [r7, #2]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009228:	695a      	ldr	r2, [r3, #20]
 800922a:	88fb      	ldrh	r3, [r7, #6]
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009232:	4a05      	ldr	r2, [pc, #20]	; (8009248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	4618      	mov	r0, r3
 800923c:	f7f9 fd4c 	bl	8002cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	40010400 	.word	0x40010400

0800924c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e08d      	b.n	800937a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7fb fc50 	bl	8004b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2224      	movs	r2, #36	; 0x24
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800929c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d107      	bne.n	80092c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092c2:	609a      	str	r2, [r3, #8]
 80092c4:	e006      	b.n	80092d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80092d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d108      	bne.n	80092ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ea:	605a      	str	r2, [r3, #4]
 80092ec:	e007      	b.n	80092fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6812      	ldr	r2, [r2, #0]
 8009308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800930c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	69d9      	ldr	r1, [r3, #28]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1a      	ldr	r2, [r3, #32]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b20      	cmp	r3, #32
 8009396:	d138      	bne.n	800940a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d101      	bne.n	80093a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80093a2:	2302      	movs	r3, #2
 80093a4:	e032      	b.n	800940c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2224      	movs	r2, #36	; 0x24
 80093b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 0201 	bic.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6819      	ldr	r1, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f042 0201 	orr.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	e000      	b.n	800940c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800940a:	2302      	movs	r3, #2
  }
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b20      	cmp	r3, #32
 800942c:	d139      	bne.n	80094a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009438:	2302      	movs	r3, #2
 800943a:	e033      	b.n	80094a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2224      	movs	r2, #36	; 0x24
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800946a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0201 	orr.w	r2, r2, #1
 800948c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	e000      	b.n	80094a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80094a2:	2302      	movs	r3, #2
  }
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e0c0      	b.n	8009644 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f00b fec8 	bl	801526c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2203      	movs	r2, #3
 80094e0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f005 fe1e 	bl	800f12a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]
 80094f2:	e03e      	b.n	8009572 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094f4:	7bfa      	ldrb	r2, [r7, #15]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	440b      	add	r3, r1
 8009502:	3311      	adds	r3, #17
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009508:	7bfa      	ldrb	r2, [r7, #15]
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	440b      	add	r3, r1
 8009516:	3310      	adds	r3, #16
 8009518:	7bfa      	ldrb	r2, [r7, #15]
 800951a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800951c:	7bfa      	ldrb	r2, [r7, #15]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	440b      	add	r3, r1
 800952a:	3313      	adds	r3, #19
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	440b      	add	r3, r1
 800953e:	3320      	adds	r3, #32
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009544:	7bfa      	ldrb	r2, [r7, #15]
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	440b      	add	r3, r1
 8009552:	3324      	adds	r3, #36	; 0x24
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	440b      	add	r3, r1
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	3301      	adds	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	7bfa      	ldrb	r2, [r7, #15]
 8009578:	429a      	cmp	r2, r3
 800957a:	d3bb      	bcc.n	80094f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	e044      	b.n	800960c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	440b      	add	r3, r1
 8009590:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009598:	7bfa      	ldrb	r2, [r7, #15]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	440b      	add	r3, r1
 80095a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095aa:	7bfa      	ldrb	r2, [r7, #15]
 80095ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095ae:	7bfa      	ldrb	r2, [r7, #15]
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	440b      	add	r3, r1
 80095bc:	f203 1353 	addw	r3, r3, #339	; 0x153
 80095c0:	2200      	movs	r2, #0
 80095c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095c4:	7bfa      	ldrb	r2, [r7, #15]
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	440b      	add	r3, r1
 80095d2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095da:	7bfa      	ldrb	r2, [r7, #15]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	440b      	add	r3, r1
 80095e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095f0:	7bfa      	ldrb	r2, [r7, #15]
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	440b      	add	r3, r1
 80095fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	3301      	adds	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	791b      	ldrb	r3, [r3, #4]
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	429a      	cmp	r2, r3
 8009614:	d3b5      	bcc.n	8009582 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3304      	adds	r3, #4
 800961e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009622:	f005 fd9d 	bl	800f160 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7a9b      	ldrb	r3, [r3, #10]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d102      	bne.n	8009642 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 fc41 	bl	800aec4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_PCD_Start+0x16>
 800965e:	2302      	movs	r3, #2
 8009660:	e012      	b.n	8009688 <HAL_PCD_Start+0x3c>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f005 fd44 	bl	800f0fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f008 f804 	bl	8011686 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f008 f809 	bl	80116b4 <USB_ReadInterrupts>
 80096a2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fb04 	bl	8009cbc <PCD_EP_ISR_Handler>

    return;
 80096b4:	e110      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d013      	beq.n	80096e8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d2:	b292      	uxth	r2, r2
 80096d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f00b fe58 	bl	801538e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80096de:	2100      	movs	r1, #0
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f8fc 	bl	80098de <HAL_PCD_SetAddress>

    return;
 80096e6:	e0f7      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00c      	beq.n	800970c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009704:	b292      	uxth	r2, r2
 8009706:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800970a:	e0e5      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800971e:	b29a      	uxth	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009728:	b292      	uxth	r2, r2
 800972a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800972e:	e0d3      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d034      	beq.n	80097a4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0204 	bic.w	r2, r2, #4
 800974c:	b292      	uxth	r2, r2
 800974e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800975a:	b29a      	uxth	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0208 	bic.w	r2, r2, #8
 8009764:	b292      	uxth	r2, r2
 8009766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009770:	2b01      	cmp	r3, #1
 8009772:	d107      	bne.n	8009784 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800977c:	2100      	movs	r1, #0
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f00b fff8 	bl	8015774 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f00b fe3b 	bl	8015400 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009792:	b29a      	uxth	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800979c:	b292      	uxth	r2, r2
 800979e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80097a2:	e099      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d027      	beq.n	80097fe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0208 	orr.w	r2, r2, #8
 80097c0:	b292      	uxth	r2, r2
 80097c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097d8:	b292      	uxth	r2, r2
 80097da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f042 0204 	orr.w	r2, r2, #4
 80097f0:	b292      	uxth	r2, r2
 80097f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f00b fde8 	bl	80153cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80097fc:	e06c      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009804:	2b00      	cmp	r3, #0
 8009806:	d040      	beq.n	800988a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009810:	b29a      	uxth	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800981a:	b292      	uxth	r2, r2
 800981c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009826:	2b00      	cmp	r3, #0
 8009828:	d12b      	bne.n	8009882 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0204 	orr.w	r2, r2, #4
 800983c:	b292      	uxth	r2, r2
 800983e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800984a:	b29a      	uxth	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0208 	orr.w	r2, r2, #8
 8009854:	b292      	uxth	r2, r2
 8009856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800986a:	b29b      	uxth	r3, r3
 800986c:	089b      	lsrs	r3, r3, #2
 800986e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009878:	2101      	movs	r1, #1
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f00b ff7a 	bl	8015774 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009880:	e02a      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f00b fda2 	bl	80153cc <HAL_PCD_SuspendCallback>
    return;
 8009888:	e026      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00f      	beq.n	80098b4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800989c:	b29a      	uxth	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80098a6:	b292      	uxth	r2, r2
 80098a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f00b fd60 	bl	8015372 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80098b2:	e011      	b.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00c      	beq.n	80098d8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098d0:	b292      	uxth	r2, r2
 80098d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80098d6:	bf00      	nop
  }
}
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d101      	bne.n	80098f8 <HAL_PCD_SetAddress+0x1a>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e012      	b.n	800991e <HAL_PCD_SetAddress+0x40>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	78fa      	ldrb	r2, [r7, #3]
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f007 fea5 	bl	801165e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	4608      	mov	r0, r1
 8009930:	4611      	mov	r1, r2
 8009932:	461a      	mov	r2, r3
 8009934:	4603      	mov	r3, r0
 8009936:	70fb      	strb	r3, [r7, #3]
 8009938:	460b      	mov	r3, r1
 800993a:	803b      	strh	r3, [r7, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009948:	2b00      	cmp	r3, #0
 800994a:	da0e      	bge.n	800996a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	f003 0207 	and.w	r2, r3, #7
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	3310      	adds	r3, #16
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4413      	add	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	705a      	strb	r2, [r3, #1]
 8009968:	e00e      	b.n	8009988 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	f003 0207 	and.w	r2, r3, #7
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	4413      	add	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	b2da      	uxtb	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009994:	883a      	ldrh	r2, [r7, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	78ba      	ldrb	r2, [r7, #2]
 800999e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80099a0:	78bb      	ldrb	r3, [r7, #2]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d102      	bne.n	80099ac <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_PCD_EP_Open+0x94>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e00e      	b.n	80099d8 <HAL_PCD_EP_Open+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f005 fbe7 	bl	800f19c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80099d6:	7afb      	ldrb	r3, [r7, #11]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80099ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	da0e      	bge.n	8009a12 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	f003 0207 	and.w	r2, r3, #7
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	3310      	adds	r3, #16
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4413      	add	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	705a      	strb	r2, [r3, #1]
 8009a10:	e00e      	b.n	8009a30 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	f003 0207 	and.w	r2, r3, #7
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d101      	bne.n	8009a4a <HAL_PCD_EP_Close+0x6a>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e00e      	b.n	8009a68 <HAL_PCD_EP_Close+0x88>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f005 ff63 	bl	800f924 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	607a      	str	r2, [r7, #4]
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a80:	7afb      	ldrb	r3, [r7, #11]
 8009a82:	f003 0207 	and.w	r2, r3, #7
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2200      	movs	r2, #0
 8009aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6979      	ldr	r1, [r7, #20]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f006 f91b 	bl	800fcfe <USB_EPStartXfer>

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	f003 0207 	and.w	r2, r3, #7
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	440b      	add	r3, r1
 8009af0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009af4:	681b      	ldr	r3, [r3, #0]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	f003 0207 	and.w	r2, r3, #7
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	3310      	adds	r3, #16
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2200      	movs	r2, #0
 8009b46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b4e:	7afb      	ldrb	r3, [r7, #11]
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6979      	ldr	r1, [r7, #20]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f006 f8cc 	bl	800fcfe <USB_EPStartXfer>

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	f003 0307 	and.w	r3, r3, #7
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	7912      	ldrb	r2, [r2, #4]
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d901      	bls.n	8009b8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e03e      	b.n	8009c0c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da0e      	bge.n	8009bb4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	f003 0207 	and.w	r2, r3, #7
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	3310      	adds	r3, #16
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4413      	add	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	705a      	strb	r2, [r3, #1]
 8009bb2:	e00c      	b.n	8009bce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009bb4:	78fa      	ldrb	r2, [r7, #3]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_PCD_EP_SetStall+0x7e>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e00e      	b.n	8009c0c <HAL_PCD_EP_SetStall+0x9c>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68f9      	ldr	r1, [r7, #12]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f007 fc2f 	bl	8011460 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	f003 030f 	and.w	r3, r3, #15
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	7912      	ldrb	r2, [r2, #4]
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d901      	bls.n	8009c32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e040      	b.n	8009cb4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da0e      	bge.n	8009c58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	f003 0207 	and.w	r2, r3, #7
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	3310      	adds	r3, #16
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	705a      	strb	r2, [r3, #1]
 8009c56:	e00e      	b.n	8009c76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	f003 0207 	and.w	r2, r3, #7
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d101      	bne.n	8009c96 <HAL_PCD_EP_ClrStall+0x82>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e00e      	b.n	8009cb4 <HAL_PCD_EP_ClrStall+0xa0>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68f9      	ldr	r1, [r7, #12]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f007 fc2c 	bl	8011502 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b096      	sub	sp, #88	; 0x58
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009cc4:	e3ae      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009cce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009cd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	f003 030f 	and.w	r3, r3, #15
 8009cdc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009ce0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f040 8170 	bne.w	8009fca <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cee:	f003 0310 	and.w	r3, r3, #16
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d14d      	bne.n	8009d92 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	81fb      	strh	r3, [r7, #14]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	89fb      	ldrh	r3, [r7, #14]
 8009d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3310      	adds	r3, #16
 8009d1e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	4413      	add	r3, r2
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d4a:	695a      	ldr	r2, [r3, #20]
 8009d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	441a      	add	r2, r3
 8009d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009d56:	2100      	movs	r1, #0
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f00b faf0 	bl	801533e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7b1b      	ldrb	r3, [r3, #12]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 835d 	beq.w	800a424 <PCD_EP_ISR_Handler+0x768>
 8009d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 8358 	bne.w	800a424 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7b1b      	ldrb	r3, [r3, #12]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	b292      	uxth	r2, r2
 8009d86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	731a      	strb	r2, [r3, #12]
 8009d90:	e348      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d98:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009da4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d032      	beq.n	8009e16 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	4413      	add	r3, r2
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6812      	ldr	r2, [r2, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f007 fcb4 	bl	8011758 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	823b      	strh	r3, [r7, #16]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	8a3a      	ldrh	r2, [r7, #16]
 8009e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f00b fa68 	bl	80152e4 <HAL_PCD_SetupStageCallback>
 8009e14:	e306      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009e16:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f280 8302 	bge.w	800a424 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	83fb      	strh	r3, [r7, #30]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	8bfa      	ldrh	r2, [r7, #30]
 8009e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e3a:	b292      	uxth	r2, r2
 8009e3c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	4413      	add	r3, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6812      	ldr	r2, [r2, #0]
 8009e56:	4413      	add	r3, r2
 8009e58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e64:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d019      	beq.n	8009ea2 <PCD_EP_ISR_Handler+0x1e6>
 8009e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d015      	beq.n	8009ea2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e7c:	6959      	ldr	r1, [r3, #20]
 8009e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e80:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e84:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f007 fc66 	bl	8011758 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8e:	695a      	ldr	r2, [r3, #20]
 8009e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	441a      	add	r2, r3
 8009e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e98:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f00b fa33 	bl	8015308 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 82b5 	bne.w	800a424 <PCD_EP_ISR_Handler+0x768>
 8009eba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ebe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ec6:	f000 82ad 	beq.w	800a424 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	61bb      	str	r3, [r7, #24]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	4413      	add	r3, r2
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b3e      	cmp	r3, #62	; 0x3e
 8009f00:	d91d      	bls.n	8009f3e <PCD_EP_ISR_Handler+0x282>
 8009f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	095b      	lsrs	r3, r3, #5
 8009f08:	647b      	str	r3, [r7, #68]	; 0x44
 8009f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <PCD_EP_ISR_Handler+0x260>
 8009f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	029b      	lsls	r3, r3, #10
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	e026      	b.n	8009f8c <PCD_EP_ISR_Handler+0x2d0>
 8009f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <PCD_EP_ISR_Handler+0x2a0>
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	801a      	strh	r2, [r3, #0]
 8009f5a:	e017      	b.n	8009f8c <PCD_EP_ISR_Handler+0x2d0>
 8009f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	647b      	str	r3, [r7, #68]	; 0x44
 8009f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <PCD_EP_ISR_Handler+0x2ba>
 8009f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f72:	3301      	adds	r3, #1
 8009f74:	647b      	str	r3, [r7, #68]	; 0x44
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	029b      	lsls	r3, r3, #10
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4313      	orrs	r3, r2
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9c:	827b      	strh	r3, [r7, #18]
 8009f9e:	8a7b      	ldrh	r3, [r7, #18]
 8009fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fa4:	827b      	strh	r3, [r7, #18]
 8009fa6:	8a7b      	ldrh	r3, [r7, #18]
 8009fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fac:	827b      	strh	r3, [r7, #18]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	8a7b      	ldrh	r3, [r7, #18]
 8009fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	8013      	strh	r3, [r2, #0]
 8009fc8:	e22c      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009fde:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f280 80f6 	bge.w	800a1d4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009ffe:	4013      	ands	r3, r2
 800a000:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
 800a00a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a01a:	b292      	uxth	r2, r2
 800a01c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a01e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	4413      	add	r3, r2
 800a032:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a036:	7b1b      	ldrb	r3, [r3, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d123      	bne.n	800a084 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	4413      	add	r3, r2
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	4413      	add	r3, r2
 800a056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a060:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a064:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 808e 	beq.w	800a18a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a074:	6959      	ldr	r1, [r3, #20]
 800a076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a078:	88da      	ldrh	r2, [r3, #6]
 800a07a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a07e:	f007 fb6b 	bl	8011758 <USB_ReadPMA>
 800a082:	e082      	b.n	800a18a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a086:	78db      	ldrb	r3, [r3, #3]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d10a      	bne.n	800a0a2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a08c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a090:	461a      	mov	r2, r3
 800a092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f9d3 	bl	800a440 <HAL_PCD_EP_DB_Receive>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a0a0:	e073      	b.n	800a18a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	441a      	add	r2, r3
 800a0ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d022      	beq.n	800a146 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a108:	b29b      	uxth	r3, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	00db      	lsls	r3, r3, #3
 800a112:	4413      	add	r3, r2
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	4413      	add	r3, r2
 800a11a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a124:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a128:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d02c      	beq.n	800a18a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a136:	6959      	ldr	r1, [r3, #20]
 800a138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a13a:	891a      	ldrh	r2, [r3, #8]
 800a13c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a140:	f007 fb0a 	bl	8011758 <USB_ReadPMA>
 800a144:	e021      	b.n	800a18a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a14e:	b29b      	uxth	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	00db      	lsls	r3, r3, #3
 800a158:	4413      	add	r3, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	6812      	ldr	r2, [r2, #0]
 800a15e:	4413      	add	r3, r2
 800a160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a16a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a16e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a17c:	6959      	ldr	r1, [r3, #20]
 800a17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a180:	895a      	ldrh	r2, [r3, #10]
 800a182:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a186:	f007 fae7 	bl	8011758 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18c:	69da      	ldr	r2, [r3, #28]
 800a18e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a192:	441a      	add	r2, r3
 800a194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a196:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a19a:	695a      	ldr	r2, [r3, #20]
 800a19c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a1a0:	441a      	add	r2, r3
 800a1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <PCD_EP_ISR_Handler+0x4fe>
 800a1ae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a1b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d206      	bcs.n	800a1c8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f00b f8a1 	bl	8015308 <HAL_PCD_DataOutStageCallback>
 800a1c6:	e005      	b.n	800a1d4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f005 fd95 	bl	800fcfe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a1d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 8121 	beq.w	800a424 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800a1e2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	3310      	adds	r3, #16
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a210:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	461a      	mov	r2, r3
 800a21a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	441a      	add	r2, r3
 800a222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a22a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a22e:	b29b      	uxth	r3, r3
 800a230:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a234:	78db      	ldrb	r3, [r3, #3]
 800a236:	2b01      	cmp	r3, #1
 800a238:	f040 80a2 	bne.w	800a380 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800a23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23e:	2200      	movs	r2, #0
 800a240:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a244:	7b1b      	ldrb	r3, [r3, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8093 	beq.w	800a372 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a24c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a254:	2b00      	cmp	r3, #0
 800a256:	d046      	beq.n	800a2e6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a25a:	785b      	ldrb	r3, [r3, #1]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d126      	bne.n	800a2ae <PCD_EP_ISR_Handler+0x5f2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a26e:	b29b      	uxth	r3, r3
 800a270:	461a      	mov	r2, r3
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	4413      	add	r3, r2
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
 800a278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	00da      	lsls	r2, r3, #3
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	4413      	add	r3, r2
 800a282:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a286:	623b      	str	r3, [r7, #32]
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a292:	b29a      	uxth	r2, r3
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	801a      	strh	r2, [r3, #0]
 800a2ac:	e061      	b.n	800a372 <PCD_EP_ISR_Handler+0x6b6>
 800a2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d15d      	bne.n	800a372 <PCD_EP_ISR_Handler+0x6b6>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	4413      	add	r3, r2
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	00da      	lsls	r2, r3, #3
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	801a      	strh	r2, [r3, #0]
 800a2e4:	e045      	b.n	800a372 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2ee:	785b      	ldrb	r3, [r3, #1]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d126      	bne.n	800a342 <PCD_EP_ISR_Handler+0x686>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a302:	b29b      	uxth	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a308:	4413      	add	r3, r2
 800a30a:	637b      	str	r3, [r7, #52]	; 0x34
 800a30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	00da      	lsls	r2, r3, #3
 800a312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a314:	4413      	add	r3, r2
 800a316:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a31a:	633b      	str	r3, [r7, #48]	; 0x30
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a326:	b29a      	uxth	r2, r3
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	801a      	strh	r2, [r3, #0]
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	801a      	strh	r2, [r3, #0]
 800a340:	e017      	b.n	800a372 <PCD_EP_ISR_Handler+0x6b6>
 800a342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d113      	bne.n	800a372 <PCD_EP_ISR_Handler+0x6b6>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a352:	b29b      	uxth	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a358:	4413      	add	r3, r2
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a35c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	00da      	lsls	r2, r3, #3
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	4413      	add	r3, r2
 800a366:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	2200      	movs	r2, #0
 800a370:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f00a ffe0 	bl	801533e <HAL_PCD_DataInStageCallback>
 800a37e:	e051      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d144      	bne.n	800a416 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a394:	b29b      	uxth	r3, r3
 800a396:	461a      	mov	r2, r3
 800a398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6812      	ldr	r2, [r2, #0]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d907      	bls.n	800a3d0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800a3c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a3c8:	1ad2      	subs	r2, r2, r3
 800a3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3cc:	619a      	str	r2, [r3, #24]
 800a3ce:	e002      	b.n	800a3d6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a3d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f00a ffaa 	bl	801533e <HAL_PCD_DataInStageCallback>
 800a3ea:	e01b      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ee:	695a      	ldr	r2, [r3, #20]
 800a3f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a3f4:	441a      	add	r2, r3
 800a3f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3fc:	69da      	ldr	r2, [r3, #28]
 800a3fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a402:	441a      	add	r2, r3
 800a404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a406:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a40e:	4618      	mov	r0, r3
 800a410:	f005 fc75 	bl	800fcfe <USB_EPStartXfer>
 800a414:	e006      	b.n	800a424 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a416:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a41a:	461a      	mov	r2, r3
 800a41c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f917 	bl	800a652 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	b21b      	sxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	f6ff ac48 	blt.w	8009cc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3758      	adds	r7, #88	; 0x58
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d07c      	beq.n	800a552 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a460:	b29b      	uxth	r3, r3
 800a462:	461a      	mov	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	4413      	add	r3, r2
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	6812      	ldr	r2, [r2, #0]
 800a470:	4413      	add	r3, r2
 800a472:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a47c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	8b7b      	ldrh	r3, [r7, #26]
 800a484:	429a      	cmp	r2, r3
 800a486:	d306      	bcc.n	800a496 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	699a      	ldr	r2, [r3, #24]
 800a48c:	8b7b      	ldrh	r3, [r7, #26]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	619a      	str	r2, [r3, #24]
 800a494:	e002      	b.n	800a49c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2200      	movs	r2, #0
 800a49a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d123      	bne.n	800a4ec <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4be:	833b      	strh	r3, [r7, #24]
 800a4c0:	8b3b      	ldrh	r3, [r7, #24]
 800a4c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4c6:	833b      	strh	r3, [r7, #24]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	441a      	add	r2, r3
 800a4d6:	8b3b      	ldrh	r3, [r7, #24]
 800a4d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a4ec:	88fb      	ldrh	r3, [r7, #6]
 800a4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d01f      	beq.n	800a536 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a50c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a510:	82fb      	strh	r3, [r7, #22]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	441a      	add	r2, r3
 800a520:	8afb      	ldrh	r3, [r7, #22]
 800a522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a52a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a52e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a532:	b29b      	uxth	r3, r3
 800a534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a536:	8b7b      	ldrh	r3, [r7, #26]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 8085 	beq.w	800a648 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	6959      	ldr	r1, [r3, #20]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	891a      	ldrh	r2, [r3, #8]
 800a54a:	8b7b      	ldrh	r3, [r7, #26]
 800a54c:	f007 f904 	bl	8011758 <USB_ReadPMA>
 800a550:	e07a      	b.n	800a648 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	4413      	add	r3, r2
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	4413      	add	r3, r2
 800a56c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a576:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	699a      	ldr	r2, [r3, #24]
 800a57c:	8b7b      	ldrh	r3, [r7, #26]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d306      	bcc.n	800a590 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	8b7b      	ldrh	r3, [r7, #26]
 800a588:	1ad2      	subs	r2, r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	619a      	str	r2, [r3, #24]
 800a58e:	e002      	b.n	800a596 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2200      	movs	r2, #0
 800a594:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d123      	bne.n	800a5e6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b8:	83fb      	strh	r3, [r7, #30]
 800a5ba:	8bfb      	ldrh	r3, [r7, #30]
 800a5bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5c0:	83fb      	strh	r3, [r7, #30]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	441a      	add	r2, r3
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d11f      	bne.n	800a630 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b29b      	uxth	r3, r3
 800a602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60a:	83bb      	strh	r3, [r7, #28]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	441a      	add	r2, r3
 800a61a:	8bbb      	ldrh	r3, [r7, #28]
 800a61c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a630:	8b7b      	ldrh	r3, [r7, #26]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d008      	beq.n	800a648 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	6959      	ldr	r1, [r3, #20]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	895a      	ldrh	r2, [r3, #10]
 800a642:	8b7b      	ldrh	r3, [r7, #26]
 800a644:	f007 f888 	bl	8011758 <USB_ReadPMA>
    }
  }

  return count;
 800a648:	8b7b      	ldrh	r3, [r7, #26]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b0a4      	sub	sp, #144	; 0x90
 800a656:	af00      	add	r7, sp, #0
 800a658:	60f8      	str	r0, [r7, #12]
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	4613      	mov	r3, r2
 800a65e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a660:	88fb      	ldrh	r3, [r7, #6]
 800a662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 81db 	beq.w	800aa22 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a674:	b29b      	uxth	r3, r3
 800a676:	461a      	mov	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	4413      	add	r3, r2
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	4413      	add	r3, r2
 800a686:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a690:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	699a      	ldr	r2, [r3, #24]
 800a698:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d907      	bls.n	800a6b0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	699a      	ldr	r2, [r3, #24]
 800a6a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a6a8:	1ad2      	subs	r2, r2, r3
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	619a      	str	r2, [r3, #24]
 800a6ae:	e002      	b.n	800a6b6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 80b9 	bne.w	800a832 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d126      	bne.n	800a716 <HAL_PCD_EP_DB_Transmit+0xc4>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	461a      	mov	r2, r3
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	4413      	add	r3, r2
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	00da      	lsls	r2, r3, #3
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	801a      	strh	r2, [r3, #0]
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a70e:	b29a      	uxth	r2, r3
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	801a      	strh	r2, [r3, #0]
 800a714:	e01a      	b.n	800a74c <HAL_PCD_EP_DB_Transmit+0xfa>
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d116      	bne.n	800a74c <HAL_PCD_EP_DB_Transmit+0xfa>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	637b      	str	r3, [r7, #52]	; 0x34
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	461a      	mov	r2, r3
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	4413      	add	r3, r2
 800a734:	637b      	str	r3, [r7, #52]	; 0x34
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	00da      	lsls	r2, r3, #3
 800a73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73e:	4413      	add	r3, r2
 800a740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a744:	633b      	str	r3, [r7, #48]	; 0x30
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	2200      	movs	r2, #0
 800a74a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	785b      	ldrb	r3, [r3, #1]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d126      	bne.n	800a7a8 <HAL_PCD_EP_DB_Transmit+0x156>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	61fb      	str	r3, [r7, #28]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a768:	b29b      	uxth	r3, r3
 800a76a:	461a      	mov	r2, r3
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	61fb      	str	r3, [r7, #28]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	00da      	lsls	r2, r3, #3
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	4413      	add	r3, r2
 800a77c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a780:	61bb      	str	r3, [r7, #24]
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	b29b      	uxth	r3, r3
 800a788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	801a      	strh	r2, [r3, #0]
 800a7a6:	e017      	b.n	800a7d8 <HAL_PCD_EP_DB_Transmit+0x186>
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	785b      	ldrb	r3, [r3, #1]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d113      	bne.n	800a7d8 <HAL_PCD_EP_DB_Transmit+0x186>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	4413      	add	r3, r2
 800a7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	00da      	lsls	r2, r3, #3
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7d0:	623b      	str	r3, [r7, #32]
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f00a fdad 	bl	801533e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a7e4:	88fb      	ldrh	r3, [r7, #6]
 800a7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 82fa 	beq.w	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29b      	uxth	r3, r3
 800a802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a80a:	82fb      	strh	r3, [r7, #22]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	441a      	add	r2, r3
 800a81a:	8afb      	ldrh	r3, [r7, #22]
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]
 800a830:	e2d8      	b.n	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a832:	88fb      	ldrh	r3, [r7, #6]
 800a834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d021      	beq.n	800a880 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	461a      	mov	r2, r3
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a856:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	441a      	add	r2, r3
 800a868:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a86c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a886:	2b01      	cmp	r3, #1
 800a888:	f040 82ac 	bne.w	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	695a      	ldr	r2, [r3, #20]
 800a890:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a894:	441a      	add	r2, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	69da      	ldr	r2, [r3, #28]
 800a89e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a8a2:	441a      	add	r2, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	6a1a      	ldr	r2, [r3, #32]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d30b      	bcc.n	800a8cc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	6a1a      	ldr	r2, [r3, #32]
 800a8c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8c4:	1ad2      	subs	r2, r2, r3
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	621a      	str	r2, [r3, #32]
 800a8ca:	e017      	b.n	800a8fc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d108      	bne.n	800a8e6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a8d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a8d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a8e4:	e00a      	b.n	800a8fc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d165      	bne.n	800a9d0 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a912:	b29b      	uxth	r3, r3
 800a914:	461a      	mov	r2, r3
 800a916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a918:	4413      	add	r3, r2
 800a91a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	00da      	lsls	r2, r3, #3
 800a922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a924:	4413      	add	r3, r2
 800a926:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a92a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a936:	b29a      	uxth	r2, r3
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	801a      	strh	r2, [r3, #0]
 800a93c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a940:	2b3e      	cmp	r3, #62	; 0x3e
 800a942:	d91d      	bls.n	800a980 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a94c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <HAL_PCD_EP_DB_Transmit+0x30c>
 800a958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95a:	3b01      	subs	r3, #1
 800a95c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	b29a      	uxth	r2, r3
 800a964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a966:	b29b      	uxth	r3, r3
 800a968:	029b      	lsls	r3, r3, #10
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	4313      	orrs	r3, r2
 800a96e:	b29b      	uxth	r3, r3
 800a970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a978:	b29a      	uxth	r2, r3
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	801a      	strh	r2, [r3, #0]
 800a97e:	e044      	b.n	800aa0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <HAL_PCD_EP_DB_Transmit+0x34c>
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a996:	b29a      	uxth	r2, r3
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	e035      	b.n	800aa0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a99e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d002      	beq.n	800a9b8 <HAL_PCD_EP_DB_Transmit+0x366>
 800a9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	029b      	lsls	r3, r3, #10
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	801a      	strh	r2, [r3, #0]
 800a9ce:	e01c      	b.n	800aa0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	785b      	ldrb	r3, [r3, #1]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d118      	bne.n	800aa0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ec:	4413      	add	r3, r2
 800a9ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	00da      	lsls	r2, r3, #3
 800a9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9fe:	643b      	str	r3, [r7, #64]	; 0x40
 800aa00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa08:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6959      	ldr	r1, [r3, #20]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	891a      	ldrh	r2, [r3, #8]
 800aa16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	f006 fe5a 	bl	80116d4 <USB_WritePMA>
 800aa20:	e1e0      	b.n	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	4413      	add	r3, r2
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	6812      	ldr	r2, [r2, #0]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d307      	bcc.n	800aa66 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	619a      	str	r2, [r3, #24]
 800aa64:	e002      	b.n	800aa6c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f040 80c0 	bne.w	800abf6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d126      	bne.n	800aacc <HAL_PCD_EP_DB_Transmit+0x47a>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa92:	4413      	add	r3, r2
 800aa94:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	00da      	lsls	r2, r3, #3
 800aa9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aaa4:	67bb      	str	r3, [r7, #120]	; 0x78
 800aaa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aac8:	801a      	strh	r2, [r3, #0]
 800aaca:	e01a      	b.n	800ab02 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	785b      	ldrb	r3, [r3, #1]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d116      	bne.n	800ab02 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	667b      	str	r3, [r7, #100]	; 0x64
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aae8:	4413      	add	r3, r2
 800aaea:	667b      	str	r3, [r7, #100]	; 0x64
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	00da      	lsls	r2, r3, #3
 800aaf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aafa:	663b      	str	r3, [r7, #96]	; 0x60
 800aafc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aafe:	2200      	movs	r2, #0
 800ab00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	677b      	str	r3, [r7, #116]	; 0x74
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d12b      	bne.n	800ab68 <HAL_PCD_EP_DB_Transmit+0x516>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	461a      	mov	r2, r3
 800ab22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab24:	4413      	add	r3, r2
 800ab26:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	00da      	lsls	r2, r3, #3
 800ab2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab30:	4413      	add	r3, r2
 800ab32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab4c:	801a      	strh	r2, [r3, #0]
 800ab4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab64:	801a      	strh	r2, [r3, #0]
 800ab66:	e017      	b.n	800ab98 <HAL_PCD_EP_DB_Transmit+0x546>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d113      	bne.n	800ab98 <HAL_PCD_EP_DB_Transmit+0x546>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab7e:	4413      	add	r3, r2
 800ab80:	677b      	str	r3, [r7, #116]	; 0x74
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00da      	lsls	r2, r3, #3
 800ab88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab90:	673b      	str	r3, [r7, #112]	; 0x70
 800ab92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab94:	2200      	movs	r2, #0
 800ab96:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f00a fbcd 	bl	801533e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aba4:	88fb      	ldrh	r3, [r7, #6]
 800aba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f040 811a 	bne.w	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abca:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	441a      	add	r2, r3
 800abdc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800abe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	8013      	strh	r3, [r2, #0]
 800abf4:	e0f6      	b.n	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800abf6:	88fb      	ldrh	r3, [r7, #6]
 800abf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d121      	bne.n	800ac44 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	441a      	add	r2, r3
 800ac2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	f040 80ca 	bne.w	800ade4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	695a      	ldr	r2, [r3, #20]
 800ac54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ac58:	441a      	add	r2, r3
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	69da      	ldr	r2, [r3, #28]
 800ac62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ac66:	441a      	add	r2, r3
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	6a1a      	ldr	r2, [r3, #32]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d30b      	bcc.n	800ac90 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	6a1a      	ldr	r2, [r3, #32]
 800ac84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac88:	1ad2      	subs	r2, r2, r3
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	621a      	str	r2, [r3, #32]
 800ac8e:	e017      	b.n	800acc0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d108      	bne.n	800acaa <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800ac98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ac9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800aca8:	e00a      	b.n	800acc0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2200      	movs	r2, #0
 800acb6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	657b      	str	r3, [r7, #84]	; 0x54
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	785b      	ldrb	r3, [r3, #1]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d165      	bne.n	800ad9a <HAL_PCD_EP_DB_Transmit+0x748>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acdc:	b29b      	uxth	r3, r3
 800acde:	461a      	mov	r2, r3
 800ace0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ace2:	4413      	add	r3, r2
 800ace4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	00da      	lsls	r2, r3, #3
 800acec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acee:	4413      	add	r3, r2
 800acf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acf4:	65bb      	str	r3, [r7, #88]	; 0x58
 800acf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad04:	801a      	strh	r2, [r3, #0]
 800ad06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad0a:	2b3e      	cmp	r3, #62	; 0x3e
 800ad0c:	d91d      	bls.n	800ad4a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800ad0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad12:	095b      	lsrs	r3, r3, #5
 800ad14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad1a:	f003 031f 	and.w	r3, r3, #31
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ad22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad24:	3b01      	subs	r3, #1
 800ad26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	029b      	lsls	r3, r3, #10
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4313      	orrs	r3, r2
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad46:	801a      	strh	r2, [r3, #0]
 800ad48:	e041      	b.n	800adce <HAL_PCD_EP_DB_Transmit+0x77c>
 800ad4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10a      	bne.n	800ad68 <HAL_PCD_EP_DB_Transmit+0x716>
 800ad52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad64:	801a      	strh	r2, [r3, #0]
 800ad66:	e032      	b.n	800adce <HAL_PCD_EP_DB_Transmit+0x77c>
 800ad68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad6c:	085b      	lsrs	r3, r3, #1
 800ad6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <HAL_PCD_EP_DB_Transmit+0x730>
 800ad7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad7e:	3301      	adds	r3, #1
 800ad80:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	029b      	lsls	r3, r3, #10
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	4313      	orrs	r3, r2
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	e019      	b.n	800adce <HAL_PCD_EP_DB_Transmit+0x77c>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d115      	bne.n	800adce <HAL_PCD_EP_DB_Transmit+0x77c>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adaa:	b29b      	uxth	r3, r3
 800adac:	461a      	mov	r2, r3
 800adae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb0:	4413      	add	r3, r2
 800adb2:	657b      	str	r3, [r7, #84]	; 0x54
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	00da      	lsls	r2, r3, #3
 800adba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adbc:	4413      	add	r3, r2
 800adbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adc2:	653b      	str	r3, [r7, #80]	; 0x50
 800adc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc8:	b29a      	uxth	r2, r3
 800adca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6959      	ldr	r1, [r3, #20]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	895a      	ldrh	r2, [r3, #10]
 800adda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f006 fc78 	bl	80116d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adfe:	82bb      	strh	r3, [r7, #20]
 800ae00:	8abb      	ldrh	r3, [r7, #20]
 800ae02:	f083 0310 	eor.w	r3, r3, #16
 800ae06:	82bb      	strh	r3, [r7, #20]
 800ae08:	8abb      	ldrh	r3, [r7, #20]
 800ae0a:	f083 0320 	eor.w	r3, r3, #32
 800ae0e:	82bb      	strh	r3, [r7, #20]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	461a      	mov	r2, r3
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	441a      	add	r2, r3
 800ae1e:	8abb      	ldrh	r3, [r7, #20]
 800ae20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3790      	adds	r7, #144	; 0x90
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b087      	sub	sp, #28
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	817b      	strh	r3, [r7, #10]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ae50:	897b      	ldrh	r3, [r7, #10]
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae5c:	897b      	ldrh	r3, [r7, #10]
 800ae5e:	f003 0207 	and.w	r2, r3, #7
 800ae62:	4613      	mov	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	3310      	adds	r3, #16
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	4413      	add	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e009      	b.n	800ae88 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ae74:	897a      	ldrh	r2, [r7, #10]
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ae88:	893b      	ldrh	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d107      	bne.n	800ae9e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2200      	movs	r2, #0
 800ae92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	80da      	strh	r2, [r3, #6]
 800ae9c:	e00b      	b.n	800aeb6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2201      	movs	r2, #1
 800aea2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	0c1b      	lsrs	r3, r3, #16
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	371c      	adds	r7, #28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f043 0302 	orr.w	r3, r3, #2
 800af02:	b29a      	uxth	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d141      	bne.n	800afaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af26:	4b4b      	ldr	r3, [pc, #300]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af32:	d131      	bne.n	800af98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af34:	4b47      	ldr	r3, [pc, #284]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af3a:	4a46      	ldr	r2, [pc, #280]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800af44:	4b43      	ldr	r3, [pc, #268]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af4c:	4a41      	ldr	r2, [pc, #260]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800af54:	4b40      	ldr	r3, [pc, #256]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2232      	movs	r2, #50	; 0x32
 800af5a:	fb02 f303 	mul.w	r3, r2, r3
 800af5e:	4a3f      	ldr	r2, [pc, #252]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af60:	fba2 2303 	umull	r2, r3, r2, r3
 800af64:	0c9b      	lsrs	r3, r3, #18
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af6a:	e002      	b.n	800af72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3b01      	subs	r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af72:	4b38      	ldr	r3, [pc, #224]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af7e:	d102      	bne.n	800af86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f2      	bne.n	800af6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af86:	4b33      	ldr	r3, [pc, #204]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af92:	d158      	bne.n	800b046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e057      	b.n	800b048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af98:	4b2e      	ldr	r3, [pc, #184]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af9e:	4a2d      	ldr	r2, [pc, #180]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800afa8:	e04d      	b.n	800b046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb0:	d141      	bne.n	800b036 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800afb2:	4b28      	ldr	r3, [pc, #160]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afbe:	d131      	bne.n	800b024 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afc0:	4b24      	ldr	r3, [pc, #144]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afc6:	4a23      	ldr	r2, [pc, #140]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800afd0:	4b20      	ldr	r3, [pc, #128]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800afd8:	4a1e      	ldr	r2, [pc, #120]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800afe0:	4b1d      	ldr	r3, [pc, #116]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2232      	movs	r2, #50	; 0x32
 800afe6:	fb02 f303 	mul.w	r3, r2, r3
 800afea:	4a1c      	ldr	r2, [pc, #112]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800afec:	fba2 2303 	umull	r2, r3, r2, r3
 800aff0:	0c9b      	lsrs	r3, r3, #18
 800aff2:	3301      	adds	r3, #1
 800aff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aff6:	e002      	b.n	800affe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	3b01      	subs	r3, #1
 800affc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800affe:	4b15      	ldr	r3, [pc, #84]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00a:	d102      	bne.n	800b012 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f2      	bne.n	800aff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b012:	4b10      	ldr	r3, [pc, #64]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b01e:	d112      	bne.n	800b046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	e011      	b.n	800b048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b024:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b02a:	4a0a      	ldr	r2, [pc, #40]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b02c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b034:	e007      	b.n	800b046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b03e:	4a05      	ldr	r2, [pc, #20]	; (800b054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b044:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	40007000 	.word	0x40007000
 800b058:	200001c4 	.word	0x200001c4
 800b05c:	431bde83 	.word	0x431bde83

0800b060 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	4a04      	ldr	r2, [pc, #16]	; (800b07c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b06a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b06e:	6093      	str	r3, [r2, #8]
}
 800b070:	bf00      	nop
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	40007000 	.word	0x40007000

0800b080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b088      	sub	sp, #32
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e2fe      	b.n	800b690 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d075      	beq.n	800b18a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b09e:	4b97      	ldr	r3, [pc, #604]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f003 030c 	and.w	r3, r3, #12
 800b0a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0a8:	4b94      	ldr	r3, [pc, #592]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f003 0303 	and.w	r3, r3, #3
 800b0b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b0c      	cmp	r3, #12
 800b0b6:	d102      	bne.n	800b0be <HAL_RCC_OscConfig+0x3e>
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d002      	beq.n	800b0c4 <HAL_RCC_OscConfig+0x44>
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10b      	bne.n	800b0dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0c4:	4b8d      	ldr	r3, [pc, #564]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d05b      	beq.n	800b188 <HAL_RCC_OscConfig+0x108>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d157      	bne.n	800b188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e2d9      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e4:	d106      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x74>
 800b0e6:	4b85      	ldr	r3, [pc, #532]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a84      	ldr	r2, [pc, #528]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b0ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	e01d      	b.n	800b130 <HAL_RCC_OscConfig+0xb0>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0fc:	d10c      	bne.n	800b118 <HAL_RCC_OscConfig+0x98>
 800b0fe:	4b7f      	ldr	r3, [pc, #508]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a7e      	ldr	r2, [pc, #504]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	4b7c      	ldr	r3, [pc, #496]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a7b      	ldr	r2, [pc, #492]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	e00b      	b.n	800b130 <HAL_RCC_OscConfig+0xb0>
 800b118:	4b78      	ldr	r3, [pc, #480]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a77      	ldr	r2, [pc, #476]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b11e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	4b75      	ldr	r3, [pc, #468]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a74      	ldr	r2, [pc, #464]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b12a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b12e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d013      	beq.n	800b160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b138:	f7fa fdd8 	bl	8005cec <HAL_GetTick>
 800b13c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b13e:	e008      	b.n	800b152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b140:	f7fa fdd4 	bl	8005cec <HAL_GetTick>
 800b144:	4602      	mov	r2, r0
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	2b64      	cmp	r3, #100	; 0x64
 800b14c:	d901      	bls.n	800b152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e29e      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b152:	4b6a      	ldr	r3, [pc, #424]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0f0      	beq.n	800b140 <HAL_RCC_OscConfig+0xc0>
 800b15e:	e014      	b.n	800b18a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b160:	f7fa fdc4 	bl	8005cec <HAL_GetTick>
 800b164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b166:	e008      	b.n	800b17a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b168:	f7fa fdc0 	bl	8005cec <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b64      	cmp	r3, #100	; 0x64
 800b174:	d901      	bls.n	800b17a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e28a      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b17a:	4b60      	ldr	r3, [pc, #384]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1f0      	bne.n	800b168 <HAL_RCC_OscConfig+0xe8>
 800b186:	e000      	b.n	800b18a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d075      	beq.n	800b282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b196:	4b59      	ldr	r3, [pc, #356]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f003 030c 	and.w	r3, r3, #12
 800b19e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1a0:	4b56      	ldr	r3, [pc, #344]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0303 	and.w	r3, r3, #3
 800b1a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	2b0c      	cmp	r3, #12
 800b1ae:	d102      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x136>
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d002      	beq.n	800b1bc <HAL_RCC_OscConfig+0x13c>
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b04      	cmp	r3, #4
 800b1ba:	d11f      	bne.n	800b1fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1bc:	4b4f      	ldr	r3, [pc, #316]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <HAL_RCC_OscConfig+0x154>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e25d      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1d4:	4b49      	ldr	r3, [pc, #292]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	061b      	lsls	r3, r3, #24
 800b1e2:	4946      	ldr	r1, [pc, #280]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b1e8:	4b45      	ldr	r3, [pc, #276]	; (800b300 <HAL_RCC_OscConfig+0x280>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fa fd31 	bl	8005c54 <HAL_InitTick>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d043      	beq.n	800b280 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e249      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d023      	beq.n	800b24c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b204:	4b3d      	ldr	r3, [pc, #244]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a3c      	ldr	r2, [pc, #240]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b20a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b20e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b210:	f7fa fd6c 	bl	8005cec <HAL_GetTick>
 800b214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b216:	e008      	b.n	800b22a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b218:	f7fa fd68 	bl	8005cec <HAL_GetTick>
 800b21c:	4602      	mov	r2, r0
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	2b02      	cmp	r3, #2
 800b224:	d901      	bls.n	800b22a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e232      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b22a:	4b34      	ldr	r3, [pc, #208]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0f0      	beq.n	800b218 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b236:	4b31      	ldr	r3, [pc, #196]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	061b      	lsls	r3, r3, #24
 800b244:	492d      	ldr	r1, [pc, #180]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b246:	4313      	orrs	r3, r2
 800b248:	604b      	str	r3, [r1, #4]
 800b24a:	e01a      	b.n	800b282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b24c:	4b2b      	ldr	r3, [pc, #172]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a2a      	ldr	r2, [pc, #168]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b258:	f7fa fd48 	bl	8005cec <HAL_GetTick>
 800b25c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b25e:	e008      	b.n	800b272 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b260:	f7fa fd44 	bl	8005cec <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e20e      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b272:	4b22      	ldr	r3, [pc, #136]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1f0      	bne.n	800b260 <HAL_RCC_OscConfig+0x1e0>
 800b27e:	e000      	b.n	800b282 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d041      	beq.n	800b312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01c      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b296:	4b19      	ldr	r3, [pc, #100]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b29c:	4a17      	ldr	r2, [pc, #92]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b29e:	f043 0301 	orr.w	r3, r3, #1
 800b2a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2a6:	f7fa fd21 	bl	8005cec <HAL_GetTick>
 800b2aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b2ac:	e008      	b.n	800b2c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2ae:	f7fa fd1d 	bl	8005cec <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d901      	bls.n	800b2c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e1e7      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b2c0:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b2c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2c6:	f003 0302 	and.w	r3, r3, #2
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d0ef      	beq.n	800b2ae <HAL_RCC_OscConfig+0x22e>
 800b2ce:	e020      	b.n	800b312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2d0:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b2d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2d6:	4a09      	ldr	r2, [pc, #36]	; (800b2fc <HAL_RCC_OscConfig+0x27c>)
 800b2d8:	f023 0301 	bic.w	r3, r3, #1
 800b2dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2e0:	f7fa fd04 	bl	8005cec <HAL_GetTick>
 800b2e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b2e6:	e00d      	b.n	800b304 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2e8:	f7fa fd00 	bl	8005cec <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d906      	bls.n	800b304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e1ca      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
 800b2fa:	bf00      	nop
 800b2fc:	40021000 	.word	0x40021000
 800b300:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b304:	4b8c      	ldr	r3, [pc, #560]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b30a:	f003 0302 	and.w	r3, r3, #2
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1ea      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 80a6 	beq.w	800b46c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b320:	2300      	movs	r3, #0
 800b322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b324:	4b84      	ldr	r3, [pc, #528]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_RCC_OscConfig+0x2b4>
 800b330:	2301      	movs	r3, #1
 800b332:	e000      	b.n	800b336 <HAL_RCC_OscConfig+0x2b6>
 800b334:	2300      	movs	r3, #0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00d      	beq.n	800b356 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b33a:	4b7f      	ldr	r3, [pc, #508]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b33e:	4a7e      	ldr	r2, [pc, #504]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b344:	6593      	str	r3, [r2, #88]	; 0x58
 800b346:	4b7c      	ldr	r3, [pc, #496]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b352:	2301      	movs	r3, #1
 800b354:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b356:	4b79      	ldr	r3, [pc, #484]	; (800b53c <HAL_RCC_OscConfig+0x4bc>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d118      	bne.n	800b394 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b362:	4b76      	ldr	r3, [pc, #472]	; (800b53c <HAL_RCC_OscConfig+0x4bc>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a75      	ldr	r2, [pc, #468]	; (800b53c <HAL_RCC_OscConfig+0x4bc>)
 800b368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b36c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b36e:	f7fa fcbd 	bl	8005cec <HAL_GetTick>
 800b372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b374:	e008      	b.n	800b388 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b376:	f7fa fcb9 	bl	8005cec <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	2b02      	cmp	r3, #2
 800b382:	d901      	bls.n	800b388 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e183      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b388:	4b6c      	ldr	r3, [pc, #432]	; (800b53c <HAL_RCC_OscConfig+0x4bc>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0f0      	beq.n	800b376 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d108      	bne.n	800b3ae <HAL_RCC_OscConfig+0x32e>
 800b39c:	4b66      	ldr	r3, [pc, #408]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a2:	4a65      	ldr	r2, [pc, #404]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3a4:	f043 0301 	orr.w	r3, r3, #1
 800b3a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3ac:	e024      	b.n	800b3f8 <HAL_RCC_OscConfig+0x378>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	2b05      	cmp	r3, #5
 800b3b4:	d110      	bne.n	800b3d8 <HAL_RCC_OscConfig+0x358>
 800b3b6:	4b60      	ldr	r3, [pc, #384]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3bc:	4a5e      	ldr	r2, [pc, #376]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3be:	f043 0304 	orr.w	r3, r3, #4
 800b3c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3c6:	4b5c      	ldr	r3, [pc, #368]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3cc:	4a5a      	ldr	r2, [pc, #360]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3ce:	f043 0301 	orr.w	r3, r3, #1
 800b3d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3d6:	e00f      	b.n	800b3f8 <HAL_RCC_OscConfig+0x378>
 800b3d8:	4b57      	ldr	r3, [pc, #348]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3de:	4a56      	ldr	r2, [pc, #344]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3e0:	f023 0301 	bic.w	r3, r3, #1
 800b3e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3e8:	4b53      	ldr	r3, [pc, #332]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ee:	4a52      	ldr	r2, [pc, #328]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b3f0:	f023 0304 	bic.w	r3, r3, #4
 800b3f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d016      	beq.n	800b42e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b400:	f7fa fc74 	bl	8005cec <HAL_GetTick>
 800b404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b406:	e00a      	b.n	800b41e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b408:	f7fa fc70 	bl	8005cec <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	f241 3288 	movw	r2, #5000	; 0x1388
 800b416:	4293      	cmp	r3, r2
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e138      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b41e:	4b46      	ldr	r3, [pc, #280]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0ed      	beq.n	800b408 <HAL_RCC_OscConfig+0x388>
 800b42c:	e015      	b.n	800b45a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b42e:	f7fa fc5d 	bl	8005cec <HAL_GetTick>
 800b432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b434:	e00a      	b.n	800b44c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b436:	f7fa fc59 	bl	8005cec <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	f241 3288 	movw	r2, #5000	; 0x1388
 800b444:	4293      	cmp	r3, r2
 800b446:	d901      	bls.n	800b44c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e121      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b44c:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1ed      	bne.n	800b436 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b45a:	7ffb      	ldrb	r3, [r7, #31]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d105      	bne.n	800b46c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b460:	4b35      	ldr	r3, [pc, #212]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b464:	4a34      	ldr	r2, [pc, #208]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b46a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	d03c      	beq.n	800b4f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01c      	beq.n	800b4ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b480:	4b2d      	ldr	r3, [pc, #180]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b486:	4a2c      	ldr	r2, [pc, #176]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b488:	f043 0301 	orr.w	r3, r3, #1
 800b48c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b490:	f7fa fc2c 	bl	8005cec <HAL_GetTick>
 800b494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b496:	e008      	b.n	800b4aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b498:	f7fa fc28 	bl	8005cec <HAL_GetTick>
 800b49c:	4602      	mov	r2, r0
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d901      	bls.n	800b4aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e0f2      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b4aa:	4b23      	ldr	r3, [pc, #140]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b4ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0ef      	beq.n	800b498 <HAL_RCC_OscConfig+0x418>
 800b4b8:	e01b      	b.n	800b4f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b4ba:	4b1f      	ldr	r3, [pc, #124]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b4bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4c0:	4a1d      	ldr	r2, [pc, #116]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b4c2:	f023 0301 	bic.w	r3, r3, #1
 800b4c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4ca:	f7fa fc0f 	bl	8005cec <HAL_GetTick>
 800b4ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b4d0:	e008      	b.n	800b4e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b4d2:	f7fa fc0b 	bl	8005cec <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d901      	bls.n	800b4e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e0d5      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b4e4:	4b14      	ldr	r3, [pc, #80]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b4e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1ef      	bne.n	800b4d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 80c9 	beq.w	800b68e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b4fc:	4b0e      	ldr	r3, [pc, #56]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f003 030c 	and.w	r3, r3, #12
 800b504:	2b0c      	cmp	r3, #12
 800b506:	f000 8083 	beq.w	800b610 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d15e      	bne.n	800b5d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a08      	ldr	r2, [pc, #32]	; (800b538 <HAL_RCC_OscConfig+0x4b8>)
 800b518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b51c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b51e:	f7fa fbe5 	bl	8005cec <HAL_GetTick>
 800b522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b524:	e00c      	b.n	800b540 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b526:	f7fa fbe1 	bl	8005cec <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d905      	bls.n	800b540 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e0ab      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
 800b538:	40021000 	.word	0x40021000
 800b53c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b540:	4b55      	ldr	r3, [pc, #340]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1ec      	bne.n	800b526 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b54c:	4b52      	ldr	r3, [pc, #328]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	4b52      	ldr	r3, [pc, #328]	; (800b69c <HAL_RCC_OscConfig+0x61c>)
 800b552:	4013      	ands	r3, r2
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	6a11      	ldr	r1, [r2, #32]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b55c:	3a01      	subs	r2, #1
 800b55e:	0112      	lsls	r2, r2, #4
 800b560:	4311      	orrs	r1, r2
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b566:	0212      	lsls	r2, r2, #8
 800b568:	4311      	orrs	r1, r2
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b56e:	0852      	lsrs	r2, r2, #1
 800b570:	3a01      	subs	r2, #1
 800b572:	0552      	lsls	r2, r2, #21
 800b574:	4311      	orrs	r1, r2
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b57a:	0852      	lsrs	r2, r2, #1
 800b57c:	3a01      	subs	r2, #1
 800b57e:	0652      	lsls	r2, r2, #25
 800b580:	4311      	orrs	r1, r2
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b586:	06d2      	lsls	r2, r2, #27
 800b588:	430a      	orrs	r2, r1
 800b58a:	4943      	ldr	r1, [pc, #268]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b590:	4b41      	ldr	r3, [pc, #260]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a40      	ldr	r2, [pc, #256]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b59a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b59c:	4b3e      	ldr	r3, [pc, #248]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	4a3d      	ldr	r2, [pc, #244]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b5a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a8:	f7fa fba0 	bl	8005cec <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5b0:	f7fa fb9c 	bl	8005cec <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e066      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5c2:	4b35      	ldr	r3, [pc, #212]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0f0      	beq.n	800b5b0 <HAL_RCC_OscConfig+0x530>
 800b5ce:	e05e      	b.n	800b68e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5d0:	4b31      	ldr	r3, [pc, #196]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a30      	ldr	r2, [pc, #192]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b5d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5dc:	f7fa fb86 	bl	8005cec <HAL_GetTick>
 800b5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5e4:	f7fa fb82 	bl	8005cec <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e04c      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5f6:	4b28      	ldr	r3, [pc, #160]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f0      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b602:	4b25      	ldr	r3, [pc, #148]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	4924      	ldr	r1, [pc, #144]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b608:	4b25      	ldr	r3, [pc, #148]	; (800b6a0 <HAL_RCC_OscConfig+0x620>)
 800b60a:	4013      	ands	r3, r2
 800b60c:	60cb      	str	r3, [r1, #12]
 800b60e:	e03e      	b.n	800b68e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d101      	bne.n	800b61c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e039      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b61c:	4b1e      	ldr	r3, [pc, #120]	; (800b698 <HAL_RCC_OscConfig+0x618>)
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f003 0203 	and.w	r2, r3, #3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d12c      	bne.n	800b68a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	3b01      	subs	r3, #1
 800b63c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b63e:	429a      	cmp	r2, r3
 800b640:	d123      	bne.n	800b68a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b64e:	429a      	cmp	r2, r3
 800b650:	d11b      	bne.n	800b68a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b65e:	429a      	cmp	r2, r3
 800b660:	d113      	bne.n	800b68a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66c:	085b      	lsrs	r3, r3, #1
 800b66e:	3b01      	subs	r3, #1
 800b670:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b672:	429a      	cmp	r2, r3
 800b674:	d109      	bne.n	800b68a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	3b01      	subs	r3, #1
 800b684:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b686:	429a      	cmp	r2, r3
 800b688:	d001      	beq.n	800b68e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3720      	adds	r7, #32
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	40021000 	.word	0x40021000
 800b69c:	019f800c 	.word	0x019f800c
 800b6a0:	feeefffc 	.word	0xfeeefffc

0800b6a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e11e      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b6bc:	4b91      	ldr	r3, [pc, #580]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 030f 	and.w	r3, r3, #15
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d910      	bls.n	800b6ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6ca:	4b8e      	ldr	r3, [pc, #568]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f023 020f 	bic.w	r2, r3, #15
 800b6d2:	498c      	ldr	r1, [pc, #560]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6da:	4b8a      	ldr	r3, [pc, #552]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 030f 	and.w	r3, r3, #15
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d001      	beq.n	800b6ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e106      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d073      	beq.n	800b7e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d129      	bne.n	800b754 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b700:	4b81      	ldr	r3, [pc, #516]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e0f4      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b710:	f000 f99e 	bl	800ba50 <RCC_GetSysClockFreqFromPLLSource>
 800b714:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	4a7c      	ldr	r2, [pc, #496]	; (800b90c <HAL_RCC_ClockConfig+0x268>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d93f      	bls.n	800b79e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b71e:	4b7a      	ldr	r3, [pc, #488]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b732:	2b00      	cmp	r3, #0
 800b734:	d033      	beq.n	800b79e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d12f      	bne.n	800b79e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b73e:	4b72      	ldr	r3, [pc, #456]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b746:	4a70      	ldr	r2, [pc, #448]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b74e:	2380      	movs	r3, #128	; 0x80
 800b750:	617b      	str	r3, [r7, #20]
 800b752:	e024      	b.n	800b79e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d107      	bne.n	800b76c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b75c:	4b6a      	ldr	r3, [pc, #424]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d109      	bne.n	800b77c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e0c6      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b76c:	4b66      	ldr	r3, [pc, #408]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e0be      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b77c:	f000 f8ce 	bl	800b91c <HAL_RCC_GetSysClockFreq>
 800b780:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	4a61      	ldr	r2, [pc, #388]	; (800b90c <HAL_RCC_ClockConfig+0x268>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d909      	bls.n	800b79e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b78a:	4b5f      	ldr	r3, [pc, #380]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b792:	4a5d      	ldr	r2, [pc, #372]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b798:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b79a:	2380      	movs	r3, #128	; 0x80
 800b79c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b79e:	4b5a      	ldr	r3, [pc, #360]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f023 0203 	bic.w	r2, r3, #3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	4957      	ldr	r1, [pc, #348]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7b0:	f7fa fa9c 	bl	8005cec <HAL_GetTick>
 800b7b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7b6:	e00a      	b.n	800b7ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7b8:	f7fa fa98 	bl	8005cec <HAL_GetTick>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d901      	bls.n	800b7ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e095      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7ce:	4b4e      	ldr	r3, [pc, #312]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f003 020c 	and.w	r2, r3, #12
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d1eb      	bne.n	800b7b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0302 	and.w	r3, r3, #2
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d023      	beq.n	800b834 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 0304 	and.w	r3, r3, #4
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d005      	beq.n	800b804 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7f8:	4b43      	ldr	r3, [pc, #268]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	4a42      	ldr	r2, [pc, #264]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b7fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b802:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0308 	and.w	r3, r3, #8
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d007      	beq.n	800b820 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b810:	4b3d      	ldr	r3, [pc, #244]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b818:	4a3b      	ldr	r2, [pc, #236]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b81a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b81e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b820:	4b39      	ldr	r3, [pc, #228]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	4936      	ldr	r1, [pc, #216]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	608b      	str	r3, [r1, #8]
 800b832:	e008      	b.n	800b846 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	2b80      	cmp	r3, #128	; 0x80
 800b838:	d105      	bne.n	800b846 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b83a:	4b33      	ldr	r3, [pc, #204]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	4a32      	ldr	r2, [pc, #200]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b844:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b846:	4b2f      	ldr	r3, [pc, #188]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d21d      	bcs.n	800b890 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b854:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f023 020f 	bic.w	r2, r3, #15
 800b85c:	4929      	ldr	r1, [pc, #164]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	4313      	orrs	r3, r2
 800b862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b864:	f7fa fa42 	bl	8005cec <HAL_GetTick>
 800b868:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b86a:	e00a      	b.n	800b882 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b86c:	f7fa fa3e 	bl	8005cec <HAL_GetTick>
 800b870:	4602      	mov	r2, r0
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	f241 3288 	movw	r2, #5000	; 0x1388
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d901      	bls.n	800b882 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e03b      	b.n	800b8fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b882:	4b20      	ldr	r3, [pc, #128]	; (800b904 <HAL_RCC_ClockConfig+0x260>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 030f 	and.w	r3, r3, #15
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d1ed      	bne.n	800b86c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d008      	beq.n	800b8ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b89c:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	4917      	ldr	r1, [pc, #92]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 0308 	and.w	r3, r3, #8
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d009      	beq.n	800b8ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b8ba:	4b13      	ldr	r3, [pc, #76]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	490f      	ldr	r1, [pc, #60]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b8ce:	f000 f825 	bl	800b91c <HAL_RCC_GetSysClockFreq>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	4b0c      	ldr	r3, [pc, #48]	; (800b908 <HAL_RCC_ClockConfig+0x264>)
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	091b      	lsrs	r3, r3, #4
 800b8da:	f003 030f 	and.w	r3, r3, #15
 800b8de:	490c      	ldr	r1, [pc, #48]	; (800b910 <HAL_RCC_ClockConfig+0x26c>)
 800b8e0:	5ccb      	ldrb	r3, [r1, r3]
 800b8e2:	f003 031f 	and.w	r3, r3, #31
 800b8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ea:	4a0a      	ldr	r2, [pc, #40]	; (800b914 <HAL_RCC_ClockConfig+0x270>)
 800b8ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <HAL_RCC_ClockConfig+0x274>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fa f9ae 	bl	8005c54 <HAL_InitTick>
 800b8f8:	4603      	mov	r3, r0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	40022000 	.word	0x40022000
 800b908:	40021000 	.word	0x40021000
 800b90c:	04c4b400 	.word	0x04c4b400
 800b910:	0801a4e0 	.word	0x0801a4e0
 800b914:	200001c4 	.word	0x200001c4
 800b918:	200001d8 	.word	0x200001d8

0800b91c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b922:	4b2c      	ldr	r3, [pc, #176]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f003 030c 	and.w	r3, r3, #12
 800b92a:	2b04      	cmp	r3, #4
 800b92c:	d102      	bne.n	800b934 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b92e:	4b2a      	ldr	r3, [pc, #168]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	e047      	b.n	800b9c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b934:	4b27      	ldr	r3, [pc, #156]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f003 030c 	and.w	r3, r3, #12
 800b93c:	2b08      	cmp	r3, #8
 800b93e:	d102      	bne.n	800b946 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b940:	4b26      	ldr	r3, [pc, #152]	; (800b9dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800b942:	613b      	str	r3, [r7, #16]
 800b944:	e03e      	b.n	800b9c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b946:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f003 030c 	and.w	r3, r3, #12
 800b94e:	2b0c      	cmp	r3, #12
 800b950:	d136      	bne.n	800b9c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b952:	4b20      	ldr	r3, [pc, #128]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f003 0303 	and.w	r3, r3, #3
 800b95a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b95c:	4b1d      	ldr	r3, [pc, #116]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	091b      	lsrs	r3, r3, #4
 800b962:	f003 030f 	and.w	r3, r3, #15
 800b966:	3301      	adds	r3, #1
 800b968:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d10c      	bne.n	800b98a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b970:	4a1a      	ldr	r2, [pc, #104]	; (800b9dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	fbb2 f3f3 	udiv	r3, r2, r3
 800b978:	4a16      	ldr	r2, [pc, #88]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b97a:	68d2      	ldr	r2, [r2, #12]
 800b97c:	0a12      	lsrs	r2, r2, #8
 800b97e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b982:	fb02 f303 	mul.w	r3, r2, r3
 800b986:	617b      	str	r3, [r7, #20]
      break;
 800b988:	e00c      	b.n	800b9a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b98a:	4a13      	ldr	r2, [pc, #76]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b992:	4a10      	ldr	r2, [pc, #64]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b994:	68d2      	ldr	r2, [r2, #12]
 800b996:	0a12      	lsrs	r2, r2, #8
 800b998:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b99c:	fb02 f303 	mul.w	r3, r2, r3
 800b9a0:	617b      	str	r3, [r7, #20]
      break;
 800b9a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	0e5b      	lsrs	r3, r3, #25
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9bc:	613b      	str	r3, [r7, #16]
 800b9be:	e001      	b.n	800b9c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b9c4:	693b      	ldr	r3, [r7, #16]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	371c      	adds	r7, #28
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	40021000 	.word	0x40021000
 800b9d8:	00f42400 	.word	0x00f42400
 800b9dc:	007a1200 	.word	0x007a1200

0800b9e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b9e4:	4b03      	ldr	r3, [pc, #12]	; (800b9f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	200001c4 	.word	0x200001c4

0800b9f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b9fc:	f7ff fff0 	bl	800b9e0 <HAL_RCC_GetHCLKFreq>
 800ba00:	4602      	mov	r2, r0
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	f003 0307 	and.w	r3, r3, #7
 800ba0c:	4904      	ldr	r1, [pc, #16]	; (800ba20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba0e:	5ccb      	ldrb	r3, [r1, r3]
 800ba10:	f003 031f 	and.w	r3, r3, #31
 800ba14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	40021000 	.word	0x40021000
 800ba20:	0801a4f0 	.word	0x0801a4f0

0800ba24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ba28:	f7ff ffda 	bl	800b9e0 <HAL_RCC_GetHCLKFreq>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	0adb      	lsrs	r3, r3, #11
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	4904      	ldr	r1, [pc, #16]	; (800ba4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ba3a:	5ccb      	ldrb	r3, [r1, r3]
 800ba3c:	f003 031f 	and.w	r3, r3, #31
 800ba40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	40021000 	.word	0x40021000
 800ba4c:	0801a4f0 	.word	0x0801a4f0

0800ba50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba56:	4b1e      	ldr	r3, [pc, #120]	; (800bad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	f003 0303 	and.w	r3, r3, #3
 800ba5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba60:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	091b      	lsrs	r3, r3, #4
 800ba66:	f003 030f 	and.w	r3, r3, #15
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d10c      	bne.n	800ba8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba74:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba7c:	4a14      	ldr	r2, [pc, #80]	; (800bad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba7e:	68d2      	ldr	r2, [r2, #12]
 800ba80:	0a12      	lsrs	r2, r2, #8
 800ba82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ba86:	fb02 f303 	mul.w	r3, r2, r3
 800ba8a:	617b      	str	r3, [r7, #20]
    break;
 800ba8c:	e00c      	b.n	800baa8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba8e:	4a12      	ldr	r2, [pc, #72]	; (800bad8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba96:	4a0e      	ldr	r2, [pc, #56]	; (800bad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba98:	68d2      	ldr	r2, [r2, #12]
 800ba9a:	0a12      	lsrs	r2, r2, #8
 800ba9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800baa0:	fb02 f303 	mul.w	r3, r2, r3
 800baa4:	617b      	str	r3, [r7, #20]
    break;
 800baa6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800baa8:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	0e5b      	lsrs	r3, r3, #25
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	3301      	adds	r3, #1
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bac2:	687b      	ldr	r3, [r7, #4]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	40021000 	.word	0x40021000
 800bad4:	007a1200 	.word	0x007a1200
 800bad8:	00f42400 	.word	0x00f42400

0800badc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bae4:	2300      	movs	r3, #0
 800bae6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bae8:	2300      	movs	r3, #0
 800baea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 8098 	beq.w	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bafa:	2300      	movs	r3, #0
 800bafc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bafe:	4b43      	ldr	r3, [pc, #268]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10d      	bne.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb0a:	4b40      	ldr	r3, [pc, #256]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0e:	4a3f      	ldr	r2, [pc, #252]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb14:	6593      	str	r3, [r2, #88]	; 0x58
 800bb16:	4b3d      	ldr	r3, [pc, #244]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb1e:	60bb      	str	r3, [r7, #8]
 800bb20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb22:	2301      	movs	r3, #1
 800bb24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb26:	4b3a      	ldr	r3, [pc, #232]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a39      	ldr	r2, [pc, #228]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb32:	f7fa f8db 	bl	8005cec <HAL_GetTick>
 800bb36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb38:	e009      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb3a:	f7fa f8d7 	bl	8005cec <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	2b02      	cmp	r3, #2
 800bb46:	d902      	bls.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	74fb      	strb	r3, [r7, #19]
        break;
 800bb4c:	e005      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb4e:	4b30      	ldr	r3, [pc, #192]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0ef      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bb5a:	7cfb      	ldrb	r3, [r7, #19]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d159      	bne.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb60:	4b2a      	ldr	r3, [pc, #168]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d01e      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d019      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb7c:	4b23      	ldr	r3, [pc, #140]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb88:	4b20      	ldr	r3, [pc, #128]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8e:	4a1f      	ldr	r2, [pc, #124]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb98:	4b1c      	ldr	r3, [pc, #112]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9e:	4a1b      	ldr	r2, [pc, #108]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bba8:	4a18      	ldr	r2, [pc, #96]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d016      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbba:	f7fa f897 	bl	8005cec <HAL_GetTick>
 800bbbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbc0:	e00b      	b.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc2:	f7fa f893 	bl	8005cec <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d902      	bls.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	74fb      	strb	r3, [r7, #19]
            break;
 800bbd8:	e006      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0ec      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bbe8:	7cfb      	ldrb	r3, [r7, #19]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10b      	bne.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbee:	4b07      	ldr	r3, [pc, #28]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfc:	4903      	ldr	r1, [pc, #12]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bc04:	e008      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc06:	7cfb      	ldrb	r3, [r7, #19]
 800bc08:	74bb      	strb	r3, [r7, #18]
 800bc0a:	e005      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bc0c:	40021000 	.word	0x40021000
 800bc10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc14:	7cfb      	ldrb	r3, [r7, #19]
 800bc16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc18:	7c7b      	ldrb	r3, [r7, #17]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d105      	bne.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc1e:	4ba6      	ldr	r3, [pc, #664]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc22:	4aa5      	ldr	r2, [pc, #660]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc36:	4ba0      	ldr	r3, [pc, #640]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3c:	f023 0203 	bic.w	r2, r3, #3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	499c      	ldr	r1, [pc, #624]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc46:	4313      	orrs	r3, r2
 800bc48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0302 	and.w	r3, r3, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc58:	4b97      	ldr	r3, [pc, #604]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5e:	f023 020c 	bic.w	r2, r3, #12
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	4994      	ldr	r1, [pc, #592]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bc7a:	4b8f      	ldr	r3, [pc, #572]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	498b      	ldr	r1, [pc, #556]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 0308 	and.w	r3, r3, #8
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00a      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc9c:	4b86      	ldr	r3, [pc, #536]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	4983      	ldr	r1, [pc, #524]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcac:	4313      	orrs	r3, r2
 800bcae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 0320 	and.w	r3, r3, #32
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bcbe:	4b7e      	ldr	r3, [pc, #504]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	497a      	ldr	r1, [pc, #488]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bce0:	4b75      	ldr	r3, [pc, #468]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bce6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	4972      	ldr	r1, [pc, #456]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd02:	4b6d      	ldr	r3, [pc, #436]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	4969      	ldr	r1, [pc, #420]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd24:	4b64      	ldr	r3, [pc, #400]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	4961      	ldr	r1, [pc, #388]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd46:	4b5c      	ldr	r3, [pc, #368]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	4958      	ldr	r1, [pc, #352]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd56:	4313      	orrs	r3, r2
 800bd58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d015      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd68:	4b53      	ldr	r3, [pc, #332]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	4950      	ldr	r1, [pc, #320]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd86:	d105      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd88:	4b4b      	ldr	r3, [pc, #300]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	4a4a      	ldr	r2, [pc, #296]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d015      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bda0:	4b45      	ldr	r3, [pc, #276]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	4942      	ldr	r1, [pc, #264]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdbe:	d105      	bne.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdc0:	4b3d      	ldr	r3, [pc, #244]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	4a3c      	ldr	r2, [pc, #240]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d015      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdd8:	4b37      	ldr	r3, [pc, #220]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde6:	4934      	ldr	r1, [pc, #208]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdf6:	d105      	bne.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdf8:	4b2f      	ldr	r3, [pc, #188]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	4a2e      	ldr	r2, [pc, #184]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d015      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be10:	4b29      	ldr	r3, [pc, #164]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1e:	4926      	ldr	r1, [pc, #152]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be20:	4313      	orrs	r3, r2
 800be22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be2e:	d105      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be30:	4b21      	ldr	r3, [pc, #132]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	4a20      	ldr	r2, [pc, #128]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d015      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be48:	4b1b      	ldr	r3, [pc, #108]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be56:	4918      	ldr	r1, [pc, #96]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be66:	d105      	bne.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be68:	4b13      	ldr	r3, [pc, #76]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	4a12      	ldr	r2, [pc, #72]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d015      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800be80:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8e:	490a      	ldr	r1, [pc, #40]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800be90:	4313      	orrs	r3, r2
 800be92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be9e:	d105      	bne.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	4a04      	ldr	r2, [pc, #16]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800beaa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800beac:	7cbb      	ldrb	r3, [r7, #18]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	40021000 	.word	0x40021000

0800bebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d101      	bne.n	800bece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e09d      	b.n	800c00a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d108      	bne.n	800bee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bede:	d009      	beq.n	800bef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	61da      	str	r2, [r3, #28]
 800bee6:	e005      	b.n	800bef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7f8 fe7a 	bl	8004c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf34:	d902      	bls.n	800bf3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e002      	b.n	800bf42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bf3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bf4a:	d007      	beq.n	800bf5c <HAL_SPI_Init+0xa0>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf54:	d002      	beq.n	800bf5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	f003 0302 	and.w	r3, r3, #2
 800bf76:	431a      	orrs	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	695b      	ldr	r3, [r3, #20]
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	69db      	ldr	r3, [r3, #28]
 800bf90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf94:	431a      	orrs	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9e:	ea42 0103 	orr.w	r1, r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	f003 0204 	and.w	r2, r3, #4
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	f003 0310 	and.w	r3, r3, #16
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfca:	f003 0308 	and.w	r3, r3, #8
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bfd8:	ea42 0103 	orr.w	r1, r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	69da      	ldr	r2, [r3, #28]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b088      	sub	sp, #32
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	603b      	str	r3, [r7, #0]
 800c01e:	4613      	mov	r3, r2
 800c020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_SPI_Transmit+0x22>
 800c030:	2302      	movs	r3, #2
 800c032:	e15f      	b.n	800c2f4 <HAL_SPI_Transmit+0x2e2>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c03c:	f7f9 fe56 	bl	8005cec <HAL_GetTick>
 800c040:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c042:	88fb      	ldrh	r3, [r7, #6]
 800c044:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d002      	beq.n	800c058 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c052:	2302      	movs	r3, #2
 800c054:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c056:	e148      	b.n	800c2ea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <HAL_SPI_Transmit+0x52>
 800c05e:	88fb      	ldrh	r3, [r7, #6]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c068:	e13f      	b.n	800c2ea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2203      	movs	r2, #3
 800c06e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	88fa      	ldrh	r2, [r7, #6]
 800c082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	88fa      	ldrh	r2, [r7, #6]
 800c088:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0b4:	d10f      	bne.n	800c0d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e0:	2b40      	cmp	r3, #64	; 0x40
 800c0e2:	d007      	beq.n	800c0f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0fc:	d94f      	bls.n	800c19e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d002      	beq.n	800c10c <HAL_SPI_Transmit+0xfa>
 800c106:	8afb      	ldrh	r3, [r7, #22]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d142      	bne.n	800c192 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	881a      	ldrh	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	1c9a      	adds	r2, r3, #2
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c126:	b29b      	uxth	r3, r3
 800c128:	3b01      	subs	r3, #1
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c130:	e02f      	b.n	800c192 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d112      	bne.n	800c166 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c144:	881a      	ldrh	r2, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c150:	1c9a      	adds	r2, r3, #2
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	3b01      	subs	r3, #1
 800c15e:	b29a      	uxth	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c164:	e015      	b.n	800c192 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c166:	f7f9 fdc1 	bl	8005cec <HAL_GetTick>
 800c16a:	4602      	mov	r2, r0
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	429a      	cmp	r2, r3
 800c174:	d803      	bhi.n	800c17e <HAL_SPI_Transmit+0x16c>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17c:	d102      	bne.n	800c184 <HAL_SPI_Transmit+0x172>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c190:	e0ab      	b.n	800c2ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c196:	b29b      	uxth	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1ca      	bne.n	800c132 <HAL_SPI_Transmit+0x120>
 800c19c:	e080      	b.n	800c2a0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d002      	beq.n	800c1ac <HAL_SPI_Transmit+0x19a>
 800c1a6:	8afb      	ldrh	r3, [r7, #22]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d174      	bne.n	800c296 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d912      	bls.n	800c1dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	881a      	ldrh	r2, [r3, #0]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	1c9a      	adds	r2, r3, #2
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3b02      	subs	r3, #2
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1da:	e05c      	b.n	800c296 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	330c      	adds	r3, #12
 800c1e6:	7812      	ldrb	r2, [r2, #0]
 800c1e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	1c5a      	adds	r2, r3, #1
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c202:	e048      	b.n	800c296 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d12b      	bne.n	800c26a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c216:	b29b      	uxth	r3, r3
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d912      	bls.n	800c242 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c220:	881a      	ldrh	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22c:	1c9a      	adds	r2, r3, #2
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c236:	b29b      	uxth	r3, r3
 800c238:	3b02      	subs	r3, #2
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c240:	e029      	b.n	800c296 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	330c      	adds	r3, #12
 800c24c:	7812      	ldrb	r2, [r2, #0]
 800c24e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c25e:	b29b      	uxth	r3, r3
 800c260:	3b01      	subs	r3, #1
 800c262:	b29a      	uxth	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c268:	e015      	b.n	800c296 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c26a:	f7f9 fd3f 	bl	8005cec <HAL_GetTick>
 800c26e:	4602      	mov	r2, r0
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d803      	bhi.n	800c282 <HAL_SPI_Transmit+0x270>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c280:	d102      	bne.n	800c288 <HAL_SPI_Transmit+0x276>
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c288:	2303      	movs	r3, #3
 800c28a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c294:	e029      	b.n	800c2ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1b1      	bne.n	800c204 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 fad7 	bl	800c858 <SPI_EndRxTxTransaction>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10a      	bne.n	800c2d4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2be:	2300      	movs	r3, #0
 800c2c0:	613b      	str	r3, [r7, #16]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	613b      	str	r3, [r7, #16]
 800c2d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	77fb      	strb	r3, [r7, #31]
 800c2e0:	e003      	b.n	800c2ea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c2f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3720      	adds	r7, #32
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c314:	2b01      	cmp	r3, #1
 800c316:	d101      	bne.n	800c31c <HAL_SPI_Transmit_DMA+0x20>
 800c318:	2302      	movs	r3, #2
 800c31a:	e0d4      	b.n	800c4c6 <HAL_SPI_Transmit_DMA+0x1ca>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d002      	beq.n	800c336 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c330:	2302      	movs	r3, #2
 800c332:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c334:	e0c2      	b.n	800c4bc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <HAL_SPI_Transmit_DMA+0x46>
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d102      	bne.n	800c348 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c346:	e0b9      	b.n	800c4bc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2203      	movs	r2, #3
 800c34c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	88fa      	ldrh	r2, [r7, #6]
 800c360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	88fa      	ldrh	r2, [r7, #6]
 800c366:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c392:	d10f      	bne.n	800c3b4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b8:	4a45      	ldr	r2, [pc, #276]	; (800c4d0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800c3ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c0:	4a44      	ldr	r2, [pc, #272]	; (800c4d4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800c3c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c8:	4a43      	ldr	r2, [pc, #268]	; (800c4d8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c3ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c3e2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3ec:	d82d      	bhi.n	800c44a <HAL_SPI_Transmit_DMA+0x14e>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3f8:	d127      	bne.n	800c44a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10f      	bne.n	800c428 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c416:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	085b      	lsrs	r3, r3, #1
 800c420:	b29a      	uxth	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c426:	e010      	b.n	800c44a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c436:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	085b      	lsrs	r3, r3, #1
 800c440:	b29b      	uxth	r3, r3
 800c442:	3301      	adds	r3, #1
 800c444:	b29a      	uxth	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	4619      	mov	r1, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	330c      	adds	r3, #12
 800c45a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c460:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c462:	f7fc f87b 	bl	800855c <HAL_DMA_Start_IT>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d008      	beq.n	800c47e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c470:	f043 0210 	orr.w	r2, r3, #16
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c47c:	e01e      	b.n	800c4bc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c488:	2b40      	cmp	r3, #64	; 0x40
 800c48a:	d007      	beq.n	800c49c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c49a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0220 	orr.w	r2, r2, #32
 800c4aa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f042 0202 	orr.w	r2, r2, #2
 800c4ba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0800c5bf 	.word	0x0800c5bf
 800c4d4:	0800c519 	.word	0x0800c519
 800c4d8:	0800c5db 	.word	0x0800c5db

0800c4dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c50c:	bf00      	nop
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c524:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c526:	f7f9 fbe1 	bl	8005cec <HAL_GetTick>
 800c52a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 0320 	and.w	r3, r3, #32
 800c536:	2b20      	cmp	r3, #32
 800c538:	d03b      	beq.n	800c5b2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0220 	bic.w	r2, r2, #32
 800c548:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0202 	bic.w	r2, r2, #2
 800c558:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	2164      	movs	r1, #100	; 0x64
 800c55e:	6978      	ldr	r0, [r7, #20]
 800c560:	f000 f97a 	bl	800c858 <SPI_EndRxTxTransaction>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c56e:	f043 0220 	orr.w	r2, r3, #32
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c57e:	2300      	movs	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	60fb      	str	r3, [r7, #12]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2200      	movs	r2, #0
 800c598:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2201      	movs	r2, #1
 800c59e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d003      	beq.n	800c5b2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c5aa:	6978      	ldr	r0, [r7, #20]
 800c5ac:	f7ff ffaa 	bl	800c504 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c5b0:	e002      	b.n	800c5b8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7ff ff92 	bl	800c4dc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f7ff ff8f 	bl	800c4f0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685a      	ldr	r2, [r3, #4]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f022 0203 	bic.w	r2, r2, #3
 800c5f6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5fc:	f043 0210 	orr.w	r2, r3, #16
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7ff ff79 	bl	800c504 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c612:	bf00      	nop
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	603b      	str	r3, [r7, #0]
 800c628:	4613      	mov	r3, r2
 800c62a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c62c:	f7f9 fb5e 	bl	8005cec <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c634:	1a9b      	subs	r3, r3, r2
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	4413      	add	r3, r2
 800c63a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c63c:	f7f9 fb56 	bl	8005cec <HAL_GetTick>
 800c640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c642:	4b39      	ldr	r3, [pc, #228]	; (800c728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	015b      	lsls	r3, r3, #5
 800c648:	0d1b      	lsrs	r3, r3, #20
 800c64a:	69fa      	ldr	r2, [r7, #28]
 800c64c:	fb02 f303 	mul.w	r3, r2, r3
 800c650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c652:	e054      	b.n	800c6fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d050      	beq.n	800c6fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c65c:	f7f9 fb46 	bl	8005cec <HAL_GetTick>
 800c660:	4602      	mov	r2, r0
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	69fa      	ldr	r2, [r7, #28]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d902      	bls.n	800c672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d13d      	bne.n	800c6ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c68a:	d111      	bne.n	800c6b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c694:	d004      	beq.n	800c6a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c69e:	d107      	bne.n	800c6b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6b8:	d10f      	bne.n	800c6da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e017      	b.n	800c71e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d101      	bne.n	800c6f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	4013      	ands	r3, r2
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	bf0c      	ite	eq
 800c70e:	2301      	moveq	r3, #1
 800c710:	2300      	movne	r3, #0
 800c712:	b2db      	uxtb	r3, r3
 800c714:	461a      	mov	r2, r3
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d19b      	bne.n	800c654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3720      	adds	r7, #32
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	200001c4 	.word	0x200001c4

0800c72c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	; 0x28
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c73e:	f7f9 fad5 	bl	8005cec <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	1a9b      	subs	r3, r3, r2
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	4413      	add	r3, r2
 800c74c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c74e:	f7f9 facd 	bl	8005cec <HAL_GetTick>
 800c752:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	330c      	adds	r3, #12
 800c75a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c75c:	4b3d      	ldr	r3, [pc, #244]	; (800c854 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	00da      	lsls	r2, r3, #3
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	0d1b      	lsrs	r3, r3, #20
 800c76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76e:	fb02 f303 	mul.w	r3, r2, r3
 800c772:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c774:	e060      	b.n	800c838 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c77c:	d107      	bne.n	800c78e <SPI_WaitFifoStateUntilTimeout+0x62>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d104      	bne.n	800c78e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d050      	beq.n	800c838 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c796:	f7f9 faa9 	bl	8005cec <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d902      	bls.n	800c7ac <SPI_WaitFifoStateUntilTimeout+0x80>
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d13d      	bne.n	800c828 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c7ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7c4:	d111      	bne.n	800c7ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7ce:	d004      	beq.n	800c7da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7d8:	d107      	bne.n	800c7ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7f2:	d10f      	bne.n	800c814 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c812:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e010      	b.n	800c84a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	3b01      	subs	r3, #1
 800c836:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	4013      	ands	r3, r2
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	429a      	cmp	r2, r3
 800c846:	d196      	bne.n	800c776 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3728      	adds	r7, #40	; 0x28
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	200001c4 	.word	0x200001c4

0800c858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af02      	add	r7, sp, #8
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff ff5b 	bl	800c72c <SPI_WaitFifoStateUntilTimeout>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d007      	beq.n	800c88c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c880:	f043 0220 	orr.w	r2, r3, #32
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c888:	2303      	movs	r3, #3
 800c88a:	e027      	b.n	800c8dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2200      	movs	r2, #0
 800c894:	2180      	movs	r1, #128	; 0x80
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f7ff fec0 	bl	800c61c <SPI_WaitFlagStateUntilTimeout>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d007      	beq.n	800c8b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8a6:	f043 0220 	orr.w	r2, r3, #32
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e014      	b.n	800c8dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff ff34 	bl	800c72c <SPI_WaitFifoStateUntilTimeout>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d007      	beq.n	800c8da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8ce:	f043 0220 	orr.w	r2, r3, #32
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c8d6:	2303      	movs	r3, #3
 800c8d8:	e000      	b.n	800c8dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e049      	b.n	800c98a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d106      	bne.n	800c910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7f8 fa9e 	bl	8004e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2202      	movs	r2, #2
 800c914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3304      	adds	r3, #4
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f000 ff72 	bl	800d80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d001      	beq.n	800c9ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e04a      	b.n	800ca42 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68da      	ldr	r2, [r3, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f042 0201 	orr.w	r2, r2, #1
 800c9c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a21      	ldr	r2, [pc, #132]	; (800ca50 <HAL_TIM_Base_Start_IT+0xbc>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d018      	beq.n	800ca00 <HAL_TIM_Base_Start_IT+0x6c>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9d6:	d013      	beq.n	800ca00 <HAL_TIM_Base_Start_IT+0x6c>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ca54 <HAL_TIM_Base_Start_IT+0xc0>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00e      	beq.n	800ca00 <HAL_TIM_Base_Start_IT+0x6c>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a1c      	ldr	r2, [pc, #112]	; (800ca58 <HAL_TIM_Base_Start_IT+0xc4>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <HAL_TIM_Base_Start_IT+0x6c>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a1a      	ldr	r2, [pc, #104]	; (800ca5c <HAL_TIM_Base_Start_IT+0xc8>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d004      	beq.n	800ca00 <HAL_TIM_Base_Start_IT+0x6c>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a19      	ldr	r2, [pc, #100]	; (800ca60 <HAL_TIM_Base_Start_IT+0xcc>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d115      	bne.n	800ca2c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689a      	ldr	r2, [r3, #8]
 800ca06:	4b17      	ldr	r3, [pc, #92]	; (800ca64 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca08:	4013      	ands	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b06      	cmp	r3, #6
 800ca10:	d015      	beq.n	800ca3e <HAL_TIM_Base_Start_IT+0xaa>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca18:	d011      	beq.n	800ca3e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f042 0201 	orr.w	r2, r2, #1
 800ca28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca2a:	e008      	b.n	800ca3e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f042 0201 	orr.w	r2, r2, #1
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	e000      	b.n	800ca40 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	40012c00 	.word	0x40012c00
 800ca54:	40000400 	.word	0x40000400
 800ca58:	40000800 	.word	0x40000800
 800ca5c:	40013400 	.word	0x40013400
 800ca60:	40014000 	.word	0x40014000
 800ca64:	00010007 	.word	0x00010007

0800ca68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68da      	ldr	r2, [r3, #12]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f022 0201 	bic.w	r2, r2, #1
 800ca7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6a1a      	ldr	r2, [r3, #32]
 800ca86:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10f      	bne.n	800cab0 <HAL_TIM_Base_Stop_IT+0x48>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6a1a      	ldr	r2, [r3, #32]
 800ca96:	f244 4344 	movw	r3, #17476	; 0x4444
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d107      	bne.n	800cab0 <HAL_TIM_Base_Stop_IT+0x48>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f022 0201 	bic.w	r2, r2, #1
 800caae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e049      	b.n	800cb6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d106      	bne.n	800caf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7f8 f8fd 	bl	8004cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2202      	movs	r2, #2
 800caf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	3304      	adds	r3, #4
 800cb02:	4619      	mov	r1, r3
 800cb04:	4610      	mov	r0, r2
 800cb06:	f000 fe81 	bl	800d80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d109      	bne.n	800cb9c <HAL_TIM_PWM_Start_IT+0x28>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	bf14      	ite	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	2300      	moveq	r3, #0
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	e03c      	b.n	800cc16 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d109      	bne.n	800cbb6 <HAL_TIM_PWM_Start_IT+0x42>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	bf14      	ite	ne
 800cbae:	2301      	movne	r3, #1
 800cbb0:	2300      	moveq	r3, #0
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	e02f      	b.n	800cc16 <HAL_TIM_PWM_Start_IT+0xa2>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b08      	cmp	r3, #8
 800cbba:	d109      	bne.n	800cbd0 <HAL_TIM_PWM_Start_IT+0x5c>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	bf14      	ite	ne
 800cbc8:	2301      	movne	r3, #1
 800cbca:	2300      	moveq	r3, #0
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	e022      	b.n	800cc16 <HAL_TIM_PWM_Start_IT+0xa2>
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	2b0c      	cmp	r3, #12
 800cbd4:	d109      	bne.n	800cbea <HAL_TIM_PWM_Start_IT+0x76>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	bf14      	ite	ne
 800cbe2:	2301      	movne	r3, #1
 800cbe4:	2300      	moveq	r3, #0
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	e015      	b.n	800cc16 <HAL_TIM_PWM_Start_IT+0xa2>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	2b10      	cmp	r3, #16
 800cbee:	d109      	bne.n	800cc04 <HAL_TIM_PWM_Start_IT+0x90>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	bf14      	ite	ne
 800cbfc:	2301      	movne	r3, #1
 800cbfe:	2300      	moveq	r3, #0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	e008      	b.n	800cc16 <HAL_TIM_PWM_Start_IT+0xa2>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	bf14      	ite	ne
 800cc10:	2301      	movne	r3, #1
 800cc12:	2300      	moveq	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d001      	beq.n	800cc1e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e0e2      	b.n	800cde4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d104      	bne.n	800cc2e <HAL_TIM_PWM_Start_IT+0xba>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2202      	movs	r2, #2
 800cc28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc2c:	e023      	b.n	800cc76 <HAL_TIM_PWM_Start_IT+0x102>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d104      	bne.n	800cc3e <HAL_TIM_PWM_Start_IT+0xca>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc3c:	e01b      	b.n	800cc76 <HAL_TIM_PWM_Start_IT+0x102>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b08      	cmp	r3, #8
 800cc42:	d104      	bne.n	800cc4e <HAL_TIM_PWM_Start_IT+0xda>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc4c:	e013      	b.n	800cc76 <HAL_TIM_PWM_Start_IT+0x102>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b0c      	cmp	r3, #12
 800cc52:	d104      	bne.n	800cc5e <HAL_TIM_PWM_Start_IT+0xea>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2202      	movs	r2, #2
 800cc58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc5c:	e00b      	b.n	800cc76 <HAL_TIM_PWM_Start_IT+0x102>
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b10      	cmp	r3, #16
 800cc62:	d104      	bne.n	800cc6e <HAL_TIM_PWM_Start_IT+0xfa>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2202      	movs	r2, #2
 800cc68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc6c:	e003      	b.n	800cc76 <HAL_TIM_PWM_Start_IT+0x102>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2202      	movs	r2, #2
 800cc72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b0c      	cmp	r3, #12
 800cc7a:	d841      	bhi.n	800cd00 <HAL_TIM_PWM_Start_IT+0x18c>
 800cc7c:	a201      	add	r2, pc, #4	; (adr r2, 800cc84 <HAL_TIM_PWM_Start_IT+0x110>)
 800cc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc82:	bf00      	nop
 800cc84:	0800ccb9 	.word	0x0800ccb9
 800cc88:	0800cd01 	.word	0x0800cd01
 800cc8c:	0800cd01 	.word	0x0800cd01
 800cc90:	0800cd01 	.word	0x0800cd01
 800cc94:	0800cccb 	.word	0x0800cccb
 800cc98:	0800cd01 	.word	0x0800cd01
 800cc9c:	0800cd01 	.word	0x0800cd01
 800cca0:	0800cd01 	.word	0x0800cd01
 800cca4:	0800ccdd 	.word	0x0800ccdd
 800cca8:	0800cd01 	.word	0x0800cd01
 800ccac:	0800cd01 	.word	0x0800cd01
 800ccb0:	0800cd01 	.word	0x0800cd01
 800ccb4:	0800ccef 	.word	0x0800ccef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68da      	ldr	r2, [r3, #12]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f042 0202 	orr.w	r2, r2, #2
 800ccc6:	60da      	str	r2, [r3, #12]
      break;
 800ccc8:	e01d      	b.n	800cd06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68da      	ldr	r2, [r3, #12]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f042 0204 	orr.w	r2, r2, #4
 800ccd8:	60da      	str	r2, [r3, #12]
      break;
 800ccda:	e014      	b.n	800cd06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68da      	ldr	r2, [r3, #12]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f042 0208 	orr.w	r2, r2, #8
 800ccea:	60da      	str	r2, [r3, #12]
      break;
 800ccec:	e00b      	b.n	800cd06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68da      	ldr	r2, [r3, #12]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f042 0210 	orr.w	r2, r2, #16
 800ccfc:	60da      	str	r2, [r3, #12]
      break;
 800ccfe:	e002      	b.n	800cd06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	73fb      	strb	r3, [r7, #15]
      break;
 800cd04:	bf00      	nop
  }

  if (status == HAL_OK)
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d16a      	bne.n	800cde2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2201      	movs	r2, #1
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f001 f90b 	bl	800df30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a33      	ldr	r2, [pc, #204]	; (800cdec <HAL_TIM_PWM_Start_IT+0x278>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d013      	beq.n	800cd4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a31      	ldr	r2, [pc, #196]	; (800cdf0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d00e      	beq.n	800cd4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a30      	ldr	r2, [pc, #192]	; (800cdf4 <HAL_TIM_PWM_Start_IT+0x280>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d009      	beq.n	800cd4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a2e      	ldr	r2, [pc, #184]	; (800cdf8 <HAL_TIM_PWM_Start_IT+0x284>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d004      	beq.n	800cd4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a2d      	ldr	r2, [pc, #180]	; (800cdfc <HAL_TIM_PWM_Start_IT+0x288>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d101      	bne.n	800cd50 <HAL_TIM_PWM_Start_IT+0x1dc>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e000      	b.n	800cd52 <HAL_TIM_PWM_Start_IT+0x1de>
 800cd50:	2300      	movs	r3, #0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d007      	beq.n	800cd66 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a20      	ldr	r2, [pc, #128]	; (800cdec <HAL_TIM_PWM_Start_IT+0x278>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d018      	beq.n	800cda2 <HAL_TIM_PWM_Start_IT+0x22e>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd78:	d013      	beq.n	800cda2 <HAL_TIM_PWM_Start_IT+0x22e>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a20      	ldr	r2, [pc, #128]	; (800ce00 <HAL_TIM_PWM_Start_IT+0x28c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d00e      	beq.n	800cda2 <HAL_TIM_PWM_Start_IT+0x22e>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a1e      	ldr	r2, [pc, #120]	; (800ce04 <HAL_TIM_PWM_Start_IT+0x290>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d009      	beq.n	800cda2 <HAL_TIM_PWM_Start_IT+0x22e>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a17      	ldr	r2, [pc, #92]	; (800cdf0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d004      	beq.n	800cda2 <HAL_TIM_PWM_Start_IT+0x22e>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a15      	ldr	r2, [pc, #84]	; (800cdf4 <HAL_TIM_PWM_Start_IT+0x280>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d115      	bne.n	800cdce <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689a      	ldr	r2, [r3, #8]
 800cda8:	4b17      	ldr	r3, [pc, #92]	; (800ce08 <HAL_TIM_PWM_Start_IT+0x294>)
 800cdaa:	4013      	ands	r3, r2
 800cdac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2b06      	cmp	r3, #6
 800cdb2:	d015      	beq.n	800cde0 <HAL_TIM_PWM_Start_IT+0x26c>
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdba:	d011      	beq.n	800cde0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f042 0201 	orr.w	r2, r2, #1
 800cdca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdcc:	e008      	b.n	800cde0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f042 0201 	orr.w	r2, r2, #1
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	e000      	b.n	800cde2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cde0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	40012c00 	.word	0x40012c00
 800cdf0:	40013400 	.word	0x40013400
 800cdf4:	40014000 	.word	0x40014000
 800cdf8:	40014400 	.word	0x40014400
 800cdfc:	40014800 	.word	0x40014800
 800ce00:	40000400 	.word	0x40000400
 800ce04:	40000800 	.word	0x40000800
 800ce08:	00010007 	.word	0x00010007

0800ce0c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	2b0c      	cmp	r3, #12
 800ce1e:	d841      	bhi.n	800cea4 <HAL_TIM_PWM_Stop_IT+0x98>
 800ce20:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce26:	bf00      	nop
 800ce28:	0800ce5d 	.word	0x0800ce5d
 800ce2c:	0800cea5 	.word	0x0800cea5
 800ce30:	0800cea5 	.word	0x0800cea5
 800ce34:	0800cea5 	.word	0x0800cea5
 800ce38:	0800ce6f 	.word	0x0800ce6f
 800ce3c:	0800cea5 	.word	0x0800cea5
 800ce40:	0800cea5 	.word	0x0800cea5
 800ce44:	0800cea5 	.word	0x0800cea5
 800ce48:	0800ce81 	.word	0x0800ce81
 800ce4c:	0800cea5 	.word	0x0800cea5
 800ce50:	0800cea5 	.word	0x0800cea5
 800ce54:	0800cea5 	.word	0x0800cea5
 800ce58:	0800ce93 	.word	0x0800ce93
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f022 0202 	bic.w	r2, r2, #2
 800ce6a:	60da      	str	r2, [r3, #12]
      break;
 800ce6c:	e01d      	b.n	800ceaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68da      	ldr	r2, [r3, #12]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 0204 	bic.w	r2, r2, #4
 800ce7c:	60da      	str	r2, [r3, #12]
      break;
 800ce7e:	e014      	b.n	800ceaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68da      	ldr	r2, [r3, #12]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0208 	bic.w	r2, r2, #8
 800ce8e:	60da      	str	r2, [r3, #12]
      break;
 800ce90:	e00b      	b.n	800ceaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68da      	ldr	r2, [r3, #12]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f022 0210 	bic.w	r2, r2, #16
 800cea0:	60da      	str	r2, [r3, #12]
      break;
 800cea2:	e002      	b.n	800ceaa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	73fb      	strb	r3, [r7, #15]
      break;
 800cea8:	bf00      	nop
  }

  if (status == HAL_OK)
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f040 8081 	bne.w	800cfb4 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f001 f838 	bl	800df30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a3e      	ldr	r2, [pc, #248]	; (800cfc0 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d013      	beq.n	800cef2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a3d      	ldr	r2, [pc, #244]	; (800cfc4 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d00e      	beq.n	800cef2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a3b      	ldr	r2, [pc, #236]	; (800cfc8 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d009      	beq.n	800cef2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a3a      	ldr	r2, [pc, #232]	; (800cfcc <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d004      	beq.n	800cef2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a38      	ldr	r2, [pc, #224]	; (800cfd0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d101      	bne.n	800cef6 <HAL_TIM_PWM_Stop_IT+0xea>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <HAL_TIM_PWM_Stop_IT+0xec>
 800cef6:	2300      	movs	r3, #0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d017      	beq.n	800cf2c <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6a1a      	ldr	r2, [r3, #32]
 800cf02:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf06:	4013      	ands	r3, r2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10f      	bne.n	800cf2c <HAL_TIM_PWM_Stop_IT+0x120>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	6a1a      	ldr	r2, [r3, #32]
 800cf12:	f244 4344 	movw	r3, #17476	; 0x4444
 800cf16:	4013      	ands	r3, r2
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d107      	bne.n	800cf2c <HAL_TIM_PWM_Stop_IT+0x120>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf2a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6a1a      	ldr	r2, [r3, #32]
 800cf32:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf36:	4013      	ands	r3, r2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10f      	bne.n	800cf5c <HAL_TIM_PWM_Stop_IT+0x150>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6a1a      	ldr	r2, [r3, #32]
 800cf42:	f244 4344 	movw	r3, #17476	; 0x4444
 800cf46:	4013      	ands	r3, r2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d107      	bne.n	800cf5c <HAL_TIM_PWM_Stop_IT+0x150>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f022 0201 	bic.w	r2, r2, #1
 800cf5a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d104      	bne.n	800cf6c <HAL_TIM_PWM_Stop_IT+0x160>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf6a:	e023      	b.n	800cfb4 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d104      	bne.n	800cf7c <HAL_TIM_PWM_Stop_IT+0x170>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf7a:	e01b      	b.n	800cfb4 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b08      	cmp	r3, #8
 800cf80:	d104      	bne.n	800cf8c <HAL_TIM_PWM_Stop_IT+0x180>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf8a:	e013      	b.n	800cfb4 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2b0c      	cmp	r3, #12
 800cf90:	d104      	bne.n	800cf9c <HAL_TIM_PWM_Stop_IT+0x190>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf9a:	e00b      	b.n	800cfb4 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b10      	cmp	r3, #16
 800cfa0:	d104      	bne.n	800cfac <HAL_TIM_PWM_Stop_IT+0x1a0>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfaa:	e003      	b.n	800cfb4 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	40012c00 	.word	0x40012c00
 800cfc4:	40013400 	.word	0x40013400
 800cfc8:	40014000 	.word	0x40014000
 800cfcc:	40014400 	.word	0x40014400
 800cfd0:	40014800 	.word	0x40014800

0800cfd4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e041      	b.n	800d06c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d106      	bne.n	800d002 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7f7 ff9f 	bl	8004f40 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2202      	movs	r2, #2
 800d006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3304      	adds	r3, #4
 800d012:	4619      	mov	r1, r3
 800d014:	4610      	mov	r0, r2
 800d016:	f000 fbf9 	bl	800d80c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f022 0208 	bic.w	r2, r2, #8
 800d028:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6819      	ldr	r1, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e097      	b.n	800d1b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f7 fe77 	bl	8004d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2202      	movs	r2, #2
 800d0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	6812      	ldr	r2, [r2, #0]
 800d0b4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d0b8:	f023 0307 	bic.w	r3, r3, #7
 800d0bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f000 fb9f 	bl	800d80c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
 800d0e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0f6:	f023 0303 	bic.w	r3, r3, #3
 800d0fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	689a      	ldr	r2, [r3, #8]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	021b      	lsls	r3, r3, #8
 800d106:	4313      	orrs	r3, r2
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d114:	f023 030c 	bic.w	r3, r3, #12
 800d118:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68da      	ldr	r2, [r3, #12]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	021b      	lsls	r3, r3, #8
 800d130:	4313      	orrs	r3, r2
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	4313      	orrs	r3, r2
 800d136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	011a      	lsls	r2, r3, #4
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	031b      	lsls	r3, r3, #12
 800d144:	4313      	orrs	r3, r2
 800d146:	693a      	ldr	r2, [r7, #16]
 800d148:	4313      	orrs	r3, r2
 800d14a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d152:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d15a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	011b      	lsls	r3, r3, #4
 800d166:	4313      	orrs	r3, r2
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2201      	movs	r2, #1
 800d19a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d1d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d110      	bne.n	800d212 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d102      	bne.n	800d1fc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d1f6:	7b7b      	ldrb	r3, [r7, #13]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d001      	beq.n	800d200 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e089      	b.n	800d314 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2202      	movs	r2, #2
 800d204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d210:	e031      	b.n	800d276 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b04      	cmp	r3, #4
 800d216:	d110      	bne.n	800d23a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d102      	bne.n	800d224 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d21e:	7b3b      	ldrb	r3, [r7, #12]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d001      	beq.n	800d228 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	e075      	b.n	800d314 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2202      	movs	r2, #2
 800d234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d238:	e01d      	b.n	800d276 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d108      	bne.n	800d252 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d240:	7bbb      	ldrb	r3, [r7, #14]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d105      	bne.n	800d252 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d246:	7b7b      	ldrb	r3, [r7, #13]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d102      	bne.n	800d252 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d24c:	7b3b      	ldrb	r3, [r7, #12]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d001      	beq.n	800d256 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e05e      	b.n	800d314 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2202      	movs	r2, #2
 800d25a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2202      	movs	r2, #2
 800d262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2202      	movs	r2, #2
 800d26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2202      	movs	r2, #2
 800d272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <HAL_TIM_Encoder_Start_IT+0xc4>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b04      	cmp	r3, #4
 800d280:	d010      	beq.n	800d2a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 800d282:	e01f      	b.n	800d2c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2201      	movs	r2, #1
 800d28a:	2100      	movs	r1, #0
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 fe4f 	bl	800df30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	68da      	ldr	r2, [r3, #12]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f042 0202 	orr.w	r2, r2, #2
 800d2a0:	60da      	str	r2, [r3, #12]
      break;
 800d2a2:	e02e      	b.n	800d302 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	2104      	movs	r1, #4
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 fe3f 	bl	800df30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f042 0204 	orr.w	r2, r2, #4
 800d2c0:	60da      	str	r2, [r3, #12]
      break;
 800d2c2:	e01e      	b.n	800d302 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 fe2f 	bl	800df30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	2104      	movs	r1, #4
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 fe28 	bl	800df30 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f042 0202 	orr.w	r2, r2, #2
 800d2ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68da      	ldr	r2, [r3, #12]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f042 0204 	orr.w	r2, r2, #4
 800d2fe:	60da      	str	r2, [r3, #12]
      break;
 800d300:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f042 0201 	orr.w	r2, r2, #1
 800d310:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	f003 0302 	and.w	r3, r3, #2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d020      	beq.n	800d380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f003 0302 	and.w	r3, r3, #2
 800d344:	2b00      	cmp	r3, #0
 800d346:	d01b      	beq.n	800d380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f06f 0202 	mvn.w	r2, #2
 800d350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2201      	movs	r2, #1
 800d356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	f003 0303 	and.w	r3, r3, #3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d003      	beq.n	800d36e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7f5 fcd8 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 800d36c:	e005      	b.n	800d37a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fa38 	bl	800d7e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7f5 fd69 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	f003 0304 	and.w	r3, r3, #4
 800d386:	2b00      	cmp	r3, #0
 800d388:	d020      	beq.n	800d3cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f003 0304 	and.w	r3, r3, #4
 800d390:	2b00      	cmp	r3, #0
 800d392:	d01b      	beq.n	800d3cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f06f 0204 	mvn.w	r2, #4
 800d39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d003      	beq.n	800d3ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7f5 fcb2 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 800d3b8:	e005      	b.n	800d3c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fa12 	bl	800d7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7f5 fd43 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	f003 0308 	and.w	r3, r3, #8
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d020      	beq.n	800d418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f003 0308 	and.w	r3, r3, #8
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01b      	beq.n	800d418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f06f 0208 	mvn.w	r2, #8
 800d3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2204      	movs	r2, #4
 800d3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7f5 fc8c 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 800d404:	e005      	b.n	800d412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f9ec 	bl	800d7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7f5 fd1d 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f003 0310 	and.w	r3, r3, #16
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d020      	beq.n	800d464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f003 0310 	and.w	r3, r3, #16
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d01b      	beq.n	800d464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f06f 0210 	mvn.w	r2, #16
 800d434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2208      	movs	r2, #8
 800d43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	69db      	ldr	r3, [r3, #28]
 800d442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7f5 fc66 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 800d450:	e005      	b.n	800d45e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f9c6 	bl	800d7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7f5 fcf7 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00c      	beq.n	800d488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d007      	beq.n	800d488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f06f 0201 	mvn.w	r2, #1
 800d480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7f5 fd02 	bl	8002e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d104      	bne.n	800d49c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00c      	beq.n	800d4b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 ff83 	bl	800e3bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00c      	beq.n	800d4da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 ff7b 	bl	800e3d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00c      	beq.n	800d4fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d007      	beq.n	800d4fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 f97d 	bl	800d7f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	f003 0320 	and.w	r3, r3, #32
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00c      	beq.n	800d522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f003 0320 	and.w	r3, r3, #32
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d007      	beq.n	800d522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f06f 0220 	mvn.w	r2, #32
 800d51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 ff43 	bl	800e3a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00c      	beq.n	800d546 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d007      	beq.n	800d546 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 ff4f 	bl	800e3e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00c      	beq.n	800d56a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d007      	beq.n	800d56a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 ff47 	bl	800e3f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00c      	beq.n	800d58e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d007      	beq.n	800d58e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 ff3f 	bl	800e40c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00c      	beq.n	800d5b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d007      	beq.n	800d5b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 ff37 	bl	800e420 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5b2:	bf00      	nop
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
	...

0800d5bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d101      	bne.n	800d5da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d5d6:	2302      	movs	r3, #2
 800d5d8:	e0ff      	b.n	800d7da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b14      	cmp	r3, #20
 800d5e6:	f200 80f0 	bhi.w	800d7ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d5ea:	a201      	add	r2, pc, #4	; (adr r2, 800d5f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f0:	0800d645 	.word	0x0800d645
 800d5f4:	0800d7cb 	.word	0x0800d7cb
 800d5f8:	0800d7cb 	.word	0x0800d7cb
 800d5fc:	0800d7cb 	.word	0x0800d7cb
 800d600:	0800d685 	.word	0x0800d685
 800d604:	0800d7cb 	.word	0x0800d7cb
 800d608:	0800d7cb 	.word	0x0800d7cb
 800d60c:	0800d7cb 	.word	0x0800d7cb
 800d610:	0800d6c7 	.word	0x0800d6c7
 800d614:	0800d7cb 	.word	0x0800d7cb
 800d618:	0800d7cb 	.word	0x0800d7cb
 800d61c:	0800d7cb 	.word	0x0800d7cb
 800d620:	0800d707 	.word	0x0800d707
 800d624:	0800d7cb 	.word	0x0800d7cb
 800d628:	0800d7cb 	.word	0x0800d7cb
 800d62c:	0800d7cb 	.word	0x0800d7cb
 800d630:	0800d749 	.word	0x0800d749
 800d634:	0800d7cb 	.word	0x0800d7cb
 800d638:	0800d7cb 	.word	0x0800d7cb
 800d63c:	0800d7cb 	.word	0x0800d7cb
 800d640:	0800d789 	.word	0x0800d789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68b9      	ldr	r1, [r7, #8]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 f97a 	bl	800d944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	699a      	ldr	r2, [r3, #24]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f042 0208 	orr.w	r2, r2, #8
 800d65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	699a      	ldr	r2, [r3, #24]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f022 0204 	bic.w	r2, r2, #4
 800d66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6999      	ldr	r1, [r3, #24]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	691a      	ldr	r2, [r3, #16]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	430a      	orrs	r2, r1
 800d680:	619a      	str	r2, [r3, #24]
      break;
 800d682:	e0a5      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68b9      	ldr	r1, [r7, #8]
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 f9ea 	bl	800da64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	699a      	ldr	r2, [r3, #24]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d69e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	699a      	ldr	r2, [r3, #24]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6999      	ldr	r1, [r3, #24]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	021a      	lsls	r2, r3, #8
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	619a      	str	r2, [r3, #24]
      break;
 800d6c4:	e084      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68b9      	ldr	r1, [r7, #8]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 fa53 	bl	800db78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	69da      	ldr	r2, [r3, #28]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f042 0208 	orr.w	r2, r2, #8
 800d6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69da      	ldr	r2, [r3, #28]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0204 	bic.w	r2, r2, #4
 800d6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	69d9      	ldr	r1, [r3, #28]
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	691a      	ldr	r2, [r3, #16]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	430a      	orrs	r2, r1
 800d702:	61da      	str	r2, [r3, #28]
      break;
 800d704:	e064      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68b9      	ldr	r1, [r7, #8]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 fabb 	bl	800dc88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	69da      	ldr	r2, [r3, #28]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	69da      	ldr	r2, [r3, #28]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	69d9      	ldr	r1, [r3, #28]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	021a      	lsls	r2, r3, #8
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	61da      	str	r2, [r3, #28]
      break;
 800d746:	e043      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68b9      	ldr	r1, [r7, #8]
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fb24 	bl	800dd9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f042 0208 	orr.w	r2, r2, #8
 800d762:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 0204 	bic.w	r2, r2, #4
 800d772:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	691a      	ldr	r2, [r3, #16]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d786:	e023      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68b9      	ldr	r1, [r7, #8]
 800d78e:	4618      	mov	r0, r3
 800d790:	f000 fb68 	bl	800de64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	021a      	lsls	r2, r3, #8
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	430a      	orrs	r2, r1
 800d7c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d7c8:	e002      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	75fb      	strb	r3, [r7, #23]
      break;
 800d7ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop

0800d7e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d7ec:	bf00      	nop
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a42      	ldr	r2, [pc, #264]	; (800d928 <TIM_Base_SetConfig+0x11c>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d00f      	beq.n	800d844 <TIM_Base_SetConfig+0x38>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d82a:	d00b      	beq.n	800d844 <TIM_Base_SetConfig+0x38>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a3f      	ldr	r2, [pc, #252]	; (800d92c <TIM_Base_SetConfig+0x120>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d007      	beq.n	800d844 <TIM_Base_SetConfig+0x38>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a3e      	ldr	r2, [pc, #248]	; (800d930 <TIM_Base_SetConfig+0x124>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d003      	beq.n	800d844 <TIM_Base_SetConfig+0x38>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a3d      	ldr	r2, [pc, #244]	; (800d934 <TIM_Base_SetConfig+0x128>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d108      	bne.n	800d856 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d84a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	4313      	orrs	r3, r2
 800d854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a33      	ldr	r2, [pc, #204]	; (800d928 <TIM_Base_SetConfig+0x11c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d01b      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d864:	d017      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a30      	ldr	r2, [pc, #192]	; (800d92c <TIM_Base_SetConfig+0x120>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d013      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a2f      	ldr	r2, [pc, #188]	; (800d930 <TIM_Base_SetConfig+0x124>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d00f      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a2e      	ldr	r2, [pc, #184]	; (800d934 <TIM_Base_SetConfig+0x128>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d00b      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a2d      	ldr	r2, [pc, #180]	; (800d938 <TIM_Base_SetConfig+0x12c>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d007      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a2c      	ldr	r2, [pc, #176]	; (800d93c <TIM_Base_SetConfig+0x130>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d003      	beq.n	800d896 <TIM_Base_SetConfig+0x8a>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a2b      	ldr	r2, [pc, #172]	; (800d940 <TIM_Base_SetConfig+0x134>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d108      	bne.n	800d8a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d89c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	689a      	ldr	r2, [r3, #8]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a16      	ldr	r2, [pc, #88]	; (800d928 <TIM_Base_SetConfig+0x11c>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d00f      	beq.n	800d8f4 <TIM_Base_SetConfig+0xe8>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a17      	ldr	r2, [pc, #92]	; (800d934 <TIM_Base_SetConfig+0x128>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d00b      	beq.n	800d8f4 <TIM_Base_SetConfig+0xe8>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a16      	ldr	r2, [pc, #88]	; (800d938 <TIM_Base_SetConfig+0x12c>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d007      	beq.n	800d8f4 <TIM_Base_SetConfig+0xe8>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a15      	ldr	r2, [pc, #84]	; (800d93c <TIM_Base_SetConfig+0x130>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d003      	beq.n	800d8f4 <TIM_Base_SetConfig+0xe8>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a14      	ldr	r2, [pc, #80]	; (800d940 <TIM_Base_SetConfig+0x134>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d103      	bne.n	800d8fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	691a      	ldr	r2, [r3, #16]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d105      	bne.n	800d91a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	f023 0201 	bic.w	r2, r3, #1
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	611a      	str	r2, [r3, #16]
  }
}
 800d91a:	bf00      	nop
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	40012c00 	.word	0x40012c00
 800d92c:	40000400 	.word	0x40000400
 800d930:	40000800 	.word	0x40000800
 800d934:	40013400 	.word	0x40013400
 800d938:	40014000 	.word	0x40014000
 800d93c:	40014400 	.word	0x40014400
 800d940:	40014800 	.word	0x40014800

0800d944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d944:	b480      	push	{r7}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6a1b      	ldr	r3, [r3, #32]
 800d958:	f023 0201 	bic.w	r2, r3, #1
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 0303 	bic.w	r3, r3, #3
 800d97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4313      	orrs	r3, r2
 800d988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f023 0302 	bic.w	r3, r3, #2
 800d990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	4313      	orrs	r3, r2
 800d99a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a2c      	ldr	r2, [pc, #176]	; (800da50 <TIM_OC1_SetConfig+0x10c>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d00f      	beq.n	800d9c4 <TIM_OC1_SetConfig+0x80>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4a2b      	ldr	r2, [pc, #172]	; (800da54 <TIM_OC1_SetConfig+0x110>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d00b      	beq.n	800d9c4 <TIM_OC1_SetConfig+0x80>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a2a      	ldr	r2, [pc, #168]	; (800da58 <TIM_OC1_SetConfig+0x114>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d007      	beq.n	800d9c4 <TIM_OC1_SetConfig+0x80>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4a29      	ldr	r2, [pc, #164]	; (800da5c <TIM_OC1_SetConfig+0x118>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d003      	beq.n	800d9c4 <TIM_OC1_SetConfig+0x80>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a28      	ldr	r2, [pc, #160]	; (800da60 <TIM_OC1_SetConfig+0x11c>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d10c      	bne.n	800d9de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f023 0308 	bic.w	r3, r3, #8
 800d9ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f023 0304 	bic.w	r3, r3, #4
 800d9dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4a1b      	ldr	r2, [pc, #108]	; (800da50 <TIM_OC1_SetConfig+0x10c>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d00f      	beq.n	800da06 <TIM_OC1_SetConfig+0xc2>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4a1a      	ldr	r2, [pc, #104]	; (800da54 <TIM_OC1_SetConfig+0x110>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d00b      	beq.n	800da06 <TIM_OC1_SetConfig+0xc2>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4a19      	ldr	r2, [pc, #100]	; (800da58 <TIM_OC1_SetConfig+0x114>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d007      	beq.n	800da06 <TIM_OC1_SetConfig+0xc2>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4a18      	ldr	r2, [pc, #96]	; (800da5c <TIM_OC1_SetConfig+0x118>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d003      	beq.n	800da06 <TIM_OC1_SetConfig+0xc2>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4a17      	ldr	r2, [pc, #92]	; (800da60 <TIM_OC1_SetConfig+0x11c>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d111      	bne.n	800da2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	4313      	orrs	r3, r2
 800da28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	697a      	ldr	r2, [r7, #20]
 800da42:	621a      	str	r2, [r3, #32]
}
 800da44:	bf00      	nop
 800da46:	371c      	adds	r7, #28
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	40012c00 	.word	0x40012c00
 800da54:	40013400 	.word	0x40013400
 800da58:	40014000 	.word	0x40014000
 800da5c:	40014400 	.word	0x40014400
 800da60:	40014800 	.word	0x40014800

0800da64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	f023 0210 	bic.w	r2, r3, #16
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	021b      	lsls	r3, r3, #8
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	f023 0320 	bic.w	r3, r3, #32
 800dab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	011b      	lsls	r3, r3, #4
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	4a28      	ldr	r2, [pc, #160]	; (800db64 <TIM_OC2_SetConfig+0x100>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d003      	beq.n	800dad0 <TIM_OC2_SetConfig+0x6c>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	4a27      	ldr	r2, [pc, #156]	; (800db68 <TIM_OC2_SetConfig+0x104>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d10d      	bne.n	800daec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	011b      	lsls	r3, r3, #4
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a1d      	ldr	r2, [pc, #116]	; (800db64 <TIM_OC2_SetConfig+0x100>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00f      	beq.n	800db14 <TIM_OC2_SetConfig+0xb0>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a1c      	ldr	r2, [pc, #112]	; (800db68 <TIM_OC2_SetConfig+0x104>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d00b      	beq.n	800db14 <TIM_OC2_SetConfig+0xb0>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a1b      	ldr	r2, [pc, #108]	; (800db6c <TIM_OC2_SetConfig+0x108>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d007      	beq.n	800db14 <TIM_OC2_SetConfig+0xb0>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a1a      	ldr	r2, [pc, #104]	; (800db70 <TIM_OC2_SetConfig+0x10c>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d003      	beq.n	800db14 <TIM_OC2_SetConfig+0xb0>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a19      	ldr	r2, [pc, #100]	; (800db74 <TIM_OC2_SetConfig+0x110>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d113      	bne.n	800db3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	4313      	orrs	r3, r2
 800db3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	621a      	str	r2, [r3, #32]
}
 800db56:	bf00      	nop
 800db58:	371c      	adds	r7, #28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40012c00 	.word	0x40012c00
 800db68:	40013400 	.word	0x40013400
 800db6c:	40014000 	.word	0x40014000
 800db70:	40014400 	.word	0x40014400
 800db74:	40014800 	.word	0x40014800

0800db78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a1b      	ldr	r3, [r3, #32]
 800db86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a1b      	ldr	r3, [r3, #32]
 800db8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	69db      	ldr	r3, [r3, #28]
 800db9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f023 0303 	bic.w	r3, r3, #3
 800dbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	021b      	lsls	r3, r3, #8
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a27      	ldr	r2, [pc, #156]	; (800dc74 <TIM_OC3_SetConfig+0xfc>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d003      	beq.n	800dbe2 <TIM_OC3_SetConfig+0x6a>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4a26      	ldr	r2, [pc, #152]	; (800dc78 <TIM_OC3_SetConfig+0x100>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d10d      	bne.n	800dbfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	021b      	lsls	r3, r3, #8
 800dbf0:	697a      	ldr	r2, [r7, #20]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a1c      	ldr	r2, [pc, #112]	; (800dc74 <TIM_OC3_SetConfig+0xfc>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d00f      	beq.n	800dc26 <TIM_OC3_SetConfig+0xae>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a1b      	ldr	r2, [pc, #108]	; (800dc78 <TIM_OC3_SetConfig+0x100>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d00b      	beq.n	800dc26 <TIM_OC3_SetConfig+0xae>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a1a      	ldr	r2, [pc, #104]	; (800dc7c <TIM_OC3_SetConfig+0x104>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d007      	beq.n	800dc26 <TIM_OC3_SetConfig+0xae>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a19      	ldr	r2, [pc, #100]	; (800dc80 <TIM_OC3_SetConfig+0x108>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d003      	beq.n	800dc26 <TIM_OC3_SetConfig+0xae>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a18      	ldr	r2, [pc, #96]	; (800dc84 <TIM_OC3_SetConfig+0x10c>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d113      	bne.n	800dc4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	011b      	lsls	r3, r3, #4
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	621a      	str	r2, [r3, #32]
}
 800dc68:	bf00      	nop
 800dc6a:	371c      	adds	r7, #28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr
 800dc74:	40012c00 	.word	0x40012c00
 800dc78:	40013400 	.word	0x40013400
 800dc7c:	40014000 	.word	0x40014000
 800dc80:	40014400 	.word	0x40014400
 800dc84:	40014800 	.word	0x40014800

0800dc88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dcb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	021b      	lsls	r3, r3, #8
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	031b      	lsls	r3, r3, #12
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a28      	ldr	r2, [pc, #160]	; (800dd88 <TIM_OC4_SetConfig+0x100>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d003      	beq.n	800dcf4 <TIM_OC4_SetConfig+0x6c>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4a27      	ldr	r2, [pc, #156]	; (800dd8c <TIM_OC4_SetConfig+0x104>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d10d      	bne.n	800dd10 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dcfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	031b      	lsls	r3, r3, #12
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a1d      	ldr	r2, [pc, #116]	; (800dd88 <TIM_OC4_SetConfig+0x100>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d00f      	beq.n	800dd38 <TIM_OC4_SetConfig+0xb0>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a1c      	ldr	r2, [pc, #112]	; (800dd8c <TIM_OC4_SetConfig+0x104>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d00b      	beq.n	800dd38 <TIM_OC4_SetConfig+0xb0>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a1b      	ldr	r2, [pc, #108]	; (800dd90 <TIM_OC4_SetConfig+0x108>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d007      	beq.n	800dd38 <TIM_OC4_SetConfig+0xb0>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a1a      	ldr	r2, [pc, #104]	; (800dd94 <TIM_OC4_SetConfig+0x10c>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d003      	beq.n	800dd38 <TIM_OC4_SetConfig+0xb0>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a19      	ldr	r2, [pc, #100]	; (800dd98 <TIM_OC4_SetConfig+0x110>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d113      	bne.n	800dd60 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	019b      	lsls	r3, r3, #6
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	699b      	ldr	r3, [r3, #24]
 800dd58:	019b      	lsls	r3, r3, #6
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	621a      	str	r2, [r3, #32]
}
 800dd7a:	bf00      	nop
 800dd7c:	371c      	adds	r7, #28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	40012c00 	.word	0x40012c00
 800dd8c:	40013400 	.word	0x40013400
 800dd90:	40014000 	.word	0x40014000
 800dd94:	40014400 	.word	0x40014400
 800dd98:	40014800 	.word	0x40014800

0800dd9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b087      	sub	sp, #28
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a1b      	ldr	r3, [r3, #32]
 800ddb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dde0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	041b      	lsls	r3, r3, #16
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4a17      	ldr	r2, [pc, #92]	; (800de50 <TIM_OC5_SetConfig+0xb4>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d00f      	beq.n	800de16 <TIM_OC5_SetConfig+0x7a>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a16      	ldr	r2, [pc, #88]	; (800de54 <TIM_OC5_SetConfig+0xb8>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d00b      	beq.n	800de16 <TIM_OC5_SetConfig+0x7a>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4a15      	ldr	r2, [pc, #84]	; (800de58 <TIM_OC5_SetConfig+0xbc>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d007      	beq.n	800de16 <TIM_OC5_SetConfig+0x7a>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4a14      	ldr	r2, [pc, #80]	; (800de5c <TIM_OC5_SetConfig+0xc0>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d003      	beq.n	800de16 <TIM_OC5_SetConfig+0x7a>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a13      	ldr	r2, [pc, #76]	; (800de60 <TIM_OC5_SetConfig+0xc4>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d109      	bne.n	800de2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	4313      	orrs	r3, r2
 800de28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	685a      	ldr	r2, [r3, #4]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	621a      	str	r2, [r3, #32]
}
 800de44:	bf00      	nop
 800de46:	371c      	adds	r7, #28
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	40012c00 	.word	0x40012c00
 800de54:	40013400 	.word	0x40013400
 800de58:	40014000 	.word	0x40014000
 800de5c:	40014400 	.word	0x40014400
 800de60:	40014800 	.word	0x40014800

0800de64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6a1b      	ldr	r3, [r3, #32]
 800de78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	021b      	lsls	r3, r3, #8
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800deaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	051b      	lsls	r3, r3, #20
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a18      	ldr	r2, [pc, #96]	; (800df1c <TIM_OC6_SetConfig+0xb8>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d00f      	beq.n	800dee0 <TIM_OC6_SetConfig+0x7c>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a17      	ldr	r2, [pc, #92]	; (800df20 <TIM_OC6_SetConfig+0xbc>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d00b      	beq.n	800dee0 <TIM_OC6_SetConfig+0x7c>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a16      	ldr	r2, [pc, #88]	; (800df24 <TIM_OC6_SetConfig+0xc0>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d007      	beq.n	800dee0 <TIM_OC6_SetConfig+0x7c>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a15      	ldr	r2, [pc, #84]	; (800df28 <TIM_OC6_SetConfig+0xc4>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d003      	beq.n	800dee0 <TIM_OC6_SetConfig+0x7c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a14      	ldr	r2, [pc, #80]	; (800df2c <TIM_OC6_SetConfig+0xc8>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d109      	bne.n	800def4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	695b      	ldr	r3, [r3, #20]
 800deec:	029b      	lsls	r3, r3, #10
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	4313      	orrs	r3, r2
 800def2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	685a      	ldr	r2, [r3, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	693a      	ldr	r2, [r7, #16]
 800df0c:	621a      	str	r2, [r3, #32]
}
 800df0e:	bf00      	nop
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	40012c00 	.word	0x40012c00
 800df20:	40013400 	.word	0x40013400
 800df24:	40014000 	.word	0x40014000
 800df28:	40014400 	.word	0x40014400
 800df2c:	40014800 	.word	0x40014800

0800df30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f003 031f 	and.w	r3, r3, #31
 800df42:	2201      	movs	r2, #1
 800df44:	fa02 f303 	lsl.w	r3, r2, r3
 800df48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6a1a      	ldr	r2, [r3, #32]
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	43db      	mvns	r3, r3
 800df52:	401a      	ands	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6a1a      	ldr	r2, [r3, #32]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f003 031f 	and.w	r3, r3, #31
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	fa01 f303 	lsl.w	r3, r1, r3
 800df68:	431a      	orrs	r2, r3
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	621a      	str	r2, [r3, #32]
}
 800df6e:	bf00      	nop
 800df70:	371c      	adds	r7, #28
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
	...

0800df7c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d109      	bne.n	800dfa4 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b01      	cmp	r3, #1
 800df9a:	bf14      	ite	ne
 800df9c:	2301      	movne	r3, #1
 800df9e:	2300      	moveq	r3, #0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	e022      	b.n	800dfea <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2b04      	cmp	r3, #4
 800dfa8:	d109      	bne.n	800dfbe <HAL_TIMEx_PWMN_Start_IT+0x42>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	bf14      	ite	ne
 800dfb6:	2301      	movne	r3, #1
 800dfb8:	2300      	moveq	r3, #0
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	e015      	b.n	800dfea <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	2b08      	cmp	r3, #8
 800dfc2:	d109      	bne.n	800dfd8 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	bf14      	ite	ne
 800dfd0:	2301      	movne	r3, #1
 800dfd2:	2300      	moveq	r3, #0
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	e008      	b.n	800dfea <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	bf14      	ite	ne
 800dfe4:	2301      	movne	r3, #1
 800dfe6:	2300      	moveq	r3, #0
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e0bc      	b.n	800e16c <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d104      	bne.n	800e002 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e000:	e013      	b.n	800e02a <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	2b04      	cmp	r3, #4
 800e006:	d104      	bne.n	800e012 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2202      	movs	r2, #2
 800e00c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e010:	e00b      	b.n	800e02a <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	2b08      	cmp	r3, #8
 800e016:	d104      	bne.n	800e022 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2202      	movs	r2, #2
 800e01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e020:	e003      	b.n	800e02a <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2202      	movs	r2, #2
 800e026:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2b0c      	cmp	r3, #12
 800e02e:	d841      	bhi.n	800e0b4 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800e030:	a201      	add	r2, pc, #4	; (adr r2, 800e038 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800e032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e036:	bf00      	nop
 800e038:	0800e06d 	.word	0x0800e06d
 800e03c:	0800e0b5 	.word	0x0800e0b5
 800e040:	0800e0b5 	.word	0x0800e0b5
 800e044:	0800e0b5 	.word	0x0800e0b5
 800e048:	0800e07f 	.word	0x0800e07f
 800e04c:	0800e0b5 	.word	0x0800e0b5
 800e050:	0800e0b5 	.word	0x0800e0b5
 800e054:	0800e0b5 	.word	0x0800e0b5
 800e058:	0800e091 	.word	0x0800e091
 800e05c:	0800e0b5 	.word	0x0800e0b5
 800e060:	0800e0b5 	.word	0x0800e0b5
 800e064:	0800e0b5 	.word	0x0800e0b5
 800e068:	0800e0a3 	.word	0x0800e0a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f042 0202 	orr.w	r2, r2, #2
 800e07a:	60da      	str	r2, [r3, #12]
      break;
 800e07c:	e01d      	b.n	800e0ba <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68da      	ldr	r2, [r3, #12]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f042 0204 	orr.w	r2, r2, #4
 800e08c:	60da      	str	r2, [r3, #12]
      break;
 800e08e:	e014      	b.n	800e0ba <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	68da      	ldr	r2, [r3, #12]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f042 0208 	orr.w	r2, r2, #8
 800e09e:	60da      	str	r2, [r3, #12]
      break;
 800e0a0:	e00b      	b.n	800e0ba <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68da      	ldr	r2, [r3, #12]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f042 0210 	orr.w	r2, r2, #16
 800e0b0:	60da      	str	r2, [r3, #12]
      break;
 800e0b2:	e002      	b.n	800e0ba <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e0b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d154      	bne.n	800e16a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68da      	ldr	r2, [r3, #12]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e0ce:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2204      	movs	r2, #4
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f000 f9ab 	bl	800e434 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a20      	ldr	r2, [pc, #128]	; (800e174 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d018      	beq.n	800e12a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e100:	d013      	beq.n	800e12a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a1c      	ldr	r2, [pc, #112]	; (800e178 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d00e      	beq.n	800e12a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a1a      	ldr	r2, [pc, #104]	; (800e17c <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d009      	beq.n	800e12a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a19      	ldr	r2, [pc, #100]	; (800e180 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d004      	beq.n	800e12a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a17      	ldr	r2, [pc, #92]	; (800e184 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d115      	bne.n	800e156 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	4b15      	ldr	r3, [pc, #84]	; (800e188 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800e132:	4013      	ands	r3, r2
 800e134:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	2b06      	cmp	r3, #6
 800e13a:	d015      	beq.n	800e168 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e142:	d011      	beq.n	800e168 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f042 0201 	orr.w	r2, r2, #1
 800e152:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e154:	e008      	b.n	800e168 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f042 0201 	orr.w	r2, r2, #1
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	e000      	b.n	800e16a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e168:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	40012c00 	.word	0x40012c00
 800e178:	40000400 	.word	0x40000400
 800e17c:	40000800 	.word	0x40000800
 800e180:	40013400 	.word	0x40013400
 800e184:	40014000 	.word	0x40014000
 800e188:	00010007 	.word	0x00010007

0800e18c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d101      	bne.n	800e1a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	e065      	b.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a2c      	ldr	r2, [pc, #176]	; (800e27c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d004      	beq.n	800e1d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4a2b      	ldr	r2, [pc, #172]	; (800e280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d108      	bne.n	800e1ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e1de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a1b      	ldr	r2, [pc, #108]	; (800e27c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d018      	beq.n	800e244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e21a:	d013      	beq.n	800e244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a18      	ldr	r2, [pc, #96]	; (800e284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d00e      	beq.n	800e244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a17      	ldr	r2, [pc, #92]	; (800e288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d009      	beq.n	800e244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a12      	ldr	r2, [pc, #72]	; (800e280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d004      	beq.n	800e244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a13      	ldr	r2, [pc, #76]	; (800e28c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d10c      	bne.n	800e25e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e24a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	4313      	orrs	r3, r2
 800e254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr
 800e27c:	40012c00 	.word	0x40012c00
 800e280:	40013400 	.word	0x40013400
 800e284:	40000400 	.word	0x40000400
 800e288:	40000800 	.word	0x40000800
 800e28c:	40014000 	.word	0x40014000

0800e290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e29a:	2300      	movs	r3, #0
 800e29c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d101      	bne.n	800e2ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	e073      	b.n	800e394 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	4313      	orrs	r3, r2
 800e306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	4313      	orrs	r3, r2
 800e314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	699b      	ldr	r3, [r3, #24]
 800e320:	041b      	lsls	r3, r3, #16
 800e322:	4313      	orrs	r3, r2
 800e324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	69db      	ldr	r3, [r3, #28]
 800e330:	4313      	orrs	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a19      	ldr	r2, [pc, #100]	; (800e3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d004      	beq.n	800e348 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a18      	ldr	r2, [pc, #96]	; (800e3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d11c      	bne.n	800e382 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e352:	051b      	lsls	r3, r3, #20
 800e354:	4313      	orrs	r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	4313      	orrs	r3, r2
 800e364:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	4313      	orrs	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37e:	4313      	orrs	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	40012c00 	.word	0x40012c00
 800e3a4:	40013400 	.word	0x40013400

0800e3a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e414:	bf00      	nop
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800e434:	b480      	push	{r7}
 800e436:	b087      	sub	sp, #28
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	f003 030f 	and.w	r3, r3, #15
 800e446:	2204      	movs	r2, #4
 800e448:	fa02 f303 	lsl.w	r3, r2, r3
 800e44c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6a1a      	ldr	r2, [r3, #32]
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	43db      	mvns	r3, r3
 800e456:	401a      	ands	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6a1a      	ldr	r2, [r3, #32]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	f003 030f 	and.w	r3, r3, #15
 800e466:	6879      	ldr	r1, [r7, #4]
 800e468:	fa01 f303 	lsl.w	r3, r1, r3
 800e46c:	431a      	orrs	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	621a      	str	r2, [r3, #32]
}
 800e472:	bf00      	nop
 800e474:	371c      	adds	r7, #28
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b082      	sub	sp, #8
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e042      	b.n	800e516 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e496:	2b00      	cmp	r3, #0
 800e498:	d106      	bne.n	800e4a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7f6 fdca 	bl	800503c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2224      	movs	r2, #36	; 0x24
 800e4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f022 0201 	bic.w	r2, r2, #1
 800e4be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d002      	beq.n	800e4ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 faf5 	bl	800eab8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 f826 	bl	800e520 <UART_SetConfig>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d101      	bne.n	800e4de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e01b      	b.n	800e516 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e4ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	689a      	ldr	r2, [r3, #8]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e4fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f042 0201 	orr.w	r2, r2, #1
 800e50c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fb74 	bl	800ebfc <UART_CheckIdleState>
 800e514:	4603      	mov	r3, r0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e524:	b08c      	sub	sp, #48	; 0x30
 800e526:	af00      	add	r7, sp, #0
 800e528:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	689a      	ldr	r2, [r3, #8]
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	691b      	ldr	r3, [r3, #16]
 800e538:	431a      	orrs	r2, r3
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	431a      	orrs	r2, r3
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	4313      	orrs	r3, r2
 800e546:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	4bab      	ldr	r3, [pc, #684]	; (800e7fc <UART_SetConfig+0x2dc>)
 800e550:	4013      	ands	r3, r2
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	6812      	ldr	r2, [r2, #0]
 800e556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e558:	430b      	orrs	r3, r1
 800e55a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	68da      	ldr	r2, [r3, #12]
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	430a      	orrs	r2, r1
 800e570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	699b      	ldr	r3, [r3, #24]
 800e576:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4aa0      	ldr	r2, [pc, #640]	; (800e800 <UART_SetConfig+0x2e0>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d004      	beq.n	800e58c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	6a1b      	ldr	r3, [r3, #32]
 800e586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e588:	4313      	orrs	r3, r2
 800e58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e596:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	6812      	ldr	r2, [r2, #0]
 800e59e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5a0:	430b      	orrs	r3, r1
 800e5a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	f023 010f 	bic.w	r1, r3, #15
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	430a      	orrs	r2, r1
 800e5b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a91      	ldr	r2, [pc, #580]	; (800e804 <UART_SetConfig+0x2e4>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d125      	bne.n	800e610 <UART_SetConfig+0xf0>
 800e5c4:	4b90      	ldr	r3, [pc, #576]	; (800e808 <UART_SetConfig+0x2e8>)
 800e5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ca:	f003 0303 	and.w	r3, r3, #3
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d81a      	bhi.n	800e608 <UART_SetConfig+0xe8>
 800e5d2:	a201      	add	r2, pc, #4	; (adr r2, 800e5d8 <UART_SetConfig+0xb8>)
 800e5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d8:	0800e5e9 	.word	0x0800e5e9
 800e5dc:	0800e5f9 	.word	0x0800e5f9
 800e5e0:	0800e5f1 	.word	0x0800e5f1
 800e5e4:	0800e601 	.word	0x0800e601
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ee:	e0d6      	b.n	800e79e <UART_SetConfig+0x27e>
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5f6:	e0d2      	b.n	800e79e <UART_SetConfig+0x27e>
 800e5f8:	2304      	movs	r3, #4
 800e5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5fe:	e0ce      	b.n	800e79e <UART_SetConfig+0x27e>
 800e600:	2308      	movs	r3, #8
 800e602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e606:	e0ca      	b.n	800e79e <UART_SetConfig+0x27e>
 800e608:	2310      	movs	r3, #16
 800e60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e60e:	e0c6      	b.n	800e79e <UART_SetConfig+0x27e>
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a7d      	ldr	r2, [pc, #500]	; (800e80c <UART_SetConfig+0x2ec>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d138      	bne.n	800e68c <UART_SetConfig+0x16c>
 800e61a:	4b7b      	ldr	r3, [pc, #492]	; (800e808 <UART_SetConfig+0x2e8>)
 800e61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e620:	f003 030c 	and.w	r3, r3, #12
 800e624:	2b0c      	cmp	r3, #12
 800e626:	d82d      	bhi.n	800e684 <UART_SetConfig+0x164>
 800e628:	a201      	add	r2, pc, #4	; (adr r2, 800e630 <UART_SetConfig+0x110>)
 800e62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62e:	bf00      	nop
 800e630:	0800e665 	.word	0x0800e665
 800e634:	0800e685 	.word	0x0800e685
 800e638:	0800e685 	.word	0x0800e685
 800e63c:	0800e685 	.word	0x0800e685
 800e640:	0800e675 	.word	0x0800e675
 800e644:	0800e685 	.word	0x0800e685
 800e648:	0800e685 	.word	0x0800e685
 800e64c:	0800e685 	.word	0x0800e685
 800e650:	0800e66d 	.word	0x0800e66d
 800e654:	0800e685 	.word	0x0800e685
 800e658:	0800e685 	.word	0x0800e685
 800e65c:	0800e685 	.word	0x0800e685
 800e660:	0800e67d 	.word	0x0800e67d
 800e664:	2300      	movs	r3, #0
 800e666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e66a:	e098      	b.n	800e79e <UART_SetConfig+0x27e>
 800e66c:	2302      	movs	r3, #2
 800e66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e672:	e094      	b.n	800e79e <UART_SetConfig+0x27e>
 800e674:	2304      	movs	r3, #4
 800e676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e67a:	e090      	b.n	800e79e <UART_SetConfig+0x27e>
 800e67c:	2308      	movs	r3, #8
 800e67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e682:	e08c      	b.n	800e79e <UART_SetConfig+0x27e>
 800e684:	2310      	movs	r3, #16
 800e686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e68a:	e088      	b.n	800e79e <UART_SetConfig+0x27e>
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a5f      	ldr	r2, [pc, #380]	; (800e810 <UART_SetConfig+0x2f0>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d125      	bne.n	800e6e2 <UART_SetConfig+0x1c2>
 800e696:	4b5c      	ldr	r3, [pc, #368]	; (800e808 <UART_SetConfig+0x2e8>)
 800e698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e69c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e6a0:	2b30      	cmp	r3, #48	; 0x30
 800e6a2:	d016      	beq.n	800e6d2 <UART_SetConfig+0x1b2>
 800e6a4:	2b30      	cmp	r3, #48	; 0x30
 800e6a6:	d818      	bhi.n	800e6da <UART_SetConfig+0x1ba>
 800e6a8:	2b20      	cmp	r3, #32
 800e6aa:	d00a      	beq.n	800e6c2 <UART_SetConfig+0x1a2>
 800e6ac:	2b20      	cmp	r3, #32
 800e6ae:	d814      	bhi.n	800e6da <UART_SetConfig+0x1ba>
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <UART_SetConfig+0x19a>
 800e6b4:	2b10      	cmp	r3, #16
 800e6b6:	d008      	beq.n	800e6ca <UART_SetConfig+0x1aa>
 800e6b8:	e00f      	b.n	800e6da <UART_SetConfig+0x1ba>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6c0:	e06d      	b.n	800e79e <UART_SetConfig+0x27e>
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6c8:	e069      	b.n	800e79e <UART_SetConfig+0x27e>
 800e6ca:	2304      	movs	r3, #4
 800e6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6d0:	e065      	b.n	800e79e <UART_SetConfig+0x27e>
 800e6d2:	2308      	movs	r3, #8
 800e6d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6d8:	e061      	b.n	800e79e <UART_SetConfig+0x27e>
 800e6da:	2310      	movs	r3, #16
 800e6dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6e0:	e05d      	b.n	800e79e <UART_SetConfig+0x27e>
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a4b      	ldr	r2, [pc, #300]	; (800e814 <UART_SetConfig+0x2f4>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d125      	bne.n	800e738 <UART_SetConfig+0x218>
 800e6ec:	4b46      	ldr	r3, [pc, #280]	; (800e808 <UART_SetConfig+0x2e8>)
 800e6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e6f6:	2bc0      	cmp	r3, #192	; 0xc0
 800e6f8:	d016      	beq.n	800e728 <UART_SetConfig+0x208>
 800e6fa:	2bc0      	cmp	r3, #192	; 0xc0
 800e6fc:	d818      	bhi.n	800e730 <UART_SetConfig+0x210>
 800e6fe:	2b80      	cmp	r3, #128	; 0x80
 800e700:	d00a      	beq.n	800e718 <UART_SetConfig+0x1f8>
 800e702:	2b80      	cmp	r3, #128	; 0x80
 800e704:	d814      	bhi.n	800e730 <UART_SetConfig+0x210>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <UART_SetConfig+0x1f0>
 800e70a:	2b40      	cmp	r3, #64	; 0x40
 800e70c:	d008      	beq.n	800e720 <UART_SetConfig+0x200>
 800e70e:	e00f      	b.n	800e730 <UART_SetConfig+0x210>
 800e710:	2300      	movs	r3, #0
 800e712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e716:	e042      	b.n	800e79e <UART_SetConfig+0x27e>
 800e718:	2302      	movs	r3, #2
 800e71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e71e:	e03e      	b.n	800e79e <UART_SetConfig+0x27e>
 800e720:	2304      	movs	r3, #4
 800e722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e726:	e03a      	b.n	800e79e <UART_SetConfig+0x27e>
 800e728:	2308      	movs	r3, #8
 800e72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e72e:	e036      	b.n	800e79e <UART_SetConfig+0x27e>
 800e730:	2310      	movs	r3, #16
 800e732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e736:	e032      	b.n	800e79e <UART_SetConfig+0x27e>
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a30      	ldr	r2, [pc, #192]	; (800e800 <UART_SetConfig+0x2e0>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d12a      	bne.n	800e798 <UART_SetConfig+0x278>
 800e742:	4b31      	ldr	r3, [pc, #196]	; (800e808 <UART_SetConfig+0x2e8>)
 800e744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e74c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e750:	d01a      	beq.n	800e788 <UART_SetConfig+0x268>
 800e752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e756:	d81b      	bhi.n	800e790 <UART_SetConfig+0x270>
 800e758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e75c:	d00c      	beq.n	800e778 <UART_SetConfig+0x258>
 800e75e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e762:	d815      	bhi.n	800e790 <UART_SetConfig+0x270>
 800e764:	2b00      	cmp	r3, #0
 800e766:	d003      	beq.n	800e770 <UART_SetConfig+0x250>
 800e768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e76c:	d008      	beq.n	800e780 <UART_SetConfig+0x260>
 800e76e:	e00f      	b.n	800e790 <UART_SetConfig+0x270>
 800e770:	2300      	movs	r3, #0
 800e772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e776:	e012      	b.n	800e79e <UART_SetConfig+0x27e>
 800e778:	2302      	movs	r3, #2
 800e77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e77e:	e00e      	b.n	800e79e <UART_SetConfig+0x27e>
 800e780:	2304      	movs	r3, #4
 800e782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e786:	e00a      	b.n	800e79e <UART_SetConfig+0x27e>
 800e788:	2308      	movs	r3, #8
 800e78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e78e:	e006      	b.n	800e79e <UART_SetConfig+0x27e>
 800e790:	2310      	movs	r3, #16
 800e792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e796:	e002      	b.n	800e79e <UART_SetConfig+0x27e>
 800e798:	2310      	movs	r3, #16
 800e79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4a17      	ldr	r2, [pc, #92]	; (800e800 <UART_SetConfig+0x2e0>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	f040 80a8 	bne.w	800e8fa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e7ae:	2b08      	cmp	r3, #8
 800e7b0:	d834      	bhi.n	800e81c <UART_SetConfig+0x2fc>
 800e7b2:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <UART_SetConfig+0x298>)
 800e7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b8:	0800e7dd 	.word	0x0800e7dd
 800e7bc:	0800e81d 	.word	0x0800e81d
 800e7c0:	0800e7e5 	.word	0x0800e7e5
 800e7c4:	0800e81d 	.word	0x0800e81d
 800e7c8:	0800e7eb 	.word	0x0800e7eb
 800e7cc:	0800e81d 	.word	0x0800e81d
 800e7d0:	0800e81d 	.word	0x0800e81d
 800e7d4:	0800e81d 	.word	0x0800e81d
 800e7d8:	0800e7f3 	.word	0x0800e7f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7dc:	f7fd f90c 	bl	800b9f8 <HAL_RCC_GetPCLK1Freq>
 800e7e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7e2:	e021      	b.n	800e828 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <UART_SetConfig+0x2f8>)
 800e7e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e7e8:	e01e      	b.n	800e828 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7ea:	f7fd f897 	bl	800b91c <HAL_RCC_GetSysClockFreq>
 800e7ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7f0:	e01a      	b.n	800e828 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e7f8:	e016      	b.n	800e828 <UART_SetConfig+0x308>
 800e7fa:	bf00      	nop
 800e7fc:	cfff69f3 	.word	0xcfff69f3
 800e800:	40008000 	.word	0x40008000
 800e804:	40013800 	.word	0x40013800
 800e808:	40021000 	.word	0x40021000
 800e80c:	40004400 	.word	0x40004400
 800e810:	40004800 	.word	0x40004800
 800e814:	40004c00 	.word	0x40004c00
 800e818:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e81c:	2300      	movs	r3, #0
 800e81e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e826:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 812a 	beq.w	800ea84 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e834:	4a9e      	ldr	r2, [pc, #632]	; (800eab0 <UART_SetConfig+0x590>)
 800e836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e83a:	461a      	mov	r2, r3
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e842:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	4613      	mov	r3, r2
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	4413      	add	r3, r2
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	429a      	cmp	r2, r3
 800e852:	d305      	bcc.n	800e860 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d903      	bls.n	800e868 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e866:	e10d      	b.n	800ea84 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	2200      	movs	r2, #0
 800e86c:	60bb      	str	r3, [r7, #8]
 800e86e:	60fa      	str	r2, [r7, #12]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e874:	4a8e      	ldr	r2, [pc, #568]	; (800eab0 <UART_SetConfig+0x590>)
 800e876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	2200      	movs	r2, #0
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	607a      	str	r2, [r7, #4]
 800e882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e88a:	f7f2 fa25 	bl	8000cd8 <__aeabi_uldivmod>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	4610      	mov	r0, r2
 800e894:	4619      	mov	r1, r3
 800e896:	f04f 0200 	mov.w	r2, #0
 800e89a:	f04f 0300 	mov.w	r3, #0
 800e89e:	020b      	lsls	r3, r1, #8
 800e8a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8a4:	0202      	lsls	r2, r0, #8
 800e8a6:	6979      	ldr	r1, [r7, #20]
 800e8a8:	6849      	ldr	r1, [r1, #4]
 800e8aa:	0849      	lsrs	r1, r1, #1
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	eb12 0804 	adds.w	r8, r2, r4
 800e8b6:	eb43 0905 	adc.w	r9, r3, r5
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	469a      	mov	sl, r3
 800e8c2:	4693      	mov	fp, r2
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	465b      	mov	r3, fp
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	4649      	mov	r1, r9
 800e8cc:	f7f2 fa04 	bl	8000cd8 <__aeabi_uldivmod>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8de:	d308      	bcc.n	800e8f2 <UART_SetConfig+0x3d2>
 800e8e0:	6a3b      	ldr	r3, [r7, #32]
 800e8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8e6:	d204      	bcs.n	800e8f2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6a3a      	ldr	r2, [r7, #32]
 800e8ee:	60da      	str	r2, [r3, #12]
 800e8f0:	e0c8      	b.n	800ea84 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e8f8:	e0c4      	b.n	800ea84 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	69db      	ldr	r3, [r3, #28]
 800e8fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e902:	d167      	bne.n	800e9d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800e904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e908:	2b08      	cmp	r3, #8
 800e90a:	d828      	bhi.n	800e95e <UART_SetConfig+0x43e>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <UART_SetConfig+0x3f4>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e939 	.word	0x0800e939
 800e918:	0800e941 	.word	0x0800e941
 800e91c:	0800e949 	.word	0x0800e949
 800e920:	0800e95f 	.word	0x0800e95f
 800e924:	0800e94f 	.word	0x0800e94f
 800e928:	0800e95f 	.word	0x0800e95f
 800e92c:	0800e95f 	.word	0x0800e95f
 800e930:	0800e95f 	.word	0x0800e95f
 800e934:	0800e957 	.word	0x0800e957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e938:	f7fd f85e 	bl	800b9f8 <HAL_RCC_GetPCLK1Freq>
 800e93c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e93e:	e014      	b.n	800e96a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e940:	f7fd f870 	bl	800ba24 <HAL_RCC_GetPCLK2Freq>
 800e944:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e946:	e010      	b.n	800e96a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e948:	4b5a      	ldr	r3, [pc, #360]	; (800eab4 <UART_SetConfig+0x594>)
 800e94a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e94c:	e00d      	b.n	800e96a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e94e:	f7fc ffe5 	bl	800b91c <HAL_RCC_GetSysClockFreq>
 800e952:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e954:	e009      	b.n	800e96a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e95a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e95c:	e005      	b.n	800e96a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 8089 	beq.w	800ea84 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e976:	4a4e      	ldr	r2, [pc, #312]	; (800eab0 <UART_SetConfig+0x590>)
 800e978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	fbb3 f3f2 	udiv	r3, r3, r2
 800e984:	005a      	lsls	r2, r3, #1
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	085b      	lsrs	r3, r3, #1
 800e98c:	441a      	add	r2, r3
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	fbb2 f3f3 	udiv	r3, r2, r3
 800e996:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	2b0f      	cmp	r3, #15
 800e99c:	d916      	bls.n	800e9cc <UART_SetConfig+0x4ac>
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9a4:	d212      	bcs.n	800e9cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	f023 030f 	bic.w	r3, r3, #15
 800e9ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	085b      	lsrs	r3, r3, #1
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	8bfb      	ldrh	r3, [r7, #30]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	8bfa      	ldrh	r2, [r7, #30]
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	e05b      	b.n	800ea84 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e9d2:	e057      	b.n	800ea84 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e9d8:	2b08      	cmp	r3, #8
 800e9da:	d828      	bhi.n	800ea2e <UART_SetConfig+0x50e>
 800e9dc:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <UART_SetConfig+0x4c4>)
 800e9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e2:	bf00      	nop
 800e9e4:	0800ea09 	.word	0x0800ea09
 800e9e8:	0800ea11 	.word	0x0800ea11
 800e9ec:	0800ea19 	.word	0x0800ea19
 800e9f0:	0800ea2f 	.word	0x0800ea2f
 800e9f4:	0800ea1f 	.word	0x0800ea1f
 800e9f8:	0800ea2f 	.word	0x0800ea2f
 800e9fc:	0800ea2f 	.word	0x0800ea2f
 800ea00:	0800ea2f 	.word	0x0800ea2f
 800ea04:	0800ea27 	.word	0x0800ea27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea08:	f7fc fff6 	bl	800b9f8 <HAL_RCC_GetPCLK1Freq>
 800ea0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea0e:	e014      	b.n	800ea3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea10:	f7fd f808 	bl	800ba24 <HAL_RCC_GetPCLK2Freq>
 800ea14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea16:	e010      	b.n	800ea3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea18:	4b26      	ldr	r3, [pc, #152]	; (800eab4 <UART_SetConfig+0x594>)
 800ea1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea1c:	e00d      	b.n	800ea3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea1e:	f7fc ff7d 	bl	800b91c <HAL_RCC_GetSysClockFreq>
 800ea22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea24:	e009      	b.n	800ea3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea2c:	e005      	b.n	800ea3a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ea32:	2301      	movs	r3, #1
 800ea34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ea38:	bf00      	nop
    }

    if (pclk != 0U)
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d021      	beq.n	800ea84 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	4a1a      	ldr	r2, [pc, #104]	; (800eab0 <UART_SetConfig+0x590>)
 800ea46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	085b      	lsrs	r3, r3, #1
 800ea58:	441a      	add	r2, r3
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	2b0f      	cmp	r3, #15
 800ea68:	d909      	bls.n	800ea7e <UART_SetConfig+0x55e>
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea70:	d205      	bcs.n	800ea7e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	60da      	str	r2, [r3, #12]
 800ea7c:	e002      	b.n	800ea84 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2200      	movs	r2, #0
 800ea98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eaa0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3730      	adds	r7, #48	; 0x30
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eaae:	bf00      	nop
 800eab0:	0801a544 	.word	0x0801a544
 800eab4:	00f42400 	.word	0x00f42400

0800eab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac4:	f003 0308 	and.w	r3, r3, #8
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00a      	beq.n	800eae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae6:	f003 0301 	and.w	r3, r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00a      	beq.n	800eb26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	430a      	orrs	r2, r1
 800eb24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2a:	f003 0304 	and.w	r3, r3, #4
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00a      	beq.n	800eb48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	430a      	orrs	r2, r1
 800eb46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4c:	f003 0310 	and.w	r3, r3, #16
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00a      	beq.n	800eb6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	430a      	orrs	r2, r1
 800eb68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb6e:	f003 0320 	and.w	r3, r3, #32
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00a      	beq.n	800eb8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d01a      	beq.n	800ebce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	430a      	orrs	r2, r1
 800ebac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebb6:	d10a      	bne.n	800ebce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	430a      	orrs	r2, r1
 800ebcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00a      	beq.n	800ebf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	605a      	str	r2, [r3, #4]
  }
}
 800ebf0:	bf00      	nop
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b098      	sub	sp, #96	; 0x60
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec0c:	f7f7 f86e 	bl	8005cec <HAL_GetTick>
 800ec10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f003 0308 	and.w	r3, r3, #8
 800ec1c:	2b08      	cmp	r3, #8
 800ec1e:	d12f      	bne.n	800ec80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f88e 	bl	800ed50 <UART_WaitOnFlagUntilTimeout>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d022      	beq.n	800ec80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	e853 3f00 	ldrex	r3, [r3]
 800ec46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec58:	647b      	str	r3, [r7, #68]	; 0x44
 800ec5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec60:	e841 2300 	strex	r3, r2, [r1]
 800ec64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e6      	bne.n	800ec3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec7c:	2303      	movs	r3, #3
 800ec7e:	e063      	b.n	800ed48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f003 0304 	and.w	r3, r3, #4
 800ec8a:	2b04      	cmp	r3, #4
 800ec8c:	d149      	bne.n	800ed22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec96:	2200      	movs	r2, #0
 800ec98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 f857 	bl	800ed50 <UART_WaitOnFlagUntilTimeout>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d03c      	beq.n	800ed22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	e853 3f00 	ldrex	r3, [r3]
 800ecb4:	623b      	str	r3, [r7, #32]
   return(result);
 800ecb6:	6a3b      	ldr	r3, [r7, #32]
 800ecb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecc6:	633b      	str	r3, [r7, #48]	; 0x30
 800ecc8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecce:	e841 2300 	strex	r3, r2, [r1]
 800ecd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d1e6      	bne.n	800eca8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	3308      	adds	r3, #8
 800ece0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	e853 3f00 	ldrex	r3, [r3]
 800ece8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f023 0301 	bic.w	r3, r3, #1
 800ecf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	3308      	adds	r3, #8
 800ecf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecfa:	61fa      	str	r2, [r7, #28]
 800ecfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecfe:	69b9      	ldr	r1, [r7, #24]
 800ed00:	69fa      	ldr	r2, [r7, #28]
 800ed02:	e841 2300 	strex	r3, r2, [r1]
 800ed06:	617b      	str	r3, [r7, #20]
   return(result);
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e5      	bne.n	800ecda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2220      	movs	r2, #32
 800ed12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed1e:	2303      	movs	r3, #3
 800ed20:	e012      	b.n	800ed48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2220      	movs	r2, #32
 800ed26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3758      	adds	r7, #88	; 0x58
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	603b      	str	r3, [r7, #0]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed60:	e04f      	b.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed68:	d04b      	beq.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed6a:	f7f6 ffbf 	bl	8005cec <HAL_GetTick>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	69ba      	ldr	r2, [r7, #24]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d302      	bcc.n	800ed80 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed80:	2303      	movs	r3, #3
 800ed82:	e04e      	b.n	800ee22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 0304 	and.w	r3, r3, #4
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d037      	beq.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2b80      	cmp	r3, #128	; 0x80
 800ed96:	d034      	beq.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	2b40      	cmp	r3, #64	; 0x40
 800ed9c:	d031      	beq.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	f003 0308 	and.w	r3, r3, #8
 800eda8:	2b08      	cmp	r3, #8
 800edaa:	d110      	bne.n	800edce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2208      	movs	r2, #8
 800edb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f838 	bl	800ee2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2208      	movs	r2, #8
 800edbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e029      	b.n	800ee22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	69db      	ldr	r3, [r3, #28]
 800edd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eddc:	d111      	bne.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ede6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f000 f81e 	bl	800ee2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2220      	movs	r2, #32
 800edf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e00f      	b.n	800ee22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	69da      	ldr	r2, [r3, #28]
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	4013      	ands	r3, r2
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	bf0c      	ite	eq
 800ee12:	2301      	moveq	r3, #1
 800ee14:	2300      	movne	r3, #0
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	461a      	mov	r2, r3
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d0a0      	beq.n	800ed62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee2a:	b480      	push	{r7}
 800ee2c:	b095      	sub	sp, #84	; 0x54
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee3a:	e853 3f00 	ldrex	r3, [r3]
 800ee3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee50:	643b      	str	r3, [r7, #64]	; 0x40
 800ee52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee58:	e841 2300 	strex	r3, r2, [r1]
 800ee5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1e6      	bne.n	800ee32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	3308      	adds	r3, #8
 800ee6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	e853 3f00 	ldrex	r3, [r3]
 800ee72:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee7a:	f023 0301 	bic.w	r3, r3, #1
 800ee7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3308      	adds	r3, #8
 800ee86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee90:	e841 2300 	strex	r3, r2, [r1]
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1e3      	bne.n	800ee64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d118      	bne.n	800eed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	e853 3f00 	ldrex	r3, [r3]
 800eeb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	f023 0310 	bic.w	r3, r3, #16
 800eeb8:	647b      	str	r3, [r7, #68]	; 0x44
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eec2:	61bb      	str	r3, [r7, #24]
 800eec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec6:	6979      	ldr	r1, [r7, #20]
 800eec8:	69ba      	ldr	r2, [r7, #24]
 800eeca:	e841 2300 	strex	r3, r2, [r1]
 800eece:	613b      	str	r3, [r7, #16]
   return(result);
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1e6      	bne.n	800eea4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eeea:	bf00      	nop
 800eeec:	3754      	adds	r7, #84	; 0x54
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr

0800eef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eef6:	b480      	push	{r7}
 800eef8:	b085      	sub	sp, #20
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d101      	bne.n	800ef0c <HAL_UARTEx_DisableFifoMode+0x16>
 800ef08:	2302      	movs	r3, #2
 800ef0a:	e027      	b.n	800ef5c <HAL_UARTEx_DisableFifoMode+0x66>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2224      	movs	r2, #36	; 0x24
 800ef18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f022 0201 	bic.w	r2, r2, #1
 800ef32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ef3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d101      	bne.n	800ef80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	e02d      	b.n	800efdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2201      	movs	r2, #1
 800ef84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2224      	movs	r2, #36	; 0x24
 800ef8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f022 0201 	bic.w	r2, r2, #1
 800efa6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	430a      	orrs	r2, r1
 800efba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 f84f 	bl	800f060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2220      	movs	r2, #32
 800efce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d101      	bne.n	800effc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eff8:	2302      	movs	r3, #2
 800effa:	e02d      	b.n	800f058 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2224      	movs	r2, #36	; 0x24
 800f008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f022 0201 	bic.w	r2, r2, #1
 800f022:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	430a      	orrs	r2, r1
 800f036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f811 	bl	800f060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2220      	movs	r2, #32
 800f04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d108      	bne.n	800f082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f080:	e031      	b.n	800f0e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f082:	2308      	movs	r3, #8
 800f084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f086:	2308      	movs	r3, #8
 800f088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	0e5b      	lsrs	r3, r3, #25
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f003 0307 	and.w	r3, r3, #7
 800f098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	0f5b      	lsrs	r3, r3, #29
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0aa:	7bbb      	ldrb	r3, [r7, #14]
 800f0ac:	7b3a      	ldrb	r2, [r7, #12]
 800f0ae:	4911      	ldr	r1, [pc, #68]	; (800f0f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f0b0:	5c8a      	ldrb	r2, [r1, r2]
 800f0b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f0b6:	7b3a      	ldrb	r2, [r7, #12]
 800f0b8:	490f      	ldr	r1, [pc, #60]	; (800f0f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f0ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0c8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ca:	7b7a      	ldrb	r2, [r7, #13]
 800f0cc:	4909      	ldr	r1, [pc, #36]	; (800f0f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f0ce:	5c8a      	ldrb	r2, [r1, r2]
 800f0d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f0d4:	7b7a      	ldrb	r2, [r7, #13]
 800f0d6:	4908      	ldr	r1, [pc, #32]	; (800f0f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f0d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0da:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f0e6:	bf00      	nop
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	0801a55c 	.word	0x0801a55c
 800f0f8:	0801a564 	.word	0x0801a564

0800f0fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f10c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f110:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	b29a      	uxth	r2, r3
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f12a:	b480      	push	{r7}
 800f12c:	b085      	sub	sp, #20
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f132:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f136:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f13e:	b29a      	uxth	r2, r3
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	b29b      	uxth	r3, r3
 800f144:	43db      	mvns	r3, r3
 800f146:	b29b      	uxth	r3, r3
 800f148:	4013      	ands	r3, r2
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	1d3b      	adds	r3, r7, #4
 800f16a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2200      	movs	r2, #0
 800f17a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b09d      	sub	sp, #116	; 0x74
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	4413      	add	r3, r2
 800f1b6:	881b      	ldrh	r3, [r3, #0]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	78db      	ldrb	r3, [r3, #3]
 800f1ca:	2b03      	cmp	r3, #3
 800f1cc:	d81f      	bhi.n	800f20e <USB_ActivateEndpoint+0x72>
 800f1ce:	a201      	add	r2, pc, #4	; (adr r2, 800f1d4 <USB_ActivateEndpoint+0x38>)
 800f1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d4:	0800f1e5 	.word	0x0800f1e5
 800f1d8:	0800f201 	.word	0x0800f201
 800f1dc:	0800f217 	.word	0x0800f217
 800f1e0:	0800f1f3 	.word	0x0800f1f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f1e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f1e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f1ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f1f0:	e012      	b.n	800f218 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f1f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f1f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f1fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f1fe:	e00b      	b.n	800f218 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f200:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f208:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f20c:	e004      	b.n	800f218 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f214:	e000      	b.n	800f218 <USB_ActivateEndpoint+0x7c>
      break;
 800f216:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	441a      	add	r2, r3
 800f222:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f22a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f236:	b29b      	uxth	r3, r3
 800f238:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4413      	add	r3, r2
 800f244:	881b      	ldrh	r3, [r3, #0]
 800f246:	b29b      	uxth	r3, r3
 800f248:	b21b      	sxth	r3, r3
 800f24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f252:	b21a      	sxth	r2, r3
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	b21b      	sxth	r3, r3
 800f25a:	4313      	orrs	r3, r2
 800f25c:	b21b      	sxth	r3, r3
 800f25e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	441a      	add	r2, r3
 800f26c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f280:	b29b      	uxth	r3, r3
 800f282:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	7b1b      	ldrb	r3, [r3, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f040 8178 	bne.w	800f57e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	785b      	ldrb	r3, [r3, #1]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 8084 	beq.w	800f3a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	61bb      	str	r3, [r7, #24]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	00da      	lsls	r2, r3, #3
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2ba:	617b      	str	r3, [r7, #20]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	88db      	ldrh	r3, [r3, #6]
 800f2c0:	085b      	lsrs	r3, r3, #1
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4413      	add	r3, r2
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	827b      	strh	r3, [r7, #18]
 800f2da:	8a7b      	ldrh	r3, [r7, #18]
 800f2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01b      	beq.n	800f31c <USB_ActivateEndpoint+0x180>
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	881b      	ldrh	r3, [r3, #0]
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2fa:	823b      	strh	r3, [r7, #16]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	441a      	add	r2, r3
 800f306:	8a3b      	ldrh	r3, [r7, #16]
 800f308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f30c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f318:	b29b      	uxth	r3, r3
 800f31a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	78db      	ldrb	r3, [r3, #3]
 800f320:	2b01      	cmp	r3, #1
 800f322:	d020      	beq.n	800f366 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	b29b      	uxth	r3, r3
 800f332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f33a:	81bb      	strh	r3, [r7, #12]
 800f33c:	89bb      	ldrh	r3, [r7, #12]
 800f33e:	f083 0320 	eor.w	r3, r3, #32
 800f342:	81bb      	strh	r3, [r7, #12]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	441a      	add	r2, r3
 800f34e:	89bb      	ldrh	r3, [r7, #12]
 800f350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f360:	b29b      	uxth	r3, r3
 800f362:	8013      	strh	r3, [r2, #0]
 800f364:	e2d5      	b.n	800f912 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	4413      	add	r3, r2
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	b29b      	uxth	r3, r3
 800f374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f37c:	81fb      	strh	r3, [r7, #14]
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	441a      	add	r2, r3
 800f388:	89fb      	ldrh	r3, [r7, #14]
 800f38a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f38e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	8013      	strh	r3, [r2, #0]
 800f39e:	e2b8      	b.n	800f912 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	633b      	str	r3, [r7, #48]	; 0x30
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b0:	4413      	add	r3, r2
 800f3b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	00da      	lsls	r2, r3, #3
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	4413      	add	r3, r2
 800f3be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	88db      	ldrh	r3, [r3, #6]
 800f3c8:	085b      	lsrs	r3, r3, #1
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	4413      	add	r3, r2
 800f3e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	00da      	lsls	r2, r3, #3
 800f3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f0:	4413      	add	r3, r2
 800f3f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	881b      	ldrh	r3, [r3, #0]
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f402:	b29a      	uxth	r2, r3
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	801a      	strh	r2, [r3, #0]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	2b3e      	cmp	r3, #62	; 0x3e
 800f40e:	d91d      	bls.n	800f44c <USB_ActivateEndpoint+0x2b0>
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	095b      	lsrs	r3, r3, #5
 800f416:	66bb      	str	r3, [r7, #104]	; 0x68
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	f003 031f 	and.w	r3, r3, #31
 800f420:	2b00      	cmp	r3, #0
 800f422:	d102      	bne.n	800f42a <USB_ActivateEndpoint+0x28e>
 800f424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f426:	3b01      	subs	r3, #1
 800f428:	66bb      	str	r3, [r7, #104]	; 0x68
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	881b      	ldrh	r3, [r3, #0]
 800f42e:	b29a      	uxth	r2, r3
 800f430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f432:	b29b      	uxth	r3, r3
 800f434:	029b      	lsls	r3, r3, #10
 800f436:	b29b      	uxth	r3, r3
 800f438:	4313      	orrs	r3, r2
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f444:	b29a      	uxth	r2, r3
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	801a      	strh	r2, [r3, #0]
 800f44a:	e026      	b.n	800f49a <USB_ActivateEndpoint+0x2fe>
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d10a      	bne.n	800f46a <USB_ActivateEndpoint+0x2ce>
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f45e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f462:	b29a      	uxth	r2, r3
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	801a      	strh	r2, [r3, #0]
 800f468:	e017      	b.n	800f49a <USB_ActivateEndpoint+0x2fe>
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	085b      	lsrs	r3, r3, #1
 800f470:	66bb      	str	r3, [r7, #104]	; 0x68
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d002      	beq.n	800f484 <USB_ActivateEndpoint+0x2e8>
 800f47e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f480:	3301      	adds	r3, #1
 800f482:	66bb      	str	r3, [r7, #104]	; 0x68
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	881b      	ldrh	r3, [r3, #0]
 800f488:	b29a      	uxth	r2, r3
 800f48a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	029b      	lsls	r3, r3, #10
 800f490:	b29b      	uxth	r3, r3
 800f492:	4313      	orrs	r3, r2
 800f494:	b29a      	uxth	r2, r3
 800f496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f498:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	881b      	ldrh	r3, [r3, #0]
 800f4a6:	847b      	strh	r3, [r7, #34]	; 0x22
 800f4a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d01b      	beq.n	800f4ea <USB_ActivateEndpoint+0x34e>
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4c8:	843b      	strh	r3, [r7, #32]
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	441a      	add	r2, r3
 800f4d4:	8c3b      	ldrh	r3, [r7, #32]
 800f4d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d124      	bne.n	800f53c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4413      	add	r3, r2
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f508:	83bb      	strh	r3, [r7, #28]
 800f50a:	8bbb      	ldrh	r3, [r7, #28]
 800f50c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f510:	83bb      	strh	r3, [r7, #28]
 800f512:	8bbb      	ldrh	r3, [r7, #28]
 800f514:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f518:	83bb      	strh	r3, [r7, #28]
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	441a      	add	r2, r3
 800f524:	8bbb      	ldrh	r3, [r7, #28]
 800f526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f52a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f52e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f536:	b29b      	uxth	r3, r3
 800f538:	8013      	strh	r3, [r2, #0]
 800f53a:	e1ea      	b.n	800f912 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4413      	add	r3, r2
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f552:	83fb      	strh	r3, [r7, #30]
 800f554:	8bfb      	ldrh	r3, [r7, #30]
 800f556:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f55a:	83fb      	strh	r3, [r7, #30]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	441a      	add	r2, r3
 800f566:	8bfb      	ldrh	r3, [r7, #30]
 800f568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f56c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f578:	b29b      	uxth	r3, r3
 800f57a:	8013      	strh	r3, [r2, #0]
 800f57c:	e1c9      	b.n	800f912 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	78db      	ldrb	r3, [r3, #3]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d11e      	bne.n	800f5c4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	b29b      	uxth	r3, r3
 800f594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f59c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	441a      	add	r2, r3
 800f5aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f5ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	8013      	strh	r3, [r2, #0]
 800f5c2:	e01d      	b.n	800f600 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4413      	add	r3, r2
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	441a      	add	r2, r3
 800f5e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f5ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	461a      	mov	r2, r3
 800f60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f610:	4413      	add	r3, r2
 800f612:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	00da      	lsls	r2, r3, #3
 800f61a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f622:	65bb      	str	r3, [r7, #88]	; 0x58
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	891b      	ldrh	r3, [r3, #8]
 800f628:	085b      	lsrs	r3, r3, #1
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	b29a      	uxth	r2, r3
 800f630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f632:	801a      	strh	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	657b      	str	r3, [r7, #84]	; 0x54
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f63e:	b29b      	uxth	r3, r3
 800f640:	461a      	mov	r2, r3
 800f642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f644:	4413      	add	r3, r2
 800f646:	657b      	str	r3, [r7, #84]	; 0x54
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	00da      	lsls	r2, r3, #3
 800f64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f650:	4413      	add	r3, r2
 800f652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f656:	653b      	str	r3, [r7, #80]	; 0x50
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	895b      	ldrh	r3, [r3, #10]
 800f65c:	085b      	lsrs	r3, r3, #1
 800f65e:	b29b      	uxth	r3, r3
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	b29a      	uxth	r2, r3
 800f664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f666:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	785b      	ldrb	r3, [r3, #1]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f040 8093 	bne.w	800f798 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01b      	beq.n	800f6c6 <USB_ActivateEndpoint+0x52a>
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4413      	add	r3, r2
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	441a      	add	r2, r3
 800f6b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f6d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d01b      	beq.n	800f716 <USB_ActivateEndpoint+0x57a>
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	441a      	add	r2, r3
 800f700:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f70a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f70e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f712:	b29b      	uxth	r3, r3
 800f714:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	b29b      	uxth	r3, r3
 800f724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f72c:	873b      	strh	r3, [r7, #56]	; 0x38
 800f72e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f734:	873b      	strh	r3, [r7, #56]	; 0x38
 800f736:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f73c:	873b      	strh	r3, [r7, #56]	; 0x38
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	441a      	add	r2, r3
 800f748:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f74a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f74e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	4413      	add	r3, r2
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f774:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	441a      	add	r2, r3
 800f780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f78a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f792:	b29b      	uxth	r3, r3
 800f794:	8013      	strh	r3, [r2, #0]
 800f796:	e0bc      	b.n	800f912 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	4413      	add	r3, r2
 800f7a2:	881b      	ldrh	r3, [r3, #0]
 800f7a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f7a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d01d      	beq.n	800f7f0 <USB_ActivateEndpoint+0x654>
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	4413      	add	r3, r2
 800f7be:	881b      	ldrh	r3, [r3, #0]
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	441a      	add	r2, r3
 800f7d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f7dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	4413      	add	r3, r2
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d01d      	beq.n	800f848 <USB_ActivateEndpoint+0x6ac>
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	4413      	add	r3, r2
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f822:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	441a      	add	r2, r3
 800f830:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f83c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f844:	b29b      	uxth	r3, r3
 800f846:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	78db      	ldrb	r3, [r3, #3]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d024      	beq.n	800f89a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	4413      	add	r3, r2
 800f85a:	881b      	ldrh	r3, [r3, #0]
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f866:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f86a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f86e:	f083 0320 	eor.w	r3, r3, #32
 800f872:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	441a      	add	r2, r3
 800f880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f88c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f894:	b29b      	uxth	r3, r3
 800f896:	8013      	strh	r3, [r2, #0]
 800f898:	e01d      	b.n	800f8d6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	441a      	add	r2, r3
 800f8be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f8c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	441a      	add	r2, r3
 800f8fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f90e:	b29b      	uxth	r3, r3
 800f910:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f912:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f916:	4618      	mov	r0, r3
 800f918:	3774      	adds	r7, #116	; 0x74
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop

0800f924 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f924:	b480      	push	{r7}
 800f926:	b08d      	sub	sp, #52	; 0x34
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	7b1b      	ldrb	r3, [r3, #12]
 800f932:	2b00      	cmp	r3, #0
 800f934:	f040 808e 	bne.w	800fa54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	785b      	ldrb	r3, [r3, #1]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d044      	beq.n	800f9ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	4413      	add	r3, r2
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	81bb      	strh	r3, [r7, #12]
 800f94e:	89bb      	ldrh	r3, [r7, #12]
 800f950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01b      	beq.n	800f990 <USB_DeactivateEndpoint+0x6c>
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	881b      	ldrh	r3, [r3, #0]
 800f964:	b29b      	uxth	r3, r3
 800f966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f96e:	817b      	strh	r3, [r7, #10]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	441a      	add	r2, r3
 800f97a:	897b      	ldrh	r3, [r7, #10]
 800f97c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	4413      	add	r3, r2
 800f99a:	881b      	ldrh	r3, [r3, #0]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9a6:	813b      	strh	r3, [r7, #8]
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	441a      	add	r2, r3
 800f9b2:	893b      	ldrh	r3, [r7, #8]
 800f9b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	8013      	strh	r3, [r2, #0]
 800f9c8:	e192      	b.n	800fcf0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	4413      	add	r3, r2
 800f9d4:	881b      	ldrh	r3, [r3, #0]
 800f9d6:	827b      	strh	r3, [r7, #18]
 800f9d8:	8a7b      	ldrh	r3, [r7, #18]
 800f9da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d01b      	beq.n	800fa1a <USB_DeactivateEndpoint+0xf6>
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9f8:	823b      	strh	r3, [r7, #16]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	441a      	add	r2, r3
 800fa04:	8a3b      	ldrh	r3, [r7, #16]
 800fa06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fa12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4413      	add	r3, r2
 800fa24:	881b      	ldrh	r3, [r3, #0]
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa30:	81fb      	strh	r3, [r7, #14]
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	441a      	add	r2, r3
 800fa3c:	89fb      	ldrh	r3, [r7, #14]
 800fa3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	8013      	strh	r3, [r2, #0]
 800fa52:	e14d      	b.n	800fcf0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	785b      	ldrb	r3, [r3, #1]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f040 80a5 	bne.w	800fba8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	843b      	strh	r3, [r7, #32]
 800fa6c:	8c3b      	ldrh	r3, [r7, #32]
 800fa6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d01b      	beq.n	800faae <USB_DeactivateEndpoint+0x18a>
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4413      	add	r3, r2
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa8c:	83fb      	strh	r3, [r7, #30]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	441a      	add	r2, r3
 800fa98:	8bfb      	ldrh	r3, [r7, #30]
 800fa9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800faa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faaa:	b29b      	uxth	r3, r3
 800faac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	83bb      	strh	r3, [r7, #28]
 800fabc:	8bbb      	ldrh	r3, [r7, #28]
 800fabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d01b      	beq.n	800fafe <USB_DeactivateEndpoint+0x1da>
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fadc:	837b      	strh	r3, [r7, #26]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	441a      	add	r2, r3
 800fae8:	8b7b      	ldrh	r3, [r7, #26]
 800faea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	4413      	add	r3, r2
 800fb08:	881b      	ldrh	r3, [r3, #0]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb14:	833b      	strh	r3, [r7, #24]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	441a      	add	r2, r3
 800fb20:	8b3b      	ldrh	r3, [r7, #24]
 800fb22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	4413      	add	r3, r2
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb4c:	82fb      	strh	r3, [r7, #22]
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	441a      	add	r2, r3
 800fb58:	8afb      	ldrh	r3, [r7, #22]
 800fb5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	4413      	add	r3, r2
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb84:	82bb      	strh	r3, [r7, #20]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	441a      	add	r2, r3
 800fb90:	8abb      	ldrh	r3, [r7, #20]
 800fb92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	8013      	strh	r3, [r2, #0]
 800fba6:	e0a3      	b.n	800fcf0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4413      	add	r3, r2
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fbb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d01b      	beq.n	800fbf8 <USB_DeactivateEndpoint+0x2d4>
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	441a      	add	r2, r3
 800fbe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fbe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	4413      	add	r3, r2
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fc06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fc08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d01b      	beq.n	800fc48 <USB_DeactivateEndpoint+0x324>
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	009b      	lsls	r3, r3, #2
 800fc18:	4413      	add	r3, r2
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc26:	853b      	strh	r3, [r7, #40]	; 0x28
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	441a      	add	r2, r3
 800fc32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	4413      	add	r3, r2
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	441a      	add	r2, r3
 800fc6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	4413      	add	r3, r2
 800fc8a:	881b      	ldrh	r3, [r3, #0]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	441a      	add	r2, r3
 800fca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	4413      	add	r3, r2
 800fcc2:	881b      	ldrh	r3, [r3, #0]
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcce:	847b      	strh	r3, [r7, #34]	; 0x22
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	441a      	add	r2, r3
 800fcda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3734      	adds	r7, #52	; 0x34
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr

0800fcfe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b0c2      	sub	sp, #264	; 0x108
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd0c:	6018      	str	r0, [r3, #0]
 800fd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd16:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	785b      	ldrb	r3, [r3, #1]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	f040 86b7 	bne.w	8010a98 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fd2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	699a      	ldr	r2, [r3, #24]
 800fd36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	691b      	ldr	r3, [r3, #16]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d908      	bls.n	800fd58 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800fd46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fd56:	e007      	b.n	800fd68 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800fd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	699b      	ldr	r3, [r3, #24]
 800fd64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800fd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	7b1b      	ldrb	r3, [r3, #12]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d13a      	bne.n	800fdee <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6959      	ldr	r1, [r3, #20]
 800fd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	88da      	ldrh	r2, [r3, #6]
 800fd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fd9a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fd9e:	6800      	ldr	r0, [r0, #0]
 800fda0:	f001 fc98 	bl	80116d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fda4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fda8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	613b      	str	r3, [r7, #16]
 800fdb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	613b      	str	r3, [r7, #16]
 800fdc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	00da      	lsls	r2, r3, #3
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	4413      	add	r3, r2
 800fdda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fdde:	60fb      	str	r3, [r7, #12]
 800fde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	801a      	strh	r2, [r3, #0]
 800fdea:	f000 be1f 	b.w	8010a2c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fdee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	78db      	ldrb	r3, [r3, #3]
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	f040 8462 	bne.w	80106c4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fe00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	6a1a      	ldr	r2, [r3, #32]
 800fe0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	691b      	ldr	r3, [r3, #16]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	f240 83df 	bls.w	80105dc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fe1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4413      	add	r3, r2
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fe48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	441a      	add	r2, r3
 800fe62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fe66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fe72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fe7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6a1a      	ldr	r2, [r3, #32]
 800fe86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe8a:	1ad2      	subs	r2, r2, r3
 800fe8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fe98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	4413      	add	r3, r2
 800feb2:	881b      	ldrh	r3, [r3, #0]
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feba:	2b00      	cmp	r3, #0
 800febc:	f000 81c7 	beq.w	801024e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	633b      	str	r3, [r7, #48]	; 0x30
 800fecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	785b      	ldrb	r3, [r3, #1]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d177      	bne.n	800ffcc <USB_EPStartXfer+0x2ce>
 800fedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	461a      	mov	r2, r3
 800fefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefc:	4413      	add	r3, r2
 800fefe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	00da      	lsls	r2, r3, #3
 800ff0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff10:	4413      	add	r3, r2
 800ff12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ff16:	627b      	str	r3, [r7, #36]	; 0x24
 800ff18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	801a      	strh	r2, [r3, #0]
 800ff28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff2c:	2b3e      	cmp	r3, #62	; 0x3e
 800ff2e:	d921      	bls.n	800ff74 <USB_EPStartXfer+0x276>
 800ff30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff34:	095b      	lsrs	r3, r3, #5
 800ff36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ff3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff3e:	f003 031f 	and.w	r3, r3, #31
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d104      	bne.n	800ff50 <USB_EPStartXfer+0x252>
 800ff46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ff4a:	3b01      	subs	r3, #1
 800ff4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	029b      	lsls	r3, r3, #10
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	4313      	orrs	r3, r2
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff70:	801a      	strh	r2, [r3, #0]
 800ff72:	e050      	b.n	8010016 <USB_EPStartXfer+0x318>
 800ff74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10a      	bne.n	800ff92 <USB_EPStartXfer+0x294>
 800ff7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7e:	881b      	ldrh	r3, [r3, #0]
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8e:	801a      	strh	r2, [r3, #0]
 800ff90:	e041      	b.n	8010016 <USB_EPStartXfer+0x318>
 800ff92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff96:	085b      	lsrs	r3, r3, #1
 800ff98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ff9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d004      	beq.n	800ffb2 <USB_EPStartXfer+0x2b4>
 800ffa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ffac:	3301      	adds	r3, #1
 800ffae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	029b      	lsls	r3, r3, #10
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	801a      	strh	r2, [r3, #0]
 800ffca:	e024      	b.n	8010016 <USB_EPStartXfer+0x318>
 800ffcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	785b      	ldrb	r3, [r3, #1]
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d11c      	bne.n	8010016 <USB_EPStartXfer+0x318>
 800ffdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	461a      	mov	r2, r3
 800ffee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff0:	4413      	add	r3, r2
 800fff2:	633b      	str	r3, [r7, #48]	; 0x30
 800fff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	00da      	lsls	r2, r3, #3
 8010002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010004:	4413      	add	r3, r2
 8010006:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801000a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801000c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010010:	b29a      	uxth	r2, r3
 8010012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010014:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801001a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	895b      	ldrh	r3, [r3, #10]
 8010022:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801002a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	6959      	ldr	r1, [r3, #20]
 8010032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010036:	b29b      	uxth	r3, r3
 8010038:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801003c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010040:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010044:	6800      	ldr	r0, [r0, #0]
 8010046:	f001 fb45 	bl	80116d4 <USB_WritePMA>
            ep->xfer_buff += len;
 801004a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801004e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	695a      	ldr	r2, [r3, #20]
 8010056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801005a:	441a      	add	r2, r3
 801005c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801006c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	6a1a      	ldr	r2, [r3, #32]
 8010074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	691b      	ldr	r3, [r3, #16]
 8010080:	429a      	cmp	r2, r3
 8010082:	d90f      	bls.n	80100a4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	6a1a      	ldr	r2, [r3, #32]
 8010090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010094:	1ad2      	subs	r2, r2, r3
 8010096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801009a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	621a      	str	r2, [r3, #32]
 80100a2:	e00e      	b.n	80100c2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80100a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	6a1b      	ldr	r3, [r3, #32]
 80100b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80100b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2200      	movs	r2, #0
 80100c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80100c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	785b      	ldrb	r3, [r3, #1]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d177      	bne.n	80101c2 <USB_EPStartXfer+0x4c4>
 80100d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	61bb      	str	r3, [r7, #24]
 80100de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	461a      	mov	r2, r3
 80100f0:	69bb      	ldr	r3, [r7, #24]
 80100f2:	4413      	add	r3, r2
 80100f4:	61bb      	str	r3, [r7, #24]
 80100f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	00da      	lsls	r2, r3, #3
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	4413      	add	r3, r2
 8010108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801010c:	617b      	str	r3, [r7, #20]
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	b29b      	uxth	r3, r3
 8010114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010118:	b29a      	uxth	r2, r3
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	801a      	strh	r2, [r3, #0]
 801011e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010122:	2b3e      	cmp	r3, #62	; 0x3e
 8010124:	d921      	bls.n	801016a <USB_EPStartXfer+0x46c>
 8010126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801012a:	095b      	lsrs	r3, r3, #5
 801012c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010134:	f003 031f 	and.w	r3, r3, #31
 8010138:	2b00      	cmp	r3, #0
 801013a:	d104      	bne.n	8010146 <USB_EPStartXfer+0x448>
 801013c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010140:	3b01      	subs	r3, #1
 8010142:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	b29a      	uxth	r2, r3
 801014c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010150:	b29b      	uxth	r3, r3
 8010152:	029b      	lsls	r3, r3, #10
 8010154:	b29b      	uxth	r3, r3
 8010156:	4313      	orrs	r3, r2
 8010158:	b29b      	uxth	r3, r3
 801015a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801015e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010162:	b29a      	uxth	r2, r3
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	801a      	strh	r2, [r3, #0]
 8010168:	e056      	b.n	8010218 <USB_EPStartXfer+0x51a>
 801016a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10a      	bne.n	8010188 <USB_EPStartXfer+0x48a>
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	b29b      	uxth	r3, r3
 8010178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801017c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010180:	b29a      	uxth	r2, r3
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	801a      	strh	r2, [r3, #0]
 8010186:	e047      	b.n	8010218 <USB_EPStartXfer+0x51a>
 8010188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801018c:	085b      	lsrs	r3, r3, #1
 801018e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010196:	f003 0301 	and.w	r3, r3, #1
 801019a:	2b00      	cmp	r3, #0
 801019c:	d004      	beq.n	80101a8 <USB_EPStartXfer+0x4aa>
 801019e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101a2:	3301      	adds	r3, #1
 80101a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	029b      	lsls	r3, r3, #10
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	4313      	orrs	r3, r2
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	801a      	strh	r2, [r3, #0]
 80101c0:	e02a      	b.n	8010218 <USB_EPStartXfer+0x51a>
 80101c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	785b      	ldrb	r3, [r3, #1]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d122      	bne.n	8010218 <USB_EPStartXfer+0x51a>
 80101d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	623b      	str	r3, [r7, #32]
 80101de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	461a      	mov	r2, r3
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	4413      	add	r3, r2
 80101f4:	623b      	str	r3, [r7, #32]
 80101f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	00da      	lsls	r2, r3, #3
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	4413      	add	r3, r2
 8010208:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801020c:	61fb      	str	r3, [r7, #28]
 801020e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010212:	b29a      	uxth	r2, r3
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801021c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801022c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	6959      	ldr	r1, [r3, #20]
 8010234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010238:	b29b      	uxth	r3, r3
 801023a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801023e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010242:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010246:	6800      	ldr	r0, [r0, #0]
 8010248:	f001 fa44 	bl	80116d4 <USB_WritePMA>
 801024c:	e3ee      	b.n	8010a2c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801024e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	785b      	ldrb	r3, [r3, #1]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d177      	bne.n	801034e <USB_EPStartXfer+0x650>
 801025e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	64bb      	str	r3, [r7, #72]	; 0x48
 801026a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801026e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010278:	b29b      	uxth	r3, r3
 801027a:	461a      	mov	r2, r3
 801027c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801027e:	4413      	add	r3, r2
 8010280:	64bb      	str	r3, [r7, #72]	; 0x48
 8010282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	00da      	lsls	r2, r3, #3
 8010290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010292:	4413      	add	r3, r2
 8010294:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010298:	647b      	str	r3, [r7, #68]	; 0x44
 801029a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102a8:	801a      	strh	r2, [r3, #0]
 80102aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102ae:	2b3e      	cmp	r3, #62	; 0x3e
 80102b0:	d921      	bls.n	80102f6 <USB_EPStartXfer+0x5f8>
 80102b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102b6:	095b      	lsrs	r3, r3, #5
 80102b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80102bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102c0:	f003 031f 	and.w	r3, r3, #31
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d104      	bne.n	80102d2 <USB_EPStartXfer+0x5d4>
 80102c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102cc:	3b01      	subs	r3, #1
 80102ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80102d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102dc:	b29b      	uxth	r3, r3
 80102de:	029b      	lsls	r3, r3, #10
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	4313      	orrs	r3, r2
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102f2:	801a      	strh	r2, [r3, #0]
 80102f4:	e056      	b.n	80103a4 <USB_EPStartXfer+0x6a6>
 80102f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d10a      	bne.n	8010314 <USB_EPStartXfer+0x616>
 80102fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	b29b      	uxth	r3, r3
 8010304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801030c:	b29a      	uxth	r2, r3
 801030e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010310:	801a      	strh	r2, [r3, #0]
 8010312:	e047      	b.n	80103a4 <USB_EPStartXfer+0x6a6>
 8010314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010318:	085b      	lsrs	r3, r3, #1
 801031a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801031e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	2b00      	cmp	r3, #0
 8010328:	d004      	beq.n	8010334 <USB_EPStartXfer+0x636>
 801032a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801032e:	3301      	adds	r3, #1
 8010330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	b29a      	uxth	r2, r3
 801033a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801033e:	b29b      	uxth	r3, r3
 8010340:	029b      	lsls	r3, r3, #10
 8010342:	b29b      	uxth	r3, r3
 8010344:	4313      	orrs	r3, r2
 8010346:	b29a      	uxth	r2, r3
 8010348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801034a:	801a      	strh	r2, [r3, #0]
 801034c:	e02a      	b.n	80103a4 <USB_EPStartXfer+0x6a6>
 801034e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	785b      	ldrb	r3, [r3, #1]
 801035a:	2b01      	cmp	r3, #1
 801035c:	d122      	bne.n	80103a4 <USB_EPStartXfer+0x6a6>
 801035e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	653b      	str	r3, [r7, #80]	; 0x50
 801036a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801036e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010378:	b29b      	uxth	r3, r3
 801037a:	461a      	mov	r2, r3
 801037c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801037e:	4413      	add	r3, r2
 8010380:	653b      	str	r3, [r7, #80]	; 0x50
 8010382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	00da      	lsls	r2, r3, #3
 8010390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010392:	4413      	add	r3, r2
 8010394:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010398:	64fb      	str	r3, [r7, #76]	; 0x4c
 801039a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801039e:	b29a      	uxth	r2, r3
 80103a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80103a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	891b      	ldrh	r3, [r3, #8]
 80103b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80103b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	6959      	ldr	r1, [r3, #20]
 80103c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80103ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80103ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80103d2:	6800      	ldr	r0, [r0, #0]
 80103d4:	f001 f97e 	bl	80116d4 <USB_WritePMA>
            ep->xfer_buff += len;
 80103d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	695a      	ldr	r2, [r3, #20]
 80103e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103e8:	441a      	add	r2, r3
 80103ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80103f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6a1a      	ldr	r2, [r3, #32]
 8010402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	429a      	cmp	r2, r3
 8010410:	d90f      	bls.n	8010432 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	6a1a      	ldr	r2, [r3, #32]
 801041e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010422:	1ad2      	subs	r2, r2, r3
 8010424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	621a      	str	r2, [r3, #32]
 8010430:	e00e      	b.n	8010450 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	6a1b      	ldr	r3, [r3, #32]
 801043e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2200      	movs	r2, #0
 801044e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	643b      	str	r3, [r7, #64]	; 0x40
 801045c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	785b      	ldrb	r3, [r3, #1]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d177      	bne.n	801055c <USB_EPStartXfer+0x85e>
 801046c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	63bb      	str	r3, [r7, #56]	; 0x38
 8010478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801047c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010486:	b29b      	uxth	r3, r3
 8010488:	461a      	mov	r2, r3
 801048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048c:	4413      	add	r3, r2
 801048e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	00da      	lsls	r2, r3, #3
 801049e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a0:	4413      	add	r3, r2
 80104a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80104a6:	637b      	str	r3, [r7, #52]	; 0x34
 80104a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104aa:	881b      	ldrh	r3, [r3, #0]
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b6:	801a      	strh	r2, [r3, #0]
 80104b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104bc:	2b3e      	cmp	r3, #62	; 0x3e
 80104be:	d921      	bls.n	8010504 <USB_EPStartXfer+0x806>
 80104c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104c4:	095b      	lsrs	r3, r3, #5
 80104c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80104ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104ce:	f003 031f 	and.w	r3, r3, #31
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d104      	bne.n	80104e0 <USB_EPStartXfer+0x7e2>
 80104d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80104da:	3b01      	subs	r3, #1
 80104dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80104e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e2:	881b      	ldrh	r3, [r3, #0]
 80104e4:	b29a      	uxth	r2, r3
 80104e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	029b      	lsls	r3, r3, #10
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	4313      	orrs	r3, r2
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010500:	801a      	strh	r2, [r3, #0]
 8010502:	e050      	b.n	80105a6 <USB_EPStartXfer+0x8a8>
 8010504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10a      	bne.n	8010522 <USB_EPStartXfer+0x824>
 801050c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	b29b      	uxth	r3, r3
 8010512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801051a:	b29a      	uxth	r2, r3
 801051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051e:	801a      	strh	r2, [r3, #0]
 8010520:	e041      	b.n	80105a6 <USB_EPStartXfer+0x8a8>
 8010522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010526:	085b      	lsrs	r3, r3, #1
 8010528:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801052c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010530:	f003 0301 	and.w	r3, r3, #1
 8010534:	2b00      	cmp	r3, #0
 8010536:	d004      	beq.n	8010542 <USB_EPStartXfer+0x844>
 8010538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801053c:	3301      	adds	r3, #1
 801053e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010544:	881b      	ldrh	r3, [r3, #0]
 8010546:	b29a      	uxth	r2, r3
 8010548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801054c:	b29b      	uxth	r3, r3
 801054e:	029b      	lsls	r3, r3, #10
 8010550:	b29b      	uxth	r3, r3
 8010552:	4313      	orrs	r3, r2
 8010554:	b29a      	uxth	r2, r3
 8010556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010558:	801a      	strh	r2, [r3, #0]
 801055a:	e024      	b.n	80105a6 <USB_EPStartXfer+0x8a8>
 801055c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	785b      	ldrb	r3, [r3, #1]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d11c      	bne.n	80105a6 <USB_EPStartXfer+0x8a8>
 801056c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801057a:	b29b      	uxth	r3, r3
 801057c:	461a      	mov	r2, r3
 801057e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010580:	4413      	add	r3, r2
 8010582:	643b      	str	r3, [r7, #64]	; 0x40
 8010584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	00da      	lsls	r2, r3, #3
 8010592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010594:	4413      	add	r3, r2
 8010596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801059a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801059c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80105a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	895b      	ldrh	r3, [r3, #10]
 80105b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	6959      	ldr	r1, [r3, #20]
 80105c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80105cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80105d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80105d4:	6800      	ldr	r0, [r0, #0]
 80105d6:	f001 f87d 	bl	80116d4 <USB_WritePMA>
 80105da:	e227      	b.n	8010a2c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80105dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80105ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4413      	add	r3, r2
 8010606:	881b      	ldrh	r3, [r3, #0]
 8010608:	b29b      	uxth	r3, r3
 801060a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801060e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010612:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	441a      	add	r2, r3
 8010630:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801063c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010644:	b29b      	uxth	r3, r3
 8010646:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801064c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010662:	b29b      	uxth	r3, r3
 8010664:	461a      	mov	r2, r3
 8010666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010668:	4413      	add	r3, r2
 801066a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801066c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	00da      	lsls	r2, r3, #3
 801067a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801067c:	4413      	add	r3, r2
 801067e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010682:	65bb      	str	r3, [r7, #88]	; 0x58
 8010684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010688:	b29a      	uxth	r2, r3
 801068a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801068c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801068e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	891b      	ldrh	r3, [r3, #8]
 801069a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801069e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	6959      	ldr	r1, [r3, #20]
 80106aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80106b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80106b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80106bc:	6800      	ldr	r0, [r0, #0]
 80106be:	f001 f809 	bl	80116d4 <USB_WritePMA>
 80106c2:	e1b3      	b.n	8010a2c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80106c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	6a1a      	ldr	r2, [r3, #32]
 80106d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106d4:	1ad2      	subs	r2, r2, r3
 80106d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80106e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4413      	add	r3, r2
 80106fc:	881b      	ldrh	r3, [r3, #0]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010704:	2b00      	cmp	r3, #0
 8010706:	f000 80c6 	beq.w	8010896 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801070a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801070e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	673b      	str	r3, [r7, #112]	; 0x70
 8010716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801071a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	785b      	ldrb	r3, [r3, #1]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d177      	bne.n	8010816 <USB_EPStartXfer+0xb18>
 8010726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801072a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	66bb      	str	r3, [r7, #104]	; 0x68
 8010732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010740:	b29b      	uxth	r3, r3
 8010742:	461a      	mov	r2, r3
 8010744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010746:	4413      	add	r3, r2
 8010748:	66bb      	str	r3, [r7, #104]	; 0x68
 801074a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801074e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	00da      	lsls	r2, r3, #3
 8010758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801075a:	4413      	add	r3, r2
 801075c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010760:	667b      	str	r3, [r7, #100]	; 0x64
 8010762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010764:	881b      	ldrh	r3, [r3, #0]
 8010766:	b29b      	uxth	r3, r3
 8010768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801076c:	b29a      	uxth	r2, r3
 801076e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010770:	801a      	strh	r2, [r3, #0]
 8010772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010776:	2b3e      	cmp	r3, #62	; 0x3e
 8010778:	d921      	bls.n	80107be <USB_EPStartXfer+0xac0>
 801077a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801077e:	095b      	lsrs	r3, r3, #5
 8010780:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010788:	f003 031f 	and.w	r3, r3, #31
 801078c:	2b00      	cmp	r3, #0
 801078e:	d104      	bne.n	801079a <USB_EPStartXfer+0xa9c>
 8010790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010794:	3b01      	subs	r3, #1
 8010796:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801079a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801079c:	881b      	ldrh	r3, [r3, #0]
 801079e:	b29a      	uxth	r2, r3
 80107a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	029b      	lsls	r3, r3, #10
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	4313      	orrs	r3, r2
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107ba:	801a      	strh	r2, [r3, #0]
 80107bc:	e050      	b.n	8010860 <USB_EPStartXfer+0xb62>
 80107be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10a      	bne.n	80107dc <USB_EPStartXfer+0xade>
 80107c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107d8:	801a      	strh	r2, [r3, #0]
 80107da:	e041      	b.n	8010860 <USB_EPStartXfer+0xb62>
 80107dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107e0:	085b      	lsrs	r3, r3, #1
 80107e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80107e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107ea:	f003 0301 	and.w	r3, r3, #1
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d004      	beq.n	80107fc <USB_EPStartXfer+0xafe>
 80107f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80107f6:	3301      	adds	r3, #1
 80107f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80107fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107fe:	881b      	ldrh	r3, [r3, #0]
 8010800:	b29a      	uxth	r2, r3
 8010802:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010806:	b29b      	uxth	r3, r3
 8010808:	029b      	lsls	r3, r3, #10
 801080a:	b29b      	uxth	r3, r3
 801080c:	4313      	orrs	r3, r2
 801080e:	b29a      	uxth	r2, r3
 8010810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010812:	801a      	strh	r2, [r3, #0]
 8010814:	e024      	b.n	8010860 <USB_EPStartXfer+0xb62>
 8010816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801081a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	785b      	ldrb	r3, [r3, #1]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d11c      	bne.n	8010860 <USB_EPStartXfer+0xb62>
 8010826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801082a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010834:	b29b      	uxth	r3, r3
 8010836:	461a      	mov	r2, r3
 8010838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801083a:	4413      	add	r3, r2
 801083c:	673b      	str	r3, [r7, #112]	; 0x70
 801083e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	00da      	lsls	r2, r3, #3
 801084c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801084e:	4413      	add	r3, r2
 8010850:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801085a:	b29a      	uxth	r2, r3
 801085c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801085e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	895b      	ldrh	r3, [r3, #10]
 801086c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	6959      	ldr	r1, [r3, #20]
 801087c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010880:	b29b      	uxth	r3, r3
 8010882:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010886:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801088a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801088e:	6800      	ldr	r0, [r0, #0]
 8010890:	f000 ff20 	bl	80116d4 <USB_WritePMA>
 8010894:	e0ca      	b.n	8010a2c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801089a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	785b      	ldrb	r3, [r3, #1]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d177      	bne.n	8010996 <USB_EPStartXfer+0xc98>
 80108a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	461a      	mov	r2, r3
 80108c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80108c6:	4413      	add	r3, r2
 80108c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	00da      	lsls	r2, r3, #3
 80108d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80108da:	4413      	add	r3, r2
 80108dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80108e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108f0:	801a      	strh	r2, [r3, #0]
 80108f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108f6:	2b3e      	cmp	r3, #62	; 0x3e
 80108f8:	d921      	bls.n	801093e <USB_EPStartXfer+0xc40>
 80108fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108fe:	095b      	lsrs	r3, r3, #5
 8010900:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010908:	f003 031f 	and.w	r3, r3, #31
 801090c:	2b00      	cmp	r3, #0
 801090e:	d104      	bne.n	801091a <USB_EPStartXfer+0xc1c>
 8010910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010914:	3b01      	subs	r3, #1
 8010916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801091a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	b29a      	uxth	r2, r3
 8010920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010924:	b29b      	uxth	r3, r3
 8010926:	029b      	lsls	r3, r3, #10
 8010928:	b29b      	uxth	r3, r3
 801092a:	4313      	orrs	r3, r2
 801092c:	b29b      	uxth	r3, r3
 801092e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010936:	b29a      	uxth	r2, r3
 8010938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801093a:	801a      	strh	r2, [r3, #0]
 801093c:	e05c      	b.n	80109f8 <USB_EPStartXfer+0xcfa>
 801093e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010942:	2b00      	cmp	r3, #0
 8010944:	d10a      	bne.n	801095c <USB_EPStartXfer+0xc5e>
 8010946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	b29b      	uxth	r3, r3
 801094c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010954:	b29a      	uxth	r2, r3
 8010956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010958:	801a      	strh	r2, [r3, #0]
 801095a:	e04d      	b.n	80109f8 <USB_EPStartXfer+0xcfa>
 801095c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010960:	085b      	lsrs	r3, r3, #1
 8010962:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <USB_EPStartXfer+0xc7e>
 8010972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010976:	3301      	adds	r3, #1
 8010978:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801097c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	b29a      	uxth	r2, r3
 8010982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010986:	b29b      	uxth	r3, r3
 8010988:	029b      	lsls	r3, r3, #10
 801098a:	b29b      	uxth	r3, r3
 801098c:	4313      	orrs	r3, r2
 801098e:	b29a      	uxth	r2, r3
 8010990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010992:	801a      	strh	r2, [r3, #0]
 8010994:	e030      	b.n	80109f8 <USB_EPStartXfer+0xcfa>
 8010996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801099a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	785b      	ldrb	r3, [r3, #1]
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d128      	bne.n	80109f8 <USB_EPStartXfer+0xcfa>
 80109a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	461a      	mov	r2, r3
 80109c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109ca:	4413      	add	r3, r2
 80109cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	00da      	lsls	r2, r3, #3
 80109de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109e2:	4413      	add	r3, r2
 80109e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80109ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80109f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	891b      	ldrh	r3, [r3, #8]
 8010a04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	6959      	ldr	r1, [r3, #20]
 8010a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010a1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010a22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010a26:	6800      	ldr	r0, [r0, #0]
 8010a28:	f000 fe54 	bl	80116d4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a52:	817b      	strh	r3, [r7, #10]
 8010a54:	897b      	ldrh	r3, [r7, #10]
 8010a56:	f083 0310 	eor.w	r3, r3, #16
 8010a5a:	817b      	strh	r3, [r7, #10]
 8010a5c:	897b      	ldrh	r3, [r7, #10]
 8010a5e:	f083 0320 	eor.w	r3, r3, #32
 8010a62:	817b      	strh	r3, [r7, #10]
 8010a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	441a      	add	r2, r3
 8010a7e:	897b      	ldrh	r3, [r7, #10]
 8010a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	8013      	strh	r3, [r2, #0]
 8010a94:	f000 bcde 	b.w	8011454 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	7b1b      	ldrb	r3, [r3, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f040 80bb 	bne.w	8010c20 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	699a      	ldr	r2, [r3, #24]
 8010ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d917      	bls.n	8010af6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8010ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	699a      	ldr	r2, [r3, #24]
 8010ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ae6:	1ad2      	subs	r2, r2, r3
 8010ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	619a      	str	r2, [r3, #24]
 8010af4:	e00e      	b.n	8010b14 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8010af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	699b      	ldr	r3, [r3, #24]
 8010b02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2200      	movs	r2, #0
 8010b12:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	461a      	mov	r2, r3
 8010b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b38:	4413      	add	r3, r2
 8010b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	00da      	lsls	r2, r3, #3
 8010b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b50:	4413      	add	r3, r2
 8010b52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b5e:	881b      	ldrh	r3, [r3, #0]
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b6c:	801a      	strh	r2, [r3, #0]
 8010b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b72:	2b3e      	cmp	r3, #62	; 0x3e
 8010b74:	d924      	bls.n	8010bc0 <USB_EPStartXfer+0xec2>
 8010b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b7a:	095b      	lsrs	r3, r3, #5
 8010b7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b84:	f003 031f 	and.w	r3, r3, #31
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d104      	bne.n	8010b96 <USB_EPStartXfer+0xe98>
 8010b8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b90:	3b01      	subs	r3, #1
 8010b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	029b      	lsls	r3, r3, #10
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bba:	801a      	strh	r2, [r3, #0]
 8010bbc:	f000 bc10 	b.w	80113e0 <USB_EPStartXfer+0x16e2>
 8010bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d10c      	bne.n	8010be2 <USB_EPStartXfer+0xee4>
 8010bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bde:	801a      	strh	r2, [r3, #0]
 8010be0:	e3fe      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
 8010be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be6:	085b      	lsrs	r3, r3, #1
 8010be8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bf0:	f003 0301 	and.w	r3, r3, #1
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d004      	beq.n	8010c02 <USB_EPStartXfer+0xf04>
 8010bf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	029b      	lsls	r3, r3, #10
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	4313      	orrs	r3, r2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c1c:	801a      	strh	r2, [r3, #0]
 8010c1e:	e3df      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	78db      	ldrb	r3, [r3, #3]
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	f040 8218 	bne.w	8011062 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	785b      	ldrb	r3, [r3, #1]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f040 809d 	bne.w	8010d7e <USB_EPStartXfer+0x1080>
 8010c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	461a      	mov	r2, r3
 8010c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c68:	4413      	add	r3, r2
 8010c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	00da      	lsls	r2, r3, #3
 8010c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c80:	4413      	add	r3, r2
 8010c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c9c:	801a      	strh	r2, [r3, #0]
 8010c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	2b3e      	cmp	r3, #62	; 0x3e
 8010cac:	d92b      	bls.n	8010d06 <USB_EPStartXfer+0x1008>
 8010cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	095b      	lsrs	r3, r3, #5
 8010cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	691b      	ldr	r3, [r3, #16]
 8010ccc:	f003 031f 	and.w	r3, r3, #31
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d104      	bne.n	8010cde <USB_EPStartXfer+0xfe0>
 8010cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	029b      	lsls	r3, r3, #10
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	4313      	orrs	r3, r2
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d02:	801a      	strh	r2, [r3, #0]
 8010d04:	e070      	b.n	8010de8 <USB_EPStartXfer+0x10ea>
 8010d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	691b      	ldr	r3, [r3, #16]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d10c      	bne.n	8010d30 <USB_EPStartXfer+0x1032>
 8010d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d2c:	801a      	strh	r2, [r3, #0]
 8010d2e:	e05b      	b.n	8010de8 <USB_EPStartXfer+0x10ea>
 8010d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	691b      	ldr	r3, [r3, #16]
 8010d3c:	085b      	lsrs	r3, r3, #1
 8010d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d004      	beq.n	8010d60 <USB_EPStartXfer+0x1062>
 8010d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	029b      	lsls	r3, r3, #10
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	4313      	orrs	r3, r2
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d7a:	801a      	strh	r2, [r3, #0]
 8010d7c:	e034      	b.n	8010de8 <USB_EPStartXfer+0x10ea>
 8010d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	785b      	ldrb	r3, [r3, #1]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d12c      	bne.n	8010de8 <USB_EPStartXfer+0x10ea>
 8010d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	461a      	mov	r2, r3
 8010dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010db2:	4413      	add	r3, r2
 8010db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	00da      	lsls	r2, r3, #3
 8010dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dca:	4413      	add	r3, r2
 8010dcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010de6:	801a      	strh	r2, [r3, #0]
 8010de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	785b      	ldrb	r3, [r3, #1]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f040 809d 	bne.w	8010f42 <USB_EPStartXfer+0x1244>
 8010e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	461a      	mov	r2, r3
 8010e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e2c:	4413      	add	r3, r2
 8010e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	00da      	lsls	r2, r3, #3
 8010e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e44:	4413      	add	r3, r2
 8010e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e52:	881b      	ldrh	r3, [r3, #0]
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e60:	801a      	strh	r2, [r3, #0]
 8010e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8010e70:	d92b      	bls.n	8010eca <USB_EPStartXfer+0x11cc>
 8010e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	691b      	ldr	r3, [r3, #16]
 8010e7e:	095b      	lsrs	r3, r3, #5
 8010e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	f003 031f 	and.w	r3, r3, #31
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d104      	bne.n	8010ea2 <USB_EPStartXfer+0x11a4>
 8010e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	029b      	lsls	r3, r3, #10
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ec6:	801a      	strh	r2, [r3, #0]
 8010ec8:	e069      	b.n	8010f9e <USB_EPStartXfer+0x12a0>
 8010eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	691b      	ldr	r3, [r3, #16]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d10c      	bne.n	8010ef4 <USB_EPStartXfer+0x11f6>
 8010eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ef0:	801a      	strh	r2, [r3, #0]
 8010ef2:	e054      	b.n	8010f9e <USB_EPStartXfer+0x12a0>
 8010ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	691b      	ldr	r3, [r3, #16]
 8010f00:	085b      	lsrs	r3, r3, #1
 8010f02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	691b      	ldr	r3, [r3, #16]
 8010f12:	f003 0301 	and.w	r3, r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d004      	beq.n	8010f24 <USB_EPStartXfer+0x1226>
 8010f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f1e:	3301      	adds	r3, #1
 8010f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	029b      	lsls	r3, r3, #10
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	4313      	orrs	r3, r2
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f3e:	801a      	strh	r2, [r3, #0]
 8010f40:	e02d      	b.n	8010f9e <USB_EPStartXfer+0x12a0>
 8010f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	785b      	ldrb	r3, [r3, #1]
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d125      	bne.n	8010f9e <USB_EPStartXfer+0x12a0>
 8010f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	461a      	mov	r2, r3
 8010f64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f68:	4413      	add	r3, r2
 8010f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	00da      	lsls	r2, r3, #3
 8010f7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f80:	4413      	add	r3, r2
 8010f82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	691b      	ldr	r3, [r3, #16]
 8010f96:	b29a      	uxth	r2, r3
 8010f98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f9c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 8218 	beq.w	80113e0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	4413      	add	r3, r2
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010fd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d005      	beq.n	8010fe8 <USB_EPStartXfer+0x12ea>
 8010fdc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d10d      	bne.n	8011004 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010fe8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f040 81f5 	bne.w	80113e0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010ff6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f040 81ee 	bne.w	80113e0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	4413      	add	r3, r2
 801101e:	881b      	ldrh	r3, [r3, #0]
 8011020:	b29b      	uxth	r3, r3
 8011022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801102a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801102e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801103c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	441a      	add	r2, r3
 8011048:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801104c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801105c:	b29b      	uxth	r3, r3
 801105e:	8013      	strh	r3, [r2, #0]
 8011060:	e1be      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	78db      	ldrb	r3, [r3, #3]
 801106e:	2b01      	cmp	r3, #1
 8011070:	f040 81b4 	bne.w	80113dc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	699a      	ldr	r2, [r3, #24]
 8011080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	429a      	cmp	r2, r3
 801108e:	d917      	bls.n	80110c0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	691b      	ldr	r3, [r3, #16]
 801109c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80110a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	699a      	ldr	r2, [r3, #24]
 80110ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110b0:	1ad2      	subs	r2, r2, r3
 80110b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	619a      	str	r2, [r3, #24]
 80110be:	e00e      	b.n	80110de <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80110c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	699b      	ldr	r3, [r3, #24]
 80110cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80110d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2200      	movs	r2, #0
 80110dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80110de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	785b      	ldrb	r3, [r3, #1]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f040 8085 	bne.w	80111fa <USB_EPStartXfer+0x14fc>
 80110f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80110fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801110c:	b29b      	uxth	r3, r3
 801110e:	461a      	mov	r2, r3
 8011110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011114:	4413      	add	r3, r2
 8011116:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801111a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801111e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	00da      	lsls	r2, r3, #3
 8011128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801112c:	4413      	add	r3, r2
 801112e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	b29b      	uxth	r3, r3
 801113e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011142:	b29a      	uxth	r2, r3
 8011144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011148:	801a      	strh	r2, [r3, #0]
 801114a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801114e:	2b3e      	cmp	r3, #62	; 0x3e
 8011150:	d923      	bls.n	801119a <USB_EPStartXfer+0x149c>
 8011152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011156:	095b      	lsrs	r3, r3, #5
 8011158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801115c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011160:	f003 031f 	and.w	r3, r3, #31
 8011164:	2b00      	cmp	r3, #0
 8011166:	d104      	bne.n	8011172 <USB_EPStartXfer+0x1474>
 8011168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801116c:	3b01      	subs	r3, #1
 801116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011176:	881b      	ldrh	r3, [r3, #0]
 8011178:	b29a      	uxth	r2, r3
 801117a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801117e:	b29b      	uxth	r3, r3
 8011180:	029b      	lsls	r3, r3, #10
 8011182:	b29b      	uxth	r3, r3
 8011184:	4313      	orrs	r3, r2
 8011186:	b29b      	uxth	r3, r3
 8011188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801118c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011190:	b29a      	uxth	r2, r3
 8011192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011196:	801a      	strh	r2, [r3, #0]
 8011198:	e060      	b.n	801125c <USB_EPStartXfer+0x155e>
 801119a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10c      	bne.n	80111bc <USB_EPStartXfer+0x14be>
 80111a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111b8:	801a      	strh	r2, [r3, #0]
 80111ba:	e04f      	b.n	801125c <USB_EPStartXfer+0x155e>
 80111bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111c0:	085b      	lsrs	r3, r3, #1
 80111c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80111c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111ca:	f003 0301 	and.w	r3, r3, #1
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d004      	beq.n	80111dc <USB_EPStartXfer+0x14de>
 80111d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111d6:	3301      	adds	r3, #1
 80111d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80111dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111e0:	881b      	ldrh	r3, [r3, #0]
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	029b      	lsls	r3, r3, #10
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	4313      	orrs	r3, r2
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111f6:	801a      	strh	r2, [r3, #0]
 80111f8:	e030      	b.n	801125c <USB_EPStartXfer+0x155e>
 80111fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	785b      	ldrb	r3, [r3, #1]
 8011206:	2b01      	cmp	r3, #1
 8011208:	d128      	bne.n	801125c <USB_EPStartXfer+0x155e>
 801120a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801120e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801121c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011226:	b29b      	uxth	r3, r3
 8011228:	461a      	mov	r2, r3
 801122a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801122e:	4413      	add	r3, r2
 8011230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	00da      	lsls	r2, r3, #3
 8011242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011246:	4413      	add	r3, r2
 8011248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801124c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011254:	b29a      	uxth	r2, r3
 8011256:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801125a:	801a      	strh	r2, [r3, #0]
 801125c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801126a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	785b      	ldrb	r3, [r3, #1]
 8011276:	2b00      	cmp	r3, #0
 8011278:	f040 8085 	bne.w	8011386 <USB_EPStartXfer+0x1688>
 801127c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801128a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801128e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011298:	b29b      	uxth	r3, r3
 801129a:	461a      	mov	r2, r3
 801129c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80112a0:	4413      	add	r3, r2
 80112a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80112a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	00da      	lsls	r2, r3, #3
 80112b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80112b8:	4413      	add	r3, r2
 80112ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80112be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80112c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80112c6:	881b      	ldrh	r3, [r3, #0]
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80112d4:	801a      	strh	r2, [r3, #0]
 80112d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112da:	2b3e      	cmp	r3, #62	; 0x3e
 80112dc:	d923      	bls.n	8011326 <USB_EPStartXfer+0x1628>
 80112de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112e2:	095b      	lsrs	r3, r3, #5
 80112e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80112e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112ec:	f003 031f 	and.w	r3, r3, #31
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d104      	bne.n	80112fe <USB_EPStartXfer+0x1600>
 80112f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80112f8:	3b01      	subs	r3, #1
 80112fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80112fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	b29a      	uxth	r2, r3
 8011306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801130a:	b29b      	uxth	r3, r3
 801130c:	029b      	lsls	r3, r3, #10
 801130e:	b29b      	uxth	r3, r3
 8011310:	4313      	orrs	r3, r2
 8011312:	b29b      	uxth	r3, r3
 8011314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801131c:	b29a      	uxth	r2, r3
 801131e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011322:	801a      	strh	r2, [r3, #0]
 8011324:	e05c      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
 8011326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801132a:	2b00      	cmp	r3, #0
 801132c:	d10c      	bne.n	8011348 <USB_EPStartXfer+0x164a>
 801132e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	b29b      	uxth	r3, r3
 8011336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801133a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801133e:	b29a      	uxth	r2, r3
 8011340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011344:	801a      	strh	r2, [r3, #0]
 8011346:	e04b      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
 8011348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801134c:	085b      	lsrs	r3, r3, #1
 801134e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011356:	f003 0301 	and.w	r3, r3, #1
 801135a:	2b00      	cmp	r3, #0
 801135c:	d004      	beq.n	8011368 <USB_EPStartXfer+0x166a>
 801135e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011362:	3301      	adds	r3, #1
 8011364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	b29a      	uxth	r2, r3
 8011370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011374:	b29b      	uxth	r3, r3
 8011376:	029b      	lsls	r3, r3, #10
 8011378:	b29b      	uxth	r3, r3
 801137a:	4313      	orrs	r3, r2
 801137c:	b29a      	uxth	r2, r3
 801137e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011382:	801a      	strh	r2, [r3, #0]
 8011384:	e02c      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
 8011386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801138a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	785b      	ldrb	r3, [r3, #1]
 8011392:	2b01      	cmp	r3, #1
 8011394:	d124      	bne.n	80113e0 <USB_EPStartXfer+0x16e2>
 8011396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801139a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	461a      	mov	r2, r3
 80113a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80113ac:	4413      	add	r3, r2
 80113ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80113b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	00da      	lsls	r2, r3, #3
 80113c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80113c4:	4413      	add	r3, r2
 80113c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80113ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80113ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80113d8:	801a      	strh	r2, [r3, #0]
 80113da:	e001      	b.n	80113e0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80113dc:	2301      	movs	r3, #1
 80113de:	e03a      	b.n	8011456 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80113e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	4413      	add	r3, r2
 80113fa:	881b      	ldrh	r3, [r3, #0]
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011406:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801140a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801140e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011412:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011416:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801141a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801141e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	441a      	add	r2, r3
 801143c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011450:	b29b      	uxth	r3, r3
 8011452:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	785b      	ldrb	r3, [r3, #1]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d020      	beq.n	80114b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4413      	add	r3, r2
 801147c:	881b      	ldrh	r3, [r3, #0]
 801147e:	b29b      	uxth	r3, r3
 8011480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011488:	81bb      	strh	r3, [r7, #12]
 801148a:	89bb      	ldrh	r3, [r7, #12]
 801148c:	f083 0310 	eor.w	r3, r3, #16
 8011490:	81bb      	strh	r3, [r7, #12]
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	441a      	add	r2, r3
 801149c:	89bb      	ldrh	r3, [r7, #12]
 801149e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	8013      	strh	r3, [r2, #0]
 80114b2:	e01f      	b.n	80114f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4413      	add	r3, r2
 80114be:	881b      	ldrh	r3, [r3, #0]
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80114c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114ca:	81fb      	strh	r3, [r7, #14]
 80114cc:	89fb      	ldrh	r3, [r7, #14]
 80114ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80114d2:	81fb      	strh	r3, [r7, #14]
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	441a      	add	r2, r3
 80114de:	89fb      	ldrh	r3, [r7, #14]
 80114e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3714      	adds	r7, #20
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr

08011502 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011502:	b480      	push	{r7}
 8011504:	b087      	sub	sp, #28
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
 801150a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	7b1b      	ldrb	r3, [r3, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	f040 809d 	bne.w	8011650 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	785b      	ldrb	r3, [r3, #1]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d04c      	beq.n	80115b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	823b      	strh	r3, [r7, #16]
 801152c:	8a3b      	ldrh	r3, [r7, #16]
 801152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011532:	2b00      	cmp	r3, #0
 8011534:	d01b      	beq.n	801156e <USB_EPClearStall+0x6c>
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	881b      	ldrh	r3, [r3, #0]
 8011542:	b29b      	uxth	r3, r3
 8011544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801154c:	81fb      	strh	r3, [r7, #14]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	441a      	add	r2, r3
 8011558:	89fb      	ldrh	r3, [r7, #14]
 801155a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801155e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801156a:	b29b      	uxth	r3, r3
 801156c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	78db      	ldrb	r3, [r3, #3]
 8011572:	2b01      	cmp	r3, #1
 8011574:	d06c      	beq.n	8011650 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4413      	add	r3, r2
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	b29b      	uxth	r3, r3
 8011584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801158c:	81bb      	strh	r3, [r7, #12]
 801158e:	89bb      	ldrh	r3, [r7, #12]
 8011590:	f083 0320 	eor.w	r3, r3, #32
 8011594:	81bb      	strh	r3, [r7, #12]
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	441a      	add	r2, r3
 80115a0:	89bb      	ldrh	r3, [r7, #12]
 80115a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	8013      	strh	r3, [r2, #0]
 80115b6:	e04b      	b.n	8011650 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	4413      	add	r3, r2
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	82fb      	strh	r3, [r7, #22]
 80115c6:	8afb      	ldrh	r3, [r7, #22]
 80115c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d01b      	beq.n	8011608 <USB_EPClearStall+0x106>
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	4413      	add	r3, r2
 80115da:	881b      	ldrh	r3, [r3, #0]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115e6:	82bb      	strh	r3, [r7, #20]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	441a      	add	r2, r3
 80115f2:	8abb      	ldrh	r3, [r7, #20]
 80115f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011604:	b29b      	uxth	r3, r3
 8011606:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	4413      	add	r3, r2
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	b29b      	uxth	r3, r3
 8011616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801161a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801161e:	827b      	strh	r3, [r7, #18]
 8011620:	8a7b      	ldrh	r3, [r7, #18]
 8011622:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011626:	827b      	strh	r3, [r7, #18]
 8011628:	8a7b      	ldrh	r3, [r7, #18]
 801162a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801162e:	827b      	strh	r3, [r7, #18]
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	441a      	add	r2, r3
 801163a:	8a7b      	ldrh	r3, [r7, #18]
 801163c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801164c:	b29b      	uxth	r3, r3
 801164e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011650:	2300      	movs	r3, #0
}
 8011652:	4618      	mov	r0, r3
 8011654:	371c      	adds	r7, #28
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr

0801165e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801165e:	b480      	push	{r7}
 8011660:	b083      	sub	sp, #12
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
 8011666:	460b      	mov	r3, r1
 8011668:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801166a:	78fb      	ldrb	r3, [r7, #3]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d103      	bne.n	8011678 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2280      	movs	r2, #128	; 0x80
 8011674:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011678:	2300      	movs	r3, #0
}
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr

08011686 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011686:	b480      	push	{r7}
 8011688:	b083      	sub	sp, #12
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011694:	b29b      	uxth	r3, r3
 8011696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801169a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801169e:	b29a      	uxth	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80116a6:	2300      	movs	r3, #0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	370c      	adds	r7, #12
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b085      	sub	sp, #20
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80116c6:	68fb      	ldr	r3, [r7, #12]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3714      	adds	r7, #20
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b08b      	sub	sp, #44	; 0x2c
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	4611      	mov	r1, r2
 80116e0:	461a      	mov	r2, r3
 80116e2:	460b      	mov	r3, r1
 80116e4:	80fb      	strh	r3, [r7, #6]
 80116e6:	4613      	mov	r3, r2
 80116e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80116ea:	88bb      	ldrh	r3, [r7, #4]
 80116ec:	3301      	adds	r3, #1
 80116ee:	085b      	lsrs	r3, r3, #1
 80116f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80116fa:	88fa      	ldrh	r2, [r7, #6]
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	4413      	add	r3, r2
 8011700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011704:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	627b      	str	r3, [r7, #36]	; 0x24
 801170a:	e01b      	b.n	8011744 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	3301      	adds	r3, #1
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	021b      	lsls	r3, r3, #8
 801171a:	b21a      	sxth	r2, r3
 801171c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011720:	4313      	orrs	r3, r2
 8011722:	b21b      	sxth	r3, r3
 8011724:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011726:	6a3b      	ldr	r3, [r7, #32]
 8011728:	8a7a      	ldrh	r2, [r7, #18]
 801172a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	3302      	adds	r3, #2
 8011730:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011732:	69fb      	ldr	r3, [r7, #28]
 8011734:	3301      	adds	r3, #1
 8011736:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	3301      	adds	r3, #1
 801173c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011740:	3b01      	subs	r3, #1
 8011742:	627b      	str	r3, [r7, #36]	; 0x24
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	2b00      	cmp	r3, #0
 8011748:	d1e0      	bne.n	801170c <USB_WritePMA+0x38>
  }
}
 801174a:	bf00      	nop
 801174c:	bf00      	nop
 801174e:	372c      	adds	r7, #44	; 0x2c
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011758:	b480      	push	{r7}
 801175a:	b08b      	sub	sp, #44	; 0x2c
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	4611      	mov	r1, r2
 8011764:	461a      	mov	r2, r3
 8011766:	460b      	mov	r3, r1
 8011768:	80fb      	strh	r3, [r7, #6]
 801176a:	4613      	mov	r3, r2
 801176c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801176e:	88bb      	ldrh	r3, [r7, #4]
 8011770:	085b      	lsrs	r3, r3, #1
 8011772:	b29b      	uxth	r3, r3
 8011774:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801177e:	88fa      	ldrh	r2, [r7, #6]
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	4413      	add	r3, r2
 8011784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011788:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	627b      	str	r3, [r7, #36]	; 0x24
 801178e:	e018      	b.n	80117c2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	b29b      	uxth	r3, r3
 8011796:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	3302      	adds	r3, #2
 801179c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	3301      	adds	r3, #1
 80117aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	0a1b      	lsrs	r3, r3, #8
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	3301      	adds	r3, #1
 80117ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80117bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117be:	3b01      	subs	r3, #1
 80117c0:	627b      	str	r3, [r7, #36]	; 0x24
 80117c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1e3      	bne.n	8011790 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80117c8:	88bb      	ldrh	r3, [r7, #4]
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d007      	beq.n	80117e4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	b2da      	uxtb	r2, r3
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	701a      	strb	r2, [r3, #0]
  }
}
 80117e4:	bf00      	nop
 80117e6:	372c      	adds	r7, #44	; 0x2c
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	1c5a      	adds	r2, r3, #1
 80117fc:	607a      	str	r2, [r7, #4]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8011802:	89fb      	ldrh	r3, [r7, #14]
 8011804:	021b      	lsls	r3, r3, #8
 8011806:	b21a      	sxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	b21b      	sxth	r3, r3
 801180e:	4313      	orrs	r3, r2
 8011810:	b21b      	sxth	r3, r3
 8011812:	b29b      	uxth	r3, r3
}
 8011814:	4618      	mov	r0, r3
 8011816:	3714      	adds	r7, #20
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr

08011820 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	683a      	ldr	r2, [r7, #0]
 801182e:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2204      	movs	r2, #4
 8011834:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2204      	movs	r2, #4
 801183a:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011844:	b29a      	uxth	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801184c:	b29b      	uxth	r3, r3
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	b29b      	uxth	r3, r3
 8011852:	3b01      	subs	r3, #1
 8011854:	b29b      	uxth	r3, r3
 8011856:	b21a      	sxth	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011864:	b29a      	uxth	r2, r3
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801186c:	b29b      	uxth	r3, r3
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	b29b      	uxth	r3, r3
 8011872:	3b01      	subs	r3, #1
 8011874:	b29b      	uxth	r3, r3
 8011876:	b21a      	sxth	r2, r3
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2201      	movs	r2, #1
 8011894:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2201      	movs	r2, #1
 801189c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2200      	movs	r2, #0
 80118de:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80118e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2200      	movs	r2, #0
 80118f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 801190e:	2300      	movs	r3, #0
 8011910:	73fb      	strb	r3, [r7, #15]
 8011912:	e010      	b.n	8011936 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8011914:	7bfb      	ldrb	r3, [r7, #15]
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	330a      	adds	r3, #10
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	4413      	add	r3, r2
 801191e:	2200      	movs	r2, #0
 8011920:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8011922:	7bfb      	ldrb	r3, [r7, #15]
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	330a      	adds	r3, #10
 8011928:	00db      	lsls	r3, r3, #3
 801192a:	4413      	add	r3, r2
 801192c:	2200      	movs	r2, #0
 801192e:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8011930:	7bfb      	ldrb	r3, [r7, #15]
 8011932:	3301      	adds	r3, #1
 8011934:	73fb      	strb	r3, [r7, #15]
 8011936:	7bfb      	ldrb	r3, [r7, #15]
 8011938:	2b03      	cmp	r3, #3
 801193a:	d9eb      	bls.n	8011914 <UG_Init+0xf4>
   }

   gui = g;
 801193c:	4a04      	ldr	r2, [pc, #16]	; (8011950 <UG_Init+0x130>)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6013      	str	r3, [r2, #0]
   return 1;
 8011942:	2301      	movs	r3, #1
}
 8011944:	4618      	mov	r0, r3
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	20002090 	.word	0x20002090

08011954 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  gui->font = font;
 801195c:	4b04      	ldr	r3, [pc, #16]	; (8011970 <UG_FontSelect+0x1c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011964:	bf00      	nop
 8011966:	370c      	adds	r7, #12
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	20002090 	.word	0x20002090

08011974 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af02      	add	r7, sp, #8
 801197a:	4603      	mov	r3, r0
 801197c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 801197e:	4b0e      	ldr	r3, [pc, #56]	; (80119b8 <UG_FillScreen+0x44>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011988:	b29b      	uxth	r3, r3
 801198a:	3b01      	subs	r3, #1
 801198c:	b29b      	uxth	r3, r3
 801198e:	b21a      	sxth	r2, r3
 8011990:	4b09      	ldr	r3, [pc, #36]	; (80119b8 <UG_FillScreen+0x44>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801199a:	b29b      	uxth	r3, r3
 801199c:	3b01      	subs	r3, #1
 801199e:	b29b      	uxth	r3, r3
 80119a0:	b219      	sxth	r1, r3
 80119a2:	88fb      	ldrh	r3, [r7, #6]
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	460b      	mov	r3, r1
 80119a8:	2100      	movs	r1, #0
 80119aa:	2000      	movs	r0, #0
 80119ac:	f000 f806 	bl	80119bc <UG_FillFrame>
}
 80119b0:	bf00      	nop
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	20002090 	.word	0x20002090

080119bc <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80119bc:	b5b0      	push	{r4, r5, r7, lr}
 80119be:	b086      	sub	sp, #24
 80119c0:	af02      	add	r7, sp, #8
 80119c2:	4604      	mov	r4, r0
 80119c4:	4608      	mov	r0, r1
 80119c6:	4611      	mov	r1, r2
 80119c8:	461a      	mov	r2, r3
 80119ca:	4623      	mov	r3, r4
 80119cc:	80fb      	strh	r3, [r7, #6]
 80119ce:	4603      	mov	r3, r0
 80119d0:	80bb      	strh	r3, [r7, #4]
 80119d2:	460b      	mov	r3, r1
 80119d4:	807b      	strh	r3, [r7, #2]
 80119d6:	4613      	mov	r3, r2
 80119d8:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80119da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80119de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	da05      	bge.n	80119f2 <UG_FillFrame+0x36>
     swap(x1,x2);
 80119e6:	88fb      	ldrh	r3, [r7, #6]
 80119e8:	817b      	strh	r3, [r7, #10]
 80119ea:	887b      	ldrh	r3, [r7, #2]
 80119ec:	80fb      	strh	r3, [r7, #6]
 80119ee:	897b      	ldrh	r3, [r7, #10]
 80119f0:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80119f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80119f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	da05      	bge.n	8011a0a <UG_FillFrame+0x4e>
     swap(y1,y2);
 80119fe:	88bb      	ldrh	r3, [r7, #4]
 8011a00:	813b      	strh	r3, [r7, #8]
 8011a02:	883b      	ldrh	r3, [r7, #0]
 8011a04:	80bb      	strh	r3, [r7, #4]
 8011a06:	893b      	ldrh	r3, [r7, #8]
 8011a08:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8011a0a:	4b24      	ldr	r3, [pc, #144]	; (8011a9c <UG_FillFrame+0xe0>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011a12:	f003 0302 	and.w	r3, r3, #2
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d012      	beq.n	8011a40 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011a1a:	4b20      	ldr	r3, [pc, #128]	; (8011a9c <UG_FillFrame+0xe0>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a20:	461d      	mov	r5, r3
 8011a22:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011a26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011a2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011a2e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011a32:	8c3b      	ldrh	r3, [r7, #32]
 8011a34:	9300      	str	r3, [sp, #0]
 8011a36:	4623      	mov	r3, r4
 8011a38:	47a8      	blx	r5
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d028      	beq.n	8011a92 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8011a40:	88bb      	ldrh	r3, [r7, #4]
 8011a42:	81bb      	strh	r3, [r7, #12]
 8011a44:	e01e      	b.n	8011a84 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8011a46:	88fb      	ldrh	r3, [r7, #6]
 8011a48:	81fb      	strh	r3, [r7, #14]
 8011a4a:	e00f      	b.n	8011a6c <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8011a4c:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <UG_FillFrame+0xe0>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	8c3a      	ldrh	r2, [r7, #32]
 8011a56:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8011a5a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8011a5e:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8011a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	3301      	adds	r3, #1
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	81fb      	strh	r3, [r7, #14]
 8011a6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011a70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	dde9      	ble.n	8011a4c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8011a78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	3301      	adds	r3, #1
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	81bb      	strh	r3, [r7, #12]
 8011a84:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011a88:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	ddda      	ble.n	8011a46 <UG_FillFrame+0x8a>
 8011a90:	e000      	b.n	8011a94 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011a92:	bf00      	nop
      }
   }
}
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bdb0      	pop	{r4, r5, r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20002090 	.word	0x20002090

08011aa0 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af02      	add	r7, sp, #8
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	4608      	mov	r0, r1
 8011aaa:	4611      	mov	r1, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	4623      	mov	r3, r4
 8011ab0:	80fb      	strh	r3, [r7, #6]
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	80bb      	strh	r3, [r7, #4]
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	807b      	strh	r3, [r7, #2]
 8011aba:	4613      	mov	r3, r2
 8011abc:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8011abe:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8011ac2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011ac6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011aca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011ace:	8b3b      	ldrh	r3, [r7, #24]
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	4623      	mov	r3, r4
 8011ad4:	f000 f912 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8011ad8:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011adc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011ae0:	f9b7 1000 	ldrsh.w	r1, [r7]
 8011ae4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011ae8:	8b3b      	ldrh	r3, [r7, #24]
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	4623      	mov	r3, r4
 8011aee:	f000 f905 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8011af2:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011afa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011afe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011b02:	8b3b      	ldrh	r3, [r7, #24]
 8011b04:	9300      	str	r3, [sp, #0]
 8011b06:	4623      	mov	r3, r4
 8011b08:	f000 f8f8 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8011b0c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011b10:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011b14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011b18:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8011b1c:	8b3b      	ldrh	r3, [r7, #24]
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	4623      	mov	r3, r4
 8011b22:	f000 f8eb 	bl	8011cfc <UG_DrawLine>
}
 8011b26:	bf00      	nop
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd90      	pop	{r4, r7, pc}
	...

08011b30 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8011b30:	b590      	push	{r4, r7, lr}
 8011b32:	b087      	sub	sp, #28
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	4604      	mov	r4, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	4611      	mov	r1, r2
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	4623      	mov	r3, r4
 8011b40:	80fb      	strh	r3, [r7, #6]
 8011b42:	4603      	mov	r3, r0
 8011b44:	80bb      	strh	r3, [r7, #4]
 8011b46:	460b      	mov	r3, r1
 8011b48:	807b      	strh	r3, [r7, #2]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8011b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f2c0 80c8 	blt.w	8011ce8 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8011b58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f2c0 80c5 	blt.w	8011cec <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8011b62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	f340 80c2 	ble.w	8011cf0 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8011b6c:	887b      	ldrh	r3, [r7, #2]
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	f1c3 0301 	rsb	r3, r3, #1
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	823b      	strh	r3, [r7, #16]
   e = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	81fb      	strh	r3, [r7, #14]
   x = r;
 8011b82:	887b      	ldrh	r3, [r7, #2]
 8011b84:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8011b8a:	e0a5      	b.n	8011cd8 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8011b8c:	4b5a      	ldr	r3, [pc, #360]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	88f9      	ldrh	r1, [r7, #6]
 8011b96:	8afa      	ldrh	r2, [r7, #22]
 8011b98:	1a8a      	subs	r2, r1, r2
 8011b9a:	b292      	uxth	r2, r2
 8011b9c:	b210      	sxth	r0, r2
 8011b9e:	88b9      	ldrh	r1, [r7, #4]
 8011ba0:	8aba      	ldrh	r2, [r7, #20]
 8011ba2:	440a      	add	r2, r1
 8011ba4:	b292      	uxth	r2, r2
 8011ba6:	b211      	sxth	r1, r2
 8011ba8:	883a      	ldrh	r2, [r7, #0]
 8011baa:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8011bac:	4b52      	ldr	r3, [pc, #328]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	88f9      	ldrh	r1, [r7, #6]
 8011bb6:	8afa      	ldrh	r2, [r7, #22]
 8011bb8:	1a8a      	subs	r2, r1, r2
 8011bba:	b292      	uxth	r2, r2
 8011bbc:	b210      	sxth	r0, r2
 8011bbe:	88b9      	ldrh	r1, [r7, #4]
 8011bc0:	8aba      	ldrh	r2, [r7, #20]
 8011bc2:	1a8a      	subs	r2, r1, r2
 8011bc4:	b292      	uxth	r2, r2
 8011bc6:	b211      	sxth	r1, r2
 8011bc8:	883a      	ldrh	r2, [r7, #0]
 8011bca:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8011bcc:	4b4a      	ldr	r3, [pc, #296]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	88f9      	ldrh	r1, [r7, #6]
 8011bd6:	8afa      	ldrh	r2, [r7, #22]
 8011bd8:	440a      	add	r2, r1
 8011bda:	b292      	uxth	r2, r2
 8011bdc:	b210      	sxth	r0, r2
 8011bde:	88b9      	ldrh	r1, [r7, #4]
 8011be0:	8aba      	ldrh	r2, [r7, #20]
 8011be2:	440a      	add	r2, r1
 8011be4:	b292      	uxth	r2, r2
 8011be6:	b211      	sxth	r1, r2
 8011be8:	883a      	ldrh	r2, [r7, #0]
 8011bea:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8011bec:	4b42      	ldr	r3, [pc, #264]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	88f9      	ldrh	r1, [r7, #6]
 8011bf6:	8afa      	ldrh	r2, [r7, #22]
 8011bf8:	440a      	add	r2, r1
 8011bfa:	b292      	uxth	r2, r2
 8011bfc:	b210      	sxth	r0, r2
 8011bfe:	88b9      	ldrh	r1, [r7, #4]
 8011c00:	8aba      	ldrh	r2, [r7, #20]
 8011c02:	1a8a      	subs	r2, r1, r2
 8011c04:	b292      	uxth	r2, r2
 8011c06:	b211      	sxth	r1, r2
 8011c08:	883a      	ldrh	r2, [r7, #0]
 8011c0a:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8011c0c:	4b3a      	ldr	r3, [pc, #232]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	88f9      	ldrh	r1, [r7, #6]
 8011c16:	8aba      	ldrh	r2, [r7, #20]
 8011c18:	1a8a      	subs	r2, r1, r2
 8011c1a:	b292      	uxth	r2, r2
 8011c1c:	b210      	sxth	r0, r2
 8011c1e:	88b9      	ldrh	r1, [r7, #4]
 8011c20:	8afa      	ldrh	r2, [r7, #22]
 8011c22:	440a      	add	r2, r1
 8011c24:	b292      	uxth	r2, r2
 8011c26:	b211      	sxth	r1, r2
 8011c28:	883a      	ldrh	r2, [r7, #0]
 8011c2a:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8011c2c:	4b32      	ldr	r3, [pc, #200]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	88f9      	ldrh	r1, [r7, #6]
 8011c36:	8aba      	ldrh	r2, [r7, #20]
 8011c38:	1a8a      	subs	r2, r1, r2
 8011c3a:	b292      	uxth	r2, r2
 8011c3c:	b210      	sxth	r0, r2
 8011c3e:	88b9      	ldrh	r1, [r7, #4]
 8011c40:	8afa      	ldrh	r2, [r7, #22]
 8011c42:	1a8a      	subs	r2, r1, r2
 8011c44:	b292      	uxth	r2, r2
 8011c46:	b211      	sxth	r1, r2
 8011c48:	883a      	ldrh	r2, [r7, #0]
 8011c4a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8011c4c:	4b2a      	ldr	r3, [pc, #168]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	88f9      	ldrh	r1, [r7, #6]
 8011c56:	8aba      	ldrh	r2, [r7, #20]
 8011c58:	440a      	add	r2, r1
 8011c5a:	b292      	uxth	r2, r2
 8011c5c:	b210      	sxth	r0, r2
 8011c5e:	88b9      	ldrh	r1, [r7, #4]
 8011c60:	8afa      	ldrh	r2, [r7, #22]
 8011c62:	440a      	add	r2, r1
 8011c64:	b292      	uxth	r2, r2
 8011c66:	b211      	sxth	r1, r2
 8011c68:	883a      	ldrh	r2, [r7, #0]
 8011c6a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8011c6c:	4b22      	ldr	r3, [pc, #136]	; (8011cf8 <UG_DrawCircle+0x1c8>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	88f9      	ldrh	r1, [r7, #6]
 8011c76:	8aba      	ldrh	r2, [r7, #20]
 8011c78:	440a      	add	r2, r1
 8011c7a:	b292      	uxth	r2, r2
 8011c7c:	b210      	sxth	r0, r2
 8011c7e:	88b9      	ldrh	r1, [r7, #4]
 8011c80:	8afa      	ldrh	r2, [r7, #22]
 8011c82:	1a8a      	subs	r2, r1, r2
 8011c84:	b292      	uxth	r2, r2
 8011c86:	b211      	sxth	r1, r2
 8011c88:	883a      	ldrh	r2, [r7, #0]
 8011c8a:	4798      	blx	r3

      y++;
 8011c8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	3301      	adds	r3, #1
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8011c98:	89fa      	ldrh	r2, [r7, #14]
 8011c9a:	8a3b      	ldrh	r3, [r7, #16]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8011ca2:	8a3b      	ldrh	r3, [r7, #16]
 8011ca4:	3302      	adds	r3, #2
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8011caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cae:	005a      	lsls	r2, r3, #1
 8011cb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	dd0e      	ble.n	8011cd8 <UG_DrawCircle+0x1a8>
      {
         x--;
 8011cba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8011cc6:	89fa      	ldrh	r2, [r7, #14]
 8011cc8:	8a7b      	ldrh	r3, [r7, #18]
 8011cca:	4413      	add	r3, r2
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8011cd0:	8a7b      	ldrh	r3, [r7, #18]
 8011cd2:	3302      	adds	r3, #2
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8011cd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	f6bf af53 	bge.w	8011b8c <UG_DrawCircle+0x5c>
 8011ce6:	e004      	b.n	8011cf2 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8011ce8:	bf00      	nop
 8011cea:	e002      	b.n	8011cf2 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8011cec:	bf00      	nop
 8011cee:	e000      	b.n	8011cf2 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8011cf0:	bf00      	nop
      }
   }
}
 8011cf2:	371c      	adds	r7, #28
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd90      	pop	{r4, r7, pc}
 8011cf8:	20002090 	.word	0x20002090

08011cfc <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8011cfc:	b5b0      	push	{r4, r5, r7, lr}
 8011cfe:	b08a      	sub	sp, #40	; 0x28
 8011d00:	af02      	add	r7, sp, #8
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	4611      	mov	r1, r2
 8011d08:	461a      	mov	r2, r3
 8011d0a:	4623      	mov	r3, r4
 8011d0c:	80fb      	strh	r3, [r7, #6]
 8011d0e:	4603      	mov	r3, r0
 8011d10:	80bb      	strh	r3, [r7, #4]
 8011d12:	460b      	mov	r3, r1
 8011d14:	807b      	strh	r3, [r7, #2]
 8011d16:	4613      	mov	r3, r2
 8011d18:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8011d1a:	4b67      	ldr	r3, [pc, #412]	; (8011eb8 <UG_DrawLine+0x1bc>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011d22:	f003 0302 	and.w	r3, r3, #2
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d013      	beq.n	8011d52 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011d2a:	4b63      	ldr	r3, [pc, #396]	; (8011eb8 <UG_DrawLine+0x1bc>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d30:	461d      	mov	r5, r3
 8011d32:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011d36:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011d3a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011d3e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011d42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	4623      	mov	r3, r4
 8011d48:	47a8      	blx	r5
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	f000 80ae 	beq.w	8011eae <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8011d52:	887a      	ldrh	r2, [r7, #2]
 8011d54:	88fb      	ldrh	r3, [r7, #6]
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8011d5c:	883a      	ldrh	r2, [r7, #0]
 8011d5e:	88bb      	ldrh	r3, [r7, #4]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8011d66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	bfb8      	it	lt
 8011d6e:	425b      	neglt	r3, r3
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8011d74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	bfb8      	it	lt
 8011d7c:	425b      	neglt	r3, r3
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8011d82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	dd01      	ble.n	8011d8e <UG_DrawLine+0x92>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e001      	b.n	8011d92 <UG_DrawLine+0x96>
 8011d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d92:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8011d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	dd01      	ble.n	8011da0 <UG_DrawLine+0xa4>
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	e001      	b.n	8011da4 <UG_DrawLine+0xa8>
 8011da0:	f04f 33ff 	mov.w	r3, #4294967295
 8011da4:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8011da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011daa:	105b      	asrs	r3, r3, #1
 8011dac:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8011dae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011db2:	105b      	asrs	r3, r3, #1
 8011db4:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8011db6:	88fb      	ldrh	r3, [r7, #6]
 8011db8:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8011dba:	88bb      	ldrh	r3, [r7, #4]
 8011dbc:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8011dbe:	4b3e      	ldr	r3, [pc, #248]	; (8011eb8 <UG_DrawLine+0x1bc>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011dc8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011dcc:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011dd0:	4798      	blx	r3

   if( dxabs >= dyabs )
 8011dd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	db33      	blt.n	8011e46 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8011dde:	2300      	movs	r3, #0
 8011de0:	83fb      	strh	r3, [r7, #30]
 8011de2:	e029      	b.n	8011e38 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8011de4:	8b7a      	ldrh	r2, [r7, #26]
 8011de6:	89fb      	ldrh	r3, [r7, #14]
 8011de8:	4413      	add	r3, r2
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8011dee:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8011df2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	db09      	blt.n	8011e0e <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8011dfa:	8b7a      	ldrh	r2, [r7, #26]
 8011dfc:	8a3b      	ldrh	r3, [r7, #16]
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8011e04:	8afa      	ldrh	r2, [r7, #22]
 8011e06:	897b      	ldrh	r3, [r7, #10]
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8011e0e:	8b3a      	ldrh	r2, [r7, #24]
 8011e10:	89bb      	ldrh	r3, [r7, #12]
 8011e12:	4413      	add	r3, r2
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8011e18:	4b27      	ldr	r3, [pc, #156]	; (8011eb8 <UG_DrawLine+0x1bc>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011e22:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011e26:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011e2a:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8011e2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	3301      	adds	r3, #1
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	83fb      	strh	r3, [r7, #30]
 8011e38:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	dbcf      	blt.n	8011de4 <UG_DrawLine+0xe8>
 8011e44:	e034      	b.n	8011eb0 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8011e46:	2300      	movs	r3, #0
 8011e48:	83fb      	strh	r3, [r7, #30]
 8011e4a:	e029      	b.n	8011ea0 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8011e4c:	8bba      	ldrh	r2, [r7, #28]
 8011e4e:	8a3b      	ldrh	r3, [r7, #16]
 8011e50:	4413      	add	r3, r2
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8011e56:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8011e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	db09      	blt.n	8011e76 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8011e62:	8bba      	ldrh	r2, [r7, #28]
 8011e64:	89fb      	ldrh	r3, [r7, #14]
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8011e6c:	8b3a      	ldrh	r2, [r7, #24]
 8011e6e:	89bb      	ldrh	r3, [r7, #12]
 8011e70:	4413      	add	r3, r2
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8011e76:	8afa      	ldrh	r2, [r7, #22]
 8011e78:	897b      	ldrh	r3, [r7, #10]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8011e80:	4b0d      	ldr	r3, [pc, #52]	; (8011eb8 <UG_DrawLine+0x1bc>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011e8a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011e8e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011e92:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8011e94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	83fb      	strh	r3, [r7, #30]
 8011ea0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	dbcf      	blt.n	8011e4c <UG_DrawLine+0x150>
 8011eac:	e000      	b.n	8011eb0 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011eae:	bf00      	nop
      }
   }  
}
 8011eb0:	3720      	adds	r7, #32
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20002090 	.word	0x20002090

08011ebc <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8011ebc:	b590      	push	{r4, r7, lr}
 8011ebe:	b087      	sub	sp, #28
 8011ec0:	af02      	add	r7, sp, #8
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	603a      	str	r2, [r7, #0]
 8011ec6:	80fb      	strh	r3, [r7, #6]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8011ecc:	88fb      	ldrh	r3, [r7, #6]
 8011ece:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8011ed0:	88bb      	ldrh	r3, [r7, #4]
 8011ed2:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8011ed4:	4b44      	ldr	r3, [pc, #272]	; (8011fe8 <UG_PutString+0x12c>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 fa96 	bl	801240c <_UG_FontSelect>
   while ( *str != 0 )
 8011ee0:	e064      	b.n	8011fac <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8011ee2:	4b41      	ldr	r3, [pc, #260]	; (8011fe8 <UG_PutString+0x12c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8011eee:	463b      	mov	r3, r7
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f000 f8c7 	bl	8012084 <_UG_DecodeUTF8>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	817b      	strh	r3, [r7, #10]
 8011efa:	e004      	b.n	8011f06 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	1c5a      	adds	r2, r3, #1
 8011f00:	603a      	str	r2, [r7, #0]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8011f06:	897b      	ldrh	r3, [r7, #10]
 8011f08:	2b0a      	cmp	r3, #10
 8011f0a:	d105      	bne.n	8011f18 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8011f0c:	4b36      	ldr	r3, [pc, #216]	; (8011fe8 <UG_PutString+0x12c>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	81fb      	strh	r3, [r7, #14]
         continue;
 8011f16:	e049      	b.n	8011fac <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8011f18:	897b      	ldrh	r3, [r7, #10]
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f000 f929 	bl	8012174 <_UG_GetCharData>
 8011f22:	4603      	mov	r3, r0
 8011f24:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8011f26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f2e:	d100      	bne.n	8011f32 <UG_PutString+0x76>
 8011f30:	e03c      	b.n	8011fac <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8011f32:	4b2d      	ldr	r3, [pc, #180]	; (8011fe8 <UG_PutString+0x12c>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011f42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f46:	4413      	add	r3, r2
 8011f48:	4299      	cmp	r1, r3
 8011f4a:	dc12      	bgt.n	8011f72 <UG_PutString+0xb6>
      {
         xp = x;
 8011f4c:	88fb      	ldrh	r3, [r7, #6]
 8011f4e:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8011f50:	4b25      	ldr	r3, [pc, #148]	; (8011fe8 <UG_PutString+0x12c>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f58:	b21a      	sxth	r2, r3
 8011f5a:	4b23      	ldr	r3, [pc, #140]	; (8011fe8 <UG_PutString+0x12c>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8011f62:	b21b      	sxth	r3, r3
 8011f64:	4413      	add	r3, r2
 8011f66:	b21b      	sxth	r3, r3
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	89bb      	ldrh	r3, [r7, #12]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8011f72:	4b1d      	ldr	r3, [pc, #116]	; (8011fe8 <UG_PutString+0x12c>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8011f7a:	4b1b      	ldr	r3, [pc, #108]	; (8011fe8 <UG_PutString+0x12c>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011f86:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8011f8a:	8978      	ldrh	r0, [r7, #10]
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	4623      	mov	r3, r4
 8011f90:	f000 fabe 	bl	8012510 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8011f94:	4b14      	ldr	r3, [pc, #80]	; (8011fe8 <UG_PutString+0x12c>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	893b      	ldrh	r3, [r7, #8]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	89fb      	ldrh	r3, [r7, #14]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d196      	bne.n	8011ee2 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8011fb4:	4b0c      	ldr	r3, [pc, #48]	; (8011fe8 <UG_PutString+0x12c>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011fbc:	f003 0302 	and.w	r3, r3, #2
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d00c      	beq.n	8011fde <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8011fc4:	4b08      	ldr	r3, [pc, #32]	; (8011fe8 <UG_PutString+0x12c>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fca:	461c      	mov	r4, r3
 8011fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8011fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fdc:	47a0      	blx	r4
}
 8011fde:	bf00      	nop
 8011fe0:	3714      	adds	r7, #20
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd90      	pop	{r4, r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	20002090 	.word	0x20002090

08011fec <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8011ff6:	4b05      	ldr	r3, [pc, #20]	; (801200c <UG_SetForecolor+0x20>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	88fa      	ldrh	r2, [r7, #6]
 8011ffc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8012000:	bf00      	nop
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	20002090 	.word	0x20002090

08012010 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	4603      	mov	r3, r0
 8012018:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 801201a:	4b05      	ldr	r3, [pc, #20]	; (8012030 <UG_SetBackcolor+0x20>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	88fa      	ldrh	r2, [r7, #6]
 8012020:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	20002090 	.word	0x20002090

08012034 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	4603      	mov	r3, r0
 801203c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 801203e:	4b06      	ldr	r3, [pc, #24]	; (8012058 <UG_FontSetHSpace+0x24>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	88fa      	ldrh	r2, [r7, #6]
 8012044:	b252      	sxtb	r2, r2
 8012046:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 801204a:	bf00      	nop
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	20002090 	.word	0x20002090

0801205c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
 8012062:	4603      	mov	r3, r0
 8012064:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8012066:	4b06      	ldr	r3, [pc, #24]	; (8012080 <UG_FontSetVSpace+0x24>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	88fa      	ldrh	r2, [r7, #6]
 801206c:	b252      	sxtb	r2, r2
 801206e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8012072:	bf00      	nop
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop
 8012080:	20002090 	.word	0x20002090

08012084 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8012084:	b480      	push	{r7}
 8012086:	b085      	sub	sp, #20
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]

  char c=**str;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8012094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012098:	2b00      	cmp	r3, #0
 801209a:	db07      	blt.n	80120ac <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	1c5a      	adds	r2, r3, #1
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	601a      	str	r2, [r3, #0]
    return c;
 80120a6:	7bfb      	ldrb	r3, [r7, #15]
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	e05c      	b.n	8012166 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	81bb      	strh	r3, [r7, #12]

  while(**str)
 80120b4:	e04f      	b.n	8012156 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	1c5a      	adds	r2, r3, #1
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 80120c8:	7bbb      	ldrb	r3, [r7, #14]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d130      	bne.n	8012130 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 80120ce:	7bfb      	ldrb	r3, [r7, #15]
 80120d0:	2bdf      	cmp	r3, #223	; 0xdf
 80120d2:	d806      	bhi.n	80120e2 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 80120d4:	2301      	movs	r3, #1
 80120d6:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 80120d8:	7bfb      	ldrb	r3, [r7, #15]
 80120da:	f003 031f 	and.w	r3, r3, #31
 80120de:	73fb      	strb	r3, [r7, #15]
 80120e0:	e023      	b.n	801212a <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80120e2:	7bfb      	ldrb	r3, [r7, #15]
 80120e4:	2bef      	cmp	r3, #239	; 0xef
 80120e6:	d806      	bhi.n	80120f6 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80120e8:	2302      	movs	r3, #2
 80120ea:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80120ec:	7bfb      	ldrb	r3, [r7, #15]
 80120ee:	f003 030f 	and.w	r3, r3, #15
 80120f2:	73fb      	strb	r3, [r7, #15]
 80120f4:	e019      	b.n	801212a <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80120f6:	7bfb      	ldrb	r3, [r7, #15]
 80120f8:	2bf7      	cmp	r3, #247	; 0xf7
 80120fa:	d806      	bhi.n	801210a <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80120fc:	2303      	movs	r3, #3
 80120fe:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8012100:	7bfb      	ldrb	r3, [r7, #15]
 8012102:	f003 0307 	and.w	r3, r3, #7
 8012106:	73fb      	strb	r3, [r7, #15]
 8012108:	e00f      	b.n	801212a <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 801210a:	7bfb      	ldrb	r3, [r7, #15]
 801210c:	2bfb      	cmp	r3, #251	; 0xfb
 801210e:	d806      	bhi.n	801211e <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8012110:	2304      	movs	r3, #4
 8012112:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8012114:	7bfb      	ldrb	r3, [r7, #15]
 8012116:	f003 0303 	and.w	r3, r3, #3
 801211a:	73fb      	strb	r3, [r7, #15]
 801211c:	e005      	b.n	801212a <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 801211e:	2305      	movs	r3, #5
 8012120:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8012122:	7bfb      	ldrb	r3, [r7, #15]
 8012124:	f003 0301 	and.w	r3, r3, #1
 8012128:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 801212a:	7bfb      	ldrb	r3, [r7, #15]
 801212c:	81bb      	strh	r3, [r7, #12]
 801212e:	e012      	b.n	8012156 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8012130:	89bb      	ldrh	r3, [r7, #12]
 8012132:	019b      	lsls	r3, r3, #6
 8012134:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8012136:	7bfb      	ldrb	r3, [r7, #15]
 8012138:	b21b      	sxth	r3, r3
 801213a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801213e:	b21a      	sxth	r2, r3
 8012140:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012144:	4313      	orrs	r3, r2
 8012146:	b21b      	sxth	r3, r3
 8012148:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 801214a:	7bbb      	ldrb	r3, [r7, #14]
 801214c:	3b01      	subs	r3, #1
 801214e:	73bb      	strb	r3, [r7, #14]
 8012150:	7bbb      	ldrb	r3, [r7, #14]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d005      	beq.n	8012162 <_UG_DecodeUTF8+0xde>
  while(**str)
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1aa      	bne.n	80120b6 <_UG_DecodeUTF8+0x32>
 8012160:	e000      	b.n	8012164 <_UG_DecodeUTF8+0xe0>
        break;
 8012162:	bf00      	nop
    }
  }
  return encoding;
 8012164:	89bb      	ldrh	r3, [r7, #12]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3714      	adds	r7, #20
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
	...

08012174 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	4603      	mov	r3, r0
 801217c:	6039      	str	r1, [r7, #0]
 801217e:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8012180:	2300      	movs	r3, #0
 8012182:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8012184:	2300      	movs	r3, #0
 8012186:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8012188:	2300      	movs	r3, #0
 801218a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 801218c:	2300      	movs	r3, #0
 801218e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8012190:	2300      	movs	r3, #0
 8012192:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8012194:	4b98      	ldr	r3, [pc, #608]	; (80123f8 <_UG_GetCharData+0x284>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801219a:	4b98      	ldr	r3, [pc, #608]	; (80123fc <_UG_GetCharData+0x288>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d10f      	bne.n	80121c2 <_UG_GetCharData+0x4e>
 80121a2:	4b97      	ldr	r3, [pc, #604]	; (8012400 <_UG_GetCharData+0x28c>)
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	88fa      	ldrh	r2, [r7, #6]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d10a      	bne.n	80121c2 <_UG_GetCharData+0x4e>
    if(p){
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d003      	beq.n	80121ba <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80121b2:	4b94      	ldr	r3, [pc, #592]	; (8012404 <_UG_GetCharData+0x290>)
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80121ba:	4b93      	ldr	r3, [pc, #588]	; (8012408 <_UG_GetCharData+0x294>)
 80121bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121c0:	e116      	b.n	80123f0 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80121c2:	4b8d      	ldr	r3, [pc, #564]	; (80123f8 <_UG_GetCharData+0x284>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f000 80cc 	beq.w	8012368 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 80121d0:	88fb      	ldrh	r3, [r7, #6]
 80121d2:	2bfc      	cmp	r3, #252	; 0xfc
 80121d4:	f300 80c8 	bgt.w	8012368 <_UG_GetCharData+0x1f4>
 80121d8:	2bd6      	cmp	r3, #214	; 0xd6
 80121da:	da09      	bge.n	80121f0 <_UG_GetCharData+0x7c>
 80121dc:	2bc4      	cmp	r3, #196	; 0xc4
 80121de:	d06c      	beq.n	80122ba <_UG_GetCharData+0x146>
 80121e0:	2bc4      	cmp	r3, #196	; 0xc4
 80121e2:	f300 80c1 	bgt.w	8012368 <_UG_GetCharData+0x1f4>
 80121e6:	2bb0      	cmp	r3, #176	; 0xb0
 80121e8:	d06d      	beq.n	80122c6 <_UG_GetCharData+0x152>
 80121ea:	2bb5      	cmp	r3, #181	; 0xb5
 80121ec:	d068      	beq.n	80122c0 <_UG_GetCharData+0x14c>
 80121ee:	e06e      	b.n	80122ce <_UG_GetCharData+0x15a>
 80121f0:	3bd6      	subs	r3, #214	; 0xd6
 80121f2:	2b26      	cmp	r3, #38	; 0x26
 80121f4:	f200 80b8 	bhi.w	8012368 <_UG_GetCharData+0x1f4>
 80121f8:	a201      	add	r2, pc, #4	; (adr r2, 8012200 <_UG_GetCharData+0x8c>)
 80121fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fe:	bf00      	nop
 8012200:	080122a3 	.word	0x080122a3
 8012204:	08012369 	.word	0x08012369
 8012208:	08012369 	.word	0x08012369
 801220c:	08012369 	.word	0x08012369
 8012210:	08012369 	.word	0x08012369
 8012214:	08012369 	.word	0x08012369
 8012218:	080122af 	.word	0x080122af
 801221c:	08012369 	.word	0x08012369
 8012220:	08012369 	.word	0x08012369
 8012224:	08012369 	.word	0x08012369
 8012228:	08012369 	.word	0x08012369
 801222c:	08012369 	.word	0x08012369
 8012230:	08012369 	.word	0x08012369
 8012234:	08012369 	.word	0x08012369
 8012238:	080122b5 	.word	0x080122b5
 801223c:	08012369 	.word	0x08012369
 8012240:	08012369 	.word	0x08012369
 8012244:	08012369 	.word	0x08012369
 8012248:	08012369 	.word	0x08012369
 801224c:	08012369 	.word	0x08012369
 8012250:	08012369 	.word	0x08012369
 8012254:	08012369 	.word	0x08012369
 8012258:	08012369 	.word	0x08012369
 801225c:	08012369 	.word	0x08012369
 8012260:	08012369 	.word	0x08012369
 8012264:	08012369 	.word	0x08012369
 8012268:	08012369 	.word	0x08012369
 801226c:	08012369 	.word	0x08012369
 8012270:	08012369 	.word	0x08012369
 8012274:	08012369 	.word	0x08012369
 8012278:	08012369 	.word	0x08012369
 801227c:	08012369 	.word	0x08012369
 8012280:	0801229d 	.word	0x0801229d
 8012284:	08012369 	.word	0x08012369
 8012288:	08012369 	.word	0x08012369
 801228c:	08012369 	.word	0x08012369
 8012290:	08012369 	.word	0x08012369
 8012294:	08012369 	.word	0x08012369
 8012298:	080122a9 	.word	0x080122a9
    {
       case 0xF6: encoding = 0x94; break; // ö
 801229c:	2394      	movs	r3, #148	; 0x94
 801229e:	80fb      	strh	r3, [r7, #6]
 80122a0:	e015      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80122a2:	2399      	movs	r3, #153	; 0x99
 80122a4:	80fb      	strh	r3, [r7, #6]
 80122a6:	e012      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80122a8:	2381      	movs	r3, #129	; 0x81
 80122aa:	80fb      	strh	r3, [r7, #6]
 80122ac:	e00f      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80122ae:	239a      	movs	r3, #154	; 0x9a
 80122b0:	80fb      	strh	r3, [r7, #6]
 80122b2:	e00c      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80122b4:	2384      	movs	r3, #132	; 0x84
 80122b6:	80fb      	strh	r3, [r7, #6]
 80122b8:	e009      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80122ba:	238e      	movs	r3, #142	; 0x8e
 80122bc:	80fb      	strh	r3, [r7, #6]
 80122be:	e006      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80122c0:	23e6      	movs	r3, #230	; 0xe6
 80122c2:	80fb      	strh	r3, [r7, #6]
 80122c4:	e003      	b.n	80122ce <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80122c6:	23f8      	movs	r3, #248	; 0xf8
 80122c8:	80fb      	strh	r3, [r7, #6]
 80122ca:	bf00      	nop
 80122cc:	e04c      	b.n	8012368 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80122ce:	e04b      	b.n	8012368 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80122d0:	4b49      	ldr	r3, [pc, #292]	; (80123f8 <_UG_GetCharData+0x284>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122d6:	8a7a      	ldrh	r2, [r7, #18]
 80122d8:	0052      	lsls	r2, r2, #1
 80122da:	4413      	add	r3, r2
 80122dc:	4618      	mov	r0, r3
 80122de:	f7ff fa87 	bl	80117f0 <ptr_8to16>
 80122e2:	4603      	mov	r3, r0
 80122e4:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80122e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	da06      	bge.n	80122fc <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80122ee:	89fb      	ldrh	r3, [r7, #14]
 80122f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80122f4:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80122f6:	2301      	movs	r3, #1
 80122f8:	747b      	strb	r3, [r7, #17]
 80122fa:	e032      	b.n	8012362 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80122fc:	7c7b      	ldrb	r3, [r7, #17]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d021      	beq.n	8012346 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8012302:	88fa      	ldrh	r2, [r7, #6]
 8012304:	8afb      	ldrh	r3, [r7, #22]
 8012306:	429a      	cmp	r2, r3
 8012308:	d30d      	bcc.n	8012326 <_UG_GetCharData+0x1b2>
 801230a:	88fa      	ldrh	r2, [r7, #6]
 801230c:	89fb      	ldrh	r3, [r7, #14]
 801230e:	429a      	cmp	r2, r3
 8012310:	d809      	bhi.n	8012326 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8012312:	88fa      	ldrh	r2, [r7, #6]
 8012314:	8afb      	ldrh	r3, [r7, #22]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	b29a      	uxth	r2, r3
 801231a:	8abb      	ldrh	r3, [r7, #20]
 801231c:	4413      	add	r3, r2
 801231e:	82bb      	strh	r3, [r7, #20]
        found=1;
 8012320:	2301      	movs	r3, #1
 8012322:	743b      	strb	r3, [r7, #16]
        break;
 8012324:	e02a      	b.n	801237c <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8012326:	88fa      	ldrh	r2, [r7, #6]
 8012328:	8afb      	ldrh	r3, [r7, #22]
 801232a:	429a      	cmp	r2, r3
 801232c:	d323      	bcc.n	8012376 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 801232e:	89fa      	ldrh	r2, [r7, #14]
 8012330:	8afb      	ldrh	r3, [r7, #22]
 8012332:	1ad3      	subs	r3, r2, r3
 8012334:	b29a      	uxth	r2, r3
 8012336:	8abb      	ldrh	r3, [r7, #20]
 8012338:	4413      	add	r3, r2
 801233a:	b29b      	uxth	r3, r3
 801233c:	3301      	adds	r3, #1
 801233e:	82bb      	strh	r3, [r7, #20]
      range=0;
 8012340:	2300      	movs	r3, #0
 8012342:	747b      	strb	r3, [r7, #17]
 8012344:	e00d      	b.n	8012362 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012346:	88fa      	ldrh	r2, [r7, #6]
 8012348:	89fb      	ldrh	r3, [r7, #14]
 801234a:	429a      	cmp	r2, r3
 801234c:	d102      	bne.n	8012354 <_UG_GetCharData+0x1e0>
      {
        found=1;
 801234e:	2301      	movs	r3, #1
 8012350:	743b      	strb	r3, [r7, #16]
        break;
 8012352:	e013      	b.n	801237c <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012354:	88fa      	ldrh	r2, [r7, #6]
 8012356:	89fb      	ldrh	r3, [r7, #14]
 8012358:	429a      	cmp	r2, r3
 801235a:	d30e      	bcc.n	801237a <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 801235c:	8abb      	ldrh	r3, [r7, #20]
 801235e:	3301      	adds	r3, #1
 8012360:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012362:	8a7b      	ldrh	r3, [r7, #18]
 8012364:	3301      	adds	r3, #1
 8012366:	827b      	strh	r3, [r7, #18]
 8012368:	4b23      	ldr	r3, [pc, #140]	; (80123f8 <_UG_GetCharData+0x284>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801236e:	8a7a      	ldrh	r2, [r7, #18]
 8012370:	429a      	cmp	r2, r3
 8012372:	d3ad      	bcc.n	80122d0 <_UG_GetCharData+0x15c>
 8012374:	e002      	b.n	801237c <_UG_GetCharData+0x208>
        break;
 8012376:	bf00      	nop
 8012378:	e000      	b.n	801237c <_UG_GetCharData+0x208>
        break;
 801237a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 801237c:	7c3b      	ldrb	r3, [r7, #16]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d034      	beq.n	80123ec <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8012382:	4b1d      	ldr	r3, [pc, #116]	; (80123f8 <_UG_GetCharData+0x284>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012388:	4a1c      	ldr	r2, [pc, #112]	; (80123fc <_UG_GetCharData+0x288>)
 801238a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 801238c:	4a1c      	ldr	r2, [pc, #112]	; (8012400 <_UG_GetCharData+0x28c>)
 801238e:	88fb      	ldrh	r3, [r7, #6]
 8012390:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8012392:	4b19      	ldr	r3, [pc, #100]	; (80123f8 <_UG_GetCharData+0x284>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012398:	8aba      	ldrh	r2, [r7, #20]
 801239a:	4917      	ldr	r1, [pc, #92]	; (80123f8 <_UG_GetCharData+0x284>)
 801239c:	6809      	ldr	r1, [r1, #0]
 801239e:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 80123a0:	fb01 f202 	mul.w	r2, r1, r2
 80123a4:	4413      	add	r3, r2
 80123a6:	4a17      	ldr	r2, [pc, #92]	; (8012404 <_UG_GetCharData+0x290>)
 80123a8:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80123aa:	4b13      	ldr	r3, [pc, #76]	; (80123f8 <_UG_GetCharData+0x284>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d009      	beq.n	80123c8 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80123b4:	4b10      	ldr	r3, [pc, #64]	; (80123f8 <_UG_GetCharData+0x284>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123ba:	8abb      	ldrh	r3, [r7, #20]
 80123bc:	4413      	add	r3, r2
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	b21a      	sxth	r2, r3
 80123c2:	4b11      	ldr	r3, [pc, #68]	; (8012408 <_UG_GetCharData+0x294>)
 80123c4:	801a      	strh	r2, [r3, #0]
 80123c6:	e006      	b.n	80123d6 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80123c8:	4b0b      	ldr	r3, [pc, #44]	; (80123f8 <_UG_GetCharData+0x284>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80123d0:	b21a      	sxth	r2, r3
 80123d2:	4b0d      	ldr	r3, [pc, #52]	; (8012408 <_UG_GetCharData+0x294>)
 80123d4:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d003      	beq.n	80123e4 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 80123dc:	4b09      	ldr	r3, [pc, #36]	; (8012404 <_UG_GetCharData+0x290>)
 80123de:	681a      	ldr	r2, [r3, #0]
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80123e4:	4b08      	ldr	r3, [pc, #32]	; (8012408 <_UG_GetCharData+0x294>)
 80123e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123ea:	e001      	b.n	80123f0 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 80123ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3718      	adds	r7, #24
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	20002090 	.word	0x20002090
 80123fc:	20002094 	.word	0x20002094
 8012400:	20002098 	.word	0x20002098
 8012404:	2000209c 	.word	0x2000209c
 8012408:	200020a0 	.word	0x200020a0

0801240c <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 801240c:	b590      	push	{r4, r7, lr}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012414:	4b3d      	ldr	r3, [pc, #244]	; (801250c <_UG_FontSelect+0x100>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	429a      	cmp	r2, r3
 801241e:	d070      	beq.n	8012502 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8012420:	4b3a      	ldr	r3, [pc, #232]	; (801250c <_UG_FontSelect+0x100>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	687a      	ldr	r2, [r7, #4]
 8012426:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	781a      	ldrb	r2, [r3, #0]
 801242c:	4b37      	ldr	r3, [pc, #220]	; (801250c <_UG_FontSelect+0x100>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012434:	b2d2      	uxtb	r2, r2
 8012436:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	607a      	str	r2, [r7, #4]
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	b25b      	sxtb	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	da01      	bge.n	801244c <_UG_FontSelect+0x40>
 8012448:	2201      	movs	r2, #1
 801244a:	e000      	b.n	801244e <_UG_FontSelect+0x42>
 801244c:	2200      	movs	r2, #0
 801244e:	4b2f      	ldr	r3, [pc, #188]	; (801250c <_UG_FontSelect+0x100>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	b2d2      	uxtb	r2, r2
 8012454:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	607a      	str	r2, [r7, #4]
 801245e:	4a2b      	ldr	r2, [pc, #172]	; (801250c <_UG_FontSelect+0x100>)
 8012460:	6812      	ldr	r2, [r2, #0]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	1c5a      	adds	r2, r3, #1
 801246c:	607a      	str	r2, [r7, #4]
 801246e:	4a27      	ldr	r2, [pc, #156]	; (801250c <_UG_FontSelect+0x100>)
 8012470:	6812      	ldr	r2, [r2, #0]
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8012478:	4b24      	ldr	r3, [pc, #144]	; (801250c <_UG_FontSelect+0x100>)
 801247a:	681c      	ldr	r4, [r3, #0]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff f9b7 	bl	80117f0 <ptr_8to16>
 8012482:	4603      	mov	r3, r0
 8012484:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	3302      	adds	r3, #2
 801248a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 801248c:	4b1f      	ldr	r3, [pc, #124]	; (801250c <_UG_FontSelect+0x100>)
 801248e:	681c      	ldr	r4, [r3, #0]
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7ff f9ad 	bl	80117f0 <ptr_8to16>
 8012496:	4603      	mov	r3, r0
 8012498:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3302      	adds	r3, #2
 801249e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80124a0:	4b1a      	ldr	r3, [pc, #104]	; (801250c <_UG_FontSelect+0x100>)
 80124a2:	681c      	ldr	r4, [r3, #0]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff f9a3 	bl	80117f0 <ptr_8to16>
 80124aa:	4603      	mov	r3, r0
 80124ac:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3302      	adds	r3, #2
 80124b2:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	1c5a      	adds	r2, r3, #1
 80124b8:	607a      	str	r2, [r7, #4]
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d00b      	beq.n	80124d8 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80124c0:	4b12      	ldr	r3, [pc, #72]	; (801250c <_UG_FontSelect+0x100>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80124c8:	4b10      	ldr	r3, [pc, #64]	; (801250c <_UG_FontSelect+0x100>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124ce:	461a      	mov	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	4413      	add	r3, r2
 80124d4:	607b      	str	r3, [r7, #4]
 80124d6:	e003      	b.n	80124e0 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80124d8:	4b0c      	ldr	r3, [pc, #48]	; (801250c <_UG_FontSelect+0x100>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2200      	movs	r2, #0
 80124de:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80124e0:	4b0a      	ldr	r3, [pc, #40]	; (801250c <_UG_FontSelect+0x100>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80124e8:	4b08      	ldr	r3, [pc, #32]	; (801250c <_UG_FontSelect+0x100>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80124ee:	005b      	lsls	r3, r3, #1
 80124f0:	461a      	mov	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4413      	add	r3, r2
 80124f6:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80124f8:	4b04      	ldr	r3, [pc, #16]	; (801250c <_UG_FontSelect+0x100>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	641a      	str	r2, [r3, #64]	; 0x40
 8012500:	e000      	b.n	8012504 <_UG_FontSelect+0xf8>
    return;
 8012502:	bf00      	nop
}
 8012504:	370c      	adds	r7, #12
 8012506:	46bd      	mov	sp, r7
 8012508:	bd90      	pop	{r4, r7, pc}
 801250a:	bf00      	nop
 801250c:	20002090 	.word	0x20002090

08012510 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8012510:	b5b0      	push	{r4, r5, r7, lr}
 8012512:	b08c      	sub	sp, #48	; 0x30
 8012514:	af00      	add	r7, sp, #0
 8012516:	4604      	mov	r4, r0
 8012518:	4608      	mov	r0, r1
 801251a:	4611      	mov	r1, r2
 801251c:	461a      	mov	r2, r3
 801251e:	4623      	mov	r3, r4
 8012520:	80fb      	strh	r3, [r7, #6]
 8012522:	4603      	mov	r3, r0
 8012524:	80bb      	strh	r3, [r7, #4]
 8012526:	460b      	mov	r3, r1
 8012528:	807b      	strh	r3, [r7, #2]
 801252a:	4613      	mov	r3, r2
 801252c:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 801252e:	2300      	movs	r3, #0
 8012530:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012532:	2300      	movs	r3, #0
 8012534:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012536:	2300      	movs	r3, #0
 8012538:	847b      	strh	r3, [r7, #34]	; 0x22
 801253a:	2300      	movs	r3, #0
 801253c:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 801253e:	4b8c      	ldr	r3, [pc, #560]	; (8012770 <_UG_PutChar+0x260>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012546:	75fb      	strb	r3, [r7, #23]
 8012548:	4b89      	ldr	r3, [pc, #548]	; (8012770 <_UG_PutChar+0x260>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012550:	f003 0302 	and.w	r3, r3, #2
 8012554:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012556:	2300      	movs	r3, #0
 8012558:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 801255a:	f107 0208 	add.w	r2, r7, #8
 801255e:	88fb      	ldrh	r3, [r7, #6]
 8012560:	4611      	mov	r1, r2
 8012562:	4618      	mov	r0, r3
 8012564:	f7ff fe06 	bl	8012174 <_UG_GetCharData>
 8012568:	4603      	mov	r3, r0
 801256a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 801256c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012574:	d102      	bne.n	801257c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8012576:	f04f 33ff 	mov.w	r3, #4294967295
 801257a:	e226      	b.n	80129ca <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 801257c:	4b7c      	ldr	r3, [pc, #496]	; (8012770 <_UG_PutChar+0x260>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012584:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8012586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012588:	2b00      	cmp	r3, #0
 801258a:	d101      	bne.n	8012590 <_UG_PutChar+0x80>
     return 0;
 801258c:	2300      	movs	r3, #0
 801258e:	e21c      	b.n	80129ca <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8012590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012592:	08db      	lsrs	r3, r3, #3
 8012594:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8012596:	4b76      	ldr	r3, [pc, #472]	; (8012770 <_UG_PutChar+0x260>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801259e:	f003 0307 	and.w	r3, r3, #7
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d002      	beq.n	80125ae <_UG_PutChar+0x9e>
 80125a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125aa:	3301      	adds	r3, #1
 80125ac:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80125ae:	7dbb      	ldrb	r3, [r7, #22]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d01d      	beq.n	80125f0 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80125b4:	4b6e      	ldr	r3, [pc, #440]	; (8012770 <_UG_PutChar+0x260>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80125ba:	461d      	mov	r5, r3
 80125bc:	88ba      	ldrh	r2, [r7, #4]
 80125be:	8abb      	ldrh	r3, [r7, #20]
 80125c0:	4413      	add	r3, r2
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	3b01      	subs	r3, #1
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	b21c      	sxth	r4, r3
 80125ca:	4b69      	ldr	r3, [pc, #420]	; (8012770 <_UG_PutChar+0x260>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	887b      	ldrh	r3, [r7, #2]
 80125d6:	4413      	add	r3, r2
 80125d8:	b29b      	uxth	r3, r3
 80125da:	3b01      	subs	r3, #1
 80125dc:	b29b      	uxth	r3, r3
 80125de:	b21b      	sxth	r3, r3
 80125e0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80125e4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80125e8:	4622      	mov	r2, r4
 80125ea:	47a8      	blx	r5
 80125ec:	4603      	mov	r3, r0
 80125ee:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80125f0:	4b5f      	ldr	r3, [pc, #380]	; (8012770 <_UG_PutChar+0x260>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f040 8172 	bne.w	80128e2 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80125fe:	2300      	movs	r3, #0
 8012600:	853b      	strh	r3, [r7, #40]	; 0x28
 8012602:	e0ec      	b.n	80127de <_UG_PutChar+0x2ce>
     {
       c=0;
 8012604:	2300      	movs	r3, #0
 8012606:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012608:	2300      	movs	r3, #0
 801260a:	857b      	strh	r3, [r7, #42]	; 0x2a
 801260c:	e0df      	b.n	80127ce <_UG_PutChar+0x2be>
       {
         b = *data++;
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	1c5a      	adds	r2, r3, #1
 8012612:	60ba      	str	r2, [r7, #8]
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012618:	2300      	movs	r3, #0
 801261a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801261c:	e0ca      	b.n	80127b4 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 801261e:	7f7b      	ldrb	r3, [r7, #29]
 8012620:	f003 0301 	and.w	r3, r3, #1
 8012624:	2b00      	cmp	r3, #0
 8012626:	d033      	beq.n	8012690 <_UG_PutChar+0x180>
           {
             if(driver)
 8012628:	7dbb      	ldrb	r3, [r7, #22]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d01f      	beq.n	801266e <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 801262e:	8c3b      	ldrh	r3, [r7, #32]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d00a      	beq.n	801264a <_UG_PutChar+0x13a>
 8012634:	7dfb      	ldrb	r3, [r7, #23]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d107      	bne.n	801264a <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 801263a:	8c3a      	ldrh	r2, [r7, #32]
 801263c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012640:	69bb      	ldr	r3, [r7, #24]
 8012642:	4610      	mov	r0, r2
 8012644:	4798      	blx	r3
                 bpixels=0;
 8012646:	2300      	movs	r3, #0
 8012648:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 801264a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801264c:	2b00      	cmp	r3, #0
 801264e:	d10a      	bne.n	8012666 <_UG_PutChar+0x156>
 8012650:	7dfb      	ldrb	r3, [r7, #23]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d007      	beq.n	8012666 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012656:	88ba      	ldrh	r2, [r7, #4]
 8012658:	8bfb      	ldrh	r3, [r7, #30]
 801265a:	4413      	add	r3, r2
 801265c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 801265e:	887a      	ldrh	r2, [r7, #2]
 8012660:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012662:	4413      	add	r3, r2
 8012664:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012668:	3301      	adds	r3, #1
 801266a:	847b      	strh	r3, [r7, #34]	; 0x22
 801266c:	e096      	b.n	801279c <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 801266e:	4b40      	ldr	r3, [pc, #256]	; (8012770 <_UG_PutChar+0x260>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	88b9      	ldrh	r1, [r7, #4]
 8012678:	8bfa      	ldrh	r2, [r7, #30]
 801267a:	440a      	add	r2, r1
 801267c:	b292      	uxth	r2, r2
 801267e:	b210      	sxth	r0, r2
 8012680:	8879      	ldrh	r1, [r7, #2]
 8012682:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012684:	440a      	add	r2, r1
 8012686:	b292      	uxth	r2, r2
 8012688:	b211      	sxth	r1, r2
 801268a:	883a      	ldrh	r2, [r7, #0]
 801268c:	4798      	blx	r3
 801268e:	e085      	b.n	801279c <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8012690:	7dbb      	ldrb	r3, [r7, #22]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d06e      	beq.n	8012774 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8012696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012698:	2b00      	cmp	r3, #0
 801269a:	d064      	beq.n	8012766 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 801269c:	7dfb      	ldrb	r3, [r7, #23]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d15e      	bne.n	8012760 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 80126a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126a4:	8839      	ldrh	r1, [r7, #0]
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	4610      	mov	r0, r2
 80126aa:	4798      	blx	r3
                   fpixels=0;
 80126ac:	2300      	movs	r3, #0
 80126ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80126b0:	e059      	b.n	8012766 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80126b2:	88ba      	ldrh	r2, [r7, #4]
 80126b4:	8abb      	ldrh	r3, [r7, #20]
 80126b6:	4413      	add	r3, r2
 80126b8:	b29a      	uxth	r2, r3
 80126ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80126bc:	1ad3      	subs	r3, r2, r3
 80126be:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80126c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d003      	beq.n	80126d2 <_UG_PutChar+0x1c2>
 80126ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126cc:	89fb      	ldrh	r3, [r7, #14]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d224      	bcs.n	801271c <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80126d2:	4b27      	ldr	r3, [pc, #156]	; (8012770 <_UG_PutChar+0x260>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126d8:	461d      	mov	r5, r3
 80126da:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80126de:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80126e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126e4:	89fb      	ldrh	r3, [r7, #14]
 80126e6:	4413      	add	r3, r2
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	3b01      	subs	r3, #1
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	b21c      	sxth	r4, r3
 80126f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80126f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80126fe:	4413      	add	r3, r2
 8012700:	b29b      	uxth	r3, r3
 8012702:	b21b      	sxth	r3, r3
 8012704:	4622      	mov	r2, r4
 8012706:	47a8      	blx	r5
 8012708:	4603      	mov	r3, r0
 801270a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 801270c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801270e:	8839      	ldrh	r1, [r7, #0]
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	4610      	mov	r0, r2
 8012714:	4798      	blx	r3
                       fpixels=0;
 8012716:	2300      	movs	r3, #0
 8012718:	847b      	strh	r3, [r7, #34]	; 0x22
 801271a:	e021      	b.n	8012760 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801271c:	4b14      	ldr	r3, [pc, #80]	; (8012770 <_UG_PutChar+0x260>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012722:	461c      	mov	r4, r3
 8012724:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012728:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801272c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801272e:	89fb      	ldrh	r3, [r7, #14]
 8012730:	4413      	add	r3, r2
 8012732:	b29b      	uxth	r3, r3
 8012734:	3b01      	subs	r3, #1
 8012736:	b29b      	uxth	r3, r3
 8012738:	b21a      	sxth	r2, r3
 801273a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801273e:	47a0      	blx	r4
 8012740:	4603      	mov	r3, r0
 8012742:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012744:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012746:	8839      	ldrh	r1, [r7, #0]
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	4610      	mov	r0, r2
 801274c:	4798      	blx	r3
                       fpixels -= width;
 801274e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012750:	89fb      	ldrh	r3, [r7, #14]
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8012756:	88bb      	ldrh	r3, [r7, #4]
 8012758:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 801275a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801275c:	3301      	adds	r3, #1
 801275e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8012760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1a5      	bne.n	80126b2 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8012766:	8c3b      	ldrh	r3, [r7, #32]
 8012768:	3301      	adds	r3, #1
 801276a:	843b      	strh	r3, [r7, #32]
 801276c:	e016      	b.n	801279c <_UG_PutChar+0x28c>
 801276e:	bf00      	nop
 8012770:	20002090 	.word	0x20002090
             }
             else if(!trans)                           // Not accelerated output
 8012774:	7dfb      	ldrb	r3, [r7, #23]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d110      	bne.n	801279c <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 801277a:	4b96      	ldr	r3, [pc, #600]	; (80129d4 <_UG_PutChar+0x4c4>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	88b9      	ldrh	r1, [r7, #4]
 8012784:	8bfa      	ldrh	r2, [r7, #30]
 8012786:	440a      	add	r2, r1
 8012788:	b292      	uxth	r2, r2
 801278a:	b210      	sxth	r0, r2
 801278c:	8879      	ldrh	r1, [r7, #2]
 801278e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012790:	440a      	add	r2, r1
 8012792:	b292      	uxth	r2, r2
 8012794:	b211      	sxth	r1, r2
 8012796:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801279a:	4798      	blx	r3
             }
           }
           b >>= 1;
 801279c:	7f7b      	ldrb	r3, [r7, #29]
 801279e:	085b      	lsrs	r3, r3, #1
 80127a0:	777b      	strb	r3, [r7, #29]
           c++;
 80127a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	3301      	adds	r3, #1
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80127ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127b0:	3301      	adds	r3, #1
 80127b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80127b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127b6:	2b07      	cmp	r3, #7
 80127b8:	d806      	bhi.n	80127c8 <_UG_PutChar+0x2b8>
 80127ba:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80127be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	f6ff af2b 	blt.w	801261e <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 80127c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80127ca:	3301      	adds	r3, #1
 80127cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80127ce:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80127d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127d2:	429a      	cmp	r2, r3
 80127d4:	f4ff af1b 	bcc.w	801260e <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80127d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80127da:	3301      	adds	r3, #1
 80127dc:	853b      	strh	r3, [r7, #40]	; 0x28
 80127de:	4b7d      	ldr	r3, [pc, #500]	; (80129d4 <_UG_PutChar+0x4c4>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80127ea:	429a      	cmp	r2, r3
 80127ec:	f4ff af0a 	bcc.w	8012604 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80127f0:	7dbb      	ldrb	r3, [r7, #22]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f000 80e7 	beq.w	80129c6 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 80127f8:	8c3b      	ldrh	r3, [r7, #32]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d009      	beq.n	8012812 <_UG_PutChar+0x302>
 80127fe:	7dfb      	ldrb	r3, [r7, #23]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d106      	bne.n	8012812 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8012804:	8c3a      	ldrh	r2, [r7, #32]
 8012806:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	4610      	mov	r0, r2
 801280e:	4798      	blx	r3
 8012810:	e0d9      	b.n	80129c6 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8012812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 80d6 	beq.w	80129c6 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 801281a:	7dfb      	ldrb	r3, [r7, #23]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d15c      	bne.n	80128da <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8012820:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012822:	8839      	ldrh	r1, [r7, #0]
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	4610      	mov	r0, r2
 8012828:	4798      	blx	r3
 801282a:	e0cc      	b.n	80129c6 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 801282c:	88ba      	ldrh	r2, [r7, #4]
 801282e:	8abb      	ldrh	r3, [r7, #20]
 8012830:	4413      	add	r3, r2
 8012832:	b29a      	uxth	r2, r3
 8012834:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 801283a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801283c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012840:	429a      	cmp	r2, r3
 8012842:	d003      	beq.n	801284c <_UG_PutChar+0x33c>
 8012844:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012846:	8a3b      	ldrh	r3, [r7, #16]
 8012848:	429a      	cmp	r2, r3
 801284a:	d224      	bcs.n	8012896 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 801284c:	4b61      	ldr	r3, [pc, #388]	; (80129d4 <_UG_PutChar+0x4c4>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012852:	461d      	mov	r5, r3
 8012854:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012858:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801285c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801285e:	8a3b      	ldrh	r3, [r7, #16]
 8012860:	4413      	add	r3, r2
 8012862:	b29b      	uxth	r3, r3
 8012864:	3b01      	subs	r3, #1
 8012866:	b29b      	uxth	r3, r3
 8012868:	b21c      	sxth	r4, r3
 801286a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801286c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012870:	fb92 f3f3 	sdiv	r3, r2, r3
 8012874:	b29a      	uxth	r2, r3
 8012876:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012878:	4413      	add	r3, r2
 801287a:	b29b      	uxth	r3, r3
 801287c:	b21b      	sxth	r3, r3
 801287e:	4622      	mov	r2, r4
 8012880:	47a8      	blx	r5
 8012882:	4603      	mov	r3, r0
 8012884:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8012886:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012888:	8839      	ldrh	r1, [r7, #0]
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	4610      	mov	r0, r2
 801288e:	4798      	blx	r3
               fpixels=0;
 8012890:	2300      	movs	r3, #0
 8012892:	847b      	strh	r3, [r7, #34]	; 0x22
 8012894:	e021      	b.n	80128da <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012896:	4b4f      	ldr	r3, [pc, #316]	; (80129d4 <_UG_PutChar+0x4c4>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801289c:	461c      	mov	r4, r3
 801289e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80128a2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80128a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80128a8:	8a3b      	ldrh	r3, [r7, #16]
 80128aa:	4413      	add	r3, r2
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	3b01      	subs	r3, #1
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	b21a      	sxth	r2, r3
 80128b4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80128b8:	47a0      	blx	r4
 80128ba:	4603      	mov	r3, r0
 80128bc:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80128be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80128c0:	8839      	ldrh	r1, [r7, #0]
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	4610      	mov	r0, r2
 80128c6:	4798      	blx	r3
               fpixels -= width;
 80128c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80128ca:	8a3b      	ldrh	r3, [r7, #16]
 80128cc:	1ad3      	subs	r3, r2, r3
 80128ce:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 80128d0:	88bb      	ldrh	r3, [r7, #4]
 80128d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 80128d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80128d6:	3301      	adds	r3, #1
 80128d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 80128da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d1a5      	bne.n	801282c <_UG_PutChar+0x31c>
 80128e0:	e071      	b.n	80129c6 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80128e2:	4b3c      	ldr	r3, [pc, #240]	; (80129d4 <_UG_PutChar+0x4c4>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	d16b      	bne.n	80129c6 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80128ee:	2300      	movs	r3, #0
 80128f0:	853b      	strh	r3, [r7, #40]	; 0x28
 80128f2:	e060      	b.n	80129b6 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 80128f4:	2300      	movs	r3, #0
 80128f6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80128f8:	e04a      	b.n	8012990 <_UG_PutChar+0x480>
       {
         b = *data++;
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	1c5a      	adds	r2, r3, #1
 80128fe:	60ba      	str	r2, [r7, #8]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8012904:	883b      	ldrh	r3, [r7, #0]
 8012906:	b2db      	uxtb	r3, r3
 8012908:	7f7a      	ldrb	r2, [r7, #29]
 801290a:	fb03 f202 	mul.w	r2, r3, r2
 801290e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012912:	b2db      	uxtb	r3, r3
 8012914:	7f79      	ldrb	r1, [r7, #29]
 8012916:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801291a:	fb01 f303 	mul.w	r3, r1, r3
 801291e:	4413      	add	r3, r2
 8012920:	121b      	asrs	r3, r3, #8
 8012922:	b21b      	sxth	r3, r3
 8012924:	b2db      	uxtb	r3, r3
 8012926:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8012928:	883b      	ldrh	r3, [r7, #0]
 801292a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801292e:	7f79      	ldrb	r1, [r7, #29]
 8012930:	fb03 f101 	mul.w	r1, r3, r1
 8012934:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012938:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801293c:	7f78      	ldrb	r0, [r7, #29]
 801293e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8012942:	fb00 f303 	mul.w	r3, r0, r3
 8012946:	440b      	add	r3, r1
 8012948:	121b      	asrs	r3, r3, #8
 801294a:	b21b      	sxth	r3, r3
 801294c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012950:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8012952:	4313      	orrs	r3, r2
 8012954:	b21b      	sxth	r3, r3
 8012956:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8012958:	7dbb      	ldrb	r3, [r7, #22]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d005      	beq.n	801296a <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 801295e:	8a7a      	ldrh	r2, [r7, #18]
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	4611      	mov	r1, r2
 8012964:	2001      	movs	r0, #1
 8012966:	4798      	blx	r3
 8012968:	e00f      	b.n	801298a <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 801296a:	4b1a      	ldr	r3, [pc, #104]	; (80129d4 <_UG_PutChar+0x4c4>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	88b9      	ldrh	r1, [r7, #4]
 8012974:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012976:	440a      	add	r2, r1
 8012978:	b292      	uxth	r2, r2
 801297a:	b210      	sxth	r0, r2
 801297c:	8879      	ldrh	r1, [r7, #2]
 801297e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012980:	440a      	add	r2, r1
 8012982:	b292      	uxth	r2, r2
 8012984:	b211      	sxth	r1, r2
 8012986:	8a7a      	ldrh	r2, [r7, #18]
 8012988:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 801298a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801298c:	3301      	adds	r3, #1
 801298e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012990:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012992:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012996:	429a      	cmp	r2, r3
 8012998:	dbaf      	blt.n	80128fa <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	4a0d      	ldr	r2, [pc, #52]	; (80129d4 <_UG_PutChar+0x4c4>)
 801299e:	6812      	ldr	r2, [r2, #0]
 80129a0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80129a4:	4611      	mov	r1, r2
 80129a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80129aa:	1a8a      	subs	r2, r1, r2
 80129ac:	4413      	add	r3, r2
 80129ae:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80129b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80129b2:	3301      	adds	r3, #1
 80129b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80129b6:	4b07      	ldr	r3, [pc, #28]	; (80129d4 <_UG_PutChar+0x4c4>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80129be:	b29b      	uxth	r3, r3
 80129c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d396      	bcc.n	80128f4 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 80129c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3730      	adds	r7, #48	; 0x30
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bdb0      	pop	{r4, r5, r7, pc}
 80129d2:	bf00      	nop
 80129d4:	20002090 	.word	0x20002090

080129d8 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80129d8:	b480      	push	{r7}
 80129da:	b089      	sub	sp, #36	; 0x24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80129e0:	4b57      	ldr	r3, [pc, #348]	; (8012b40 <_UG_ProcessTouchData+0x168>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	88db      	ldrh	r3, [r3, #6]
 80129e6:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80129e8:	4b55      	ldr	r3, [pc, #340]	; (8012b40 <_UG_ProcessTouchData+0x168>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	891b      	ldrh	r3, [r3, #8]
 80129ee:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 80129f0:	4b53      	ldr	r3, [pc, #332]	; (8012b40 <_UG_ProcessTouchData+0x168>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	791b      	ldrb	r3, [r3, #4]
 80129f6:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80129fe:	2300      	movs	r3, #0
 8012a00:	83fb      	strh	r3, [r7, #30]
 8012a02:	e090      	b.n	8012b26 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685a      	ldr	r2, [r3, #4]
 8012a08:	8bfb      	ldrh	r3, [r7, #30]
 8012a0a:	015b      	lsls	r3, r3, #5
 8012a0c:	4413      	add	r3, r2
 8012a0e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	785b      	ldrb	r3, [r3, #1]
 8012a1a:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8012a1c:	7bfb      	ldrb	r3, [r7, #15]
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d179      	bne.n	8012b1a <_UG_ProcessTouchData+0x142>
 8012a26:	7bfb      	ldrb	r3, [r7, #15]
 8012a28:	f003 0302 	and.w	r3, r3, #2
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d074      	beq.n	8012b1a <_UG_ProcessTouchData+0x142>
 8012a30:	7bfb      	ldrb	r3, [r7, #15]
 8012a32:	f003 0308 	and.w	r3, r3, #8
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d06f      	beq.n	8012b1a <_UG_ProcessTouchData+0x142>
 8012a3a:	7bfb      	ldrb	r3, [r7, #15]
 8012a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d16a      	bne.n	8012b1a <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8012a44:	7dfb      	ldrb	r3, [r7, #23]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d047      	beq.n	8012ada <_UG_ProcessTouchData+0x102>
 8012a4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a52:	d042      	beq.n	8012ada <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8012a54:	7f7b      	ldrb	r3, [r7, #29]
 8012a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d107      	bne.n	8012a6e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8012a5e:	7f7b      	ldrb	r3, [r7, #29]
 8012a60:	f043 0305 	orr.w	r3, r3, #5
 8012a64:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8012a66:	7f7b      	ldrb	r3, [r7, #29]
 8012a68:	f023 0318 	bic.w	r3, r3, #24
 8012a6c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8012a6e:	7f7b      	ldrb	r3, [r7, #29]
 8012a70:	f023 0320 	bic.w	r3, r3, #32
 8012a74:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012a7c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	db25      	blt.n	8012ad0 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012a8a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	dc1e      	bgt.n	8012ad0 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012a98:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	db17      	blt.n	8012ad0 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012aa6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	dc10      	bgt.n	8012ad0 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8012aae:	7f7b      	ldrb	r3, [r7, #29]
 8012ab0:	f043 0320 	orr.w	r3, r3, #32
 8012ab4:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8012ab6:	7f7b      	ldrb	r3, [r7, #29]
 8012ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d107      	bne.n	8012ad0 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8012ac0:	7f7b      	ldrb	r3, [r7, #29]
 8012ac2:	f023 0304 	bic.w	r3, r3, #4
 8012ac6:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8012ac8:	7f7b      	ldrb	r3, [r7, #29]
 8012aca:	f043 0302 	orr.w	r3, r3, #2
 8012ace:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8012ad0:	7f7b      	ldrb	r3, [r7, #29]
 8012ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ad6:	777b      	strb	r3, [r7, #29]
 8012ad8:	e01f      	b.n	8012b1a <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8012ada:	7f7b      	ldrb	r3, [r7, #29]
 8012adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d01a      	beq.n	8012b1a <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8012ae4:	7f7b      	ldrb	r3, [r7, #29]
 8012ae6:	f003 0320 	and.w	r3, r3, #32
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d004      	beq.n	8012af8 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8012aee:	7f7b      	ldrb	r3, [r7, #29]
 8012af0:	f043 0308 	orr.w	r3, r3, #8
 8012af4:	777b      	strb	r3, [r7, #29]
 8012af6:	e003      	b.n	8012b00 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8012af8:	7f7b      	ldrb	r3, [r7, #29]
 8012afa:	f043 0310 	orr.w	r3, r3, #16
 8012afe:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8012b00:	7f7b      	ldrb	r3, [r7, #29]
 8012b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d003      	beq.n	8012b12 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8012b0a:	7f7b      	ldrb	r3, [r7, #29]
 8012b0c:	f043 0301 	orr.w	r3, r3, #1
 8012b10:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8012b12:	7f7b      	ldrb	r3, [r7, #29]
 8012b14:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8012b18:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	7f7a      	ldrb	r2, [r7, #29]
 8012b1e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8012b20:	8bfb      	ldrh	r3, [r7, #30]
 8012b22:	3301      	adds	r3, #1
 8012b24:	83fb      	strh	r3, [r7, #30]
 8012b26:	8bfa      	ldrh	r2, [r7, #30]
 8012b28:	8abb      	ldrh	r3, [r7, #20]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	f4ff af6a 	bcc.w	8012a04 <_UG_ProcessTouchData+0x2c>
   }
}
 8012b30:	bf00      	nop
 8012b32:	bf00      	nop
 8012b34:	3724      	adds	r7, #36	; 0x24
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop
 8012b40:	20002090 	.word	0x20002090

08012b44 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8012b52:	2300      	movs	r3, #0
 8012b54:	82fb      	strh	r3, [r7, #22]
 8012b56:	e035      	b.n	8012bc4 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685a      	ldr	r2, [r3, #4]
 8012b5c:	8afb      	ldrh	r3, [r7, #22]
 8012b5e:	015b      	lsls	r3, r3, #5
 8012b60:	4413      	add	r3, r2
 8012b62:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	785b      	ldrb	r3, [r3, #1]
 8012b6e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8012b70:	7bfb      	ldrb	r3, [r7, #15]
 8012b72:	f003 0301 	and.w	r3, r3, #1
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d121      	bne.n	8012bbe <_UG_UpdateObjects+0x7a>
 8012b7a:	7bfb      	ldrb	r3, [r7, #15]
 8012b7c:	f003 0302 	and.w	r3, r3, #2
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d01c      	beq.n	8012bbe <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8012b84:	7bfb      	ldrb	r3, [r7, #15]
 8012b86:	f003 0320 	and.w	r3, r3, #32
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d004      	beq.n	8012b98 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	6939      	ldr	r1, [r7, #16]
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8012b98:	7bfb      	ldrb	r3, [r7, #15]
 8012b9a:	f003 0308 	and.w	r3, r3, #8
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00d      	beq.n	8012bbe <_UG_UpdateObjects+0x7a>
 8012ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	da09      	bge.n	8012bbe <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8012baa:	7bbb      	ldrb	r3, [r7, #14]
 8012bac:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d004      	beq.n	8012bbe <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	6939      	ldr	r1, [r7, #16]
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8012bbe:	8afb      	ldrh	r3, [r7, #22]
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	82fb      	strh	r3, [r7, #22]
 8012bc4:	8afa      	ldrh	r2, [r7, #22]
 8012bc6:	8abb      	ldrh	r3, [r7, #20]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d3c5      	bcc.n	8012b58 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8012bcc:	bf00      	nop
 8012bce:	bf00      	nop
 8012bd0:	3718      	adds	r7, #24
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
	...

08012bd8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b086      	sub	sp, #24
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8012be0:	4b22      	ldr	r3, [pc, #136]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012be2:	2200      	movs	r2, #0
 8012be4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8012be6:	4b21      	ldr	r3, [pc, #132]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012be8:	2202      	movs	r2, #2
 8012bea:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	82fb      	strh	r3, [r7, #22]
 8012bf6:	e02f      	b.n	8012c58 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	685a      	ldr	r2, [r3, #4]
 8012bfc:	8afb      	ldrh	r3, [r7, #22]
 8012bfe:	015b      	lsls	r3, r3, #5
 8012c00:	4413      	add	r3, r2
 8012c02:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8012c0a:	7bfb      	ldrb	r3, [r7, #15]
 8012c0c:	f003 0301 	and.w	r3, r3, #1
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d11e      	bne.n	8012c52 <_UG_HandleEvents+0x7a>
 8012c14:	7bfb      	ldrb	r3, [r7, #15]
 8012c16:	f003 0302 	and.w	r3, r3, #2
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d019      	beq.n	8012c52 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	7e9b      	ldrb	r3, [r3, #26]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d015      	beq.n	8012c52 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8012c26:	4a11      	ldr	r2, [pc, #68]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	7e1a      	ldrb	r2, [r3, #24]
 8012c30:	4b0e      	ldr	r3, [pc, #56]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012c32:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	7e5a      	ldrb	r2, [r3, #25]
 8012c38:	4b0c      	ldr	r3, [pc, #48]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012c3a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	7e9a      	ldrb	r2, [r3, #26]
 8012c40:	4b0a      	ldr	r3, [pc, #40]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012c42:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c48:	4808      	ldr	r0, [pc, #32]	; (8012c6c <_UG_HandleEvents+0x94>)
 8012c4a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8012c52:	8afb      	ldrh	r3, [r7, #22]
 8012c54:	3301      	adds	r3, #1
 8012c56:	82fb      	strh	r3, [r7, #22]
 8012c58:	8afa      	ldrh	r2, [r7, #22]
 8012c5a:	8abb      	ldrh	r3, [r7, #20]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d3cb      	bcc.n	8012bf8 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8012c60:	bf00      	nop
 8012c62:	bf00      	nop
 8012c64:	3718      	adds	r7, #24
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	200020a4 	.word	0x200020a4

08012c70 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8012c70:	b590      	push	{r4, r7, lr}
 8012c72:	b08f      	sub	sp, #60	; 0x3c
 8012c74:	af02      	add	r7, sp, #8
 8012c76:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 812c 	beq.w	8012eda <_UG_PutText+0x26a>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f000 8127 	beq.w	8012eda <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	89db      	ldrh	r3, [r3, #14]
 8012c90:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	895b      	ldrh	r3, [r3, #10]
 8012c96:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	3302      	adds	r3, #2
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8012ca2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8012ca6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012caa:	1ad2      	subs	r2, r2, r3
 8012cac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	f2c0 8114 	blt.w	8012ede <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	891b      	ldrh	r3, [r3, #8]
 8012cba:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	899b      	ldrh	r3, [r3, #12]
 8012cc0:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	7d1b      	ldrb	r3, [r3, #20]
 8012cc6:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	8adb      	ldrh	r3, [r3, #22]
 8012ccc:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	8b1b      	ldrh	r3, [r3, #24]
 8012cd2:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7ff fb92 	bl	801240c <_UG_FontSelect>

   rc=1;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012cf0:	4b80      	ldr	r3, [pc, #512]	; (8012ef4 <_UG_PutText+0x284>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d107      	bne.n	8012d0c <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8012cfc:	f107 0308 	add.w	r3, r7, #8
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff f9bf 	bl	8012084 <_UG_DecodeUTF8>
 8012d06:	4603      	mov	r3, r0
 8012d08:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012d0a:	e004      	b.n	8012d16 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	1c5a      	adds	r2, r3, #1
 8012d10:	60ba      	str	r2, [r7, #8]
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8012d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d006      	beq.n	8012d2a <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8012d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d1e:	2b0a      	cmp	r3, #10
 8012d20:	d1e6      	bne.n	8012cf0 <_UG_PutText+0x80>
 8012d22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d24:	3301      	adds	r3, #1
 8012d26:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012d28:	e7e2      	b.n	8012cf0 <_UG_PutText+0x80>
     if(!chr) break;
 8012d2a:	bf00      	nop
   }

   yp = 0;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8012d30:	7e7b      	ldrb	r3, [r7, #25]
 8012d32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d01f      	beq.n	8012d7a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8012d3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012d3c:	8c3b      	ldrh	r3, [r7, #32]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	3301      	adds	r3, #1
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8012d48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d4a:	8bfb      	ldrh	r3, [r7, #30]
 8012d4c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8012d4e:	fb11 f303 	smulbb	r3, r1, r3
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	1ad3      	subs	r3, r2, r3
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8012d5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	b299      	uxth	r1, r3
 8012d62:	8abb      	ldrh	r3, [r7, #20]
 8012d64:	fb11 f303 	smulbb	r3, r1, r3
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	1ad3      	subs	r3, r2, r3
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8012d70:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	f2c0 80b4 	blt.w	8012ee2 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8012d7a:	7e7b      	ldrb	r3, [r7, #25]
 8012d7c:	f003 0310 	and.w	r3, r3, #16
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d003      	beq.n	8012d8c <_UG_PutText+0x11c>
 8012d84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012d88:	105b      	asrs	r3, r3, #1
 8012d8a:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8012d8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d8e:	8c3b      	ldrh	r3, [r7, #32]
 8012d90:	4413      	add	r3, r2
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8012d96:	2300      	movs	r3, #0
 8012d98:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012da2:	4b54      	ldr	r3, [pc, #336]	; (8012ef4 <_UG_PutText+0x284>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d107      	bne.n	8012dbe <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8012dae:	f107 0308 	add.w	r3, r7, #8
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7ff f966 	bl	8012084 <_UG_DecodeUTF8>
 8012db8:	4603      	mov	r3, r0
 8012dba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012dbc:	e004      	b.n	8012dc8 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	1c5a      	adds	r2, r3, #1
 8012dc2:	60ba      	str	r2, [r7, #8]
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8012dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d01b      	beq.n	8012e06 <_UG_PutText+0x196>
 8012dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dd0:	2b0a      	cmp	r3, #10
 8012dd2:	d018      	beq.n	8012e06 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8012dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7ff f9cb 	bl	8012174 <_UG_GetCharData>
 8012dde:	4603      	mov	r3, r0
 8012de0:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8012de2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dea:	d00a      	beq.n	8012e02 <_UG_PutText+0x192>
         sl++;
 8012dec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012dee:	3301      	adds	r3, #1
 8012df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8012df2:	8a7a      	ldrh	r2, [r7, #18]
 8012df4:	8afb      	ldrh	r3, [r7, #22]
 8012df6:	4413      	add	r3, r2
 8012df8:	b29a      	uxth	r2, r3
 8012dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012dfc:	4413      	add	r3, r2
 8012dfe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012e00:	e7cf      	b.n	8012da2 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8012e02:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012e04:	e7cd      	b.n	8012da2 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8012e06:	8afb      	ldrh	r3, [r7, #22]
 8012e08:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8012e0e:	8b7a      	ldrh	r2, [r7, #26]
 8012e10:	8bbb      	ldrh	r3, [r7, #28]
 8012e12:	1ad3      	subs	r3, r2, r3
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	3301      	adds	r3, #1
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8012e1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012e1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8012e26:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	db5b      	blt.n	8012ee6 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8012e2e:	7e7b      	ldrb	r3, [r7, #25]
 8012e30:	f003 0301 	and.w	r3, r3, #1
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <_UG_PutText+0x1ce>
 8012e38:	2300      	movs	r3, #0
 8012e3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8012e3c:	e008      	b.n	8012e50 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8012e3e:	7e7b      	ldrb	r3, [r7, #25]
 8012e40:	f003 0302 	and.w	r3, r3, #2
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d003      	beq.n	8012e50 <_UG_PutText+0x1e0>
 8012e48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012e4c:	105b      	asrs	r3, r3, #1
 8012e4e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8012e50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012e52:	8bbb      	ldrh	r3, [r7, #28]
 8012e54:	4413      	add	r3, r2
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012e5a:	4b26      	ldr	r3, [pc, #152]	; (8012ef4 <_UG_PutText+0x284>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d107      	bne.n	8012e76 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8012e66:	f107 030c 	add.w	r3, r7, #12
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7ff f90a 	bl	8012084 <_UG_DecodeUTF8>
 8012e70:	4603      	mov	r3, r0
 8012e72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012e74:	e004      	b.n	8012e80 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	1c5a      	adds	r2, r3, #1
 8012e7a:	60fa      	str	r2, [r7, #12]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8012e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d031      	beq.n	8012eea <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8012e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e88:	2b0a      	cmp	r3, #10
 8012e8a:	d01c      	beq.n	8012ec6 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	8a1c      	ldrh	r4, [r3, #16]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	8a5b      	ldrh	r3, [r3, #18]
 8012e94:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8012e98:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8012e9c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	4623      	mov	r3, r4
 8012ea2:	f7ff fb35 	bl	8012510 <_UG_PutChar>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8012eaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb2:	d0d2      	beq.n	8012e5a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8012eb4:	8a7a      	ldrh	r2, [r7, #18]
 8012eb6:	8afb      	ldrh	r3, [r7, #22]
 8012eb8:	4413      	add	r3, r2
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012ebe:	4413      	add	r3, r2
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012ec4:	e7c9      	b.n	8012e5a <_UG_PutText+0x1ea>
           break;
 8012ec6:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8012ec8:	8bfa      	ldrh	r2, [r7, #30]
 8012eca:	8abb      	ldrh	r3, [r7, #20]
 8012ecc:	4413      	add	r3, r2
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012ed2:	4413      	add	r3, r2
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8012ed8:	e75d      	b.n	8012d96 <_UG_PutText+0x126>
     return;
 8012eda:	bf00      	nop
 8012edc:	e006      	b.n	8012eec <_UG_PutText+0x27c>
     return;
 8012ede:	bf00      	nop
 8012ee0:	e004      	b.n	8012eec <_UG_PutText+0x27c>
        return;
 8012ee2:	bf00      	nop
 8012ee4:	e002      	b.n	8012eec <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8012ee6:	bf00      	nop
 8012ee8:	e000      	b.n	8012eec <_UG_PutText+0x27c>
           return;
 8012eea:	bf00      	nop
   }
}
 8012eec:	3734      	adds	r7, #52	; 0x34
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd90      	pop	{r4, r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20002090 	.word	0x20002090

08012ef8 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8012ef8:	b5b0      	push	{r4, r5, r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af02      	add	r7, sp, #8
 8012efe:	4604      	mov	r4, r0
 8012f00:	4608      	mov	r0, r1
 8012f02:	4611      	mov	r1, r2
 8012f04:	461a      	mov	r2, r3
 8012f06:	4623      	mov	r3, r4
 8012f08:	80fb      	strh	r3, [r7, #6]
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	80bb      	strh	r3, [r7, #4]
 8012f0e:	460b      	mov	r3, r1
 8012f10:	807b      	strh	r3, [r7, #2]
 8012f12:	4613      	mov	r3, r2
 8012f14:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8012f16:	887b      	ldrh	r3, [r7, #2]
 8012f18:	3b01      	subs	r3, #1
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	b21c      	sxth	r4, r3
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	1c9a      	adds	r2, r3, #2
 8012f22:	61ba      	str	r2, [r7, #24]
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012f2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012f2e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012f32:	9300      	str	r3, [sp, #0]
 8012f34:	4613      	mov	r3, r2
 8012f36:	4622      	mov	r2, r4
 8012f38:	f7fe fee0 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8012f3c:	88bb      	ldrh	r3, [r7, #4]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	b219      	sxth	r1, r3
 8012f44:	883b      	ldrh	r3, [r7, #0]
 8012f46:	3b01      	subs	r3, #1
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	b21c      	sxth	r4, r3
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	1c9a      	adds	r2, r3, #2
 8012f50:	61ba      	str	r2, [r7, #24]
 8012f52:	881b      	ldrh	r3, [r3, #0]
 8012f54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012f58:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	4623      	mov	r3, r4
 8012f60:	f7fe fecc 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	1c9a      	adds	r2, r3, #2
 8012f68:	61ba      	str	r2, [r7, #24]
 8012f6a:	881b      	ldrh	r3, [r3, #0]
 8012f6c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012f70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012f74:	f9b7 1000 	ldrsh.w	r1, [r7]
 8012f78:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	4623      	mov	r3, r4
 8012f80:	f7fe febc 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8012f84:	883b      	ldrh	r3, [r7, #0]
 8012f86:	3b01      	subs	r3, #1
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	b21c      	sxth	r4, r3
 8012f8c:	69bb      	ldr	r3, [r7, #24]
 8012f8e:	1c9a      	adds	r2, r3, #2
 8012f90:	61ba      	str	r2, [r7, #24]
 8012f92:	881b      	ldrh	r3, [r3, #0]
 8012f94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012f98:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012f9c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8012fa0:	9300      	str	r3, [sp, #0]
 8012fa2:	4623      	mov	r3, r4
 8012fa4:	f7fe feaa 	bl	8011cfc <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8012fa8:	88fb      	ldrh	r3, [r7, #6]
 8012faa:	3301      	adds	r3, #1
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	b218      	sxth	r0, r3
 8012fb0:	88bb      	ldrh	r3, [r7, #4]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	b219      	sxth	r1, r3
 8012fb8:	887b      	ldrh	r3, [r7, #2]
 8012fba:	3b02      	subs	r3, #2
 8012fbc:	b29b      	uxth	r3, r3
 8012fbe:	b21c      	sxth	r4, r3
 8012fc0:	88bb      	ldrh	r3, [r7, #4]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	b21d      	sxth	r5, r3
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	1c9a      	adds	r2, r3, #2
 8012fcc:	61ba      	str	r2, [r7, #24]
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	462b      	mov	r3, r5
 8012fd4:	4622      	mov	r2, r4
 8012fd6:	f7fe fe91 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8012fda:	88fb      	ldrh	r3, [r7, #6]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	b218      	sxth	r0, r3
 8012fe2:	88bb      	ldrh	r3, [r7, #4]
 8012fe4:	3302      	adds	r3, #2
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	b219      	sxth	r1, r3
 8012fea:	88fb      	ldrh	r3, [r7, #6]
 8012fec:	3301      	adds	r3, #1
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	b21c      	sxth	r4, r3
 8012ff2:	883b      	ldrh	r3, [r7, #0]
 8012ff4:	3b02      	subs	r3, #2
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	b21d      	sxth	r5, r3
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	1c9a      	adds	r2, r3, #2
 8012ffe:	61ba      	str	r2, [r7, #24]
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	462b      	mov	r3, r5
 8013006:	4622      	mov	r2, r4
 8013008:	f7fe fe78 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 801300c:	88fb      	ldrh	r3, [r7, #6]
 801300e:	3301      	adds	r3, #1
 8013010:	b29b      	uxth	r3, r3
 8013012:	b218      	sxth	r0, r3
 8013014:	883b      	ldrh	r3, [r7, #0]
 8013016:	3b01      	subs	r3, #1
 8013018:	b29b      	uxth	r3, r3
 801301a:	b219      	sxth	r1, r3
 801301c:	887b      	ldrh	r3, [r7, #2]
 801301e:	3b01      	subs	r3, #1
 8013020:	b29b      	uxth	r3, r3
 8013022:	b21c      	sxth	r4, r3
 8013024:	883b      	ldrh	r3, [r7, #0]
 8013026:	3b01      	subs	r3, #1
 8013028:	b29b      	uxth	r3, r3
 801302a:	b21d      	sxth	r5, r3
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	1c9a      	adds	r2, r3, #2
 8013030:	61ba      	str	r2, [r7, #24]
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	462b      	mov	r3, r5
 8013038:	4622      	mov	r2, r4
 801303a:	f7fe fe5f 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 801303e:	887b      	ldrh	r3, [r7, #2]
 8013040:	3b01      	subs	r3, #1
 8013042:	b29b      	uxth	r3, r3
 8013044:	b218      	sxth	r0, r3
 8013046:	88bb      	ldrh	r3, [r7, #4]
 8013048:	3301      	adds	r3, #1
 801304a:	b29b      	uxth	r3, r3
 801304c:	b219      	sxth	r1, r3
 801304e:	887b      	ldrh	r3, [r7, #2]
 8013050:	3b01      	subs	r3, #1
 8013052:	b29b      	uxth	r3, r3
 8013054:	b21c      	sxth	r4, r3
 8013056:	883b      	ldrh	r3, [r7, #0]
 8013058:	3b02      	subs	r3, #2
 801305a:	b29b      	uxth	r3, r3
 801305c:	b21d      	sxth	r5, r3
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	1c9a      	adds	r2, r3, #2
 8013062:	61ba      	str	r2, [r7, #24]
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	462b      	mov	r3, r5
 801306a:	4622      	mov	r2, r4
 801306c:	f7fe fe46 	bl	8011cfc <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8013070:	88fb      	ldrh	r3, [r7, #6]
 8013072:	3302      	adds	r3, #2
 8013074:	b29b      	uxth	r3, r3
 8013076:	b218      	sxth	r0, r3
 8013078:	88bb      	ldrh	r3, [r7, #4]
 801307a:	3302      	adds	r3, #2
 801307c:	b29b      	uxth	r3, r3
 801307e:	b219      	sxth	r1, r3
 8013080:	887b      	ldrh	r3, [r7, #2]
 8013082:	3b03      	subs	r3, #3
 8013084:	b29b      	uxth	r3, r3
 8013086:	b21c      	sxth	r4, r3
 8013088:	88bb      	ldrh	r3, [r7, #4]
 801308a:	3302      	adds	r3, #2
 801308c:	b29b      	uxth	r3, r3
 801308e:	b21d      	sxth	r5, r3
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	1c9a      	adds	r2, r3, #2
 8013094:	61ba      	str	r2, [r7, #24]
 8013096:	881b      	ldrh	r3, [r3, #0]
 8013098:	9300      	str	r3, [sp, #0]
 801309a:	462b      	mov	r3, r5
 801309c:	4622      	mov	r2, r4
 801309e:	f7fe fe2d 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80130a2:	88fb      	ldrh	r3, [r7, #6]
 80130a4:	3302      	adds	r3, #2
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	b218      	sxth	r0, r3
 80130aa:	88bb      	ldrh	r3, [r7, #4]
 80130ac:	3303      	adds	r3, #3
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	b219      	sxth	r1, r3
 80130b2:	88fb      	ldrh	r3, [r7, #6]
 80130b4:	3302      	adds	r3, #2
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	b21c      	sxth	r4, r3
 80130ba:	883b      	ldrh	r3, [r7, #0]
 80130bc:	3b03      	subs	r3, #3
 80130be:	b29b      	uxth	r3, r3
 80130c0:	b21d      	sxth	r5, r3
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	1c9a      	adds	r2, r3, #2
 80130c6:	61ba      	str	r2, [r7, #24]
 80130c8:	881b      	ldrh	r3, [r3, #0]
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	462b      	mov	r3, r5
 80130ce:	4622      	mov	r2, r4
 80130d0:	f7fe fe14 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80130d4:	88fb      	ldrh	r3, [r7, #6]
 80130d6:	3302      	adds	r3, #2
 80130d8:	b29b      	uxth	r3, r3
 80130da:	b218      	sxth	r0, r3
 80130dc:	883b      	ldrh	r3, [r7, #0]
 80130de:	3b02      	subs	r3, #2
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	b219      	sxth	r1, r3
 80130e4:	887b      	ldrh	r3, [r7, #2]
 80130e6:	3b02      	subs	r3, #2
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	b21c      	sxth	r4, r3
 80130ec:	883b      	ldrh	r3, [r7, #0]
 80130ee:	3b02      	subs	r3, #2
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	b21d      	sxth	r5, r3
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	1c9a      	adds	r2, r3, #2
 80130f8:	61ba      	str	r2, [r7, #24]
 80130fa:	881b      	ldrh	r3, [r3, #0]
 80130fc:	9300      	str	r3, [sp, #0]
 80130fe:	462b      	mov	r3, r5
 8013100:	4622      	mov	r2, r4
 8013102:	f7fe fdfb 	bl	8011cfc <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8013106:	887b      	ldrh	r3, [r7, #2]
 8013108:	3b02      	subs	r3, #2
 801310a:	b29b      	uxth	r3, r3
 801310c:	b218      	sxth	r0, r3
 801310e:	88bb      	ldrh	r3, [r7, #4]
 8013110:	3302      	adds	r3, #2
 8013112:	b29b      	uxth	r3, r3
 8013114:	b219      	sxth	r1, r3
 8013116:	887b      	ldrh	r3, [r7, #2]
 8013118:	3b02      	subs	r3, #2
 801311a:	b29b      	uxth	r3, r3
 801311c:	b21a      	sxth	r2, r3
 801311e:	883b      	ldrh	r3, [r7, #0]
 8013120:	3b03      	subs	r3, #3
 8013122:	b29b      	uxth	r3, r3
 8013124:	b21c      	sxth	r4, r3
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	881b      	ldrh	r3, [r3, #0]
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	4623      	mov	r3, r4
 801312e:	f7fe fde5 	bl	8011cfc <UG_DrawLine>
}
 8013132:	bf00      	nop
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801313c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 801313c:	b480      	push	{r7}
 801313e:	b083      	sub	sp, #12
 8013140:	af00      	add	r7, sp, #0
 8013142:	4603      	mov	r3, r0
 8013144:	6039      	str	r1, [r7, #0]
 8013146:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013148:	79fb      	ldrb	r3, [r7, #7]
 801314a:	2b03      	cmp	r3, #3
 801314c:	d810      	bhi.n	8013170 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 801314e:	4b0b      	ldr	r3, [pc, #44]	; (801317c <UG_DriverRegister+0x40>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	330a      	adds	r3, #10
 8013156:	00db      	lsls	r3, r3, #3
 8013158:	4413      	add	r3, r2
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 801315e:	4b07      	ldr	r3, [pc, #28]	; (801317c <UG_DriverRegister+0x40>)
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	79fb      	ldrb	r3, [r7, #7]
 8013164:	330a      	adds	r3, #10
 8013166:	00db      	lsls	r3, r3, #3
 8013168:	4413      	add	r3, r2
 801316a:	2203      	movs	r2, #3
 801316c:	721a      	strb	r2, [r3, #8]
 801316e:	e000      	b.n	8013172 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013170:	bf00      	nop
}
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr
 801317c:	20002090 	.word	0x20002090

08013180 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8013186:	4b5e      	ldr	r3, [pc, #376]	; (8013300 <UG_Update+0x180>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801318e:	f003 0301 	and.w	r3, r3, #1
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00a      	beq.n	80131ac <UG_Update+0x2c>
 8013196:	4b5a      	ldr	r3, [pc, #360]	; (8013300 <UG_Update+0x180>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801319e:	4b58      	ldr	r3, [pc, #352]	; (8013300 <UG_Update+0x180>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f022 0201 	bic.w	r2, r2, #1
 80131a6:	b2d2      	uxtb	r2, r2
 80131a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80131ac:	4b54      	ldr	r3, [pc, #336]	; (8013300 <UG_Update+0x180>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68da      	ldr	r2, [r3, #12]
 80131b2:	4b53      	ldr	r3, [pc, #332]	; (8013300 <UG_Update+0x180>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	691b      	ldr	r3, [r3, #16]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d071      	beq.n	80132a0 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80131bc:	4b50      	ldr	r3, [pc, #320]	; (8013300 <UG_Update+0x180>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	68db      	ldr	r3, [r3, #12]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d06c      	beq.n	80132a0 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80131c6:	4b4e      	ldr	r3, [pc, #312]	; (8013300 <UG_Update+0x180>)
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	4b4d      	ldr	r3, [pc, #308]	; (8013300 <UG_Update+0x180>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	6912      	ldr	r2, [r2, #16]
 80131d0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80131d2:	4b4b      	ldr	r3, [pc, #300]	; (8013300 <UG_Update+0x180>)
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	4b4a      	ldr	r3, [pc, #296]	; (8013300 <UG_Update+0x180>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	68d2      	ldr	r2, [r2, #12]
 80131dc:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80131de:	4b48      	ldr	r3, [pc, #288]	; (8013300 <UG_Update+0x180>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	695b      	ldr	r3, [r3, #20]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d045      	beq.n	8013274 <UG_Update+0xf4>
 80131e8:	4b45      	ldr	r3, [pc, #276]	; (8013300 <UG_Update+0x180>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	695b      	ldr	r3, [r3, #20]
 80131ee:	7d9b      	ldrb	r3, [r3, #22]
 80131f0:	f003 0302 	and.w	r3, r3, #2
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d03d      	beq.n	8013274 <UG_Update+0xf4>
 80131f8:	4b41      	ldr	r3, [pc, #260]	; (8013300 <UG_Update+0x180>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	695b      	ldr	r3, [r3, #20]
 80131fe:	7a1b      	ldrb	r3, [r3, #8]
 8013200:	f003 0308 	and.w	r3, r3, #8
 8013204:	2b00      	cmp	r3, #0
 8013206:	d035      	beq.n	8013274 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8013208:	4b3d      	ldr	r3, [pc, #244]	; (8013300 <UG_Update+0x180>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	695b      	ldr	r3, [r3, #20]
 801320e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8013212:	4b3b      	ldr	r3, [pc, #236]	; (8013300 <UG_Update+0x180>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	691b      	ldr	r3, [r3, #16]
 8013218:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801321c:	429a      	cmp	r2, r3
 801321e:	d123      	bne.n	8013268 <UG_Update+0xe8>
 8013220:	4b37      	ldr	r3, [pc, #220]	; (8013300 <UG_Update+0x180>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	695b      	ldr	r3, [r3, #20]
 8013226:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801322a:	4b35      	ldr	r3, [pc, #212]	; (8013300 <UG_Update+0x180>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	691b      	ldr	r3, [r3, #16]
 8013230:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013234:	429a      	cmp	r2, r3
 8013236:	d117      	bne.n	8013268 <UG_Update+0xe8>
 8013238:	4b31      	ldr	r3, [pc, #196]	; (8013300 <UG_Update+0x180>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	695b      	ldr	r3, [r3, #20]
 801323e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8013242:	4b2f      	ldr	r3, [pc, #188]	; (8013300 <UG_Update+0x180>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	691b      	ldr	r3, [r3, #16]
 8013248:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801324c:	429a      	cmp	r2, r3
 801324e:	d10b      	bne.n	8013268 <UG_Update+0xe8>
 8013250:	4b2b      	ldr	r3, [pc, #172]	; (8013300 <UG_Update+0x180>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	695b      	ldr	r3, [r3, #20]
 8013256:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801325a:	4b29      	ldr	r3, [pc, #164]	; (8013300 <UG_Update+0x180>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	691b      	ldr	r3, [r3, #16]
 8013260:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013264:	429a      	cmp	r2, r3
 8013266:	d005      	beq.n	8013274 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013268:	4b25      	ldr	r3, [pc, #148]	; (8013300 <UG_Update+0x180>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	695b      	ldr	r3, [r3, #20]
 801326e:	4618      	mov	r0, r3
 8013270:	f000 f848 	bl	8013304 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8013274:	4b22      	ldr	r3, [pc, #136]	; (8013300 <UG_Update+0x180>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	691b      	ldr	r3, [r3, #16]
 801327a:	7a1a      	ldrb	r2, [r3, #8]
 801327c:	4b20      	ldr	r3, [pc, #128]	; (8013300 <UG_Update+0x180>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	691b      	ldr	r3, [r3, #16]
 8013282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013286:	b2d2      	uxtb	r2, r2
 8013288:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 801328a:	4b1d      	ldr	r3, [pc, #116]	; (8013300 <UG_Update+0x180>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	7a1a      	ldrb	r2, [r3, #8]
 8013292:	4b1b      	ldr	r3, [pc, #108]	; (8013300 <UG_Update+0x180>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	691b      	ldr	r3, [r3, #16]
 8013298:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 801329c:	b2d2      	uxtb	r2, r2
 801329e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80132a0:	4b17      	ldr	r3, [pc, #92]	; (8013300 <UG_Update+0x180>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	691b      	ldr	r3, [r3, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d01b      	beq.n	80132e2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80132aa:	4b15      	ldr	r3, [pc, #84]	; (8013300 <UG_Update+0x180>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	7a1b      	ldrb	r3, [r3, #8]
 80132b6:	f003 0320 	and.w	r3, r3, #32
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d002      	beq.n	80132c4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 f8ca 	bl	8013458 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	7a1b      	ldrb	r3, [r3, #8]
 80132c8:	f003 0308 	and.w	r3, r3, #8
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d008      	beq.n	80132e2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7ff fb81 	bl	80129d8 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fc34 	bl	8012b44 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f7ff fc7b 	bl	8012bd8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80132e2:	4b07      	ldr	r3, [pc, #28]	; (8013300 <UG_Update+0x180>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d004      	beq.n	80132f8 <UG_Update+0x178>
     gui->device->flush();
 80132ee:	4b04      	ldr	r3, [pc, #16]	; (8013300 <UG_Update+0x180>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	4798      	blx	r3
   }
}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	20002090 	.word	0x20002090

08013304 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8013304:	b590      	push	{r4, r7, lr}
 8013306:	b08f      	sub	sp, #60	; 0x3c
 8013308:	af02      	add	r7, sp, #8
 801330a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	f000 809a 	beq.w	8013448 <_UG_WindowDrawTitle+0x144>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	7a1b      	ldrb	r3, [r3, #8]
 8013318:	f003 0302 	and.w	r3, r3, #2
 801331c:	2b00      	cmp	r3, #0
 801331e:	f000 8093 	beq.w	8013448 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	89db      	ldrh	r3, [r3, #14]
 8013326:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	8a1b      	ldrh	r3, [r3, #16]
 801332c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	8a5b      	ldrh	r3, [r3, #18]
 8013332:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	8a9b      	ldrh	r3, [r3, #20]
 8013338:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	7d9b      	ldrb	r3, [r3, #22]
 801333e:	f003 0301 	and.w	r3, r3, #1
 8013342:	2b00      	cmp	r3, #0
 8013344:	d00f      	beq.n	8013366 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013346:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013348:	3303      	adds	r3, #3
 801334a:	b29b      	uxth	r3, r3
 801334c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 801334e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013350:	3303      	adds	r3, #3
 8013352:	b29b      	uxth	r3, r3
 8013354:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013356:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013358:	3b03      	subs	r3, #3
 801335a:	b29b      	uxth	r3, r3
 801335c:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 801335e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013360:	3b03      	subs	r3, #3
 8013362:	b29b      	uxth	r3, r3
 8013364:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013366:	4b3b      	ldr	r3, [pc, #236]	; (8013454 <_UG_WindowDrawTitle+0x150>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	429a      	cmp	r2, r3
 8013370:	d106      	bne.n	8013380 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013376:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801337c:	83bb      	strh	r3, [r7, #28]
 801337e:	e005      	b.n	801338c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013384:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801338a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013392:	b29a      	uxth	r2, r3
 8013394:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013396:	4413      	add	r3, r2
 8013398:	b29b      	uxth	r3, r3
 801339a:	3b01      	subs	r3, #1
 801339c:	b29b      	uxth	r3, r3
 801339e:	b21c      	sxth	r4, r3
 80133a0:	8bfb      	ldrh	r3, [r7, #30]
 80133a2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80133a6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80133aa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	4623      	mov	r3, r4
 80133b2:	f7fe fb03 	bl	80119bc <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	69db      	ldr	r3, [r3, #28]
 80133c0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80133c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80133c4:	3303      	adds	r3, #3
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	b21b      	sxth	r3, r3
 80133ca:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80133cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133ce:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80133d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133d2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80133da:	b29a      	uxth	r2, r3
 80133dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133de:	4413      	add	r3, r2
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	3b01      	subs	r3, #1
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	b21b      	sxth	r3, r3
 80133e8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80133f0:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80133fa:	b21b      	sxth	r3, r3
 80133fc:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013404:	b21b      	sxth	r3, r3
 8013406:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013408:	f107 030c 	add.w	r3, r7, #12
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff fc2f 	bl	8012c70 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013418:	b29a      	uxth	r2, r3
 801341a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801341c:	4413      	add	r3, r2
 801341e:	b29b      	uxth	r3, r3
 8013420:	b219      	sxth	r1, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013428:	b29a      	uxth	r2, r3
 801342a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801342c:	4413      	add	r3, r2
 801342e:	b29b      	uxth	r3, r3
 8013430:	b21b      	sxth	r3, r3
 8013432:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013436:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801343a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801343e:	9400      	str	r4, [sp, #0]
 8013440:	f7fe fc5c 	bl	8011cfc <UG_DrawLine>
      return UG_RESULT_OK;
 8013444:	2300      	movs	r3, #0
 8013446:	e001      	b.n	801344c <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013448:	f04f 33ff 	mov.w	r3, #4294967295
}
 801344c:	4618      	mov	r0, r3
 801344e:	3734      	adds	r7, #52	; 0x34
 8013450:	46bd      	mov	sp, r7
 8013452:	bd90      	pop	{r4, r7, pc}
 8013454:	20002090 	.word	0x20002090

08013458 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013458:	b590      	push	{r4, r7, lr}
 801345a:	b089      	sub	sp, #36	; 0x24
 801345c:	af02      	add	r7, sp, #8
 801345e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	89db      	ldrh	r3, [r3, #14]
 8013464:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	8a1b      	ldrh	r3, [r3, #16]
 801346a:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	8a5b      	ldrh	r3, [r3, #18]
 8013470:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	8a9b      	ldrh	r3, [r3, #20]
 8013476:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	7a1b      	ldrb	r3, [r3, #8]
 801347c:	f023 0320 	bic.w	r3, r3, #32
 8013480:	b2da      	uxtb	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	7a1b      	ldrb	r3, [r3, #8]
 801348a:	f003 0308 	and.w	r3, r3, #8
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 8084 	beq.w	801359c <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	7d9b      	ldrb	r3, [r3, #22]
 8013498:	f003 0301 	and.w	r3, r3, #1
 801349c:	2b00      	cmp	r3, #0
 801349e:	d021      	beq.n	80134e4 <_UG_WindowUpdate+0x8c>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	7a1b      	ldrb	r3, [r3, #8]
 80134a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d11b      	bne.n	80134e4 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80134ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80134b0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80134b4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80134b8:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80134bc:	4c43      	ldr	r4, [pc, #268]	; (80135cc <_UG_WindowUpdate+0x174>)
 80134be:	9400      	str	r4, [sp, #0]
 80134c0:	f7ff fd1a 	bl	8012ef8 <_UG_DrawObjectFrame>
         xs+=3;
 80134c4:	8abb      	ldrh	r3, [r7, #20]
 80134c6:	3303      	adds	r3, #3
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80134cc:	8a7b      	ldrh	r3, [r7, #18]
 80134ce:	3303      	adds	r3, #3
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80134d4:	8a3b      	ldrh	r3, [r7, #16]
 80134d6:	3b03      	subs	r3, #3
 80134d8:	b29b      	uxth	r3, r3
 80134da:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80134dc:	89fb      	ldrh	r3, [r7, #14]
 80134de:	3b03      	subs	r3, #3
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	7d9b      	ldrb	r3, [r3, #22]
 80134e8:	f003 0302 	and.w	r3, r3, #2
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d01a      	beq.n	8013526 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7ff ff07 	bl	8013304 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	8a7b      	ldrh	r3, [r7, #18]
 8013500:	4413      	add	r3, r2
 8013502:	b29b      	uxth	r3, r3
 8013504:	3301      	adds	r3, #1
 8013506:	b29b      	uxth	r3, r3
 8013508:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	7a1b      	ldrb	r3, [r3, #8]
 801350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013512:	2b00      	cmp	r3, #0
 8013514:	d007      	beq.n	8013526 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	7a1b      	ldrb	r3, [r3, #8]
 801351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801351e:	b2da      	uxtb	r2, r3
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	721a      	strb	r2, [r3, #8]
            return;
 8013524:	e04e      	b.n	80135c4 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	899b      	ldrh	r3, [r3, #12]
 801352a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 801352e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013532:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013536:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 801353a:	9300      	str	r3, [sp, #0]
 801353c:	4623      	mov	r3, r4
 801353e:	f7fe fa3d 	bl	80119bc <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013548:	2300      	movs	r3, #0
 801354a:	82fb      	strh	r3, [r7, #22]
 801354c:	e021      	b.n	8013592 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	685a      	ldr	r2, [r3, #4]
 8013552:	8afb      	ldrh	r3, [r7, #22]
 8013554:	015b      	lsls	r3, r3, #5
 8013556:	4413      	add	r3, r2
 8013558:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	f003 0301 	and.w	r3, r3, #1
 8013562:	2b00      	cmp	r3, #0
 8013564:	d112      	bne.n	801358c <_UG_WindowUpdate+0x134>
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	f003 0302 	and.w	r3, r3, #2
 801356e:	2b00      	cmp	r3, #0
 8013570:	d00c      	beq.n	801358c <_UG_WindowUpdate+0x134>
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	f003 0308 	and.w	r3, r3, #8
 801357a:	2b00      	cmp	r3, #0
 801357c:	d006      	beq.n	801358c <_UG_WindowUpdate+0x134>
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013586:	b2da      	uxtb	r2, r3
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 801358c:	8afb      	ldrh	r3, [r7, #22]
 801358e:	3301      	adds	r3, #1
 8013590:	82fb      	strh	r3, [r7, #22]
 8013592:	8afa      	ldrh	r2, [r7, #22]
 8013594:	89bb      	ldrh	r3, [r7, #12]
 8013596:	429a      	cmp	r2, r3
 8013598:	d3d9      	bcc.n	801354e <_UG_WindowUpdate+0xf6>
 801359a:	e013      	b.n	80135c4 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80135b4:	4b06      	ldr	r3, [pc, #24]	; (80135d0 <_UG_WindowUpdate+0x178>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80135bc:	9300      	str	r3, [sp, #0]
 80135be:	4623      	mov	r3, r4
 80135c0:	f7fe f9fc 	bl	80119bc <UG_FillFrame>
   }
}
 80135c4:	371c      	adds	r7, #28
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd90      	pop	{r4, r7, pc}
 80135ca:	bf00      	nop
 80135cc:	0801cc84 	.word	0x0801cc84
 80135d0:	20002090 	.word	0x20002090

080135d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	460b      	mov	r3, r1
 80135de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80135e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80135e4:	f002 f8fc 	bl	80157e0 <USBD_static_malloc>
 80135e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d105      	bne.n	80135fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80135f8:	2302      	movs	r3, #2
 80135fa:	e066      	b.n	80136ca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	7c1b      	ldrb	r3, [r3, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d119      	bne.n	8013640 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801360c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013610:	2202      	movs	r2, #2
 8013612:	2181      	movs	r1, #129	; 0x81
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f001 ff8a 	bl	801552e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2201      	movs	r2, #1
 801361e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013624:	2202      	movs	r2, #2
 8013626:	2101      	movs	r1, #1
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f001 ff80 	bl	801552e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2201      	movs	r2, #1
 8013632:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2210      	movs	r2, #16
 801363a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801363e:	e016      	b.n	801366e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013640:	2340      	movs	r3, #64	; 0x40
 8013642:	2202      	movs	r2, #2
 8013644:	2181      	movs	r1, #129	; 0x81
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f001 ff71 	bl	801552e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2201      	movs	r2, #1
 8013650:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013652:	2340      	movs	r3, #64	; 0x40
 8013654:	2202      	movs	r2, #2
 8013656:	2101      	movs	r1, #1
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f001 ff68 	bl	801552e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2201      	movs	r2, #1
 8013662:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2210      	movs	r2, #16
 801366a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801366e:	2308      	movs	r3, #8
 8013670:	2203      	movs	r2, #3
 8013672:	2182      	movs	r1, #130	; 0x82
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f001 ff5a 	bl	801552e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2201      	movs	r2, #1
 801367e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2200      	movs	r2, #0
 8013690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	2200      	movs	r2, #0
 8013698:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7c1b      	ldrb	r3, [r3, #16]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d109      	bne.n	80136b8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80136aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136ae:	2101      	movs	r1, #1
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f002 f82b 	bl	801570c <USBD_LL_PrepareReceive>
 80136b6:	e007      	b.n	80136c8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80136be:	2340      	movs	r3, #64	; 0x40
 80136c0:	2101      	movs	r1, #1
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f002 f822 	bl	801570c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3710      	adds	r7, #16
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b082      	sub	sp, #8
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
 80136da:	460b      	mov	r3, r1
 80136dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80136de:	2181      	movs	r1, #129	; 0x81
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f001 ff4a 	bl	801557a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	2200      	movs	r2, #0
 80136ea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80136ec:	2101      	movs	r1, #1
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f001 ff43 	bl	801557a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80136fc:	2182      	movs	r1, #130	; 0x82
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f001 ff3b 	bl	801557a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2200      	movs	r2, #0
 8013708:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2200      	movs	r2, #0
 8013710:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801371a:	2b00      	cmp	r3, #0
 801371c:	d00e      	beq.n	801373c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801372e:	4618      	mov	r0, r3
 8013730:	f002 f864 	bl	80157fc <USBD_static_free>
    pdev->pClassData = NULL;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3708      	adds	r7, #8
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
	...

08013748 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b086      	sub	sp, #24
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013758:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801375a:	2300      	movs	r3, #0
 801375c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801375e:	2300      	movs	r3, #0
 8013760:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013762:	2300      	movs	r3, #0
 8013764:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d101      	bne.n	8013770 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801376c:	2303      	movs	r3, #3
 801376e:	e0af      	b.n	80138d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013778:	2b00      	cmp	r3, #0
 801377a:	d03f      	beq.n	80137fc <USBD_CDC_Setup+0xb4>
 801377c:	2b20      	cmp	r3, #32
 801377e:	f040 809f 	bne.w	80138c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	88db      	ldrh	r3, [r3, #6]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d02e      	beq.n	80137e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	b25b      	sxtb	r3, r3
 8013790:	2b00      	cmp	r3, #0
 8013792:	da16      	bge.n	80137c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801379a:	689b      	ldr	r3, [r3, #8]
 801379c:	683a      	ldr	r2, [r7, #0]
 801379e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80137a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80137a2:	683a      	ldr	r2, [r7, #0]
 80137a4:	88d2      	ldrh	r2, [r2, #6]
 80137a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	88db      	ldrh	r3, [r3, #6]
 80137ac:	2b07      	cmp	r3, #7
 80137ae:	bf28      	it	cs
 80137b0:	2307      	movcs	r3, #7
 80137b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	89fa      	ldrh	r2, [r7, #14]
 80137b8:	4619      	mov	r1, r3
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f001 facf 	bl	8014d5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80137c0:	e085      	b.n	80138ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	785a      	ldrb	r2, [r3, #1]
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	88db      	ldrh	r3, [r3, #6]
 80137d0:	b2da      	uxtb	r2, r3
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80137d8:	6939      	ldr	r1, [r7, #16]
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	88db      	ldrh	r3, [r3, #6]
 80137de:	461a      	mov	r2, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f001 fae8 	bl	8014db6 <USBD_CtlPrepareRx>
      break;
 80137e6:	e072      	b.n	80138ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137ee:	689b      	ldr	r3, [r3, #8]
 80137f0:	683a      	ldr	r2, [r7, #0]
 80137f2:	7850      	ldrb	r0, [r2, #1]
 80137f4:	2200      	movs	r2, #0
 80137f6:	6839      	ldr	r1, [r7, #0]
 80137f8:	4798      	blx	r3
      break;
 80137fa:	e068      	b.n	80138ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	785b      	ldrb	r3, [r3, #1]
 8013800:	2b0b      	cmp	r3, #11
 8013802:	d852      	bhi.n	80138aa <USBD_CDC_Setup+0x162>
 8013804:	a201      	add	r2, pc, #4	; (adr r2, 801380c <USBD_CDC_Setup+0xc4>)
 8013806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801380a:	bf00      	nop
 801380c:	0801383d 	.word	0x0801383d
 8013810:	080138b9 	.word	0x080138b9
 8013814:	080138ab 	.word	0x080138ab
 8013818:	080138ab 	.word	0x080138ab
 801381c:	080138ab 	.word	0x080138ab
 8013820:	080138ab 	.word	0x080138ab
 8013824:	080138ab 	.word	0x080138ab
 8013828:	080138ab 	.word	0x080138ab
 801382c:	080138ab 	.word	0x080138ab
 8013830:	080138ab 	.word	0x080138ab
 8013834:	08013867 	.word	0x08013867
 8013838:	08013891 	.word	0x08013891
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013842:	b2db      	uxtb	r3, r3
 8013844:	2b03      	cmp	r3, #3
 8013846:	d107      	bne.n	8013858 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013848:	f107 030a 	add.w	r3, r7, #10
 801384c:	2202      	movs	r2, #2
 801384e:	4619      	mov	r1, r3
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f001 fa84 	bl	8014d5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013856:	e032      	b.n	80138be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f001 fa0e 	bl	8014c7c <USBD_CtlError>
            ret = USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	75fb      	strb	r3, [r7, #23]
          break;
 8013864:	e02b      	b.n	80138be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801386c:	b2db      	uxtb	r3, r3
 801386e:	2b03      	cmp	r3, #3
 8013870:	d107      	bne.n	8013882 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013872:	f107 030d 	add.w	r3, r7, #13
 8013876:	2201      	movs	r2, #1
 8013878:	4619      	mov	r1, r3
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f001 fa6f 	bl	8014d5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013880:	e01d      	b.n	80138be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013882:	6839      	ldr	r1, [r7, #0]
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f001 f9f9 	bl	8014c7c <USBD_CtlError>
            ret = USBD_FAIL;
 801388a:	2303      	movs	r3, #3
 801388c:	75fb      	strb	r3, [r7, #23]
          break;
 801388e:	e016      	b.n	80138be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013896:	b2db      	uxtb	r3, r3
 8013898:	2b03      	cmp	r3, #3
 801389a:	d00f      	beq.n	80138bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f001 f9ec 	bl	8014c7c <USBD_CtlError>
            ret = USBD_FAIL;
 80138a4:	2303      	movs	r3, #3
 80138a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80138a8:	e008      	b.n	80138bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80138aa:	6839      	ldr	r1, [r7, #0]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f001 f9e5 	bl	8014c7c <USBD_CtlError>
          ret = USBD_FAIL;
 80138b2:	2303      	movs	r3, #3
 80138b4:	75fb      	strb	r3, [r7, #23]
          break;
 80138b6:	e002      	b.n	80138be <USBD_CDC_Setup+0x176>
          break;
 80138b8:	bf00      	nop
 80138ba:	e008      	b.n	80138ce <USBD_CDC_Setup+0x186>
          break;
 80138bc:	bf00      	nop
      }
      break;
 80138be:	e006      	b.n	80138ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f001 f9da 	bl	8014c7c <USBD_CtlError>
      ret = USBD_FAIL;
 80138c8:	2303      	movs	r3, #3
 80138ca:	75fb      	strb	r3, [r7, #23]
      break;
 80138cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80138ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3718      	adds	r7, #24
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	460b      	mov	r3, r1
 80138e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80138ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d101      	bne.n	80138fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80138f6:	2303      	movs	r3, #3
 80138f8:	e04f      	b.n	801399a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013900:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013902:	78fa      	ldrb	r2, [r7, #3]
 8013904:	6879      	ldr	r1, [r7, #4]
 8013906:	4613      	mov	r3, r2
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	4413      	add	r3, r2
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	440b      	add	r3, r1
 8013910:	3318      	adds	r3, #24
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d029      	beq.n	801396c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013918:	78fa      	ldrb	r2, [r7, #3]
 801391a:	6879      	ldr	r1, [r7, #4]
 801391c:	4613      	mov	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4413      	add	r3, r2
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	440b      	add	r3, r1
 8013926:	3318      	adds	r3, #24
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	78f9      	ldrb	r1, [r7, #3]
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	460b      	mov	r3, r1
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	440b      	add	r3, r1
 8013934:	00db      	lsls	r3, r3, #3
 8013936:	4403      	add	r3, r0
 8013938:	3320      	adds	r3, #32
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013940:	fb01 f303 	mul.w	r3, r1, r3
 8013944:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013946:	2b00      	cmp	r3, #0
 8013948:	d110      	bne.n	801396c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801394a:	78fa      	ldrb	r2, [r7, #3]
 801394c:	6879      	ldr	r1, [r7, #4]
 801394e:	4613      	mov	r3, r2
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	4413      	add	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	440b      	add	r3, r1
 8013958:	3318      	adds	r3, #24
 801395a:	2200      	movs	r2, #0
 801395c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801395e:	78f9      	ldrb	r1, [r7, #3]
 8013960:	2300      	movs	r3, #0
 8013962:	2200      	movs	r2, #0
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f001 feb0 	bl	80156ca <USBD_LL_Transmit>
 801396a:	e015      	b.n	8013998 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2200      	movs	r2, #0
 8013970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013986:	691b      	ldr	r3, [r3, #16]
 8013988:	68ba      	ldr	r2, [r7, #8]
 801398a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013994:	78fa      	ldrb	r2, [r7, #3]
 8013996:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013998:	2300      	movs	r3, #0
}
 801399a:	4618      	mov	r0, r3
 801399c:	3710      	adds	r7, #16
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}

080139a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80139a2:	b580      	push	{r7, lr}
 80139a4:	b084      	sub	sp, #16
 80139a6:	af00      	add	r7, sp, #0
 80139a8:	6078      	str	r0, [r7, #4]
 80139aa:	460b      	mov	r3, r1
 80139ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d101      	bne.n	80139c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80139c0:	2303      	movs	r3, #3
 80139c2:	e015      	b.n	80139f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80139c4:	78fb      	ldrb	r3, [r7, #3]
 80139c6:	4619      	mov	r1, r3
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f001 fec0 	bl	801574e <USBD_LL_GetRxDataSize>
 80139ce:	4602      	mov	r2, r0
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80139ea:	4611      	mov	r1, r2
 80139ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80139ee:	2300      	movs	r3, #0
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3710      	adds	r7, #16
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d101      	bne.n	8013a12 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013a0e:	2303      	movs	r3, #3
 8013a10:	e01b      	b.n	8013a4a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d015      	beq.n	8013a48 <USBD_CDC_EP0_RxReady+0x50>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013a22:	2bff      	cmp	r3, #255	; 0xff
 8013a24:	d010      	beq.n	8013a48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a2c:	689b      	ldr	r3, [r3, #8]
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013a34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013a3c:	b292      	uxth	r2, r2
 8013a3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	22ff      	movs	r2, #255	; 0xff
 8013a44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013a48:	2300      	movs	r3, #0
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3710      	adds	r7, #16
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
	...

08013a54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2243      	movs	r2, #67	; 0x43
 8013a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013a62:	4b03      	ldr	r3, [pc, #12]	; (8013a70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	370c      	adds	r7, #12
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr
 8013a70:	20000288 	.word	0x20000288

08013a74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2243      	movs	r2, #67	; 0x43
 8013a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013a82:	4b03      	ldr	r3, [pc, #12]	; (8013a90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr
 8013a90:	20000244 	.word	0x20000244

08013a94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2243      	movs	r2, #67	; 0x43
 8013aa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8013aa2:	4b03      	ldr	r3, [pc, #12]	; (8013ab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	200002cc 	.word	0x200002cc

08013ab4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	220a      	movs	r2, #10
 8013ac0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013ac2:	4b03      	ldr	r3, [pc, #12]	; (8013ad0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr
 8013ad0:	20000200 	.word	0x20000200

08013ad4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013ae4:	2303      	movs	r3, #3
 8013ae6:	e004      	b.n	8013af2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	683a      	ldr	r2, [r7, #0]
 8013aec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	370c      	adds	r7, #12
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013afe:	b480      	push	{r7}
 8013b00:	b087      	sub	sp, #28
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	60f8      	str	r0, [r7, #12]
 8013b06:	60b9      	str	r1, [r7, #8]
 8013b08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d101      	bne.n	8013b1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013b18:	2303      	movs	r3, #3
 8013b1a:	e008      	b.n	8013b2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	371c      	adds	r7, #28
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013b3a:	b480      	push	{r7}
 8013b3c:	b085      	sub	sp, #20
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013b52:	2303      	movs	r3, #3
 8013b54:	e004      	b.n	8013b60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	683a      	ldr	r2, [r7, #0]
 8013b5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013b5e:	2300      	movs	r3, #0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3714      	adds	r7, #20
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr

08013b6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b7a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d101      	bne.n	8013b8e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013b8a:	2303      	movs	r3, #3
 8013b8c:	e01a      	b.n	8013bc4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d114      	bne.n	8013bc2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013bb6:	2181      	movs	r1, #129	; 0x81
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f001 fd86 	bl	80156ca <USBD_LL_Transmit>

    ret = USBD_OK;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d101      	bne.n	8013bea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013be6:	2303      	movs	r3, #3
 8013be8:	e016      	b.n	8013c18 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	7c1b      	ldrb	r3, [r3, #16]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d109      	bne.n	8013c06 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013bfc:	2101      	movs	r1, #1
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f001 fd84 	bl	801570c <USBD_LL_PrepareReceive>
 8013c04:	e007      	b.n	8013c16 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c0c:	2340      	movs	r3, #64	; 0x40
 8013c0e:	2101      	movs	r1, #1
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f001 fd7b 	bl	801570c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013c16:	2300      	movs	r3, #0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b086      	sub	sp, #24
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	60b9      	str	r1, [r7, #8]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d101      	bne.n	8013c38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013c34:	2303      	movs	r3, #3
 8013c36:	e01f      	b.n	8013c78 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2200      	movs	r2, #0
 8013c44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d003      	beq.n	8013c5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	68ba      	ldr	r2, [r7, #8]
 8013c5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	2201      	movs	r2, #1
 8013c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	79fa      	ldrb	r2, [r7, #7]
 8013c6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013c6c:	68f8      	ldr	r0, [r7, #12]
 8013c6e:	f001 fbe3 	bl	8015438 <USBD_LL_Init>
 8013c72:	4603      	mov	r3, r0
 8013c74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3718      	adds	r7, #24
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d101      	bne.n	8013c98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013c94:	2303      	movs	r3, #3
 8013c96:	e016      	b.n	8013cc6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	683a      	ldr	r2, [r7, #0]
 8013c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d00b      	beq.n	8013cc4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb4:	f107 020e 	add.w	r2, r7, #14
 8013cb8:	4610      	mov	r0, r2
 8013cba:	4798      	blx	r3
 8013cbc:	4602      	mov	r2, r0
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013cc4:	2300      	movs	r3, #0
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3710      	adds	r7, #16
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b082      	sub	sp, #8
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f001 fc0e 	bl	80154f8 <USBD_LL_Start>
 8013cdc:	4603      	mov	r3, r0
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3708      	adds	r7, #8
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}

08013ce6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013ce6:	b480      	push	{r7}
 8013ce8:	b083      	sub	sp, #12
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013cee:	2300      	movs	r3, #0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	370c      	adds	r7, #12
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr

08013cfc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	460b      	mov	r3, r1
 8013d06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013d08:	2303      	movs	r3, #3
 8013d0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d009      	beq.n	8013d2a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	78fa      	ldrb	r2, [r7, #3]
 8013d20:	4611      	mov	r1, r2
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	4798      	blx	r3
 8013d26:	4603      	mov	r3, r0
 8013d28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3710      	adds	r7, #16
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d007      	beq.n	8013d5a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	78fa      	ldrb	r2, [r7, #3]
 8013d54:	4611      	mov	r1, r2
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	4798      	blx	r3
  }

  return USBD_OK;
 8013d5a:	2300      	movs	r3, #0
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d74:	6839      	ldr	r1, [r7, #0]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 ff46 	bl	8014c08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d98:	f003 031f 	and.w	r3, r3, #31
 8013d9c:	2b02      	cmp	r3, #2
 8013d9e:	d01a      	beq.n	8013dd6 <USBD_LL_SetupStage+0x72>
 8013da0:	2b02      	cmp	r3, #2
 8013da2:	d822      	bhi.n	8013dea <USBD_LL_SetupStage+0x86>
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d002      	beq.n	8013dae <USBD_LL_SetupStage+0x4a>
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	d00a      	beq.n	8013dc2 <USBD_LL_SetupStage+0x5e>
 8013dac:	e01d      	b.n	8013dea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013db4:	4619      	mov	r1, r3
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f000 f9ee 	bl	8014198 <USBD_StdDevReq>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8013dc0:	e020      	b.n	8013e04 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013dc8:	4619      	mov	r1, r3
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 fa52 	bl	8014274 <USBD_StdItfReq>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8013dd4:	e016      	b.n	8013e04 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ddc:	4619      	mov	r1, r3
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f000 fa91 	bl	8014306 <USBD_StdEPReq>
 8013de4:	4603      	mov	r3, r0
 8013de6:	73fb      	strb	r3, [r7, #15]
      break;
 8013de8:	e00c      	b.n	8013e04 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013df0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	4619      	mov	r1, r3
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f001 fbdd 	bl	80155b8 <USBD_LL_StallEP>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	73fb      	strb	r3, [r7, #15]
      break;
 8013e02:	bf00      	nop
  }

  return ret;
 8013e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3710      	adds	r7, #16
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b086      	sub	sp, #24
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	60f8      	str	r0, [r7, #12]
 8013e16:	460b      	mov	r3, r1
 8013e18:	607a      	str	r2, [r7, #4]
 8013e1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013e1c:	7afb      	ldrb	r3, [r7, #11]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d138      	bne.n	8013e94 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013e28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e30:	2b03      	cmp	r3, #3
 8013e32:	d14a      	bne.n	8013eca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	689a      	ldr	r2, [r3, #8]
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d913      	bls.n	8013e68 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	689a      	ldr	r2, [r3, #8]
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	1ad2      	subs	r2, r2, r3
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	68da      	ldr	r2, [r3, #12]
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	689b      	ldr	r3, [r3, #8]
 8013e56:	4293      	cmp	r3, r2
 8013e58:	bf28      	it	cs
 8013e5a:	4613      	movcs	r3, r2
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	6879      	ldr	r1, [r7, #4]
 8013e60:	68f8      	ldr	r0, [r7, #12]
 8013e62:	f000 ffc5 	bl	8014df0 <USBD_CtlContinueRx>
 8013e66:	e030      	b.n	8013eca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b03      	cmp	r3, #3
 8013e72:	d10b      	bne.n	8013e8c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e7a:	691b      	ldr	r3, [r3, #16]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d005      	beq.n	8013e8c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e86:	691b      	ldr	r3, [r3, #16]
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013e8c:	68f8      	ldr	r0, [r7, #12]
 8013e8e:	f000 ffc0 	bl	8014e12 <USBD_CtlSendStatus>
 8013e92:	e01a      	b.n	8013eca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	2b03      	cmp	r3, #3
 8013e9e:	d114      	bne.n	8013eca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ea6:	699b      	ldr	r3, [r3, #24]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d00e      	beq.n	8013eca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eb2:	699b      	ldr	r3, [r3, #24]
 8013eb4:	7afa      	ldrb	r2, [r7, #11]
 8013eb6:	4611      	mov	r1, r2
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	4798      	blx	r3
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013ec0:	7dfb      	ldrb	r3, [r7, #23]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d001      	beq.n	8013eca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013ec6:	7dfb      	ldrb	r3, [r7, #23]
 8013ec8:	e000      	b.n	8013ecc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3718      	adds	r7, #24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	460b      	mov	r3, r1
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013ee2:	7afb      	ldrb	r3, [r7, #11]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d16b      	bne.n	8013fc0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	3314      	adds	r3, #20
 8013eec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	d156      	bne.n	8013fa6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	689a      	ldr	r2, [r3, #8]
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d914      	bls.n	8013f2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	689a      	ldr	r2, [r3, #8]
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	1ad2      	subs	r2, r2, r3
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	689b      	ldr	r3, [r3, #8]
 8013f16:	461a      	mov	r2, r3
 8013f18:	6879      	ldr	r1, [r7, #4]
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f000 ff3a 	bl	8014d94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f20:	2300      	movs	r3, #0
 8013f22:	2200      	movs	r2, #0
 8013f24:	2100      	movs	r1, #0
 8013f26:	68f8      	ldr	r0, [r7, #12]
 8013f28:	f001 fbf0 	bl	801570c <USBD_LL_PrepareReceive>
 8013f2c:	e03b      	b.n	8013fa6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	68da      	ldr	r2, [r3, #12]
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	689b      	ldr	r3, [r3, #8]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d11c      	bne.n	8013f74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d316      	bcc.n	8013f74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d20f      	bcs.n	8013f74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013f54:	2200      	movs	r2, #0
 8013f56:	2100      	movs	r1, #0
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f000 ff1b 	bl	8014d94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	2200      	movs	r2, #0
 8013f62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f66:	2300      	movs	r3, #0
 8013f68:	2200      	movs	r2, #0
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f001 fbcd 	bl	801570c <USBD_LL_PrepareReceive>
 8013f72:	e018      	b.n	8013fa6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	2b03      	cmp	r3, #3
 8013f7e:	d10b      	bne.n	8013f98 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d005      	beq.n	8013f98 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f92:	68db      	ldr	r3, [r3, #12]
 8013f94:	68f8      	ldr	r0, [r7, #12]
 8013f96:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f98:	2180      	movs	r1, #128	; 0x80
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f001 fb0c 	bl	80155b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f000 ff49 	bl	8014e38 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d122      	bne.n	8013ff6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f7ff fe98 	bl	8013ce6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013fbe:	e01a      	b.n	8013ff6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	2b03      	cmp	r3, #3
 8013fca:	d114      	bne.n	8013ff6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fd2:	695b      	ldr	r3, [r3, #20]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d00e      	beq.n	8013ff6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fde:	695b      	ldr	r3, [r3, #20]
 8013fe0:	7afa      	ldrb	r2, [r7, #11]
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	4798      	blx	r3
 8013fe8:	4603      	mov	r3, r0
 8013fea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013ff2:	7dfb      	ldrb	r3, [r7, #23]
 8013ff4:	e000      	b.n	8013ff8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3718      	adds	r7, #24
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2201      	movs	r2, #1
 801400c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2200      	movs	r2, #0
 8014022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801402c:	2b00      	cmp	r3, #0
 801402e:	d101      	bne.n	8014034 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014030:	2303      	movs	r3, #3
 8014032:	e02f      	b.n	8014094 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801403a:	2b00      	cmp	r3, #0
 801403c:	d00f      	beq.n	801405e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d009      	beq.n	801405e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	6852      	ldr	r2, [r2, #4]
 8014056:	b2d2      	uxtb	r2, r2
 8014058:	4611      	mov	r1, r2
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801405e:	2340      	movs	r3, #64	; 0x40
 8014060:	2200      	movs	r2, #0
 8014062:	2100      	movs	r1, #0
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f001 fa62 	bl	801552e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2201      	movs	r2, #1
 801406e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2240      	movs	r2, #64	; 0x40
 8014076:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801407a:	2340      	movs	r3, #64	; 0x40
 801407c:	2200      	movs	r2, #0
 801407e:	2180      	movs	r1, #128	; 0x80
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f001 fa54 	bl	801552e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2201      	movs	r2, #1
 801408a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2240      	movs	r2, #64	; 0x40
 8014090:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014092:	2300      	movs	r3, #0
}
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801409c:	b480      	push	{r7}
 801409e:	b083      	sub	sp, #12
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	460b      	mov	r3, r1
 80140a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	78fa      	ldrb	r2, [r7, #3]
 80140ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80140ae:	2300      	movs	r3, #0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	370c      	adds	r7, #12
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140ca:	b2da      	uxtb	r2, r3
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2204      	movs	r2, #4
 80140d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	370c      	adds	r7, #12
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr

080140e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b083      	sub	sp, #12
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	2b04      	cmp	r3, #4
 80140fa:	d106      	bne.n	801410a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014102:	b2da      	uxtb	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801410a:	2300      	movs	r3, #0
}
 801410c:	4618      	mov	r0, r3
 801410e:	370c      	adds	r7, #12
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr

08014118 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014126:	2b00      	cmp	r3, #0
 8014128:	d101      	bne.n	801412e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801412a:	2303      	movs	r3, #3
 801412c:	e012      	b.n	8014154 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014134:	b2db      	uxtb	r3, r3
 8014136:	2b03      	cmp	r3, #3
 8014138:	d10b      	bne.n	8014152 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014140:	69db      	ldr	r3, [r3, #28]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d005      	beq.n	8014152 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801414c:	69db      	ldr	r3, [r3, #28]
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801415c:	b480      	push	{r7}
 801415e:	b087      	sub	sp, #28
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	3301      	adds	r3, #1
 8014172:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801417a:	8a3b      	ldrh	r3, [r7, #16]
 801417c:	021b      	lsls	r3, r3, #8
 801417e:	b21a      	sxth	r2, r3
 8014180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014184:	4313      	orrs	r3, r2
 8014186:	b21b      	sxth	r3, r3
 8014188:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801418a:	89fb      	ldrh	r3, [r7, #14]
}
 801418c:	4618      	mov	r0, r3
 801418e:	371c      	adds	r7, #28
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr

08014198 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b084      	sub	sp, #16
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141a2:	2300      	movs	r3, #0
 80141a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141ae:	2b40      	cmp	r3, #64	; 0x40
 80141b0:	d005      	beq.n	80141be <USBD_StdDevReq+0x26>
 80141b2:	2b40      	cmp	r3, #64	; 0x40
 80141b4:	d853      	bhi.n	801425e <USBD_StdDevReq+0xc6>
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00b      	beq.n	80141d2 <USBD_StdDevReq+0x3a>
 80141ba:	2b20      	cmp	r3, #32
 80141bc:	d14f      	bne.n	801425e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141c4:	689b      	ldr	r3, [r3, #8]
 80141c6:	6839      	ldr	r1, [r7, #0]
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	4798      	blx	r3
 80141cc:	4603      	mov	r3, r0
 80141ce:	73fb      	strb	r3, [r7, #15]
      break;
 80141d0:	e04a      	b.n	8014268 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	785b      	ldrb	r3, [r3, #1]
 80141d6:	2b09      	cmp	r3, #9
 80141d8:	d83b      	bhi.n	8014252 <USBD_StdDevReq+0xba>
 80141da:	a201      	add	r2, pc, #4	; (adr r2, 80141e0 <USBD_StdDevReq+0x48>)
 80141dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e0:	08014235 	.word	0x08014235
 80141e4:	08014249 	.word	0x08014249
 80141e8:	08014253 	.word	0x08014253
 80141ec:	0801423f 	.word	0x0801423f
 80141f0:	08014253 	.word	0x08014253
 80141f4:	08014213 	.word	0x08014213
 80141f8:	08014209 	.word	0x08014209
 80141fc:	08014253 	.word	0x08014253
 8014200:	0801422b 	.word	0x0801422b
 8014204:	0801421d 	.word	0x0801421d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 f9de 	bl	80145cc <USBD_GetDescriptor>
          break;
 8014210:	e024      	b.n	801425c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014212:	6839      	ldr	r1, [r7, #0]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fb6d 	bl	80148f4 <USBD_SetAddress>
          break;
 801421a:	e01f      	b.n	801425c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fbac 	bl	801497c <USBD_SetConfig>
 8014224:	4603      	mov	r3, r0
 8014226:	73fb      	strb	r3, [r7, #15]
          break;
 8014228:	e018      	b.n	801425c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801422a:	6839      	ldr	r1, [r7, #0]
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f000 fc4b 	bl	8014ac8 <USBD_GetConfig>
          break;
 8014232:	e013      	b.n	801425c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014234:	6839      	ldr	r1, [r7, #0]
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 fc7c 	bl	8014b34 <USBD_GetStatus>
          break;
 801423c:	e00e      	b.n	801425c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801423e:	6839      	ldr	r1, [r7, #0]
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 fcab 	bl	8014b9c <USBD_SetFeature>
          break;
 8014246:	e009      	b.n	801425c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f000 fcba 	bl	8014bc4 <USBD_ClrFeature>
          break;
 8014250:	e004      	b.n	801425c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014252:	6839      	ldr	r1, [r7, #0]
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f000 fd11 	bl	8014c7c <USBD_CtlError>
          break;
 801425a:	bf00      	nop
      }
      break;
 801425c:	e004      	b.n	8014268 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801425e:	6839      	ldr	r1, [r7, #0]
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f000 fd0b 	bl	8014c7c <USBD_CtlError>
      break;
 8014266:	bf00      	nop
  }

  return ret;
 8014268:	7bfb      	ldrb	r3, [r7, #15]
}
 801426a:	4618      	mov	r0, r3
 801426c:	3710      	adds	r7, #16
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop

08014274 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b084      	sub	sp, #16
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801427e:	2300      	movs	r3, #0
 8014280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801428a:	2b40      	cmp	r3, #64	; 0x40
 801428c:	d005      	beq.n	801429a <USBD_StdItfReq+0x26>
 801428e:	2b40      	cmp	r3, #64	; 0x40
 8014290:	d82f      	bhi.n	80142f2 <USBD_StdItfReq+0x7e>
 8014292:	2b00      	cmp	r3, #0
 8014294:	d001      	beq.n	801429a <USBD_StdItfReq+0x26>
 8014296:	2b20      	cmp	r3, #32
 8014298:	d12b      	bne.n	80142f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142a0:	b2db      	uxtb	r3, r3
 80142a2:	3b01      	subs	r3, #1
 80142a4:	2b02      	cmp	r3, #2
 80142a6:	d81d      	bhi.n	80142e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	889b      	ldrh	r3, [r3, #4]
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d813      	bhi.n	80142da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142b8:	689b      	ldr	r3, [r3, #8]
 80142ba:	6839      	ldr	r1, [r7, #0]
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	4798      	blx	r3
 80142c0:	4603      	mov	r3, r0
 80142c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	88db      	ldrh	r3, [r3, #6]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d110      	bne.n	80142ee <USBD_StdItfReq+0x7a>
 80142cc:	7bfb      	ldrb	r3, [r7, #15]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d10d      	bne.n	80142ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 fd9d 	bl	8014e12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80142d8:	e009      	b.n	80142ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80142da:	6839      	ldr	r1, [r7, #0]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 fccd 	bl	8014c7c <USBD_CtlError>
          break;
 80142e2:	e004      	b.n	80142ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80142e4:	6839      	ldr	r1, [r7, #0]
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f000 fcc8 	bl	8014c7c <USBD_CtlError>
          break;
 80142ec:	e000      	b.n	80142f0 <USBD_StdItfReq+0x7c>
          break;
 80142ee:	bf00      	nop
      }
      break;
 80142f0:	e004      	b.n	80142fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f000 fcc1 	bl	8014c7c <USBD_CtlError>
      break;
 80142fa:	bf00      	nop
  }

  return ret;
 80142fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}

08014306 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014306:	b580      	push	{r7, lr}
 8014308:	b084      	sub	sp, #16
 801430a:	af00      	add	r7, sp, #0
 801430c:	6078      	str	r0, [r7, #4]
 801430e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014310:	2300      	movs	r3, #0
 8014312:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	889b      	ldrh	r3, [r3, #4]
 8014318:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014322:	2b40      	cmp	r3, #64	; 0x40
 8014324:	d007      	beq.n	8014336 <USBD_StdEPReq+0x30>
 8014326:	2b40      	cmp	r3, #64	; 0x40
 8014328:	f200 8145 	bhi.w	80145b6 <USBD_StdEPReq+0x2b0>
 801432c:	2b00      	cmp	r3, #0
 801432e:	d00c      	beq.n	801434a <USBD_StdEPReq+0x44>
 8014330:	2b20      	cmp	r3, #32
 8014332:	f040 8140 	bne.w	80145b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801433c:	689b      	ldr	r3, [r3, #8]
 801433e:	6839      	ldr	r1, [r7, #0]
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	4798      	blx	r3
 8014344:	4603      	mov	r3, r0
 8014346:	73fb      	strb	r3, [r7, #15]
      break;
 8014348:	e13a      	b.n	80145c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	785b      	ldrb	r3, [r3, #1]
 801434e:	2b03      	cmp	r3, #3
 8014350:	d007      	beq.n	8014362 <USBD_StdEPReq+0x5c>
 8014352:	2b03      	cmp	r3, #3
 8014354:	f300 8129 	bgt.w	80145aa <USBD_StdEPReq+0x2a4>
 8014358:	2b00      	cmp	r3, #0
 801435a:	d07f      	beq.n	801445c <USBD_StdEPReq+0x156>
 801435c:	2b01      	cmp	r3, #1
 801435e:	d03c      	beq.n	80143da <USBD_StdEPReq+0xd4>
 8014360:	e123      	b.n	80145aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014368:	b2db      	uxtb	r3, r3
 801436a:	2b02      	cmp	r3, #2
 801436c:	d002      	beq.n	8014374 <USBD_StdEPReq+0x6e>
 801436e:	2b03      	cmp	r3, #3
 8014370:	d016      	beq.n	80143a0 <USBD_StdEPReq+0x9a>
 8014372:	e02c      	b.n	80143ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d00d      	beq.n	8014396 <USBD_StdEPReq+0x90>
 801437a:	7bbb      	ldrb	r3, [r7, #14]
 801437c:	2b80      	cmp	r3, #128	; 0x80
 801437e:	d00a      	beq.n	8014396 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014380:	7bbb      	ldrb	r3, [r7, #14]
 8014382:	4619      	mov	r1, r3
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f001 f917 	bl	80155b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801438a:	2180      	movs	r1, #128	; 0x80
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f001 f913 	bl	80155b8 <USBD_LL_StallEP>
 8014392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014394:	e020      	b.n	80143d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014396:	6839      	ldr	r1, [r7, #0]
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f000 fc6f 	bl	8014c7c <USBD_CtlError>
              break;
 801439e:	e01b      	b.n	80143d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	885b      	ldrh	r3, [r3, #2]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d10e      	bne.n	80143c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80143a8:	7bbb      	ldrb	r3, [r7, #14]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d00b      	beq.n	80143c6 <USBD_StdEPReq+0xc0>
 80143ae:	7bbb      	ldrb	r3, [r7, #14]
 80143b0:	2b80      	cmp	r3, #128	; 0x80
 80143b2:	d008      	beq.n	80143c6 <USBD_StdEPReq+0xc0>
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	88db      	ldrh	r3, [r3, #6]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d104      	bne.n	80143c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80143bc:	7bbb      	ldrb	r3, [r7, #14]
 80143be:	4619      	mov	r1, r3
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f001 f8f9 	bl	80155b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 fd23 	bl	8014e12 <USBD_CtlSendStatus>

              break;
 80143cc:	e004      	b.n	80143d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80143ce:	6839      	ldr	r1, [r7, #0]
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f000 fc53 	bl	8014c7c <USBD_CtlError>
              break;
 80143d6:	bf00      	nop
          }
          break;
 80143d8:	e0ec      	b.n	80145b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143e0:	b2db      	uxtb	r3, r3
 80143e2:	2b02      	cmp	r3, #2
 80143e4:	d002      	beq.n	80143ec <USBD_StdEPReq+0xe6>
 80143e6:	2b03      	cmp	r3, #3
 80143e8:	d016      	beq.n	8014418 <USBD_StdEPReq+0x112>
 80143ea:	e030      	b.n	801444e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143ec:	7bbb      	ldrb	r3, [r7, #14]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d00d      	beq.n	801440e <USBD_StdEPReq+0x108>
 80143f2:	7bbb      	ldrb	r3, [r7, #14]
 80143f4:	2b80      	cmp	r3, #128	; 0x80
 80143f6:	d00a      	beq.n	801440e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80143f8:	7bbb      	ldrb	r3, [r7, #14]
 80143fa:	4619      	mov	r1, r3
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f001 f8db 	bl	80155b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014402:	2180      	movs	r1, #128	; 0x80
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f001 f8d7 	bl	80155b8 <USBD_LL_StallEP>
 801440a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801440c:	e025      	b.n	801445a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801440e:	6839      	ldr	r1, [r7, #0]
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f000 fc33 	bl	8014c7c <USBD_CtlError>
              break;
 8014416:	e020      	b.n	801445a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	885b      	ldrh	r3, [r3, #2]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d11b      	bne.n	8014458 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014420:	7bbb      	ldrb	r3, [r7, #14]
 8014422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014426:	2b00      	cmp	r3, #0
 8014428:	d004      	beq.n	8014434 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801442a:	7bbb      	ldrb	r3, [r7, #14]
 801442c:	4619      	mov	r1, r3
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f001 f8e1 	bl	80155f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f000 fcec 	bl	8014e12 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014440:	689b      	ldr	r3, [r3, #8]
 8014442:	6839      	ldr	r1, [r7, #0]
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	4798      	blx	r3
 8014448:	4603      	mov	r3, r0
 801444a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801444c:	e004      	b.n	8014458 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801444e:	6839      	ldr	r1, [r7, #0]
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f000 fc13 	bl	8014c7c <USBD_CtlError>
              break;
 8014456:	e000      	b.n	801445a <USBD_StdEPReq+0x154>
              break;
 8014458:	bf00      	nop
          }
          break;
 801445a:	e0ab      	b.n	80145b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014462:	b2db      	uxtb	r3, r3
 8014464:	2b02      	cmp	r3, #2
 8014466:	d002      	beq.n	801446e <USBD_StdEPReq+0x168>
 8014468:	2b03      	cmp	r3, #3
 801446a:	d032      	beq.n	80144d2 <USBD_StdEPReq+0x1cc>
 801446c:	e097      	b.n	801459e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801446e:	7bbb      	ldrb	r3, [r7, #14]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d007      	beq.n	8014484 <USBD_StdEPReq+0x17e>
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	2b80      	cmp	r3, #128	; 0x80
 8014478:	d004      	beq.n	8014484 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801447a:	6839      	ldr	r1, [r7, #0]
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 fbfd 	bl	8014c7c <USBD_CtlError>
                break;
 8014482:	e091      	b.n	80145a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014488:	2b00      	cmp	r3, #0
 801448a:	da0b      	bge.n	80144a4 <USBD_StdEPReq+0x19e>
 801448c:	7bbb      	ldrb	r3, [r7, #14]
 801448e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014492:	4613      	mov	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4413      	add	r3, r2
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	3310      	adds	r3, #16
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	4413      	add	r3, r2
 80144a0:	3304      	adds	r3, #4
 80144a2:	e00b      	b.n	80144bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144a4:	7bbb      	ldrb	r3, [r7, #14]
 80144a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144aa:	4613      	mov	r3, r2
 80144ac:	009b      	lsls	r3, r3, #2
 80144ae:	4413      	add	r3, r2
 80144b0:	009b      	lsls	r3, r3, #2
 80144b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	4413      	add	r3, r2
 80144ba:	3304      	adds	r3, #4
 80144bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	2200      	movs	r2, #0
 80144c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	2202      	movs	r2, #2
 80144c8:	4619      	mov	r1, r3
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f000 fc47 	bl	8014d5e <USBD_CtlSendData>
              break;
 80144d0:	e06a      	b.n	80145a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80144d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	da11      	bge.n	80144fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80144da:	7bbb      	ldrb	r3, [r7, #14]
 80144dc:	f003 020f 	and.w	r2, r3, #15
 80144e0:	6879      	ldr	r1, [r7, #4]
 80144e2:	4613      	mov	r3, r2
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	4413      	add	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	440b      	add	r3, r1
 80144ec:	3324      	adds	r3, #36	; 0x24
 80144ee:	881b      	ldrh	r3, [r3, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d117      	bne.n	8014524 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80144f4:	6839      	ldr	r1, [r7, #0]
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 fbc0 	bl	8014c7c <USBD_CtlError>
                  break;
 80144fc:	e054      	b.n	80145a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80144fe:	7bbb      	ldrb	r3, [r7, #14]
 8014500:	f003 020f 	and.w	r2, r3, #15
 8014504:	6879      	ldr	r1, [r7, #4]
 8014506:	4613      	mov	r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	4413      	add	r3, r2
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	440b      	add	r3, r1
 8014510:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d104      	bne.n	8014524 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801451a:	6839      	ldr	r1, [r7, #0]
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 fbad 	bl	8014c7c <USBD_CtlError>
                  break;
 8014522:	e041      	b.n	80145a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014528:	2b00      	cmp	r3, #0
 801452a:	da0b      	bge.n	8014544 <USBD_StdEPReq+0x23e>
 801452c:	7bbb      	ldrb	r3, [r7, #14]
 801452e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014532:	4613      	mov	r3, r2
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4413      	add	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	3310      	adds	r3, #16
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	4413      	add	r3, r2
 8014540:	3304      	adds	r3, #4
 8014542:	e00b      	b.n	801455c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014544:	7bbb      	ldrb	r3, [r7, #14]
 8014546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801454a:	4613      	mov	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4413      	add	r3, r2
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	4413      	add	r3, r2
 801455a:	3304      	adds	r3, #4
 801455c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801455e:	7bbb      	ldrb	r3, [r7, #14]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d002      	beq.n	801456a <USBD_StdEPReq+0x264>
 8014564:	7bbb      	ldrb	r3, [r7, #14]
 8014566:	2b80      	cmp	r3, #128	; 0x80
 8014568:	d103      	bne.n	8014572 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	2200      	movs	r2, #0
 801456e:	601a      	str	r2, [r3, #0]
 8014570:	e00e      	b.n	8014590 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014572:	7bbb      	ldrb	r3, [r7, #14]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f001 f85c 	bl	8015634 <USBD_LL_IsStallEP>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d003      	beq.n	801458a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	2201      	movs	r2, #1
 8014586:	601a      	str	r2, [r3, #0]
 8014588:	e002      	b.n	8014590 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	2200      	movs	r2, #0
 801458e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	2202      	movs	r2, #2
 8014594:	4619      	mov	r1, r3
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 fbe1 	bl	8014d5e <USBD_CtlSendData>
              break;
 801459c:	e004      	b.n	80145a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801459e:	6839      	ldr	r1, [r7, #0]
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f000 fb6b 	bl	8014c7c <USBD_CtlError>
              break;
 80145a6:	bf00      	nop
          }
          break;
 80145a8:	e004      	b.n	80145b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80145aa:	6839      	ldr	r1, [r7, #0]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f000 fb65 	bl	8014c7c <USBD_CtlError>
          break;
 80145b2:	bf00      	nop
      }
      break;
 80145b4:	e004      	b.n	80145c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80145b6:	6839      	ldr	r1, [r7, #0]
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f000 fb5f 	bl	8014c7c <USBD_CtlError>
      break;
 80145be:	bf00      	nop
  }

  return ret;
 80145c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3710      	adds	r7, #16
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
	...

080145cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80145d6:	2300      	movs	r3, #0
 80145d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80145da:	2300      	movs	r3, #0
 80145dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80145de:	2300      	movs	r3, #0
 80145e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	885b      	ldrh	r3, [r3, #2]
 80145e6:	0a1b      	lsrs	r3, r3, #8
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	3b01      	subs	r3, #1
 80145ec:	2b0e      	cmp	r3, #14
 80145ee:	f200 8152 	bhi.w	8014896 <USBD_GetDescriptor+0x2ca>
 80145f2:	a201      	add	r2, pc, #4	; (adr r2, 80145f8 <USBD_GetDescriptor+0x2c>)
 80145f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f8:	08014669 	.word	0x08014669
 80145fc:	08014681 	.word	0x08014681
 8014600:	080146c1 	.word	0x080146c1
 8014604:	08014897 	.word	0x08014897
 8014608:	08014897 	.word	0x08014897
 801460c:	08014837 	.word	0x08014837
 8014610:	08014863 	.word	0x08014863
 8014614:	08014897 	.word	0x08014897
 8014618:	08014897 	.word	0x08014897
 801461c:	08014897 	.word	0x08014897
 8014620:	08014897 	.word	0x08014897
 8014624:	08014897 	.word	0x08014897
 8014628:	08014897 	.word	0x08014897
 801462c:	08014897 	.word	0x08014897
 8014630:	08014635 	.word	0x08014635
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801463a:	69db      	ldr	r3, [r3, #28]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00b      	beq.n	8014658 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014646:	69db      	ldr	r3, [r3, #28]
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	7c12      	ldrb	r2, [r2, #16]
 801464c:	f107 0108 	add.w	r1, r7, #8
 8014650:	4610      	mov	r0, r2
 8014652:	4798      	blx	r3
 8014654:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014656:	e126      	b.n	80148a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014658:	6839      	ldr	r1, [r7, #0]
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 fb0e 	bl	8014c7c <USBD_CtlError>
        err++;
 8014660:	7afb      	ldrb	r3, [r7, #11]
 8014662:	3301      	adds	r3, #1
 8014664:	72fb      	strb	r3, [r7, #11]
      break;
 8014666:	e11e      	b.n	80148a6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	687a      	ldr	r2, [r7, #4]
 8014672:	7c12      	ldrb	r2, [r2, #16]
 8014674:	f107 0108 	add.w	r1, r7, #8
 8014678:	4610      	mov	r0, r2
 801467a:	4798      	blx	r3
 801467c:	60f8      	str	r0, [r7, #12]
      break;
 801467e:	e112      	b.n	80148a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	7c1b      	ldrb	r3, [r3, #16]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d10d      	bne.n	80146a4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014690:	f107 0208 	add.w	r2, r7, #8
 8014694:	4610      	mov	r0, r2
 8014696:	4798      	blx	r3
 8014698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	3301      	adds	r3, #1
 801469e:	2202      	movs	r2, #2
 80146a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80146a2:	e100      	b.n	80148a6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ac:	f107 0208 	add.w	r2, r7, #8
 80146b0:	4610      	mov	r0, r2
 80146b2:	4798      	blx	r3
 80146b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	3301      	adds	r3, #1
 80146ba:	2202      	movs	r2, #2
 80146bc:	701a      	strb	r2, [r3, #0]
      break;
 80146be:	e0f2      	b.n	80148a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	885b      	ldrh	r3, [r3, #2]
 80146c4:	b2db      	uxtb	r3, r3
 80146c6:	2b05      	cmp	r3, #5
 80146c8:	f200 80ac 	bhi.w	8014824 <USBD_GetDescriptor+0x258>
 80146cc:	a201      	add	r2, pc, #4	; (adr r2, 80146d4 <USBD_GetDescriptor+0x108>)
 80146ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d2:	bf00      	nop
 80146d4:	080146ed 	.word	0x080146ed
 80146d8:	08014721 	.word	0x08014721
 80146dc:	08014755 	.word	0x08014755
 80146e0:	08014789 	.word	0x08014789
 80146e4:	080147bd 	.word	0x080147bd
 80146e8:	080147f1 	.word	0x080147f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00b      	beq.n	8014710 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	7c12      	ldrb	r2, [r2, #16]
 8014704:	f107 0108 	add.w	r1, r7, #8
 8014708:	4610      	mov	r0, r2
 801470a:	4798      	blx	r3
 801470c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801470e:	e091      	b.n	8014834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 fab2 	bl	8014c7c <USBD_CtlError>
            err++;
 8014718:	7afb      	ldrb	r3, [r7, #11]
 801471a:	3301      	adds	r3, #1
 801471c:	72fb      	strb	r3, [r7, #11]
          break;
 801471e:	e089      	b.n	8014834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00b      	beq.n	8014744 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	7c12      	ldrb	r2, [r2, #16]
 8014738:	f107 0108 	add.w	r1, r7, #8
 801473c:	4610      	mov	r0, r2
 801473e:	4798      	blx	r3
 8014740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014742:	e077      	b.n	8014834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 fa98 	bl	8014c7c <USBD_CtlError>
            err++;
 801474c:	7afb      	ldrb	r3, [r7, #11]
 801474e:	3301      	adds	r3, #1
 8014750:	72fb      	strb	r3, [r7, #11]
          break;
 8014752:	e06f      	b.n	8014834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801475a:	68db      	ldr	r3, [r3, #12]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d00b      	beq.n	8014778 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	7c12      	ldrb	r2, [r2, #16]
 801476c:	f107 0108 	add.w	r1, r7, #8
 8014770:	4610      	mov	r0, r2
 8014772:	4798      	blx	r3
 8014774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014776:	e05d      	b.n	8014834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014778:	6839      	ldr	r1, [r7, #0]
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f000 fa7e 	bl	8014c7c <USBD_CtlError>
            err++;
 8014780:	7afb      	ldrb	r3, [r7, #11]
 8014782:	3301      	adds	r3, #1
 8014784:	72fb      	strb	r3, [r7, #11]
          break;
 8014786:	e055      	b.n	8014834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801478e:	691b      	ldr	r3, [r3, #16]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d00b      	beq.n	80147ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801479a:	691b      	ldr	r3, [r3, #16]
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	7c12      	ldrb	r2, [r2, #16]
 80147a0:	f107 0108 	add.w	r1, r7, #8
 80147a4:	4610      	mov	r0, r2
 80147a6:	4798      	blx	r3
 80147a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147aa:	e043      	b.n	8014834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147ac:	6839      	ldr	r1, [r7, #0]
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 fa64 	bl	8014c7c <USBD_CtlError>
            err++;
 80147b4:	7afb      	ldrb	r3, [r7, #11]
 80147b6:	3301      	adds	r3, #1
 80147b8:	72fb      	strb	r3, [r7, #11]
          break;
 80147ba:	e03b      	b.n	8014834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147c2:	695b      	ldr	r3, [r3, #20]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d00b      	beq.n	80147e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147ce:	695b      	ldr	r3, [r3, #20]
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	7c12      	ldrb	r2, [r2, #16]
 80147d4:	f107 0108 	add.w	r1, r7, #8
 80147d8:	4610      	mov	r0, r2
 80147da:	4798      	blx	r3
 80147dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147de:	e029      	b.n	8014834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147e0:	6839      	ldr	r1, [r7, #0]
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 fa4a 	bl	8014c7c <USBD_CtlError>
            err++;
 80147e8:	7afb      	ldrb	r3, [r7, #11]
 80147ea:	3301      	adds	r3, #1
 80147ec:	72fb      	strb	r3, [r7, #11]
          break;
 80147ee:	e021      	b.n	8014834 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147f6:	699b      	ldr	r3, [r3, #24]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00b      	beq.n	8014814 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014802:	699b      	ldr	r3, [r3, #24]
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	7c12      	ldrb	r2, [r2, #16]
 8014808:	f107 0108 	add.w	r1, r7, #8
 801480c:	4610      	mov	r0, r2
 801480e:	4798      	blx	r3
 8014810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014812:	e00f      	b.n	8014834 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 fa30 	bl	8014c7c <USBD_CtlError>
            err++;
 801481c:	7afb      	ldrb	r3, [r7, #11]
 801481e:	3301      	adds	r3, #1
 8014820:	72fb      	strb	r3, [r7, #11]
          break;
 8014822:	e007      	b.n	8014834 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014824:	6839      	ldr	r1, [r7, #0]
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fa28 	bl	8014c7c <USBD_CtlError>
          err++;
 801482c:	7afb      	ldrb	r3, [r7, #11]
 801482e:	3301      	adds	r3, #1
 8014830:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014832:	bf00      	nop
      }
      break;
 8014834:	e037      	b.n	80148a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	7c1b      	ldrb	r3, [r3, #16]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d109      	bne.n	8014852 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014846:	f107 0208 	add.w	r2, r7, #8
 801484a:	4610      	mov	r0, r2
 801484c:	4798      	blx	r3
 801484e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014850:	e029      	b.n	80148a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014852:	6839      	ldr	r1, [r7, #0]
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f000 fa11 	bl	8014c7c <USBD_CtlError>
        err++;
 801485a:	7afb      	ldrb	r3, [r7, #11]
 801485c:	3301      	adds	r3, #1
 801485e:	72fb      	strb	r3, [r7, #11]
      break;
 8014860:	e021      	b.n	80148a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	7c1b      	ldrb	r3, [r3, #16]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d10d      	bne.n	8014886 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014872:	f107 0208 	add.w	r2, r7, #8
 8014876:	4610      	mov	r0, r2
 8014878:	4798      	blx	r3
 801487a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	3301      	adds	r3, #1
 8014880:	2207      	movs	r2, #7
 8014882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014884:	e00f      	b.n	80148a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014886:	6839      	ldr	r1, [r7, #0]
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 f9f7 	bl	8014c7c <USBD_CtlError>
        err++;
 801488e:	7afb      	ldrb	r3, [r7, #11]
 8014890:	3301      	adds	r3, #1
 8014892:	72fb      	strb	r3, [r7, #11]
      break;
 8014894:	e007      	b.n	80148a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014896:	6839      	ldr	r1, [r7, #0]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 f9ef 	bl	8014c7c <USBD_CtlError>
      err++;
 801489e:	7afb      	ldrb	r3, [r7, #11]
 80148a0:	3301      	adds	r3, #1
 80148a2:	72fb      	strb	r3, [r7, #11]
      break;
 80148a4:	bf00      	nop
  }

  if (err != 0U)
 80148a6:	7afb      	ldrb	r3, [r7, #11]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d11e      	bne.n	80148ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	88db      	ldrh	r3, [r3, #6]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d016      	beq.n	80148e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80148b4:	893b      	ldrh	r3, [r7, #8]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d00e      	beq.n	80148d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	88da      	ldrh	r2, [r3, #6]
 80148be:	893b      	ldrh	r3, [r7, #8]
 80148c0:	4293      	cmp	r3, r2
 80148c2:	bf28      	it	cs
 80148c4:	4613      	movcs	r3, r2
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80148ca:	893b      	ldrh	r3, [r7, #8]
 80148cc:	461a      	mov	r2, r3
 80148ce:	68f9      	ldr	r1, [r7, #12]
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 fa44 	bl	8014d5e <USBD_CtlSendData>
 80148d6:	e009      	b.n	80148ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 f9ce 	bl	8014c7c <USBD_CtlError>
 80148e0:	e004      	b.n	80148ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 fa95 	bl	8014e12 <USBD_CtlSendStatus>
 80148e8:	e000      	b.n	80148ec <USBD_GetDescriptor+0x320>
    return;
 80148ea:	bf00      	nop
  }
}
 80148ec:	3710      	adds	r7, #16
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop

080148f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	889b      	ldrh	r3, [r3, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d131      	bne.n	801496a <USBD_SetAddress+0x76>
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	88db      	ldrh	r3, [r3, #6]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d12d      	bne.n	801496a <USBD_SetAddress+0x76>
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	885b      	ldrh	r3, [r3, #2]
 8014912:	2b7f      	cmp	r3, #127	; 0x7f
 8014914:	d829      	bhi.n	801496a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	885b      	ldrh	r3, [r3, #2]
 801491a:	b2db      	uxtb	r3, r3
 801491c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014920:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014928:	b2db      	uxtb	r3, r3
 801492a:	2b03      	cmp	r3, #3
 801492c:	d104      	bne.n	8014938 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801492e:	6839      	ldr	r1, [r7, #0]
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 f9a3 	bl	8014c7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014936:	e01d      	b.n	8014974 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	7bfa      	ldrb	r2, [r7, #15]
 801493c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014940:	7bfb      	ldrb	r3, [r7, #15]
 8014942:	4619      	mov	r1, r3
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fea1 	bl	801568c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 fa61 	bl	8014e12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d004      	beq.n	8014960 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2202      	movs	r2, #2
 801495a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801495e:	e009      	b.n	8014974 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2201      	movs	r2, #1
 8014964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014968:	e004      	b.n	8014974 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801496a:	6839      	ldr	r1, [r7, #0]
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 f985 	bl	8014c7c <USBD_CtlError>
  }
}
 8014972:	bf00      	nop
 8014974:	bf00      	nop
 8014976:	3710      	adds	r7, #16
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014986:	2300      	movs	r3, #0
 8014988:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	885b      	ldrh	r3, [r3, #2]
 801498e:	b2da      	uxtb	r2, r3
 8014990:	4b4c      	ldr	r3, [pc, #304]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014992:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014994:	4b4b      	ldr	r3, [pc, #300]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	2b01      	cmp	r3, #1
 801499a:	d905      	bls.n	80149a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801499c:	6839      	ldr	r1, [r7, #0]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 f96c 	bl	8014c7c <USBD_CtlError>
    return USBD_FAIL;
 80149a4:	2303      	movs	r3, #3
 80149a6:	e088      	b.n	8014aba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149ae:	b2db      	uxtb	r3, r3
 80149b0:	2b02      	cmp	r3, #2
 80149b2:	d002      	beq.n	80149ba <USBD_SetConfig+0x3e>
 80149b4:	2b03      	cmp	r3, #3
 80149b6:	d025      	beq.n	8014a04 <USBD_SetConfig+0x88>
 80149b8:	e071      	b.n	8014a9e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80149ba:	4b42      	ldr	r3, [pc, #264]	; (8014ac4 <USBD_SetConfig+0x148>)
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d01c      	beq.n	80149fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80149c2:	4b40      	ldr	r3, [pc, #256]	; (8014ac4 <USBD_SetConfig+0x148>)
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	461a      	mov	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149cc:	4b3d      	ldr	r3, [pc, #244]	; (8014ac4 <USBD_SetConfig+0x148>)
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	4619      	mov	r1, r3
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7ff f992 	bl	8013cfc <USBD_SetClassConfig>
 80149d8:	4603      	mov	r3, r0
 80149da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80149dc:	7bfb      	ldrb	r3, [r7, #15]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d004      	beq.n	80149ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80149e2:	6839      	ldr	r1, [r7, #0]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 f949 	bl	8014c7c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149ea:	e065      	b.n	8014ab8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 fa10 	bl	8014e12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2203      	movs	r2, #3
 80149f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80149fa:	e05d      	b.n	8014ab8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f000 fa08 	bl	8014e12 <USBD_CtlSendStatus>
      break;
 8014a02:	e059      	b.n	8014ab8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014a04:	4b2f      	ldr	r3, [pc, #188]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d112      	bne.n	8014a32 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2202      	movs	r2, #2
 8014a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014a14:	4b2b      	ldr	r3, [pc, #172]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	461a      	mov	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a1e:	4b29      	ldr	r3, [pc, #164]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	4619      	mov	r1, r3
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f7ff f985 	bl	8013d34 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 f9f1 	bl	8014e12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a30:	e042      	b.n	8014ab8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014a32:	4b24      	ldr	r3, [pc, #144]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	461a      	mov	r2, r3
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	685b      	ldr	r3, [r3, #4]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d02a      	beq.n	8014a96 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	4619      	mov	r1, r3
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f7ff f973 	bl	8013d34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014a4e:	4b1d      	ldr	r3, [pc, #116]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	461a      	mov	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a58:	4b1a      	ldr	r3, [pc, #104]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7ff f94c 	bl	8013cfc <USBD_SetClassConfig>
 8014a64:	4603      	mov	r3, r0
 8014a66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014a68:	7bfb      	ldrb	r3, [r7, #15]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00f      	beq.n	8014a8e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014a6e:	6839      	ldr	r1, [r7, #0]
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f000 f903 	bl	8014c7c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	685b      	ldr	r3, [r3, #4]
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	4619      	mov	r1, r3
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f7ff f958 	bl	8013d34 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2202      	movs	r2, #2
 8014a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014a8c:	e014      	b.n	8014ab8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f000 f9bf 	bl	8014e12 <USBD_CtlSendStatus>
      break;
 8014a94:	e010      	b.n	8014ab8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f000 f9bb 	bl	8014e12 <USBD_CtlSendStatus>
      break;
 8014a9c:	e00c      	b.n	8014ab8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014a9e:	6839      	ldr	r1, [r7, #0]
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f000 f8eb 	bl	8014c7c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014aa6:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <USBD_SetConfig+0x148>)
 8014aa8:	781b      	ldrb	r3, [r3, #0]
 8014aaa:	4619      	mov	r1, r3
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f7ff f941 	bl	8013d34 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014ab2:	2303      	movs	r3, #3
 8014ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ab6:	bf00      	nop
  }

  return ret;
 8014ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	3710      	adds	r7, #16
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	200020ac 	.word	0x200020ac

08014ac8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	88db      	ldrh	r3, [r3, #6]
 8014ad6:	2b01      	cmp	r3, #1
 8014ad8:	d004      	beq.n	8014ae4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014ada:	6839      	ldr	r1, [r7, #0]
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f000 f8cd 	bl	8014c7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014ae2:	e023      	b.n	8014b2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	dc02      	bgt.n	8014af6 <USBD_GetConfig+0x2e>
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	dc03      	bgt.n	8014afc <USBD_GetConfig+0x34>
 8014af4:	e015      	b.n	8014b22 <USBD_GetConfig+0x5a>
 8014af6:	2b03      	cmp	r3, #3
 8014af8:	d00b      	beq.n	8014b12 <USBD_GetConfig+0x4a>
 8014afa:	e012      	b.n	8014b22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2200      	movs	r2, #0
 8014b00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	3308      	adds	r3, #8
 8014b06:	2201      	movs	r2, #1
 8014b08:	4619      	mov	r1, r3
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 f927 	bl	8014d5e <USBD_CtlSendData>
        break;
 8014b10:	e00c      	b.n	8014b2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	3304      	adds	r3, #4
 8014b16:	2201      	movs	r2, #1
 8014b18:	4619      	mov	r1, r3
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f91f 	bl	8014d5e <USBD_CtlSendData>
        break;
 8014b20:	e004      	b.n	8014b2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f000 f8a9 	bl	8014c7c <USBD_CtlError>
        break;
 8014b2a:	bf00      	nop
}
 8014b2c:	bf00      	nop
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	3b01      	subs	r3, #1
 8014b48:	2b02      	cmp	r3, #2
 8014b4a:	d81e      	bhi.n	8014b8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	88db      	ldrh	r3, [r3, #6]
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d004      	beq.n	8014b5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f000 f890 	bl	8014c7c <USBD_CtlError>
        break;
 8014b5c:	e01a      	b.n	8014b94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2201      	movs	r2, #1
 8014b62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d005      	beq.n	8014b7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	f043 0202 	orr.w	r2, r3, #2
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	330c      	adds	r3, #12
 8014b7e:	2202      	movs	r2, #2
 8014b80:	4619      	mov	r1, r3
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 f8eb 	bl	8014d5e <USBD_CtlSendData>
      break;
 8014b88:	e004      	b.n	8014b94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 f875 	bl	8014c7c <USBD_CtlError>
      break;
 8014b92:	bf00      	nop
  }
}
 8014b94:	bf00      	nop
 8014b96:	3708      	adds	r7, #8
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	885b      	ldrh	r3, [r3, #2]
 8014baa:	2b01      	cmp	r3, #1
 8014bac:	d106      	bne.n	8014bbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 f92b 	bl	8014e12 <USBD_CtlSendStatus>
  }
}
 8014bbc:	bf00      	nop
 8014bbe:	3708      	adds	r7, #8
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	3b01      	subs	r3, #1
 8014bd8:	2b02      	cmp	r3, #2
 8014bda:	d80b      	bhi.n	8014bf4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	885b      	ldrh	r3, [r3, #2]
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	d10c      	bne.n	8014bfe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f000 f910 	bl	8014e12 <USBD_CtlSendStatus>
      }
      break;
 8014bf2:	e004      	b.n	8014bfe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014bf4:	6839      	ldr	r1, [r7, #0]
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 f840 	bl	8014c7c <USBD_CtlError>
      break;
 8014bfc:	e000      	b.n	8014c00 <USBD_ClrFeature+0x3c>
      break;
 8014bfe:	bf00      	nop
  }
}
 8014c00:	bf00      	nop
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	781a      	ldrb	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	3301      	adds	r3, #1
 8014c22:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	781a      	ldrb	r2, [r3, #0]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	3301      	adds	r3, #1
 8014c30:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c32:	68f8      	ldr	r0, [r7, #12]
 8014c34:	f7ff fa92 	bl	801415c <SWAPBYTE>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	3301      	adds	r3, #1
 8014c44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f7ff fa85 	bl	801415c <SWAPBYTE>
 8014c52:	4603      	mov	r3, r0
 8014c54:	461a      	mov	r2, r3
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	3301      	adds	r3, #1
 8014c64:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c66:	68f8      	ldr	r0, [r7, #12]
 8014c68:	f7ff fa78 	bl	801415c <SWAPBYTE>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	461a      	mov	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	80da      	strh	r2, [r3, #6]
}
 8014c74:	bf00      	nop
 8014c76:	3710      	adds	r7, #16
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c86:	2180      	movs	r1, #128	; 0x80
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f000 fc95 	bl	80155b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c8e:	2100      	movs	r1, #0
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f000 fc91 	bl	80155b8 <USBD_LL_StallEP>
}
 8014c96:	bf00      	nop
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c9e:	b580      	push	{r7, lr}
 8014ca0:	b086      	sub	sp, #24
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	60f8      	str	r0, [r7, #12]
 8014ca6:	60b9      	str	r1, [r7, #8]
 8014ca8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014caa:	2300      	movs	r3, #0
 8014cac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d036      	beq.n	8014d22 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014cb8:	6938      	ldr	r0, [r7, #16]
 8014cba:	f000 f836 	bl	8014d2a <USBD_GetLen>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	b29a      	uxth	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014ccc:	7dfb      	ldrb	r3, [r7, #23]
 8014cce:	68ba      	ldr	r2, [r7, #8]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	7812      	ldrb	r2, [r2, #0]
 8014cd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cd8:	7dfb      	ldrb	r3, [r7, #23]
 8014cda:	3301      	adds	r3, #1
 8014cdc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014cde:	7dfb      	ldrb	r3, [r7, #23]
 8014ce0:	68ba      	ldr	r2, [r7, #8]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	2203      	movs	r2, #3
 8014ce6:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ce8:	7dfb      	ldrb	r3, [r7, #23]
 8014cea:	3301      	adds	r3, #1
 8014cec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014cee:	e013      	b.n	8014d18 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014cf0:	7dfb      	ldrb	r3, [r7, #23]
 8014cf2:	68ba      	ldr	r2, [r7, #8]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	693a      	ldr	r2, [r7, #16]
 8014cf8:	7812      	ldrb	r2, [r2, #0]
 8014cfa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	613b      	str	r3, [r7, #16]
    idx++;
 8014d02:	7dfb      	ldrb	r3, [r7, #23]
 8014d04:	3301      	adds	r3, #1
 8014d06:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d08:	7dfb      	ldrb	r3, [r7, #23]
 8014d0a:	68ba      	ldr	r2, [r7, #8]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	2200      	movs	r2, #0
 8014d10:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	3301      	adds	r3, #1
 8014d16:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d1e7      	bne.n	8014cf0 <USBD_GetString+0x52>
 8014d20:	e000      	b.n	8014d24 <USBD_GetString+0x86>
    return;
 8014d22:	bf00      	nop
  }
}
 8014d24:	3718      	adds	r7, #24
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d2a:	b480      	push	{r7}
 8014d2c:	b085      	sub	sp, #20
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d32:	2300      	movs	r3, #0
 8014d34:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d3a:	e005      	b.n	8014d48 <USBD_GetLen+0x1e>
  {
    len++;
 8014d3c:	7bfb      	ldrb	r3, [r7, #15]
 8014d3e:	3301      	adds	r3, #1
 8014d40:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	3301      	adds	r3, #1
 8014d46:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d1f5      	bne.n	8014d3c <USBD_GetLen+0x12>
  }

  return len;
 8014d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3714      	adds	r7, #20
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr

08014d5e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d5e:	b580      	push	{r7, lr}
 8014d60:	b084      	sub	sp, #16
 8014d62:	af00      	add	r7, sp, #0
 8014d64:	60f8      	str	r0, [r7, #12]
 8014d66:	60b9      	str	r1, [r7, #8]
 8014d68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	2202      	movs	r2, #2
 8014d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	68ba      	ldr	r2, [r7, #8]
 8014d82:	2100      	movs	r1, #0
 8014d84:	68f8      	ldr	r0, [r7, #12]
 8014d86:	f000 fca0 	bl	80156ca <USBD_LL_Transmit>

  return USBD_OK;
 8014d8a:	2300      	movs	r3, #0
}
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3710      	adds	r7, #16
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}

08014d94 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b084      	sub	sp, #16
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	68ba      	ldr	r2, [r7, #8]
 8014da4:	2100      	movs	r1, #0
 8014da6:	68f8      	ldr	r0, [r7, #12]
 8014da8:	f000 fc8f 	bl	80156ca <USBD_LL_Transmit>

  return USBD_OK;
 8014dac:	2300      	movs	r3, #0
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3710      	adds	r7, #16
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}

08014db6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014db6:	b580      	push	{r7, lr}
 8014db8:	b084      	sub	sp, #16
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	60f8      	str	r0, [r7, #12]
 8014dbe:	60b9      	str	r1, [r7, #8]
 8014dc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	2203      	movs	r2, #3
 8014dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	68ba      	ldr	r2, [r7, #8]
 8014dde:	2100      	movs	r1, #0
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f000 fc93 	bl	801570c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3710      	adds	r7, #16
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	60b9      	str	r1, [r7, #8]
 8014dfa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	68ba      	ldr	r2, [r7, #8]
 8014e00:	2100      	movs	r1, #0
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	f000 fc82 	bl	801570c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e08:	2300      	movs	r3, #0
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}

08014e12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b082      	sub	sp, #8
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2204      	movs	r2, #4
 8014e1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e22:	2300      	movs	r3, #0
 8014e24:	2200      	movs	r2, #0
 8014e26:	2100      	movs	r1, #0
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f000 fc4e 	bl	80156ca <USBD_LL_Transmit>

  return USBD_OK;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2205      	movs	r2, #5
 8014e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e48:	2300      	movs	r3, #0
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 fc5c 	bl	801570c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
	...

08014e60 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014e64:	2200      	movs	r2, #0
 8014e66:	4912      	ldr	r1, [pc, #72]	; (8014eb0 <MX_USB_Device_Init+0x50>)
 8014e68:	4812      	ldr	r0, [pc, #72]	; (8014eb4 <MX_USB_Device_Init+0x54>)
 8014e6a:	f7fe fed9 	bl	8013c20 <USBD_Init>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d001      	beq.n	8014e78 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014e74:	f7ef f89c 	bl	8003fb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014e78:	490f      	ldr	r1, [pc, #60]	; (8014eb8 <MX_USB_Device_Init+0x58>)
 8014e7a:	480e      	ldr	r0, [pc, #56]	; (8014eb4 <MX_USB_Device_Init+0x54>)
 8014e7c:	f7fe ff00 	bl	8013c80 <USBD_RegisterClass>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d001      	beq.n	8014e8a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014e86:	f7ef f893 	bl	8003fb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014e8a:	490c      	ldr	r1, [pc, #48]	; (8014ebc <MX_USB_Device_Init+0x5c>)
 8014e8c:	4809      	ldr	r0, [pc, #36]	; (8014eb4 <MX_USB_Device_Init+0x54>)
 8014e8e:	f7fe fe21 	bl	8013ad4 <USBD_CDC_RegisterInterface>
 8014e92:	4603      	mov	r3, r0
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d001      	beq.n	8014e9c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014e98:	f7ef f88a 	bl	8003fb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014e9c:	4805      	ldr	r0, [pc, #20]	; (8014eb4 <MX_USB_Device_Init+0x54>)
 8014e9e:	f7fe ff16 	bl	8013cce <USBD_Start>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d001      	beq.n	8014eac <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014ea8:	f7ef f882 	bl	8003fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014eac:	bf00      	nop
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	20000324 	.word	0x20000324
 8014eb4:	200020b0 	.word	0x200020b0
 8014eb8:	2000020c 	.word	0x2000020c
 8014ebc:	20000310 	.word	0x20000310

08014ec0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	4905      	ldr	r1, [pc, #20]	; (8014edc <CDC_Init_FS+0x1c>)
 8014ec8:	4805      	ldr	r0, [pc, #20]	; (8014ee0 <CDC_Init_FS+0x20>)
 8014eca:	f7fe fe18 	bl	8013afe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014ece:	4905      	ldr	r1, [pc, #20]	; (8014ee4 <CDC_Init_FS+0x24>)
 8014ed0:	4803      	ldr	r0, [pc, #12]	; (8014ee0 <CDC_Init_FS+0x20>)
 8014ed2:	f7fe fe32 	bl	8013b3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014ed6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	20002780 	.word	0x20002780
 8014ee0:	200020b0 	.word	0x200020b0
 8014ee4:	20002380 	.word	0x20002380

08014ee8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014eec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b083      	sub	sp, #12
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	4603      	mov	r3, r0
 8014f00:	6039      	str	r1, [r7, #0]
 8014f02:	71fb      	strb	r3, [r7, #7]
 8014f04:	4613      	mov	r3, r2
 8014f06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014f08:	79fb      	ldrb	r3, [r7, #7]
 8014f0a:	2b23      	cmp	r3, #35	; 0x23
 8014f0c:	d84a      	bhi.n	8014fa4 <CDC_Control_FS+0xac>
 8014f0e:	a201      	add	r2, pc, #4	; (adr r2, 8014f14 <CDC_Control_FS+0x1c>)
 8014f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f14:	08014fa5 	.word	0x08014fa5
 8014f18:	08014fa5 	.word	0x08014fa5
 8014f1c:	08014fa5 	.word	0x08014fa5
 8014f20:	08014fa5 	.word	0x08014fa5
 8014f24:	08014fa5 	.word	0x08014fa5
 8014f28:	08014fa5 	.word	0x08014fa5
 8014f2c:	08014fa5 	.word	0x08014fa5
 8014f30:	08014fa5 	.word	0x08014fa5
 8014f34:	08014fa5 	.word	0x08014fa5
 8014f38:	08014fa5 	.word	0x08014fa5
 8014f3c:	08014fa5 	.word	0x08014fa5
 8014f40:	08014fa5 	.word	0x08014fa5
 8014f44:	08014fa5 	.word	0x08014fa5
 8014f48:	08014fa5 	.word	0x08014fa5
 8014f4c:	08014fa5 	.word	0x08014fa5
 8014f50:	08014fa5 	.word	0x08014fa5
 8014f54:	08014fa5 	.word	0x08014fa5
 8014f58:	08014fa5 	.word	0x08014fa5
 8014f5c:	08014fa5 	.word	0x08014fa5
 8014f60:	08014fa5 	.word	0x08014fa5
 8014f64:	08014fa5 	.word	0x08014fa5
 8014f68:	08014fa5 	.word	0x08014fa5
 8014f6c:	08014fa5 	.word	0x08014fa5
 8014f70:	08014fa5 	.word	0x08014fa5
 8014f74:	08014fa5 	.word	0x08014fa5
 8014f78:	08014fa5 	.word	0x08014fa5
 8014f7c:	08014fa5 	.word	0x08014fa5
 8014f80:	08014fa5 	.word	0x08014fa5
 8014f84:	08014fa5 	.word	0x08014fa5
 8014f88:	08014fa5 	.word	0x08014fa5
 8014f8c:	08014fa5 	.word	0x08014fa5
 8014f90:	08014fa5 	.word	0x08014fa5
 8014f94:	08014fa5 	.word	0x08014fa5
 8014f98:	08014fa5 	.word	0x08014fa5
 8014f9c:	08014fa5 	.word	0x08014fa5
 8014fa0:	08014fa5 	.word	0x08014fa5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014fa4:	bf00      	nop
  }

  return (USBD_OK);
 8014fa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014fbe:	6879      	ldr	r1, [r7, #4]
 8014fc0:	4805      	ldr	r0, [pc, #20]	; (8014fd8 <CDC_Receive_FS+0x24>)
 8014fc2:	f7fe fdba 	bl	8013b3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014fc6:	4804      	ldr	r0, [pc, #16]	; (8014fd8 <CDC_Receive_FS+0x24>)
 8014fc8:	f7fe fe00 	bl	8013bcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014fcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3708      	adds	r7, #8
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	200020b0 	.word	0x200020b0

08014fdc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b084      	sub	sp, #16
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014fec:	4b0d      	ldr	r3, [pc, #52]	; (8015024 <CDC_Transmit_FS+0x48>)
 8014fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ff2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d001      	beq.n	8015002 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014ffe:	2301      	movs	r3, #1
 8015000:	e00b      	b.n	801501a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015002:	887b      	ldrh	r3, [r7, #2]
 8015004:	461a      	mov	r2, r3
 8015006:	6879      	ldr	r1, [r7, #4]
 8015008:	4806      	ldr	r0, [pc, #24]	; (8015024 <CDC_Transmit_FS+0x48>)
 801500a:	f7fe fd78 	bl	8013afe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801500e:	4805      	ldr	r0, [pc, #20]	; (8015024 <CDC_Transmit_FS+0x48>)
 8015010:	f7fe fdac 	bl	8013b6c <USBD_CDC_TransmitPacket>
 8015014:	4603      	mov	r3, r0
 8015016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015018:	7bfb      	ldrb	r3, [r7, #15]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	200020b0 	.word	0x200020b0

08015028 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015028:	b480      	push	{r7}
 801502a:	b087      	sub	sp, #28
 801502c:	af00      	add	r7, sp, #0
 801502e:	60f8      	str	r0, [r7, #12]
 8015030:	60b9      	str	r1, [r7, #8]
 8015032:	4613      	mov	r3, r2
 8015034:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015036:	2300      	movs	r3, #0
 8015038:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801503a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801503e:	4618      	mov	r0, r3
 8015040:	371c      	adds	r7, #28
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr
	...

0801504c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	4603      	mov	r3, r0
 8015054:	6039      	str	r1, [r7, #0]
 8015056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	2212      	movs	r2, #18
 801505c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801505e:	4b03      	ldr	r3, [pc, #12]	; (801506c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015060:	4618      	mov	r0, r3
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr
 801506c:	20000344 	.word	0x20000344

08015070 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
 8015076:	4603      	mov	r3, r0
 8015078:	6039      	str	r1, [r7, #0]
 801507a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	2204      	movs	r2, #4
 8015080:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015082:	4b03      	ldr	r3, [pc, #12]	; (8015090 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015084:	4618      	mov	r0, r3
 8015086:	370c      	adds	r7, #12
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr
 8015090:	20000358 	.word	0x20000358

08015094 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	4603      	mov	r3, r0
 801509c:	6039      	str	r1, [r7, #0]
 801509e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150a0:	79fb      	ldrb	r3, [r7, #7]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d105      	bne.n	80150b2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80150a6:	683a      	ldr	r2, [r7, #0]
 80150a8:	4907      	ldr	r1, [pc, #28]	; (80150c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80150aa:	4808      	ldr	r0, [pc, #32]	; (80150cc <USBD_CDC_ProductStrDescriptor+0x38>)
 80150ac:	f7ff fdf7 	bl	8014c9e <USBD_GetString>
 80150b0:	e004      	b.n	80150bc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	4904      	ldr	r1, [pc, #16]	; (80150c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80150b6:	4805      	ldr	r0, [pc, #20]	; (80150cc <USBD_CDC_ProductStrDescriptor+0x38>)
 80150b8:	f7ff fdf1 	bl	8014c9e <USBD_GetString>
  }
  return USBD_StrDesc;
 80150bc:	4b02      	ldr	r3, [pc, #8]	; (80150c8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3708      	adds	r7, #8
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	20002b80 	.word	0x20002b80
 80150cc:	0801a498 	.word	0x0801a498

080150d0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	4603      	mov	r3, r0
 80150d8:	6039      	str	r1, [r7, #0]
 80150da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80150dc:	683a      	ldr	r2, [r7, #0]
 80150de:	4904      	ldr	r1, [pc, #16]	; (80150f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80150e0:	4804      	ldr	r0, [pc, #16]	; (80150f4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80150e2:	f7ff fddc 	bl	8014c9e <USBD_GetString>
  return USBD_StrDesc;
 80150e6:	4b02      	ldr	r3, [pc, #8]	; (80150f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3708      	adds	r7, #8
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}
 80150f0:	20002b80 	.word	0x20002b80
 80150f4:	0801a4b0 	.word	0x0801a4b0

080150f8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	4603      	mov	r3, r0
 8015100:	6039      	str	r1, [r7, #0]
 8015102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	221a      	movs	r2, #26
 8015108:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801510a:	f000 f843 	bl	8015194 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801510e:	4b02      	ldr	r3, [pc, #8]	; (8015118 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015110:	4618      	mov	r0, r3
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	2000035c 	.word	0x2000035c

0801511c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b082      	sub	sp, #8
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	6039      	str	r1, [r7, #0]
 8015126:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015128:	79fb      	ldrb	r3, [r7, #7]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d105      	bne.n	801513a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801512e:	683a      	ldr	r2, [r7, #0]
 8015130:	4907      	ldr	r1, [pc, #28]	; (8015150 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015132:	4808      	ldr	r0, [pc, #32]	; (8015154 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015134:	f7ff fdb3 	bl	8014c9e <USBD_GetString>
 8015138:	e004      	b.n	8015144 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801513a:	683a      	ldr	r2, [r7, #0]
 801513c:	4904      	ldr	r1, [pc, #16]	; (8015150 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801513e:	4805      	ldr	r0, [pc, #20]	; (8015154 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015140:	f7ff fdad 	bl	8014c9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015144:	4b02      	ldr	r3, [pc, #8]	; (8015150 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015146:	4618      	mov	r0, r3
 8015148:	3708      	adds	r7, #8
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
 801514e:	bf00      	nop
 8015150:	20002b80 	.word	0x20002b80
 8015154:	0801a4c4 	.word	0x0801a4c4

08015158 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	af00      	add	r7, sp, #0
 801515e:	4603      	mov	r3, r0
 8015160:	6039      	str	r1, [r7, #0]
 8015162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015164:	79fb      	ldrb	r3, [r7, #7]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d105      	bne.n	8015176 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801516a:	683a      	ldr	r2, [r7, #0]
 801516c:	4907      	ldr	r1, [pc, #28]	; (801518c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801516e:	4808      	ldr	r0, [pc, #32]	; (8015190 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015170:	f7ff fd95 	bl	8014c9e <USBD_GetString>
 8015174:	e004      	b.n	8015180 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015176:	683a      	ldr	r2, [r7, #0]
 8015178:	4904      	ldr	r1, [pc, #16]	; (801518c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801517a:	4805      	ldr	r0, [pc, #20]	; (8015190 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801517c:	f7ff fd8f 	bl	8014c9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015180:	4b02      	ldr	r3, [pc, #8]	; (801518c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015182:	4618      	mov	r0, r3
 8015184:	3708      	adds	r7, #8
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	20002b80 	.word	0x20002b80
 8015190:	0801a4d0 	.word	0x0801a4d0

08015194 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801519a:	4b0f      	ldr	r3, [pc, #60]	; (80151d8 <Get_SerialNum+0x44>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80151a0:	4b0e      	ldr	r3, [pc, #56]	; (80151dc <Get_SerialNum+0x48>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80151a6:	4b0e      	ldr	r3, [pc, #56]	; (80151e0 <Get_SerialNum+0x4c>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80151ac:	68fa      	ldr	r2, [r7, #12]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	4413      	add	r3, r2
 80151b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d009      	beq.n	80151ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80151ba:	2208      	movs	r2, #8
 80151bc:	4909      	ldr	r1, [pc, #36]	; (80151e4 <Get_SerialNum+0x50>)
 80151be:	68f8      	ldr	r0, [r7, #12]
 80151c0:	f000 f814 	bl	80151ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80151c4:	2204      	movs	r2, #4
 80151c6:	4908      	ldr	r1, [pc, #32]	; (80151e8 <Get_SerialNum+0x54>)
 80151c8:	68b8      	ldr	r0, [r7, #8]
 80151ca:	f000 f80f 	bl	80151ec <IntToUnicode>
  }
}
 80151ce:	bf00      	nop
 80151d0:	3710      	adds	r7, #16
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	1fff7590 	.word	0x1fff7590
 80151dc:	1fff7594 	.word	0x1fff7594
 80151e0:	1fff7598 	.word	0x1fff7598
 80151e4:	2000035e 	.word	0x2000035e
 80151e8:	2000036e 	.word	0x2000036e

080151ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b087      	sub	sp, #28
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	4613      	mov	r3, r2
 80151f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80151fa:	2300      	movs	r3, #0
 80151fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80151fe:	2300      	movs	r3, #0
 8015200:	75fb      	strb	r3, [r7, #23]
 8015202:	e027      	b.n	8015254 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	0f1b      	lsrs	r3, r3, #28
 8015208:	2b09      	cmp	r3, #9
 801520a:	d80b      	bhi.n	8015224 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	0f1b      	lsrs	r3, r3, #28
 8015210:	b2da      	uxtb	r2, r3
 8015212:	7dfb      	ldrb	r3, [r7, #23]
 8015214:	005b      	lsls	r3, r3, #1
 8015216:	4619      	mov	r1, r3
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	440b      	add	r3, r1
 801521c:	3230      	adds	r2, #48	; 0x30
 801521e:	b2d2      	uxtb	r2, r2
 8015220:	701a      	strb	r2, [r3, #0]
 8015222:	e00a      	b.n	801523a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	0f1b      	lsrs	r3, r3, #28
 8015228:	b2da      	uxtb	r2, r3
 801522a:	7dfb      	ldrb	r3, [r7, #23]
 801522c:	005b      	lsls	r3, r3, #1
 801522e:	4619      	mov	r1, r3
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	440b      	add	r3, r1
 8015234:	3237      	adds	r2, #55	; 0x37
 8015236:	b2d2      	uxtb	r2, r2
 8015238:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	011b      	lsls	r3, r3, #4
 801523e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015240:	7dfb      	ldrb	r3, [r7, #23]
 8015242:	005b      	lsls	r3, r3, #1
 8015244:	3301      	adds	r3, #1
 8015246:	68ba      	ldr	r2, [r7, #8]
 8015248:	4413      	add	r3, r2
 801524a:	2200      	movs	r2, #0
 801524c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801524e:	7dfb      	ldrb	r3, [r7, #23]
 8015250:	3301      	adds	r3, #1
 8015252:	75fb      	strb	r3, [r7, #23]
 8015254:	7dfa      	ldrb	r2, [r7, #23]
 8015256:	79fb      	ldrb	r3, [r7, #7]
 8015258:	429a      	cmp	r2, r3
 801525a:	d3d3      	bcc.n	8015204 <IntToUnicode+0x18>
  }
}
 801525c:	bf00      	nop
 801525e:	bf00      	nop
 8015260:	371c      	adds	r7, #28
 8015262:	46bd      	mov	sp, r7
 8015264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015268:	4770      	bx	lr
	...

0801526c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b094      	sub	sp, #80	; 0x50
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015274:	f107 030c 	add.w	r3, r7, #12
 8015278:	2244      	movs	r2, #68	; 0x44
 801527a:	2100      	movs	r1, #0
 801527c:	4618      	mov	r0, r3
 801527e:	f001 fa94 	bl	80167aa <memset>
  if(pcdHandle->Instance==USB)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	4a15      	ldr	r2, [pc, #84]	; (80152dc <HAL_PCD_MspInit+0x70>)
 8015288:	4293      	cmp	r3, r2
 801528a:	d122      	bne.n	80152d2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801528c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015290:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015292:	2300      	movs	r3, #0
 8015294:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015296:	f107 030c 	add.w	r3, r7, #12
 801529a:	4618      	mov	r0, r3
 801529c:	f7f6 fc1e 	bl	800badc <HAL_RCCEx_PeriphCLKConfig>
 80152a0:	4603      	mov	r3, r0
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d001      	beq.n	80152aa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80152a6:	f7ee fe83 	bl	8003fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80152aa:	4b0d      	ldr	r3, [pc, #52]	; (80152e0 <HAL_PCD_MspInit+0x74>)
 80152ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152ae:	4a0c      	ldr	r2, [pc, #48]	; (80152e0 <HAL_PCD_MspInit+0x74>)
 80152b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80152b4:	6593      	str	r3, [r2, #88]	; 0x58
 80152b6:	4b0a      	ldr	r3, [pc, #40]	; (80152e0 <HAL_PCD_MspInit+0x74>)
 80152b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80152be:	60bb      	str	r3, [r7, #8]
 80152c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80152c2:	2200      	movs	r2, #0
 80152c4:	2100      	movs	r1, #0
 80152c6:	2014      	movs	r0, #20
 80152c8:	f7f2 fe65 	bl	8007f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80152cc:	2014      	movs	r0, #20
 80152ce:	f7f2 fe7c 	bl	8007fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80152d2:	bf00      	nop
 80152d4:	3750      	adds	r7, #80	; 0x50
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	40005c00 	.word	0x40005c00
 80152e0:	40021000 	.word	0x40021000

080152e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80152f8:	4619      	mov	r1, r3
 80152fa:	4610      	mov	r0, r2
 80152fc:	f7fe fd32 	bl	8013d64 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015300:	bf00      	nop
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	460b      	mov	r3, r1
 8015312:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801531a:	78fa      	ldrb	r2, [r7, #3]
 801531c:	6879      	ldr	r1, [r7, #4]
 801531e:	4613      	mov	r3, r2
 8015320:	009b      	lsls	r3, r3, #2
 8015322:	4413      	add	r3, r2
 8015324:	00db      	lsls	r3, r3, #3
 8015326:	440b      	add	r3, r1
 8015328:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801532c:	681a      	ldr	r2, [r3, #0]
 801532e:	78fb      	ldrb	r3, [r7, #3]
 8015330:	4619      	mov	r1, r3
 8015332:	f7fe fd6c 	bl	8013e0e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015336:	bf00      	nop
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801533e:	b580      	push	{r7, lr}
 8015340:	b082      	sub	sp, #8
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
 8015346:	460b      	mov	r3, r1
 8015348:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015350:	78fa      	ldrb	r2, [r7, #3]
 8015352:	6879      	ldr	r1, [r7, #4]
 8015354:	4613      	mov	r3, r2
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	440b      	add	r3, r1
 801535e:	3324      	adds	r3, #36	; 0x24
 8015360:	681a      	ldr	r2, [r3, #0]
 8015362:	78fb      	ldrb	r3, [r7, #3]
 8015364:	4619      	mov	r1, r3
 8015366:	f7fe fdb5 	bl	8013ed4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801536a:	bf00      	nop
 801536c:	3708      	adds	r7, #8
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015380:	4618      	mov	r0, r3
 8015382:	f7fe fec9 	bl	8014118 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015386:	bf00      	nop
 8015388:	3708      	adds	r7, #8
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}

0801538e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801538e:	b580      	push	{r7, lr}
 8015390:	b084      	sub	sp, #16
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015396:	2301      	movs	r3, #1
 8015398:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	795b      	ldrb	r3, [r3, #5]
 801539e:	2b02      	cmp	r3, #2
 80153a0:	d001      	beq.n	80153a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80153a2:	f7ee fe05 	bl	8003fb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80153ac:	7bfa      	ldrb	r2, [r7, #15]
 80153ae:	4611      	mov	r1, r2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fe fe73 	bl	801409c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80153bc:	4618      	mov	r0, r3
 80153be:	f7fe fe1f 	bl	8014000 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80153c2:	bf00      	nop
 80153c4:	3710      	adds	r7, #16
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}
	...

080153cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80153da:	4618      	mov	r0, r3
 80153dc:	f7fe fe6e 	bl	80140bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	7a5b      	ldrb	r3, [r3, #9]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d005      	beq.n	80153f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80153e8:	4b04      	ldr	r3, [pc, #16]	; (80153fc <HAL_PCD_SuspendCallback+0x30>)
 80153ea:	691b      	ldr	r3, [r3, #16]
 80153ec:	4a03      	ldr	r2, [pc, #12]	; (80153fc <HAL_PCD_SuspendCallback+0x30>)
 80153ee:	f043 0306 	orr.w	r3, r3, #6
 80153f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80153f4:	bf00      	nop
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	e000ed00 	.word	0xe000ed00

08015400 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	7a5b      	ldrb	r3, [r3, #9]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d007      	beq.n	8015420 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015410:	4b08      	ldr	r3, [pc, #32]	; (8015434 <HAL_PCD_ResumeCallback+0x34>)
 8015412:	691b      	ldr	r3, [r3, #16]
 8015414:	4a07      	ldr	r2, [pc, #28]	; (8015434 <HAL_PCD_ResumeCallback+0x34>)
 8015416:	f023 0306 	bic.w	r3, r3, #6
 801541a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801541c:	f000 f9f8 	bl	8015810 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015426:	4618      	mov	r0, r3
 8015428:	f7fe fe5e 	bl	80140e8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801542c:	bf00      	nop
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	e000ed00 	.word	0xe000ed00

08015438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015440:	4a2b      	ldr	r2, [pc, #172]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	4a29      	ldr	r2, [pc, #164]	; (80154f0 <USBD_LL_Init+0xb8>)
 801544c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8015450:	4b27      	ldr	r3, [pc, #156]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015452:	4a28      	ldr	r2, [pc, #160]	; (80154f4 <USBD_LL_Init+0xbc>)
 8015454:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015456:	4b26      	ldr	r3, [pc, #152]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015458:	2208      	movs	r2, #8
 801545a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801545c:	4b24      	ldr	r3, [pc, #144]	; (80154f0 <USBD_LL_Init+0xb8>)
 801545e:	2202      	movs	r2, #2
 8015460:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015462:	4b23      	ldr	r3, [pc, #140]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015464:	2202      	movs	r2, #2
 8015466:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015468:	4b21      	ldr	r3, [pc, #132]	; (80154f0 <USBD_LL_Init+0xb8>)
 801546a:	2200      	movs	r2, #0
 801546c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801546e:	4b20      	ldr	r3, [pc, #128]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015470:	2200      	movs	r2, #0
 8015472:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015474:	4b1e      	ldr	r3, [pc, #120]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015476:	2200      	movs	r2, #0
 8015478:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801547a:	4b1d      	ldr	r3, [pc, #116]	; (80154f0 <USBD_LL_Init+0xb8>)
 801547c:	2200      	movs	r2, #0
 801547e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015480:	481b      	ldr	r0, [pc, #108]	; (80154f0 <USBD_LL_Init+0xb8>)
 8015482:	f7f4 f815 	bl	80094b0 <HAL_PCD_Init>
 8015486:	4603      	mov	r3, r0
 8015488:	2b00      	cmp	r3, #0
 801548a:	d001      	beq.n	8015490 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801548c:	f7ee fd90 	bl	8003fb0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015496:	2318      	movs	r3, #24
 8015498:	2200      	movs	r2, #0
 801549a:	2100      	movs	r1, #0
 801549c:	f7f5 fccf 	bl	800ae3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80154a6:	2358      	movs	r3, #88	; 0x58
 80154a8:	2200      	movs	r2, #0
 80154aa:	2180      	movs	r1, #128	; 0x80
 80154ac:	f7f5 fcc7 	bl	800ae3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80154b6:	23c0      	movs	r3, #192	; 0xc0
 80154b8:	2200      	movs	r2, #0
 80154ba:	2181      	movs	r1, #129	; 0x81
 80154bc:	f7f5 fcbf 	bl	800ae3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80154c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80154ca:	2200      	movs	r2, #0
 80154cc:	2101      	movs	r1, #1
 80154ce:	f7f5 fcb6 	bl	800ae3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80154d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80154dc:	2200      	movs	r2, #0
 80154de:	2182      	movs	r1, #130	; 0x82
 80154e0:	f7f5 fcad 	bl	800ae3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80154e4:	2300      	movs	r3, #0
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3708      	adds	r7, #8
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	20002d80 	.word	0x20002d80
 80154f4:	40005c00 	.word	0x40005c00

080154f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015500:	2300      	movs	r3, #0
 8015502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015504:	2300      	movs	r3, #0
 8015506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801550e:	4618      	mov	r0, r3
 8015510:	f7f4 f89c 	bl	800964c <HAL_PCD_Start>
 8015514:	4603      	mov	r3, r0
 8015516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015518:	7bfb      	ldrb	r3, [r7, #15]
 801551a:	4618      	mov	r0, r3
 801551c:	f000 f97e 	bl	801581c <USBD_Get_USB_Status>
 8015520:	4603      	mov	r3, r0
 8015522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015524:	7bbb      	ldrb	r3, [r7, #14]
}
 8015526:	4618      	mov	r0, r3
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}

0801552e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801552e:	b580      	push	{r7, lr}
 8015530:	b084      	sub	sp, #16
 8015532:	af00      	add	r7, sp, #0
 8015534:	6078      	str	r0, [r7, #4]
 8015536:	4608      	mov	r0, r1
 8015538:	4611      	mov	r1, r2
 801553a:	461a      	mov	r2, r3
 801553c:	4603      	mov	r3, r0
 801553e:	70fb      	strb	r3, [r7, #3]
 8015540:	460b      	mov	r3, r1
 8015542:	70bb      	strb	r3, [r7, #2]
 8015544:	4613      	mov	r3, r2
 8015546:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015548:	2300      	movs	r3, #0
 801554a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015556:	78bb      	ldrb	r3, [r7, #2]
 8015558:	883a      	ldrh	r2, [r7, #0]
 801555a:	78f9      	ldrb	r1, [r7, #3]
 801555c:	f7f4 f9e3 	bl	8009926 <HAL_PCD_EP_Open>
 8015560:	4603      	mov	r3, r0
 8015562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015564:	7bfb      	ldrb	r3, [r7, #15]
 8015566:	4618      	mov	r0, r3
 8015568:	f000 f958 	bl	801581c <USBD_Get_USB_Status>
 801556c:	4603      	mov	r3, r0
 801556e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015570:	7bbb      	ldrb	r3, [r7, #14]
}
 8015572:	4618      	mov	r0, r3
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}

0801557a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801557a:	b580      	push	{r7, lr}
 801557c:	b084      	sub	sp, #16
 801557e:	af00      	add	r7, sp, #0
 8015580:	6078      	str	r0, [r7, #4]
 8015582:	460b      	mov	r3, r1
 8015584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015586:	2300      	movs	r3, #0
 8015588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801558a:	2300      	movs	r3, #0
 801558c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015594:	78fa      	ldrb	r2, [r7, #3]
 8015596:	4611      	mov	r1, r2
 8015598:	4618      	mov	r0, r3
 801559a:	f7f4 fa21 	bl	80099e0 <HAL_PCD_EP_Close>
 801559e:	4603      	mov	r3, r0
 80155a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155a2:	7bfb      	ldrb	r3, [r7, #15]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f000 f939 	bl	801581c <USBD_Get_USB_Status>
 80155aa:	4603      	mov	r3, r0
 80155ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3710      	adds	r7, #16
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	460b      	mov	r3, r1
 80155c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155c4:	2300      	movs	r3, #0
 80155c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80155d2:	78fa      	ldrb	r2, [r7, #3]
 80155d4:	4611      	mov	r1, r2
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7f4 faca 	bl	8009b70 <HAL_PCD_EP_SetStall>
 80155dc:	4603      	mov	r3, r0
 80155de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155e0:	7bfb      	ldrb	r3, [r7, #15]
 80155e2:	4618      	mov	r0, r3
 80155e4:	f000 f91a 	bl	801581c <USBD_Get_USB_Status>
 80155e8:	4603      	mov	r3, r0
 80155ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b084      	sub	sp, #16
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
 80155fe:	460b      	mov	r3, r1
 8015600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015606:	2300      	movs	r3, #0
 8015608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015610:	78fa      	ldrb	r2, [r7, #3]
 8015612:	4611      	mov	r1, r2
 8015614:	4618      	mov	r0, r3
 8015616:	f7f4 fafd 	bl	8009c14 <HAL_PCD_EP_ClrStall>
 801561a:	4603      	mov	r3, r0
 801561c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801561e:	7bfb      	ldrb	r3, [r7, #15]
 8015620:	4618      	mov	r0, r3
 8015622:	f000 f8fb 	bl	801581c <USBD_Get_USB_Status>
 8015626:	4603      	mov	r3, r0
 8015628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801562a:	7bbb      	ldrb	r3, [r7, #14]
}
 801562c:	4618      	mov	r0, r3
 801562e:	3710      	adds	r7, #16
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015634:	b480      	push	{r7}
 8015636:	b085      	sub	sp, #20
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	460b      	mov	r3, r1
 801563e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015646:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801564c:	2b00      	cmp	r3, #0
 801564e:	da0b      	bge.n	8015668 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015650:	78fb      	ldrb	r3, [r7, #3]
 8015652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015656:	68f9      	ldr	r1, [r7, #12]
 8015658:	4613      	mov	r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	4413      	add	r3, r2
 801565e:	00db      	lsls	r3, r3, #3
 8015660:	440b      	add	r3, r1
 8015662:	3312      	adds	r3, #18
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	e00b      	b.n	8015680 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015668:	78fb      	ldrb	r3, [r7, #3]
 801566a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801566e:	68f9      	ldr	r1, [r7, #12]
 8015670:	4613      	mov	r3, r2
 8015672:	009b      	lsls	r3, r3, #2
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	440b      	add	r3, r1
 801567a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801567e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015680:	4618      	mov	r0, r3
 8015682:	3714      	adds	r7, #20
 8015684:	46bd      	mov	sp, r7
 8015686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568a:	4770      	bx	lr

0801568c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	460b      	mov	r3, r1
 8015696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015698:	2300      	movs	r3, #0
 801569a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801569c:	2300      	movs	r3, #0
 801569e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80156a6:	78fa      	ldrb	r2, [r7, #3]
 80156a8:	4611      	mov	r1, r2
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7f4 f917 	bl	80098de <HAL_PCD_SetAddress>
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156b4:	7bfb      	ldrb	r3, [r7, #15]
 80156b6:	4618      	mov	r0, r3
 80156b8:	f000 f8b0 	bl	801581c <USBD_Get_USB_Status>
 80156bc:	4603      	mov	r3, r0
 80156be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	3710      	adds	r7, #16
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}

080156ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80156ca:	b580      	push	{r7, lr}
 80156cc:	b086      	sub	sp, #24
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	60f8      	str	r0, [r7, #12]
 80156d2:	607a      	str	r2, [r7, #4]
 80156d4:	603b      	str	r3, [r7, #0]
 80156d6:	460b      	mov	r3, r1
 80156d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156da:	2300      	movs	r3, #0
 80156dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80156e8:	7af9      	ldrb	r1, [r7, #11]
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	687a      	ldr	r2, [r7, #4]
 80156ee:	f7f4 fa08 	bl	8009b02 <HAL_PCD_EP_Transmit>
 80156f2:	4603      	mov	r3, r0
 80156f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156f6:	7dfb      	ldrb	r3, [r7, #23]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f000 f88f 	bl	801581c <USBD_Get_USB_Status>
 80156fe:	4603      	mov	r3, r0
 8015700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015702:	7dbb      	ldrb	r3, [r7, #22]
}
 8015704:	4618      	mov	r0, r3
 8015706:	3718      	adds	r7, #24
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	607a      	str	r2, [r7, #4]
 8015716:	603b      	str	r3, [r7, #0]
 8015718:	460b      	mov	r3, r1
 801571a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801571c:	2300      	movs	r3, #0
 801571e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015720:	2300      	movs	r3, #0
 8015722:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801572a:	7af9      	ldrb	r1, [r7, #11]
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	f7f4 f99e 	bl	8009a70 <HAL_PCD_EP_Receive>
 8015734:	4603      	mov	r3, r0
 8015736:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015738:	7dfb      	ldrb	r3, [r7, #23]
 801573a:	4618      	mov	r0, r3
 801573c:	f000 f86e 	bl	801581c <USBD_Get_USB_Status>
 8015740:	4603      	mov	r3, r0
 8015742:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015744:	7dbb      	ldrb	r3, [r7, #22]
}
 8015746:	4618      	mov	r0, r3
 8015748:	3718      	adds	r7, #24
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801574e:	b580      	push	{r7, lr}
 8015750:	b082      	sub	sp, #8
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
 8015756:	460b      	mov	r3, r1
 8015758:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015760:	78fa      	ldrb	r2, [r7, #3]
 8015762:	4611      	mov	r1, r2
 8015764:	4618      	mov	r0, r3
 8015766:	f7f4 f9b4 	bl	8009ad2 <HAL_PCD_EP_GetRxCount>
 801576a:	4603      	mov	r3, r0
}
 801576c:	4618      	mov	r0, r3
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}

08015774 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	460b      	mov	r3, r1
 801577e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015780:	78fb      	ldrb	r3, [r7, #3]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d002      	beq.n	801578c <HAL_PCDEx_LPM_Callback+0x18>
 8015786:	2b01      	cmp	r3, #1
 8015788:	d013      	beq.n	80157b2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801578a:	e023      	b.n	80157d4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	7a5b      	ldrb	r3, [r3, #9]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d007      	beq.n	80157a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015794:	f000 f83c 	bl	8015810 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015798:	4b10      	ldr	r3, [pc, #64]	; (80157dc <HAL_PCDEx_LPM_Callback+0x68>)
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	4a0f      	ldr	r2, [pc, #60]	; (80157dc <HAL_PCDEx_LPM_Callback+0x68>)
 801579e:	f023 0306 	bic.w	r3, r3, #6
 80157a2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fe fc9c 	bl	80140e8 <USBD_LL_Resume>
    break;
 80157b0:	e010      	b.n	80157d4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7fe fc7f 	bl	80140bc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	7a5b      	ldrb	r3, [r3, #9]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d005      	beq.n	80157d2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157c6:	4b05      	ldr	r3, [pc, #20]	; (80157dc <HAL_PCDEx_LPM_Callback+0x68>)
 80157c8:	691b      	ldr	r3, [r3, #16]
 80157ca:	4a04      	ldr	r2, [pc, #16]	; (80157dc <HAL_PCDEx_LPM_Callback+0x68>)
 80157cc:	f043 0306 	orr.w	r3, r3, #6
 80157d0:	6113      	str	r3, [r2, #16]
    break;
 80157d2:	bf00      	nop
}
 80157d4:	bf00      	nop
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	e000ed00 	.word	0xe000ed00

080157e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80157e0:	b480      	push	{r7}
 80157e2:	b083      	sub	sp, #12
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80157e8:	4b03      	ldr	r3, [pc, #12]	; (80157f8 <USBD_static_malloc+0x18>)
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	370c      	adds	r7, #12
 80157ee:	46bd      	mov	sp, r7
 80157f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f4:	4770      	bx	lr
 80157f6:	bf00      	nop
 80157f8:	2000305c 	.word	0x2000305c

080157fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]

}
 8015804:	bf00      	nop
 8015806:	370c      	adds	r7, #12
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr

08015810 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015814:	f7ed fe58 	bl	80034c8 <SystemClock_Config>
}
 8015818:	bf00      	nop
 801581a:	bd80      	pop	{r7, pc}

0801581c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801581c:	b480      	push	{r7}
 801581e:	b085      	sub	sp, #20
 8015820:	af00      	add	r7, sp, #0
 8015822:	4603      	mov	r3, r0
 8015824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015826:	2300      	movs	r3, #0
 8015828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801582a:	79fb      	ldrb	r3, [r7, #7]
 801582c:	2b03      	cmp	r3, #3
 801582e:	d817      	bhi.n	8015860 <USBD_Get_USB_Status+0x44>
 8015830:	a201      	add	r2, pc, #4	; (adr r2, 8015838 <USBD_Get_USB_Status+0x1c>)
 8015832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015836:	bf00      	nop
 8015838:	08015849 	.word	0x08015849
 801583c:	0801584f 	.word	0x0801584f
 8015840:	08015855 	.word	0x08015855
 8015844:	0801585b 	.word	0x0801585b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015848:	2300      	movs	r3, #0
 801584a:	73fb      	strb	r3, [r7, #15]
    break;
 801584c:	e00b      	b.n	8015866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801584e:	2303      	movs	r3, #3
 8015850:	73fb      	strb	r3, [r7, #15]
    break;
 8015852:	e008      	b.n	8015866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015854:	2301      	movs	r3, #1
 8015856:	73fb      	strb	r3, [r7, #15]
    break;
 8015858:	e005      	b.n	8015866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801585a:	2303      	movs	r3, #3
 801585c:	73fb      	strb	r3, [r7, #15]
    break;
 801585e:	e002      	b.n	8015866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015860:	2303      	movs	r3, #3
 8015862:	73fb      	strb	r3, [r7, #15]
    break;
 8015864:	bf00      	nop
  }
  return usb_status;
 8015866:	7bfb      	ldrb	r3, [r7, #15]
}
 8015868:	4618      	mov	r0, r3
 801586a:	3714      	adds	r7, #20
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr

08015874 <__cvt>:
 8015874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015878:	ec55 4b10 	vmov	r4, r5, d0
 801587c:	2d00      	cmp	r5, #0
 801587e:	460e      	mov	r6, r1
 8015880:	4619      	mov	r1, r3
 8015882:	462b      	mov	r3, r5
 8015884:	bfbb      	ittet	lt
 8015886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801588a:	461d      	movlt	r5, r3
 801588c:	2300      	movge	r3, #0
 801588e:	232d      	movlt	r3, #45	; 0x2d
 8015890:	700b      	strb	r3, [r1, #0]
 8015892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015898:	4691      	mov	r9, r2
 801589a:	f023 0820 	bic.w	r8, r3, #32
 801589e:	bfbc      	itt	lt
 80158a0:	4622      	movlt	r2, r4
 80158a2:	4614      	movlt	r4, r2
 80158a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80158a8:	d005      	beq.n	80158b6 <__cvt+0x42>
 80158aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80158ae:	d100      	bne.n	80158b2 <__cvt+0x3e>
 80158b0:	3601      	adds	r6, #1
 80158b2:	2102      	movs	r1, #2
 80158b4:	e000      	b.n	80158b8 <__cvt+0x44>
 80158b6:	2103      	movs	r1, #3
 80158b8:	ab03      	add	r3, sp, #12
 80158ba:	9301      	str	r3, [sp, #4]
 80158bc:	ab02      	add	r3, sp, #8
 80158be:	9300      	str	r3, [sp, #0]
 80158c0:	ec45 4b10 	vmov	d0, r4, r5
 80158c4:	4653      	mov	r3, sl
 80158c6:	4632      	mov	r2, r6
 80158c8:	f001 f88e 	bl	80169e8 <_dtoa_r>
 80158cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80158d0:	4607      	mov	r7, r0
 80158d2:	d102      	bne.n	80158da <__cvt+0x66>
 80158d4:	f019 0f01 	tst.w	r9, #1
 80158d8:	d022      	beq.n	8015920 <__cvt+0xac>
 80158da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80158de:	eb07 0906 	add.w	r9, r7, r6
 80158e2:	d110      	bne.n	8015906 <__cvt+0x92>
 80158e4:	783b      	ldrb	r3, [r7, #0]
 80158e6:	2b30      	cmp	r3, #48	; 0x30
 80158e8:	d10a      	bne.n	8015900 <__cvt+0x8c>
 80158ea:	2200      	movs	r2, #0
 80158ec:	2300      	movs	r3, #0
 80158ee:	4620      	mov	r0, r4
 80158f0:	4629      	mov	r1, r5
 80158f2:	f7eb f911 	bl	8000b18 <__aeabi_dcmpeq>
 80158f6:	b918      	cbnz	r0, 8015900 <__cvt+0x8c>
 80158f8:	f1c6 0601 	rsb	r6, r6, #1
 80158fc:	f8ca 6000 	str.w	r6, [sl]
 8015900:	f8da 3000 	ldr.w	r3, [sl]
 8015904:	4499      	add	r9, r3
 8015906:	2200      	movs	r2, #0
 8015908:	2300      	movs	r3, #0
 801590a:	4620      	mov	r0, r4
 801590c:	4629      	mov	r1, r5
 801590e:	f7eb f903 	bl	8000b18 <__aeabi_dcmpeq>
 8015912:	b108      	cbz	r0, 8015918 <__cvt+0xa4>
 8015914:	f8cd 900c 	str.w	r9, [sp, #12]
 8015918:	2230      	movs	r2, #48	; 0x30
 801591a:	9b03      	ldr	r3, [sp, #12]
 801591c:	454b      	cmp	r3, r9
 801591e:	d307      	bcc.n	8015930 <__cvt+0xbc>
 8015920:	9b03      	ldr	r3, [sp, #12]
 8015922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015924:	1bdb      	subs	r3, r3, r7
 8015926:	4638      	mov	r0, r7
 8015928:	6013      	str	r3, [r2, #0]
 801592a:	b004      	add	sp, #16
 801592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015930:	1c59      	adds	r1, r3, #1
 8015932:	9103      	str	r1, [sp, #12]
 8015934:	701a      	strb	r2, [r3, #0]
 8015936:	e7f0      	b.n	801591a <__cvt+0xa6>

08015938 <__exponent>:
 8015938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801593a:	4603      	mov	r3, r0
 801593c:	2900      	cmp	r1, #0
 801593e:	bfb8      	it	lt
 8015940:	4249      	neglt	r1, r1
 8015942:	f803 2b02 	strb.w	r2, [r3], #2
 8015946:	bfb4      	ite	lt
 8015948:	222d      	movlt	r2, #45	; 0x2d
 801594a:	222b      	movge	r2, #43	; 0x2b
 801594c:	2909      	cmp	r1, #9
 801594e:	7042      	strb	r2, [r0, #1]
 8015950:	dd2a      	ble.n	80159a8 <__exponent+0x70>
 8015952:	f10d 0207 	add.w	r2, sp, #7
 8015956:	4617      	mov	r7, r2
 8015958:	260a      	movs	r6, #10
 801595a:	4694      	mov	ip, r2
 801595c:	fb91 f5f6 	sdiv	r5, r1, r6
 8015960:	fb06 1415 	mls	r4, r6, r5, r1
 8015964:	3430      	adds	r4, #48	; 0x30
 8015966:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801596a:	460c      	mov	r4, r1
 801596c:	2c63      	cmp	r4, #99	; 0x63
 801596e:	f102 32ff 	add.w	r2, r2, #4294967295
 8015972:	4629      	mov	r1, r5
 8015974:	dcf1      	bgt.n	801595a <__exponent+0x22>
 8015976:	3130      	adds	r1, #48	; 0x30
 8015978:	f1ac 0402 	sub.w	r4, ip, #2
 801597c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015980:	1c41      	adds	r1, r0, #1
 8015982:	4622      	mov	r2, r4
 8015984:	42ba      	cmp	r2, r7
 8015986:	d30a      	bcc.n	801599e <__exponent+0x66>
 8015988:	f10d 0209 	add.w	r2, sp, #9
 801598c:	eba2 020c 	sub.w	r2, r2, ip
 8015990:	42bc      	cmp	r4, r7
 8015992:	bf88      	it	hi
 8015994:	2200      	movhi	r2, #0
 8015996:	4413      	add	r3, r2
 8015998:	1a18      	subs	r0, r3, r0
 801599a:	b003      	add	sp, #12
 801599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801599e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80159a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80159a6:	e7ed      	b.n	8015984 <__exponent+0x4c>
 80159a8:	2330      	movs	r3, #48	; 0x30
 80159aa:	3130      	adds	r1, #48	; 0x30
 80159ac:	7083      	strb	r3, [r0, #2]
 80159ae:	70c1      	strb	r1, [r0, #3]
 80159b0:	1d03      	adds	r3, r0, #4
 80159b2:	e7f1      	b.n	8015998 <__exponent+0x60>

080159b4 <_printf_float>:
 80159b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b8:	ed2d 8b02 	vpush	{d8}
 80159bc:	b08d      	sub	sp, #52	; 0x34
 80159be:	460c      	mov	r4, r1
 80159c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80159c4:	4616      	mov	r6, r2
 80159c6:	461f      	mov	r7, r3
 80159c8:	4605      	mov	r5, r0
 80159ca:	f000 fef7 	bl	80167bc <_localeconv_r>
 80159ce:	f8d0 a000 	ldr.w	sl, [r0]
 80159d2:	4650      	mov	r0, sl
 80159d4:	f7ea fc74 	bl	80002c0 <strlen>
 80159d8:	2300      	movs	r3, #0
 80159da:	930a      	str	r3, [sp, #40]	; 0x28
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	9305      	str	r3, [sp, #20]
 80159e0:	f8d8 3000 	ldr.w	r3, [r8]
 80159e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80159e8:	3307      	adds	r3, #7
 80159ea:	f023 0307 	bic.w	r3, r3, #7
 80159ee:	f103 0208 	add.w	r2, r3, #8
 80159f2:	f8c8 2000 	str.w	r2, [r8]
 80159f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80159fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159fe:	9307      	str	r3, [sp, #28]
 8015a00:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a04:	ee08 0a10 	vmov	s16, r0
 8015a08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8015a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a10:	4b9e      	ldr	r3, [pc, #632]	; (8015c8c <_printf_float+0x2d8>)
 8015a12:	f04f 32ff 	mov.w	r2, #4294967295
 8015a16:	f7eb f8b1 	bl	8000b7c <__aeabi_dcmpun>
 8015a1a:	bb88      	cbnz	r0, 8015a80 <_printf_float+0xcc>
 8015a1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a20:	4b9a      	ldr	r3, [pc, #616]	; (8015c8c <_printf_float+0x2d8>)
 8015a22:	f04f 32ff 	mov.w	r2, #4294967295
 8015a26:	f7eb f88b 	bl	8000b40 <__aeabi_dcmple>
 8015a2a:	bb48      	cbnz	r0, 8015a80 <_printf_float+0xcc>
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	2300      	movs	r3, #0
 8015a30:	4640      	mov	r0, r8
 8015a32:	4649      	mov	r1, r9
 8015a34:	f7eb f87a 	bl	8000b2c <__aeabi_dcmplt>
 8015a38:	b110      	cbz	r0, 8015a40 <_printf_float+0x8c>
 8015a3a:	232d      	movs	r3, #45	; 0x2d
 8015a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a40:	4a93      	ldr	r2, [pc, #588]	; (8015c90 <_printf_float+0x2dc>)
 8015a42:	4b94      	ldr	r3, [pc, #592]	; (8015c94 <_printf_float+0x2e0>)
 8015a44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015a48:	bf94      	ite	ls
 8015a4a:	4690      	movls	r8, r2
 8015a4c:	4698      	movhi	r8, r3
 8015a4e:	2303      	movs	r3, #3
 8015a50:	6123      	str	r3, [r4, #16]
 8015a52:	9b05      	ldr	r3, [sp, #20]
 8015a54:	f023 0304 	bic.w	r3, r3, #4
 8015a58:	6023      	str	r3, [r4, #0]
 8015a5a:	f04f 0900 	mov.w	r9, #0
 8015a5e:	9700      	str	r7, [sp, #0]
 8015a60:	4633      	mov	r3, r6
 8015a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a64:	4621      	mov	r1, r4
 8015a66:	4628      	mov	r0, r5
 8015a68:	f000 f9da 	bl	8015e20 <_printf_common>
 8015a6c:	3001      	adds	r0, #1
 8015a6e:	f040 8090 	bne.w	8015b92 <_printf_float+0x1de>
 8015a72:	f04f 30ff 	mov.w	r0, #4294967295
 8015a76:	b00d      	add	sp, #52	; 0x34
 8015a78:	ecbd 8b02 	vpop	{d8}
 8015a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a80:	4642      	mov	r2, r8
 8015a82:	464b      	mov	r3, r9
 8015a84:	4640      	mov	r0, r8
 8015a86:	4649      	mov	r1, r9
 8015a88:	f7eb f878 	bl	8000b7c <__aeabi_dcmpun>
 8015a8c:	b140      	cbz	r0, 8015aa0 <_printf_float+0xec>
 8015a8e:	464b      	mov	r3, r9
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	bfbc      	itt	lt
 8015a94:	232d      	movlt	r3, #45	; 0x2d
 8015a96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015a9a:	4a7f      	ldr	r2, [pc, #508]	; (8015c98 <_printf_float+0x2e4>)
 8015a9c:	4b7f      	ldr	r3, [pc, #508]	; (8015c9c <_printf_float+0x2e8>)
 8015a9e:	e7d1      	b.n	8015a44 <_printf_float+0x90>
 8015aa0:	6863      	ldr	r3, [r4, #4]
 8015aa2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015aa6:	9206      	str	r2, [sp, #24]
 8015aa8:	1c5a      	adds	r2, r3, #1
 8015aaa:	d13f      	bne.n	8015b2c <_printf_float+0x178>
 8015aac:	2306      	movs	r3, #6
 8015aae:	6063      	str	r3, [r4, #4]
 8015ab0:	9b05      	ldr	r3, [sp, #20]
 8015ab2:	6861      	ldr	r1, [r4, #4]
 8015ab4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015ab8:	2300      	movs	r3, #0
 8015aba:	9303      	str	r3, [sp, #12]
 8015abc:	ab0a      	add	r3, sp, #40	; 0x28
 8015abe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015ac2:	ab09      	add	r3, sp, #36	; 0x24
 8015ac4:	ec49 8b10 	vmov	d0, r8, r9
 8015ac8:	9300      	str	r3, [sp, #0]
 8015aca:	6022      	str	r2, [r4, #0]
 8015acc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ad0:	4628      	mov	r0, r5
 8015ad2:	f7ff fecf 	bl	8015874 <__cvt>
 8015ad6:	9b06      	ldr	r3, [sp, #24]
 8015ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ada:	2b47      	cmp	r3, #71	; 0x47
 8015adc:	4680      	mov	r8, r0
 8015ade:	d108      	bne.n	8015af2 <_printf_float+0x13e>
 8015ae0:	1cc8      	adds	r0, r1, #3
 8015ae2:	db02      	blt.n	8015aea <_printf_float+0x136>
 8015ae4:	6863      	ldr	r3, [r4, #4]
 8015ae6:	4299      	cmp	r1, r3
 8015ae8:	dd41      	ble.n	8015b6e <_printf_float+0x1ba>
 8015aea:	f1ab 0302 	sub.w	r3, fp, #2
 8015aee:	fa5f fb83 	uxtb.w	fp, r3
 8015af2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015af6:	d820      	bhi.n	8015b3a <_printf_float+0x186>
 8015af8:	3901      	subs	r1, #1
 8015afa:	465a      	mov	r2, fp
 8015afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b00:	9109      	str	r1, [sp, #36]	; 0x24
 8015b02:	f7ff ff19 	bl	8015938 <__exponent>
 8015b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b08:	1813      	adds	r3, r2, r0
 8015b0a:	2a01      	cmp	r2, #1
 8015b0c:	4681      	mov	r9, r0
 8015b0e:	6123      	str	r3, [r4, #16]
 8015b10:	dc02      	bgt.n	8015b18 <_printf_float+0x164>
 8015b12:	6822      	ldr	r2, [r4, #0]
 8015b14:	07d2      	lsls	r2, r2, #31
 8015b16:	d501      	bpl.n	8015b1c <_printf_float+0x168>
 8015b18:	3301      	adds	r3, #1
 8015b1a:	6123      	str	r3, [r4, #16]
 8015b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d09c      	beq.n	8015a5e <_printf_float+0xaa>
 8015b24:	232d      	movs	r3, #45	; 0x2d
 8015b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b2a:	e798      	b.n	8015a5e <_printf_float+0xaa>
 8015b2c:	9a06      	ldr	r2, [sp, #24]
 8015b2e:	2a47      	cmp	r2, #71	; 0x47
 8015b30:	d1be      	bne.n	8015ab0 <_printf_float+0xfc>
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d1bc      	bne.n	8015ab0 <_printf_float+0xfc>
 8015b36:	2301      	movs	r3, #1
 8015b38:	e7b9      	b.n	8015aae <_printf_float+0xfa>
 8015b3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015b3e:	d118      	bne.n	8015b72 <_printf_float+0x1be>
 8015b40:	2900      	cmp	r1, #0
 8015b42:	6863      	ldr	r3, [r4, #4]
 8015b44:	dd0b      	ble.n	8015b5e <_printf_float+0x1aa>
 8015b46:	6121      	str	r1, [r4, #16]
 8015b48:	b913      	cbnz	r3, 8015b50 <_printf_float+0x19c>
 8015b4a:	6822      	ldr	r2, [r4, #0]
 8015b4c:	07d0      	lsls	r0, r2, #31
 8015b4e:	d502      	bpl.n	8015b56 <_printf_float+0x1a2>
 8015b50:	3301      	adds	r3, #1
 8015b52:	440b      	add	r3, r1
 8015b54:	6123      	str	r3, [r4, #16]
 8015b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8015b58:	f04f 0900 	mov.w	r9, #0
 8015b5c:	e7de      	b.n	8015b1c <_printf_float+0x168>
 8015b5e:	b913      	cbnz	r3, 8015b66 <_printf_float+0x1b2>
 8015b60:	6822      	ldr	r2, [r4, #0]
 8015b62:	07d2      	lsls	r2, r2, #31
 8015b64:	d501      	bpl.n	8015b6a <_printf_float+0x1b6>
 8015b66:	3302      	adds	r3, #2
 8015b68:	e7f4      	b.n	8015b54 <_printf_float+0x1a0>
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e7f2      	b.n	8015b54 <_printf_float+0x1a0>
 8015b6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b74:	4299      	cmp	r1, r3
 8015b76:	db05      	blt.n	8015b84 <_printf_float+0x1d0>
 8015b78:	6823      	ldr	r3, [r4, #0]
 8015b7a:	6121      	str	r1, [r4, #16]
 8015b7c:	07d8      	lsls	r0, r3, #31
 8015b7e:	d5ea      	bpl.n	8015b56 <_printf_float+0x1a2>
 8015b80:	1c4b      	adds	r3, r1, #1
 8015b82:	e7e7      	b.n	8015b54 <_printf_float+0x1a0>
 8015b84:	2900      	cmp	r1, #0
 8015b86:	bfd4      	ite	le
 8015b88:	f1c1 0202 	rsble	r2, r1, #2
 8015b8c:	2201      	movgt	r2, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	e7e0      	b.n	8015b54 <_printf_float+0x1a0>
 8015b92:	6823      	ldr	r3, [r4, #0]
 8015b94:	055a      	lsls	r2, r3, #21
 8015b96:	d407      	bmi.n	8015ba8 <_printf_float+0x1f4>
 8015b98:	6923      	ldr	r3, [r4, #16]
 8015b9a:	4642      	mov	r2, r8
 8015b9c:	4631      	mov	r1, r6
 8015b9e:	4628      	mov	r0, r5
 8015ba0:	47b8      	blx	r7
 8015ba2:	3001      	adds	r0, #1
 8015ba4:	d12c      	bne.n	8015c00 <_printf_float+0x24c>
 8015ba6:	e764      	b.n	8015a72 <_printf_float+0xbe>
 8015ba8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015bac:	f240 80e0 	bls.w	8015d70 <_printf_float+0x3bc>
 8015bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	f7ea ffae 	bl	8000b18 <__aeabi_dcmpeq>
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	d034      	beq.n	8015c2a <_printf_float+0x276>
 8015bc0:	4a37      	ldr	r2, [pc, #220]	; (8015ca0 <_printf_float+0x2ec>)
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	4631      	mov	r1, r6
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	47b8      	blx	r7
 8015bca:	3001      	adds	r0, #1
 8015bcc:	f43f af51 	beq.w	8015a72 <_printf_float+0xbe>
 8015bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	db02      	blt.n	8015bde <_printf_float+0x22a>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	07d8      	lsls	r0, r3, #31
 8015bdc:	d510      	bpl.n	8015c00 <_printf_float+0x24c>
 8015bde:	ee18 3a10 	vmov	r3, s16
 8015be2:	4652      	mov	r2, sl
 8015be4:	4631      	mov	r1, r6
 8015be6:	4628      	mov	r0, r5
 8015be8:	47b8      	blx	r7
 8015bea:	3001      	adds	r0, #1
 8015bec:	f43f af41 	beq.w	8015a72 <_printf_float+0xbe>
 8015bf0:	f04f 0800 	mov.w	r8, #0
 8015bf4:	f104 091a 	add.w	r9, r4, #26
 8015bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bfa:	3b01      	subs	r3, #1
 8015bfc:	4543      	cmp	r3, r8
 8015bfe:	dc09      	bgt.n	8015c14 <_printf_float+0x260>
 8015c00:	6823      	ldr	r3, [r4, #0]
 8015c02:	079b      	lsls	r3, r3, #30
 8015c04:	f100 8107 	bmi.w	8015e16 <_printf_float+0x462>
 8015c08:	68e0      	ldr	r0, [r4, #12]
 8015c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c0c:	4298      	cmp	r0, r3
 8015c0e:	bfb8      	it	lt
 8015c10:	4618      	movlt	r0, r3
 8015c12:	e730      	b.n	8015a76 <_printf_float+0xc2>
 8015c14:	2301      	movs	r3, #1
 8015c16:	464a      	mov	r2, r9
 8015c18:	4631      	mov	r1, r6
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	47b8      	blx	r7
 8015c1e:	3001      	adds	r0, #1
 8015c20:	f43f af27 	beq.w	8015a72 <_printf_float+0xbe>
 8015c24:	f108 0801 	add.w	r8, r8, #1
 8015c28:	e7e6      	b.n	8015bf8 <_printf_float+0x244>
 8015c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	dc39      	bgt.n	8015ca4 <_printf_float+0x2f0>
 8015c30:	4a1b      	ldr	r2, [pc, #108]	; (8015ca0 <_printf_float+0x2ec>)
 8015c32:	2301      	movs	r3, #1
 8015c34:	4631      	mov	r1, r6
 8015c36:	4628      	mov	r0, r5
 8015c38:	47b8      	blx	r7
 8015c3a:	3001      	adds	r0, #1
 8015c3c:	f43f af19 	beq.w	8015a72 <_printf_float+0xbe>
 8015c40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c44:	4313      	orrs	r3, r2
 8015c46:	d102      	bne.n	8015c4e <_printf_float+0x29a>
 8015c48:	6823      	ldr	r3, [r4, #0]
 8015c4a:	07d9      	lsls	r1, r3, #31
 8015c4c:	d5d8      	bpl.n	8015c00 <_printf_float+0x24c>
 8015c4e:	ee18 3a10 	vmov	r3, s16
 8015c52:	4652      	mov	r2, sl
 8015c54:	4631      	mov	r1, r6
 8015c56:	4628      	mov	r0, r5
 8015c58:	47b8      	blx	r7
 8015c5a:	3001      	adds	r0, #1
 8015c5c:	f43f af09 	beq.w	8015a72 <_printf_float+0xbe>
 8015c60:	f04f 0900 	mov.w	r9, #0
 8015c64:	f104 0a1a 	add.w	sl, r4, #26
 8015c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6a:	425b      	negs	r3, r3
 8015c6c:	454b      	cmp	r3, r9
 8015c6e:	dc01      	bgt.n	8015c74 <_printf_float+0x2c0>
 8015c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c72:	e792      	b.n	8015b9a <_printf_float+0x1e6>
 8015c74:	2301      	movs	r3, #1
 8015c76:	4652      	mov	r2, sl
 8015c78:	4631      	mov	r1, r6
 8015c7a:	4628      	mov	r0, r5
 8015c7c:	47b8      	blx	r7
 8015c7e:	3001      	adds	r0, #1
 8015c80:	f43f aef7 	beq.w	8015a72 <_printf_float+0xbe>
 8015c84:	f109 0901 	add.w	r9, r9, #1
 8015c88:	e7ee      	b.n	8015c68 <_printf_float+0x2b4>
 8015c8a:	bf00      	nop
 8015c8c:	7fefffff 	.word	0x7fefffff
 8015c90:	0801cc9c 	.word	0x0801cc9c
 8015c94:	0801cca0 	.word	0x0801cca0
 8015c98:	0801cca4 	.word	0x0801cca4
 8015c9c:	0801cca8 	.word	0x0801cca8
 8015ca0:	0801ccac 	.word	0x0801ccac
 8015ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	bfa8      	it	ge
 8015cac:	461a      	movge	r2, r3
 8015cae:	2a00      	cmp	r2, #0
 8015cb0:	4691      	mov	r9, r2
 8015cb2:	dc37      	bgt.n	8015d24 <_printf_float+0x370>
 8015cb4:	f04f 0b00 	mov.w	fp, #0
 8015cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015cbc:	f104 021a 	add.w	r2, r4, #26
 8015cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015cc2:	9305      	str	r3, [sp, #20]
 8015cc4:	eba3 0309 	sub.w	r3, r3, r9
 8015cc8:	455b      	cmp	r3, fp
 8015cca:	dc33      	bgt.n	8015d34 <_printf_float+0x380>
 8015ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	db3b      	blt.n	8015d4c <_printf_float+0x398>
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	07da      	lsls	r2, r3, #31
 8015cd8:	d438      	bmi.n	8015d4c <_printf_float+0x398>
 8015cda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cde:	eba2 0903 	sub.w	r9, r2, r3
 8015ce2:	9b05      	ldr	r3, [sp, #20]
 8015ce4:	1ad2      	subs	r2, r2, r3
 8015ce6:	4591      	cmp	r9, r2
 8015ce8:	bfa8      	it	ge
 8015cea:	4691      	movge	r9, r2
 8015cec:	f1b9 0f00 	cmp.w	r9, #0
 8015cf0:	dc35      	bgt.n	8015d5e <_printf_float+0x3aa>
 8015cf2:	f04f 0800 	mov.w	r8, #0
 8015cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015cfa:	f104 0a1a 	add.w	sl, r4, #26
 8015cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d02:	1a9b      	subs	r3, r3, r2
 8015d04:	eba3 0309 	sub.w	r3, r3, r9
 8015d08:	4543      	cmp	r3, r8
 8015d0a:	f77f af79 	ble.w	8015c00 <_printf_float+0x24c>
 8015d0e:	2301      	movs	r3, #1
 8015d10:	4652      	mov	r2, sl
 8015d12:	4631      	mov	r1, r6
 8015d14:	4628      	mov	r0, r5
 8015d16:	47b8      	blx	r7
 8015d18:	3001      	adds	r0, #1
 8015d1a:	f43f aeaa 	beq.w	8015a72 <_printf_float+0xbe>
 8015d1e:	f108 0801 	add.w	r8, r8, #1
 8015d22:	e7ec      	b.n	8015cfe <_printf_float+0x34a>
 8015d24:	4613      	mov	r3, r2
 8015d26:	4631      	mov	r1, r6
 8015d28:	4642      	mov	r2, r8
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	47b8      	blx	r7
 8015d2e:	3001      	adds	r0, #1
 8015d30:	d1c0      	bne.n	8015cb4 <_printf_float+0x300>
 8015d32:	e69e      	b.n	8015a72 <_printf_float+0xbe>
 8015d34:	2301      	movs	r3, #1
 8015d36:	4631      	mov	r1, r6
 8015d38:	4628      	mov	r0, r5
 8015d3a:	9205      	str	r2, [sp, #20]
 8015d3c:	47b8      	blx	r7
 8015d3e:	3001      	adds	r0, #1
 8015d40:	f43f ae97 	beq.w	8015a72 <_printf_float+0xbe>
 8015d44:	9a05      	ldr	r2, [sp, #20]
 8015d46:	f10b 0b01 	add.w	fp, fp, #1
 8015d4a:	e7b9      	b.n	8015cc0 <_printf_float+0x30c>
 8015d4c:	ee18 3a10 	vmov	r3, s16
 8015d50:	4652      	mov	r2, sl
 8015d52:	4631      	mov	r1, r6
 8015d54:	4628      	mov	r0, r5
 8015d56:	47b8      	blx	r7
 8015d58:	3001      	adds	r0, #1
 8015d5a:	d1be      	bne.n	8015cda <_printf_float+0x326>
 8015d5c:	e689      	b.n	8015a72 <_printf_float+0xbe>
 8015d5e:	9a05      	ldr	r2, [sp, #20]
 8015d60:	464b      	mov	r3, r9
 8015d62:	4442      	add	r2, r8
 8015d64:	4631      	mov	r1, r6
 8015d66:	4628      	mov	r0, r5
 8015d68:	47b8      	blx	r7
 8015d6a:	3001      	adds	r0, #1
 8015d6c:	d1c1      	bne.n	8015cf2 <_printf_float+0x33e>
 8015d6e:	e680      	b.n	8015a72 <_printf_float+0xbe>
 8015d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d72:	2a01      	cmp	r2, #1
 8015d74:	dc01      	bgt.n	8015d7a <_printf_float+0x3c6>
 8015d76:	07db      	lsls	r3, r3, #31
 8015d78:	d53a      	bpl.n	8015df0 <_printf_float+0x43c>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	4642      	mov	r2, r8
 8015d7e:	4631      	mov	r1, r6
 8015d80:	4628      	mov	r0, r5
 8015d82:	47b8      	blx	r7
 8015d84:	3001      	adds	r0, #1
 8015d86:	f43f ae74 	beq.w	8015a72 <_printf_float+0xbe>
 8015d8a:	ee18 3a10 	vmov	r3, s16
 8015d8e:	4652      	mov	r2, sl
 8015d90:	4631      	mov	r1, r6
 8015d92:	4628      	mov	r0, r5
 8015d94:	47b8      	blx	r7
 8015d96:	3001      	adds	r0, #1
 8015d98:	f43f ae6b 	beq.w	8015a72 <_printf_float+0xbe>
 8015d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015da0:	2200      	movs	r2, #0
 8015da2:	2300      	movs	r3, #0
 8015da4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015da8:	f7ea feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8015dac:	b9d8      	cbnz	r0, 8015de6 <_printf_float+0x432>
 8015dae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015db2:	f108 0201 	add.w	r2, r8, #1
 8015db6:	4631      	mov	r1, r6
 8015db8:	4628      	mov	r0, r5
 8015dba:	47b8      	blx	r7
 8015dbc:	3001      	adds	r0, #1
 8015dbe:	d10e      	bne.n	8015dde <_printf_float+0x42a>
 8015dc0:	e657      	b.n	8015a72 <_printf_float+0xbe>
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	4652      	mov	r2, sl
 8015dc6:	4631      	mov	r1, r6
 8015dc8:	4628      	mov	r0, r5
 8015dca:	47b8      	blx	r7
 8015dcc:	3001      	adds	r0, #1
 8015dce:	f43f ae50 	beq.w	8015a72 <_printf_float+0xbe>
 8015dd2:	f108 0801 	add.w	r8, r8, #1
 8015dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	4543      	cmp	r3, r8
 8015ddc:	dcf1      	bgt.n	8015dc2 <_printf_float+0x40e>
 8015dde:	464b      	mov	r3, r9
 8015de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015de4:	e6da      	b.n	8015b9c <_printf_float+0x1e8>
 8015de6:	f04f 0800 	mov.w	r8, #0
 8015dea:	f104 0a1a 	add.w	sl, r4, #26
 8015dee:	e7f2      	b.n	8015dd6 <_printf_float+0x422>
 8015df0:	2301      	movs	r3, #1
 8015df2:	4642      	mov	r2, r8
 8015df4:	e7df      	b.n	8015db6 <_printf_float+0x402>
 8015df6:	2301      	movs	r3, #1
 8015df8:	464a      	mov	r2, r9
 8015dfa:	4631      	mov	r1, r6
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	47b8      	blx	r7
 8015e00:	3001      	adds	r0, #1
 8015e02:	f43f ae36 	beq.w	8015a72 <_printf_float+0xbe>
 8015e06:	f108 0801 	add.w	r8, r8, #1
 8015e0a:	68e3      	ldr	r3, [r4, #12]
 8015e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e0e:	1a5b      	subs	r3, r3, r1
 8015e10:	4543      	cmp	r3, r8
 8015e12:	dcf0      	bgt.n	8015df6 <_printf_float+0x442>
 8015e14:	e6f8      	b.n	8015c08 <_printf_float+0x254>
 8015e16:	f04f 0800 	mov.w	r8, #0
 8015e1a:	f104 0919 	add.w	r9, r4, #25
 8015e1e:	e7f4      	b.n	8015e0a <_printf_float+0x456>

08015e20 <_printf_common>:
 8015e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e24:	4616      	mov	r6, r2
 8015e26:	4699      	mov	r9, r3
 8015e28:	688a      	ldr	r2, [r1, #8]
 8015e2a:	690b      	ldr	r3, [r1, #16]
 8015e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e30:	4293      	cmp	r3, r2
 8015e32:	bfb8      	it	lt
 8015e34:	4613      	movlt	r3, r2
 8015e36:	6033      	str	r3, [r6, #0]
 8015e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e3c:	4607      	mov	r7, r0
 8015e3e:	460c      	mov	r4, r1
 8015e40:	b10a      	cbz	r2, 8015e46 <_printf_common+0x26>
 8015e42:	3301      	adds	r3, #1
 8015e44:	6033      	str	r3, [r6, #0]
 8015e46:	6823      	ldr	r3, [r4, #0]
 8015e48:	0699      	lsls	r1, r3, #26
 8015e4a:	bf42      	ittt	mi
 8015e4c:	6833      	ldrmi	r3, [r6, #0]
 8015e4e:	3302      	addmi	r3, #2
 8015e50:	6033      	strmi	r3, [r6, #0]
 8015e52:	6825      	ldr	r5, [r4, #0]
 8015e54:	f015 0506 	ands.w	r5, r5, #6
 8015e58:	d106      	bne.n	8015e68 <_printf_common+0x48>
 8015e5a:	f104 0a19 	add.w	sl, r4, #25
 8015e5e:	68e3      	ldr	r3, [r4, #12]
 8015e60:	6832      	ldr	r2, [r6, #0]
 8015e62:	1a9b      	subs	r3, r3, r2
 8015e64:	42ab      	cmp	r3, r5
 8015e66:	dc26      	bgt.n	8015eb6 <_printf_common+0x96>
 8015e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015e6c:	1e13      	subs	r3, r2, #0
 8015e6e:	6822      	ldr	r2, [r4, #0]
 8015e70:	bf18      	it	ne
 8015e72:	2301      	movne	r3, #1
 8015e74:	0692      	lsls	r2, r2, #26
 8015e76:	d42b      	bmi.n	8015ed0 <_printf_common+0xb0>
 8015e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e7c:	4649      	mov	r1, r9
 8015e7e:	4638      	mov	r0, r7
 8015e80:	47c0      	blx	r8
 8015e82:	3001      	adds	r0, #1
 8015e84:	d01e      	beq.n	8015ec4 <_printf_common+0xa4>
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	6922      	ldr	r2, [r4, #16]
 8015e8a:	f003 0306 	and.w	r3, r3, #6
 8015e8e:	2b04      	cmp	r3, #4
 8015e90:	bf02      	ittt	eq
 8015e92:	68e5      	ldreq	r5, [r4, #12]
 8015e94:	6833      	ldreq	r3, [r6, #0]
 8015e96:	1aed      	subeq	r5, r5, r3
 8015e98:	68a3      	ldr	r3, [r4, #8]
 8015e9a:	bf0c      	ite	eq
 8015e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ea0:	2500      	movne	r5, #0
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	bfc4      	itt	gt
 8015ea6:	1a9b      	subgt	r3, r3, r2
 8015ea8:	18ed      	addgt	r5, r5, r3
 8015eaa:	2600      	movs	r6, #0
 8015eac:	341a      	adds	r4, #26
 8015eae:	42b5      	cmp	r5, r6
 8015eb0:	d11a      	bne.n	8015ee8 <_printf_common+0xc8>
 8015eb2:	2000      	movs	r0, #0
 8015eb4:	e008      	b.n	8015ec8 <_printf_common+0xa8>
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	4652      	mov	r2, sl
 8015eba:	4649      	mov	r1, r9
 8015ebc:	4638      	mov	r0, r7
 8015ebe:	47c0      	blx	r8
 8015ec0:	3001      	adds	r0, #1
 8015ec2:	d103      	bne.n	8015ecc <_printf_common+0xac>
 8015ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8015ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ecc:	3501      	adds	r5, #1
 8015ece:	e7c6      	b.n	8015e5e <_printf_common+0x3e>
 8015ed0:	18e1      	adds	r1, r4, r3
 8015ed2:	1c5a      	adds	r2, r3, #1
 8015ed4:	2030      	movs	r0, #48	; 0x30
 8015ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015eda:	4422      	add	r2, r4
 8015edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ee4:	3302      	adds	r3, #2
 8015ee6:	e7c7      	b.n	8015e78 <_printf_common+0x58>
 8015ee8:	2301      	movs	r3, #1
 8015eea:	4622      	mov	r2, r4
 8015eec:	4649      	mov	r1, r9
 8015eee:	4638      	mov	r0, r7
 8015ef0:	47c0      	blx	r8
 8015ef2:	3001      	adds	r0, #1
 8015ef4:	d0e6      	beq.n	8015ec4 <_printf_common+0xa4>
 8015ef6:	3601      	adds	r6, #1
 8015ef8:	e7d9      	b.n	8015eae <_printf_common+0x8e>
	...

08015efc <_printf_i>:
 8015efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f00:	7e0f      	ldrb	r7, [r1, #24]
 8015f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015f04:	2f78      	cmp	r7, #120	; 0x78
 8015f06:	4691      	mov	r9, r2
 8015f08:	4680      	mov	r8, r0
 8015f0a:	460c      	mov	r4, r1
 8015f0c:	469a      	mov	sl, r3
 8015f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015f12:	d807      	bhi.n	8015f24 <_printf_i+0x28>
 8015f14:	2f62      	cmp	r7, #98	; 0x62
 8015f16:	d80a      	bhi.n	8015f2e <_printf_i+0x32>
 8015f18:	2f00      	cmp	r7, #0
 8015f1a:	f000 80d4 	beq.w	80160c6 <_printf_i+0x1ca>
 8015f1e:	2f58      	cmp	r7, #88	; 0x58
 8015f20:	f000 80c0 	beq.w	80160a4 <_printf_i+0x1a8>
 8015f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015f2c:	e03a      	b.n	8015fa4 <_printf_i+0xa8>
 8015f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015f32:	2b15      	cmp	r3, #21
 8015f34:	d8f6      	bhi.n	8015f24 <_printf_i+0x28>
 8015f36:	a101      	add	r1, pc, #4	; (adr r1, 8015f3c <_printf_i+0x40>)
 8015f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f3c:	08015f95 	.word	0x08015f95
 8015f40:	08015fa9 	.word	0x08015fa9
 8015f44:	08015f25 	.word	0x08015f25
 8015f48:	08015f25 	.word	0x08015f25
 8015f4c:	08015f25 	.word	0x08015f25
 8015f50:	08015f25 	.word	0x08015f25
 8015f54:	08015fa9 	.word	0x08015fa9
 8015f58:	08015f25 	.word	0x08015f25
 8015f5c:	08015f25 	.word	0x08015f25
 8015f60:	08015f25 	.word	0x08015f25
 8015f64:	08015f25 	.word	0x08015f25
 8015f68:	080160ad 	.word	0x080160ad
 8015f6c:	08015fd5 	.word	0x08015fd5
 8015f70:	08016067 	.word	0x08016067
 8015f74:	08015f25 	.word	0x08015f25
 8015f78:	08015f25 	.word	0x08015f25
 8015f7c:	080160cf 	.word	0x080160cf
 8015f80:	08015f25 	.word	0x08015f25
 8015f84:	08015fd5 	.word	0x08015fd5
 8015f88:	08015f25 	.word	0x08015f25
 8015f8c:	08015f25 	.word	0x08015f25
 8015f90:	0801606f 	.word	0x0801606f
 8015f94:	682b      	ldr	r3, [r5, #0]
 8015f96:	1d1a      	adds	r2, r3, #4
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	602a      	str	r2, [r5, #0]
 8015f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e09f      	b.n	80160e8 <_printf_i+0x1ec>
 8015fa8:	6820      	ldr	r0, [r4, #0]
 8015faa:	682b      	ldr	r3, [r5, #0]
 8015fac:	0607      	lsls	r7, r0, #24
 8015fae:	f103 0104 	add.w	r1, r3, #4
 8015fb2:	6029      	str	r1, [r5, #0]
 8015fb4:	d501      	bpl.n	8015fba <_printf_i+0xbe>
 8015fb6:	681e      	ldr	r6, [r3, #0]
 8015fb8:	e003      	b.n	8015fc2 <_printf_i+0xc6>
 8015fba:	0646      	lsls	r6, r0, #25
 8015fbc:	d5fb      	bpl.n	8015fb6 <_printf_i+0xba>
 8015fbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015fc2:	2e00      	cmp	r6, #0
 8015fc4:	da03      	bge.n	8015fce <_printf_i+0xd2>
 8015fc6:	232d      	movs	r3, #45	; 0x2d
 8015fc8:	4276      	negs	r6, r6
 8015fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fce:	485a      	ldr	r0, [pc, #360]	; (8016138 <_printf_i+0x23c>)
 8015fd0:	230a      	movs	r3, #10
 8015fd2:	e012      	b.n	8015ffa <_printf_i+0xfe>
 8015fd4:	682b      	ldr	r3, [r5, #0]
 8015fd6:	6820      	ldr	r0, [r4, #0]
 8015fd8:	1d19      	adds	r1, r3, #4
 8015fda:	6029      	str	r1, [r5, #0]
 8015fdc:	0605      	lsls	r5, r0, #24
 8015fde:	d501      	bpl.n	8015fe4 <_printf_i+0xe8>
 8015fe0:	681e      	ldr	r6, [r3, #0]
 8015fe2:	e002      	b.n	8015fea <_printf_i+0xee>
 8015fe4:	0641      	lsls	r1, r0, #25
 8015fe6:	d5fb      	bpl.n	8015fe0 <_printf_i+0xe4>
 8015fe8:	881e      	ldrh	r6, [r3, #0]
 8015fea:	4853      	ldr	r0, [pc, #332]	; (8016138 <_printf_i+0x23c>)
 8015fec:	2f6f      	cmp	r7, #111	; 0x6f
 8015fee:	bf0c      	ite	eq
 8015ff0:	2308      	moveq	r3, #8
 8015ff2:	230a      	movne	r3, #10
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ffa:	6865      	ldr	r5, [r4, #4]
 8015ffc:	60a5      	str	r5, [r4, #8]
 8015ffe:	2d00      	cmp	r5, #0
 8016000:	bfa2      	ittt	ge
 8016002:	6821      	ldrge	r1, [r4, #0]
 8016004:	f021 0104 	bicge.w	r1, r1, #4
 8016008:	6021      	strge	r1, [r4, #0]
 801600a:	b90e      	cbnz	r6, 8016010 <_printf_i+0x114>
 801600c:	2d00      	cmp	r5, #0
 801600e:	d04b      	beq.n	80160a8 <_printf_i+0x1ac>
 8016010:	4615      	mov	r5, r2
 8016012:	fbb6 f1f3 	udiv	r1, r6, r3
 8016016:	fb03 6711 	mls	r7, r3, r1, r6
 801601a:	5dc7      	ldrb	r7, [r0, r7]
 801601c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016020:	4637      	mov	r7, r6
 8016022:	42bb      	cmp	r3, r7
 8016024:	460e      	mov	r6, r1
 8016026:	d9f4      	bls.n	8016012 <_printf_i+0x116>
 8016028:	2b08      	cmp	r3, #8
 801602a:	d10b      	bne.n	8016044 <_printf_i+0x148>
 801602c:	6823      	ldr	r3, [r4, #0]
 801602e:	07de      	lsls	r6, r3, #31
 8016030:	d508      	bpl.n	8016044 <_printf_i+0x148>
 8016032:	6923      	ldr	r3, [r4, #16]
 8016034:	6861      	ldr	r1, [r4, #4]
 8016036:	4299      	cmp	r1, r3
 8016038:	bfde      	ittt	le
 801603a:	2330      	movle	r3, #48	; 0x30
 801603c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016044:	1b52      	subs	r2, r2, r5
 8016046:	6122      	str	r2, [r4, #16]
 8016048:	f8cd a000 	str.w	sl, [sp]
 801604c:	464b      	mov	r3, r9
 801604e:	aa03      	add	r2, sp, #12
 8016050:	4621      	mov	r1, r4
 8016052:	4640      	mov	r0, r8
 8016054:	f7ff fee4 	bl	8015e20 <_printf_common>
 8016058:	3001      	adds	r0, #1
 801605a:	d14a      	bne.n	80160f2 <_printf_i+0x1f6>
 801605c:	f04f 30ff 	mov.w	r0, #4294967295
 8016060:	b004      	add	sp, #16
 8016062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	f043 0320 	orr.w	r3, r3, #32
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	4833      	ldr	r0, [pc, #204]	; (801613c <_printf_i+0x240>)
 8016070:	2778      	movs	r7, #120	; 0x78
 8016072:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016076:	6823      	ldr	r3, [r4, #0]
 8016078:	6829      	ldr	r1, [r5, #0]
 801607a:	061f      	lsls	r7, r3, #24
 801607c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016080:	d402      	bmi.n	8016088 <_printf_i+0x18c>
 8016082:	065f      	lsls	r7, r3, #25
 8016084:	bf48      	it	mi
 8016086:	b2b6      	uxthmi	r6, r6
 8016088:	07df      	lsls	r7, r3, #31
 801608a:	bf48      	it	mi
 801608c:	f043 0320 	orrmi.w	r3, r3, #32
 8016090:	6029      	str	r1, [r5, #0]
 8016092:	bf48      	it	mi
 8016094:	6023      	strmi	r3, [r4, #0]
 8016096:	b91e      	cbnz	r6, 80160a0 <_printf_i+0x1a4>
 8016098:	6823      	ldr	r3, [r4, #0]
 801609a:	f023 0320 	bic.w	r3, r3, #32
 801609e:	6023      	str	r3, [r4, #0]
 80160a0:	2310      	movs	r3, #16
 80160a2:	e7a7      	b.n	8015ff4 <_printf_i+0xf8>
 80160a4:	4824      	ldr	r0, [pc, #144]	; (8016138 <_printf_i+0x23c>)
 80160a6:	e7e4      	b.n	8016072 <_printf_i+0x176>
 80160a8:	4615      	mov	r5, r2
 80160aa:	e7bd      	b.n	8016028 <_printf_i+0x12c>
 80160ac:	682b      	ldr	r3, [r5, #0]
 80160ae:	6826      	ldr	r6, [r4, #0]
 80160b0:	6961      	ldr	r1, [r4, #20]
 80160b2:	1d18      	adds	r0, r3, #4
 80160b4:	6028      	str	r0, [r5, #0]
 80160b6:	0635      	lsls	r5, r6, #24
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	d501      	bpl.n	80160c0 <_printf_i+0x1c4>
 80160bc:	6019      	str	r1, [r3, #0]
 80160be:	e002      	b.n	80160c6 <_printf_i+0x1ca>
 80160c0:	0670      	lsls	r0, r6, #25
 80160c2:	d5fb      	bpl.n	80160bc <_printf_i+0x1c0>
 80160c4:	8019      	strh	r1, [r3, #0]
 80160c6:	2300      	movs	r3, #0
 80160c8:	6123      	str	r3, [r4, #16]
 80160ca:	4615      	mov	r5, r2
 80160cc:	e7bc      	b.n	8016048 <_printf_i+0x14c>
 80160ce:	682b      	ldr	r3, [r5, #0]
 80160d0:	1d1a      	adds	r2, r3, #4
 80160d2:	602a      	str	r2, [r5, #0]
 80160d4:	681d      	ldr	r5, [r3, #0]
 80160d6:	6862      	ldr	r2, [r4, #4]
 80160d8:	2100      	movs	r1, #0
 80160da:	4628      	mov	r0, r5
 80160dc:	f7ea f8a0 	bl	8000220 <memchr>
 80160e0:	b108      	cbz	r0, 80160e6 <_printf_i+0x1ea>
 80160e2:	1b40      	subs	r0, r0, r5
 80160e4:	6060      	str	r0, [r4, #4]
 80160e6:	6863      	ldr	r3, [r4, #4]
 80160e8:	6123      	str	r3, [r4, #16]
 80160ea:	2300      	movs	r3, #0
 80160ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160f0:	e7aa      	b.n	8016048 <_printf_i+0x14c>
 80160f2:	6923      	ldr	r3, [r4, #16]
 80160f4:	462a      	mov	r2, r5
 80160f6:	4649      	mov	r1, r9
 80160f8:	4640      	mov	r0, r8
 80160fa:	47d0      	blx	sl
 80160fc:	3001      	adds	r0, #1
 80160fe:	d0ad      	beq.n	801605c <_printf_i+0x160>
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	079b      	lsls	r3, r3, #30
 8016104:	d413      	bmi.n	801612e <_printf_i+0x232>
 8016106:	68e0      	ldr	r0, [r4, #12]
 8016108:	9b03      	ldr	r3, [sp, #12]
 801610a:	4298      	cmp	r0, r3
 801610c:	bfb8      	it	lt
 801610e:	4618      	movlt	r0, r3
 8016110:	e7a6      	b.n	8016060 <_printf_i+0x164>
 8016112:	2301      	movs	r3, #1
 8016114:	4632      	mov	r2, r6
 8016116:	4649      	mov	r1, r9
 8016118:	4640      	mov	r0, r8
 801611a:	47d0      	blx	sl
 801611c:	3001      	adds	r0, #1
 801611e:	d09d      	beq.n	801605c <_printf_i+0x160>
 8016120:	3501      	adds	r5, #1
 8016122:	68e3      	ldr	r3, [r4, #12]
 8016124:	9903      	ldr	r1, [sp, #12]
 8016126:	1a5b      	subs	r3, r3, r1
 8016128:	42ab      	cmp	r3, r5
 801612a:	dcf2      	bgt.n	8016112 <_printf_i+0x216>
 801612c:	e7eb      	b.n	8016106 <_printf_i+0x20a>
 801612e:	2500      	movs	r5, #0
 8016130:	f104 0619 	add.w	r6, r4, #25
 8016134:	e7f5      	b.n	8016122 <_printf_i+0x226>
 8016136:	bf00      	nop
 8016138:	0801ccae 	.word	0x0801ccae
 801613c:	0801ccbf 	.word	0x0801ccbf

08016140 <_scanf_float>:
 8016140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016144:	b087      	sub	sp, #28
 8016146:	4617      	mov	r7, r2
 8016148:	9303      	str	r3, [sp, #12]
 801614a:	688b      	ldr	r3, [r1, #8]
 801614c:	1e5a      	subs	r2, r3, #1
 801614e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016152:	bf83      	ittte	hi
 8016154:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016158:	195b      	addhi	r3, r3, r5
 801615a:	9302      	strhi	r3, [sp, #8]
 801615c:	2300      	movls	r3, #0
 801615e:	bf86      	itte	hi
 8016160:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016164:	608b      	strhi	r3, [r1, #8]
 8016166:	9302      	strls	r3, [sp, #8]
 8016168:	680b      	ldr	r3, [r1, #0]
 801616a:	468b      	mov	fp, r1
 801616c:	2500      	movs	r5, #0
 801616e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016172:	f84b 3b1c 	str.w	r3, [fp], #28
 8016176:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801617a:	4680      	mov	r8, r0
 801617c:	460c      	mov	r4, r1
 801617e:	465e      	mov	r6, fp
 8016180:	46aa      	mov	sl, r5
 8016182:	46a9      	mov	r9, r5
 8016184:	9501      	str	r5, [sp, #4]
 8016186:	68a2      	ldr	r2, [r4, #8]
 8016188:	b152      	cbz	r2, 80161a0 <_scanf_float+0x60>
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	2b4e      	cmp	r3, #78	; 0x4e
 8016190:	d864      	bhi.n	801625c <_scanf_float+0x11c>
 8016192:	2b40      	cmp	r3, #64	; 0x40
 8016194:	d83c      	bhi.n	8016210 <_scanf_float+0xd0>
 8016196:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801619a:	b2c8      	uxtb	r0, r1
 801619c:	280e      	cmp	r0, #14
 801619e:	d93a      	bls.n	8016216 <_scanf_float+0xd6>
 80161a0:	f1b9 0f00 	cmp.w	r9, #0
 80161a4:	d003      	beq.n	80161ae <_scanf_float+0x6e>
 80161a6:	6823      	ldr	r3, [r4, #0]
 80161a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161ac:	6023      	str	r3, [r4, #0]
 80161ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161b2:	f1ba 0f01 	cmp.w	sl, #1
 80161b6:	f200 8113 	bhi.w	80163e0 <_scanf_float+0x2a0>
 80161ba:	455e      	cmp	r6, fp
 80161bc:	f200 8105 	bhi.w	80163ca <_scanf_float+0x28a>
 80161c0:	2501      	movs	r5, #1
 80161c2:	4628      	mov	r0, r5
 80161c4:	b007      	add	sp, #28
 80161c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80161ce:	2a0d      	cmp	r2, #13
 80161d0:	d8e6      	bhi.n	80161a0 <_scanf_float+0x60>
 80161d2:	a101      	add	r1, pc, #4	; (adr r1, 80161d8 <_scanf_float+0x98>)
 80161d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80161d8:	08016317 	.word	0x08016317
 80161dc:	080161a1 	.word	0x080161a1
 80161e0:	080161a1 	.word	0x080161a1
 80161e4:	080161a1 	.word	0x080161a1
 80161e8:	08016377 	.word	0x08016377
 80161ec:	0801634f 	.word	0x0801634f
 80161f0:	080161a1 	.word	0x080161a1
 80161f4:	080161a1 	.word	0x080161a1
 80161f8:	08016325 	.word	0x08016325
 80161fc:	080161a1 	.word	0x080161a1
 8016200:	080161a1 	.word	0x080161a1
 8016204:	080161a1 	.word	0x080161a1
 8016208:	080161a1 	.word	0x080161a1
 801620c:	080162dd 	.word	0x080162dd
 8016210:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016214:	e7db      	b.n	80161ce <_scanf_float+0x8e>
 8016216:	290e      	cmp	r1, #14
 8016218:	d8c2      	bhi.n	80161a0 <_scanf_float+0x60>
 801621a:	a001      	add	r0, pc, #4	; (adr r0, 8016220 <_scanf_float+0xe0>)
 801621c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016220:	080162cf 	.word	0x080162cf
 8016224:	080161a1 	.word	0x080161a1
 8016228:	080162cf 	.word	0x080162cf
 801622c:	08016363 	.word	0x08016363
 8016230:	080161a1 	.word	0x080161a1
 8016234:	0801627d 	.word	0x0801627d
 8016238:	080162b9 	.word	0x080162b9
 801623c:	080162b9 	.word	0x080162b9
 8016240:	080162b9 	.word	0x080162b9
 8016244:	080162b9 	.word	0x080162b9
 8016248:	080162b9 	.word	0x080162b9
 801624c:	080162b9 	.word	0x080162b9
 8016250:	080162b9 	.word	0x080162b9
 8016254:	080162b9 	.word	0x080162b9
 8016258:	080162b9 	.word	0x080162b9
 801625c:	2b6e      	cmp	r3, #110	; 0x6e
 801625e:	d809      	bhi.n	8016274 <_scanf_float+0x134>
 8016260:	2b60      	cmp	r3, #96	; 0x60
 8016262:	d8b2      	bhi.n	80161ca <_scanf_float+0x8a>
 8016264:	2b54      	cmp	r3, #84	; 0x54
 8016266:	d077      	beq.n	8016358 <_scanf_float+0x218>
 8016268:	2b59      	cmp	r3, #89	; 0x59
 801626a:	d199      	bne.n	80161a0 <_scanf_float+0x60>
 801626c:	2d07      	cmp	r5, #7
 801626e:	d197      	bne.n	80161a0 <_scanf_float+0x60>
 8016270:	2508      	movs	r5, #8
 8016272:	e029      	b.n	80162c8 <_scanf_float+0x188>
 8016274:	2b74      	cmp	r3, #116	; 0x74
 8016276:	d06f      	beq.n	8016358 <_scanf_float+0x218>
 8016278:	2b79      	cmp	r3, #121	; 0x79
 801627a:	e7f6      	b.n	801626a <_scanf_float+0x12a>
 801627c:	6821      	ldr	r1, [r4, #0]
 801627e:	05c8      	lsls	r0, r1, #23
 8016280:	d51a      	bpl.n	80162b8 <_scanf_float+0x178>
 8016282:	9b02      	ldr	r3, [sp, #8]
 8016284:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016288:	6021      	str	r1, [r4, #0]
 801628a:	f109 0901 	add.w	r9, r9, #1
 801628e:	b11b      	cbz	r3, 8016298 <_scanf_float+0x158>
 8016290:	3b01      	subs	r3, #1
 8016292:	3201      	adds	r2, #1
 8016294:	9302      	str	r3, [sp, #8]
 8016296:	60a2      	str	r2, [r4, #8]
 8016298:	68a3      	ldr	r3, [r4, #8]
 801629a:	3b01      	subs	r3, #1
 801629c:	60a3      	str	r3, [r4, #8]
 801629e:	6923      	ldr	r3, [r4, #16]
 80162a0:	3301      	adds	r3, #1
 80162a2:	6123      	str	r3, [r4, #16]
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	3b01      	subs	r3, #1
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	607b      	str	r3, [r7, #4]
 80162ac:	f340 8084 	ble.w	80163b8 <_scanf_float+0x278>
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	3301      	adds	r3, #1
 80162b4:	603b      	str	r3, [r7, #0]
 80162b6:	e766      	b.n	8016186 <_scanf_float+0x46>
 80162b8:	eb1a 0f05 	cmn.w	sl, r5
 80162bc:	f47f af70 	bne.w	80161a0 <_scanf_float+0x60>
 80162c0:	6822      	ldr	r2, [r4, #0]
 80162c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80162c6:	6022      	str	r2, [r4, #0]
 80162c8:	f806 3b01 	strb.w	r3, [r6], #1
 80162cc:	e7e4      	b.n	8016298 <_scanf_float+0x158>
 80162ce:	6822      	ldr	r2, [r4, #0]
 80162d0:	0610      	lsls	r0, r2, #24
 80162d2:	f57f af65 	bpl.w	80161a0 <_scanf_float+0x60>
 80162d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80162da:	e7f4      	b.n	80162c6 <_scanf_float+0x186>
 80162dc:	f1ba 0f00 	cmp.w	sl, #0
 80162e0:	d10e      	bne.n	8016300 <_scanf_float+0x1c0>
 80162e2:	f1b9 0f00 	cmp.w	r9, #0
 80162e6:	d10e      	bne.n	8016306 <_scanf_float+0x1c6>
 80162e8:	6822      	ldr	r2, [r4, #0]
 80162ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80162ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80162f2:	d108      	bne.n	8016306 <_scanf_float+0x1c6>
 80162f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80162f8:	6022      	str	r2, [r4, #0]
 80162fa:	f04f 0a01 	mov.w	sl, #1
 80162fe:	e7e3      	b.n	80162c8 <_scanf_float+0x188>
 8016300:	f1ba 0f02 	cmp.w	sl, #2
 8016304:	d055      	beq.n	80163b2 <_scanf_float+0x272>
 8016306:	2d01      	cmp	r5, #1
 8016308:	d002      	beq.n	8016310 <_scanf_float+0x1d0>
 801630a:	2d04      	cmp	r5, #4
 801630c:	f47f af48 	bne.w	80161a0 <_scanf_float+0x60>
 8016310:	3501      	adds	r5, #1
 8016312:	b2ed      	uxtb	r5, r5
 8016314:	e7d8      	b.n	80162c8 <_scanf_float+0x188>
 8016316:	f1ba 0f01 	cmp.w	sl, #1
 801631a:	f47f af41 	bne.w	80161a0 <_scanf_float+0x60>
 801631e:	f04f 0a02 	mov.w	sl, #2
 8016322:	e7d1      	b.n	80162c8 <_scanf_float+0x188>
 8016324:	b97d      	cbnz	r5, 8016346 <_scanf_float+0x206>
 8016326:	f1b9 0f00 	cmp.w	r9, #0
 801632a:	f47f af3c 	bne.w	80161a6 <_scanf_float+0x66>
 801632e:	6822      	ldr	r2, [r4, #0]
 8016330:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016334:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016338:	f47f af39 	bne.w	80161ae <_scanf_float+0x6e>
 801633c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016340:	6022      	str	r2, [r4, #0]
 8016342:	2501      	movs	r5, #1
 8016344:	e7c0      	b.n	80162c8 <_scanf_float+0x188>
 8016346:	2d03      	cmp	r5, #3
 8016348:	d0e2      	beq.n	8016310 <_scanf_float+0x1d0>
 801634a:	2d05      	cmp	r5, #5
 801634c:	e7de      	b.n	801630c <_scanf_float+0x1cc>
 801634e:	2d02      	cmp	r5, #2
 8016350:	f47f af26 	bne.w	80161a0 <_scanf_float+0x60>
 8016354:	2503      	movs	r5, #3
 8016356:	e7b7      	b.n	80162c8 <_scanf_float+0x188>
 8016358:	2d06      	cmp	r5, #6
 801635a:	f47f af21 	bne.w	80161a0 <_scanf_float+0x60>
 801635e:	2507      	movs	r5, #7
 8016360:	e7b2      	b.n	80162c8 <_scanf_float+0x188>
 8016362:	6822      	ldr	r2, [r4, #0]
 8016364:	0591      	lsls	r1, r2, #22
 8016366:	f57f af1b 	bpl.w	80161a0 <_scanf_float+0x60>
 801636a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801636e:	6022      	str	r2, [r4, #0]
 8016370:	f8cd 9004 	str.w	r9, [sp, #4]
 8016374:	e7a8      	b.n	80162c8 <_scanf_float+0x188>
 8016376:	6822      	ldr	r2, [r4, #0]
 8016378:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801637c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016380:	d006      	beq.n	8016390 <_scanf_float+0x250>
 8016382:	0550      	lsls	r0, r2, #21
 8016384:	f57f af0c 	bpl.w	80161a0 <_scanf_float+0x60>
 8016388:	f1b9 0f00 	cmp.w	r9, #0
 801638c:	f43f af0f 	beq.w	80161ae <_scanf_float+0x6e>
 8016390:	0591      	lsls	r1, r2, #22
 8016392:	bf58      	it	pl
 8016394:	9901      	ldrpl	r1, [sp, #4]
 8016396:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801639a:	bf58      	it	pl
 801639c:	eba9 0101 	subpl.w	r1, r9, r1
 80163a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80163a4:	bf58      	it	pl
 80163a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80163aa:	6022      	str	r2, [r4, #0]
 80163ac:	f04f 0900 	mov.w	r9, #0
 80163b0:	e78a      	b.n	80162c8 <_scanf_float+0x188>
 80163b2:	f04f 0a03 	mov.w	sl, #3
 80163b6:	e787      	b.n	80162c8 <_scanf_float+0x188>
 80163b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80163bc:	4639      	mov	r1, r7
 80163be:	4640      	mov	r0, r8
 80163c0:	4798      	blx	r3
 80163c2:	2800      	cmp	r0, #0
 80163c4:	f43f aedf 	beq.w	8016186 <_scanf_float+0x46>
 80163c8:	e6ea      	b.n	80161a0 <_scanf_float+0x60>
 80163ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80163d2:	463a      	mov	r2, r7
 80163d4:	4640      	mov	r0, r8
 80163d6:	4798      	blx	r3
 80163d8:	6923      	ldr	r3, [r4, #16]
 80163da:	3b01      	subs	r3, #1
 80163dc:	6123      	str	r3, [r4, #16]
 80163de:	e6ec      	b.n	80161ba <_scanf_float+0x7a>
 80163e0:	1e6b      	subs	r3, r5, #1
 80163e2:	2b06      	cmp	r3, #6
 80163e4:	d825      	bhi.n	8016432 <_scanf_float+0x2f2>
 80163e6:	2d02      	cmp	r5, #2
 80163e8:	d836      	bhi.n	8016458 <_scanf_float+0x318>
 80163ea:	455e      	cmp	r6, fp
 80163ec:	f67f aee8 	bls.w	80161c0 <_scanf_float+0x80>
 80163f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80163f8:	463a      	mov	r2, r7
 80163fa:	4640      	mov	r0, r8
 80163fc:	4798      	blx	r3
 80163fe:	6923      	ldr	r3, [r4, #16]
 8016400:	3b01      	subs	r3, #1
 8016402:	6123      	str	r3, [r4, #16]
 8016404:	e7f1      	b.n	80163ea <_scanf_float+0x2aa>
 8016406:	9802      	ldr	r0, [sp, #8]
 8016408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801640c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016410:	9002      	str	r0, [sp, #8]
 8016412:	463a      	mov	r2, r7
 8016414:	4640      	mov	r0, r8
 8016416:	4798      	blx	r3
 8016418:	6923      	ldr	r3, [r4, #16]
 801641a:	3b01      	subs	r3, #1
 801641c:	6123      	str	r3, [r4, #16]
 801641e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016422:	fa5f fa8a 	uxtb.w	sl, sl
 8016426:	f1ba 0f02 	cmp.w	sl, #2
 801642a:	d1ec      	bne.n	8016406 <_scanf_float+0x2c6>
 801642c:	3d03      	subs	r5, #3
 801642e:	b2ed      	uxtb	r5, r5
 8016430:	1b76      	subs	r6, r6, r5
 8016432:	6823      	ldr	r3, [r4, #0]
 8016434:	05da      	lsls	r2, r3, #23
 8016436:	d52f      	bpl.n	8016498 <_scanf_float+0x358>
 8016438:	055b      	lsls	r3, r3, #21
 801643a:	d510      	bpl.n	801645e <_scanf_float+0x31e>
 801643c:	455e      	cmp	r6, fp
 801643e:	f67f aebf 	bls.w	80161c0 <_scanf_float+0x80>
 8016442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801644a:	463a      	mov	r2, r7
 801644c:	4640      	mov	r0, r8
 801644e:	4798      	blx	r3
 8016450:	6923      	ldr	r3, [r4, #16]
 8016452:	3b01      	subs	r3, #1
 8016454:	6123      	str	r3, [r4, #16]
 8016456:	e7f1      	b.n	801643c <_scanf_float+0x2fc>
 8016458:	46aa      	mov	sl, r5
 801645a:	9602      	str	r6, [sp, #8]
 801645c:	e7df      	b.n	801641e <_scanf_float+0x2de>
 801645e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016462:	6923      	ldr	r3, [r4, #16]
 8016464:	2965      	cmp	r1, #101	; 0x65
 8016466:	f103 33ff 	add.w	r3, r3, #4294967295
 801646a:	f106 35ff 	add.w	r5, r6, #4294967295
 801646e:	6123      	str	r3, [r4, #16]
 8016470:	d00c      	beq.n	801648c <_scanf_float+0x34c>
 8016472:	2945      	cmp	r1, #69	; 0x45
 8016474:	d00a      	beq.n	801648c <_scanf_float+0x34c>
 8016476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801647a:	463a      	mov	r2, r7
 801647c:	4640      	mov	r0, r8
 801647e:	4798      	blx	r3
 8016480:	6923      	ldr	r3, [r4, #16]
 8016482:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016486:	3b01      	subs	r3, #1
 8016488:	1eb5      	subs	r5, r6, #2
 801648a:	6123      	str	r3, [r4, #16]
 801648c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016490:	463a      	mov	r2, r7
 8016492:	4640      	mov	r0, r8
 8016494:	4798      	blx	r3
 8016496:	462e      	mov	r6, r5
 8016498:	6825      	ldr	r5, [r4, #0]
 801649a:	f015 0510 	ands.w	r5, r5, #16
 801649e:	d158      	bne.n	8016552 <_scanf_float+0x412>
 80164a0:	7035      	strb	r5, [r6, #0]
 80164a2:	6823      	ldr	r3, [r4, #0]
 80164a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80164a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80164ac:	d11c      	bne.n	80164e8 <_scanf_float+0x3a8>
 80164ae:	9b01      	ldr	r3, [sp, #4]
 80164b0:	454b      	cmp	r3, r9
 80164b2:	eba3 0209 	sub.w	r2, r3, r9
 80164b6:	d124      	bne.n	8016502 <_scanf_float+0x3c2>
 80164b8:	2200      	movs	r2, #0
 80164ba:	4659      	mov	r1, fp
 80164bc:	4640      	mov	r0, r8
 80164be:	f002 fc3f 	bl	8018d40 <_strtod_r>
 80164c2:	9b03      	ldr	r3, [sp, #12]
 80164c4:	6821      	ldr	r1, [r4, #0]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	f011 0f02 	tst.w	r1, #2
 80164cc:	ec57 6b10 	vmov	r6, r7, d0
 80164d0:	f103 0204 	add.w	r2, r3, #4
 80164d4:	d020      	beq.n	8016518 <_scanf_float+0x3d8>
 80164d6:	9903      	ldr	r1, [sp, #12]
 80164d8:	600a      	str	r2, [r1, #0]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	e9c3 6700 	strd	r6, r7, [r3]
 80164e0:	68e3      	ldr	r3, [r4, #12]
 80164e2:	3301      	adds	r3, #1
 80164e4:	60e3      	str	r3, [r4, #12]
 80164e6:	e66c      	b.n	80161c2 <_scanf_float+0x82>
 80164e8:	9b04      	ldr	r3, [sp, #16]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d0e4      	beq.n	80164b8 <_scanf_float+0x378>
 80164ee:	9905      	ldr	r1, [sp, #20]
 80164f0:	230a      	movs	r3, #10
 80164f2:	462a      	mov	r2, r5
 80164f4:	3101      	adds	r1, #1
 80164f6:	4640      	mov	r0, r8
 80164f8:	f002 fcaa 	bl	8018e50 <_strtol_r>
 80164fc:	9b04      	ldr	r3, [sp, #16]
 80164fe:	9e05      	ldr	r6, [sp, #20]
 8016500:	1ac2      	subs	r2, r0, r3
 8016502:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016506:	429e      	cmp	r6, r3
 8016508:	bf28      	it	cs
 801650a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801650e:	4912      	ldr	r1, [pc, #72]	; (8016558 <_scanf_float+0x418>)
 8016510:	4630      	mov	r0, r6
 8016512:	f000 f8e7 	bl	80166e4 <siprintf>
 8016516:	e7cf      	b.n	80164b8 <_scanf_float+0x378>
 8016518:	f011 0f04 	tst.w	r1, #4
 801651c:	9903      	ldr	r1, [sp, #12]
 801651e:	600a      	str	r2, [r1, #0]
 8016520:	d1db      	bne.n	80164da <_scanf_float+0x39a>
 8016522:	f8d3 8000 	ldr.w	r8, [r3]
 8016526:	ee10 2a10 	vmov	r2, s0
 801652a:	ee10 0a10 	vmov	r0, s0
 801652e:	463b      	mov	r3, r7
 8016530:	4639      	mov	r1, r7
 8016532:	f7ea fb23 	bl	8000b7c <__aeabi_dcmpun>
 8016536:	b128      	cbz	r0, 8016544 <_scanf_float+0x404>
 8016538:	4808      	ldr	r0, [pc, #32]	; (801655c <_scanf_float+0x41c>)
 801653a:	f000 f9c5 	bl	80168c8 <nanf>
 801653e:	ed88 0a00 	vstr	s0, [r8]
 8016542:	e7cd      	b.n	80164e0 <_scanf_float+0x3a0>
 8016544:	4630      	mov	r0, r6
 8016546:	4639      	mov	r1, r7
 8016548:	f7ea fb76 	bl	8000c38 <__aeabi_d2f>
 801654c:	f8c8 0000 	str.w	r0, [r8]
 8016550:	e7c6      	b.n	80164e0 <_scanf_float+0x3a0>
 8016552:	2500      	movs	r5, #0
 8016554:	e635      	b.n	80161c2 <_scanf_float+0x82>
 8016556:	bf00      	nop
 8016558:	0801ccd0 	.word	0x0801ccd0
 801655c:	0801d065 	.word	0x0801d065

08016560 <std>:
 8016560:	2300      	movs	r3, #0
 8016562:	b510      	push	{r4, lr}
 8016564:	4604      	mov	r4, r0
 8016566:	e9c0 3300 	strd	r3, r3, [r0]
 801656a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801656e:	6083      	str	r3, [r0, #8]
 8016570:	8181      	strh	r1, [r0, #12]
 8016572:	6643      	str	r3, [r0, #100]	; 0x64
 8016574:	81c2      	strh	r2, [r0, #14]
 8016576:	6183      	str	r3, [r0, #24]
 8016578:	4619      	mov	r1, r3
 801657a:	2208      	movs	r2, #8
 801657c:	305c      	adds	r0, #92	; 0x5c
 801657e:	f000 f914 	bl	80167aa <memset>
 8016582:	4b0d      	ldr	r3, [pc, #52]	; (80165b8 <std+0x58>)
 8016584:	6263      	str	r3, [r4, #36]	; 0x24
 8016586:	4b0d      	ldr	r3, [pc, #52]	; (80165bc <std+0x5c>)
 8016588:	62a3      	str	r3, [r4, #40]	; 0x28
 801658a:	4b0d      	ldr	r3, [pc, #52]	; (80165c0 <std+0x60>)
 801658c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801658e:	4b0d      	ldr	r3, [pc, #52]	; (80165c4 <std+0x64>)
 8016590:	6323      	str	r3, [r4, #48]	; 0x30
 8016592:	4b0d      	ldr	r3, [pc, #52]	; (80165c8 <std+0x68>)
 8016594:	6224      	str	r4, [r4, #32]
 8016596:	429c      	cmp	r4, r3
 8016598:	d006      	beq.n	80165a8 <std+0x48>
 801659a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801659e:	4294      	cmp	r4, r2
 80165a0:	d002      	beq.n	80165a8 <std+0x48>
 80165a2:	33d0      	adds	r3, #208	; 0xd0
 80165a4:	429c      	cmp	r4, r3
 80165a6:	d105      	bne.n	80165b4 <std+0x54>
 80165a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165b0:	f000 b978 	b.w	80168a4 <__retarget_lock_init_recursive>
 80165b4:	bd10      	pop	{r4, pc}
 80165b6:	bf00      	nop
 80165b8:	08016725 	.word	0x08016725
 80165bc:	08016747 	.word	0x08016747
 80165c0:	0801677f 	.word	0x0801677f
 80165c4:	080167a3 	.word	0x080167a3
 80165c8:	2000327c 	.word	0x2000327c

080165cc <stdio_exit_handler>:
 80165cc:	4a02      	ldr	r2, [pc, #8]	; (80165d8 <stdio_exit_handler+0xc>)
 80165ce:	4903      	ldr	r1, [pc, #12]	; (80165dc <stdio_exit_handler+0x10>)
 80165d0:	4803      	ldr	r0, [pc, #12]	; (80165e0 <stdio_exit_handler+0x14>)
 80165d2:	f000 b869 	b.w	80166a8 <_fwalk_sglue>
 80165d6:	bf00      	nop
 80165d8:	20000378 	.word	0x20000378
 80165dc:	08019211 	.word	0x08019211
 80165e0:	20000384 	.word	0x20000384

080165e4 <cleanup_stdio>:
 80165e4:	6841      	ldr	r1, [r0, #4]
 80165e6:	4b0c      	ldr	r3, [pc, #48]	; (8016618 <cleanup_stdio+0x34>)
 80165e8:	4299      	cmp	r1, r3
 80165ea:	b510      	push	{r4, lr}
 80165ec:	4604      	mov	r4, r0
 80165ee:	d001      	beq.n	80165f4 <cleanup_stdio+0x10>
 80165f0:	f002 fe0e 	bl	8019210 <_fflush_r>
 80165f4:	68a1      	ldr	r1, [r4, #8]
 80165f6:	4b09      	ldr	r3, [pc, #36]	; (801661c <cleanup_stdio+0x38>)
 80165f8:	4299      	cmp	r1, r3
 80165fa:	d002      	beq.n	8016602 <cleanup_stdio+0x1e>
 80165fc:	4620      	mov	r0, r4
 80165fe:	f002 fe07 	bl	8019210 <_fflush_r>
 8016602:	68e1      	ldr	r1, [r4, #12]
 8016604:	4b06      	ldr	r3, [pc, #24]	; (8016620 <cleanup_stdio+0x3c>)
 8016606:	4299      	cmp	r1, r3
 8016608:	d004      	beq.n	8016614 <cleanup_stdio+0x30>
 801660a:	4620      	mov	r0, r4
 801660c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016610:	f002 bdfe 	b.w	8019210 <_fflush_r>
 8016614:	bd10      	pop	{r4, pc}
 8016616:	bf00      	nop
 8016618:	2000327c 	.word	0x2000327c
 801661c:	200032e4 	.word	0x200032e4
 8016620:	2000334c 	.word	0x2000334c

08016624 <global_stdio_init.part.0>:
 8016624:	b510      	push	{r4, lr}
 8016626:	4b0b      	ldr	r3, [pc, #44]	; (8016654 <global_stdio_init.part.0+0x30>)
 8016628:	4c0b      	ldr	r4, [pc, #44]	; (8016658 <global_stdio_init.part.0+0x34>)
 801662a:	4a0c      	ldr	r2, [pc, #48]	; (801665c <global_stdio_init.part.0+0x38>)
 801662c:	601a      	str	r2, [r3, #0]
 801662e:	4620      	mov	r0, r4
 8016630:	2200      	movs	r2, #0
 8016632:	2104      	movs	r1, #4
 8016634:	f7ff ff94 	bl	8016560 <std>
 8016638:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801663c:	2201      	movs	r2, #1
 801663e:	2109      	movs	r1, #9
 8016640:	f7ff ff8e 	bl	8016560 <std>
 8016644:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016648:	2202      	movs	r2, #2
 801664a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801664e:	2112      	movs	r1, #18
 8016650:	f7ff bf86 	b.w	8016560 <std>
 8016654:	200033b4 	.word	0x200033b4
 8016658:	2000327c 	.word	0x2000327c
 801665c:	080165cd 	.word	0x080165cd

08016660 <__sfp_lock_acquire>:
 8016660:	4801      	ldr	r0, [pc, #4]	; (8016668 <__sfp_lock_acquire+0x8>)
 8016662:	f000 b920 	b.w	80168a6 <__retarget_lock_acquire_recursive>
 8016666:	bf00      	nop
 8016668:	200033bd 	.word	0x200033bd

0801666c <__sfp_lock_release>:
 801666c:	4801      	ldr	r0, [pc, #4]	; (8016674 <__sfp_lock_release+0x8>)
 801666e:	f000 b91b 	b.w	80168a8 <__retarget_lock_release_recursive>
 8016672:	bf00      	nop
 8016674:	200033bd 	.word	0x200033bd

08016678 <__sinit>:
 8016678:	b510      	push	{r4, lr}
 801667a:	4604      	mov	r4, r0
 801667c:	f7ff fff0 	bl	8016660 <__sfp_lock_acquire>
 8016680:	6a23      	ldr	r3, [r4, #32]
 8016682:	b11b      	cbz	r3, 801668c <__sinit+0x14>
 8016684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016688:	f7ff bff0 	b.w	801666c <__sfp_lock_release>
 801668c:	4b04      	ldr	r3, [pc, #16]	; (80166a0 <__sinit+0x28>)
 801668e:	6223      	str	r3, [r4, #32]
 8016690:	4b04      	ldr	r3, [pc, #16]	; (80166a4 <__sinit+0x2c>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1f5      	bne.n	8016684 <__sinit+0xc>
 8016698:	f7ff ffc4 	bl	8016624 <global_stdio_init.part.0>
 801669c:	e7f2      	b.n	8016684 <__sinit+0xc>
 801669e:	bf00      	nop
 80166a0:	080165e5 	.word	0x080165e5
 80166a4:	200033b4 	.word	0x200033b4

080166a8 <_fwalk_sglue>:
 80166a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166ac:	4607      	mov	r7, r0
 80166ae:	4688      	mov	r8, r1
 80166b0:	4614      	mov	r4, r2
 80166b2:	2600      	movs	r6, #0
 80166b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80166b8:	f1b9 0901 	subs.w	r9, r9, #1
 80166bc:	d505      	bpl.n	80166ca <_fwalk_sglue+0x22>
 80166be:	6824      	ldr	r4, [r4, #0]
 80166c0:	2c00      	cmp	r4, #0
 80166c2:	d1f7      	bne.n	80166b4 <_fwalk_sglue+0xc>
 80166c4:	4630      	mov	r0, r6
 80166c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ca:	89ab      	ldrh	r3, [r5, #12]
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d907      	bls.n	80166e0 <_fwalk_sglue+0x38>
 80166d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80166d4:	3301      	adds	r3, #1
 80166d6:	d003      	beq.n	80166e0 <_fwalk_sglue+0x38>
 80166d8:	4629      	mov	r1, r5
 80166da:	4638      	mov	r0, r7
 80166dc:	47c0      	blx	r8
 80166de:	4306      	orrs	r6, r0
 80166e0:	3568      	adds	r5, #104	; 0x68
 80166e2:	e7e9      	b.n	80166b8 <_fwalk_sglue+0x10>

080166e4 <siprintf>:
 80166e4:	b40e      	push	{r1, r2, r3}
 80166e6:	b500      	push	{lr}
 80166e8:	b09c      	sub	sp, #112	; 0x70
 80166ea:	ab1d      	add	r3, sp, #116	; 0x74
 80166ec:	9002      	str	r0, [sp, #8]
 80166ee:	9006      	str	r0, [sp, #24]
 80166f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80166f4:	4809      	ldr	r0, [pc, #36]	; (801671c <siprintf+0x38>)
 80166f6:	9107      	str	r1, [sp, #28]
 80166f8:	9104      	str	r1, [sp, #16]
 80166fa:	4909      	ldr	r1, [pc, #36]	; (8016720 <siprintf+0x3c>)
 80166fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016700:	9105      	str	r1, [sp, #20]
 8016702:	6800      	ldr	r0, [r0, #0]
 8016704:	9301      	str	r3, [sp, #4]
 8016706:	a902      	add	r1, sp, #8
 8016708:	f002 fbfe 	bl	8018f08 <_svfiprintf_r>
 801670c:	9b02      	ldr	r3, [sp, #8]
 801670e:	2200      	movs	r2, #0
 8016710:	701a      	strb	r2, [r3, #0]
 8016712:	b01c      	add	sp, #112	; 0x70
 8016714:	f85d eb04 	ldr.w	lr, [sp], #4
 8016718:	b003      	add	sp, #12
 801671a:	4770      	bx	lr
 801671c:	200003d0 	.word	0x200003d0
 8016720:	ffff0208 	.word	0xffff0208

08016724 <__sread>:
 8016724:	b510      	push	{r4, lr}
 8016726:	460c      	mov	r4, r1
 8016728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801672c:	f000 f86c 	bl	8016808 <_read_r>
 8016730:	2800      	cmp	r0, #0
 8016732:	bfab      	itete	ge
 8016734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016736:	89a3      	ldrhlt	r3, [r4, #12]
 8016738:	181b      	addge	r3, r3, r0
 801673a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801673e:	bfac      	ite	ge
 8016740:	6563      	strge	r3, [r4, #84]	; 0x54
 8016742:	81a3      	strhlt	r3, [r4, #12]
 8016744:	bd10      	pop	{r4, pc}

08016746 <__swrite>:
 8016746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801674a:	461f      	mov	r7, r3
 801674c:	898b      	ldrh	r3, [r1, #12]
 801674e:	05db      	lsls	r3, r3, #23
 8016750:	4605      	mov	r5, r0
 8016752:	460c      	mov	r4, r1
 8016754:	4616      	mov	r6, r2
 8016756:	d505      	bpl.n	8016764 <__swrite+0x1e>
 8016758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801675c:	2302      	movs	r3, #2
 801675e:	2200      	movs	r2, #0
 8016760:	f000 f840 	bl	80167e4 <_lseek_r>
 8016764:	89a3      	ldrh	r3, [r4, #12]
 8016766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801676a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801676e:	81a3      	strh	r3, [r4, #12]
 8016770:	4632      	mov	r2, r6
 8016772:	463b      	mov	r3, r7
 8016774:	4628      	mov	r0, r5
 8016776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801677a:	f000 b857 	b.w	801682c <_write_r>

0801677e <__sseek>:
 801677e:	b510      	push	{r4, lr}
 8016780:	460c      	mov	r4, r1
 8016782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016786:	f000 f82d 	bl	80167e4 <_lseek_r>
 801678a:	1c43      	adds	r3, r0, #1
 801678c:	89a3      	ldrh	r3, [r4, #12]
 801678e:	bf15      	itete	ne
 8016790:	6560      	strne	r0, [r4, #84]	; 0x54
 8016792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801679a:	81a3      	strheq	r3, [r4, #12]
 801679c:	bf18      	it	ne
 801679e:	81a3      	strhne	r3, [r4, #12]
 80167a0:	bd10      	pop	{r4, pc}

080167a2 <__sclose>:
 80167a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167a6:	f000 b80d 	b.w	80167c4 <_close_r>

080167aa <memset>:
 80167aa:	4402      	add	r2, r0
 80167ac:	4603      	mov	r3, r0
 80167ae:	4293      	cmp	r3, r2
 80167b0:	d100      	bne.n	80167b4 <memset+0xa>
 80167b2:	4770      	bx	lr
 80167b4:	f803 1b01 	strb.w	r1, [r3], #1
 80167b8:	e7f9      	b.n	80167ae <memset+0x4>
	...

080167bc <_localeconv_r>:
 80167bc:	4800      	ldr	r0, [pc, #0]	; (80167c0 <_localeconv_r+0x4>)
 80167be:	4770      	bx	lr
 80167c0:	200004c4 	.word	0x200004c4

080167c4 <_close_r>:
 80167c4:	b538      	push	{r3, r4, r5, lr}
 80167c6:	4d06      	ldr	r5, [pc, #24]	; (80167e0 <_close_r+0x1c>)
 80167c8:	2300      	movs	r3, #0
 80167ca:	4604      	mov	r4, r0
 80167cc:	4608      	mov	r0, r1
 80167ce:	602b      	str	r3, [r5, #0]
 80167d0:	f7ee fd8f 	bl	80052f2 <_close>
 80167d4:	1c43      	adds	r3, r0, #1
 80167d6:	d102      	bne.n	80167de <_close_r+0x1a>
 80167d8:	682b      	ldr	r3, [r5, #0]
 80167da:	b103      	cbz	r3, 80167de <_close_r+0x1a>
 80167dc:	6023      	str	r3, [r4, #0]
 80167de:	bd38      	pop	{r3, r4, r5, pc}
 80167e0:	200033b8 	.word	0x200033b8

080167e4 <_lseek_r>:
 80167e4:	b538      	push	{r3, r4, r5, lr}
 80167e6:	4d07      	ldr	r5, [pc, #28]	; (8016804 <_lseek_r+0x20>)
 80167e8:	4604      	mov	r4, r0
 80167ea:	4608      	mov	r0, r1
 80167ec:	4611      	mov	r1, r2
 80167ee:	2200      	movs	r2, #0
 80167f0:	602a      	str	r2, [r5, #0]
 80167f2:	461a      	mov	r2, r3
 80167f4:	f7ee fda4 	bl	8005340 <_lseek>
 80167f8:	1c43      	adds	r3, r0, #1
 80167fa:	d102      	bne.n	8016802 <_lseek_r+0x1e>
 80167fc:	682b      	ldr	r3, [r5, #0]
 80167fe:	b103      	cbz	r3, 8016802 <_lseek_r+0x1e>
 8016800:	6023      	str	r3, [r4, #0]
 8016802:	bd38      	pop	{r3, r4, r5, pc}
 8016804:	200033b8 	.word	0x200033b8

08016808 <_read_r>:
 8016808:	b538      	push	{r3, r4, r5, lr}
 801680a:	4d07      	ldr	r5, [pc, #28]	; (8016828 <_read_r+0x20>)
 801680c:	4604      	mov	r4, r0
 801680e:	4608      	mov	r0, r1
 8016810:	4611      	mov	r1, r2
 8016812:	2200      	movs	r2, #0
 8016814:	602a      	str	r2, [r5, #0]
 8016816:	461a      	mov	r2, r3
 8016818:	f7ee fd32 	bl	8005280 <_read>
 801681c:	1c43      	adds	r3, r0, #1
 801681e:	d102      	bne.n	8016826 <_read_r+0x1e>
 8016820:	682b      	ldr	r3, [r5, #0]
 8016822:	b103      	cbz	r3, 8016826 <_read_r+0x1e>
 8016824:	6023      	str	r3, [r4, #0]
 8016826:	bd38      	pop	{r3, r4, r5, pc}
 8016828:	200033b8 	.word	0x200033b8

0801682c <_write_r>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4d07      	ldr	r5, [pc, #28]	; (801684c <_write_r+0x20>)
 8016830:	4604      	mov	r4, r0
 8016832:	4608      	mov	r0, r1
 8016834:	4611      	mov	r1, r2
 8016836:	2200      	movs	r2, #0
 8016838:	602a      	str	r2, [r5, #0]
 801683a:	461a      	mov	r2, r3
 801683c:	f7ee fd3d 	bl	80052ba <_write>
 8016840:	1c43      	adds	r3, r0, #1
 8016842:	d102      	bne.n	801684a <_write_r+0x1e>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	b103      	cbz	r3, 801684a <_write_r+0x1e>
 8016848:	6023      	str	r3, [r4, #0]
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	200033b8 	.word	0x200033b8

08016850 <__errno>:
 8016850:	4b01      	ldr	r3, [pc, #4]	; (8016858 <__errno+0x8>)
 8016852:	6818      	ldr	r0, [r3, #0]
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	200003d0 	.word	0x200003d0

0801685c <__libc_init_array>:
 801685c:	b570      	push	{r4, r5, r6, lr}
 801685e:	4d0d      	ldr	r5, [pc, #52]	; (8016894 <__libc_init_array+0x38>)
 8016860:	4c0d      	ldr	r4, [pc, #52]	; (8016898 <__libc_init_array+0x3c>)
 8016862:	1b64      	subs	r4, r4, r5
 8016864:	10a4      	asrs	r4, r4, #2
 8016866:	2600      	movs	r6, #0
 8016868:	42a6      	cmp	r6, r4
 801686a:	d109      	bne.n	8016880 <__libc_init_array+0x24>
 801686c:	4d0b      	ldr	r5, [pc, #44]	; (801689c <__libc_init_array+0x40>)
 801686e:	4c0c      	ldr	r4, [pc, #48]	; (80168a0 <__libc_init_array+0x44>)
 8016870:	f003 fd5a 	bl	801a328 <_init>
 8016874:	1b64      	subs	r4, r4, r5
 8016876:	10a4      	asrs	r4, r4, #2
 8016878:	2600      	movs	r6, #0
 801687a:	42a6      	cmp	r6, r4
 801687c:	d105      	bne.n	801688a <__libc_init_array+0x2e>
 801687e:	bd70      	pop	{r4, r5, r6, pc}
 8016880:	f855 3b04 	ldr.w	r3, [r5], #4
 8016884:	4798      	blx	r3
 8016886:	3601      	adds	r6, #1
 8016888:	e7ee      	b.n	8016868 <__libc_init_array+0xc>
 801688a:	f855 3b04 	ldr.w	r3, [r5], #4
 801688e:	4798      	blx	r3
 8016890:	3601      	adds	r6, #1
 8016892:	e7f2      	b.n	801687a <__libc_init_array+0x1e>
 8016894:	0801d0e0 	.word	0x0801d0e0
 8016898:	0801d0e0 	.word	0x0801d0e0
 801689c:	0801d0e0 	.word	0x0801d0e0
 80168a0:	0801d0e4 	.word	0x0801d0e4

080168a4 <__retarget_lock_init_recursive>:
 80168a4:	4770      	bx	lr

080168a6 <__retarget_lock_acquire_recursive>:
 80168a6:	4770      	bx	lr

080168a8 <__retarget_lock_release_recursive>:
 80168a8:	4770      	bx	lr

080168aa <memcpy>:
 80168aa:	440a      	add	r2, r1
 80168ac:	4291      	cmp	r1, r2
 80168ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80168b2:	d100      	bne.n	80168b6 <memcpy+0xc>
 80168b4:	4770      	bx	lr
 80168b6:	b510      	push	{r4, lr}
 80168b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168c0:	4291      	cmp	r1, r2
 80168c2:	d1f9      	bne.n	80168b8 <memcpy+0xe>
 80168c4:	bd10      	pop	{r4, pc}
	...

080168c8 <nanf>:
 80168c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80168d0 <nanf+0x8>
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	7fc00000 	.word	0x7fc00000

080168d4 <quorem>:
 80168d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d8:	6903      	ldr	r3, [r0, #16]
 80168da:	690c      	ldr	r4, [r1, #16]
 80168dc:	42a3      	cmp	r3, r4
 80168de:	4607      	mov	r7, r0
 80168e0:	db7e      	blt.n	80169e0 <quorem+0x10c>
 80168e2:	3c01      	subs	r4, #1
 80168e4:	f101 0814 	add.w	r8, r1, #20
 80168e8:	f100 0514 	add.w	r5, r0, #20
 80168ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80168f0:	9301      	str	r3, [sp, #4]
 80168f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80168f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80168fa:	3301      	adds	r3, #1
 80168fc:	429a      	cmp	r2, r3
 80168fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016902:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016906:	fbb2 f6f3 	udiv	r6, r2, r3
 801690a:	d331      	bcc.n	8016970 <quorem+0x9c>
 801690c:	f04f 0e00 	mov.w	lr, #0
 8016910:	4640      	mov	r0, r8
 8016912:	46ac      	mov	ip, r5
 8016914:	46f2      	mov	sl, lr
 8016916:	f850 2b04 	ldr.w	r2, [r0], #4
 801691a:	b293      	uxth	r3, r2
 801691c:	fb06 e303 	mla	r3, r6, r3, lr
 8016920:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016924:	0c1a      	lsrs	r2, r3, #16
 8016926:	b29b      	uxth	r3, r3
 8016928:	ebaa 0303 	sub.w	r3, sl, r3
 801692c:	f8dc a000 	ldr.w	sl, [ip]
 8016930:	fa13 f38a 	uxtah	r3, r3, sl
 8016934:	fb06 220e 	mla	r2, r6, lr, r2
 8016938:	9300      	str	r3, [sp, #0]
 801693a:	9b00      	ldr	r3, [sp, #0]
 801693c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016940:	b292      	uxth	r2, r2
 8016942:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801694a:	f8bd 3000 	ldrh.w	r3, [sp]
 801694e:	4581      	cmp	r9, r0
 8016950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016954:	f84c 3b04 	str.w	r3, [ip], #4
 8016958:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801695c:	d2db      	bcs.n	8016916 <quorem+0x42>
 801695e:	f855 300b 	ldr.w	r3, [r5, fp]
 8016962:	b92b      	cbnz	r3, 8016970 <quorem+0x9c>
 8016964:	9b01      	ldr	r3, [sp, #4]
 8016966:	3b04      	subs	r3, #4
 8016968:	429d      	cmp	r5, r3
 801696a:	461a      	mov	r2, r3
 801696c:	d32c      	bcc.n	80169c8 <quorem+0xf4>
 801696e:	613c      	str	r4, [r7, #16]
 8016970:	4638      	mov	r0, r7
 8016972:	f001 f9f1 	bl	8017d58 <__mcmp>
 8016976:	2800      	cmp	r0, #0
 8016978:	db22      	blt.n	80169c0 <quorem+0xec>
 801697a:	3601      	adds	r6, #1
 801697c:	4629      	mov	r1, r5
 801697e:	2000      	movs	r0, #0
 8016980:	f858 2b04 	ldr.w	r2, [r8], #4
 8016984:	f8d1 c000 	ldr.w	ip, [r1]
 8016988:	b293      	uxth	r3, r2
 801698a:	1ac3      	subs	r3, r0, r3
 801698c:	0c12      	lsrs	r2, r2, #16
 801698e:	fa13 f38c 	uxtah	r3, r3, ip
 8016992:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016996:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801699a:	b29b      	uxth	r3, r3
 801699c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80169a0:	45c1      	cmp	r9, r8
 80169a2:	f841 3b04 	str.w	r3, [r1], #4
 80169a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80169aa:	d2e9      	bcs.n	8016980 <quorem+0xac>
 80169ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80169b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80169b4:	b922      	cbnz	r2, 80169c0 <quorem+0xec>
 80169b6:	3b04      	subs	r3, #4
 80169b8:	429d      	cmp	r5, r3
 80169ba:	461a      	mov	r2, r3
 80169bc:	d30a      	bcc.n	80169d4 <quorem+0x100>
 80169be:	613c      	str	r4, [r7, #16]
 80169c0:	4630      	mov	r0, r6
 80169c2:	b003      	add	sp, #12
 80169c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c8:	6812      	ldr	r2, [r2, #0]
 80169ca:	3b04      	subs	r3, #4
 80169cc:	2a00      	cmp	r2, #0
 80169ce:	d1ce      	bne.n	801696e <quorem+0x9a>
 80169d0:	3c01      	subs	r4, #1
 80169d2:	e7c9      	b.n	8016968 <quorem+0x94>
 80169d4:	6812      	ldr	r2, [r2, #0]
 80169d6:	3b04      	subs	r3, #4
 80169d8:	2a00      	cmp	r2, #0
 80169da:	d1f0      	bne.n	80169be <quorem+0xea>
 80169dc:	3c01      	subs	r4, #1
 80169de:	e7eb      	b.n	80169b8 <quorem+0xe4>
 80169e0:	2000      	movs	r0, #0
 80169e2:	e7ee      	b.n	80169c2 <quorem+0xee>
 80169e4:	0000      	movs	r0, r0
	...

080169e8 <_dtoa_r>:
 80169e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ec:	ed2d 8b04 	vpush	{d8-d9}
 80169f0:	69c5      	ldr	r5, [r0, #28]
 80169f2:	b093      	sub	sp, #76	; 0x4c
 80169f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80169f8:	ec57 6b10 	vmov	r6, r7, d0
 80169fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016a00:	9107      	str	r1, [sp, #28]
 8016a02:	4604      	mov	r4, r0
 8016a04:	920a      	str	r2, [sp, #40]	; 0x28
 8016a06:	930d      	str	r3, [sp, #52]	; 0x34
 8016a08:	b975      	cbnz	r5, 8016a28 <_dtoa_r+0x40>
 8016a0a:	2010      	movs	r0, #16
 8016a0c:	f000 fe2a 	bl	8017664 <malloc>
 8016a10:	4602      	mov	r2, r0
 8016a12:	61e0      	str	r0, [r4, #28]
 8016a14:	b920      	cbnz	r0, 8016a20 <_dtoa_r+0x38>
 8016a16:	4bae      	ldr	r3, [pc, #696]	; (8016cd0 <_dtoa_r+0x2e8>)
 8016a18:	21ef      	movs	r1, #239	; 0xef
 8016a1a:	48ae      	ldr	r0, [pc, #696]	; (8016cd4 <_dtoa_r+0x2ec>)
 8016a1c:	f002 fc64 	bl	80192e8 <__assert_func>
 8016a20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016a24:	6005      	str	r5, [r0, #0]
 8016a26:	60c5      	str	r5, [r0, #12]
 8016a28:	69e3      	ldr	r3, [r4, #28]
 8016a2a:	6819      	ldr	r1, [r3, #0]
 8016a2c:	b151      	cbz	r1, 8016a44 <_dtoa_r+0x5c>
 8016a2e:	685a      	ldr	r2, [r3, #4]
 8016a30:	604a      	str	r2, [r1, #4]
 8016a32:	2301      	movs	r3, #1
 8016a34:	4093      	lsls	r3, r2
 8016a36:	608b      	str	r3, [r1, #8]
 8016a38:	4620      	mov	r0, r4
 8016a3a:	f000 ff07 	bl	801784c <_Bfree>
 8016a3e:	69e3      	ldr	r3, [r4, #28]
 8016a40:	2200      	movs	r2, #0
 8016a42:	601a      	str	r2, [r3, #0]
 8016a44:	1e3b      	subs	r3, r7, #0
 8016a46:	bfbb      	ittet	lt
 8016a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016a4c:	9303      	strlt	r3, [sp, #12]
 8016a4e:	2300      	movge	r3, #0
 8016a50:	2201      	movlt	r2, #1
 8016a52:	bfac      	ite	ge
 8016a54:	f8c8 3000 	strge.w	r3, [r8]
 8016a58:	f8c8 2000 	strlt.w	r2, [r8]
 8016a5c:	4b9e      	ldr	r3, [pc, #632]	; (8016cd8 <_dtoa_r+0x2f0>)
 8016a5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016a62:	ea33 0308 	bics.w	r3, r3, r8
 8016a66:	d11b      	bne.n	8016aa0 <_dtoa_r+0xb8>
 8016a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8016a6e:	6013      	str	r3, [r2, #0]
 8016a70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016a74:	4333      	orrs	r3, r6
 8016a76:	f000 8593 	beq.w	80175a0 <_dtoa_r+0xbb8>
 8016a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a7c:	b963      	cbnz	r3, 8016a98 <_dtoa_r+0xb0>
 8016a7e:	4b97      	ldr	r3, [pc, #604]	; (8016cdc <_dtoa_r+0x2f4>)
 8016a80:	e027      	b.n	8016ad2 <_dtoa_r+0xea>
 8016a82:	4b97      	ldr	r3, [pc, #604]	; (8016ce0 <_dtoa_r+0x2f8>)
 8016a84:	9300      	str	r3, [sp, #0]
 8016a86:	3308      	adds	r3, #8
 8016a88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a8a:	6013      	str	r3, [r2, #0]
 8016a8c:	9800      	ldr	r0, [sp, #0]
 8016a8e:	b013      	add	sp, #76	; 0x4c
 8016a90:	ecbd 8b04 	vpop	{d8-d9}
 8016a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a98:	4b90      	ldr	r3, [pc, #576]	; (8016cdc <_dtoa_r+0x2f4>)
 8016a9a:	9300      	str	r3, [sp, #0]
 8016a9c:	3303      	adds	r3, #3
 8016a9e:	e7f3      	b.n	8016a88 <_dtoa_r+0xa0>
 8016aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	ec51 0b17 	vmov	r0, r1, d7
 8016aaa:	eeb0 8a47 	vmov.f32	s16, s14
 8016aae:	eef0 8a67 	vmov.f32	s17, s15
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	f7ea f830 	bl	8000b18 <__aeabi_dcmpeq>
 8016ab8:	4681      	mov	r9, r0
 8016aba:	b160      	cbz	r0, 8016ad6 <_dtoa_r+0xee>
 8016abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016abe:	2301      	movs	r3, #1
 8016ac0:	6013      	str	r3, [r2, #0]
 8016ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	f000 8568 	beq.w	801759a <_dtoa_r+0xbb2>
 8016aca:	4b86      	ldr	r3, [pc, #536]	; (8016ce4 <_dtoa_r+0x2fc>)
 8016acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016ace:	6013      	str	r3, [r2, #0]
 8016ad0:	3b01      	subs	r3, #1
 8016ad2:	9300      	str	r3, [sp, #0]
 8016ad4:	e7da      	b.n	8016a8c <_dtoa_r+0xa4>
 8016ad6:	aa10      	add	r2, sp, #64	; 0x40
 8016ad8:	a911      	add	r1, sp, #68	; 0x44
 8016ada:	4620      	mov	r0, r4
 8016adc:	eeb0 0a48 	vmov.f32	s0, s16
 8016ae0:	eef0 0a68 	vmov.f32	s1, s17
 8016ae4:	f001 fa4e 	bl	8017f84 <__d2b>
 8016ae8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016aec:	4682      	mov	sl, r0
 8016aee:	2d00      	cmp	r5, #0
 8016af0:	d07f      	beq.n	8016bf2 <_dtoa_r+0x20a>
 8016af2:	ee18 3a90 	vmov	r3, s17
 8016af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016afa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016afe:	ec51 0b18 	vmov	r0, r1, d8
 8016b02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016b0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016b0e:	4619      	mov	r1, r3
 8016b10:	2200      	movs	r2, #0
 8016b12:	4b75      	ldr	r3, [pc, #468]	; (8016ce8 <_dtoa_r+0x300>)
 8016b14:	f7e9 fbe0 	bl	80002d8 <__aeabi_dsub>
 8016b18:	a367      	add	r3, pc, #412	; (adr r3, 8016cb8 <_dtoa_r+0x2d0>)
 8016b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b1e:	f7e9 fd93 	bl	8000648 <__aeabi_dmul>
 8016b22:	a367      	add	r3, pc, #412	; (adr r3, 8016cc0 <_dtoa_r+0x2d8>)
 8016b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b28:	f7e9 fbd8 	bl	80002dc <__adddf3>
 8016b2c:	4606      	mov	r6, r0
 8016b2e:	4628      	mov	r0, r5
 8016b30:	460f      	mov	r7, r1
 8016b32:	f7e9 fd1f 	bl	8000574 <__aeabi_i2d>
 8016b36:	a364      	add	r3, pc, #400	; (adr r3, 8016cc8 <_dtoa_r+0x2e0>)
 8016b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3c:	f7e9 fd84 	bl	8000648 <__aeabi_dmul>
 8016b40:	4602      	mov	r2, r0
 8016b42:	460b      	mov	r3, r1
 8016b44:	4630      	mov	r0, r6
 8016b46:	4639      	mov	r1, r7
 8016b48:	f7e9 fbc8 	bl	80002dc <__adddf3>
 8016b4c:	4606      	mov	r6, r0
 8016b4e:	460f      	mov	r7, r1
 8016b50:	f7ea f82a 	bl	8000ba8 <__aeabi_d2iz>
 8016b54:	2200      	movs	r2, #0
 8016b56:	4683      	mov	fp, r0
 8016b58:	2300      	movs	r3, #0
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	4639      	mov	r1, r7
 8016b5e:	f7e9 ffe5 	bl	8000b2c <__aeabi_dcmplt>
 8016b62:	b148      	cbz	r0, 8016b78 <_dtoa_r+0x190>
 8016b64:	4658      	mov	r0, fp
 8016b66:	f7e9 fd05 	bl	8000574 <__aeabi_i2d>
 8016b6a:	4632      	mov	r2, r6
 8016b6c:	463b      	mov	r3, r7
 8016b6e:	f7e9 ffd3 	bl	8000b18 <__aeabi_dcmpeq>
 8016b72:	b908      	cbnz	r0, 8016b78 <_dtoa_r+0x190>
 8016b74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016b78:	f1bb 0f16 	cmp.w	fp, #22
 8016b7c:	d857      	bhi.n	8016c2e <_dtoa_r+0x246>
 8016b7e:	4b5b      	ldr	r3, [pc, #364]	; (8016cec <_dtoa_r+0x304>)
 8016b80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b88:	ec51 0b18 	vmov	r0, r1, d8
 8016b8c:	f7e9 ffce 	bl	8000b2c <__aeabi_dcmplt>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d04e      	beq.n	8016c32 <_dtoa_r+0x24a>
 8016b94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016b98:	2300      	movs	r3, #0
 8016b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8016b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b9e:	1b5b      	subs	r3, r3, r5
 8016ba0:	1e5a      	subs	r2, r3, #1
 8016ba2:	bf45      	ittet	mi
 8016ba4:	f1c3 0301 	rsbmi	r3, r3, #1
 8016ba8:	9305      	strmi	r3, [sp, #20]
 8016baa:	2300      	movpl	r3, #0
 8016bac:	2300      	movmi	r3, #0
 8016bae:	9206      	str	r2, [sp, #24]
 8016bb0:	bf54      	ite	pl
 8016bb2:	9305      	strpl	r3, [sp, #20]
 8016bb4:	9306      	strmi	r3, [sp, #24]
 8016bb6:	f1bb 0f00 	cmp.w	fp, #0
 8016bba:	db3c      	blt.n	8016c36 <_dtoa_r+0x24e>
 8016bbc:	9b06      	ldr	r3, [sp, #24]
 8016bbe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016bc2:	445b      	add	r3, fp
 8016bc4:	9306      	str	r3, [sp, #24]
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	9308      	str	r3, [sp, #32]
 8016bca:	9b07      	ldr	r3, [sp, #28]
 8016bcc:	2b09      	cmp	r3, #9
 8016bce:	d868      	bhi.n	8016ca2 <_dtoa_r+0x2ba>
 8016bd0:	2b05      	cmp	r3, #5
 8016bd2:	bfc4      	itt	gt
 8016bd4:	3b04      	subgt	r3, #4
 8016bd6:	9307      	strgt	r3, [sp, #28]
 8016bd8:	9b07      	ldr	r3, [sp, #28]
 8016bda:	f1a3 0302 	sub.w	r3, r3, #2
 8016bde:	bfcc      	ite	gt
 8016be0:	2500      	movgt	r5, #0
 8016be2:	2501      	movle	r5, #1
 8016be4:	2b03      	cmp	r3, #3
 8016be6:	f200 8085 	bhi.w	8016cf4 <_dtoa_r+0x30c>
 8016bea:	e8df f003 	tbb	[pc, r3]
 8016bee:	3b2e      	.short	0x3b2e
 8016bf0:	5839      	.short	0x5839
 8016bf2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016bf6:	441d      	add	r5, r3
 8016bf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016bfc:	2b20      	cmp	r3, #32
 8016bfe:	bfc1      	itttt	gt
 8016c00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016c04:	fa08 f803 	lslgt.w	r8, r8, r3
 8016c08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016c0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016c10:	bfd6      	itet	le
 8016c12:	f1c3 0320 	rsble	r3, r3, #32
 8016c16:	ea48 0003 	orrgt.w	r0, r8, r3
 8016c1a:	fa06 f003 	lslle.w	r0, r6, r3
 8016c1e:	f7e9 fc99 	bl	8000554 <__aeabi_ui2d>
 8016c22:	2201      	movs	r2, #1
 8016c24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016c28:	3d01      	subs	r5, #1
 8016c2a:	920e      	str	r2, [sp, #56]	; 0x38
 8016c2c:	e76f      	b.n	8016b0e <_dtoa_r+0x126>
 8016c2e:	2301      	movs	r3, #1
 8016c30:	e7b3      	b.n	8016b9a <_dtoa_r+0x1b2>
 8016c32:	900c      	str	r0, [sp, #48]	; 0x30
 8016c34:	e7b2      	b.n	8016b9c <_dtoa_r+0x1b4>
 8016c36:	9b05      	ldr	r3, [sp, #20]
 8016c38:	eba3 030b 	sub.w	r3, r3, fp
 8016c3c:	9305      	str	r3, [sp, #20]
 8016c3e:	f1cb 0300 	rsb	r3, fp, #0
 8016c42:	9308      	str	r3, [sp, #32]
 8016c44:	2300      	movs	r3, #0
 8016c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c48:	e7bf      	b.n	8016bca <_dtoa_r+0x1e2>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8016c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	dc52      	bgt.n	8016cfa <_dtoa_r+0x312>
 8016c54:	2301      	movs	r3, #1
 8016c56:	9301      	str	r3, [sp, #4]
 8016c58:	9304      	str	r3, [sp, #16]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8016c5e:	e00b      	b.n	8016c78 <_dtoa_r+0x290>
 8016c60:	2301      	movs	r3, #1
 8016c62:	e7f3      	b.n	8016c4c <_dtoa_r+0x264>
 8016c64:	2300      	movs	r3, #0
 8016c66:	9309      	str	r3, [sp, #36]	; 0x24
 8016c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c6a:	445b      	add	r3, fp
 8016c6c:	9301      	str	r3, [sp, #4]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	2b01      	cmp	r3, #1
 8016c72:	9304      	str	r3, [sp, #16]
 8016c74:	bfb8      	it	lt
 8016c76:	2301      	movlt	r3, #1
 8016c78:	69e0      	ldr	r0, [r4, #28]
 8016c7a:	2100      	movs	r1, #0
 8016c7c:	2204      	movs	r2, #4
 8016c7e:	f102 0614 	add.w	r6, r2, #20
 8016c82:	429e      	cmp	r6, r3
 8016c84:	d93d      	bls.n	8016d02 <_dtoa_r+0x31a>
 8016c86:	6041      	str	r1, [r0, #4]
 8016c88:	4620      	mov	r0, r4
 8016c8a:	f000 fd9f 	bl	80177cc <_Balloc>
 8016c8e:	9000      	str	r0, [sp, #0]
 8016c90:	2800      	cmp	r0, #0
 8016c92:	d139      	bne.n	8016d08 <_dtoa_r+0x320>
 8016c94:	4b16      	ldr	r3, [pc, #88]	; (8016cf0 <_dtoa_r+0x308>)
 8016c96:	4602      	mov	r2, r0
 8016c98:	f240 11af 	movw	r1, #431	; 0x1af
 8016c9c:	e6bd      	b.n	8016a1a <_dtoa_r+0x32>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	e7e1      	b.n	8016c66 <_dtoa_r+0x27e>
 8016ca2:	2501      	movs	r5, #1
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	9307      	str	r3, [sp, #28]
 8016ca8:	9509      	str	r5, [sp, #36]	; 0x24
 8016caa:	f04f 33ff 	mov.w	r3, #4294967295
 8016cae:	9301      	str	r3, [sp, #4]
 8016cb0:	9304      	str	r3, [sp, #16]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	2312      	movs	r3, #18
 8016cb6:	e7d1      	b.n	8016c5c <_dtoa_r+0x274>
 8016cb8:	636f4361 	.word	0x636f4361
 8016cbc:	3fd287a7 	.word	0x3fd287a7
 8016cc0:	8b60c8b3 	.word	0x8b60c8b3
 8016cc4:	3fc68a28 	.word	0x3fc68a28
 8016cc8:	509f79fb 	.word	0x509f79fb
 8016ccc:	3fd34413 	.word	0x3fd34413
 8016cd0:	0801cce2 	.word	0x0801cce2
 8016cd4:	0801ccf9 	.word	0x0801ccf9
 8016cd8:	7ff00000 	.word	0x7ff00000
 8016cdc:	0801ccde 	.word	0x0801ccde
 8016ce0:	0801ccd5 	.word	0x0801ccd5
 8016ce4:	0801ccad 	.word	0x0801ccad
 8016ce8:	3ff80000 	.word	0x3ff80000
 8016cec:	0801cde8 	.word	0x0801cde8
 8016cf0:	0801cd51 	.word	0x0801cd51
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf8:	e7d7      	b.n	8016caa <_dtoa_r+0x2c2>
 8016cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cfc:	9301      	str	r3, [sp, #4]
 8016cfe:	9304      	str	r3, [sp, #16]
 8016d00:	e7ba      	b.n	8016c78 <_dtoa_r+0x290>
 8016d02:	3101      	adds	r1, #1
 8016d04:	0052      	lsls	r2, r2, #1
 8016d06:	e7ba      	b.n	8016c7e <_dtoa_r+0x296>
 8016d08:	69e3      	ldr	r3, [r4, #28]
 8016d0a:	9a00      	ldr	r2, [sp, #0]
 8016d0c:	601a      	str	r2, [r3, #0]
 8016d0e:	9b04      	ldr	r3, [sp, #16]
 8016d10:	2b0e      	cmp	r3, #14
 8016d12:	f200 80a8 	bhi.w	8016e66 <_dtoa_r+0x47e>
 8016d16:	2d00      	cmp	r5, #0
 8016d18:	f000 80a5 	beq.w	8016e66 <_dtoa_r+0x47e>
 8016d1c:	f1bb 0f00 	cmp.w	fp, #0
 8016d20:	dd38      	ble.n	8016d94 <_dtoa_r+0x3ac>
 8016d22:	4bc0      	ldr	r3, [pc, #768]	; (8017024 <_dtoa_r+0x63c>)
 8016d24:	f00b 020f 	and.w	r2, fp, #15
 8016d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016d30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016d34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016d38:	d019      	beq.n	8016d6e <_dtoa_r+0x386>
 8016d3a:	4bbb      	ldr	r3, [pc, #748]	; (8017028 <_dtoa_r+0x640>)
 8016d3c:	ec51 0b18 	vmov	r0, r1, d8
 8016d40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016d44:	f7e9 fdaa 	bl	800089c <__aeabi_ddiv>
 8016d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d4c:	f008 080f 	and.w	r8, r8, #15
 8016d50:	2503      	movs	r5, #3
 8016d52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017028 <_dtoa_r+0x640>
 8016d56:	f1b8 0f00 	cmp.w	r8, #0
 8016d5a:	d10a      	bne.n	8016d72 <_dtoa_r+0x38a>
 8016d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d60:	4632      	mov	r2, r6
 8016d62:	463b      	mov	r3, r7
 8016d64:	f7e9 fd9a 	bl	800089c <__aeabi_ddiv>
 8016d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d6c:	e02b      	b.n	8016dc6 <_dtoa_r+0x3de>
 8016d6e:	2502      	movs	r5, #2
 8016d70:	e7ef      	b.n	8016d52 <_dtoa_r+0x36a>
 8016d72:	f018 0f01 	tst.w	r8, #1
 8016d76:	d008      	beq.n	8016d8a <_dtoa_r+0x3a2>
 8016d78:	4630      	mov	r0, r6
 8016d7a:	4639      	mov	r1, r7
 8016d7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016d80:	f7e9 fc62 	bl	8000648 <__aeabi_dmul>
 8016d84:	3501      	adds	r5, #1
 8016d86:	4606      	mov	r6, r0
 8016d88:	460f      	mov	r7, r1
 8016d8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d8e:	f109 0908 	add.w	r9, r9, #8
 8016d92:	e7e0      	b.n	8016d56 <_dtoa_r+0x36e>
 8016d94:	f000 809f 	beq.w	8016ed6 <_dtoa_r+0x4ee>
 8016d98:	f1cb 0600 	rsb	r6, fp, #0
 8016d9c:	4ba1      	ldr	r3, [pc, #644]	; (8017024 <_dtoa_r+0x63c>)
 8016d9e:	4fa2      	ldr	r7, [pc, #648]	; (8017028 <_dtoa_r+0x640>)
 8016da0:	f006 020f 	and.w	r2, r6, #15
 8016da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dac:	ec51 0b18 	vmov	r0, r1, d8
 8016db0:	f7e9 fc4a 	bl	8000648 <__aeabi_dmul>
 8016db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016db8:	1136      	asrs	r6, r6, #4
 8016dba:	2300      	movs	r3, #0
 8016dbc:	2502      	movs	r5, #2
 8016dbe:	2e00      	cmp	r6, #0
 8016dc0:	d17e      	bne.n	8016ec0 <_dtoa_r+0x4d8>
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d1d0      	bne.n	8016d68 <_dtoa_r+0x380>
 8016dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 8084 	beq.w	8016eda <_dtoa_r+0x4f2>
 8016dd2:	4b96      	ldr	r3, [pc, #600]	; (801702c <_dtoa_r+0x644>)
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	4640      	mov	r0, r8
 8016dd8:	4649      	mov	r1, r9
 8016dda:	f7e9 fea7 	bl	8000b2c <__aeabi_dcmplt>
 8016dde:	2800      	cmp	r0, #0
 8016de0:	d07b      	beq.n	8016eda <_dtoa_r+0x4f2>
 8016de2:	9b04      	ldr	r3, [sp, #16]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d078      	beq.n	8016eda <_dtoa_r+0x4f2>
 8016de8:	9b01      	ldr	r3, [sp, #4]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	dd39      	ble.n	8016e62 <_dtoa_r+0x47a>
 8016dee:	4b90      	ldr	r3, [pc, #576]	; (8017030 <_dtoa_r+0x648>)
 8016df0:	2200      	movs	r2, #0
 8016df2:	4640      	mov	r0, r8
 8016df4:	4649      	mov	r1, r9
 8016df6:	f7e9 fc27 	bl	8000648 <__aeabi_dmul>
 8016dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016dfe:	9e01      	ldr	r6, [sp, #4]
 8016e00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016e04:	3501      	adds	r5, #1
 8016e06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	f7e9 fbb2 	bl	8000574 <__aeabi_i2d>
 8016e10:	4642      	mov	r2, r8
 8016e12:	464b      	mov	r3, r9
 8016e14:	f7e9 fc18 	bl	8000648 <__aeabi_dmul>
 8016e18:	4b86      	ldr	r3, [pc, #536]	; (8017034 <_dtoa_r+0x64c>)
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	f7e9 fa5e 	bl	80002dc <__adddf3>
 8016e20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e28:	9303      	str	r3, [sp, #12]
 8016e2a:	2e00      	cmp	r6, #0
 8016e2c:	d158      	bne.n	8016ee0 <_dtoa_r+0x4f8>
 8016e2e:	4b82      	ldr	r3, [pc, #520]	; (8017038 <_dtoa_r+0x650>)
 8016e30:	2200      	movs	r2, #0
 8016e32:	4640      	mov	r0, r8
 8016e34:	4649      	mov	r1, r9
 8016e36:	f7e9 fa4f 	bl	80002d8 <__aeabi_dsub>
 8016e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e3e:	4680      	mov	r8, r0
 8016e40:	4689      	mov	r9, r1
 8016e42:	f7e9 fe91 	bl	8000b68 <__aeabi_dcmpgt>
 8016e46:	2800      	cmp	r0, #0
 8016e48:	f040 8296 	bne.w	8017378 <_dtoa_r+0x990>
 8016e4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016e50:	4640      	mov	r0, r8
 8016e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e56:	4649      	mov	r1, r9
 8016e58:	f7e9 fe68 	bl	8000b2c <__aeabi_dcmplt>
 8016e5c:	2800      	cmp	r0, #0
 8016e5e:	f040 8289 	bne.w	8017374 <_dtoa_r+0x98c>
 8016e62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	f2c0 814e 	blt.w	801710a <_dtoa_r+0x722>
 8016e6e:	f1bb 0f0e 	cmp.w	fp, #14
 8016e72:	f300 814a 	bgt.w	801710a <_dtoa_r+0x722>
 8016e76:	4b6b      	ldr	r3, [pc, #428]	; (8017024 <_dtoa_r+0x63c>)
 8016e78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f280 80dc 	bge.w	8017040 <_dtoa_r+0x658>
 8016e88:	9b04      	ldr	r3, [sp, #16]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	f300 80d8 	bgt.w	8017040 <_dtoa_r+0x658>
 8016e90:	f040 826f 	bne.w	8017372 <_dtoa_r+0x98a>
 8016e94:	4b68      	ldr	r3, [pc, #416]	; (8017038 <_dtoa_r+0x650>)
 8016e96:	2200      	movs	r2, #0
 8016e98:	4640      	mov	r0, r8
 8016e9a:	4649      	mov	r1, r9
 8016e9c:	f7e9 fbd4 	bl	8000648 <__aeabi_dmul>
 8016ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ea4:	f7e9 fe56 	bl	8000b54 <__aeabi_dcmpge>
 8016ea8:	9e04      	ldr	r6, [sp, #16]
 8016eaa:	4637      	mov	r7, r6
 8016eac:	2800      	cmp	r0, #0
 8016eae:	f040 8245 	bne.w	801733c <_dtoa_r+0x954>
 8016eb2:	9d00      	ldr	r5, [sp, #0]
 8016eb4:	2331      	movs	r3, #49	; 0x31
 8016eb6:	f805 3b01 	strb.w	r3, [r5], #1
 8016eba:	f10b 0b01 	add.w	fp, fp, #1
 8016ebe:	e241      	b.n	8017344 <_dtoa_r+0x95c>
 8016ec0:	07f2      	lsls	r2, r6, #31
 8016ec2:	d505      	bpl.n	8016ed0 <_dtoa_r+0x4e8>
 8016ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ec8:	f7e9 fbbe 	bl	8000648 <__aeabi_dmul>
 8016ecc:	3501      	adds	r5, #1
 8016ece:	2301      	movs	r3, #1
 8016ed0:	1076      	asrs	r6, r6, #1
 8016ed2:	3708      	adds	r7, #8
 8016ed4:	e773      	b.n	8016dbe <_dtoa_r+0x3d6>
 8016ed6:	2502      	movs	r5, #2
 8016ed8:	e775      	b.n	8016dc6 <_dtoa_r+0x3de>
 8016eda:	9e04      	ldr	r6, [sp, #16]
 8016edc:	465f      	mov	r7, fp
 8016ede:	e792      	b.n	8016e06 <_dtoa_r+0x41e>
 8016ee0:	9900      	ldr	r1, [sp, #0]
 8016ee2:	4b50      	ldr	r3, [pc, #320]	; (8017024 <_dtoa_r+0x63c>)
 8016ee4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ee8:	4431      	add	r1, r6
 8016eea:	9102      	str	r1, [sp, #8]
 8016eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016eee:	eeb0 9a47 	vmov.f32	s18, s14
 8016ef2:	eef0 9a67 	vmov.f32	s19, s15
 8016ef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016efe:	2900      	cmp	r1, #0
 8016f00:	d044      	beq.n	8016f8c <_dtoa_r+0x5a4>
 8016f02:	494e      	ldr	r1, [pc, #312]	; (801703c <_dtoa_r+0x654>)
 8016f04:	2000      	movs	r0, #0
 8016f06:	f7e9 fcc9 	bl	800089c <__aeabi_ddiv>
 8016f0a:	ec53 2b19 	vmov	r2, r3, d9
 8016f0e:	f7e9 f9e3 	bl	80002d8 <__aeabi_dsub>
 8016f12:	9d00      	ldr	r5, [sp, #0]
 8016f14:	ec41 0b19 	vmov	d9, r0, r1
 8016f18:	4649      	mov	r1, r9
 8016f1a:	4640      	mov	r0, r8
 8016f1c:	f7e9 fe44 	bl	8000ba8 <__aeabi_d2iz>
 8016f20:	4606      	mov	r6, r0
 8016f22:	f7e9 fb27 	bl	8000574 <__aeabi_i2d>
 8016f26:	4602      	mov	r2, r0
 8016f28:	460b      	mov	r3, r1
 8016f2a:	4640      	mov	r0, r8
 8016f2c:	4649      	mov	r1, r9
 8016f2e:	f7e9 f9d3 	bl	80002d8 <__aeabi_dsub>
 8016f32:	3630      	adds	r6, #48	; 0x30
 8016f34:	f805 6b01 	strb.w	r6, [r5], #1
 8016f38:	ec53 2b19 	vmov	r2, r3, d9
 8016f3c:	4680      	mov	r8, r0
 8016f3e:	4689      	mov	r9, r1
 8016f40:	f7e9 fdf4 	bl	8000b2c <__aeabi_dcmplt>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d164      	bne.n	8017012 <_dtoa_r+0x62a>
 8016f48:	4642      	mov	r2, r8
 8016f4a:	464b      	mov	r3, r9
 8016f4c:	4937      	ldr	r1, [pc, #220]	; (801702c <_dtoa_r+0x644>)
 8016f4e:	2000      	movs	r0, #0
 8016f50:	f7e9 f9c2 	bl	80002d8 <__aeabi_dsub>
 8016f54:	ec53 2b19 	vmov	r2, r3, d9
 8016f58:	f7e9 fde8 	bl	8000b2c <__aeabi_dcmplt>
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	f040 80b6 	bne.w	80170ce <_dtoa_r+0x6e6>
 8016f62:	9b02      	ldr	r3, [sp, #8]
 8016f64:	429d      	cmp	r5, r3
 8016f66:	f43f af7c 	beq.w	8016e62 <_dtoa_r+0x47a>
 8016f6a:	4b31      	ldr	r3, [pc, #196]	; (8017030 <_dtoa_r+0x648>)
 8016f6c:	ec51 0b19 	vmov	r0, r1, d9
 8016f70:	2200      	movs	r2, #0
 8016f72:	f7e9 fb69 	bl	8000648 <__aeabi_dmul>
 8016f76:	4b2e      	ldr	r3, [pc, #184]	; (8017030 <_dtoa_r+0x648>)
 8016f78:	ec41 0b19 	vmov	d9, r0, r1
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	4640      	mov	r0, r8
 8016f80:	4649      	mov	r1, r9
 8016f82:	f7e9 fb61 	bl	8000648 <__aeabi_dmul>
 8016f86:	4680      	mov	r8, r0
 8016f88:	4689      	mov	r9, r1
 8016f8a:	e7c5      	b.n	8016f18 <_dtoa_r+0x530>
 8016f8c:	ec51 0b17 	vmov	r0, r1, d7
 8016f90:	f7e9 fb5a 	bl	8000648 <__aeabi_dmul>
 8016f94:	9b02      	ldr	r3, [sp, #8]
 8016f96:	9d00      	ldr	r5, [sp, #0]
 8016f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f9a:	ec41 0b19 	vmov	d9, r0, r1
 8016f9e:	4649      	mov	r1, r9
 8016fa0:	4640      	mov	r0, r8
 8016fa2:	f7e9 fe01 	bl	8000ba8 <__aeabi_d2iz>
 8016fa6:	4606      	mov	r6, r0
 8016fa8:	f7e9 fae4 	bl	8000574 <__aeabi_i2d>
 8016fac:	3630      	adds	r6, #48	; 0x30
 8016fae:	4602      	mov	r2, r0
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	4640      	mov	r0, r8
 8016fb4:	4649      	mov	r1, r9
 8016fb6:	f7e9 f98f 	bl	80002d8 <__aeabi_dsub>
 8016fba:	f805 6b01 	strb.w	r6, [r5], #1
 8016fbe:	9b02      	ldr	r3, [sp, #8]
 8016fc0:	429d      	cmp	r5, r3
 8016fc2:	4680      	mov	r8, r0
 8016fc4:	4689      	mov	r9, r1
 8016fc6:	f04f 0200 	mov.w	r2, #0
 8016fca:	d124      	bne.n	8017016 <_dtoa_r+0x62e>
 8016fcc:	4b1b      	ldr	r3, [pc, #108]	; (801703c <_dtoa_r+0x654>)
 8016fce:	ec51 0b19 	vmov	r0, r1, d9
 8016fd2:	f7e9 f983 	bl	80002dc <__adddf3>
 8016fd6:	4602      	mov	r2, r0
 8016fd8:	460b      	mov	r3, r1
 8016fda:	4640      	mov	r0, r8
 8016fdc:	4649      	mov	r1, r9
 8016fde:	f7e9 fdc3 	bl	8000b68 <__aeabi_dcmpgt>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d173      	bne.n	80170ce <_dtoa_r+0x6e6>
 8016fe6:	ec53 2b19 	vmov	r2, r3, d9
 8016fea:	4914      	ldr	r1, [pc, #80]	; (801703c <_dtoa_r+0x654>)
 8016fec:	2000      	movs	r0, #0
 8016fee:	f7e9 f973 	bl	80002d8 <__aeabi_dsub>
 8016ff2:	4602      	mov	r2, r0
 8016ff4:	460b      	mov	r3, r1
 8016ff6:	4640      	mov	r0, r8
 8016ff8:	4649      	mov	r1, r9
 8016ffa:	f7e9 fd97 	bl	8000b2c <__aeabi_dcmplt>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	f43f af2f 	beq.w	8016e62 <_dtoa_r+0x47a>
 8017004:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017006:	1e6b      	subs	r3, r5, #1
 8017008:	930f      	str	r3, [sp, #60]	; 0x3c
 801700a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801700e:	2b30      	cmp	r3, #48	; 0x30
 8017010:	d0f8      	beq.n	8017004 <_dtoa_r+0x61c>
 8017012:	46bb      	mov	fp, r7
 8017014:	e04a      	b.n	80170ac <_dtoa_r+0x6c4>
 8017016:	4b06      	ldr	r3, [pc, #24]	; (8017030 <_dtoa_r+0x648>)
 8017018:	f7e9 fb16 	bl	8000648 <__aeabi_dmul>
 801701c:	4680      	mov	r8, r0
 801701e:	4689      	mov	r9, r1
 8017020:	e7bd      	b.n	8016f9e <_dtoa_r+0x5b6>
 8017022:	bf00      	nop
 8017024:	0801cde8 	.word	0x0801cde8
 8017028:	0801cdc0 	.word	0x0801cdc0
 801702c:	3ff00000 	.word	0x3ff00000
 8017030:	40240000 	.word	0x40240000
 8017034:	401c0000 	.word	0x401c0000
 8017038:	40140000 	.word	0x40140000
 801703c:	3fe00000 	.word	0x3fe00000
 8017040:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017044:	9d00      	ldr	r5, [sp, #0]
 8017046:	4642      	mov	r2, r8
 8017048:	464b      	mov	r3, r9
 801704a:	4630      	mov	r0, r6
 801704c:	4639      	mov	r1, r7
 801704e:	f7e9 fc25 	bl	800089c <__aeabi_ddiv>
 8017052:	f7e9 fda9 	bl	8000ba8 <__aeabi_d2iz>
 8017056:	9001      	str	r0, [sp, #4]
 8017058:	f7e9 fa8c 	bl	8000574 <__aeabi_i2d>
 801705c:	4642      	mov	r2, r8
 801705e:	464b      	mov	r3, r9
 8017060:	f7e9 faf2 	bl	8000648 <__aeabi_dmul>
 8017064:	4602      	mov	r2, r0
 8017066:	460b      	mov	r3, r1
 8017068:	4630      	mov	r0, r6
 801706a:	4639      	mov	r1, r7
 801706c:	f7e9 f934 	bl	80002d8 <__aeabi_dsub>
 8017070:	9e01      	ldr	r6, [sp, #4]
 8017072:	9f04      	ldr	r7, [sp, #16]
 8017074:	3630      	adds	r6, #48	; 0x30
 8017076:	f805 6b01 	strb.w	r6, [r5], #1
 801707a:	9e00      	ldr	r6, [sp, #0]
 801707c:	1bae      	subs	r6, r5, r6
 801707e:	42b7      	cmp	r7, r6
 8017080:	4602      	mov	r2, r0
 8017082:	460b      	mov	r3, r1
 8017084:	d134      	bne.n	80170f0 <_dtoa_r+0x708>
 8017086:	f7e9 f929 	bl	80002dc <__adddf3>
 801708a:	4642      	mov	r2, r8
 801708c:	464b      	mov	r3, r9
 801708e:	4606      	mov	r6, r0
 8017090:	460f      	mov	r7, r1
 8017092:	f7e9 fd69 	bl	8000b68 <__aeabi_dcmpgt>
 8017096:	b9c8      	cbnz	r0, 80170cc <_dtoa_r+0x6e4>
 8017098:	4642      	mov	r2, r8
 801709a:	464b      	mov	r3, r9
 801709c:	4630      	mov	r0, r6
 801709e:	4639      	mov	r1, r7
 80170a0:	f7e9 fd3a 	bl	8000b18 <__aeabi_dcmpeq>
 80170a4:	b110      	cbz	r0, 80170ac <_dtoa_r+0x6c4>
 80170a6:	9b01      	ldr	r3, [sp, #4]
 80170a8:	07db      	lsls	r3, r3, #31
 80170aa:	d40f      	bmi.n	80170cc <_dtoa_r+0x6e4>
 80170ac:	4651      	mov	r1, sl
 80170ae:	4620      	mov	r0, r4
 80170b0:	f000 fbcc 	bl	801784c <_Bfree>
 80170b4:	2300      	movs	r3, #0
 80170b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80170b8:	702b      	strb	r3, [r5, #0]
 80170ba:	f10b 0301 	add.w	r3, fp, #1
 80170be:	6013      	str	r3, [r2, #0]
 80170c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f43f ace2 	beq.w	8016a8c <_dtoa_r+0xa4>
 80170c8:	601d      	str	r5, [r3, #0]
 80170ca:	e4df      	b.n	8016a8c <_dtoa_r+0xa4>
 80170cc:	465f      	mov	r7, fp
 80170ce:	462b      	mov	r3, r5
 80170d0:	461d      	mov	r5, r3
 80170d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80170d6:	2a39      	cmp	r2, #57	; 0x39
 80170d8:	d106      	bne.n	80170e8 <_dtoa_r+0x700>
 80170da:	9a00      	ldr	r2, [sp, #0]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d1f7      	bne.n	80170d0 <_dtoa_r+0x6e8>
 80170e0:	9900      	ldr	r1, [sp, #0]
 80170e2:	2230      	movs	r2, #48	; 0x30
 80170e4:	3701      	adds	r7, #1
 80170e6:	700a      	strb	r2, [r1, #0]
 80170e8:	781a      	ldrb	r2, [r3, #0]
 80170ea:	3201      	adds	r2, #1
 80170ec:	701a      	strb	r2, [r3, #0]
 80170ee:	e790      	b.n	8017012 <_dtoa_r+0x62a>
 80170f0:	4ba3      	ldr	r3, [pc, #652]	; (8017380 <_dtoa_r+0x998>)
 80170f2:	2200      	movs	r2, #0
 80170f4:	f7e9 faa8 	bl	8000648 <__aeabi_dmul>
 80170f8:	2200      	movs	r2, #0
 80170fa:	2300      	movs	r3, #0
 80170fc:	4606      	mov	r6, r0
 80170fe:	460f      	mov	r7, r1
 8017100:	f7e9 fd0a 	bl	8000b18 <__aeabi_dcmpeq>
 8017104:	2800      	cmp	r0, #0
 8017106:	d09e      	beq.n	8017046 <_dtoa_r+0x65e>
 8017108:	e7d0      	b.n	80170ac <_dtoa_r+0x6c4>
 801710a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801710c:	2a00      	cmp	r2, #0
 801710e:	f000 80ca 	beq.w	80172a6 <_dtoa_r+0x8be>
 8017112:	9a07      	ldr	r2, [sp, #28]
 8017114:	2a01      	cmp	r2, #1
 8017116:	f300 80ad 	bgt.w	8017274 <_dtoa_r+0x88c>
 801711a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801711c:	2a00      	cmp	r2, #0
 801711e:	f000 80a5 	beq.w	801726c <_dtoa_r+0x884>
 8017122:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017126:	9e08      	ldr	r6, [sp, #32]
 8017128:	9d05      	ldr	r5, [sp, #20]
 801712a:	9a05      	ldr	r2, [sp, #20]
 801712c:	441a      	add	r2, r3
 801712e:	9205      	str	r2, [sp, #20]
 8017130:	9a06      	ldr	r2, [sp, #24]
 8017132:	2101      	movs	r1, #1
 8017134:	441a      	add	r2, r3
 8017136:	4620      	mov	r0, r4
 8017138:	9206      	str	r2, [sp, #24]
 801713a:	f000 fc87 	bl	8017a4c <__i2b>
 801713e:	4607      	mov	r7, r0
 8017140:	b165      	cbz	r5, 801715c <_dtoa_r+0x774>
 8017142:	9b06      	ldr	r3, [sp, #24]
 8017144:	2b00      	cmp	r3, #0
 8017146:	dd09      	ble.n	801715c <_dtoa_r+0x774>
 8017148:	42ab      	cmp	r3, r5
 801714a:	9a05      	ldr	r2, [sp, #20]
 801714c:	bfa8      	it	ge
 801714e:	462b      	movge	r3, r5
 8017150:	1ad2      	subs	r2, r2, r3
 8017152:	9205      	str	r2, [sp, #20]
 8017154:	9a06      	ldr	r2, [sp, #24]
 8017156:	1aed      	subs	r5, r5, r3
 8017158:	1ad3      	subs	r3, r2, r3
 801715a:	9306      	str	r3, [sp, #24]
 801715c:	9b08      	ldr	r3, [sp, #32]
 801715e:	b1f3      	cbz	r3, 801719e <_dtoa_r+0x7b6>
 8017160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017162:	2b00      	cmp	r3, #0
 8017164:	f000 80a3 	beq.w	80172ae <_dtoa_r+0x8c6>
 8017168:	2e00      	cmp	r6, #0
 801716a:	dd10      	ble.n	801718e <_dtoa_r+0x7a6>
 801716c:	4639      	mov	r1, r7
 801716e:	4632      	mov	r2, r6
 8017170:	4620      	mov	r0, r4
 8017172:	f000 fd2b 	bl	8017bcc <__pow5mult>
 8017176:	4652      	mov	r2, sl
 8017178:	4601      	mov	r1, r0
 801717a:	4607      	mov	r7, r0
 801717c:	4620      	mov	r0, r4
 801717e:	f000 fc7b 	bl	8017a78 <__multiply>
 8017182:	4651      	mov	r1, sl
 8017184:	4680      	mov	r8, r0
 8017186:	4620      	mov	r0, r4
 8017188:	f000 fb60 	bl	801784c <_Bfree>
 801718c:	46c2      	mov	sl, r8
 801718e:	9b08      	ldr	r3, [sp, #32]
 8017190:	1b9a      	subs	r2, r3, r6
 8017192:	d004      	beq.n	801719e <_dtoa_r+0x7b6>
 8017194:	4651      	mov	r1, sl
 8017196:	4620      	mov	r0, r4
 8017198:	f000 fd18 	bl	8017bcc <__pow5mult>
 801719c:	4682      	mov	sl, r0
 801719e:	2101      	movs	r1, #1
 80171a0:	4620      	mov	r0, r4
 80171a2:	f000 fc53 	bl	8017a4c <__i2b>
 80171a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	4606      	mov	r6, r0
 80171ac:	f340 8081 	ble.w	80172b2 <_dtoa_r+0x8ca>
 80171b0:	461a      	mov	r2, r3
 80171b2:	4601      	mov	r1, r0
 80171b4:	4620      	mov	r0, r4
 80171b6:	f000 fd09 	bl	8017bcc <__pow5mult>
 80171ba:	9b07      	ldr	r3, [sp, #28]
 80171bc:	2b01      	cmp	r3, #1
 80171be:	4606      	mov	r6, r0
 80171c0:	dd7a      	ble.n	80172b8 <_dtoa_r+0x8d0>
 80171c2:	f04f 0800 	mov.w	r8, #0
 80171c6:	6933      	ldr	r3, [r6, #16]
 80171c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80171cc:	6918      	ldr	r0, [r3, #16]
 80171ce:	f000 fbef 	bl	80179b0 <__hi0bits>
 80171d2:	f1c0 0020 	rsb	r0, r0, #32
 80171d6:	9b06      	ldr	r3, [sp, #24]
 80171d8:	4418      	add	r0, r3
 80171da:	f010 001f 	ands.w	r0, r0, #31
 80171de:	f000 8094 	beq.w	801730a <_dtoa_r+0x922>
 80171e2:	f1c0 0320 	rsb	r3, r0, #32
 80171e6:	2b04      	cmp	r3, #4
 80171e8:	f340 8085 	ble.w	80172f6 <_dtoa_r+0x90e>
 80171ec:	9b05      	ldr	r3, [sp, #20]
 80171ee:	f1c0 001c 	rsb	r0, r0, #28
 80171f2:	4403      	add	r3, r0
 80171f4:	9305      	str	r3, [sp, #20]
 80171f6:	9b06      	ldr	r3, [sp, #24]
 80171f8:	4403      	add	r3, r0
 80171fa:	4405      	add	r5, r0
 80171fc:	9306      	str	r3, [sp, #24]
 80171fe:	9b05      	ldr	r3, [sp, #20]
 8017200:	2b00      	cmp	r3, #0
 8017202:	dd05      	ble.n	8017210 <_dtoa_r+0x828>
 8017204:	4651      	mov	r1, sl
 8017206:	461a      	mov	r2, r3
 8017208:	4620      	mov	r0, r4
 801720a:	f000 fd39 	bl	8017c80 <__lshift>
 801720e:	4682      	mov	sl, r0
 8017210:	9b06      	ldr	r3, [sp, #24]
 8017212:	2b00      	cmp	r3, #0
 8017214:	dd05      	ble.n	8017222 <_dtoa_r+0x83a>
 8017216:	4631      	mov	r1, r6
 8017218:	461a      	mov	r2, r3
 801721a:	4620      	mov	r0, r4
 801721c:	f000 fd30 	bl	8017c80 <__lshift>
 8017220:	4606      	mov	r6, r0
 8017222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017224:	2b00      	cmp	r3, #0
 8017226:	d072      	beq.n	801730e <_dtoa_r+0x926>
 8017228:	4631      	mov	r1, r6
 801722a:	4650      	mov	r0, sl
 801722c:	f000 fd94 	bl	8017d58 <__mcmp>
 8017230:	2800      	cmp	r0, #0
 8017232:	da6c      	bge.n	801730e <_dtoa_r+0x926>
 8017234:	2300      	movs	r3, #0
 8017236:	4651      	mov	r1, sl
 8017238:	220a      	movs	r2, #10
 801723a:	4620      	mov	r0, r4
 801723c:	f000 fb28 	bl	8017890 <__multadd>
 8017240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017242:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017246:	4682      	mov	sl, r0
 8017248:	2b00      	cmp	r3, #0
 801724a:	f000 81b0 	beq.w	80175ae <_dtoa_r+0xbc6>
 801724e:	2300      	movs	r3, #0
 8017250:	4639      	mov	r1, r7
 8017252:	220a      	movs	r2, #10
 8017254:	4620      	mov	r0, r4
 8017256:	f000 fb1b 	bl	8017890 <__multadd>
 801725a:	9b01      	ldr	r3, [sp, #4]
 801725c:	2b00      	cmp	r3, #0
 801725e:	4607      	mov	r7, r0
 8017260:	f300 8096 	bgt.w	8017390 <_dtoa_r+0x9a8>
 8017264:	9b07      	ldr	r3, [sp, #28]
 8017266:	2b02      	cmp	r3, #2
 8017268:	dc59      	bgt.n	801731e <_dtoa_r+0x936>
 801726a:	e091      	b.n	8017390 <_dtoa_r+0x9a8>
 801726c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801726e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017272:	e758      	b.n	8017126 <_dtoa_r+0x73e>
 8017274:	9b04      	ldr	r3, [sp, #16]
 8017276:	1e5e      	subs	r6, r3, #1
 8017278:	9b08      	ldr	r3, [sp, #32]
 801727a:	42b3      	cmp	r3, r6
 801727c:	bfbf      	itttt	lt
 801727e:	9b08      	ldrlt	r3, [sp, #32]
 8017280:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017282:	9608      	strlt	r6, [sp, #32]
 8017284:	1af3      	sublt	r3, r6, r3
 8017286:	bfb4      	ite	lt
 8017288:	18d2      	addlt	r2, r2, r3
 801728a:	1b9e      	subge	r6, r3, r6
 801728c:	9b04      	ldr	r3, [sp, #16]
 801728e:	bfbc      	itt	lt
 8017290:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017292:	2600      	movlt	r6, #0
 8017294:	2b00      	cmp	r3, #0
 8017296:	bfb7      	itett	lt
 8017298:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801729c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80172a0:	1a9d      	sublt	r5, r3, r2
 80172a2:	2300      	movlt	r3, #0
 80172a4:	e741      	b.n	801712a <_dtoa_r+0x742>
 80172a6:	9e08      	ldr	r6, [sp, #32]
 80172a8:	9d05      	ldr	r5, [sp, #20]
 80172aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80172ac:	e748      	b.n	8017140 <_dtoa_r+0x758>
 80172ae:	9a08      	ldr	r2, [sp, #32]
 80172b0:	e770      	b.n	8017194 <_dtoa_r+0x7ac>
 80172b2:	9b07      	ldr	r3, [sp, #28]
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	dc19      	bgt.n	80172ec <_dtoa_r+0x904>
 80172b8:	9b02      	ldr	r3, [sp, #8]
 80172ba:	b9bb      	cbnz	r3, 80172ec <_dtoa_r+0x904>
 80172bc:	9b03      	ldr	r3, [sp, #12]
 80172be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172c2:	b99b      	cbnz	r3, 80172ec <_dtoa_r+0x904>
 80172c4:	9b03      	ldr	r3, [sp, #12]
 80172c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80172ca:	0d1b      	lsrs	r3, r3, #20
 80172cc:	051b      	lsls	r3, r3, #20
 80172ce:	b183      	cbz	r3, 80172f2 <_dtoa_r+0x90a>
 80172d0:	9b05      	ldr	r3, [sp, #20]
 80172d2:	3301      	adds	r3, #1
 80172d4:	9305      	str	r3, [sp, #20]
 80172d6:	9b06      	ldr	r3, [sp, #24]
 80172d8:	3301      	adds	r3, #1
 80172da:	9306      	str	r3, [sp, #24]
 80172dc:	f04f 0801 	mov.w	r8, #1
 80172e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f47f af6f 	bne.w	80171c6 <_dtoa_r+0x7de>
 80172e8:	2001      	movs	r0, #1
 80172ea:	e774      	b.n	80171d6 <_dtoa_r+0x7ee>
 80172ec:	f04f 0800 	mov.w	r8, #0
 80172f0:	e7f6      	b.n	80172e0 <_dtoa_r+0x8f8>
 80172f2:	4698      	mov	r8, r3
 80172f4:	e7f4      	b.n	80172e0 <_dtoa_r+0x8f8>
 80172f6:	d082      	beq.n	80171fe <_dtoa_r+0x816>
 80172f8:	9a05      	ldr	r2, [sp, #20]
 80172fa:	331c      	adds	r3, #28
 80172fc:	441a      	add	r2, r3
 80172fe:	9205      	str	r2, [sp, #20]
 8017300:	9a06      	ldr	r2, [sp, #24]
 8017302:	441a      	add	r2, r3
 8017304:	441d      	add	r5, r3
 8017306:	9206      	str	r2, [sp, #24]
 8017308:	e779      	b.n	80171fe <_dtoa_r+0x816>
 801730a:	4603      	mov	r3, r0
 801730c:	e7f4      	b.n	80172f8 <_dtoa_r+0x910>
 801730e:	9b04      	ldr	r3, [sp, #16]
 8017310:	2b00      	cmp	r3, #0
 8017312:	dc37      	bgt.n	8017384 <_dtoa_r+0x99c>
 8017314:	9b07      	ldr	r3, [sp, #28]
 8017316:	2b02      	cmp	r3, #2
 8017318:	dd34      	ble.n	8017384 <_dtoa_r+0x99c>
 801731a:	9b04      	ldr	r3, [sp, #16]
 801731c:	9301      	str	r3, [sp, #4]
 801731e:	9b01      	ldr	r3, [sp, #4]
 8017320:	b963      	cbnz	r3, 801733c <_dtoa_r+0x954>
 8017322:	4631      	mov	r1, r6
 8017324:	2205      	movs	r2, #5
 8017326:	4620      	mov	r0, r4
 8017328:	f000 fab2 	bl	8017890 <__multadd>
 801732c:	4601      	mov	r1, r0
 801732e:	4606      	mov	r6, r0
 8017330:	4650      	mov	r0, sl
 8017332:	f000 fd11 	bl	8017d58 <__mcmp>
 8017336:	2800      	cmp	r0, #0
 8017338:	f73f adbb 	bgt.w	8016eb2 <_dtoa_r+0x4ca>
 801733c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801733e:	9d00      	ldr	r5, [sp, #0]
 8017340:	ea6f 0b03 	mvn.w	fp, r3
 8017344:	f04f 0800 	mov.w	r8, #0
 8017348:	4631      	mov	r1, r6
 801734a:	4620      	mov	r0, r4
 801734c:	f000 fa7e 	bl	801784c <_Bfree>
 8017350:	2f00      	cmp	r7, #0
 8017352:	f43f aeab 	beq.w	80170ac <_dtoa_r+0x6c4>
 8017356:	f1b8 0f00 	cmp.w	r8, #0
 801735a:	d005      	beq.n	8017368 <_dtoa_r+0x980>
 801735c:	45b8      	cmp	r8, r7
 801735e:	d003      	beq.n	8017368 <_dtoa_r+0x980>
 8017360:	4641      	mov	r1, r8
 8017362:	4620      	mov	r0, r4
 8017364:	f000 fa72 	bl	801784c <_Bfree>
 8017368:	4639      	mov	r1, r7
 801736a:	4620      	mov	r0, r4
 801736c:	f000 fa6e 	bl	801784c <_Bfree>
 8017370:	e69c      	b.n	80170ac <_dtoa_r+0x6c4>
 8017372:	2600      	movs	r6, #0
 8017374:	4637      	mov	r7, r6
 8017376:	e7e1      	b.n	801733c <_dtoa_r+0x954>
 8017378:	46bb      	mov	fp, r7
 801737a:	4637      	mov	r7, r6
 801737c:	e599      	b.n	8016eb2 <_dtoa_r+0x4ca>
 801737e:	bf00      	nop
 8017380:	40240000 	.word	0x40240000
 8017384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017386:	2b00      	cmp	r3, #0
 8017388:	f000 80c8 	beq.w	801751c <_dtoa_r+0xb34>
 801738c:	9b04      	ldr	r3, [sp, #16]
 801738e:	9301      	str	r3, [sp, #4]
 8017390:	2d00      	cmp	r5, #0
 8017392:	dd05      	ble.n	80173a0 <_dtoa_r+0x9b8>
 8017394:	4639      	mov	r1, r7
 8017396:	462a      	mov	r2, r5
 8017398:	4620      	mov	r0, r4
 801739a:	f000 fc71 	bl	8017c80 <__lshift>
 801739e:	4607      	mov	r7, r0
 80173a0:	f1b8 0f00 	cmp.w	r8, #0
 80173a4:	d05b      	beq.n	801745e <_dtoa_r+0xa76>
 80173a6:	6879      	ldr	r1, [r7, #4]
 80173a8:	4620      	mov	r0, r4
 80173aa:	f000 fa0f 	bl	80177cc <_Balloc>
 80173ae:	4605      	mov	r5, r0
 80173b0:	b928      	cbnz	r0, 80173be <_dtoa_r+0x9d6>
 80173b2:	4b83      	ldr	r3, [pc, #524]	; (80175c0 <_dtoa_r+0xbd8>)
 80173b4:	4602      	mov	r2, r0
 80173b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80173ba:	f7ff bb2e 	b.w	8016a1a <_dtoa_r+0x32>
 80173be:	693a      	ldr	r2, [r7, #16]
 80173c0:	3202      	adds	r2, #2
 80173c2:	0092      	lsls	r2, r2, #2
 80173c4:	f107 010c 	add.w	r1, r7, #12
 80173c8:	300c      	adds	r0, #12
 80173ca:	f7ff fa6e 	bl	80168aa <memcpy>
 80173ce:	2201      	movs	r2, #1
 80173d0:	4629      	mov	r1, r5
 80173d2:	4620      	mov	r0, r4
 80173d4:	f000 fc54 	bl	8017c80 <__lshift>
 80173d8:	9b00      	ldr	r3, [sp, #0]
 80173da:	3301      	adds	r3, #1
 80173dc:	9304      	str	r3, [sp, #16]
 80173de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173e2:	4413      	add	r3, r2
 80173e4:	9308      	str	r3, [sp, #32]
 80173e6:	9b02      	ldr	r3, [sp, #8]
 80173e8:	f003 0301 	and.w	r3, r3, #1
 80173ec:	46b8      	mov	r8, r7
 80173ee:	9306      	str	r3, [sp, #24]
 80173f0:	4607      	mov	r7, r0
 80173f2:	9b04      	ldr	r3, [sp, #16]
 80173f4:	4631      	mov	r1, r6
 80173f6:	3b01      	subs	r3, #1
 80173f8:	4650      	mov	r0, sl
 80173fa:	9301      	str	r3, [sp, #4]
 80173fc:	f7ff fa6a 	bl	80168d4 <quorem>
 8017400:	4641      	mov	r1, r8
 8017402:	9002      	str	r0, [sp, #8]
 8017404:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017408:	4650      	mov	r0, sl
 801740a:	f000 fca5 	bl	8017d58 <__mcmp>
 801740e:	463a      	mov	r2, r7
 8017410:	9005      	str	r0, [sp, #20]
 8017412:	4631      	mov	r1, r6
 8017414:	4620      	mov	r0, r4
 8017416:	f000 fcbb 	bl	8017d90 <__mdiff>
 801741a:	68c2      	ldr	r2, [r0, #12]
 801741c:	4605      	mov	r5, r0
 801741e:	bb02      	cbnz	r2, 8017462 <_dtoa_r+0xa7a>
 8017420:	4601      	mov	r1, r0
 8017422:	4650      	mov	r0, sl
 8017424:	f000 fc98 	bl	8017d58 <__mcmp>
 8017428:	4602      	mov	r2, r0
 801742a:	4629      	mov	r1, r5
 801742c:	4620      	mov	r0, r4
 801742e:	9209      	str	r2, [sp, #36]	; 0x24
 8017430:	f000 fa0c 	bl	801784c <_Bfree>
 8017434:	9b07      	ldr	r3, [sp, #28]
 8017436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017438:	9d04      	ldr	r5, [sp, #16]
 801743a:	ea43 0102 	orr.w	r1, r3, r2
 801743e:	9b06      	ldr	r3, [sp, #24]
 8017440:	4319      	orrs	r1, r3
 8017442:	d110      	bne.n	8017466 <_dtoa_r+0xa7e>
 8017444:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017448:	d029      	beq.n	801749e <_dtoa_r+0xab6>
 801744a:	9b05      	ldr	r3, [sp, #20]
 801744c:	2b00      	cmp	r3, #0
 801744e:	dd02      	ble.n	8017456 <_dtoa_r+0xa6e>
 8017450:	9b02      	ldr	r3, [sp, #8]
 8017452:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017456:	9b01      	ldr	r3, [sp, #4]
 8017458:	f883 9000 	strb.w	r9, [r3]
 801745c:	e774      	b.n	8017348 <_dtoa_r+0x960>
 801745e:	4638      	mov	r0, r7
 8017460:	e7ba      	b.n	80173d8 <_dtoa_r+0x9f0>
 8017462:	2201      	movs	r2, #1
 8017464:	e7e1      	b.n	801742a <_dtoa_r+0xa42>
 8017466:	9b05      	ldr	r3, [sp, #20]
 8017468:	2b00      	cmp	r3, #0
 801746a:	db04      	blt.n	8017476 <_dtoa_r+0xa8e>
 801746c:	9907      	ldr	r1, [sp, #28]
 801746e:	430b      	orrs	r3, r1
 8017470:	9906      	ldr	r1, [sp, #24]
 8017472:	430b      	orrs	r3, r1
 8017474:	d120      	bne.n	80174b8 <_dtoa_r+0xad0>
 8017476:	2a00      	cmp	r2, #0
 8017478:	dded      	ble.n	8017456 <_dtoa_r+0xa6e>
 801747a:	4651      	mov	r1, sl
 801747c:	2201      	movs	r2, #1
 801747e:	4620      	mov	r0, r4
 8017480:	f000 fbfe 	bl	8017c80 <__lshift>
 8017484:	4631      	mov	r1, r6
 8017486:	4682      	mov	sl, r0
 8017488:	f000 fc66 	bl	8017d58 <__mcmp>
 801748c:	2800      	cmp	r0, #0
 801748e:	dc03      	bgt.n	8017498 <_dtoa_r+0xab0>
 8017490:	d1e1      	bne.n	8017456 <_dtoa_r+0xa6e>
 8017492:	f019 0f01 	tst.w	r9, #1
 8017496:	d0de      	beq.n	8017456 <_dtoa_r+0xa6e>
 8017498:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801749c:	d1d8      	bne.n	8017450 <_dtoa_r+0xa68>
 801749e:	9a01      	ldr	r2, [sp, #4]
 80174a0:	2339      	movs	r3, #57	; 0x39
 80174a2:	7013      	strb	r3, [r2, #0]
 80174a4:	462b      	mov	r3, r5
 80174a6:	461d      	mov	r5, r3
 80174a8:	3b01      	subs	r3, #1
 80174aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80174ae:	2a39      	cmp	r2, #57	; 0x39
 80174b0:	d06c      	beq.n	801758c <_dtoa_r+0xba4>
 80174b2:	3201      	adds	r2, #1
 80174b4:	701a      	strb	r2, [r3, #0]
 80174b6:	e747      	b.n	8017348 <_dtoa_r+0x960>
 80174b8:	2a00      	cmp	r2, #0
 80174ba:	dd07      	ble.n	80174cc <_dtoa_r+0xae4>
 80174bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80174c0:	d0ed      	beq.n	801749e <_dtoa_r+0xab6>
 80174c2:	9a01      	ldr	r2, [sp, #4]
 80174c4:	f109 0301 	add.w	r3, r9, #1
 80174c8:	7013      	strb	r3, [r2, #0]
 80174ca:	e73d      	b.n	8017348 <_dtoa_r+0x960>
 80174cc:	9b04      	ldr	r3, [sp, #16]
 80174ce:	9a08      	ldr	r2, [sp, #32]
 80174d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80174d4:	4293      	cmp	r3, r2
 80174d6:	d043      	beq.n	8017560 <_dtoa_r+0xb78>
 80174d8:	4651      	mov	r1, sl
 80174da:	2300      	movs	r3, #0
 80174dc:	220a      	movs	r2, #10
 80174de:	4620      	mov	r0, r4
 80174e0:	f000 f9d6 	bl	8017890 <__multadd>
 80174e4:	45b8      	cmp	r8, r7
 80174e6:	4682      	mov	sl, r0
 80174e8:	f04f 0300 	mov.w	r3, #0
 80174ec:	f04f 020a 	mov.w	r2, #10
 80174f0:	4641      	mov	r1, r8
 80174f2:	4620      	mov	r0, r4
 80174f4:	d107      	bne.n	8017506 <_dtoa_r+0xb1e>
 80174f6:	f000 f9cb 	bl	8017890 <__multadd>
 80174fa:	4680      	mov	r8, r0
 80174fc:	4607      	mov	r7, r0
 80174fe:	9b04      	ldr	r3, [sp, #16]
 8017500:	3301      	adds	r3, #1
 8017502:	9304      	str	r3, [sp, #16]
 8017504:	e775      	b.n	80173f2 <_dtoa_r+0xa0a>
 8017506:	f000 f9c3 	bl	8017890 <__multadd>
 801750a:	4639      	mov	r1, r7
 801750c:	4680      	mov	r8, r0
 801750e:	2300      	movs	r3, #0
 8017510:	220a      	movs	r2, #10
 8017512:	4620      	mov	r0, r4
 8017514:	f000 f9bc 	bl	8017890 <__multadd>
 8017518:	4607      	mov	r7, r0
 801751a:	e7f0      	b.n	80174fe <_dtoa_r+0xb16>
 801751c:	9b04      	ldr	r3, [sp, #16]
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	9d00      	ldr	r5, [sp, #0]
 8017522:	4631      	mov	r1, r6
 8017524:	4650      	mov	r0, sl
 8017526:	f7ff f9d5 	bl	80168d4 <quorem>
 801752a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801752e:	9b00      	ldr	r3, [sp, #0]
 8017530:	f805 9b01 	strb.w	r9, [r5], #1
 8017534:	1aea      	subs	r2, r5, r3
 8017536:	9b01      	ldr	r3, [sp, #4]
 8017538:	4293      	cmp	r3, r2
 801753a:	dd07      	ble.n	801754c <_dtoa_r+0xb64>
 801753c:	4651      	mov	r1, sl
 801753e:	2300      	movs	r3, #0
 8017540:	220a      	movs	r2, #10
 8017542:	4620      	mov	r0, r4
 8017544:	f000 f9a4 	bl	8017890 <__multadd>
 8017548:	4682      	mov	sl, r0
 801754a:	e7ea      	b.n	8017522 <_dtoa_r+0xb3a>
 801754c:	9b01      	ldr	r3, [sp, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	bfc8      	it	gt
 8017552:	461d      	movgt	r5, r3
 8017554:	9b00      	ldr	r3, [sp, #0]
 8017556:	bfd8      	it	le
 8017558:	2501      	movle	r5, #1
 801755a:	441d      	add	r5, r3
 801755c:	f04f 0800 	mov.w	r8, #0
 8017560:	4651      	mov	r1, sl
 8017562:	2201      	movs	r2, #1
 8017564:	4620      	mov	r0, r4
 8017566:	f000 fb8b 	bl	8017c80 <__lshift>
 801756a:	4631      	mov	r1, r6
 801756c:	4682      	mov	sl, r0
 801756e:	f000 fbf3 	bl	8017d58 <__mcmp>
 8017572:	2800      	cmp	r0, #0
 8017574:	dc96      	bgt.n	80174a4 <_dtoa_r+0xabc>
 8017576:	d102      	bne.n	801757e <_dtoa_r+0xb96>
 8017578:	f019 0f01 	tst.w	r9, #1
 801757c:	d192      	bne.n	80174a4 <_dtoa_r+0xabc>
 801757e:	462b      	mov	r3, r5
 8017580:	461d      	mov	r5, r3
 8017582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017586:	2a30      	cmp	r2, #48	; 0x30
 8017588:	d0fa      	beq.n	8017580 <_dtoa_r+0xb98>
 801758a:	e6dd      	b.n	8017348 <_dtoa_r+0x960>
 801758c:	9a00      	ldr	r2, [sp, #0]
 801758e:	429a      	cmp	r2, r3
 8017590:	d189      	bne.n	80174a6 <_dtoa_r+0xabe>
 8017592:	f10b 0b01 	add.w	fp, fp, #1
 8017596:	2331      	movs	r3, #49	; 0x31
 8017598:	e796      	b.n	80174c8 <_dtoa_r+0xae0>
 801759a:	4b0a      	ldr	r3, [pc, #40]	; (80175c4 <_dtoa_r+0xbdc>)
 801759c:	f7ff ba99 	b.w	8016ad2 <_dtoa_r+0xea>
 80175a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	f47f aa6d 	bne.w	8016a82 <_dtoa_r+0x9a>
 80175a8:	4b07      	ldr	r3, [pc, #28]	; (80175c8 <_dtoa_r+0xbe0>)
 80175aa:	f7ff ba92 	b.w	8016ad2 <_dtoa_r+0xea>
 80175ae:	9b01      	ldr	r3, [sp, #4]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	dcb5      	bgt.n	8017520 <_dtoa_r+0xb38>
 80175b4:	9b07      	ldr	r3, [sp, #28]
 80175b6:	2b02      	cmp	r3, #2
 80175b8:	f73f aeb1 	bgt.w	801731e <_dtoa_r+0x936>
 80175bc:	e7b0      	b.n	8017520 <_dtoa_r+0xb38>
 80175be:	bf00      	nop
 80175c0:	0801cd51 	.word	0x0801cd51
 80175c4:	0801ccac 	.word	0x0801ccac
 80175c8:	0801ccd5 	.word	0x0801ccd5

080175cc <_free_r>:
 80175cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175ce:	2900      	cmp	r1, #0
 80175d0:	d044      	beq.n	801765c <_free_r+0x90>
 80175d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175d6:	9001      	str	r0, [sp, #4]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f1a1 0404 	sub.w	r4, r1, #4
 80175de:	bfb8      	it	lt
 80175e0:	18e4      	addlt	r4, r4, r3
 80175e2:	f000 f8e7 	bl	80177b4 <__malloc_lock>
 80175e6:	4a1e      	ldr	r2, [pc, #120]	; (8017660 <_free_r+0x94>)
 80175e8:	9801      	ldr	r0, [sp, #4]
 80175ea:	6813      	ldr	r3, [r2, #0]
 80175ec:	b933      	cbnz	r3, 80175fc <_free_r+0x30>
 80175ee:	6063      	str	r3, [r4, #4]
 80175f0:	6014      	str	r4, [r2, #0]
 80175f2:	b003      	add	sp, #12
 80175f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175f8:	f000 b8e2 	b.w	80177c0 <__malloc_unlock>
 80175fc:	42a3      	cmp	r3, r4
 80175fe:	d908      	bls.n	8017612 <_free_r+0x46>
 8017600:	6825      	ldr	r5, [r4, #0]
 8017602:	1961      	adds	r1, r4, r5
 8017604:	428b      	cmp	r3, r1
 8017606:	bf01      	itttt	eq
 8017608:	6819      	ldreq	r1, [r3, #0]
 801760a:	685b      	ldreq	r3, [r3, #4]
 801760c:	1949      	addeq	r1, r1, r5
 801760e:	6021      	streq	r1, [r4, #0]
 8017610:	e7ed      	b.n	80175ee <_free_r+0x22>
 8017612:	461a      	mov	r2, r3
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	b10b      	cbz	r3, 801761c <_free_r+0x50>
 8017618:	42a3      	cmp	r3, r4
 801761a:	d9fa      	bls.n	8017612 <_free_r+0x46>
 801761c:	6811      	ldr	r1, [r2, #0]
 801761e:	1855      	adds	r5, r2, r1
 8017620:	42a5      	cmp	r5, r4
 8017622:	d10b      	bne.n	801763c <_free_r+0x70>
 8017624:	6824      	ldr	r4, [r4, #0]
 8017626:	4421      	add	r1, r4
 8017628:	1854      	adds	r4, r2, r1
 801762a:	42a3      	cmp	r3, r4
 801762c:	6011      	str	r1, [r2, #0]
 801762e:	d1e0      	bne.n	80175f2 <_free_r+0x26>
 8017630:	681c      	ldr	r4, [r3, #0]
 8017632:	685b      	ldr	r3, [r3, #4]
 8017634:	6053      	str	r3, [r2, #4]
 8017636:	440c      	add	r4, r1
 8017638:	6014      	str	r4, [r2, #0]
 801763a:	e7da      	b.n	80175f2 <_free_r+0x26>
 801763c:	d902      	bls.n	8017644 <_free_r+0x78>
 801763e:	230c      	movs	r3, #12
 8017640:	6003      	str	r3, [r0, #0]
 8017642:	e7d6      	b.n	80175f2 <_free_r+0x26>
 8017644:	6825      	ldr	r5, [r4, #0]
 8017646:	1961      	adds	r1, r4, r5
 8017648:	428b      	cmp	r3, r1
 801764a:	bf04      	itt	eq
 801764c:	6819      	ldreq	r1, [r3, #0]
 801764e:	685b      	ldreq	r3, [r3, #4]
 8017650:	6063      	str	r3, [r4, #4]
 8017652:	bf04      	itt	eq
 8017654:	1949      	addeq	r1, r1, r5
 8017656:	6021      	streq	r1, [r4, #0]
 8017658:	6054      	str	r4, [r2, #4]
 801765a:	e7ca      	b.n	80175f2 <_free_r+0x26>
 801765c:	b003      	add	sp, #12
 801765e:	bd30      	pop	{r4, r5, pc}
 8017660:	200033c0 	.word	0x200033c0

08017664 <malloc>:
 8017664:	4b02      	ldr	r3, [pc, #8]	; (8017670 <malloc+0xc>)
 8017666:	4601      	mov	r1, r0
 8017668:	6818      	ldr	r0, [r3, #0]
 801766a:	f000 b823 	b.w	80176b4 <_malloc_r>
 801766e:	bf00      	nop
 8017670:	200003d0 	.word	0x200003d0

08017674 <sbrk_aligned>:
 8017674:	b570      	push	{r4, r5, r6, lr}
 8017676:	4e0e      	ldr	r6, [pc, #56]	; (80176b0 <sbrk_aligned+0x3c>)
 8017678:	460c      	mov	r4, r1
 801767a:	6831      	ldr	r1, [r6, #0]
 801767c:	4605      	mov	r5, r0
 801767e:	b911      	cbnz	r1, 8017686 <sbrk_aligned+0x12>
 8017680:	f001 fe1a 	bl	80192b8 <_sbrk_r>
 8017684:	6030      	str	r0, [r6, #0]
 8017686:	4621      	mov	r1, r4
 8017688:	4628      	mov	r0, r5
 801768a:	f001 fe15 	bl	80192b8 <_sbrk_r>
 801768e:	1c43      	adds	r3, r0, #1
 8017690:	d00a      	beq.n	80176a8 <sbrk_aligned+0x34>
 8017692:	1cc4      	adds	r4, r0, #3
 8017694:	f024 0403 	bic.w	r4, r4, #3
 8017698:	42a0      	cmp	r0, r4
 801769a:	d007      	beq.n	80176ac <sbrk_aligned+0x38>
 801769c:	1a21      	subs	r1, r4, r0
 801769e:	4628      	mov	r0, r5
 80176a0:	f001 fe0a 	bl	80192b8 <_sbrk_r>
 80176a4:	3001      	adds	r0, #1
 80176a6:	d101      	bne.n	80176ac <sbrk_aligned+0x38>
 80176a8:	f04f 34ff 	mov.w	r4, #4294967295
 80176ac:	4620      	mov	r0, r4
 80176ae:	bd70      	pop	{r4, r5, r6, pc}
 80176b0:	200033c4 	.word	0x200033c4

080176b4 <_malloc_r>:
 80176b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176b8:	1ccd      	adds	r5, r1, #3
 80176ba:	f025 0503 	bic.w	r5, r5, #3
 80176be:	3508      	adds	r5, #8
 80176c0:	2d0c      	cmp	r5, #12
 80176c2:	bf38      	it	cc
 80176c4:	250c      	movcc	r5, #12
 80176c6:	2d00      	cmp	r5, #0
 80176c8:	4607      	mov	r7, r0
 80176ca:	db01      	blt.n	80176d0 <_malloc_r+0x1c>
 80176cc:	42a9      	cmp	r1, r5
 80176ce:	d905      	bls.n	80176dc <_malloc_r+0x28>
 80176d0:	230c      	movs	r3, #12
 80176d2:	603b      	str	r3, [r7, #0]
 80176d4:	2600      	movs	r6, #0
 80176d6:	4630      	mov	r0, r6
 80176d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80177b0 <_malloc_r+0xfc>
 80176e0:	f000 f868 	bl	80177b4 <__malloc_lock>
 80176e4:	f8d8 3000 	ldr.w	r3, [r8]
 80176e8:	461c      	mov	r4, r3
 80176ea:	bb5c      	cbnz	r4, 8017744 <_malloc_r+0x90>
 80176ec:	4629      	mov	r1, r5
 80176ee:	4638      	mov	r0, r7
 80176f0:	f7ff ffc0 	bl	8017674 <sbrk_aligned>
 80176f4:	1c43      	adds	r3, r0, #1
 80176f6:	4604      	mov	r4, r0
 80176f8:	d155      	bne.n	80177a6 <_malloc_r+0xf2>
 80176fa:	f8d8 4000 	ldr.w	r4, [r8]
 80176fe:	4626      	mov	r6, r4
 8017700:	2e00      	cmp	r6, #0
 8017702:	d145      	bne.n	8017790 <_malloc_r+0xdc>
 8017704:	2c00      	cmp	r4, #0
 8017706:	d048      	beq.n	801779a <_malloc_r+0xe6>
 8017708:	6823      	ldr	r3, [r4, #0]
 801770a:	4631      	mov	r1, r6
 801770c:	4638      	mov	r0, r7
 801770e:	eb04 0903 	add.w	r9, r4, r3
 8017712:	f001 fdd1 	bl	80192b8 <_sbrk_r>
 8017716:	4581      	cmp	r9, r0
 8017718:	d13f      	bne.n	801779a <_malloc_r+0xe6>
 801771a:	6821      	ldr	r1, [r4, #0]
 801771c:	1a6d      	subs	r5, r5, r1
 801771e:	4629      	mov	r1, r5
 8017720:	4638      	mov	r0, r7
 8017722:	f7ff ffa7 	bl	8017674 <sbrk_aligned>
 8017726:	3001      	adds	r0, #1
 8017728:	d037      	beq.n	801779a <_malloc_r+0xe6>
 801772a:	6823      	ldr	r3, [r4, #0]
 801772c:	442b      	add	r3, r5
 801772e:	6023      	str	r3, [r4, #0]
 8017730:	f8d8 3000 	ldr.w	r3, [r8]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d038      	beq.n	80177aa <_malloc_r+0xf6>
 8017738:	685a      	ldr	r2, [r3, #4]
 801773a:	42a2      	cmp	r2, r4
 801773c:	d12b      	bne.n	8017796 <_malloc_r+0xe2>
 801773e:	2200      	movs	r2, #0
 8017740:	605a      	str	r2, [r3, #4]
 8017742:	e00f      	b.n	8017764 <_malloc_r+0xb0>
 8017744:	6822      	ldr	r2, [r4, #0]
 8017746:	1b52      	subs	r2, r2, r5
 8017748:	d41f      	bmi.n	801778a <_malloc_r+0xd6>
 801774a:	2a0b      	cmp	r2, #11
 801774c:	d917      	bls.n	801777e <_malloc_r+0xca>
 801774e:	1961      	adds	r1, r4, r5
 8017750:	42a3      	cmp	r3, r4
 8017752:	6025      	str	r5, [r4, #0]
 8017754:	bf18      	it	ne
 8017756:	6059      	strne	r1, [r3, #4]
 8017758:	6863      	ldr	r3, [r4, #4]
 801775a:	bf08      	it	eq
 801775c:	f8c8 1000 	streq.w	r1, [r8]
 8017760:	5162      	str	r2, [r4, r5]
 8017762:	604b      	str	r3, [r1, #4]
 8017764:	4638      	mov	r0, r7
 8017766:	f104 060b 	add.w	r6, r4, #11
 801776a:	f000 f829 	bl	80177c0 <__malloc_unlock>
 801776e:	f026 0607 	bic.w	r6, r6, #7
 8017772:	1d23      	adds	r3, r4, #4
 8017774:	1af2      	subs	r2, r6, r3
 8017776:	d0ae      	beq.n	80176d6 <_malloc_r+0x22>
 8017778:	1b9b      	subs	r3, r3, r6
 801777a:	50a3      	str	r3, [r4, r2]
 801777c:	e7ab      	b.n	80176d6 <_malloc_r+0x22>
 801777e:	42a3      	cmp	r3, r4
 8017780:	6862      	ldr	r2, [r4, #4]
 8017782:	d1dd      	bne.n	8017740 <_malloc_r+0x8c>
 8017784:	f8c8 2000 	str.w	r2, [r8]
 8017788:	e7ec      	b.n	8017764 <_malloc_r+0xb0>
 801778a:	4623      	mov	r3, r4
 801778c:	6864      	ldr	r4, [r4, #4]
 801778e:	e7ac      	b.n	80176ea <_malloc_r+0x36>
 8017790:	4634      	mov	r4, r6
 8017792:	6876      	ldr	r6, [r6, #4]
 8017794:	e7b4      	b.n	8017700 <_malloc_r+0x4c>
 8017796:	4613      	mov	r3, r2
 8017798:	e7cc      	b.n	8017734 <_malloc_r+0x80>
 801779a:	230c      	movs	r3, #12
 801779c:	603b      	str	r3, [r7, #0]
 801779e:	4638      	mov	r0, r7
 80177a0:	f000 f80e 	bl	80177c0 <__malloc_unlock>
 80177a4:	e797      	b.n	80176d6 <_malloc_r+0x22>
 80177a6:	6025      	str	r5, [r4, #0]
 80177a8:	e7dc      	b.n	8017764 <_malloc_r+0xb0>
 80177aa:	605b      	str	r3, [r3, #4]
 80177ac:	deff      	udf	#255	; 0xff
 80177ae:	bf00      	nop
 80177b0:	200033c0 	.word	0x200033c0

080177b4 <__malloc_lock>:
 80177b4:	4801      	ldr	r0, [pc, #4]	; (80177bc <__malloc_lock+0x8>)
 80177b6:	f7ff b876 	b.w	80168a6 <__retarget_lock_acquire_recursive>
 80177ba:	bf00      	nop
 80177bc:	200033bc 	.word	0x200033bc

080177c0 <__malloc_unlock>:
 80177c0:	4801      	ldr	r0, [pc, #4]	; (80177c8 <__malloc_unlock+0x8>)
 80177c2:	f7ff b871 	b.w	80168a8 <__retarget_lock_release_recursive>
 80177c6:	bf00      	nop
 80177c8:	200033bc 	.word	0x200033bc

080177cc <_Balloc>:
 80177cc:	b570      	push	{r4, r5, r6, lr}
 80177ce:	69c6      	ldr	r6, [r0, #28]
 80177d0:	4604      	mov	r4, r0
 80177d2:	460d      	mov	r5, r1
 80177d4:	b976      	cbnz	r6, 80177f4 <_Balloc+0x28>
 80177d6:	2010      	movs	r0, #16
 80177d8:	f7ff ff44 	bl	8017664 <malloc>
 80177dc:	4602      	mov	r2, r0
 80177de:	61e0      	str	r0, [r4, #28]
 80177e0:	b920      	cbnz	r0, 80177ec <_Balloc+0x20>
 80177e2:	4b18      	ldr	r3, [pc, #96]	; (8017844 <_Balloc+0x78>)
 80177e4:	4818      	ldr	r0, [pc, #96]	; (8017848 <_Balloc+0x7c>)
 80177e6:	216b      	movs	r1, #107	; 0x6b
 80177e8:	f001 fd7e 	bl	80192e8 <__assert_func>
 80177ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80177f0:	6006      	str	r6, [r0, #0]
 80177f2:	60c6      	str	r6, [r0, #12]
 80177f4:	69e6      	ldr	r6, [r4, #28]
 80177f6:	68f3      	ldr	r3, [r6, #12]
 80177f8:	b183      	cbz	r3, 801781c <_Balloc+0x50>
 80177fa:	69e3      	ldr	r3, [r4, #28]
 80177fc:	68db      	ldr	r3, [r3, #12]
 80177fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017802:	b9b8      	cbnz	r0, 8017834 <_Balloc+0x68>
 8017804:	2101      	movs	r1, #1
 8017806:	fa01 f605 	lsl.w	r6, r1, r5
 801780a:	1d72      	adds	r2, r6, #5
 801780c:	0092      	lsls	r2, r2, #2
 801780e:	4620      	mov	r0, r4
 8017810:	f001 fd88 	bl	8019324 <_calloc_r>
 8017814:	b160      	cbz	r0, 8017830 <_Balloc+0x64>
 8017816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801781a:	e00e      	b.n	801783a <_Balloc+0x6e>
 801781c:	2221      	movs	r2, #33	; 0x21
 801781e:	2104      	movs	r1, #4
 8017820:	4620      	mov	r0, r4
 8017822:	f001 fd7f 	bl	8019324 <_calloc_r>
 8017826:	69e3      	ldr	r3, [r4, #28]
 8017828:	60f0      	str	r0, [r6, #12]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d1e4      	bne.n	80177fa <_Balloc+0x2e>
 8017830:	2000      	movs	r0, #0
 8017832:	bd70      	pop	{r4, r5, r6, pc}
 8017834:	6802      	ldr	r2, [r0, #0]
 8017836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801783a:	2300      	movs	r3, #0
 801783c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017840:	e7f7      	b.n	8017832 <_Balloc+0x66>
 8017842:	bf00      	nop
 8017844:	0801cce2 	.word	0x0801cce2
 8017848:	0801cd62 	.word	0x0801cd62

0801784c <_Bfree>:
 801784c:	b570      	push	{r4, r5, r6, lr}
 801784e:	69c6      	ldr	r6, [r0, #28]
 8017850:	4605      	mov	r5, r0
 8017852:	460c      	mov	r4, r1
 8017854:	b976      	cbnz	r6, 8017874 <_Bfree+0x28>
 8017856:	2010      	movs	r0, #16
 8017858:	f7ff ff04 	bl	8017664 <malloc>
 801785c:	4602      	mov	r2, r0
 801785e:	61e8      	str	r0, [r5, #28]
 8017860:	b920      	cbnz	r0, 801786c <_Bfree+0x20>
 8017862:	4b09      	ldr	r3, [pc, #36]	; (8017888 <_Bfree+0x3c>)
 8017864:	4809      	ldr	r0, [pc, #36]	; (801788c <_Bfree+0x40>)
 8017866:	218f      	movs	r1, #143	; 0x8f
 8017868:	f001 fd3e 	bl	80192e8 <__assert_func>
 801786c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017870:	6006      	str	r6, [r0, #0]
 8017872:	60c6      	str	r6, [r0, #12]
 8017874:	b13c      	cbz	r4, 8017886 <_Bfree+0x3a>
 8017876:	69eb      	ldr	r3, [r5, #28]
 8017878:	6862      	ldr	r2, [r4, #4]
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017880:	6021      	str	r1, [r4, #0]
 8017882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017886:	bd70      	pop	{r4, r5, r6, pc}
 8017888:	0801cce2 	.word	0x0801cce2
 801788c:	0801cd62 	.word	0x0801cd62

08017890 <__multadd>:
 8017890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017894:	690d      	ldr	r5, [r1, #16]
 8017896:	4607      	mov	r7, r0
 8017898:	460c      	mov	r4, r1
 801789a:	461e      	mov	r6, r3
 801789c:	f101 0c14 	add.w	ip, r1, #20
 80178a0:	2000      	movs	r0, #0
 80178a2:	f8dc 3000 	ldr.w	r3, [ip]
 80178a6:	b299      	uxth	r1, r3
 80178a8:	fb02 6101 	mla	r1, r2, r1, r6
 80178ac:	0c1e      	lsrs	r6, r3, #16
 80178ae:	0c0b      	lsrs	r3, r1, #16
 80178b0:	fb02 3306 	mla	r3, r2, r6, r3
 80178b4:	b289      	uxth	r1, r1
 80178b6:	3001      	adds	r0, #1
 80178b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80178bc:	4285      	cmp	r5, r0
 80178be:	f84c 1b04 	str.w	r1, [ip], #4
 80178c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80178c6:	dcec      	bgt.n	80178a2 <__multadd+0x12>
 80178c8:	b30e      	cbz	r6, 801790e <__multadd+0x7e>
 80178ca:	68a3      	ldr	r3, [r4, #8]
 80178cc:	42ab      	cmp	r3, r5
 80178ce:	dc19      	bgt.n	8017904 <__multadd+0x74>
 80178d0:	6861      	ldr	r1, [r4, #4]
 80178d2:	4638      	mov	r0, r7
 80178d4:	3101      	adds	r1, #1
 80178d6:	f7ff ff79 	bl	80177cc <_Balloc>
 80178da:	4680      	mov	r8, r0
 80178dc:	b928      	cbnz	r0, 80178ea <__multadd+0x5a>
 80178de:	4602      	mov	r2, r0
 80178e0:	4b0c      	ldr	r3, [pc, #48]	; (8017914 <__multadd+0x84>)
 80178e2:	480d      	ldr	r0, [pc, #52]	; (8017918 <__multadd+0x88>)
 80178e4:	21ba      	movs	r1, #186	; 0xba
 80178e6:	f001 fcff 	bl	80192e8 <__assert_func>
 80178ea:	6922      	ldr	r2, [r4, #16]
 80178ec:	3202      	adds	r2, #2
 80178ee:	f104 010c 	add.w	r1, r4, #12
 80178f2:	0092      	lsls	r2, r2, #2
 80178f4:	300c      	adds	r0, #12
 80178f6:	f7fe ffd8 	bl	80168aa <memcpy>
 80178fa:	4621      	mov	r1, r4
 80178fc:	4638      	mov	r0, r7
 80178fe:	f7ff ffa5 	bl	801784c <_Bfree>
 8017902:	4644      	mov	r4, r8
 8017904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017908:	3501      	adds	r5, #1
 801790a:	615e      	str	r6, [r3, #20]
 801790c:	6125      	str	r5, [r4, #16]
 801790e:	4620      	mov	r0, r4
 8017910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017914:	0801cd51 	.word	0x0801cd51
 8017918:	0801cd62 	.word	0x0801cd62

0801791c <__s2b>:
 801791c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017920:	460c      	mov	r4, r1
 8017922:	4615      	mov	r5, r2
 8017924:	461f      	mov	r7, r3
 8017926:	2209      	movs	r2, #9
 8017928:	3308      	adds	r3, #8
 801792a:	4606      	mov	r6, r0
 801792c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017930:	2100      	movs	r1, #0
 8017932:	2201      	movs	r2, #1
 8017934:	429a      	cmp	r2, r3
 8017936:	db09      	blt.n	801794c <__s2b+0x30>
 8017938:	4630      	mov	r0, r6
 801793a:	f7ff ff47 	bl	80177cc <_Balloc>
 801793e:	b940      	cbnz	r0, 8017952 <__s2b+0x36>
 8017940:	4602      	mov	r2, r0
 8017942:	4b19      	ldr	r3, [pc, #100]	; (80179a8 <__s2b+0x8c>)
 8017944:	4819      	ldr	r0, [pc, #100]	; (80179ac <__s2b+0x90>)
 8017946:	21d3      	movs	r1, #211	; 0xd3
 8017948:	f001 fcce 	bl	80192e8 <__assert_func>
 801794c:	0052      	lsls	r2, r2, #1
 801794e:	3101      	adds	r1, #1
 8017950:	e7f0      	b.n	8017934 <__s2b+0x18>
 8017952:	9b08      	ldr	r3, [sp, #32]
 8017954:	6143      	str	r3, [r0, #20]
 8017956:	2d09      	cmp	r5, #9
 8017958:	f04f 0301 	mov.w	r3, #1
 801795c:	6103      	str	r3, [r0, #16]
 801795e:	dd16      	ble.n	801798e <__s2b+0x72>
 8017960:	f104 0909 	add.w	r9, r4, #9
 8017964:	46c8      	mov	r8, r9
 8017966:	442c      	add	r4, r5
 8017968:	f818 3b01 	ldrb.w	r3, [r8], #1
 801796c:	4601      	mov	r1, r0
 801796e:	3b30      	subs	r3, #48	; 0x30
 8017970:	220a      	movs	r2, #10
 8017972:	4630      	mov	r0, r6
 8017974:	f7ff ff8c 	bl	8017890 <__multadd>
 8017978:	45a0      	cmp	r8, r4
 801797a:	d1f5      	bne.n	8017968 <__s2b+0x4c>
 801797c:	f1a5 0408 	sub.w	r4, r5, #8
 8017980:	444c      	add	r4, r9
 8017982:	1b2d      	subs	r5, r5, r4
 8017984:	1963      	adds	r3, r4, r5
 8017986:	42bb      	cmp	r3, r7
 8017988:	db04      	blt.n	8017994 <__s2b+0x78>
 801798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801798e:	340a      	adds	r4, #10
 8017990:	2509      	movs	r5, #9
 8017992:	e7f6      	b.n	8017982 <__s2b+0x66>
 8017994:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017998:	4601      	mov	r1, r0
 801799a:	3b30      	subs	r3, #48	; 0x30
 801799c:	220a      	movs	r2, #10
 801799e:	4630      	mov	r0, r6
 80179a0:	f7ff ff76 	bl	8017890 <__multadd>
 80179a4:	e7ee      	b.n	8017984 <__s2b+0x68>
 80179a6:	bf00      	nop
 80179a8:	0801cd51 	.word	0x0801cd51
 80179ac:	0801cd62 	.word	0x0801cd62

080179b0 <__hi0bits>:
 80179b0:	0c03      	lsrs	r3, r0, #16
 80179b2:	041b      	lsls	r3, r3, #16
 80179b4:	b9d3      	cbnz	r3, 80179ec <__hi0bits+0x3c>
 80179b6:	0400      	lsls	r0, r0, #16
 80179b8:	2310      	movs	r3, #16
 80179ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80179be:	bf04      	itt	eq
 80179c0:	0200      	lsleq	r0, r0, #8
 80179c2:	3308      	addeq	r3, #8
 80179c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80179c8:	bf04      	itt	eq
 80179ca:	0100      	lsleq	r0, r0, #4
 80179cc:	3304      	addeq	r3, #4
 80179ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80179d2:	bf04      	itt	eq
 80179d4:	0080      	lsleq	r0, r0, #2
 80179d6:	3302      	addeq	r3, #2
 80179d8:	2800      	cmp	r0, #0
 80179da:	db05      	blt.n	80179e8 <__hi0bits+0x38>
 80179dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80179e0:	f103 0301 	add.w	r3, r3, #1
 80179e4:	bf08      	it	eq
 80179e6:	2320      	moveq	r3, #32
 80179e8:	4618      	mov	r0, r3
 80179ea:	4770      	bx	lr
 80179ec:	2300      	movs	r3, #0
 80179ee:	e7e4      	b.n	80179ba <__hi0bits+0xa>

080179f0 <__lo0bits>:
 80179f0:	6803      	ldr	r3, [r0, #0]
 80179f2:	f013 0207 	ands.w	r2, r3, #7
 80179f6:	d00c      	beq.n	8017a12 <__lo0bits+0x22>
 80179f8:	07d9      	lsls	r1, r3, #31
 80179fa:	d422      	bmi.n	8017a42 <__lo0bits+0x52>
 80179fc:	079a      	lsls	r2, r3, #30
 80179fe:	bf49      	itett	mi
 8017a00:	085b      	lsrmi	r3, r3, #1
 8017a02:	089b      	lsrpl	r3, r3, #2
 8017a04:	6003      	strmi	r3, [r0, #0]
 8017a06:	2201      	movmi	r2, #1
 8017a08:	bf5c      	itt	pl
 8017a0a:	6003      	strpl	r3, [r0, #0]
 8017a0c:	2202      	movpl	r2, #2
 8017a0e:	4610      	mov	r0, r2
 8017a10:	4770      	bx	lr
 8017a12:	b299      	uxth	r1, r3
 8017a14:	b909      	cbnz	r1, 8017a1a <__lo0bits+0x2a>
 8017a16:	0c1b      	lsrs	r3, r3, #16
 8017a18:	2210      	movs	r2, #16
 8017a1a:	b2d9      	uxtb	r1, r3
 8017a1c:	b909      	cbnz	r1, 8017a22 <__lo0bits+0x32>
 8017a1e:	3208      	adds	r2, #8
 8017a20:	0a1b      	lsrs	r3, r3, #8
 8017a22:	0719      	lsls	r1, r3, #28
 8017a24:	bf04      	itt	eq
 8017a26:	091b      	lsreq	r3, r3, #4
 8017a28:	3204      	addeq	r2, #4
 8017a2a:	0799      	lsls	r1, r3, #30
 8017a2c:	bf04      	itt	eq
 8017a2e:	089b      	lsreq	r3, r3, #2
 8017a30:	3202      	addeq	r2, #2
 8017a32:	07d9      	lsls	r1, r3, #31
 8017a34:	d403      	bmi.n	8017a3e <__lo0bits+0x4e>
 8017a36:	085b      	lsrs	r3, r3, #1
 8017a38:	f102 0201 	add.w	r2, r2, #1
 8017a3c:	d003      	beq.n	8017a46 <__lo0bits+0x56>
 8017a3e:	6003      	str	r3, [r0, #0]
 8017a40:	e7e5      	b.n	8017a0e <__lo0bits+0x1e>
 8017a42:	2200      	movs	r2, #0
 8017a44:	e7e3      	b.n	8017a0e <__lo0bits+0x1e>
 8017a46:	2220      	movs	r2, #32
 8017a48:	e7e1      	b.n	8017a0e <__lo0bits+0x1e>
	...

08017a4c <__i2b>:
 8017a4c:	b510      	push	{r4, lr}
 8017a4e:	460c      	mov	r4, r1
 8017a50:	2101      	movs	r1, #1
 8017a52:	f7ff febb 	bl	80177cc <_Balloc>
 8017a56:	4602      	mov	r2, r0
 8017a58:	b928      	cbnz	r0, 8017a66 <__i2b+0x1a>
 8017a5a:	4b05      	ldr	r3, [pc, #20]	; (8017a70 <__i2b+0x24>)
 8017a5c:	4805      	ldr	r0, [pc, #20]	; (8017a74 <__i2b+0x28>)
 8017a5e:	f240 1145 	movw	r1, #325	; 0x145
 8017a62:	f001 fc41 	bl	80192e8 <__assert_func>
 8017a66:	2301      	movs	r3, #1
 8017a68:	6144      	str	r4, [r0, #20]
 8017a6a:	6103      	str	r3, [r0, #16]
 8017a6c:	bd10      	pop	{r4, pc}
 8017a6e:	bf00      	nop
 8017a70:	0801cd51 	.word	0x0801cd51
 8017a74:	0801cd62 	.word	0x0801cd62

08017a78 <__multiply>:
 8017a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a7c:	4691      	mov	r9, r2
 8017a7e:	690a      	ldr	r2, [r1, #16]
 8017a80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017a84:	429a      	cmp	r2, r3
 8017a86:	bfb8      	it	lt
 8017a88:	460b      	movlt	r3, r1
 8017a8a:	460c      	mov	r4, r1
 8017a8c:	bfbc      	itt	lt
 8017a8e:	464c      	movlt	r4, r9
 8017a90:	4699      	movlt	r9, r3
 8017a92:	6927      	ldr	r7, [r4, #16]
 8017a94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017a98:	68a3      	ldr	r3, [r4, #8]
 8017a9a:	6861      	ldr	r1, [r4, #4]
 8017a9c:	eb07 060a 	add.w	r6, r7, sl
 8017aa0:	42b3      	cmp	r3, r6
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	bfb8      	it	lt
 8017aa6:	3101      	addlt	r1, #1
 8017aa8:	f7ff fe90 	bl	80177cc <_Balloc>
 8017aac:	b930      	cbnz	r0, 8017abc <__multiply+0x44>
 8017aae:	4602      	mov	r2, r0
 8017ab0:	4b44      	ldr	r3, [pc, #272]	; (8017bc4 <__multiply+0x14c>)
 8017ab2:	4845      	ldr	r0, [pc, #276]	; (8017bc8 <__multiply+0x150>)
 8017ab4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017ab8:	f001 fc16 	bl	80192e8 <__assert_func>
 8017abc:	f100 0514 	add.w	r5, r0, #20
 8017ac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017ac4:	462b      	mov	r3, r5
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	4543      	cmp	r3, r8
 8017aca:	d321      	bcc.n	8017b10 <__multiply+0x98>
 8017acc:	f104 0314 	add.w	r3, r4, #20
 8017ad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017ad4:	f109 0314 	add.w	r3, r9, #20
 8017ad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017adc:	9202      	str	r2, [sp, #8]
 8017ade:	1b3a      	subs	r2, r7, r4
 8017ae0:	3a15      	subs	r2, #21
 8017ae2:	f022 0203 	bic.w	r2, r2, #3
 8017ae6:	3204      	adds	r2, #4
 8017ae8:	f104 0115 	add.w	r1, r4, #21
 8017aec:	428f      	cmp	r7, r1
 8017aee:	bf38      	it	cc
 8017af0:	2204      	movcc	r2, #4
 8017af2:	9201      	str	r2, [sp, #4]
 8017af4:	9a02      	ldr	r2, [sp, #8]
 8017af6:	9303      	str	r3, [sp, #12]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d80c      	bhi.n	8017b16 <__multiply+0x9e>
 8017afc:	2e00      	cmp	r6, #0
 8017afe:	dd03      	ble.n	8017b08 <__multiply+0x90>
 8017b00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d05b      	beq.n	8017bc0 <__multiply+0x148>
 8017b08:	6106      	str	r6, [r0, #16]
 8017b0a:	b005      	add	sp, #20
 8017b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b10:	f843 2b04 	str.w	r2, [r3], #4
 8017b14:	e7d8      	b.n	8017ac8 <__multiply+0x50>
 8017b16:	f8b3 a000 	ldrh.w	sl, [r3]
 8017b1a:	f1ba 0f00 	cmp.w	sl, #0
 8017b1e:	d024      	beq.n	8017b6a <__multiply+0xf2>
 8017b20:	f104 0e14 	add.w	lr, r4, #20
 8017b24:	46a9      	mov	r9, r5
 8017b26:	f04f 0c00 	mov.w	ip, #0
 8017b2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017b2e:	f8d9 1000 	ldr.w	r1, [r9]
 8017b32:	fa1f fb82 	uxth.w	fp, r2
 8017b36:	b289      	uxth	r1, r1
 8017b38:	fb0a 110b 	mla	r1, sl, fp, r1
 8017b3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017b40:	f8d9 2000 	ldr.w	r2, [r9]
 8017b44:	4461      	add	r1, ip
 8017b46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8017b4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017b52:	b289      	uxth	r1, r1
 8017b54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017b58:	4577      	cmp	r7, lr
 8017b5a:	f849 1b04 	str.w	r1, [r9], #4
 8017b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b62:	d8e2      	bhi.n	8017b2a <__multiply+0xb2>
 8017b64:	9a01      	ldr	r2, [sp, #4]
 8017b66:	f845 c002 	str.w	ip, [r5, r2]
 8017b6a:	9a03      	ldr	r2, [sp, #12]
 8017b6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017b70:	3304      	adds	r3, #4
 8017b72:	f1b9 0f00 	cmp.w	r9, #0
 8017b76:	d021      	beq.n	8017bbc <__multiply+0x144>
 8017b78:	6829      	ldr	r1, [r5, #0]
 8017b7a:	f104 0c14 	add.w	ip, r4, #20
 8017b7e:	46ae      	mov	lr, r5
 8017b80:	f04f 0a00 	mov.w	sl, #0
 8017b84:	f8bc b000 	ldrh.w	fp, [ip]
 8017b88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017b8c:	fb09 220b 	mla	r2, r9, fp, r2
 8017b90:	4452      	add	r2, sl
 8017b92:	b289      	uxth	r1, r1
 8017b94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017b98:	f84e 1b04 	str.w	r1, [lr], #4
 8017b9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017ba0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017ba4:	f8be 1000 	ldrh.w	r1, [lr]
 8017ba8:	fb09 110a 	mla	r1, r9, sl, r1
 8017bac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017bb0:	4567      	cmp	r7, ip
 8017bb2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017bb6:	d8e5      	bhi.n	8017b84 <__multiply+0x10c>
 8017bb8:	9a01      	ldr	r2, [sp, #4]
 8017bba:	50a9      	str	r1, [r5, r2]
 8017bbc:	3504      	adds	r5, #4
 8017bbe:	e799      	b.n	8017af4 <__multiply+0x7c>
 8017bc0:	3e01      	subs	r6, #1
 8017bc2:	e79b      	b.n	8017afc <__multiply+0x84>
 8017bc4:	0801cd51 	.word	0x0801cd51
 8017bc8:	0801cd62 	.word	0x0801cd62

08017bcc <__pow5mult>:
 8017bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bd0:	4615      	mov	r5, r2
 8017bd2:	f012 0203 	ands.w	r2, r2, #3
 8017bd6:	4606      	mov	r6, r0
 8017bd8:	460f      	mov	r7, r1
 8017bda:	d007      	beq.n	8017bec <__pow5mult+0x20>
 8017bdc:	4c25      	ldr	r4, [pc, #148]	; (8017c74 <__pow5mult+0xa8>)
 8017bde:	3a01      	subs	r2, #1
 8017be0:	2300      	movs	r3, #0
 8017be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017be6:	f7ff fe53 	bl	8017890 <__multadd>
 8017bea:	4607      	mov	r7, r0
 8017bec:	10ad      	asrs	r5, r5, #2
 8017bee:	d03d      	beq.n	8017c6c <__pow5mult+0xa0>
 8017bf0:	69f4      	ldr	r4, [r6, #28]
 8017bf2:	b97c      	cbnz	r4, 8017c14 <__pow5mult+0x48>
 8017bf4:	2010      	movs	r0, #16
 8017bf6:	f7ff fd35 	bl	8017664 <malloc>
 8017bfa:	4602      	mov	r2, r0
 8017bfc:	61f0      	str	r0, [r6, #28]
 8017bfe:	b928      	cbnz	r0, 8017c0c <__pow5mult+0x40>
 8017c00:	4b1d      	ldr	r3, [pc, #116]	; (8017c78 <__pow5mult+0xac>)
 8017c02:	481e      	ldr	r0, [pc, #120]	; (8017c7c <__pow5mult+0xb0>)
 8017c04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017c08:	f001 fb6e 	bl	80192e8 <__assert_func>
 8017c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c10:	6004      	str	r4, [r0, #0]
 8017c12:	60c4      	str	r4, [r0, #12]
 8017c14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c1c:	b94c      	cbnz	r4, 8017c32 <__pow5mult+0x66>
 8017c1e:	f240 2171 	movw	r1, #625	; 0x271
 8017c22:	4630      	mov	r0, r6
 8017c24:	f7ff ff12 	bl	8017a4c <__i2b>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c2e:	4604      	mov	r4, r0
 8017c30:	6003      	str	r3, [r0, #0]
 8017c32:	f04f 0900 	mov.w	r9, #0
 8017c36:	07eb      	lsls	r3, r5, #31
 8017c38:	d50a      	bpl.n	8017c50 <__pow5mult+0x84>
 8017c3a:	4639      	mov	r1, r7
 8017c3c:	4622      	mov	r2, r4
 8017c3e:	4630      	mov	r0, r6
 8017c40:	f7ff ff1a 	bl	8017a78 <__multiply>
 8017c44:	4639      	mov	r1, r7
 8017c46:	4680      	mov	r8, r0
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f7ff fdff 	bl	801784c <_Bfree>
 8017c4e:	4647      	mov	r7, r8
 8017c50:	106d      	asrs	r5, r5, #1
 8017c52:	d00b      	beq.n	8017c6c <__pow5mult+0xa0>
 8017c54:	6820      	ldr	r0, [r4, #0]
 8017c56:	b938      	cbnz	r0, 8017c68 <__pow5mult+0x9c>
 8017c58:	4622      	mov	r2, r4
 8017c5a:	4621      	mov	r1, r4
 8017c5c:	4630      	mov	r0, r6
 8017c5e:	f7ff ff0b 	bl	8017a78 <__multiply>
 8017c62:	6020      	str	r0, [r4, #0]
 8017c64:	f8c0 9000 	str.w	r9, [r0]
 8017c68:	4604      	mov	r4, r0
 8017c6a:	e7e4      	b.n	8017c36 <__pow5mult+0x6a>
 8017c6c:	4638      	mov	r0, r7
 8017c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c72:	bf00      	nop
 8017c74:	0801ceb0 	.word	0x0801ceb0
 8017c78:	0801cce2 	.word	0x0801cce2
 8017c7c:	0801cd62 	.word	0x0801cd62

08017c80 <__lshift>:
 8017c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c84:	460c      	mov	r4, r1
 8017c86:	6849      	ldr	r1, [r1, #4]
 8017c88:	6923      	ldr	r3, [r4, #16]
 8017c8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017c8e:	68a3      	ldr	r3, [r4, #8]
 8017c90:	4607      	mov	r7, r0
 8017c92:	4691      	mov	r9, r2
 8017c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017c98:	f108 0601 	add.w	r6, r8, #1
 8017c9c:	42b3      	cmp	r3, r6
 8017c9e:	db0b      	blt.n	8017cb8 <__lshift+0x38>
 8017ca0:	4638      	mov	r0, r7
 8017ca2:	f7ff fd93 	bl	80177cc <_Balloc>
 8017ca6:	4605      	mov	r5, r0
 8017ca8:	b948      	cbnz	r0, 8017cbe <__lshift+0x3e>
 8017caa:	4602      	mov	r2, r0
 8017cac:	4b28      	ldr	r3, [pc, #160]	; (8017d50 <__lshift+0xd0>)
 8017cae:	4829      	ldr	r0, [pc, #164]	; (8017d54 <__lshift+0xd4>)
 8017cb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017cb4:	f001 fb18 	bl	80192e8 <__assert_func>
 8017cb8:	3101      	adds	r1, #1
 8017cba:	005b      	lsls	r3, r3, #1
 8017cbc:	e7ee      	b.n	8017c9c <__lshift+0x1c>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	f100 0114 	add.w	r1, r0, #20
 8017cc4:	f100 0210 	add.w	r2, r0, #16
 8017cc8:	4618      	mov	r0, r3
 8017cca:	4553      	cmp	r3, sl
 8017ccc:	db33      	blt.n	8017d36 <__lshift+0xb6>
 8017cce:	6920      	ldr	r0, [r4, #16]
 8017cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017cd4:	f104 0314 	add.w	r3, r4, #20
 8017cd8:	f019 091f 	ands.w	r9, r9, #31
 8017cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017ce0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ce4:	d02b      	beq.n	8017d3e <__lshift+0xbe>
 8017ce6:	f1c9 0e20 	rsb	lr, r9, #32
 8017cea:	468a      	mov	sl, r1
 8017cec:	2200      	movs	r2, #0
 8017cee:	6818      	ldr	r0, [r3, #0]
 8017cf0:	fa00 f009 	lsl.w	r0, r0, r9
 8017cf4:	4310      	orrs	r0, r2
 8017cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8017cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cfe:	459c      	cmp	ip, r3
 8017d00:	fa22 f20e 	lsr.w	r2, r2, lr
 8017d04:	d8f3      	bhi.n	8017cee <__lshift+0x6e>
 8017d06:	ebac 0304 	sub.w	r3, ip, r4
 8017d0a:	3b15      	subs	r3, #21
 8017d0c:	f023 0303 	bic.w	r3, r3, #3
 8017d10:	3304      	adds	r3, #4
 8017d12:	f104 0015 	add.w	r0, r4, #21
 8017d16:	4584      	cmp	ip, r0
 8017d18:	bf38      	it	cc
 8017d1a:	2304      	movcc	r3, #4
 8017d1c:	50ca      	str	r2, [r1, r3]
 8017d1e:	b10a      	cbz	r2, 8017d24 <__lshift+0xa4>
 8017d20:	f108 0602 	add.w	r6, r8, #2
 8017d24:	3e01      	subs	r6, #1
 8017d26:	4638      	mov	r0, r7
 8017d28:	612e      	str	r6, [r5, #16]
 8017d2a:	4621      	mov	r1, r4
 8017d2c:	f7ff fd8e 	bl	801784c <_Bfree>
 8017d30:	4628      	mov	r0, r5
 8017d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	e7c5      	b.n	8017cca <__lshift+0x4a>
 8017d3e:	3904      	subs	r1, #4
 8017d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d44:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d48:	459c      	cmp	ip, r3
 8017d4a:	d8f9      	bhi.n	8017d40 <__lshift+0xc0>
 8017d4c:	e7ea      	b.n	8017d24 <__lshift+0xa4>
 8017d4e:	bf00      	nop
 8017d50:	0801cd51 	.word	0x0801cd51
 8017d54:	0801cd62 	.word	0x0801cd62

08017d58 <__mcmp>:
 8017d58:	b530      	push	{r4, r5, lr}
 8017d5a:	6902      	ldr	r2, [r0, #16]
 8017d5c:	690c      	ldr	r4, [r1, #16]
 8017d5e:	1b12      	subs	r2, r2, r4
 8017d60:	d10e      	bne.n	8017d80 <__mcmp+0x28>
 8017d62:	f100 0314 	add.w	r3, r0, #20
 8017d66:	3114      	adds	r1, #20
 8017d68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017d6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017d70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017d74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017d78:	42a5      	cmp	r5, r4
 8017d7a:	d003      	beq.n	8017d84 <__mcmp+0x2c>
 8017d7c:	d305      	bcc.n	8017d8a <__mcmp+0x32>
 8017d7e:	2201      	movs	r2, #1
 8017d80:	4610      	mov	r0, r2
 8017d82:	bd30      	pop	{r4, r5, pc}
 8017d84:	4283      	cmp	r3, r0
 8017d86:	d3f3      	bcc.n	8017d70 <__mcmp+0x18>
 8017d88:	e7fa      	b.n	8017d80 <__mcmp+0x28>
 8017d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8017d8e:	e7f7      	b.n	8017d80 <__mcmp+0x28>

08017d90 <__mdiff>:
 8017d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d94:	460c      	mov	r4, r1
 8017d96:	4606      	mov	r6, r0
 8017d98:	4611      	mov	r1, r2
 8017d9a:	4620      	mov	r0, r4
 8017d9c:	4690      	mov	r8, r2
 8017d9e:	f7ff ffdb 	bl	8017d58 <__mcmp>
 8017da2:	1e05      	subs	r5, r0, #0
 8017da4:	d110      	bne.n	8017dc8 <__mdiff+0x38>
 8017da6:	4629      	mov	r1, r5
 8017da8:	4630      	mov	r0, r6
 8017daa:	f7ff fd0f 	bl	80177cc <_Balloc>
 8017dae:	b930      	cbnz	r0, 8017dbe <__mdiff+0x2e>
 8017db0:	4b3a      	ldr	r3, [pc, #232]	; (8017e9c <__mdiff+0x10c>)
 8017db2:	4602      	mov	r2, r0
 8017db4:	f240 2137 	movw	r1, #567	; 0x237
 8017db8:	4839      	ldr	r0, [pc, #228]	; (8017ea0 <__mdiff+0x110>)
 8017dba:	f001 fa95 	bl	80192e8 <__assert_func>
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc8:	bfa4      	itt	ge
 8017dca:	4643      	movge	r3, r8
 8017dcc:	46a0      	movge	r8, r4
 8017dce:	4630      	mov	r0, r6
 8017dd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017dd4:	bfa6      	itte	ge
 8017dd6:	461c      	movge	r4, r3
 8017dd8:	2500      	movge	r5, #0
 8017dda:	2501      	movlt	r5, #1
 8017ddc:	f7ff fcf6 	bl	80177cc <_Balloc>
 8017de0:	b920      	cbnz	r0, 8017dec <__mdiff+0x5c>
 8017de2:	4b2e      	ldr	r3, [pc, #184]	; (8017e9c <__mdiff+0x10c>)
 8017de4:	4602      	mov	r2, r0
 8017de6:	f240 2145 	movw	r1, #581	; 0x245
 8017dea:	e7e5      	b.n	8017db8 <__mdiff+0x28>
 8017dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017df0:	6926      	ldr	r6, [r4, #16]
 8017df2:	60c5      	str	r5, [r0, #12]
 8017df4:	f104 0914 	add.w	r9, r4, #20
 8017df8:	f108 0514 	add.w	r5, r8, #20
 8017dfc:	f100 0e14 	add.w	lr, r0, #20
 8017e00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017e04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017e08:	f108 0210 	add.w	r2, r8, #16
 8017e0c:	46f2      	mov	sl, lr
 8017e0e:	2100      	movs	r1, #0
 8017e10:	f859 3b04 	ldr.w	r3, [r9], #4
 8017e14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017e18:	fa11 f88b 	uxtah	r8, r1, fp
 8017e1c:	b299      	uxth	r1, r3
 8017e1e:	0c1b      	lsrs	r3, r3, #16
 8017e20:	eba8 0801 	sub.w	r8, r8, r1
 8017e24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017e28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017e2c:	fa1f f888 	uxth.w	r8, r8
 8017e30:	1419      	asrs	r1, r3, #16
 8017e32:	454e      	cmp	r6, r9
 8017e34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017e38:	f84a 3b04 	str.w	r3, [sl], #4
 8017e3c:	d8e8      	bhi.n	8017e10 <__mdiff+0x80>
 8017e3e:	1b33      	subs	r3, r6, r4
 8017e40:	3b15      	subs	r3, #21
 8017e42:	f023 0303 	bic.w	r3, r3, #3
 8017e46:	3304      	adds	r3, #4
 8017e48:	3415      	adds	r4, #21
 8017e4a:	42a6      	cmp	r6, r4
 8017e4c:	bf38      	it	cc
 8017e4e:	2304      	movcc	r3, #4
 8017e50:	441d      	add	r5, r3
 8017e52:	4473      	add	r3, lr
 8017e54:	469e      	mov	lr, r3
 8017e56:	462e      	mov	r6, r5
 8017e58:	4566      	cmp	r6, ip
 8017e5a:	d30e      	bcc.n	8017e7a <__mdiff+0xea>
 8017e5c:	f10c 0203 	add.w	r2, ip, #3
 8017e60:	1b52      	subs	r2, r2, r5
 8017e62:	f022 0203 	bic.w	r2, r2, #3
 8017e66:	3d03      	subs	r5, #3
 8017e68:	45ac      	cmp	ip, r5
 8017e6a:	bf38      	it	cc
 8017e6c:	2200      	movcc	r2, #0
 8017e6e:	4413      	add	r3, r2
 8017e70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017e74:	b17a      	cbz	r2, 8017e96 <__mdiff+0x106>
 8017e76:	6107      	str	r7, [r0, #16]
 8017e78:	e7a4      	b.n	8017dc4 <__mdiff+0x34>
 8017e7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8017e7e:	fa11 f288 	uxtah	r2, r1, r8
 8017e82:	1414      	asrs	r4, r2, #16
 8017e84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017e88:	b292      	uxth	r2, r2
 8017e8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017e8e:	f84e 2b04 	str.w	r2, [lr], #4
 8017e92:	1421      	asrs	r1, r4, #16
 8017e94:	e7e0      	b.n	8017e58 <__mdiff+0xc8>
 8017e96:	3f01      	subs	r7, #1
 8017e98:	e7ea      	b.n	8017e70 <__mdiff+0xe0>
 8017e9a:	bf00      	nop
 8017e9c:	0801cd51 	.word	0x0801cd51
 8017ea0:	0801cd62 	.word	0x0801cd62

08017ea4 <__ulp>:
 8017ea4:	b082      	sub	sp, #8
 8017ea6:	ed8d 0b00 	vstr	d0, [sp]
 8017eaa:	9a01      	ldr	r2, [sp, #4]
 8017eac:	4b0f      	ldr	r3, [pc, #60]	; (8017eec <__ulp+0x48>)
 8017eae:	4013      	ands	r3, r2
 8017eb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	dc08      	bgt.n	8017eca <__ulp+0x26>
 8017eb8:	425b      	negs	r3, r3
 8017eba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8017ebe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017ec2:	da04      	bge.n	8017ece <__ulp+0x2a>
 8017ec4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017ec8:	4113      	asrs	r3, r2
 8017eca:	2200      	movs	r2, #0
 8017ecc:	e008      	b.n	8017ee0 <__ulp+0x3c>
 8017ece:	f1a2 0314 	sub.w	r3, r2, #20
 8017ed2:	2b1e      	cmp	r3, #30
 8017ed4:	bfda      	itte	le
 8017ed6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8017eda:	40da      	lsrle	r2, r3
 8017edc:	2201      	movgt	r2, #1
 8017ede:	2300      	movs	r3, #0
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	4610      	mov	r0, r2
 8017ee4:	ec41 0b10 	vmov	d0, r0, r1
 8017ee8:	b002      	add	sp, #8
 8017eea:	4770      	bx	lr
 8017eec:	7ff00000 	.word	0x7ff00000

08017ef0 <__b2d>:
 8017ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef4:	6906      	ldr	r6, [r0, #16]
 8017ef6:	f100 0814 	add.w	r8, r0, #20
 8017efa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017efe:	1f37      	subs	r7, r6, #4
 8017f00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017f04:	4610      	mov	r0, r2
 8017f06:	f7ff fd53 	bl	80179b0 <__hi0bits>
 8017f0a:	f1c0 0320 	rsb	r3, r0, #32
 8017f0e:	280a      	cmp	r0, #10
 8017f10:	600b      	str	r3, [r1, #0]
 8017f12:	491b      	ldr	r1, [pc, #108]	; (8017f80 <__b2d+0x90>)
 8017f14:	dc15      	bgt.n	8017f42 <__b2d+0x52>
 8017f16:	f1c0 0c0b 	rsb	ip, r0, #11
 8017f1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8017f1e:	45b8      	cmp	r8, r7
 8017f20:	ea43 0501 	orr.w	r5, r3, r1
 8017f24:	bf34      	ite	cc
 8017f26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017f2a:	2300      	movcs	r3, #0
 8017f2c:	3015      	adds	r0, #21
 8017f2e:	fa02 f000 	lsl.w	r0, r2, r0
 8017f32:	fa23 f30c 	lsr.w	r3, r3, ip
 8017f36:	4303      	orrs	r3, r0
 8017f38:	461c      	mov	r4, r3
 8017f3a:	ec45 4b10 	vmov	d0, r4, r5
 8017f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f42:	45b8      	cmp	r8, r7
 8017f44:	bf3a      	itte	cc
 8017f46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017f4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8017f4e:	2300      	movcs	r3, #0
 8017f50:	380b      	subs	r0, #11
 8017f52:	d012      	beq.n	8017f7a <__b2d+0x8a>
 8017f54:	f1c0 0120 	rsb	r1, r0, #32
 8017f58:	fa23 f401 	lsr.w	r4, r3, r1
 8017f5c:	4082      	lsls	r2, r0
 8017f5e:	4322      	orrs	r2, r4
 8017f60:	4547      	cmp	r7, r8
 8017f62:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8017f66:	bf8c      	ite	hi
 8017f68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017f6c:	2200      	movls	r2, #0
 8017f6e:	4083      	lsls	r3, r0
 8017f70:	40ca      	lsrs	r2, r1
 8017f72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017f76:	4313      	orrs	r3, r2
 8017f78:	e7de      	b.n	8017f38 <__b2d+0x48>
 8017f7a:	ea42 0501 	orr.w	r5, r2, r1
 8017f7e:	e7db      	b.n	8017f38 <__b2d+0x48>
 8017f80:	3ff00000 	.word	0x3ff00000

08017f84 <__d2b>:
 8017f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017f88:	460f      	mov	r7, r1
 8017f8a:	2101      	movs	r1, #1
 8017f8c:	ec59 8b10 	vmov	r8, r9, d0
 8017f90:	4616      	mov	r6, r2
 8017f92:	f7ff fc1b 	bl	80177cc <_Balloc>
 8017f96:	4604      	mov	r4, r0
 8017f98:	b930      	cbnz	r0, 8017fa8 <__d2b+0x24>
 8017f9a:	4602      	mov	r2, r0
 8017f9c:	4b24      	ldr	r3, [pc, #144]	; (8018030 <__d2b+0xac>)
 8017f9e:	4825      	ldr	r0, [pc, #148]	; (8018034 <__d2b+0xb0>)
 8017fa0:	f240 310f 	movw	r1, #783	; 0x30f
 8017fa4:	f001 f9a0 	bl	80192e8 <__assert_func>
 8017fa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017fac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017fb0:	bb2d      	cbnz	r5, 8017ffe <__d2b+0x7a>
 8017fb2:	9301      	str	r3, [sp, #4]
 8017fb4:	f1b8 0300 	subs.w	r3, r8, #0
 8017fb8:	d026      	beq.n	8018008 <__d2b+0x84>
 8017fba:	4668      	mov	r0, sp
 8017fbc:	9300      	str	r3, [sp, #0]
 8017fbe:	f7ff fd17 	bl	80179f0 <__lo0bits>
 8017fc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017fc6:	b1e8      	cbz	r0, 8018004 <__d2b+0x80>
 8017fc8:	f1c0 0320 	rsb	r3, r0, #32
 8017fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8017fd0:	430b      	orrs	r3, r1
 8017fd2:	40c2      	lsrs	r2, r0
 8017fd4:	6163      	str	r3, [r4, #20]
 8017fd6:	9201      	str	r2, [sp, #4]
 8017fd8:	9b01      	ldr	r3, [sp, #4]
 8017fda:	61a3      	str	r3, [r4, #24]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	bf14      	ite	ne
 8017fe0:	2202      	movne	r2, #2
 8017fe2:	2201      	moveq	r2, #1
 8017fe4:	6122      	str	r2, [r4, #16]
 8017fe6:	b1bd      	cbz	r5, 8018018 <__d2b+0x94>
 8017fe8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017fec:	4405      	add	r5, r0
 8017fee:	603d      	str	r5, [r7, #0]
 8017ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017ff4:	6030      	str	r0, [r6, #0]
 8017ff6:	4620      	mov	r0, r4
 8017ff8:	b003      	add	sp, #12
 8017ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018002:	e7d6      	b.n	8017fb2 <__d2b+0x2e>
 8018004:	6161      	str	r1, [r4, #20]
 8018006:	e7e7      	b.n	8017fd8 <__d2b+0x54>
 8018008:	a801      	add	r0, sp, #4
 801800a:	f7ff fcf1 	bl	80179f0 <__lo0bits>
 801800e:	9b01      	ldr	r3, [sp, #4]
 8018010:	6163      	str	r3, [r4, #20]
 8018012:	3020      	adds	r0, #32
 8018014:	2201      	movs	r2, #1
 8018016:	e7e5      	b.n	8017fe4 <__d2b+0x60>
 8018018:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801801c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018020:	6038      	str	r0, [r7, #0]
 8018022:	6918      	ldr	r0, [r3, #16]
 8018024:	f7ff fcc4 	bl	80179b0 <__hi0bits>
 8018028:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801802c:	e7e2      	b.n	8017ff4 <__d2b+0x70>
 801802e:	bf00      	nop
 8018030:	0801cd51 	.word	0x0801cd51
 8018034:	0801cd62 	.word	0x0801cd62

08018038 <__ratio>:
 8018038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801803c:	4688      	mov	r8, r1
 801803e:	4669      	mov	r1, sp
 8018040:	4681      	mov	r9, r0
 8018042:	f7ff ff55 	bl	8017ef0 <__b2d>
 8018046:	a901      	add	r1, sp, #4
 8018048:	4640      	mov	r0, r8
 801804a:	ec55 4b10 	vmov	r4, r5, d0
 801804e:	f7ff ff4f 	bl	8017ef0 <__b2d>
 8018052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018056:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801805a:	eba3 0c02 	sub.w	ip, r3, r2
 801805e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018062:	1a9b      	subs	r3, r3, r2
 8018064:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018068:	ec51 0b10 	vmov	r0, r1, d0
 801806c:	2b00      	cmp	r3, #0
 801806e:	bfd6      	itet	le
 8018070:	460a      	movle	r2, r1
 8018072:	462a      	movgt	r2, r5
 8018074:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018078:	468b      	mov	fp, r1
 801807a:	462f      	mov	r7, r5
 801807c:	bfd4      	ite	le
 801807e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018082:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018086:	4620      	mov	r0, r4
 8018088:	ee10 2a10 	vmov	r2, s0
 801808c:	465b      	mov	r3, fp
 801808e:	4639      	mov	r1, r7
 8018090:	f7e8 fc04 	bl	800089c <__aeabi_ddiv>
 8018094:	ec41 0b10 	vmov	d0, r0, r1
 8018098:	b003      	add	sp, #12
 801809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801809e <__copybits>:
 801809e:	3901      	subs	r1, #1
 80180a0:	b570      	push	{r4, r5, r6, lr}
 80180a2:	1149      	asrs	r1, r1, #5
 80180a4:	6914      	ldr	r4, [r2, #16]
 80180a6:	3101      	adds	r1, #1
 80180a8:	f102 0314 	add.w	r3, r2, #20
 80180ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80180b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80180b4:	1f05      	subs	r5, r0, #4
 80180b6:	42a3      	cmp	r3, r4
 80180b8:	d30c      	bcc.n	80180d4 <__copybits+0x36>
 80180ba:	1aa3      	subs	r3, r4, r2
 80180bc:	3b11      	subs	r3, #17
 80180be:	f023 0303 	bic.w	r3, r3, #3
 80180c2:	3211      	adds	r2, #17
 80180c4:	42a2      	cmp	r2, r4
 80180c6:	bf88      	it	hi
 80180c8:	2300      	movhi	r3, #0
 80180ca:	4418      	add	r0, r3
 80180cc:	2300      	movs	r3, #0
 80180ce:	4288      	cmp	r0, r1
 80180d0:	d305      	bcc.n	80180de <__copybits+0x40>
 80180d2:	bd70      	pop	{r4, r5, r6, pc}
 80180d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80180d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80180dc:	e7eb      	b.n	80180b6 <__copybits+0x18>
 80180de:	f840 3b04 	str.w	r3, [r0], #4
 80180e2:	e7f4      	b.n	80180ce <__copybits+0x30>

080180e4 <__any_on>:
 80180e4:	f100 0214 	add.w	r2, r0, #20
 80180e8:	6900      	ldr	r0, [r0, #16]
 80180ea:	114b      	asrs	r3, r1, #5
 80180ec:	4298      	cmp	r0, r3
 80180ee:	b510      	push	{r4, lr}
 80180f0:	db11      	blt.n	8018116 <__any_on+0x32>
 80180f2:	dd0a      	ble.n	801810a <__any_on+0x26>
 80180f4:	f011 011f 	ands.w	r1, r1, #31
 80180f8:	d007      	beq.n	801810a <__any_on+0x26>
 80180fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80180fe:	fa24 f001 	lsr.w	r0, r4, r1
 8018102:	fa00 f101 	lsl.w	r1, r0, r1
 8018106:	428c      	cmp	r4, r1
 8018108:	d10b      	bne.n	8018122 <__any_on+0x3e>
 801810a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801810e:	4293      	cmp	r3, r2
 8018110:	d803      	bhi.n	801811a <__any_on+0x36>
 8018112:	2000      	movs	r0, #0
 8018114:	bd10      	pop	{r4, pc}
 8018116:	4603      	mov	r3, r0
 8018118:	e7f7      	b.n	801810a <__any_on+0x26>
 801811a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801811e:	2900      	cmp	r1, #0
 8018120:	d0f5      	beq.n	801810e <__any_on+0x2a>
 8018122:	2001      	movs	r0, #1
 8018124:	e7f6      	b.n	8018114 <__any_on+0x30>

08018126 <sulp>:
 8018126:	b570      	push	{r4, r5, r6, lr}
 8018128:	4604      	mov	r4, r0
 801812a:	460d      	mov	r5, r1
 801812c:	ec45 4b10 	vmov	d0, r4, r5
 8018130:	4616      	mov	r6, r2
 8018132:	f7ff feb7 	bl	8017ea4 <__ulp>
 8018136:	ec51 0b10 	vmov	r0, r1, d0
 801813a:	b17e      	cbz	r6, 801815c <sulp+0x36>
 801813c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018140:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018144:	2b00      	cmp	r3, #0
 8018146:	dd09      	ble.n	801815c <sulp+0x36>
 8018148:	051b      	lsls	r3, r3, #20
 801814a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801814e:	2400      	movs	r4, #0
 8018150:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018154:	4622      	mov	r2, r4
 8018156:	462b      	mov	r3, r5
 8018158:	f7e8 fa76 	bl	8000648 <__aeabi_dmul>
 801815c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018160 <_strtod_l>:
 8018160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018164:	ed2d 8b02 	vpush	{d8}
 8018168:	b09b      	sub	sp, #108	; 0x6c
 801816a:	4604      	mov	r4, r0
 801816c:	9213      	str	r2, [sp, #76]	; 0x4c
 801816e:	2200      	movs	r2, #0
 8018170:	9216      	str	r2, [sp, #88]	; 0x58
 8018172:	460d      	mov	r5, r1
 8018174:	f04f 0800 	mov.w	r8, #0
 8018178:	f04f 0900 	mov.w	r9, #0
 801817c:	460a      	mov	r2, r1
 801817e:	9215      	str	r2, [sp, #84]	; 0x54
 8018180:	7811      	ldrb	r1, [r2, #0]
 8018182:	292b      	cmp	r1, #43	; 0x2b
 8018184:	d04c      	beq.n	8018220 <_strtod_l+0xc0>
 8018186:	d83a      	bhi.n	80181fe <_strtod_l+0x9e>
 8018188:	290d      	cmp	r1, #13
 801818a:	d834      	bhi.n	80181f6 <_strtod_l+0x96>
 801818c:	2908      	cmp	r1, #8
 801818e:	d834      	bhi.n	80181fa <_strtod_l+0x9a>
 8018190:	2900      	cmp	r1, #0
 8018192:	d03d      	beq.n	8018210 <_strtod_l+0xb0>
 8018194:	2200      	movs	r2, #0
 8018196:	920a      	str	r2, [sp, #40]	; 0x28
 8018198:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801819a:	7832      	ldrb	r2, [r6, #0]
 801819c:	2a30      	cmp	r2, #48	; 0x30
 801819e:	f040 80b4 	bne.w	801830a <_strtod_l+0x1aa>
 80181a2:	7872      	ldrb	r2, [r6, #1]
 80181a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80181a8:	2a58      	cmp	r2, #88	; 0x58
 80181aa:	d170      	bne.n	801828e <_strtod_l+0x12e>
 80181ac:	9302      	str	r3, [sp, #8]
 80181ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181b0:	9301      	str	r3, [sp, #4]
 80181b2:	ab16      	add	r3, sp, #88	; 0x58
 80181b4:	9300      	str	r3, [sp, #0]
 80181b6:	4a8e      	ldr	r2, [pc, #568]	; (80183f0 <_strtod_l+0x290>)
 80181b8:	ab17      	add	r3, sp, #92	; 0x5c
 80181ba:	a915      	add	r1, sp, #84	; 0x54
 80181bc:	4620      	mov	r0, r4
 80181be:	f001 f92f 	bl	8019420 <__gethex>
 80181c2:	f010 070f 	ands.w	r7, r0, #15
 80181c6:	4605      	mov	r5, r0
 80181c8:	d005      	beq.n	80181d6 <_strtod_l+0x76>
 80181ca:	2f06      	cmp	r7, #6
 80181cc:	d12a      	bne.n	8018224 <_strtod_l+0xc4>
 80181ce:	3601      	adds	r6, #1
 80181d0:	2300      	movs	r3, #0
 80181d2:	9615      	str	r6, [sp, #84]	; 0x54
 80181d4:	930a      	str	r3, [sp, #40]	; 0x28
 80181d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f040 857f 	bne.w	8018cdc <_strtod_l+0xb7c>
 80181de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181e0:	b1db      	cbz	r3, 801821a <_strtod_l+0xba>
 80181e2:	4642      	mov	r2, r8
 80181e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80181e8:	ec43 2b10 	vmov	d0, r2, r3
 80181ec:	b01b      	add	sp, #108	; 0x6c
 80181ee:	ecbd 8b02 	vpop	{d8}
 80181f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f6:	2920      	cmp	r1, #32
 80181f8:	d1cc      	bne.n	8018194 <_strtod_l+0x34>
 80181fa:	3201      	adds	r2, #1
 80181fc:	e7bf      	b.n	801817e <_strtod_l+0x1e>
 80181fe:	292d      	cmp	r1, #45	; 0x2d
 8018200:	d1c8      	bne.n	8018194 <_strtod_l+0x34>
 8018202:	2101      	movs	r1, #1
 8018204:	910a      	str	r1, [sp, #40]	; 0x28
 8018206:	1c51      	adds	r1, r2, #1
 8018208:	9115      	str	r1, [sp, #84]	; 0x54
 801820a:	7852      	ldrb	r2, [r2, #1]
 801820c:	2a00      	cmp	r2, #0
 801820e:	d1c3      	bne.n	8018198 <_strtod_l+0x38>
 8018210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018212:	9515      	str	r5, [sp, #84]	; 0x54
 8018214:	2b00      	cmp	r3, #0
 8018216:	f040 855f 	bne.w	8018cd8 <_strtod_l+0xb78>
 801821a:	4642      	mov	r2, r8
 801821c:	464b      	mov	r3, r9
 801821e:	e7e3      	b.n	80181e8 <_strtod_l+0x88>
 8018220:	2100      	movs	r1, #0
 8018222:	e7ef      	b.n	8018204 <_strtod_l+0xa4>
 8018224:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018226:	b13a      	cbz	r2, 8018238 <_strtod_l+0xd8>
 8018228:	2135      	movs	r1, #53	; 0x35
 801822a:	a818      	add	r0, sp, #96	; 0x60
 801822c:	f7ff ff37 	bl	801809e <__copybits>
 8018230:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018232:	4620      	mov	r0, r4
 8018234:	f7ff fb0a 	bl	801784c <_Bfree>
 8018238:	3f01      	subs	r7, #1
 801823a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801823c:	2f04      	cmp	r7, #4
 801823e:	d806      	bhi.n	801824e <_strtod_l+0xee>
 8018240:	e8df f007 	tbb	[pc, r7]
 8018244:	201d0314 	.word	0x201d0314
 8018248:	14          	.byte	0x14
 8018249:	00          	.byte	0x00
 801824a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801824e:	05e9      	lsls	r1, r5, #23
 8018250:	bf48      	it	mi
 8018252:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8018256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801825a:	0d1b      	lsrs	r3, r3, #20
 801825c:	051b      	lsls	r3, r3, #20
 801825e:	2b00      	cmp	r3, #0
 8018260:	d1b9      	bne.n	80181d6 <_strtod_l+0x76>
 8018262:	f7fe faf5 	bl	8016850 <__errno>
 8018266:	2322      	movs	r3, #34	; 0x22
 8018268:	6003      	str	r3, [r0, #0]
 801826a:	e7b4      	b.n	80181d6 <_strtod_l+0x76>
 801826c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8018270:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018274:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018278:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801827c:	e7e7      	b.n	801824e <_strtod_l+0xee>
 801827e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80183f8 <_strtod_l+0x298>
 8018282:	e7e4      	b.n	801824e <_strtod_l+0xee>
 8018284:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018288:	f04f 38ff 	mov.w	r8, #4294967295
 801828c:	e7df      	b.n	801824e <_strtod_l+0xee>
 801828e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018290:	1c5a      	adds	r2, r3, #1
 8018292:	9215      	str	r2, [sp, #84]	; 0x54
 8018294:	785b      	ldrb	r3, [r3, #1]
 8018296:	2b30      	cmp	r3, #48	; 0x30
 8018298:	d0f9      	beq.n	801828e <_strtod_l+0x12e>
 801829a:	2b00      	cmp	r3, #0
 801829c:	d09b      	beq.n	80181d6 <_strtod_l+0x76>
 801829e:	2301      	movs	r3, #1
 80182a0:	f04f 0a00 	mov.w	sl, #0
 80182a4:	9304      	str	r3, [sp, #16]
 80182a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80182aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80182ae:	46d3      	mov	fp, sl
 80182b0:	220a      	movs	r2, #10
 80182b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80182b4:	7806      	ldrb	r6, [r0, #0]
 80182b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80182ba:	b2d9      	uxtb	r1, r3
 80182bc:	2909      	cmp	r1, #9
 80182be:	d926      	bls.n	801830e <_strtod_l+0x1ae>
 80182c0:	494c      	ldr	r1, [pc, #304]	; (80183f4 <_strtod_l+0x294>)
 80182c2:	2201      	movs	r2, #1
 80182c4:	f000 ffe6 	bl	8019294 <strncmp>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	d030      	beq.n	801832e <_strtod_l+0x1ce>
 80182cc:	2000      	movs	r0, #0
 80182ce:	4632      	mov	r2, r6
 80182d0:	9005      	str	r0, [sp, #20]
 80182d2:	465e      	mov	r6, fp
 80182d4:	4603      	mov	r3, r0
 80182d6:	2a65      	cmp	r2, #101	; 0x65
 80182d8:	d001      	beq.n	80182de <_strtod_l+0x17e>
 80182da:	2a45      	cmp	r2, #69	; 0x45
 80182dc:	d113      	bne.n	8018306 <_strtod_l+0x1a6>
 80182de:	b91e      	cbnz	r6, 80182e8 <_strtod_l+0x188>
 80182e0:	9a04      	ldr	r2, [sp, #16]
 80182e2:	4302      	orrs	r2, r0
 80182e4:	d094      	beq.n	8018210 <_strtod_l+0xb0>
 80182e6:	2600      	movs	r6, #0
 80182e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80182ea:	1c6a      	adds	r2, r5, #1
 80182ec:	9215      	str	r2, [sp, #84]	; 0x54
 80182ee:	786a      	ldrb	r2, [r5, #1]
 80182f0:	2a2b      	cmp	r2, #43	; 0x2b
 80182f2:	d074      	beq.n	80183de <_strtod_l+0x27e>
 80182f4:	2a2d      	cmp	r2, #45	; 0x2d
 80182f6:	d078      	beq.n	80183ea <_strtod_l+0x28a>
 80182f8:	f04f 0c00 	mov.w	ip, #0
 80182fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018300:	2909      	cmp	r1, #9
 8018302:	d97f      	bls.n	8018404 <_strtod_l+0x2a4>
 8018304:	9515      	str	r5, [sp, #84]	; 0x54
 8018306:	2700      	movs	r7, #0
 8018308:	e09e      	b.n	8018448 <_strtod_l+0x2e8>
 801830a:	2300      	movs	r3, #0
 801830c:	e7c8      	b.n	80182a0 <_strtod_l+0x140>
 801830e:	f1bb 0f08 	cmp.w	fp, #8
 8018312:	bfd8      	it	le
 8018314:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018316:	f100 0001 	add.w	r0, r0, #1
 801831a:	bfda      	itte	le
 801831c:	fb02 3301 	mlale	r3, r2, r1, r3
 8018320:	9309      	strle	r3, [sp, #36]	; 0x24
 8018322:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8018326:	f10b 0b01 	add.w	fp, fp, #1
 801832a:	9015      	str	r0, [sp, #84]	; 0x54
 801832c:	e7c1      	b.n	80182b2 <_strtod_l+0x152>
 801832e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018330:	1c5a      	adds	r2, r3, #1
 8018332:	9215      	str	r2, [sp, #84]	; 0x54
 8018334:	785a      	ldrb	r2, [r3, #1]
 8018336:	f1bb 0f00 	cmp.w	fp, #0
 801833a:	d037      	beq.n	80183ac <_strtod_l+0x24c>
 801833c:	9005      	str	r0, [sp, #20]
 801833e:	465e      	mov	r6, fp
 8018340:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018344:	2b09      	cmp	r3, #9
 8018346:	d912      	bls.n	801836e <_strtod_l+0x20e>
 8018348:	2301      	movs	r3, #1
 801834a:	e7c4      	b.n	80182d6 <_strtod_l+0x176>
 801834c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801834e:	1c5a      	adds	r2, r3, #1
 8018350:	9215      	str	r2, [sp, #84]	; 0x54
 8018352:	785a      	ldrb	r2, [r3, #1]
 8018354:	3001      	adds	r0, #1
 8018356:	2a30      	cmp	r2, #48	; 0x30
 8018358:	d0f8      	beq.n	801834c <_strtod_l+0x1ec>
 801835a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801835e:	2b08      	cmp	r3, #8
 8018360:	f200 84c1 	bhi.w	8018ce6 <_strtod_l+0xb86>
 8018364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018366:	9005      	str	r0, [sp, #20]
 8018368:	2000      	movs	r0, #0
 801836a:	930b      	str	r3, [sp, #44]	; 0x2c
 801836c:	4606      	mov	r6, r0
 801836e:	3a30      	subs	r2, #48	; 0x30
 8018370:	f100 0301 	add.w	r3, r0, #1
 8018374:	d014      	beq.n	80183a0 <_strtod_l+0x240>
 8018376:	9905      	ldr	r1, [sp, #20]
 8018378:	4419      	add	r1, r3
 801837a:	9105      	str	r1, [sp, #20]
 801837c:	4633      	mov	r3, r6
 801837e:	eb00 0c06 	add.w	ip, r0, r6
 8018382:	210a      	movs	r1, #10
 8018384:	4563      	cmp	r3, ip
 8018386:	d113      	bne.n	80183b0 <_strtod_l+0x250>
 8018388:	1833      	adds	r3, r6, r0
 801838a:	2b08      	cmp	r3, #8
 801838c:	f106 0601 	add.w	r6, r6, #1
 8018390:	4406      	add	r6, r0
 8018392:	dc1a      	bgt.n	80183ca <_strtod_l+0x26a>
 8018394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018396:	230a      	movs	r3, #10
 8018398:	fb03 2301 	mla	r3, r3, r1, r2
 801839c:	9309      	str	r3, [sp, #36]	; 0x24
 801839e:	2300      	movs	r3, #0
 80183a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80183a2:	1c51      	adds	r1, r2, #1
 80183a4:	9115      	str	r1, [sp, #84]	; 0x54
 80183a6:	7852      	ldrb	r2, [r2, #1]
 80183a8:	4618      	mov	r0, r3
 80183aa:	e7c9      	b.n	8018340 <_strtod_l+0x1e0>
 80183ac:	4658      	mov	r0, fp
 80183ae:	e7d2      	b.n	8018356 <_strtod_l+0x1f6>
 80183b0:	2b08      	cmp	r3, #8
 80183b2:	f103 0301 	add.w	r3, r3, #1
 80183b6:	dc03      	bgt.n	80183c0 <_strtod_l+0x260>
 80183b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80183ba:	434f      	muls	r7, r1
 80183bc:	9709      	str	r7, [sp, #36]	; 0x24
 80183be:	e7e1      	b.n	8018384 <_strtod_l+0x224>
 80183c0:	2b10      	cmp	r3, #16
 80183c2:	bfd8      	it	le
 80183c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80183c8:	e7dc      	b.n	8018384 <_strtod_l+0x224>
 80183ca:	2e10      	cmp	r6, #16
 80183cc:	bfdc      	itt	le
 80183ce:	230a      	movle	r3, #10
 80183d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80183d4:	e7e3      	b.n	801839e <_strtod_l+0x23e>
 80183d6:	2300      	movs	r3, #0
 80183d8:	9305      	str	r3, [sp, #20]
 80183da:	2301      	movs	r3, #1
 80183dc:	e780      	b.n	80182e0 <_strtod_l+0x180>
 80183de:	f04f 0c00 	mov.w	ip, #0
 80183e2:	1caa      	adds	r2, r5, #2
 80183e4:	9215      	str	r2, [sp, #84]	; 0x54
 80183e6:	78aa      	ldrb	r2, [r5, #2]
 80183e8:	e788      	b.n	80182fc <_strtod_l+0x19c>
 80183ea:	f04f 0c01 	mov.w	ip, #1
 80183ee:	e7f8      	b.n	80183e2 <_strtod_l+0x282>
 80183f0:	0801cec0 	.word	0x0801cec0
 80183f4:	0801cebc 	.word	0x0801cebc
 80183f8:	7ff00000 	.word	0x7ff00000
 80183fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80183fe:	1c51      	adds	r1, r2, #1
 8018400:	9115      	str	r1, [sp, #84]	; 0x54
 8018402:	7852      	ldrb	r2, [r2, #1]
 8018404:	2a30      	cmp	r2, #48	; 0x30
 8018406:	d0f9      	beq.n	80183fc <_strtod_l+0x29c>
 8018408:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801840c:	2908      	cmp	r1, #8
 801840e:	f63f af7a 	bhi.w	8018306 <_strtod_l+0x1a6>
 8018412:	3a30      	subs	r2, #48	; 0x30
 8018414:	9208      	str	r2, [sp, #32]
 8018416:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018418:	920c      	str	r2, [sp, #48]	; 0x30
 801841a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801841c:	1c57      	adds	r7, r2, #1
 801841e:	9715      	str	r7, [sp, #84]	; 0x54
 8018420:	7852      	ldrb	r2, [r2, #1]
 8018422:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8018426:	f1be 0f09 	cmp.w	lr, #9
 801842a:	d938      	bls.n	801849e <_strtod_l+0x33e>
 801842c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801842e:	1a7f      	subs	r7, r7, r1
 8018430:	2f08      	cmp	r7, #8
 8018432:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018436:	dc03      	bgt.n	8018440 <_strtod_l+0x2e0>
 8018438:	9908      	ldr	r1, [sp, #32]
 801843a:	428f      	cmp	r7, r1
 801843c:	bfa8      	it	ge
 801843e:	460f      	movge	r7, r1
 8018440:	f1bc 0f00 	cmp.w	ip, #0
 8018444:	d000      	beq.n	8018448 <_strtod_l+0x2e8>
 8018446:	427f      	negs	r7, r7
 8018448:	2e00      	cmp	r6, #0
 801844a:	d14f      	bne.n	80184ec <_strtod_l+0x38c>
 801844c:	9904      	ldr	r1, [sp, #16]
 801844e:	4301      	orrs	r1, r0
 8018450:	f47f aec1 	bne.w	80181d6 <_strtod_l+0x76>
 8018454:	2b00      	cmp	r3, #0
 8018456:	f47f aedb 	bne.w	8018210 <_strtod_l+0xb0>
 801845a:	2a69      	cmp	r2, #105	; 0x69
 801845c:	d029      	beq.n	80184b2 <_strtod_l+0x352>
 801845e:	dc26      	bgt.n	80184ae <_strtod_l+0x34e>
 8018460:	2a49      	cmp	r2, #73	; 0x49
 8018462:	d026      	beq.n	80184b2 <_strtod_l+0x352>
 8018464:	2a4e      	cmp	r2, #78	; 0x4e
 8018466:	f47f aed3 	bne.w	8018210 <_strtod_l+0xb0>
 801846a:	499b      	ldr	r1, [pc, #620]	; (80186d8 <_strtod_l+0x578>)
 801846c:	a815      	add	r0, sp, #84	; 0x54
 801846e:	f001 fa17 	bl	80198a0 <__match>
 8018472:	2800      	cmp	r0, #0
 8018474:	f43f aecc 	beq.w	8018210 <_strtod_l+0xb0>
 8018478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	2b28      	cmp	r3, #40	; 0x28
 801847e:	d12f      	bne.n	80184e0 <_strtod_l+0x380>
 8018480:	4996      	ldr	r1, [pc, #600]	; (80186dc <_strtod_l+0x57c>)
 8018482:	aa18      	add	r2, sp, #96	; 0x60
 8018484:	a815      	add	r0, sp, #84	; 0x54
 8018486:	f001 fa1f 	bl	80198c8 <__hexnan>
 801848a:	2805      	cmp	r0, #5
 801848c:	d128      	bne.n	80184e0 <_strtod_l+0x380>
 801848e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018494:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018498:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801849c:	e69b      	b.n	80181d6 <_strtod_l+0x76>
 801849e:	9f08      	ldr	r7, [sp, #32]
 80184a0:	210a      	movs	r1, #10
 80184a2:	fb01 2107 	mla	r1, r1, r7, r2
 80184a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80184aa:	9208      	str	r2, [sp, #32]
 80184ac:	e7b5      	b.n	801841a <_strtod_l+0x2ba>
 80184ae:	2a6e      	cmp	r2, #110	; 0x6e
 80184b0:	e7d9      	b.n	8018466 <_strtod_l+0x306>
 80184b2:	498b      	ldr	r1, [pc, #556]	; (80186e0 <_strtod_l+0x580>)
 80184b4:	a815      	add	r0, sp, #84	; 0x54
 80184b6:	f001 f9f3 	bl	80198a0 <__match>
 80184ba:	2800      	cmp	r0, #0
 80184bc:	f43f aea8 	beq.w	8018210 <_strtod_l+0xb0>
 80184c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184c2:	4988      	ldr	r1, [pc, #544]	; (80186e4 <_strtod_l+0x584>)
 80184c4:	3b01      	subs	r3, #1
 80184c6:	a815      	add	r0, sp, #84	; 0x54
 80184c8:	9315      	str	r3, [sp, #84]	; 0x54
 80184ca:	f001 f9e9 	bl	80198a0 <__match>
 80184ce:	b910      	cbnz	r0, 80184d6 <_strtod_l+0x376>
 80184d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184d2:	3301      	adds	r3, #1
 80184d4:	9315      	str	r3, [sp, #84]	; 0x54
 80184d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80186f4 <_strtod_l+0x594>
 80184da:	f04f 0800 	mov.w	r8, #0
 80184de:	e67a      	b.n	80181d6 <_strtod_l+0x76>
 80184e0:	4881      	ldr	r0, [pc, #516]	; (80186e8 <_strtod_l+0x588>)
 80184e2:	f000 fef9 	bl	80192d8 <nan>
 80184e6:	ec59 8b10 	vmov	r8, r9, d0
 80184ea:	e674      	b.n	80181d6 <_strtod_l+0x76>
 80184ec:	9b05      	ldr	r3, [sp, #20]
 80184ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184f0:	1afb      	subs	r3, r7, r3
 80184f2:	f1bb 0f00 	cmp.w	fp, #0
 80184f6:	bf08      	it	eq
 80184f8:	46b3      	moveq	fp, r6
 80184fa:	2e10      	cmp	r6, #16
 80184fc:	9308      	str	r3, [sp, #32]
 80184fe:	4635      	mov	r5, r6
 8018500:	bfa8      	it	ge
 8018502:	2510      	movge	r5, #16
 8018504:	f7e8 f826 	bl	8000554 <__aeabi_ui2d>
 8018508:	2e09      	cmp	r6, #9
 801850a:	4680      	mov	r8, r0
 801850c:	4689      	mov	r9, r1
 801850e:	dd13      	ble.n	8018538 <_strtod_l+0x3d8>
 8018510:	4b76      	ldr	r3, [pc, #472]	; (80186ec <_strtod_l+0x58c>)
 8018512:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018516:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801851a:	f7e8 f895 	bl	8000648 <__aeabi_dmul>
 801851e:	4680      	mov	r8, r0
 8018520:	4650      	mov	r0, sl
 8018522:	4689      	mov	r9, r1
 8018524:	f7e8 f816 	bl	8000554 <__aeabi_ui2d>
 8018528:	4602      	mov	r2, r0
 801852a:	460b      	mov	r3, r1
 801852c:	4640      	mov	r0, r8
 801852e:	4649      	mov	r1, r9
 8018530:	f7e7 fed4 	bl	80002dc <__adddf3>
 8018534:	4680      	mov	r8, r0
 8018536:	4689      	mov	r9, r1
 8018538:	2e0f      	cmp	r6, #15
 801853a:	dc38      	bgt.n	80185ae <_strtod_l+0x44e>
 801853c:	9b08      	ldr	r3, [sp, #32]
 801853e:	2b00      	cmp	r3, #0
 8018540:	f43f ae49 	beq.w	80181d6 <_strtod_l+0x76>
 8018544:	dd24      	ble.n	8018590 <_strtod_l+0x430>
 8018546:	2b16      	cmp	r3, #22
 8018548:	dc0b      	bgt.n	8018562 <_strtod_l+0x402>
 801854a:	4968      	ldr	r1, [pc, #416]	; (80186ec <_strtod_l+0x58c>)
 801854c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018554:	4642      	mov	r2, r8
 8018556:	464b      	mov	r3, r9
 8018558:	f7e8 f876 	bl	8000648 <__aeabi_dmul>
 801855c:	4680      	mov	r8, r0
 801855e:	4689      	mov	r9, r1
 8018560:	e639      	b.n	80181d6 <_strtod_l+0x76>
 8018562:	9a08      	ldr	r2, [sp, #32]
 8018564:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8018568:	4293      	cmp	r3, r2
 801856a:	db20      	blt.n	80185ae <_strtod_l+0x44e>
 801856c:	4c5f      	ldr	r4, [pc, #380]	; (80186ec <_strtod_l+0x58c>)
 801856e:	f1c6 060f 	rsb	r6, r6, #15
 8018572:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8018576:	4642      	mov	r2, r8
 8018578:	464b      	mov	r3, r9
 801857a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801857e:	f7e8 f863 	bl	8000648 <__aeabi_dmul>
 8018582:	9b08      	ldr	r3, [sp, #32]
 8018584:	1b9e      	subs	r6, r3, r6
 8018586:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801858a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801858e:	e7e3      	b.n	8018558 <_strtod_l+0x3f8>
 8018590:	9b08      	ldr	r3, [sp, #32]
 8018592:	3316      	adds	r3, #22
 8018594:	db0b      	blt.n	80185ae <_strtod_l+0x44e>
 8018596:	9b05      	ldr	r3, [sp, #20]
 8018598:	1bdf      	subs	r7, r3, r7
 801859a:	4b54      	ldr	r3, [pc, #336]	; (80186ec <_strtod_l+0x58c>)
 801859c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80185a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80185a4:	4640      	mov	r0, r8
 80185a6:	4649      	mov	r1, r9
 80185a8:	f7e8 f978 	bl	800089c <__aeabi_ddiv>
 80185ac:	e7d6      	b.n	801855c <_strtod_l+0x3fc>
 80185ae:	9b08      	ldr	r3, [sp, #32]
 80185b0:	1b75      	subs	r5, r6, r5
 80185b2:	441d      	add	r5, r3
 80185b4:	2d00      	cmp	r5, #0
 80185b6:	dd70      	ble.n	801869a <_strtod_l+0x53a>
 80185b8:	f015 030f 	ands.w	r3, r5, #15
 80185bc:	d00a      	beq.n	80185d4 <_strtod_l+0x474>
 80185be:	494b      	ldr	r1, [pc, #300]	; (80186ec <_strtod_l+0x58c>)
 80185c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80185c4:	4642      	mov	r2, r8
 80185c6:	464b      	mov	r3, r9
 80185c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185cc:	f7e8 f83c 	bl	8000648 <__aeabi_dmul>
 80185d0:	4680      	mov	r8, r0
 80185d2:	4689      	mov	r9, r1
 80185d4:	f035 050f 	bics.w	r5, r5, #15
 80185d8:	d04d      	beq.n	8018676 <_strtod_l+0x516>
 80185da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80185de:	dd22      	ble.n	8018626 <_strtod_l+0x4c6>
 80185e0:	2500      	movs	r5, #0
 80185e2:	46ab      	mov	fp, r5
 80185e4:	9509      	str	r5, [sp, #36]	; 0x24
 80185e6:	9505      	str	r5, [sp, #20]
 80185e8:	2322      	movs	r3, #34	; 0x22
 80185ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80186f4 <_strtod_l+0x594>
 80185ee:	6023      	str	r3, [r4, #0]
 80185f0:	f04f 0800 	mov.w	r8, #0
 80185f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	f43f aded 	beq.w	80181d6 <_strtod_l+0x76>
 80185fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80185fe:	4620      	mov	r0, r4
 8018600:	f7ff f924 	bl	801784c <_Bfree>
 8018604:	9905      	ldr	r1, [sp, #20]
 8018606:	4620      	mov	r0, r4
 8018608:	f7ff f920 	bl	801784c <_Bfree>
 801860c:	4659      	mov	r1, fp
 801860e:	4620      	mov	r0, r4
 8018610:	f7ff f91c 	bl	801784c <_Bfree>
 8018614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018616:	4620      	mov	r0, r4
 8018618:	f7ff f918 	bl	801784c <_Bfree>
 801861c:	4629      	mov	r1, r5
 801861e:	4620      	mov	r0, r4
 8018620:	f7ff f914 	bl	801784c <_Bfree>
 8018624:	e5d7      	b.n	80181d6 <_strtod_l+0x76>
 8018626:	4b32      	ldr	r3, [pc, #200]	; (80186f0 <_strtod_l+0x590>)
 8018628:	9304      	str	r3, [sp, #16]
 801862a:	2300      	movs	r3, #0
 801862c:	112d      	asrs	r5, r5, #4
 801862e:	4640      	mov	r0, r8
 8018630:	4649      	mov	r1, r9
 8018632:	469a      	mov	sl, r3
 8018634:	2d01      	cmp	r5, #1
 8018636:	dc21      	bgt.n	801867c <_strtod_l+0x51c>
 8018638:	b10b      	cbz	r3, 801863e <_strtod_l+0x4de>
 801863a:	4680      	mov	r8, r0
 801863c:	4689      	mov	r9, r1
 801863e:	492c      	ldr	r1, [pc, #176]	; (80186f0 <_strtod_l+0x590>)
 8018640:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018644:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018648:	4642      	mov	r2, r8
 801864a:	464b      	mov	r3, r9
 801864c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018650:	f7e7 fffa 	bl	8000648 <__aeabi_dmul>
 8018654:	4b27      	ldr	r3, [pc, #156]	; (80186f4 <_strtod_l+0x594>)
 8018656:	460a      	mov	r2, r1
 8018658:	400b      	ands	r3, r1
 801865a:	4927      	ldr	r1, [pc, #156]	; (80186f8 <_strtod_l+0x598>)
 801865c:	428b      	cmp	r3, r1
 801865e:	4680      	mov	r8, r0
 8018660:	d8be      	bhi.n	80185e0 <_strtod_l+0x480>
 8018662:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018666:	428b      	cmp	r3, r1
 8018668:	bf86      	itte	hi
 801866a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80186fc <_strtod_l+0x59c>
 801866e:	f04f 38ff 	movhi.w	r8, #4294967295
 8018672:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8018676:	2300      	movs	r3, #0
 8018678:	9304      	str	r3, [sp, #16]
 801867a:	e07b      	b.n	8018774 <_strtod_l+0x614>
 801867c:	07ea      	lsls	r2, r5, #31
 801867e:	d505      	bpl.n	801868c <_strtod_l+0x52c>
 8018680:	9b04      	ldr	r3, [sp, #16]
 8018682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018686:	f7e7 ffdf 	bl	8000648 <__aeabi_dmul>
 801868a:	2301      	movs	r3, #1
 801868c:	9a04      	ldr	r2, [sp, #16]
 801868e:	3208      	adds	r2, #8
 8018690:	f10a 0a01 	add.w	sl, sl, #1
 8018694:	106d      	asrs	r5, r5, #1
 8018696:	9204      	str	r2, [sp, #16]
 8018698:	e7cc      	b.n	8018634 <_strtod_l+0x4d4>
 801869a:	d0ec      	beq.n	8018676 <_strtod_l+0x516>
 801869c:	426d      	negs	r5, r5
 801869e:	f015 020f 	ands.w	r2, r5, #15
 80186a2:	d00a      	beq.n	80186ba <_strtod_l+0x55a>
 80186a4:	4b11      	ldr	r3, [pc, #68]	; (80186ec <_strtod_l+0x58c>)
 80186a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80186aa:	4640      	mov	r0, r8
 80186ac:	4649      	mov	r1, r9
 80186ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186b2:	f7e8 f8f3 	bl	800089c <__aeabi_ddiv>
 80186b6:	4680      	mov	r8, r0
 80186b8:	4689      	mov	r9, r1
 80186ba:	112d      	asrs	r5, r5, #4
 80186bc:	d0db      	beq.n	8018676 <_strtod_l+0x516>
 80186be:	2d1f      	cmp	r5, #31
 80186c0:	dd1e      	ble.n	8018700 <_strtod_l+0x5a0>
 80186c2:	2500      	movs	r5, #0
 80186c4:	46ab      	mov	fp, r5
 80186c6:	9509      	str	r5, [sp, #36]	; 0x24
 80186c8:	9505      	str	r5, [sp, #20]
 80186ca:	2322      	movs	r3, #34	; 0x22
 80186cc:	f04f 0800 	mov.w	r8, #0
 80186d0:	f04f 0900 	mov.w	r9, #0
 80186d4:	6023      	str	r3, [r4, #0]
 80186d6:	e78d      	b.n	80185f4 <_strtod_l+0x494>
 80186d8:	0801cca9 	.word	0x0801cca9
 80186dc:	0801ced4 	.word	0x0801ced4
 80186e0:	0801cca1 	.word	0x0801cca1
 80186e4:	0801ccd8 	.word	0x0801ccd8
 80186e8:	0801d065 	.word	0x0801d065
 80186ec:	0801cde8 	.word	0x0801cde8
 80186f0:	0801cdc0 	.word	0x0801cdc0
 80186f4:	7ff00000 	.word	0x7ff00000
 80186f8:	7ca00000 	.word	0x7ca00000
 80186fc:	7fefffff 	.word	0x7fefffff
 8018700:	f015 0310 	ands.w	r3, r5, #16
 8018704:	bf18      	it	ne
 8018706:	236a      	movne	r3, #106	; 0x6a
 8018708:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8018aac <_strtod_l+0x94c>
 801870c:	9304      	str	r3, [sp, #16]
 801870e:	4640      	mov	r0, r8
 8018710:	4649      	mov	r1, r9
 8018712:	2300      	movs	r3, #0
 8018714:	07ea      	lsls	r2, r5, #31
 8018716:	d504      	bpl.n	8018722 <_strtod_l+0x5c2>
 8018718:	e9da 2300 	ldrd	r2, r3, [sl]
 801871c:	f7e7 ff94 	bl	8000648 <__aeabi_dmul>
 8018720:	2301      	movs	r3, #1
 8018722:	106d      	asrs	r5, r5, #1
 8018724:	f10a 0a08 	add.w	sl, sl, #8
 8018728:	d1f4      	bne.n	8018714 <_strtod_l+0x5b4>
 801872a:	b10b      	cbz	r3, 8018730 <_strtod_l+0x5d0>
 801872c:	4680      	mov	r8, r0
 801872e:	4689      	mov	r9, r1
 8018730:	9b04      	ldr	r3, [sp, #16]
 8018732:	b1bb      	cbz	r3, 8018764 <_strtod_l+0x604>
 8018734:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018738:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801873c:	2b00      	cmp	r3, #0
 801873e:	4649      	mov	r1, r9
 8018740:	dd10      	ble.n	8018764 <_strtod_l+0x604>
 8018742:	2b1f      	cmp	r3, #31
 8018744:	f340 811e 	ble.w	8018984 <_strtod_l+0x824>
 8018748:	2b34      	cmp	r3, #52	; 0x34
 801874a:	bfde      	ittt	le
 801874c:	f04f 33ff 	movle.w	r3, #4294967295
 8018750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8018754:	4093      	lslle	r3, r2
 8018756:	f04f 0800 	mov.w	r8, #0
 801875a:	bfcc      	ite	gt
 801875c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018760:	ea03 0901 	andle.w	r9, r3, r1
 8018764:	2200      	movs	r2, #0
 8018766:	2300      	movs	r3, #0
 8018768:	4640      	mov	r0, r8
 801876a:	4649      	mov	r1, r9
 801876c:	f7e8 f9d4 	bl	8000b18 <__aeabi_dcmpeq>
 8018770:	2800      	cmp	r0, #0
 8018772:	d1a6      	bne.n	80186c2 <_strtod_l+0x562>
 8018774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018776:	9300      	str	r3, [sp, #0]
 8018778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801877a:	4633      	mov	r3, r6
 801877c:	465a      	mov	r2, fp
 801877e:	4620      	mov	r0, r4
 8018780:	f7ff f8cc 	bl	801791c <__s2b>
 8018784:	9009      	str	r0, [sp, #36]	; 0x24
 8018786:	2800      	cmp	r0, #0
 8018788:	f43f af2a 	beq.w	80185e0 <_strtod_l+0x480>
 801878c:	9a08      	ldr	r2, [sp, #32]
 801878e:	9b05      	ldr	r3, [sp, #20]
 8018790:	2a00      	cmp	r2, #0
 8018792:	eba3 0307 	sub.w	r3, r3, r7
 8018796:	bfa8      	it	ge
 8018798:	2300      	movge	r3, #0
 801879a:	930c      	str	r3, [sp, #48]	; 0x30
 801879c:	2500      	movs	r5, #0
 801879e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80187a2:	9312      	str	r3, [sp, #72]	; 0x48
 80187a4:	46ab      	mov	fp, r5
 80187a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187a8:	4620      	mov	r0, r4
 80187aa:	6859      	ldr	r1, [r3, #4]
 80187ac:	f7ff f80e 	bl	80177cc <_Balloc>
 80187b0:	9005      	str	r0, [sp, #20]
 80187b2:	2800      	cmp	r0, #0
 80187b4:	f43f af18 	beq.w	80185e8 <_strtod_l+0x488>
 80187b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187ba:	691a      	ldr	r2, [r3, #16]
 80187bc:	3202      	adds	r2, #2
 80187be:	f103 010c 	add.w	r1, r3, #12
 80187c2:	0092      	lsls	r2, r2, #2
 80187c4:	300c      	adds	r0, #12
 80187c6:	f7fe f870 	bl	80168aa <memcpy>
 80187ca:	ec49 8b10 	vmov	d0, r8, r9
 80187ce:	aa18      	add	r2, sp, #96	; 0x60
 80187d0:	a917      	add	r1, sp, #92	; 0x5c
 80187d2:	4620      	mov	r0, r4
 80187d4:	f7ff fbd6 	bl	8017f84 <__d2b>
 80187d8:	ec49 8b18 	vmov	d8, r8, r9
 80187dc:	9016      	str	r0, [sp, #88]	; 0x58
 80187de:	2800      	cmp	r0, #0
 80187e0:	f43f af02 	beq.w	80185e8 <_strtod_l+0x488>
 80187e4:	2101      	movs	r1, #1
 80187e6:	4620      	mov	r0, r4
 80187e8:	f7ff f930 	bl	8017a4c <__i2b>
 80187ec:	4683      	mov	fp, r0
 80187ee:	2800      	cmp	r0, #0
 80187f0:	f43f aefa 	beq.w	80185e8 <_strtod_l+0x488>
 80187f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80187f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80187f8:	2e00      	cmp	r6, #0
 80187fa:	bfab      	itete	ge
 80187fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80187fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8018800:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8018802:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8018806:	bfac      	ite	ge
 8018808:	eb06 0a03 	addge.w	sl, r6, r3
 801880c:	1b9f      	sublt	r7, r3, r6
 801880e:	9b04      	ldr	r3, [sp, #16]
 8018810:	1af6      	subs	r6, r6, r3
 8018812:	4416      	add	r6, r2
 8018814:	4ba0      	ldr	r3, [pc, #640]	; (8018a98 <_strtod_l+0x938>)
 8018816:	3e01      	subs	r6, #1
 8018818:	429e      	cmp	r6, r3
 801881a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801881e:	f280 80c4 	bge.w	80189aa <_strtod_l+0x84a>
 8018822:	1b9b      	subs	r3, r3, r6
 8018824:	2b1f      	cmp	r3, #31
 8018826:	eba2 0203 	sub.w	r2, r2, r3
 801882a:	f04f 0101 	mov.w	r1, #1
 801882e:	f300 80b0 	bgt.w	8018992 <_strtod_l+0x832>
 8018832:	fa01 f303 	lsl.w	r3, r1, r3
 8018836:	930e      	str	r3, [sp, #56]	; 0x38
 8018838:	2300      	movs	r3, #0
 801883a:	930d      	str	r3, [sp, #52]	; 0x34
 801883c:	eb0a 0602 	add.w	r6, sl, r2
 8018840:	9b04      	ldr	r3, [sp, #16]
 8018842:	45b2      	cmp	sl, r6
 8018844:	4417      	add	r7, r2
 8018846:	441f      	add	r7, r3
 8018848:	4653      	mov	r3, sl
 801884a:	bfa8      	it	ge
 801884c:	4633      	movge	r3, r6
 801884e:	42bb      	cmp	r3, r7
 8018850:	bfa8      	it	ge
 8018852:	463b      	movge	r3, r7
 8018854:	2b00      	cmp	r3, #0
 8018856:	bfc2      	ittt	gt
 8018858:	1af6      	subgt	r6, r6, r3
 801885a:	1aff      	subgt	r7, r7, r3
 801885c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8018860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018862:	2b00      	cmp	r3, #0
 8018864:	dd17      	ble.n	8018896 <_strtod_l+0x736>
 8018866:	4659      	mov	r1, fp
 8018868:	461a      	mov	r2, r3
 801886a:	4620      	mov	r0, r4
 801886c:	f7ff f9ae 	bl	8017bcc <__pow5mult>
 8018870:	4683      	mov	fp, r0
 8018872:	2800      	cmp	r0, #0
 8018874:	f43f aeb8 	beq.w	80185e8 <_strtod_l+0x488>
 8018878:	4601      	mov	r1, r0
 801887a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801887c:	4620      	mov	r0, r4
 801887e:	f7ff f8fb 	bl	8017a78 <__multiply>
 8018882:	900b      	str	r0, [sp, #44]	; 0x2c
 8018884:	2800      	cmp	r0, #0
 8018886:	f43f aeaf 	beq.w	80185e8 <_strtod_l+0x488>
 801888a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801888c:	4620      	mov	r0, r4
 801888e:	f7fe ffdd 	bl	801784c <_Bfree>
 8018892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018894:	9316      	str	r3, [sp, #88]	; 0x58
 8018896:	2e00      	cmp	r6, #0
 8018898:	f300 808c 	bgt.w	80189b4 <_strtod_l+0x854>
 801889c:	9b08      	ldr	r3, [sp, #32]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	dd08      	ble.n	80188b4 <_strtod_l+0x754>
 80188a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188a4:	9905      	ldr	r1, [sp, #20]
 80188a6:	4620      	mov	r0, r4
 80188a8:	f7ff f990 	bl	8017bcc <__pow5mult>
 80188ac:	9005      	str	r0, [sp, #20]
 80188ae:	2800      	cmp	r0, #0
 80188b0:	f43f ae9a 	beq.w	80185e8 <_strtod_l+0x488>
 80188b4:	2f00      	cmp	r7, #0
 80188b6:	dd08      	ble.n	80188ca <_strtod_l+0x76a>
 80188b8:	9905      	ldr	r1, [sp, #20]
 80188ba:	463a      	mov	r2, r7
 80188bc:	4620      	mov	r0, r4
 80188be:	f7ff f9df 	bl	8017c80 <__lshift>
 80188c2:	9005      	str	r0, [sp, #20]
 80188c4:	2800      	cmp	r0, #0
 80188c6:	f43f ae8f 	beq.w	80185e8 <_strtod_l+0x488>
 80188ca:	f1ba 0f00 	cmp.w	sl, #0
 80188ce:	dd08      	ble.n	80188e2 <_strtod_l+0x782>
 80188d0:	4659      	mov	r1, fp
 80188d2:	4652      	mov	r2, sl
 80188d4:	4620      	mov	r0, r4
 80188d6:	f7ff f9d3 	bl	8017c80 <__lshift>
 80188da:	4683      	mov	fp, r0
 80188dc:	2800      	cmp	r0, #0
 80188de:	f43f ae83 	beq.w	80185e8 <_strtod_l+0x488>
 80188e2:	9a05      	ldr	r2, [sp, #20]
 80188e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80188e6:	4620      	mov	r0, r4
 80188e8:	f7ff fa52 	bl	8017d90 <__mdiff>
 80188ec:	4605      	mov	r5, r0
 80188ee:	2800      	cmp	r0, #0
 80188f0:	f43f ae7a 	beq.w	80185e8 <_strtod_l+0x488>
 80188f4:	68c3      	ldr	r3, [r0, #12]
 80188f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80188f8:	2300      	movs	r3, #0
 80188fa:	60c3      	str	r3, [r0, #12]
 80188fc:	4659      	mov	r1, fp
 80188fe:	f7ff fa2b 	bl	8017d58 <__mcmp>
 8018902:	2800      	cmp	r0, #0
 8018904:	da60      	bge.n	80189c8 <_strtod_l+0x868>
 8018906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018908:	ea53 0308 	orrs.w	r3, r3, r8
 801890c:	f040 8084 	bne.w	8018a18 <_strtod_l+0x8b8>
 8018910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018914:	2b00      	cmp	r3, #0
 8018916:	d17f      	bne.n	8018a18 <_strtod_l+0x8b8>
 8018918:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801891c:	0d1b      	lsrs	r3, r3, #20
 801891e:	051b      	lsls	r3, r3, #20
 8018920:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018924:	d978      	bls.n	8018a18 <_strtod_l+0x8b8>
 8018926:	696b      	ldr	r3, [r5, #20]
 8018928:	b913      	cbnz	r3, 8018930 <_strtod_l+0x7d0>
 801892a:	692b      	ldr	r3, [r5, #16]
 801892c:	2b01      	cmp	r3, #1
 801892e:	dd73      	ble.n	8018a18 <_strtod_l+0x8b8>
 8018930:	4629      	mov	r1, r5
 8018932:	2201      	movs	r2, #1
 8018934:	4620      	mov	r0, r4
 8018936:	f7ff f9a3 	bl	8017c80 <__lshift>
 801893a:	4659      	mov	r1, fp
 801893c:	4605      	mov	r5, r0
 801893e:	f7ff fa0b 	bl	8017d58 <__mcmp>
 8018942:	2800      	cmp	r0, #0
 8018944:	dd68      	ble.n	8018a18 <_strtod_l+0x8b8>
 8018946:	9904      	ldr	r1, [sp, #16]
 8018948:	4a54      	ldr	r2, [pc, #336]	; (8018a9c <_strtod_l+0x93c>)
 801894a:	464b      	mov	r3, r9
 801894c:	2900      	cmp	r1, #0
 801894e:	f000 8084 	beq.w	8018a5a <_strtod_l+0x8fa>
 8018952:	ea02 0109 	and.w	r1, r2, r9
 8018956:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801895a:	dc7e      	bgt.n	8018a5a <_strtod_l+0x8fa>
 801895c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018960:	f77f aeb3 	ble.w	80186ca <_strtod_l+0x56a>
 8018964:	4b4e      	ldr	r3, [pc, #312]	; (8018aa0 <_strtod_l+0x940>)
 8018966:	4640      	mov	r0, r8
 8018968:	4649      	mov	r1, r9
 801896a:	2200      	movs	r2, #0
 801896c:	f7e7 fe6c 	bl	8000648 <__aeabi_dmul>
 8018970:	4b4a      	ldr	r3, [pc, #296]	; (8018a9c <_strtod_l+0x93c>)
 8018972:	400b      	ands	r3, r1
 8018974:	4680      	mov	r8, r0
 8018976:	4689      	mov	r9, r1
 8018978:	2b00      	cmp	r3, #0
 801897a:	f47f ae3f 	bne.w	80185fc <_strtod_l+0x49c>
 801897e:	2322      	movs	r3, #34	; 0x22
 8018980:	6023      	str	r3, [r4, #0]
 8018982:	e63b      	b.n	80185fc <_strtod_l+0x49c>
 8018984:	f04f 32ff 	mov.w	r2, #4294967295
 8018988:	fa02 f303 	lsl.w	r3, r2, r3
 801898c:	ea03 0808 	and.w	r8, r3, r8
 8018990:	e6e8      	b.n	8018764 <_strtod_l+0x604>
 8018992:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8018996:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801899a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801899e:	36e2      	adds	r6, #226	; 0xe2
 80189a0:	fa01 f306 	lsl.w	r3, r1, r6
 80189a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80189a8:	e748      	b.n	801883c <_strtod_l+0x6dc>
 80189aa:	2100      	movs	r1, #0
 80189ac:	2301      	movs	r3, #1
 80189ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80189b2:	e743      	b.n	801883c <_strtod_l+0x6dc>
 80189b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80189b6:	4632      	mov	r2, r6
 80189b8:	4620      	mov	r0, r4
 80189ba:	f7ff f961 	bl	8017c80 <__lshift>
 80189be:	9016      	str	r0, [sp, #88]	; 0x58
 80189c0:	2800      	cmp	r0, #0
 80189c2:	f47f af6b 	bne.w	801889c <_strtod_l+0x73c>
 80189c6:	e60f      	b.n	80185e8 <_strtod_l+0x488>
 80189c8:	46ca      	mov	sl, r9
 80189ca:	d171      	bne.n	8018ab0 <_strtod_l+0x950>
 80189cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80189d2:	b352      	cbz	r2, 8018a2a <_strtod_l+0x8ca>
 80189d4:	4a33      	ldr	r2, [pc, #204]	; (8018aa4 <_strtod_l+0x944>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d12a      	bne.n	8018a30 <_strtod_l+0x8d0>
 80189da:	9b04      	ldr	r3, [sp, #16]
 80189dc:	4641      	mov	r1, r8
 80189de:	b1fb      	cbz	r3, 8018a20 <_strtod_l+0x8c0>
 80189e0:	4b2e      	ldr	r3, [pc, #184]	; (8018a9c <_strtod_l+0x93c>)
 80189e2:	ea09 0303 	and.w	r3, r9, r3
 80189e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80189ea:	f04f 32ff 	mov.w	r2, #4294967295
 80189ee:	d81a      	bhi.n	8018a26 <_strtod_l+0x8c6>
 80189f0:	0d1b      	lsrs	r3, r3, #20
 80189f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80189f6:	fa02 f303 	lsl.w	r3, r2, r3
 80189fa:	4299      	cmp	r1, r3
 80189fc:	d118      	bne.n	8018a30 <_strtod_l+0x8d0>
 80189fe:	4b2a      	ldr	r3, [pc, #168]	; (8018aa8 <_strtod_l+0x948>)
 8018a00:	459a      	cmp	sl, r3
 8018a02:	d102      	bne.n	8018a0a <_strtod_l+0x8aa>
 8018a04:	3101      	adds	r1, #1
 8018a06:	f43f adef 	beq.w	80185e8 <_strtod_l+0x488>
 8018a0a:	4b24      	ldr	r3, [pc, #144]	; (8018a9c <_strtod_l+0x93c>)
 8018a0c:	ea0a 0303 	and.w	r3, sl, r3
 8018a10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018a14:	f04f 0800 	mov.w	r8, #0
 8018a18:	9b04      	ldr	r3, [sp, #16]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d1a2      	bne.n	8018964 <_strtod_l+0x804>
 8018a1e:	e5ed      	b.n	80185fc <_strtod_l+0x49c>
 8018a20:	f04f 33ff 	mov.w	r3, #4294967295
 8018a24:	e7e9      	b.n	80189fa <_strtod_l+0x89a>
 8018a26:	4613      	mov	r3, r2
 8018a28:	e7e7      	b.n	80189fa <_strtod_l+0x89a>
 8018a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8018a2e:	d08a      	beq.n	8018946 <_strtod_l+0x7e6>
 8018a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a32:	b1e3      	cbz	r3, 8018a6e <_strtod_l+0x90e>
 8018a34:	ea13 0f0a 	tst.w	r3, sl
 8018a38:	d0ee      	beq.n	8018a18 <_strtod_l+0x8b8>
 8018a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a3c:	9a04      	ldr	r2, [sp, #16]
 8018a3e:	4640      	mov	r0, r8
 8018a40:	4649      	mov	r1, r9
 8018a42:	b1c3      	cbz	r3, 8018a76 <_strtod_l+0x916>
 8018a44:	f7ff fb6f 	bl	8018126 <sulp>
 8018a48:	4602      	mov	r2, r0
 8018a4a:	460b      	mov	r3, r1
 8018a4c:	ec51 0b18 	vmov	r0, r1, d8
 8018a50:	f7e7 fc44 	bl	80002dc <__adddf3>
 8018a54:	4680      	mov	r8, r0
 8018a56:	4689      	mov	r9, r1
 8018a58:	e7de      	b.n	8018a18 <_strtod_l+0x8b8>
 8018a5a:	4013      	ands	r3, r2
 8018a5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018a60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8018a64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8018a68:	f04f 38ff 	mov.w	r8, #4294967295
 8018a6c:	e7d4      	b.n	8018a18 <_strtod_l+0x8b8>
 8018a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a70:	ea13 0f08 	tst.w	r3, r8
 8018a74:	e7e0      	b.n	8018a38 <_strtod_l+0x8d8>
 8018a76:	f7ff fb56 	bl	8018126 <sulp>
 8018a7a:	4602      	mov	r2, r0
 8018a7c:	460b      	mov	r3, r1
 8018a7e:	ec51 0b18 	vmov	r0, r1, d8
 8018a82:	f7e7 fc29 	bl	80002d8 <__aeabi_dsub>
 8018a86:	2200      	movs	r2, #0
 8018a88:	2300      	movs	r3, #0
 8018a8a:	4680      	mov	r8, r0
 8018a8c:	4689      	mov	r9, r1
 8018a8e:	f7e8 f843 	bl	8000b18 <__aeabi_dcmpeq>
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d0c0      	beq.n	8018a18 <_strtod_l+0x8b8>
 8018a96:	e618      	b.n	80186ca <_strtod_l+0x56a>
 8018a98:	fffffc02 	.word	0xfffffc02
 8018a9c:	7ff00000 	.word	0x7ff00000
 8018aa0:	39500000 	.word	0x39500000
 8018aa4:	000fffff 	.word	0x000fffff
 8018aa8:	7fefffff 	.word	0x7fefffff
 8018aac:	0801cee8 	.word	0x0801cee8
 8018ab0:	4659      	mov	r1, fp
 8018ab2:	4628      	mov	r0, r5
 8018ab4:	f7ff fac0 	bl	8018038 <__ratio>
 8018ab8:	ec57 6b10 	vmov	r6, r7, d0
 8018abc:	ee10 0a10 	vmov	r0, s0
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018ac6:	4639      	mov	r1, r7
 8018ac8:	f7e8 f83a 	bl	8000b40 <__aeabi_dcmple>
 8018acc:	2800      	cmp	r0, #0
 8018ace:	d071      	beq.n	8018bb4 <_strtod_l+0xa54>
 8018ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d17c      	bne.n	8018bd0 <_strtod_l+0xa70>
 8018ad6:	f1b8 0f00 	cmp.w	r8, #0
 8018ada:	d15a      	bne.n	8018b92 <_strtod_l+0xa32>
 8018adc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d15d      	bne.n	8018ba0 <_strtod_l+0xa40>
 8018ae4:	4b90      	ldr	r3, [pc, #576]	; (8018d28 <_strtod_l+0xbc8>)
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	4630      	mov	r0, r6
 8018aea:	4639      	mov	r1, r7
 8018aec:	f7e8 f81e 	bl	8000b2c <__aeabi_dcmplt>
 8018af0:	2800      	cmp	r0, #0
 8018af2:	d15c      	bne.n	8018bae <_strtod_l+0xa4e>
 8018af4:	4630      	mov	r0, r6
 8018af6:	4639      	mov	r1, r7
 8018af8:	4b8c      	ldr	r3, [pc, #560]	; (8018d2c <_strtod_l+0xbcc>)
 8018afa:	2200      	movs	r2, #0
 8018afc:	f7e7 fda4 	bl	8000648 <__aeabi_dmul>
 8018b00:	4606      	mov	r6, r0
 8018b02:	460f      	mov	r7, r1
 8018b04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018b08:	9606      	str	r6, [sp, #24]
 8018b0a:	9307      	str	r3, [sp, #28]
 8018b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8018b14:	4b86      	ldr	r3, [pc, #536]	; (8018d30 <_strtod_l+0xbd0>)
 8018b16:	ea0a 0303 	and.w	r3, sl, r3
 8018b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8018b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b1e:	4b85      	ldr	r3, [pc, #532]	; (8018d34 <_strtod_l+0xbd4>)
 8018b20:	429a      	cmp	r2, r3
 8018b22:	f040 8090 	bne.w	8018c46 <_strtod_l+0xae6>
 8018b26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8018b2a:	ec49 8b10 	vmov	d0, r8, r9
 8018b2e:	f7ff f9b9 	bl	8017ea4 <__ulp>
 8018b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b36:	ec51 0b10 	vmov	r0, r1, d0
 8018b3a:	f7e7 fd85 	bl	8000648 <__aeabi_dmul>
 8018b3e:	4642      	mov	r2, r8
 8018b40:	464b      	mov	r3, r9
 8018b42:	f7e7 fbcb 	bl	80002dc <__adddf3>
 8018b46:	460b      	mov	r3, r1
 8018b48:	4979      	ldr	r1, [pc, #484]	; (8018d30 <_strtod_l+0xbd0>)
 8018b4a:	4a7b      	ldr	r2, [pc, #492]	; (8018d38 <_strtod_l+0xbd8>)
 8018b4c:	4019      	ands	r1, r3
 8018b4e:	4291      	cmp	r1, r2
 8018b50:	4680      	mov	r8, r0
 8018b52:	d944      	bls.n	8018bde <_strtod_l+0xa7e>
 8018b54:	ee18 2a90 	vmov	r2, s17
 8018b58:	4b78      	ldr	r3, [pc, #480]	; (8018d3c <_strtod_l+0xbdc>)
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d104      	bne.n	8018b68 <_strtod_l+0xa08>
 8018b5e:	ee18 3a10 	vmov	r3, s16
 8018b62:	3301      	adds	r3, #1
 8018b64:	f43f ad40 	beq.w	80185e8 <_strtod_l+0x488>
 8018b68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8018d3c <_strtod_l+0xbdc>
 8018b6c:	f04f 38ff 	mov.w	r8, #4294967295
 8018b70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b72:	4620      	mov	r0, r4
 8018b74:	f7fe fe6a 	bl	801784c <_Bfree>
 8018b78:	9905      	ldr	r1, [sp, #20]
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	f7fe fe66 	bl	801784c <_Bfree>
 8018b80:	4659      	mov	r1, fp
 8018b82:	4620      	mov	r0, r4
 8018b84:	f7fe fe62 	bl	801784c <_Bfree>
 8018b88:	4629      	mov	r1, r5
 8018b8a:	4620      	mov	r0, r4
 8018b8c:	f7fe fe5e 	bl	801784c <_Bfree>
 8018b90:	e609      	b.n	80187a6 <_strtod_l+0x646>
 8018b92:	f1b8 0f01 	cmp.w	r8, #1
 8018b96:	d103      	bne.n	8018ba0 <_strtod_l+0xa40>
 8018b98:	f1b9 0f00 	cmp.w	r9, #0
 8018b9c:	f43f ad95 	beq.w	80186ca <_strtod_l+0x56a>
 8018ba0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8018cf8 <_strtod_l+0xb98>
 8018ba4:	4f60      	ldr	r7, [pc, #384]	; (8018d28 <_strtod_l+0xbc8>)
 8018ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018baa:	2600      	movs	r6, #0
 8018bac:	e7ae      	b.n	8018b0c <_strtod_l+0x9ac>
 8018bae:	4f5f      	ldr	r7, [pc, #380]	; (8018d2c <_strtod_l+0xbcc>)
 8018bb0:	2600      	movs	r6, #0
 8018bb2:	e7a7      	b.n	8018b04 <_strtod_l+0x9a4>
 8018bb4:	4b5d      	ldr	r3, [pc, #372]	; (8018d2c <_strtod_l+0xbcc>)
 8018bb6:	4630      	mov	r0, r6
 8018bb8:	4639      	mov	r1, r7
 8018bba:	2200      	movs	r2, #0
 8018bbc:	f7e7 fd44 	bl	8000648 <__aeabi_dmul>
 8018bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018bc2:	4606      	mov	r6, r0
 8018bc4:	460f      	mov	r7, r1
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d09c      	beq.n	8018b04 <_strtod_l+0x9a4>
 8018bca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018bce:	e79d      	b.n	8018b0c <_strtod_l+0x9ac>
 8018bd0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8018d00 <_strtod_l+0xba0>
 8018bd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018bd8:	ec57 6b17 	vmov	r6, r7, d7
 8018bdc:	e796      	b.n	8018b0c <_strtod_l+0x9ac>
 8018bde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8018be2:	9b04      	ldr	r3, [sp, #16]
 8018be4:	46ca      	mov	sl, r9
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d1c2      	bne.n	8018b70 <_strtod_l+0xa10>
 8018bea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018bf0:	0d1b      	lsrs	r3, r3, #20
 8018bf2:	051b      	lsls	r3, r3, #20
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d1bb      	bne.n	8018b70 <_strtod_l+0xa10>
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	4639      	mov	r1, r7
 8018bfc:	f7e8 f884 	bl	8000d08 <__aeabi_d2lz>
 8018c00:	f7e7 fcf4 	bl	80005ec <__aeabi_l2d>
 8018c04:	4602      	mov	r2, r0
 8018c06:	460b      	mov	r3, r1
 8018c08:	4630      	mov	r0, r6
 8018c0a:	4639      	mov	r1, r7
 8018c0c:	f7e7 fb64 	bl	80002d8 <__aeabi_dsub>
 8018c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018c16:	ea43 0308 	orr.w	r3, r3, r8
 8018c1a:	4313      	orrs	r3, r2
 8018c1c:	4606      	mov	r6, r0
 8018c1e:	460f      	mov	r7, r1
 8018c20:	d054      	beq.n	8018ccc <_strtod_l+0xb6c>
 8018c22:	a339      	add	r3, pc, #228	; (adr r3, 8018d08 <_strtod_l+0xba8>)
 8018c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c28:	f7e7 ff80 	bl	8000b2c <__aeabi_dcmplt>
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	f47f ace5 	bne.w	80185fc <_strtod_l+0x49c>
 8018c32:	a337      	add	r3, pc, #220	; (adr r3, 8018d10 <_strtod_l+0xbb0>)
 8018c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c38:	4630      	mov	r0, r6
 8018c3a:	4639      	mov	r1, r7
 8018c3c:	f7e7 ff94 	bl	8000b68 <__aeabi_dcmpgt>
 8018c40:	2800      	cmp	r0, #0
 8018c42:	d095      	beq.n	8018b70 <_strtod_l+0xa10>
 8018c44:	e4da      	b.n	80185fc <_strtod_l+0x49c>
 8018c46:	9b04      	ldr	r3, [sp, #16]
 8018c48:	b333      	cbz	r3, 8018c98 <_strtod_l+0xb38>
 8018c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018c50:	d822      	bhi.n	8018c98 <_strtod_l+0xb38>
 8018c52:	a331      	add	r3, pc, #196	; (adr r3, 8018d18 <_strtod_l+0xbb8>)
 8018c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c58:	4630      	mov	r0, r6
 8018c5a:	4639      	mov	r1, r7
 8018c5c:	f7e7 ff70 	bl	8000b40 <__aeabi_dcmple>
 8018c60:	b1a0      	cbz	r0, 8018c8c <_strtod_l+0xb2c>
 8018c62:	4639      	mov	r1, r7
 8018c64:	4630      	mov	r0, r6
 8018c66:	f7e7 ffc7 	bl	8000bf8 <__aeabi_d2uiz>
 8018c6a:	2801      	cmp	r0, #1
 8018c6c:	bf38      	it	cc
 8018c6e:	2001      	movcc	r0, #1
 8018c70:	f7e7 fc70 	bl	8000554 <__aeabi_ui2d>
 8018c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c76:	4606      	mov	r6, r0
 8018c78:	460f      	mov	r7, r1
 8018c7a:	bb23      	cbnz	r3, 8018cc6 <_strtod_l+0xb66>
 8018c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018c80:	9010      	str	r0, [sp, #64]	; 0x40
 8018c82:	9311      	str	r3, [sp, #68]	; 0x44
 8018c84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018c88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8018c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018c90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018c94:	1a9b      	subs	r3, r3, r2
 8018c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8018ca0:	eef0 0a68 	vmov.f32	s1, s17
 8018ca4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018ca8:	f7ff f8fc 	bl	8017ea4 <__ulp>
 8018cac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018cb0:	ec53 2b10 	vmov	r2, r3, d0
 8018cb4:	f7e7 fcc8 	bl	8000648 <__aeabi_dmul>
 8018cb8:	ec53 2b18 	vmov	r2, r3, d8
 8018cbc:	f7e7 fb0e 	bl	80002dc <__adddf3>
 8018cc0:	4680      	mov	r8, r0
 8018cc2:	4689      	mov	r9, r1
 8018cc4:	e78d      	b.n	8018be2 <_strtod_l+0xa82>
 8018cc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8018cca:	e7db      	b.n	8018c84 <_strtod_l+0xb24>
 8018ccc:	a314      	add	r3, pc, #80	; (adr r3, 8018d20 <_strtod_l+0xbc0>)
 8018cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cd2:	f7e7 ff2b 	bl	8000b2c <__aeabi_dcmplt>
 8018cd6:	e7b3      	b.n	8018c40 <_strtod_l+0xae0>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	930a      	str	r3, [sp, #40]	; 0x28
 8018cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ce0:	6013      	str	r3, [r2, #0]
 8018ce2:	f7ff ba7c 	b.w	80181de <_strtod_l+0x7e>
 8018ce6:	2a65      	cmp	r2, #101	; 0x65
 8018ce8:	f43f ab75 	beq.w	80183d6 <_strtod_l+0x276>
 8018cec:	2a45      	cmp	r2, #69	; 0x45
 8018cee:	f43f ab72 	beq.w	80183d6 <_strtod_l+0x276>
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	f7ff bbaa 	b.w	801844c <_strtod_l+0x2ec>
 8018cf8:	00000000 	.word	0x00000000
 8018cfc:	bff00000 	.word	0xbff00000
 8018d00:	00000000 	.word	0x00000000
 8018d04:	3ff00000 	.word	0x3ff00000
 8018d08:	94a03595 	.word	0x94a03595
 8018d0c:	3fdfffff 	.word	0x3fdfffff
 8018d10:	35afe535 	.word	0x35afe535
 8018d14:	3fe00000 	.word	0x3fe00000
 8018d18:	ffc00000 	.word	0xffc00000
 8018d1c:	41dfffff 	.word	0x41dfffff
 8018d20:	94a03595 	.word	0x94a03595
 8018d24:	3fcfffff 	.word	0x3fcfffff
 8018d28:	3ff00000 	.word	0x3ff00000
 8018d2c:	3fe00000 	.word	0x3fe00000
 8018d30:	7ff00000 	.word	0x7ff00000
 8018d34:	7fe00000 	.word	0x7fe00000
 8018d38:	7c9fffff 	.word	0x7c9fffff
 8018d3c:	7fefffff 	.word	0x7fefffff

08018d40 <_strtod_r>:
 8018d40:	4b01      	ldr	r3, [pc, #4]	; (8018d48 <_strtod_r+0x8>)
 8018d42:	f7ff ba0d 	b.w	8018160 <_strtod_l>
 8018d46:	bf00      	nop
 8018d48:	200003d4 	.word	0x200003d4

08018d4c <_strtol_l.constprop.0>:
 8018d4c:	2b01      	cmp	r3, #1
 8018d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d52:	d001      	beq.n	8018d58 <_strtol_l.constprop.0+0xc>
 8018d54:	2b24      	cmp	r3, #36	; 0x24
 8018d56:	d906      	bls.n	8018d66 <_strtol_l.constprop.0+0x1a>
 8018d58:	f7fd fd7a 	bl	8016850 <__errno>
 8018d5c:	2316      	movs	r3, #22
 8018d5e:	6003      	str	r3, [r0, #0]
 8018d60:	2000      	movs	r0, #0
 8018d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018e4c <_strtol_l.constprop.0+0x100>
 8018d6a:	460d      	mov	r5, r1
 8018d6c:	462e      	mov	r6, r5
 8018d6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d72:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018d76:	f017 0708 	ands.w	r7, r7, #8
 8018d7a:	d1f7      	bne.n	8018d6c <_strtol_l.constprop.0+0x20>
 8018d7c:	2c2d      	cmp	r4, #45	; 0x2d
 8018d7e:	d132      	bne.n	8018de6 <_strtol_l.constprop.0+0x9a>
 8018d80:	782c      	ldrb	r4, [r5, #0]
 8018d82:	2701      	movs	r7, #1
 8018d84:	1cb5      	adds	r5, r6, #2
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d05b      	beq.n	8018e42 <_strtol_l.constprop.0+0xf6>
 8018d8a:	2b10      	cmp	r3, #16
 8018d8c:	d109      	bne.n	8018da2 <_strtol_l.constprop.0+0x56>
 8018d8e:	2c30      	cmp	r4, #48	; 0x30
 8018d90:	d107      	bne.n	8018da2 <_strtol_l.constprop.0+0x56>
 8018d92:	782c      	ldrb	r4, [r5, #0]
 8018d94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018d98:	2c58      	cmp	r4, #88	; 0x58
 8018d9a:	d14d      	bne.n	8018e38 <_strtol_l.constprop.0+0xec>
 8018d9c:	786c      	ldrb	r4, [r5, #1]
 8018d9e:	2310      	movs	r3, #16
 8018da0:	3502      	adds	r5, #2
 8018da2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018da6:	f108 38ff 	add.w	r8, r8, #4294967295
 8018daa:	f04f 0e00 	mov.w	lr, #0
 8018dae:	fbb8 f9f3 	udiv	r9, r8, r3
 8018db2:	4676      	mov	r6, lr
 8018db4:	fb03 8a19 	mls	sl, r3, r9, r8
 8018db8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018dbc:	f1bc 0f09 	cmp.w	ip, #9
 8018dc0:	d816      	bhi.n	8018df0 <_strtol_l.constprop.0+0xa4>
 8018dc2:	4664      	mov	r4, ip
 8018dc4:	42a3      	cmp	r3, r4
 8018dc6:	dd24      	ble.n	8018e12 <_strtol_l.constprop.0+0xc6>
 8018dc8:	f1be 3fff 	cmp.w	lr, #4294967295
 8018dcc:	d008      	beq.n	8018de0 <_strtol_l.constprop.0+0x94>
 8018dce:	45b1      	cmp	r9, r6
 8018dd0:	d31c      	bcc.n	8018e0c <_strtol_l.constprop.0+0xc0>
 8018dd2:	d101      	bne.n	8018dd8 <_strtol_l.constprop.0+0x8c>
 8018dd4:	45a2      	cmp	sl, r4
 8018dd6:	db19      	blt.n	8018e0c <_strtol_l.constprop.0+0xc0>
 8018dd8:	fb06 4603 	mla	r6, r6, r3, r4
 8018ddc:	f04f 0e01 	mov.w	lr, #1
 8018de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018de4:	e7e8      	b.n	8018db8 <_strtol_l.constprop.0+0x6c>
 8018de6:	2c2b      	cmp	r4, #43	; 0x2b
 8018de8:	bf04      	itt	eq
 8018dea:	782c      	ldrbeq	r4, [r5, #0]
 8018dec:	1cb5      	addeq	r5, r6, #2
 8018dee:	e7ca      	b.n	8018d86 <_strtol_l.constprop.0+0x3a>
 8018df0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018df4:	f1bc 0f19 	cmp.w	ip, #25
 8018df8:	d801      	bhi.n	8018dfe <_strtol_l.constprop.0+0xb2>
 8018dfa:	3c37      	subs	r4, #55	; 0x37
 8018dfc:	e7e2      	b.n	8018dc4 <_strtol_l.constprop.0+0x78>
 8018dfe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018e02:	f1bc 0f19 	cmp.w	ip, #25
 8018e06:	d804      	bhi.n	8018e12 <_strtol_l.constprop.0+0xc6>
 8018e08:	3c57      	subs	r4, #87	; 0x57
 8018e0a:	e7db      	b.n	8018dc4 <_strtol_l.constprop.0+0x78>
 8018e0c:	f04f 3eff 	mov.w	lr, #4294967295
 8018e10:	e7e6      	b.n	8018de0 <_strtol_l.constprop.0+0x94>
 8018e12:	f1be 3fff 	cmp.w	lr, #4294967295
 8018e16:	d105      	bne.n	8018e24 <_strtol_l.constprop.0+0xd8>
 8018e18:	2322      	movs	r3, #34	; 0x22
 8018e1a:	6003      	str	r3, [r0, #0]
 8018e1c:	4646      	mov	r6, r8
 8018e1e:	b942      	cbnz	r2, 8018e32 <_strtol_l.constprop.0+0xe6>
 8018e20:	4630      	mov	r0, r6
 8018e22:	e79e      	b.n	8018d62 <_strtol_l.constprop.0+0x16>
 8018e24:	b107      	cbz	r7, 8018e28 <_strtol_l.constprop.0+0xdc>
 8018e26:	4276      	negs	r6, r6
 8018e28:	2a00      	cmp	r2, #0
 8018e2a:	d0f9      	beq.n	8018e20 <_strtol_l.constprop.0+0xd4>
 8018e2c:	f1be 0f00 	cmp.w	lr, #0
 8018e30:	d000      	beq.n	8018e34 <_strtol_l.constprop.0+0xe8>
 8018e32:	1e69      	subs	r1, r5, #1
 8018e34:	6011      	str	r1, [r2, #0]
 8018e36:	e7f3      	b.n	8018e20 <_strtol_l.constprop.0+0xd4>
 8018e38:	2430      	movs	r4, #48	; 0x30
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d1b1      	bne.n	8018da2 <_strtol_l.constprop.0+0x56>
 8018e3e:	2308      	movs	r3, #8
 8018e40:	e7af      	b.n	8018da2 <_strtol_l.constprop.0+0x56>
 8018e42:	2c30      	cmp	r4, #48	; 0x30
 8018e44:	d0a5      	beq.n	8018d92 <_strtol_l.constprop.0+0x46>
 8018e46:	230a      	movs	r3, #10
 8018e48:	e7ab      	b.n	8018da2 <_strtol_l.constprop.0+0x56>
 8018e4a:	bf00      	nop
 8018e4c:	0801cf11 	.word	0x0801cf11

08018e50 <_strtol_r>:
 8018e50:	f7ff bf7c 	b.w	8018d4c <_strtol_l.constprop.0>

08018e54 <__ssputs_r>:
 8018e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e58:	688e      	ldr	r6, [r1, #8]
 8018e5a:	461f      	mov	r7, r3
 8018e5c:	42be      	cmp	r6, r7
 8018e5e:	680b      	ldr	r3, [r1, #0]
 8018e60:	4682      	mov	sl, r0
 8018e62:	460c      	mov	r4, r1
 8018e64:	4690      	mov	r8, r2
 8018e66:	d82c      	bhi.n	8018ec2 <__ssputs_r+0x6e>
 8018e68:	898a      	ldrh	r2, [r1, #12]
 8018e6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e6e:	d026      	beq.n	8018ebe <__ssputs_r+0x6a>
 8018e70:	6965      	ldr	r5, [r4, #20]
 8018e72:	6909      	ldr	r1, [r1, #16]
 8018e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e78:	eba3 0901 	sub.w	r9, r3, r1
 8018e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018e80:	1c7b      	adds	r3, r7, #1
 8018e82:	444b      	add	r3, r9
 8018e84:	106d      	asrs	r5, r5, #1
 8018e86:	429d      	cmp	r5, r3
 8018e88:	bf38      	it	cc
 8018e8a:	461d      	movcc	r5, r3
 8018e8c:	0553      	lsls	r3, r2, #21
 8018e8e:	d527      	bpl.n	8018ee0 <__ssputs_r+0x8c>
 8018e90:	4629      	mov	r1, r5
 8018e92:	f7fe fc0f 	bl	80176b4 <_malloc_r>
 8018e96:	4606      	mov	r6, r0
 8018e98:	b360      	cbz	r0, 8018ef4 <__ssputs_r+0xa0>
 8018e9a:	6921      	ldr	r1, [r4, #16]
 8018e9c:	464a      	mov	r2, r9
 8018e9e:	f7fd fd04 	bl	80168aa <memcpy>
 8018ea2:	89a3      	ldrh	r3, [r4, #12]
 8018ea4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018eac:	81a3      	strh	r3, [r4, #12]
 8018eae:	6126      	str	r6, [r4, #16]
 8018eb0:	6165      	str	r5, [r4, #20]
 8018eb2:	444e      	add	r6, r9
 8018eb4:	eba5 0509 	sub.w	r5, r5, r9
 8018eb8:	6026      	str	r6, [r4, #0]
 8018eba:	60a5      	str	r5, [r4, #8]
 8018ebc:	463e      	mov	r6, r7
 8018ebe:	42be      	cmp	r6, r7
 8018ec0:	d900      	bls.n	8018ec4 <__ssputs_r+0x70>
 8018ec2:	463e      	mov	r6, r7
 8018ec4:	6820      	ldr	r0, [r4, #0]
 8018ec6:	4632      	mov	r2, r6
 8018ec8:	4641      	mov	r1, r8
 8018eca:	f000 f9c9 	bl	8019260 <memmove>
 8018ece:	68a3      	ldr	r3, [r4, #8]
 8018ed0:	1b9b      	subs	r3, r3, r6
 8018ed2:	60a3      	str	r3, [r4, #8]
 8018ed4:	6823      	ldr	r3, [r4, #0]
 8018ed6:	4433      	add	r3, r6
 8018ed8:	6023      	str	r3, [r4, #0]
 8018eda:	2000      	movs	r0, #0
 8018edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ee0:	462a      	mov	r2, r5
 8018ee2:	f000 fd9e 	bl	8019a22 <_realloc_r>
 8018ee6:	4606      	mov	r6, r0
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	d1e0      	bne.n	8018eae <__ssputs_r+0x5a>
 8018eec:	6921      	ldr	r1, [r4, #16]
 8018eee:	4650      	mov	r0, sl
 8018ef0:	f7fe fb6c 	bl	80175cc <_free_r>
 8018ef4:	230c      	movs	r3, #12
 8018ef6:	f8ca 3000 	str.w	r3, [sl]
 8018efa:	89a3      	ldrh	r3, [r4, #12]
 8018efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f00:	81a3      	strh	r3, [r4, #12]
 8018f02:	f04f 30ff 	mov.w	r0, #4294967295
 8018f06:	e7e9      	b.n	8018edc <__ssputs_r+0x88>

08018f08 <_svfiprintf_r>:
 8018f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f0c:	4698      	mov	r8, r3
 8018f0e:	898b      	ldrh	r3, [r1, #12]
 8018f10:	061b      	lsls	r3, r3, #24
 8018f12:	b09d      	sub	sp, #116	; 0x74
 8018f14:	4607      	mov	r7, r0
 8018f16:	460d      	mov	r5, r1
 8018f18:	4614      	mov	r4, r2
 8018f1a:	d50e      	bpl.n	8018f3a <_svfiprintf_r+0x32>
 8018f1c:	690b      	ldr	r3, [r1, #16]
 8018f1e:	b963      	cbnz	r3, 8018f3a <_svfiprintf_r+0x32>
 8018f20:	2140      	movs	r1, #64	; 0x40
 8018f22:	f7fe fbc7 	bl	80176b4 <_malloc_r>
 8018f26:	6028      	str	r0, [r5, #0]
 8018f28:	6128      	str	r0, [r5, #16]
 8018f2a:	b920      	cbnz	r0, 8018f36 <_svfiprintf_r+0x2e>
 8018f2c:	230c      	movs	r3, #12
 8018f2e:	603b      	str	r3, [r7, #0]
 8018f30:	f04f 30ff 	mov.w	r0, #4294967295
 8018f34:	e0d0      	b.n	80190d8 <_svfiprintf_r+0x1d0>
 8018f36:	2340      	movs	r3, #64	; 0x40
 8018f38:	616b      	str	r3, [r5, #20]
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8018f3e:	2320      	movs	r3, #32
 8018f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f48:	2330      	movs	r3, #48	; 0x30
 8018f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80190f0 <_svfiprintf_r+0x1e8>
 8018f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f52:	f04f 0901 	mov.w	r9, #1
 8018f56:	4623      	mov	r3, r4
 8018f58:	469a      	mov	sl, r3
 8018f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f5e:	b10a      	cbz	r2, 8018f64 <_svfiprintf_r+0x5c>
 8018f60:	2a25      	cmp	r2, #37	; 0x25
 8018f62:	d1f9      	bne.n	8018f58 <_svfiprintf_r+0x50>
 8018f64:	ebba 0b04 	subs.w	fp, sl, r4
 8018f68:	d00b      	beq.n	8018f82 <_svfiprintf_r+0x7a>
 8018f6a:	465b      	mov	r3, fp
 8018f6c:	4622      	mov	r2, r4
 8018f6e:	4629      	mov	r1, r5
 8018f70:	4638      	mov	r0, r7
 8018f72:	f7ff ff6f 	bl	8018e54 <__ssputs_r>
 8018f76:	3001      	adds	r0, #1
 8018f78:	f000 80a9 	beq.w	80190ce <_svfiprintf_r+0x1c6>
 8018f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f7e:	445a      	add	r2, fp
 8018f80:	9209      	str	r2, [sp, #36]	; 0x24
 8018f82:	f89a 3000 	ldrb.w	r3, [sl]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	f000 80a1 	beq.w	80190ce <_svfiprintf_r+0x1c6>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8018f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f96:	f10a 0a01 	add.w	sl, sl, #1
 8018f9a:	9304      	str	r3, [sp, #16]
 8018f9c:	9307      	str	r3, [sp, #28]
 8018f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8018fa4:	4654      	mov	r4, sl
 8018fa6:	2205      	movs	r2, #5
 8018fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fac:	4850      	ldr	r0, [pc, #320]	; (80190f0 <_svfiprintf_r+0x1e8>)
 8018fae:	f7e7 f937 	bl	8000220 <memchr>
 8018fb2:	9a04      	ldr	r2, [sp, #16]
 8018fb4:	b9d8      	cbnz	r0, 8018fee <_svfiprintf_r+0xe6>
 8018fb6:	06d0      	lsls	r0, r2, #27
 8018fb8:	bf44      	itt	mi
 8018fba:	2320      	movmi	r3, #32
 8018fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fc0:	0711      	lsls	r1, r2, #28
 8018fc2:	bf44      	itt	mi
 8018fc4:	232b      	movmi	r3, #43	; 0x2b
 8018fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fca:	f89a 3000 	ldrb.w	r3, [sl]
 8018fce:	2b2a      	cmp	r3, #42	; 0x2a
 8018fd0:	d015      	beq.n	8018ffe <_svfiprintf_r+0xf6>
 8018fd2:	9a07      	ldr	r2, [sp, #28]
 8018fd4:	4654      	mov	r4, sl
 8018fd6:	2000      	movs	r0, #0
 8018fd8:	f04f 0c0a 	mov.w	ip, #10
 8018fdc:	4621      	mov	r1, r4
 8018fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018fe2:	3b30      	subs	r3, #48	; 0x30
 8018fe4:	2b09      	cmp	r3, #9
 8018fe6:	d94d      	bls.n	8019084 <_svfiprintf_r+0x17c>
 8018fe8:	b1b0      	cbz	r0, 8019018 <_svfiprintf_r+0x110>
 8018fea:	9207      	str	r2, [sp, #28]
 8018fec:	e014      	b.n	8019018 <_svfiprintf_r+0x110>
 8018fee:	eba0 0308 	sub.w	r3, r0, r8
 8018ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8018ff6:	4313      	orrs	r3, r2
 8018ff8:	9304      	str	r3, [sp, #16]
 8018ffa:	46a2      	mov	sl, r4
 8018ffc:	e7d2      	b.n	8018fa4 <_svfiprintf_r+0x9c>
 8018ffe:	9b03      	ldr	r3, [sp, #12]
 8019000:	1d19      	adds	r1, r3, #4
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	9103      	str	r1, [sp, #12]
 8019006:	2b00      	cmp	r3, #0
 8019008:	bfbb      	ittet	lt
 801900a:	425b      	neglt	r3, r3
 801900c:	f042 0202 	orrlt.w	r2, r2, #2
 8019010:	9307      	strge	r3, [sp, #28]
 8019012:	9307      	strlt	r3, [sp, #28]
 8019014:	bfb8      	it	lt
 8019016:	9204      	strlt	r2, [sp, #16]
 8019018:	7823      	ldrb	r3, [r4, #0]
 801901a:	2b2e      	cmp	r3, #46	; 0x2e
 801901c:	d10c      	bne.n	8019038 <_svfiprintf_r+0x130>
 801901e:	7863      	ldrb	r3, [r4, #1]
 8019020:	2b2a      	cmp	r3, #42	; 0x2a
 8019022:	d134      	bne.n	801908e <_svfiprintf_r+0x186>
 8019024:	9b03      	ldr	r3, [sp, #12]
 8019026:	1d1a      	adds	r2, r3, #4
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	9203      	str	r2, [sp, #12]
 801902c:	2b00      	cmp	r3, #0
 801902e:	bfb8      	it	lt
 8019030:	f04f 33ff 	movlt.w	r3, #4294967295
 8019034:	3402      	adds	r4, #2
 8019036:	9305      	str	r3, [sp, #20]
 8019038:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019100 <_svfiprintf_r+0x1f8>
 801903c:	7821      	ldrb	r1, [r4, #0]
 801903e:	2203      	movs	r2, #3
 8019040:	4650      	mov	r0, sl
 8019042:	f7e7 f8ed 	bl	8000220 <memchr>
 8019046:	b138      	cbz	r0, 8019058 <_svfiprintf_r+0x150>
 8019048:	9b04      	ldr	r3, [sp, #16]
 801904a:	eba0 000a 	sub.w	r0, r0, sl
 801904e:	2240      	movs	r2, #64	; 0x40
 8019050:	4082      	lsls	r2, r0
 8019052:	4313      	orrs	r3, r2
 8019054:	3401      	adds	r4, #1
 8019056:	9304      	str	r3, [sp, #16]
 8019058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801905c:	4825      	ldr	r0, [pc, #148]	; (80190f4 <_svfiprintf_r+0x1ec>)
 801905e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019062:	2206      	movs	r2, #6
 8019064:	f7e7 f8dc 	bl	8000220 <memchr>
 8019068:	2800      	cmp	r0, #0
 801906a:	d038      	beq.n	80190de <_svfiprintf_r+0x1d6>
 801906c:	4b22      	ldr	r3, [pc, #136]	; (80190f8 <_svfiprintf_r+0x1f0>)
 801906e:	bb1b      	cbnz	r3, 80190b8 <_svfiprintf_r+0x1b0>
 8019070:	9b03      	ldr	r3, [sp, #12]
 8019072:	3307      	adds	r3, #7
 8019074:	f023 0307 	bic.w	r3, r3, #7
 8019078:	3308      	adds	r3, #8
 801907a:	9303      	str	r3, [sp, #12]
 801907c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801907e:	4433      	add	r3, r6
 8019080:	9309      	str	r3, [sp, #36]	; 0x24
 8019082:	e768      	b.n	8018f56 <_svfiprintf_r+0x4e>
 8019084:	fb0c 3202 	mla	r2, ip, r2, r3
 8019088:	460c      	mov	r4, r1
 801908a:	2001      	movs	r0, #1
 801908c:	e7a6      	b.n	8018fdc <_svfiprintf_r+0xd4>
 801908e:	2300      	movs	r3, #0
 8019090:	3401      	adds	r4, #1
 8019092:	9305      	str	r3, [sp, #20]
 8019094:	4619      	mov	r1, r3
 8019096:	f04f 0c0a 	mov.w	ip, #10
 801909a:	4620      	mov	r0, r4
 801909c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190a0:	3a30      	subs	r2, #48	; 0x30
 80190a2:	2a09      	cmp	r2, #9
 80190a4:	d903      	bls.n	80190ae <_svfiprintf_r+0x1a6>
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d0c6      	beq.n	8019038 <_svfiprintf_r+0x130>
 80190aa:	9105      	str	r1, [sp, #20]
 80190ac:	e7c4      	b.n	8019038 <_svfiprintf_r+0x130>
 80190ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80190b2:	4604      	mov	r4, r0
 80190b4:	2301      	movs	r3, #1
 80190b6:	e7f0      	b.n	801909a <_svfiprintf_r+0x192>
 80190b8:	ab03      	add	r3, sp, #12
 80190ba:	9300      	str	r3, [sp, #0]
 80190bc:	462a      	mov	r2, r5
 80190be:	4b0f      	ldr	r3, [pc, #60]	; (80190fc <_svfiprintf_r+0x1f4>)
 80190c0:	a904      	add	r1, sp, #16
 80190c2:	4638      	mov	r0, r7
 80190c4:	f7fc fc76 	bl	80159b4 <_printf_float>
 80190c8:	1c42      	adds	r2, r0, #1
 80190ca:	4606      	mov	r6, r0
 80190cc:	d1d6      	bne.n	801907c <_svfiprintf_r+0x174>
 80190ce:	89ab      	ldrh	r3, [r5, #12]
 80190d0:	065b      	lsls	r3, r3, #25
 80190d2:	f53f af2d 	bmi.w	8018f30 <_svfiprintf_r+0x28>
 80190d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80190d8:	b01d      	add	sp, #116	; 0x74
 80190da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190de:	ab03      	add	r3, sp, #12
 80190e0:	9300      	str	r3, [sp, #0]
 80190e2:	462a      	mov	r2, r5
 80190e4:	4b05      	ldr	r3, [pc, #20]	; (80190fc <_svfiprintf_r+0x1f4>)
 80190e6:	a904      	add	r1, sp, #16
 80190e8:	4638      	mov	r0, r7
 80190ea:	f7fc ff07 	bl	8015efc <_printf_i>
 80190ee:	e7eb      	b.n	80190c8 <_svfiprintf_r+0x1c0>
 80190f0:	0801d011 	.word	0x0801d011
 80190f4:	0801d01b 	.word	0x0801d01b
 80190f8:	080159b5 	.word	0x080159b5
 80190fc:	08018e55 	.word	0x08018e55
 8019100:	0801d017 	.word	0x0801d017

08019104 <__sflush_r>:
 8019104:	898a      	ldrh	r2, [r1, #12]
 8019106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801910a:	4605      	mov	r5, r0
 801910c:	0710      	lsls	r0, r2, #28
 801910e:	460c      	mov	r4, r1
 8019110:	d458      	bmi.n	80191c4 <__sflush_r+0xc0>
 8019112:	684b      	ldr	r3, [r1, #4]
 8019114:	2b00      	cmp	r3, #0
 8019116:	dc05      	bgt.n	8019124 <__sflush_r+0x20>
 8019118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801911a:	2b00      	cmp	r3, #0
 801911c:	dc02      	bgt.n	8019124 <__sflush_r+0x20>
 801911e:	2000      	movs	r0, #0
 8019120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019126:	2e00      	cmp	r6, #0
 8019128:	d0f9      	beq.n	801911e <__sflush_r+0x1a>
 801912a:	2300      	movs	r3, #0
 801912c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019130:	682f      	ldr	r7, [r5, #0]
 8019132:	6a21      	ldr	r1, [r4, #32]
 8019134:	602b      	str	r3, [r5, #0]
 8019136:	d032      	beq.n	801919e <__sflush_r+0x9a>
 8019138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801913a:	89a3      	ldrh	r3, [r4, #12]
 801913c:	075a      	lsls	r2, r3, #29
 801913e:	d505      	bpl.n	801914c <__sflush_r+0x48>
 8019140:	6863      	ldr	r3, [r4, #4]
 8019142:	1ac0      	subs	r0, r0, r3
 8019144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019146:	b10b      	cbz	r3, 801914c <__sflush_r+0x48>
 8019148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801914a:	1ac0      	subs	r0, r0, r3
 801914c:	2300      	movs	r3, #0
 801914e:	4602      	mov	r2, r0
 8019150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019152:	6a21      	ldr	r1, [r4, #32]
 8019154:	4628      	mov	r0, r5
 8019156:	47b0      	blx	r6
 8019158:	1c43      	adds	r3, r0, #1
 801915a:	89a3      	ldrh	r3, [r4, #12]
 801915c:	d106      	bne.n	801916c <__sflush_r+0x68>
 801915e:	6829      	ldr	r1, [r5, #0]
 8019160:	291d      	cmp	r1, #29
 8019162:	d82b      	bhi.n	80191bc <__sflush_r+0xb8>
 8019164:	4a29      	ldr	r2, [pc, #164]	; (801920c <__sflush_r+0x108>)
 8019166:	410a      	asrs	r2, r1
 8019168:	07d6      	lsls	r6, r2, #31
 801916a:	d427      	bmi.n	80191bc <__sflush_r+0xb8>
 801916c:	2200      	movs	r2, #0
 801916e:	6062      	str	r2, [r4, #4]
 8019170:	04d9      	lsls	r1, r3, #19
 8019172:	6922      	ldr	r2, [r4, #16]
 8019174:	6022      	str	r2, [r4, #0]
 8019176:	d504      	bpl.n	8019182 <__sflush_r+0x7e>
 8019178:	1c42      	adds	r2, r0, #1
 801917a:	d101      	bne.n	8019180 <__sflush_r+0x7c>
 801917c:	682b      	ldr	r3, [r5, #0]
 801917e:	b903      	cbnz	r3, 8019182 <__sflush_r+0x7e>
 8019180:	6560      	str	r0, [r4, #84]	; 0x54
 8019182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019184:	602f      	str	r7, [r5, #0]
 8019186:	2900      	cmp	r1, #0
 8019188:	d0c9      	beq.n	801911e <__sflush_r+0x1a>
 801918a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801918e:	4299      	cmp	r1, r3
 8019190:	d002      	beq.n	8019198 <__sflush_r+0x94>
 8019192:	4628      	mov	r0, r5
 8019194:	f7fe fa1a 	bl	80175cc <_free_r>
 8019198:	2000      	movs	r0, #0
 801919a:	6360      	str	r0, [r4, #52]	; 0x34
 801919c:	e7c0      	b.n	8019120 <__sflush_r+0x1c>
 801919e:	2301      	movs	r3, #1
 80191a0:	4628      	mov	r0, r5
 80191a2:	47b0      	blx	r6
 80191a4:	1c41      	adds	r1, r0, #1
 80191a6:	d1c8      	bne.n	801913a <__sflush_r+0x36>
 80191a8:	682b      	ldr	r3, [r5, #0]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d0c5      	beq.n	801913a <__sflush_r+0x36>
 80191ae:	2b1d      	cmp	r3, #29
 80191b0:	d001      	beq.n	80191b6 <__sflush_r+0xb2>
 80191b2:	2b16      	cmp	r3, #22
 80191b4:	d101      	bne.n	80191ba <__sflush_r+0xb6>
 80191b6:	602f      	str	r7, [r5, #0]
 80191b8:	e7b1      	b.n	801911e <__sflush_r+0x1a>
 80191ba:	89a3      	ldrh	r3, [r4, #12]
 80191bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191c0:	81a3      	strh	r3, [r4, #12]
 80191c2:	e7ad      	b.n	8019120 <__sflush_r+0x1c>
 80191c4:	690f      	ldr	r7, [r1, #16]
 80191c6:	2f00      	cmp	r7, #0
 80191c8:	d0a9      	beq.n	801911e <__sflush_r+0x1a>
 80191ca:	0793      	lsls	r3, r2, #30
 80191cc:	680e      	ldr	r6, [r1, #0]
 80191ce:	bf08      	it	eq
 80191d0:	694b      	ldreq	r3, [r1, #20]
 80191d2:	600f      	str	r7, [r1, #0]
 80191d4:	bf18      	it	ne
 80191d6:	2300      	movne	r3, #0
 80191d8:	eba6 0807 	sub.w	r8, r6, r7
 80191dc:	608b      	str	r3, [r1, #8]
 80191de:	f1b8 0f00 	cmp.w	r8, #0
 80191e2:	dd9c      	ble.n	801911e <__sflush_r+0x1a>
 80191e4:	6a21      	ldr	r1, [r4, #32]
 80191e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80191e8:	4643      	mov	r3, r8
 80191ea:	463a      	mov	r2, r7
 80191ec:	4628      	mov	r0, r5
 80191ee:	47b0      	blx	r6
 80191f0:	2800      	cmp	r0, #0
 80191f2:	dc06      	bgt.n	8019202 <__sflush_r+0xfe>
 80191f4:	89a3      	ldrh	r3, [r4, #12]
 80191f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191fa:	81a3      	strh	r3, [r4, #12]
 80191fc:	f04f 30ff 	mov.w	r0, #4294967295
 8019200:	e78e      	b.n	8019120 <__sflush_r+0x1c>
 8019202:	4407      	add	r7, r0
 8019204:	eba8 0800 	sub.w	r8, r8, r0
 8019208:	e7e9      	b.n	80191de <__sflush_r+0xda>
 801920a:	bf00      	nop
 801920c:	dfbffffe 	.word	0xdfbffffe

08019210 <_fflush_r>:
 8019210:	b538      	push	{r3, r4, r5, lr}
 8019212:	690b      	ldr	r3, [r1, #16]
 8019214:	4605      	mov	r5, r0
 8019216:	460c      	mov	r4, r1
 8019218:	b913      	cbnz	r3, 8019220 <_fflush_r+0x10>
 801921a:	2500      	movs	r5, #0
 801921c:	4628      	mov	r0, r5
 801921e:	bd38      	pop	{r3, r4, r5, pc}
 8019220:	b118      	cbz	r0, 801922a <_fflush_r+0x1a>
 8019222:	6a03      	ldr	r3, [r0, #32]
 8019224:	b90b      	cbnz	r3, 801922a <_fflush_r+0x1a>
 8019226:	f7fd fa27 	bl	8016678 <__sinit>
 801922a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d0f3      	beq.n	801921a <_fflush_r+0xa>
 8019232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019234:	07d0      	lsls	r0, r2, #31
 8019236:	d404      	bmi.n	8019242 <_fflush_r+0x32>
 8019238:	0599      	lsls	r1, r3, #22
 801923a:	d402      	bmi.n	8019242 <_fflush_r+0x32>
 801923c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801923e:	f7fd fb32 	bl	80168a6 <__retarget_lock_acquire_recursive>
 8019242:	4628      	mov	r0, r5
 8019244:	4621      	mov	r1, r4
 8019246:	f7ff ff5d 	bl	8019104 <__sflush_r>
 801924a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801924c:	07da      	lsls	r2, r3, #31
 801924e:	4605      	mov	r5, r0
 8019250:	d4e4      	bmi.n	801921c <_fflush_r+0xc>
 8019252:	89a3      	ldrh	r3, [r4, #12]
 8019254:	059b      	lsls	r3, r3, #22
 8019256:	d4e1      	bmi.n	801921c <_fflush_r+0xc>
 8019258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801925a:	f7fd fb25 	bl	80168a8 <__retarget_lock_release_recursive>
 801925e:	e7dd      	b.n	801921c <_fflush_r+0xc>

08019260 <memmove>:
 8019260:	4288      	cmp	r0, r1
 8019262:	b510      	push	{r4, lr}
 8019264:	eb01 0402 	add.w	r4, r1, r2
 8019268:	d902      	bls.n	8019270 <memmove+0x10>
 801926a:	4284      	cmp	r4, r0
 801926c:	4623      	mov	r3, r4
 801926e:	d807      	bhi.n	8019280 <memmove+0x20>
 8019270:	1e43      	subs	r3, r0, #1
 8019272:	42a1      	cmp	r1, r4
 8019274:	d008      	beq.n	8019288 <memmove+0x28>
 8019276:	f811 2b01 	ldrb.w	r2, [r1], #1
 801927a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801927e:	e7f8      	b.n	8019272 <memmove+0x12>
 8019280:	4402      	add	r2, r0
 8019282:	4601      	mov	r1, r0
 8019284:	428a      	cmp	r2, r1
 8019286:	d100      	bne.n	801928a <memmove+0x2a>
 8019288:	bd10      	pop	{r4, pc}
 801928a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801928e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019292:	e7f7      	b.n	8019284 <memmove+0x24>

08019294 <strncmp>:
 8019294:	b510      	push	{r4, lr}
 8019296:	b16a      	cbz	r2, 80192b4 <strncmp+0x20>
 8019298:	3901      	subs	r1, #1
 801929a:	1884      	adds	r4, r0, r2
 801929c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d103      	bne.n	80192b0 <strncmp+0x1c>
 80192a8:	42a0      	cmp	r0, r4
 80192aa:	d001      	beq.n	80192b0 <strncmp+0x1c>
 80192ac:	2a00      	cmp	r2, #0
 80192ae:	d1f5      	bne.n	801929c <strncmp+0x8>
 80192b0:	1ad0      	subs	r0, r2, r3
 80192b2:	bd10      	pop	{r4, pc}
 80192b4:	4610      	mov	r0, r2
 80192b6:	e7fc      	b.n	80192b2 <strncmp+0x1e>

080192b8 <_sbrk_r>:
 80192b8:	b538      	push	{r3, r4, r5, lr}
 80192ba:	4d06      	ldr	r5, [pc, #24]	; (80192d4 <_sbrk_r+0x1c>)
 80192bc:	2300      	movs	r3, #0
 80192be:	4604      	mov	r4, r0
 80192c0:	4608      	mov	r0, r1
 80192c2:	602b      	str	r3, [r5, #0]
 80192c4:	f7ec f84a 	bl	800535c <_sbrk>
 80192c8:	1c43      	adds	r3, r0, #1
 80192ca:	d102      	bne.n	80192d2 <_sbrk_r+0x1a>
 80192cc:	682b      	ldr	r3, [r5, #0]
 80192ce:	b103      	cbz	r3, 80192d2 <_sbrk_r+0x1a>
 80192d0:	6023      	str	r3, [r4, #0]
 80192d2:	bd38      	pop	{r3, r4, r5, pc}
 80192d4:	200033b8 	.word	0x200033b8

080192d8 <nan>:
 80192d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80192e0 <nan+0x8>
 80192dc:	4770      	bx	lr
 80192de:	bf00      	nop
 80192e0:	00000000 	.word	0x00000000
 80192e4:	7ff80000 	.word	0x7ff80000

080192e8 <__assert_func>:
 80192e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192ea:	4614      	mov	r4, r2
 80192ec:	461a      	mov	r2, r3
 80192ee:	4b09      	ldr	r3, [pc, #36]	; (8019314 <__assert_func+0x2c>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	4605      	mov	r5, r0
 80192f4:	68d8      	ldr	r0, [r3, #12]
 80192f6:	b14c      	cbz	r4, 801930c <__assert_func+0x24>
 80192f8:	4b07      	ldr	r3, [pc, #28]	; (8019318 <__assert_func+0x30>)
 80192fa:	9100      	str	r1, [sp, #0]
 80192fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019300:	4906      	ldr	r1, [pc, #24]	; (801931c <__assert_func+0x34>)
 8019302:	462b      	mov	r3, r5
 8019304:	f000 fbca 	bl	8019a9c <fiprintf>
 8019308:	f000 fbda 	bl	8019ac0 <abort>
 801930c:	4b04      	ldr	r3, [pc, #16]	; (8019320 <__assert_func+0x38>)
 801930e:	461c      	mov	r4, r3
 8019310:	e7f3      	b.n	80192fa <__assert_func+0x12>
 8019312:	bf00      	nop
 8019314:	200003d0 	.word	0x200003d0
 8019318:	0801d02a 	.word	0x0801d02a
 801931c:	0801d037 	.word	0x0801d037
 8019320:	0801d065 	.word	0x0801d065

08019324 <_calloc_r>:
 8019324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019326:	fba1 2402 	umull	r2, r4, r1, r2
 801932a:	b94c      	cbnz	r4, 8019340 <_calloc_r+0x1c>
 801932c:	4611      	mov	r1, r2
 801932e:	9201      	str	r2, [sp, #4]
 8019330:	f7fe f9c0 	bl	80176b4 <_malloc_r>
 8019334:	9a01      	ldr	r2, [sp, #4]
 8019336:	4605      	mov	r5, r0
 8019338:	b930      	cbnz	r0, 8019348 <_calloc_r+0x24>
 801933a:	4628      	mov	r0, r5
 801933c:	b003      	add	sp, #12
 801933e:	bd30      	pop	{r4, r5, pc}
 8019340:	220c      	movs	r2, #12
 8019342:	6002      	str	r2, [r0, #0]
 8019344:	2500      	movs	r5, #0
 8019346:	e7f8      	b.n	801933a <_calloc_r+0x16>
 8019348:	4621      	mov	r1, r4
 801934a:	f7fd fa2e 	bl	80167aa <memset>
 801934e:	e7f4      	b.n	801933a <_calloc_r+0x16>

08019350 <rshift>:
 8019350:	6903      	ldr	r3, [r0, #16]
 8019352:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801935a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801935e:	f100 0414 	add.w	r4, r0, #20
 8019362:	dd45      	ble.n	80193f0 <rshift+0xa0>
 8019364:	f011 011f 	ands.w	r1, r1, #31
 8019368:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801936c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019370:	d10c      	bne.n	801938c <rshift+0x3c>
 8019372:	f100 0710 	add.w	r7, r0, #16
 8019376:	4629      	mov	r1, r5
 8019378:	42b1      	cmp	r1, r6
 801937a:	d334      	bcc.n	80193e6 <rshift+0x96>
 801937c:	1a9b      	subs	r3, r3, r2
 801937e:	009b      	lsls	r3, r3, #2
 8019380:	1eea      	subs	r2, r5, #3
 8019382:	4296      	cmp	r6, r2
 8019384:	bf38      	it	cc
 8019386:	2300      	movcc	r3, #0
 8019388:	4423      	add	r3, r4
 801938a:	e015      	b.n	80193b8 <rshift+0x68>
 801938c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019390:	f1c1 0820 	rsb	r8, r1, #32
 8019394:	40cf      	lsrs	r7, r1
 8019396:	f105 0e04 	add.w	lr, r5, #4
 801939a:	46a1      	mov	r9, r4
 801939c:	4576      	cmp	r6, lr
 801939e:	46f4      	mov	ip, lr
 80193a0:	d815      	bhi.n	80193ce <rshift+0x7e>
 80193a2:	1a9a      	subs	r2, r3, r2
 80193a4:	0092      	lsls	r2, r2, #2
 80193a6:	3a04      	subs	r2, #4
 80193a8:	3501      	adds	r5, #1
 80193aa:	42ae      	cmp	r6, r5
 80193ac:	bf38      	it	cc
 80193ae:	2200      	movcc	r2, #0
 80193b0:	18a3      	adds	r3, r4, r2
 80193b2:	50a7      	str	r7, [r4, r2]
 80193b4:	b107      	cbz	r7, 80193b8 <rshift+0x68>
 80193b6:	3304      	adds	r3, #4
 80193b8:	1b1a      	subs	r2, r3, r4
 80193ba:	42a3      	cmp	r3, r4
 80193bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80193c0:	bf08      	it	eq
 80193c2:	2300      	moveq	r3, #0
 80193c4:	6102      	str	r2, [r0, #16]
 80193c6:	bf08      	it	eq
 80193c8:	6143      	streq	r3, [r0, #20]
 80193ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193ce:	f8dc c000 	ldr.w	ip, [ip]
 80193d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80193d6:	ea4c 0707 	orr.w	r7, ip, r7
 80193da:	f849 7b04 	str.w	r7, [r9], #4
 80193de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80193e2:	40cf      	lsrs	r7, r1
 80193e4:	e7da      	b.n	801939c <rshift+0x4c>
 80193e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80193ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80193ee:	e7c3      	b.n	8019378 <rshift+0x28>
 80193f0:	4623      	mov	r3, r4
 80193f2:	e7e1      	b.n	80193b8 <rshift+0x68>

080193f4 <__hexdig_fun>:
 80193f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80193f8:	2b09      	cmp	r3, #9
 80193fa:	d802      	bhi.n	8019402 <__hexdig_fun+0xe>
 80193fc:	3820      	subs	r0, #32
 80193fe:	b2c0      	uxtb	r0, r0
 8019400:	4770      	bx	lr
 8019402:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019406:	2b05      	cmp	r3, #5
 8019408:	d801      	bhi.n	801940e <__hexdig_fun+0x1a>
 801940a:	3847      	subs	r0, #71	; 0x47
 801940c:	e7f7      	b.n	80193fe <__hexdig_fun+0xa>
 801940e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019412:	2b05      	cmp	r3, #5
 8019414:	d801      	bhi.n	801941a <__hexdig_fun+0x26>
 8019416:	3827      	subs	r0, #39	; 0x27
 8019418:	e7f1      	b.n	80193fe <__hexdig_fun+0xa>
 801941a:	2000      	movs	r0, #0
 801941c:	4770      	bx	lr
	...

08019420 <__gethex>:
 8019420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019424:	4617      	mov	r7, r2
 8019426:	680a      	ldr	r2, [r1, #0]
 8019428:	b085      	sub	sp, #20
 801942a:	f102 0b02 	add.w	fp, r2, #2
 801942e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019432:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019436:	4681      	mov	r9, r0
 8019438:	468a      	mov	sl, r1
 801943a:	9302      	str	r3, [sp, #8]
 801943c:	32fe      	adds	r2, #254	; 0xfe
 801943e:	eb02 030b 	add.w	r3, r2, fp
 8019442:	46d8      	mov	r8, fp
 8019444:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8019448:	9301      	str	r3, [sp, #4]
 801944a:	2830      	cmp	r0, #48	; 0x30
 801944c:	d0f7      	beq.n	801943e <__gethex+0x1e>
 801944e:	f7ff ffd1 	bl	80193f4 <__hexdig_fun>
 8019452:	4604      	mov	r4, r0
 8019454:	2800      	cmp	r0, #0
 8019456:	d138      	bne.n	80194ca <__gethex+0xaa>
 8019458:	49a7      	ldr	r1, [pc, #668]	; (80196f8 <__gethex+0x2d8>)
 801945a:	2201      	movs	r2, #1
 801945c:	4640      	mov	r0, r8
 801945e:	f7ff ff19 	bl	8019294 <strncmp>
 8019462:	4606      	mov	r6, r0
 8019464:	2800      	cmp	r0, #0
 8019466:	d169      	bne.n	801953c <__gethex+0x11c>
 8019468:	f898 0001 	ldrb.w	r0, [r8, #1]
 801946c:	465d      	mov	r5, fp
 801946e:	f7ff ffc1 	bl	80193f4 <__hexdig_fun>
 8019472:	2800      	cmp	r0, #0
 8019474:	d064      	beq.n	8019540 <__gethex+0x120>
 8019476:	465a      	mov	r2, fp
 8019478:	7810      	ldrb	r0, [r2, #0]
 801947a:	2830      	cmp	r0, #48	; 0x30
 801947c:	4690      	mov	r8, r2
 801947e:	f102 0201 	add.w	r2, r2, #1
 8019482:	d0f9      	beq.n	8019478 <__gethex+0x58>
 8019484:	f7ff ffb6 	bl	80193f4 <__hexdig_fun>
 8019488:	2301      	movs	r3, #1
 801948a:	fab0 f480 	clz	r4, r0
 801948e:	0964      	lsrs	r4, r4, #5
 8019490:	465e      	mov	r6, fp
 8019492:	9301      	str	r3, [sp, #4]
 8019494:	4642      	mov	r2, r8
 8019496:	4615      	mov	r5, r2
 8019498:	3201      	adds	r2, #1
 801949a:	7828      	ldrb	r0, [r5, #0]
 801949c:	f7ff ffaa 	bl	80193f4 <__hexdig_fun>
 80194a0:	2800      	cmp	r0, #0
 80194a2:	d1f8      	bne.n	8019496 <__gethex+0x76>
 80194a4:	4994      	ldr	r1, [pc, #592]	; (80196f8 <__gethex+0x2d8>)
 80194a6:	2201      	movs	r2, #1
 80194a8:	4628      	mov	r0, r5
 80194aa:	f7ff fef3 	bl	8019294 <strncmp>
 80194ae:	b978      	cbnz	r0, 80194d0 <__gethex+0xb0>
 80194b0:	b946      	cbnz	r6, 80194c4 <__gethex+0xa4>
 80194b2:	1c6e      	adds	r6, r5, #1
 80194b4:	4632      	mov	r2, r6
 80194b6:	4615      	mov	r5, r2
 80194b8:	3201      	adds	r2, #1
 80194ba:	7828      	ldrb	r0, [r5, #0]
 80194bc:	f7ff ff9a 	bl	80193f4 <__hexdig_fun>
 80194c0:	2800      	cmp	r0, #0
 80194c2:	d1f8      	bne.n	80194b6 <__gethex+0x96>
 80194c4:	1b73      	subs	r3, r6, r5
 80194c6:	009e      	lsls	r6, r3, #2
 80194c8:	e004      	b.n	80194d4 <__gethex+0xb4>
 80194ca:	2400      	movs	r4, #0
 80194cc:	4626      	mov	r6, r4
 80194ce:	e7e1      	b.n	8019494 <__gethex+0x74>
 80194d0:	2e00      	cmp	r6, #0
 80194d2:	d1f7      	bne.n	80194c4 <__gethex+0xa4>
 80194d4:	782b      	ldrb	r3, [r5, #0]
 80194d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80194da:	2b50      	cmp	r3, #80	; 0x50
 80194dc:	d13d      	bne.n	801955a <__gethex+0x13a>
 80194de:	786b      	ldrb	r3, [r5, #1]
 80194e0:	2b2b      	cmp	r3, #43	; 0x2b
 80194e2:	d02f      	beq.n	8019544 <__gethex+0x124>
 80194e4:	2b2d      	cmp	r3, #45	; 0x2d
 80194e6:	d031      	beq.n	801954c <__gethex+0x12c>
 80194e8:	1c69      	adds	r1, r5, #1
 80194ea:	f04f 0b00 	mov.w	fp, #0
 80194ee:	7808      	ldrb	r0, [r1, #0]
 80194f0:	f7ff ff80 	bl	80193f4 <__hexdig_fun>
 80194f4:	1e42      	subs	r2, r0, #1
 80194f6:	b2d2      	uxtb	r2, r2
 80194f8:	2a18      	cmp	r2, #24
 80194fa:	d82e      	bhi.n	801955a <__gethex+0x13a>
 80194fc:	f1a0 0210 	sub.w	r2, r0, #16
 8019500:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019504:	f7ff ff76 	bl	80193f4 <__hexdig_fun>
 8019508:	f100 3cff 	add.w	ip, r0, #4294967295
 801950c:	fa5f fc8c 	uxtb.w	ip, ip
 8019510:	f1bc 0f18 	cmp.w	ip, #24
 8019514:	d91d      	bls.n	8019552 <__gethex+0x132>
 8019516:	f1bb 0f00 	cmp.w	fp, #0
 801951a:	d000      	beq.n	801951e <__gethex+0xfe>
 801951c:	4252      	negs	r2, r2
 801951e:	4416      	add	r6, r2
 8019520:	f8ca 1000 	str.w	r1, [sl]
 8019524:	b1dc      	cbz	r4, 801955e <__gethex+0x13e>
 8019526:	9b01      	ldr	r3, [sp, #4]
 8019528:	2b00      	cmp	r3, #0
 801952a:	bf14      	ite	ne
 801952c:	f04f 0800 	movne.w	r8, #0
 8019530:	f04f 0806 	moveq.w	r8, #6
 8019534:	4640      	mov	r0, r8
 8019536:	b005      	add	sp, #20
 8019538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801953c:	4645      	mov	r5, r8
 801953e:	4626      	mov	r6, r4
 8019540:	2401      	movs	r4, #1
 8019542:	e7c7      	b.n	80194d4 <__gethex+0xb4>
 8019544:	f04f 0b00 	mov.w	fp, #0
 8019548:	1ca9      	adds	r1, r5, #2
 801954a:	e7d0      	b.n	80194ee <__gethex+0xce>
 801954c:	f04f 0b01 	mov.w	fp, #1
 8019550:	e7fa      	b.n	8019548 <__gethex+0x128>
 8019552:	230a      	movs	r3, #10
 8019554:	fb03 0002 	mla	r0, r3, r2, r0
 8019558:	e7d0      	b.n	80194fc <__gethex+0xdc>
 801955a:	4629      	mov	r1, r5
 801955c:	e7e0      	b.n	8019520 <__gethex+0x100>
 801955e:	eba5 0308 	sub.w	r3, r5, r8
 8019562:	3b01      	subs	r3, #1
 8019564:	4621      	mov	r1, r4
 8019566:	2b07      	cmp	r3, #7
 8019568:	dc0a      	bgt.n	8019580 <__gethex+0x160>
 801956a:	4648      	mov	r0, r9
 801956c:	f7fe f92e 	bl	80177cc <_Balloc>
 8019570:	4604      	mov	r4, r0
 8019572:	b940      	cbnz	r0, 8019586 <__gethex+0x166>
 8019574:	4b61      	ldr	r3, [pc, #388]	; (80196fc <__gethex+0x2dc>)
 8019576:	4602      	mov	r2, r0
 8019578:	21e4      	movs	r1, #228	; 0xe4
 801957a:	4861      	ldr	r0, [pc, #388]	; (8019700 <__gethex+0x2e0>)
 801957c:	f7ff feb4 	bl	80192e8 <__assert_func>
 8019580:	3101      	adds	r1, #1
 8019582:	105b      	asrs	r3, r3, #1
 8019584:	e7ef      	b.n	8019566 <__gethex+0x146>
 8019586:	f100 0a14 	add.w	sl, r0, #20
 801958a:	2300      	movs	r3, #0
 801958c:	495a      	ldr	r1, [pc, #360]	; (80196f8 <__gethex+0x2d8>)
 801958e:	f8cd a004 	str.w	sl, [sp, #4]
 8019592:	469b      	mov	fp, r3
 8019594:	45a8      	cmp	r8, r5
 8019596:	d342      	bcc.n	801961e <__gethex+0x1fe>
 8019598:	9801      	ldr	r0, [sp, #4]
 801959a:	f840 bb04 	str.w	fp, [r0], #4
 801959e:	eba0 000a 	sub.w	r0, r0, sl
 80195a2:	1080      	asrs	r0, r0, #2
 80195a4:	6120      	str	r0, [r4, #16]
 80195a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80195aa:	4658      	mov	r0, fp
 80195ac:	f7fe fa00 	bl	80179b0 <__hi0bits>
 80195b0:	683d      	ldr	r5, [r7, #0]
 80195b2:	eba8 0000 	sub.w	r0, r8, r0
 80195b6:	42a8      	cmp	r0, r5
 80195b8:	dd59      	ble.n	801966e <__gethex+0x24e>
 80195ba:	eba0 0805 	sub.w	r8, r0, r5
 80195be:	4641      	mov	r1, r8
 80195c0:	4620      	mov	r0, r4
 80195c2:	f7fe fd8f 	bl	80180e4 <__any_on>
 80195c6:	4683      	mov	fp, r0
 80195c8:	b1b8      	cbz	r0, 80195fa <__gethex+0x1da>
 80195ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80195ce:	1159      	asrs	r1, r3, #5
 80195d0:	f003 021f 	and.w	r2, r3, #31
 80195d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80195d8:	f04f 0b01 	mov.w	fp, #1
 80195dc:	fa0b f202 	lsl.w	r2, fp, r2
 80195e0:	420a      	tst	r2, r1
 80195e2:	d00a      	beq.n	80195fa <__gethex+0x1da>
 80195e4:	455b      	cmp	r3, fp
 80195e6:	dd06      	ble.n	80195f6 <__gethex+0x1d6>
 80195e8:	f1a8 0102 	sub.w	r1, r8, #2
 80195ec:	4620      	mov	r0, r4
 80195ee:	f7fe fd79 	bl	80180e4 <__any_on>
 80195f2:	2800      	cmp	r0, #0
 80195f4:	d138      	bne.n	8019668 <__gethex+0x248>
 80195f6:	f04f 0b02 	mov.w	fp, #2
 80195fa:	4641      	mov	r1, r8
 80195fc:	4620      	mov	r0, r4
 80195fe:	f7ff fea7 	bl	8019350 <rshift>
 8019602:	4446      	add	r6, r8
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	42b3      	cmp	r3, r6
 8019608:	da41      	bge.n	801968e <__gethex+0x26e>
 801960a:	4621      	mov	r1, r4
 801960c:	4648      	mov	r0, r9
 801960e:	f7fe f91d 	bl	801784c <_Bfree>
 8019612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019614:	2300      	movs	r3, #0
 8019616:	6013      	str	r3, [r2, #0]
 8019618:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801961c:	e78a      	b.n	8019534 <__gethex+0x114>
 801961e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8019622:	2a2e      	cmp	r2, #46	; 0x2e
 8019624:	d014      	beq.n	8019650 <__gethex+0x230>
 8019626:	2b20      	cmp	r3, #32
 8019628:	d106      	bne.n	8019638 <__gethex+0x218>
 801962a:	9b01      	ldr	r3, [sp, #4]
 801962c:	f843 bb04 	str.w	fp, [r3], #4
 8019630:	f04f 0b00 	mov.w	fp, #0
 8019634:	9301      	str	r3, [sp, #4]
 8019636:	465b      	mov	r3, fp
 8019638:	7828      	ldrb	r0, [r5, #0]
 801963a:	9303      	str	r3, [sp, #12]
 801963c:	f7ff feda 	bl	80193f4 <__hexdig_fun>
 8019640:	9b03      	ldr	r3, [sp, #12]
 8019642:	f000 000f 	and.w	r0, r0, #15
 8019646:	4098      	lsls	r0, r3
 8019648:	ea4b 0b00 	orr.w	fp, fp, r0
 801964c:	3304      	adds	r3, #4
 801964e:	e7a1      	b.n	8019594 <__gethex+0x174>
 8019650:	45a8      	cmp	r8, r5
 8019652:	d8e8      	bhi.n	8019626 <__gethex+0x206>
 8019654:	2201      	movs	r2, #1
 8019656:	4628      	mov	r0, r5
 8019658:	9303      	str	r3, [sp, #12]
 801965a:	f7ff fe1b 	bl	8019294 <strncmp>
 801965e:	4926      	ldr	r1, [pc, #152]	; (80196f8 <__gethex+0x2d8>)
 8019660:	9b03      	ldr	r3, [sp, #12]
 8019662:	2800      	cmp	r0, #0
 8019664:	d1df      	bne.n	8019626 <__gethex+0x206>
 8019666:	e795      	b.n	8019594 <__gethex+0x174>
 8019668:	f04f 0b03 	mov.w	fp, #3
 801966c:	e7c5      	b.n	80195fa <__gethex+0x1da>
 801966e:	da0b      	bge.n	8019688 <__gethex+0x268>
 8019670:	eba5 0800 	sub.w	r8, r5, r0
 8019674:	4621      	mov	r1, r4
 8019676:	4642      	mov	r2, r8
 8019678:	4648      	mov	r0, r9
 801967a:	f7fe fb01 	bl	8017c80 <__lshift>
 801967e:	eba6 0608 	sub.w	r6, r6, r8
 8019682:	4604      	mov	r4, r0
 8019684:	f100 0a14 	add.w	sl, r0, #20
 8019688:	f04f 0b00 	mov.w	fp, #0
 801968c:	e7ba      	b.n	8019604 <__gethex+0x1e4>
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	42b3      	cmp	r3, r6
 8019692:	dd73      	ble.n	801977c <__gethex+0x35c>
 8019694:	1b9e      	subs	r6, r3, r6
 8019696:	42b5      	cmp	r5, r6
 8019698:	dc34      	bgt.n	8019704 <__gethex+0x2e4>
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	2b02      	cmp	r3, #2
 801969e:	d023      	beq.n	80196e8 <__gethex+0x2c8>
 80196a0:	2b03      	cmp	r3, #3
 80196a2:	d025      	beq.n	80196f0 <__gethex+0x2d0>
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d115      	bne.n	80196d4 <__gethex+0x2b4>
 80196a8:	42b5      	cmp	r5, r6
 80196aa:	d113      	bne.n	80196d4 <__gethex+0x2b4>
 80196ac:	2d01      	cmp	r5, #1
 80196ae:	d10b      	bne.n	80196c8 <__gethex+0x2a8>
 80196b0:	9a02      	ldr	r2, [sp, #8]
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	6013      	str	r3, [r2, #0]
 80196b6:	2301      	movs	r3, #1
 80196b8:	6123      	str	r3, [r4, #16]
 80196ba:	f8ca 3000 	str.w	r3, [sl]
 80196be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80196c4:	601c      	str	r4, [r3, #0]
 80196c6:	e735      	b.n	8019534 <__gethex+0x114>
 80196c8:	1e69      	subs	r1, r5, #1
 80196ca:	4620      	mov	r0, r4
 80196cc:	f7fe fd0a 	bl	80180e4 <__any_on>
 80196d0:	2800      	cmp	r0, #0
 80196d2:	d1ed      	bne.n	80196b0 <__gethex+0x290>
 80196d4:	4621      	mov	r1, r4
 80196d6:	4648      	mov	r0, r9
 80196d8:	f7fe f8b8 	bl	801784c <_Bfree>
 80196dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196de:	2300      	movs	r3, #0
 80196e0:	6013      	str	r3, [r2, #0]
 80196e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80196e6:	e725      	b.n	8019534 <__gethex+0x114>
 80196e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d1f2      	bne.n	80196d4 <__gethex+0x2b4>
 80196ee:	e7df      	b.n	80196b0 <__gethex+0x290>
 80196f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d1dc      	bne.n	80196b0 <__gethex+0x290>
 80196f6:	e7ed      	b.n	80196d4 <__gethex+0x2b4>
 80196f8:	0801cebc 	.word	0x0801cebc
 80196fc:	0801cd51 	.word	0x0801cd51
 8019700:	0801d066 	.word	0x0801d066
 8019704:	f106 38ff 	add.w	r8, r6, #4294967295
 8019708:	f1bb 0f00 	cmp.w	fp, #0
 801970c:	d133      	bne.n	8019776 <__gethex+0x356>
 801970e:	f1b8 0f00 	cmp.w	r8, #0
 8019712:	d004      	beq.n	801971e <__gethex+0x2fe>
 8019714:	4641      	mov	r1, r8
 8019716:	4620      	mov	r0, r4
 8019718:	f7fe fce4 	bl	80180e4 <__any_on>
 801971c:	4683      	mov	fp, r0
 801971e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8019722:	2301      	movs	r3, #1
 8019724:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019728:	f008 081f 	and.w	r8, r8, #31
 801972c:	fa03 f308 	lsl.w	r3, r3, r8
 8019730:	4213      	tst	r3, r2
 8019732:	4631      	mov	r1, r6
 8019734:	4620      	mov	r0, r4
 8019736:	bf18      	it	ne
 8019738:	f04b 0b02 	orrne.w	fp, fp, #2
 801973c:	1bad      	subs	r5, r5, r6
 801973e:	f7ff fe07 	bl	8019350 <rshift>
 8019742:	687e      	ldr	r6, [r7, #4]
 8019744:	f04f 0802 	mov.w	r8, #2
 8019748:	f1bb 0f00 	cmp.w	fp, #0
 801974c:	d04a      	beq.n	80197e4 <__gethex+0x3c4>
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	2b02      	cmp	r3, #2
 8019752:	d016      	beq.n	8019782 <__gethex+0x362>
 8019754:	2b03      	cmp	r3, #3
 8019756:	d018      	beq.n	801978a <__gethex+0x36a>
 8019758:	2b01      	cmp	r3, #1
 801975a:	d109      	bne.n	8019770 <__gethex+0x350>
 801975c:	f01b 0f02 	tst.w	fp, #2
 8019760:	d006      	beq.n	8019770 <__gethex+0x350>
 8019762:	f8da 3000 	ldr.w	r3, [sl]
 8019766:	ea4b 0b03 	orr.w	fp, fp, r3
 801976a:	f01b 0f01 	tst.w	fp, #1
 801976e:	d10f      	bne.n	8019790 <__gethex+0x370>
 8019770:	f048 0810 	orr.w	r8, r8, #16
 8019774:	e036      	b.n	80197e4 <__gethex+0x3c4>
 8019776:	f04f 0b01 	mov.w	fp, #1
 801977a:	e7d0      	b.n	801971e <__gethex+0x2fe>
 801977c:	f04f 0801 	mov.w	r8, #1
 8019780:	e7e2      	b.n	8019748 <__gethex+0x328>
 8019782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019784:	f1c3 0301 	rsb	r3, r3, #1
 8019788:	930f      	str	r3, [sp, #60]	; 0x3c
 801978a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801978c:	2b00      	cmp	r3, #0
 801978e:	d0ef      	beq.n	8019770 <__gethex+0x350>
 8019790:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019794:	f104 0214 	add.w	r2, r4, #20
 8019798:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801979c:	9301      	str	r3, [sp, #4]
 801979e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80197a2:	2300      	movs	r3, #0
 80197a4:	4694      	mov	ip, r2
 80197a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80197aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80197ae:	d01e      	beq.n	80197ee <__gethex+0x3ce>
 80197b0:	3101      	adds	r1, #1
 80197b2:	f8cc 1000 	str.w	r1, [ip]
 80197b6:	f1b8 0f02 	cmp.w	r8, #2
 80197ba:	f104 0214 	add.w	r2, r4, #20
 80197be:	d13d      	bne.n	801983c <__gethex+0x41c>
 80197c0:	683b      	ldr	r3, [r7, #0]
 80197c2:	3b01      	subs	r3, #1
 80197c4:	42ab      	cmp	r3, r5
 80197c6:	d10b      	bne.n	80197e0 <__gethex+0x3c0>
 80197c8:	1169      	asrs	r1, r5, #5
 80197ca:	2301      	movs	r3, #1
 80197cc:	f005 051f 	and.w	r5, r5, #31
 80197d0:	fa03 f505 	lsl.w	r5, r3, r5
 80197d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80197d8:	421d      	tst	r5, r3
 80197da:	bf18      	it	ne
 80197dc:	f04f 0801 	movne.w	r8, #1
 80197e0:	f048 0820 	orr.w	r8, r8, #32
 80197e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197e6:	601c      	str	r4, [r3, #0]
 80197e8:	9b02      	ldr	r3, [sp, #8]
 80197ea:	601e      	str	r6, [r3, #0]
 80197ec:	e6a2      	b.n	8019534 <__gethex+0x114>
 80197ee:	4290      	cmp	r0, r2
 80197f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80197f4:	d8d6      	bhi.n	80197a4 <__gethex+0x384>
 80197f6:	68a2      	ldr	r2, [r4, #8]
 80197f8:	4593      	cmp	fp, r2
 80197fa:	db17      	blt.n	801982c <__gethex+0x40c>
 80197fc:	6861      	ldr	r1, [r4, #4]
 80197fe:	4648      	mov	r0, r9
 8019800:	3101      	adds	r1, #1
 8019802:	f7fd ffe3 	bl	80177cc <_Balloc>
 8019806:	4682      	mov	sl, r0
 8019808:	b918      	cbnz	r0, 8019812 <__gethex+0x3f2>
 801980a:	4b1b      	ldr	r3, [pc, #108]	; (8019878 <__gethex+0x458>)
 801980c:	4602      	mov	r2, r0
 801980e:	2184      	movs	r1, #132	; 0x84
 8019810:	e6b3      	b.n	801957a <__gethex+0x15a>
 8019812:	6922      	ldr	r2, [r4, #16]
 8019814:	3202      	adds	r2, #2
 8019816:	f104 010c 	add.w	r1, r4, #12
 801981a:	0092      	lsls	r2, r2, #2
 801981c:	300c      	adds	r0, #12
 801981e:	f7fd f844 	bl	80168aa <memcpy>
 8019822:	4621      	mov	r1, r4
 8019824:	4648      	mov	r0, r9
 8019826:	f7fe f811 	bl	801784c <_Bfree>
 801982a:	4654      	mov	r4, sl
 801982c:	6922      	ldr	r2, [r4, #16]
 801982e:	1c51      	adds	r1, r2, #1
 8019830:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019834:	6121      	str	r1, [r4, #16]
 8019836:	2101      	movs	r1, #1
 8019838:	6151      	str	r1, [r2, #20]
 801983a:	e7bc      	b.n	80197b6 <__gethex+0x396>
 801983c:	6921      	ldr	r1, [r4, #16]
 801983e:	4559      	cmp	r1, fp
 8019840:	dd0b      	ble.n	801985a <__gethex+0x43a>
 8019842:	2101      	movs	r1, #1
 8019844:	4620      	mov	r0, r4
 8019846:	f7ff fd83 	bl	8019350 <rshift>
 801984a:	68bb      	ldr	r3, [r7, #8]
 801984c:	3601      	adds	r6, #1
 801984e:	42b3      	cmp	r3, r6
 8019850:	f6ff aedb 	blt.w	801960a <__gethex+0x1ea>
 8019854:	f04f 0801 	mov.w	r8, #1
 8019858:	e7c2      	b.n	80197e0 <__gethex+0x3c0>
 801985a:	f015 051f 	ands.w	r5, r5, #31
 801985e:	d0f9      	beq.n	8019854 <__gethex+0x434>
 8019860:	9b01      	ldr	r3, [sp, #4]
 8019862:	441a      	add	r2, r3
 8019864:	f1c5 0520 	rsb	r5, r5, #32
 8019868:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801986c:	f7fe f8a0 	bl	80179b0 <__hi0bits>
 8019870:	42a8      	cmp	r0, r5
 8019872:	dbe6      	blt.n	8019842 <__gethex+0x422>
 8019874:	e7ee      	b.n	8019854 <__gethex+0x434>
 8019876:	bf00      	nop
 8019878:	0801cd51 	.word	0x0801cd51

0801987c <L_shift>:
 801987c:	f1c2 0208 	rsb	r2, r2, #8
 8019880:	0092      	lsls	r2, r2, #2
 8019882:	b570      	push	{r4, r5, r6, lr}
 8019884:	f1c2 0620 	rsb	r6, r2, #32
 8019888:	6843      	ldr	r3, [r0, #4]
 801988a:	6804      	ldr	r4, [r0, #0]
 801988c:	fa03 f506 	lsl.w	r5, r3, r6
 8019890:	432c      	orrs	r4, r5
 8019892:	40d3      	lsrs	r3, r2
 8019894:	6004      	str	r4, [r0, #0]
 8019896:	f840 3f04 	str.w	r3, [r0, #4]!
 801989a:	4288      	cmp	r0, r1
 801989c:	d3f4      	bcc.n	8019888 <L_shift+0xc>
 801989e:	bd70      	pop	{r4, r5, r6, pc}

080198a0 <__match>:
 80198a0:	b530      	push	{r4, r5, lr}
 80198a2:	6803      	ldr	r3, [r0, #0]
 80198a4:	3301      	adds	r3, #1
 80198a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198aa:	b914      	cbnz	r4, 80198b2 <__match+0x12>
 80198ac:	6003      	str	r3, [r0, #0]
 80198ae:	2001      	movs	r0, #1
 80198b0:	bd30      	pop	{r4, r5, pc}
 80198b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80198ba:	2d19      	cmp	r5, #25
 80198bc:	bf98      	it	ls
 80198be:	3220      	addls	r2, #32
 80198c0:	42a2      	cmp	r2, r4
 80198c2:	d0f0      	beq.n	80198a6 <__match+0x6>
 80198c4:	2000      	movs	r0, #0
 80198c6:	e7f3      	b.n	80198b0 <__match+0x10>

080198c8 <__hexnan>:
 80198c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198cc:	680b      	ldr	r3, [r1, #0]
 80198ce:	6801      	ldr	r1, [r0, #0]
 80198d0:	115e      	asrs	r6, r3, #5
 80198d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80198d6:	f013 031f 	ands.w	r3, r3, #31
 80198da:	b087      	sub	sp, #28
 80198dc:	bf18      	it	ne
 80198de:	3604      	addne	r6, #4
 80198e0:	2500      	movs	r5, #0
 80198e2:	1f37      	subs	r7, r6, #4
 80198e4:	4682      	mov	sl, r0
 80198e6:	4690      	mov	r8, r2
 80198e8:	9301      	str	r3, [sp, #4]
 80198ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80198ee:	46b9      	mov	r9, r7
 80198f0:	463c      	mov	r4, r7
 80198f2:	9502      	str	r5, [sp, #8]
 80198f4:	46ab      	mov	fp, r5
 80198f6:	784a      	ldrb	r2, [r1, #1]
 80198f8:	1c4b      	adds	r3, r1, #1
 80198fa:	9303      	str	r3, [sp, #12]
 80198fc:	b342      	cbz	r2, 8019950 <__hexnan+0x88>
 80198fe:	4610      	mov	r0, r2
 8019900:	9105      	str	r1, [sp, #20]
 8019902:	9204      	str	r2, [sp, #16]
 8019904:	f7ff fd76 	bl	80193f4 <__hexdig_fun>
 8019908:	2800      	cmp	r0, #0
 801990a:	d14f      	bne.n	80199ac <__hexnan+0xe4>
 801990c:	9a04      	ldr	r2, [sp, #16]
 801990e:	9905      	ldr	r1, [sp, #20]
 8019910:	2a20      	cmp	r2, #32
 8019912:	d818      	bhi.n	8019946 <__hexnan+0x7e>
 8019914:	9b02      	ldr	r3, [sp, #8]
 8019916:	459b      	cmp	fp, r3
 8019918:	dd13      	ble.n	8019942 <__hexnan+0x7a>
 801991a:	454c      	cmp	r4, r9
 801991c:	d206      	bcs.n	801992c <__hexnan+0x64>
 801991e:	2d07      	cmp	r5, #7
 8019920:	dc04      	bgt.n	801992c <__hexnan+0x64>
 8019922:	462a      	mov	r2, r5
 8019924:	4649      	mov	r1, r9
 8019926:	4620      	mov	r0, r4
 8019928:	f7ff ffa8 	bl	801987c <L_shift>
 801992c:	4544      	cmp	r4, r8
 801992e:	d950      	bls.n	80199d2 <__hexnan+0x10a>
 8019930:	2300      	movs	r3, #0
 8019932:	f1a4 0904 	sub.w	r9, r4, #4
 8019936:	f844 3c04 	str.w	r3, [r4, #-4]
 801993a:	f8cd b008 	str.w	fp, [sp, #8]
 801993e:	464c      	mov	r4, r9
 8019940:	461d      	mov	r5, r3
 8019942:	9903      	ldr	r1, [sp, #12]
 8019944:	e7d7      	b.n	80198f6 <__hexnan+0x2e>
 8019946:	2a29      	cmp	r2, #41	; 0x29
 8019948:	d155      	bne.n	80199f6 <__hexnan+0x12e>
 801994a:	3102      	adds	r1, #2
 801994c:	f8ca 1000 	str.w	r1, [sl]
 8019950:	f1bb 0f00 	cmp.w	fp, #0
 8019954:	d04f      	beq.n	80199f6 <__hexnan+0x12e>
 8019956:	454c      	cmp	r4, r9
 8019958:	d206      	bcs.n	8019968 <__hexnan+0xa0>
 801995a:	2d07      	cmp	r5, #7
 801995c:	dc04      	bgt.n	8019968 <__hexnan+0xa0>
 801995e:	462a      	mov	r2, r5
 8019960:	4649      	mov	r1, r9
 8019962:	4620      	mov	r0, r4
 8019964:	f7ff ff8a 	bl	801987c <L_shift>
 8019968:	4544      	cmp	r4, r8
 801996a:	d934      	bls.n	80199d6 <__hexnan+0x10e>
 801996c:	f1a8 0204 	sub.w	r2, r8, #4
 8019970:	4623      	mov	r3, r4
 8019972:	f853 1b04 	ldr.w	r1, [r3], #4
 8019976:	f842 1f04 	str.w	r1, [r2, #4]!
 801997a:	429f      	cmp	r7, r3
 801997c:	d2f9      	bcs.n	8019972 <__hexnan+0xaa>
 801997e:	1b3b      	subs	r3, r7, r4
 8019980:	f023 0303 	bic.w	r3, r3, #3
 8019984:	3304      	adds	r3, #4
 8019986:	3e03      	subs	r6, #3
 8019988:	3401      	adds	r4, #1
 801998a:	42a6      	cmp	r6, r4
 801998c:	bf38      	it	cc
 801998e:	2304      	movcc	r3, #4
 8019990:	4443      	add	r3, r8
 8019992:	2200      	movs	r2, #0
 8019994:	f843 2b04 	str.w	r2, [r3], #4
 8019998:	429f      	cmp	r7, r3
 801999a:	d2fb      	bcs.n	8019994 <__hexnan+0xcc>
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	b91b      	cbnz	r3, 80199a8 <__hexnan+0xe0>
 80199a0:	4547      	cmp	r7, r8
 80199a2:	d126      	bne.n	80199f2 <__hexnan+0x12a>
 80199a4:	2301      	movs	r3, #1
 80199a6:	603b      	str	r3, [r7, #0]
 80199a8:	2005      	movs	r0, #5
 80199aa:	e025      	b.n	80199f8 <__hexnan+0x130>
 80199ac:	3501      	adds	r5, #1
 80199ae:	2d08      	cmp	r5, #8
 80199b0:	f10b 0b01 	add.w	fp, fp, #1
 80199b4:	dd06      	ble.n	80199c4 <__hexnan+0xfc>
 80199b6:	4544      	cmp	r4, r8
 80199b8:	d9c3      	bls.n	8019942 <__hexnan+0x7a>
 80199ba:	2300      	movs	r3, #0
 80199bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80199c0:	2501      	movs	r5, #1
 80199c2:	3c04      	subs	r4, #4
 80199c4:	6822      	ldr	r2, [r4, #0]
 80199c6:	f000 000f 	and.w	r0, r0, #15
 80199ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80199ce:	6020      	str	r0, [r4, #0]
 80199d0:	e7b7      	b.n	8019942 <__hexnan+0x7a>
 80199d2:	2508      	movs	r5, #8
 80199d4:	e7b5      	b.n	8019942 <__hexnan+0x7a>
 80199d6:	9b01      	ldr	r3, [sp, #4]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d0df      	beq.n	801999c <__hexnan+0xd4>
 80199dc:	f1c3 0320 	rsb	r3, r3, #32
 80199e0:	f04f 32ff 	mov.w	r2, #4294967295
 80199e4:	40da      	lsrs	r2, r3
 80199e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80199ea:	4013      	ands	r3, r2
 80199ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80199f0:	e7d4      	b.n	801999c <__hexnan+0xd4>
 80199f2:	3f04      	subs	r7, #4
 80199f4:	e7d2      	b.n	801999c <__hexnan+0xd4>
 80199f6:	2004      	movs	r0, #4
 80199f8:	b007      	add	sp, #28
 80199fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199fe <__ascii_mbtowc>:
 80199fe:	b082      	sub	sp, #8
 8019a00:	b901      	cbnz	r1, 8019a04 <__ascii_mbtowc+0x6>
 8019a02:	a901      	add	r1, sp, #4
 8019a04:	b142      	cbz	r2, 8019a18 <__ascii_mbtowc+0x1a>
 8019a06:	b14b      	cbz	r3, 8019a1c <__ascii_mbtowc+0x1e>
 8019a08:	7813      	ldrb	r3, [r2, #0]
 8019a0a:	600b      	str	r3, [r1, #0]
 8019a0c:	7812      	ldrb	r2, [r2, #0]
 8019a0e:	1e10      	subs	r0, r2, #0
 8019a10:	bf18      	it	ne
 8019a12:	2001      	movne	r0, #1
 8019a14:	b002      	add	sp, #8
 8019a16:	4770      	bx	lr
 8019a18:	4610      	mov	r0, r2
 8019a1a:	e7fb      	b.n	8019a14 <__ascii_mbtowc+0x16>
 8019a1c:	f06f 0001 	mvn.w	r0, #1
 8019a20:	e7f8      	b.n	8019a14 <__ascii_mbtowc+0x16>

08019a22 <_realloc_r>:
 8019a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a26:	4680      	mov	r8, r0
 8019a28:	4614      	mov	r4, r2
 8019a2a:	460e      	mov	r6, r1
 8019a2c:	b921      	cbnz	r1, 8019a38 <_realloc_r+0x16>
 8019a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a32:	4611      	mov	r1, r2
 8019a34:	f7fd be3e 	b.w	80176b4 <_malloc_r>
 8019a38:	b92a      	cbnz	r2, 8019a46 <_realloc_r+0x24>
 8019a3a:	f7fd fdc7 	bl	80175cc <_free_r>
 8019a3e:	4625      	mov	r5, r4
 8019a40:	4628      	mov	r0, r5
 8019a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a46:	f000 f842 	bl	8019ace <_malloc_usable_size_r>
 8019a4a:	4284      	cmp	r4, r0
 8019a4c:	4607      	mov	r7, r0
 8019a4e:	d802      	bhi.n	8019a56 <_realloc_r+0x34>
 8019a50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019a54:	d812      	bhi.n	8019a7c <_realloc_r+0x5a>
 8019a56:	4621      	mov	r1, r4
 8019a58:	4640      	mov	r0, r8
 8019a5a:	f7fd fe2b 	bl	80176b4 <_malloc_r>
 8019a5e:	4605      	mov	r5, r0
 8019a60:	2800      	cmp	r0, #0
 8019a62:	d0ed      	beq.n	8019a40 <_realloc_r+0x1e>
 8019a64:	42bc      	cmp	r4, r7
 8019a66:	4622      	mov	r2, r4
 8019a68:	4631      	mov	r1, r6
 8019a6a:	bf28      	it	cs
 8019a6c:	463a      	movcs	r2, r7
 8019a6e:	f7fc ff1c 	bl	80168aa <memcpy>
 8019a72:	4631      	mov	r1, r6
 8019a74:	4640      	mov	r0, r8
 8019a76:	f7fd fda9 	bl	80175cc <_free_r>
 8019a7a:	e7e1      	b.n	8019a40 <_realloc_r+0x1e>
 8019a7c:	4635      	mov	r5, r6
 8019a7e:	e7df      	b.n	8019a40 <_realloc_r+0x1e>

08019a80 <__ascii_wctomb>:
 8019a80:	b149      	cbz	r1, 8019a96 <__ascii_wctomb+0x16>
 8019a82:	2aff      	cmp	r2, #255	; 0xff
 8019a84:	bf85      	ittet	hi
 8019a86:	238a      	movhi	r3, #138	; 0x8a
 8019a88:	6003      	strhi	r3, [r0, #0]
 8019a8a:	700a      	strbls	r2, [r1, #0]
 8019a8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019a90:	bf98      	it	ls
 8019a92:	2001      	movls	r0, #1
 8019a94:	4770      	bx	lr
 8019a96:	4608      	mov	r0, r1
 8019a98:	4770      	bx	lr
	...

08019a9c <fiprintf>:
 8019a9c:	b40e      	push	{r1, r2, r3}
 8019a9e:	b503      	push	{r0, r1, lr}
 8019aa0:	4601      	mov	r1, r0
 8019aa2:	ab03      	add	r3, sp, #12
 8019aa4:	4805      	ldr	r0, [pc, #20]	; (8019abc <fiprintf+0x20>)
 8019aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8019aaa:	6800      	ldr	r0, [r0, #0]
 8019aac:	9301      	str	r3, [sp, #4]
 8019aae:	f000 f83f 	bl	8019b30 <_vfiprintf_r>
 8019ab2:	b002      	add	sp, #8
 8019ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ab8:	b003      	add	sp, #12
 8019aba:	4770      	bx	lr
 8019abc:	200003d0 	.word	0x200003d0

08019ac0 <abort>:
 8019ac0:	b508      	push	{r3, lr}
 8019ac2:	2006      	movs	r0, #6
 8019ac4:	f000 fa0c 	bl	8019ee0 <raise>
 8019ac8:	2001      	movs	r0, #1
 8019aca:	f7eb fbcf 	bl	800526c <_exit>

08019ace <_malloc_usable_size_r>:
 8019ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ad2:	1f18      	subs	r0, r3, #4
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	bfbc      	itt	lt
 8019ad8:	580b      	ldrlt	r3, [r1, r0]
 8019ada:	18c0      	addlt	r0, r0, r3
 8019adc:	4770      	bx	lr

08019ade <__sfputc_r>:
 8019ade:	6893      	ldr	r3, [r2, #8]
 8019ae0:	3b01      	subs	r3, #1
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	b410      	push	{r4}
 8019ae6:	6093      	str	r3, [r2, #8]
 8019ae8:	da08      	bge.n	8019afc <__sfputc_r+0x1e>
 8019aea:	6994      	ldr	r4, [r2, #24]
 8019aec:	42a3      	cmp	r3, r4
 8019aee:	db01      	blt.n	8019af4 <__sfputc_r+0x16>
 8019af0:	290a      	cmp	r1, #10
 8019af2:	d103      	bne.n	8019afc <__sfputc_r+0x1e>
 8019af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019af8:	f000 b934 	b.w	8019d64 <__swbuf_r>
 8019afc:	6813      	ldr	r3, [r2, #0]
 8019afe:	1c58      	adds	r0, r3, #1
 8019b00:	6010      	str	r0, [r2, #0]
 8019b02:	7019      	strb	r1, [r3, #0]
 8019b04:	4608      	mov	r0, r1
 8019b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b0a:	4770      	bx	lr

08019b0c <__sfputs_r>:
 8019b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b0e:	4606      	mov	r6, r0
 8019b10:	460f      	mov	r7, r1
 8019b12:	4614      	mov	r4, r2
 8019b14:	18d5      	adds	r5, r2, r3
 8019b16:	42ac      	cmp	r4, r5
 8019b18:	d101      	bne.n	8019b1e <__sfputs_r+0x12>
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	e007      	b.n	8019b2e <__sfputs_r+0x22>
 8019b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b22:	463a      	mov	r2, r7
 8019b24:	4630      	mov	r0, r6
 8019b26:	f7ff ffda 	bl	8019ade <__sfputc_r>
 8019b2a:	1c43      	adds	r3, r0, #1
 8019b2c:	d1f3      	bne.n	8019b16 <__sfputs_r+0xa>
 8019b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019b30 <_vfiprintf_r>:
 8019b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b34:	460d      	mov	r5, r1
 8019b36:	b09d      	sub	sp, #116	; 0x74
 8019b38:	4614      	mov	r4, r2
 8019b3a:	4698      	mov	r8, r3
 8019b3c:	4606      	mov	r6, r0
 8019b3e:	b118      	cbz	r0, 8019b48 <_vfiprintf_r+0x18>
 8019b40:	6a03      	ldr	r3, [r0, #32]
 8019b42:	b90b      	cbnz	r3, 8019b48 <_vfiprintf_r+0x18>
 8019b44:	f7fc fd98 	bl	8016678 <__sinit>
 8019b48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b4a:	07d9      	lsls	r1, r3, #31
 8019b4c:	d405      	bmi.n	8019b5a <_vfiprintf_r+0x2a>
 8019b4e:	89ab      	ldrh	r3, [r5, #12]
 8019b50:	059a      	lsls	r2, r3, #22
 8019b52:	d402      	bmi.n	8019b5a <_vfiprintf_r+0x2a>
 8019b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b56:	f7fc fea6 	bl	80168a6 <__retarget_lock_acquire_recursive>
 8019b5a:	89ab      	ldrh	r3, [r5, #12]
 8019b5c:	071b      	lsls	r3, r3, #28
 8019b5e:	d501      	bpl.n	8019b64 <_vfiprintf_r+0x34>
 8019b60:	692b      	ldr	r3, [r5, #16]
 8019b62:	b99b      	cbnz	r3, 8019b8c <_vfiprintf_r+0x5c>
 8019b64:	4629      	mov	r1, r5
 8019b66:	4630      	mov	r0, r6
 8019b68:	f000 f93a 	bl	8019de0 <__swsetup_r>
 8019b6c:	b170      	cbz	r0, 8019b8c <_vfiprintf_r+0x5c>
 8019b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b70:	07dc      	lsls	r4, r3, #31
 8019b72:	d504      	bpl.n	8019b7e <_vfiprintf_r+0x4e>
 8019b74:	f04f 30ff 	mov.w	r0, #4294967295
 8019b78:	b01d      	add	sp, #116	; 0x74
 8019b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b7e:	89ab      	ldrh	r3, [r5, #12]
 8019b80:	0598      	lsls	r0, r3, #22
 8019b82:	d4f7      	bmi.n	8019b74 <_vfiprintf_r+0x44>
 8019b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b86:	f7fc fe8f 	bl	80168a8 <__retarget_lock_release_recursive>
 8019b8a:	e7f3      	b.n	8019b74 <_vfiprintf_r+0x44>
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8019b90:	2320      	movs	r3, #32
 8019b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b9a:	2330      	movs	r3, #48	; 0x30
 8019b9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019d50 <_vfiprintf_r+0x220>
 8019ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ba4:	f04f 0901 	mov.w	r9, #1
 8019ba8:	4623      	mov	r3, r4
 8019baa:	469a      	mov	sl, r3
 8019bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bb0:	b10a      	cbz	r2, 8019bb6 <_vfiprintf_r+0x86>
 8019bb2:	2a25      	cmp	r2, #37	; 0x25
 8019bb4:	d1f9      	bne.n	8019baa <_vfiprintf_r+0x7a>
 8019bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8019bba:	d00b      	beq.n	8019bd4 <_vfiprintf_r+0xa4>
 8019bbc:	465b      	mov	r3, fp
 8019bbe:	4622      	mov	r2, r4
 8019bc0:	4629      	mov	r1, r5
 8019bc2:	4630      	mov	r0, r6
 8019bc4:	f7ff ffa2 	bl	8019b0c <__sfputs_r>
 8019bc8:	3001      	adds	r0, #1
 8019bca:	f000 80a9 	beq.w	8019d20 <_vfiprintf_r+0x1f0>
 8019bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bd0:	445a      	add	r2, fp
 8019bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8019bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	f000 80a1 	beq.w	8019d20 <_vfiprintf_r+0x1f0>
 8019bde:	2300      	movs	r3, #0
 8019be0:	f04f 32ff 	mov.w	r2, #4294967295
 8019be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019be8:	f10a 0a01 	add.w	sl, sl, #1
 8019bec:	9304      	str	r3, [sp, #16]
 8019bee:	9307      	str	r3, [sp, #28]
 8019bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8019bf6:	4654      	mov	r4, sl
 8019bf8:	2205      	movs	r2, #5
 8019bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bfe:	4854      	ldr	r0, [pc, #336]	; (8019d50 <_vfiprintf_r+0x220>)
 8019c00:	f7e6 fb0e 	bl	8000220 <memchr>
 8019c04:	9a04      	ldr	r2, [sp, #16]
 8019c06:	b9d8      	cbnz	r0, 8019c40 <_vfiprintf_r+0x110>
 8019c08:	06d1      	lsls	r1, r2, #27
 8019c0a:	bf44      	itt	mi
 8019c0c:	2320      	movmi	r3, #32
 8019c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c12:	0713      	lsls	r3, r2, #28
 8019c14:	bf44      	itt	mi
 8019c16:	232b      	movmi	r3, #43	; 0x2b
 8019c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8019c20:	2b2a      	cmp	r3, #42	; 0x2a
 8019c22:	d015      	beq.n	8019c50 <_vfiprintf_r+0x120>
 8019c24:	9a07      	ldr	r2, [sp, #28]
 8019c26:	4654      	mov	r4, sl
 8019c28:	2000      	movs	r0, #0
 8019c2a:	f04f 0c0a 	mov.w	ip, #10
 8019c2e:	4621      	mov	r1, r4
 8019c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c34:	3b30      	subs	r3, #48	; 0x30
 8019c36:	2b09      	cmp	r3, #9
 8019c38:	d94d      	bls.n	8019cd6 <_vfiprintf_r+0x1a6>
 8019c3a:	b1b0      	cbz	r0, 8019c6a <_vfiprintf_r+0x13a>
 8019c3c:	9207      	str	r2, [sp, #28]
 8019c3e:	e014      	b.n	8019c6a <_vfiprintf_r+0x13a>
 8019c40:	eba0 0308 	sub.w	r3, r0, r8
 8019c44:	fa09 f303 	lsl.w	r3, r9, r3
 8019c48:	4313      	orrs	r3, r2
 8019c4a:	9304      	str	r3, [sp, #16]
 8019c4c:	46a2      	mov	sl, r4
 8019c4e:	e7d2      	b.n	8019bf6 <_vfiprintf_r+0xc6>
 8019c50:	9b03      	ldr	r3, [sp, #12]
 8019c52:	1d19      	adds	r1, r3, #4
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	9103      	str	r1, [sp, #12]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	bfbb      	ittet	lt
 8019c5c:	425b      	neglt	r3, r3
 8019c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8019c62:	9307      	strge	r3, [sp, #28]
 8019c64:	9307      	strlt	r3, [sp, #28]
 8019c66:	bfb8      	it	lt
 8019c68:	9204      	strlt	r2, [sp, #16]
 8019c6a:	7823      	ldrb	r3, [r4, #0]
 8019c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8019c6e:	d10c      	bne.n	8019c8a <_vfiprintf_r+0x15a>
 8019c70:	7863      	ldrb	r3, [r4, #1]
 8019c72:	2b2a      	cmp	r3, #42	; 0x2a
 8019c74:	d134      	bne.n	8019ce0 <_vfiprintf_r+0x1b0>
 8019c76:	9b03      	ldr	r3, [sp, #12]
 8019c78:	1d1a      	adds	r2, r3, #4
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	9203      	str	r2, [sp, #12]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	bfb8      	it	lt
 8019c82:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c86:	3402      	adds	r4, #2
 8019c88:	9305      	str	r3, [sp, #20]
 8019c8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019d60 <_vfiprintf_r+0x230>
 8019c8e:	7821      	ldrb	r1, [r4, #0]
 8019c90:	2203      	movs	r2, #3
 8019c92:	4650      	mov	r0, sl
 8019c94:	f7e6 fac4 	bl	8000220 <memchr>
 8019c98:	b138      	cbz	r0, 8019caa <_vfiprintf_r+0x17a>
 8019c9a:	9b04      	ldr	r3, [sp, #16]
 8019c9c:	eba0 000a 	sub.w	r0, r0, sl
 8019ca0:	2240      	movs	r2, #64	; 0x40
 8019ca2:	4082      	lsls	r2, r0
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	3401      	adds	r4, #1
 8019ca8:	9304      	str	r3, [sp, #16]
 8019caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cae:	4829      	ldr	r0, [pc, #164]	; (8019d54 <_vfiprintf_r+0x224>)
 8019cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019cb4:	2206      	movs	r2, #6
 8019cb6:	f7e6 fab3 	bl	8000220 <memchr>
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	d03f      	beq.n	8019d3e <_vfiprintf_r+0x20e>
 8019cbe:	4b26      	ldr	r3, [pc, #152]	; (8019d58 <_vfiprintf_r+0x228>)
 8019cc0:	bb1b      	cbnz	r3, 8019d0a <_vfiprintf_r+0x1da>
 8019cc2:	9b03      	ldr	r3, [sp, #12]
 8019cc4:	3307      	adds	r3, #7
 8019cc6:	f023 0307 	bic.w	r3, r3, #7
 8019cca:	3308      	adds	r3, #8
 8019ccc:	9303      	str	r3, [sp, #12]
 8019cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cd0:	443b      	add	r3, r7
 8019cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8019cd4:	e768      	b.n	8019ba8 <_vfiprintf_r+0x78>
 8019cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8019cda:	460c      	mov	r4, r1
 8019cdc:	2001      	movs	r0, #1
 8019cde:	e7a6      	b.n	8019c2e <_vfiprintf_r+0xfe>
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	3401      	adds	r4, #1
 8019ce4:	9305      	str	r3, [sp, #20]
 8019ce6:	4619      	mov	r1, r3
 8019ce8:	f04f 0c0a 	mov.w	ip, #10
 8019cec:	4620      	mov	r0, r4
 8019cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019cf2:	3a30      	subs	r2, #48	; 0x30
 8019cf4:	2a09      	cmp	r2, #9
 8019cf6:	d903      	bls.n	8019d00 <_vfiprintf_r+0x1d0>
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d0c6      	beq.n	8019c8a <_vfiprintf_r+0x15a>
 8019cfc:	9105      	str	r1, [sp, #20]
 8019cfe:	e7c4      	b.n	8019c8a <_vfiprintf_r+0x15a>
 8019d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d04:	4604      	mov	r4, r0
 8019d06:	2301      	movs	r3, #1
 8019d08:	e7f0      	b.n	8019cec <_vfiprintf_r+0x1bc>
 8019d0a:	ab03      	add	r3, sp, #12
 8019d0c:	9300      	str	r3, [sp, #0]
 8019d0e:	462a      	mov	r2, r5
 8019d10:	4b12      	ldr	r3, [pc, #72]	; (8019d5c <_vfiprintf_r+0x22c>)
 8019d12:	a904      	add	r1, sp, #16
 8019d14:	4630      	mov	r0, r6
 8019d16:	f7fb fe4d 	bl	80159b4 <_printf_float>
 8019d1a:	4607      	mov	r7, r0
 8019d1c:	1c78      	adds	r0, r7, #1
 8019d1e:	d1d6      	bne.n	8019cce <_vfiprintf_r+0x19e>
 8019d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d22:	07d9      	lsls	r1, r3, #31
 8019d24:	d405      	bmi.n	8019d32 <_vfiprintf_r+0x202>
 8019d26:	89ab      	ldrh	r3, [r5, #12]
 8019d28:	059a      	lsls	r2, r3, #22
 8019d2a:	d402      	bmi.n	8019d32 <_vfiprintf_r+0x202>
 8019d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d2e:	f7fc fdbb 	bl	80168a8 <__retarget_lock_release_recursive>
 8019d32:	89ab      	ldrh	r3, [r5, #12]
 8019d34:	065b      	lsls	r3, r3, #25
 8019d36:	f53f af1d 	bmi.w	8019b74 <_vfiprintf_r+0x44>
 8019d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d3c:	e71c      	b.n	8019b78 <_vfiprintf_r+0x48>
 8019d3e:	ab03      	add	r3, sp, #12
 8019d40:	9300      	str	r3, [sp, #0]
 8019d42:	462a      	mov	r2, r5
 8019d44:	4b05      	ldr	r3, [pc, #20]	; (8019d5c <_vfiprintf_r+0x22c>)
 8019d46:	a904      	add	r1, sp, #16
 8019d48:	4630      	mov	r0, r6
 8019d4a:	f7fc f8d7 	bl	8015efc <_printf_i>
 8019d4e:	e7e4      	b.n	8019d1a <_vfiprintf_r+0x1ea>
 8019d50:	0801d011 	.word	0x0801d011
 8019d54:	0801d01b 	.word	0x0801d01b
 8019d58:	080159b5 	.word	0x080159b5
 8019d5c:	08019b0d 	.word	0x08019b0d
 8019d60:	0801d017 	.word	0x0801d017

08019d64 <__swbuf_r>:
 8019d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d66:	460e      	mov	r6, r1
 8019d68:	4614      	mov	r4, r2
 8019d6a:	4605      	mov	r5, r0
 8019d6c:	b118      	cbz	r0, 8019d76 <__swbuf_r+0x12>
 8019d6e:	6a03      	ldr	r3, [r0, #32]
 8019d70:	b90b      	cbnz	r3, 8019d76 <__swbuf_r+0x12>
 8019d72:	f7fc fc81 	bl	8016678 <__sinit>
 8019d76:	69a3      	ldr	r3, [r4, #24]
 8019d78:	60a3      	str	r3, [r4, #8]
 8019d7a:	89a3      	ldrh	r3, [r4, #12]
 8019d7c:	071a      	lsls	r2, r3, #28
 8019d7e:	d525      	bpl.n	8019dcc <__swbuf_r+0x68>
 8019d80:	6923      	ldr	r3, [r4, #16]
 8019d82:	b31b      	cbz	r3, 8019dcc <__swbuf_r+0x68>
 8019d84:	6823      	ldr	r3, [r4, #0]
 8019d86:	6922      	ldr	r2, [r4, #16]
 8019d88:	1a98      	subs	r0, r3, r2
 8019d8a:	6963      	ldr	r3, [r4, #20]
 8019d8c:	b2f6      	uxtb	r6, r6
 8019d8e:	4283      	cmp	r3, r0
 8019d90:	4637      	mov	r7, r6
 8019d92:	dc04      	bgt.n	8019d9e <__swbuf_r+0x3a>
 8019d94:	4621      	mov	r1, r4
 8019d96:	4628      	mov	r0, r5
 8019d98:	f7ff fa3a 	bl	8019210 <_fflush_r>
 8019d9c:	b9e0      	cbnz	r0, 8019dd8 <__swbuf_r+0x74>
 8019d9e:	68a3      	ldr	r3, [r4, #8]
 8019da0:	3b01      	subs	r3, #1
 8019da2:	60a3      	str	r3, [r4, #8]
 8019da4:	6823      	ldr	r3, [r4, #0]
 8019da6:	1c5a      	adds	r2, r3, #1
 8019da8:	6022      	str	r2, [r4, #0]
 8019daa:	701e      	strb	r6, [r3, #0]
 8019dac:	6962      	ldr	r2, [r4, #20]
 8019dae:	1c43      	adds	r3, r0, #1
 8019db0:	429a      	cmp	r2, r3
 8019db2:	d004      	beq.n	8019dbe <__swbuf_r+0x5a>
 8019db4:	89a3      	ldrh	r3, [r4, #12]
 8019db6:	07db      	lsls	r3, r3, #31
 8019db8:	d506      	bpl.n	8019dc8 <__swbuf_r+0x64>
 8019dba:	2e0a      	cmp	r6, #10
 8019dbc:	d104      	bne.n	8019dc8 <__swbuf_r+0x64>
 8019dbe:	4621      	mov	r1, r4
 8019dc0:	4628      	mov	r0, r5
 8019dc2:	f7ff fa25 	bl	8019210 <_fflush_r>
 8019dc6:	b938      	cbnz	r0, 8019dd8 <__swbuf_r+0x74>
 8019dc8:	4638      	mov	r0, r7
 8019dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dcc:	4621      	mov	r1, r4
 8019dce:	4628      	mov	r0, r5
 8019dd0:	f000 f806 	bl	8019de0 <__swsetup_r>
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	d0d5      	beq.n	8019d84 <__swbuf_r+0x20>
 8019dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8019ddc:	e7f4      	b.n	8019dc8 <__swbuf_r+0x64>
	...

08019de0 <__swsetup_r>:
 8019de0:	b538      	push	{r3, r4, r5, lr}
 8019de2:	4b2a      	ldr	r3, [pc, #168]	; (8019e8c <__swsetup_r+0xac>)
 8019de4:	4605      	mov	r5, r0
 8019de6:	6818      	ldr	r0, [r3, #0]
 8019de8:	460c      	mov	r4, r1
 8019dea:	b118      	cbz	r0, 8019df4 <__swsetup_r+0x14>
 8019dec:	6a03      	ldr	r3, [r0, #32]
 8019dee:	b90b      	cbnz	r3, 8019df4 <__swsetup_r+0x14>
 8019df0:	f7fc fc42 	bl	8016678 <__sinit>
 8019df4:	89a3      	ldrh	r3, [r4, #12]
 8019df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019dfa:	0718      	lsls	r0, r3, #28
 8019dfc:	d422      	bmi.n	8019e44 <__swsetup_r+0x64>
 8019dfe:	06d9      	lsls	r1, r3, #27
 8019e00:	d407      	bmi.n	8019e12 <__swsetup_r+0x32>
 8019e02:	2309      	movs	r3, #9
 8019e04:	602b      	str	r3, [r5, #0]
 8019e06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019e0a:	81a3      	strh	r3, [r4, #12]
 8019e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e10:	e034      	b.n	8019e7c <__swsetup_r+0x9c>
 8019e12:	0758      	lsls	r0, r3, #29
 8019e14:	d512      	bpl.n	8019e3c <__swsetup_r+0x5c>
 8019e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e18:	b141      	cbz	r1, 8019e2c <__swsetup_r+0x4c>
 8019e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e1e:	4299      	cmp	r1, r3
 8019e20:	d002      	beq.n	8019e28 <__swsetup_r+0x48>
 8019e22:	4628      	mov	r0, r5
 8019e24:	f7fd fbd2 	bl	80175cc <_free_r>
 8019e28:	2300      	movs	r3, #0
 8019e2a:	6363      	str	r3, [r4, #52]	; 0x34
 8019e2c:	89a3      	ldrh	r3, [r4, #12]
 8019e2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019e32:	81a3      	strh	r3, [r4, #12]
 8019e34:	2300      	movs	r3, #0
 8019e36:	6063      	str	r3, [r4, #4]
 8019e38:	6923      	ldr	r3, [r4, #16]
 8019e3a:	6023      	str	r3, [r4, #0]
 8019e3c:	89a3      	ldrh	r3, [r4, #12]
 8019e3e:	f043 0308 	orr.w	r3, r3, #8
 8019e42:	81a3      	strh	r3, [r4, #12]
 8019e44:	6923      	ldr	r3, [r4, #16]
 8019e46:	b94b      	cbnz	r3, 8019e5c <__swsetup_r+0x7c>
 8019e48:	89a3      	ldrh	r3, [r4, #12]
 8019e4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e52:	d003      	beq.n	8019e5c <__swsetup_r+0x7c>
 8019e54:	4621      	mov	r1, r4
 8019e56:	4628      	mov	r0, r5
 8019e58:	f000 f884 	bl	8019f64 <__smakebuf_r>
 8019e5c:	89a0      	ldrh	r0, [r4, #12]
 8019e5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e62:	f010 0301 	ands.w	r3, r0, #1
 8019e66:	d00a      	beq.n	8019e7e <__swsetup_r+0x9e>
 8019e68:	2300      	movs	r3, #0
 8019e6a:	60a3      	str	r3, [r4, #8]
 8019e6c:	6963      	ldr	r3, [r4, #20]
 8019e6e:	425b      	negs	r3, r3
 8019e70:	61a3      	str	r3, [r4, #24]
 8019e72:	6923      	ldr	r3, [r4, #16]
 8019e74:	b943      	cbnz	r3, 8019e88 <__swsetup_r+0xa8>
 8019e76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019e7a:	d1c4      	bne.n	8019e06 <__swsetup_r+0x26>
 8019e7c:	bd38      	pop	{r3, r4, r5, pc}
 8019e7e:	0781      	lsls	r1, r0, #30
 8019e80:	bf58      	it	pl
 8019e82:	6963      	ldrpl	r3, [r4, #20]
 8019e84:	60a3      	str	r3, [r4, #8]
 8019e86:	e7f4      	b.n	8019e72 <__swsetup_r+0x92>
 8019e88:	2000      	movs	r0, #0
 8019e8a:	e7f7      	b.n	8019e7c <__swsetup_r+0x9c>
 8019e8c:	200003d0 	.word	0x200003d0

08019e90 <_raise_r>:
 8019e90:	291f      	cmp	r1, #31
 8019e92:	b538      	push	{r3, r4, r5, lr}
 8019e94:	4604      	mov	r4, r0
 8019e96:	460d      	mov	r5, r1
 8019e98:	d904      	bls.n	8019ea4 <_raise_r+0x14>
 8019e9a:	2316      	movs	r3, #22
 8019e9c:	6003      	str	r3, [r0, #0]
 8019e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8019ea2:	bd38      	pop	{r3, r4, r5, pc}
 8019ea4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019ea6:	b112      	cbz	r2, 8019eae <_raise_r+0x1e>
 8019ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019eac:	b94b      	cbnz	r3, 8019ec2 <_raise_r+0x32>
 8019eae:	4620      	mov	r0, r4
 8019eb0:	f000 f830 	bl	8019f14 <_getpid_r>
 8019eb4:	462a      	mov	r2, r5
 8019eb6:	4601      	mov	r1, r0
 8019eb8:	4620      	mov	r0, r4
 8019eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ebe:	f000 b817 	b.w	8019ef0 <_kill_r>
 8019ec2:	2b01      	cmp	r3, #1
 8019ec4:	d00a      	beq.n	8019edc <_raise_r+0x4c>
 8019ec6:	1c59      	adds	r1, r3, #1
 8019ec8:	d103      	bne.n	8019ed2 <_raise_r+0x42>
 8019eca:	2316      	movs	r3, #22
 8019ecc:	6003      	str	r3, [r0, #0]
 8019ece:	2001      	movs	r0, #1
 8019ed0:	e7e7      	b.n	8019ea2 <_raise_r+0x12>
 8019ed2:	2400      	movs	r4, #0
 8019ed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019ed8:	4628      	mov	r0, r5
 8019eda:	4798      	blx	r3
 8019edc:	2000      	movs	r0, #0
 8019ede:	e7e0      	b.n	8019ea2 <_raise_r+0x12>

08019ee0 <raise>:
 8019ee0:	4b02      	ldr	r3, [pc, #8]	; (8019eec <raise+0xc>)
 8019ee2:	4601      	mov	r1, r0
 8019ee4:	6818      	ldr	r0, [r3, #0]
 8019ee6:	f7ff bfd3 	b.w	8019e90 <_raise_r>
 8019eea:	bf00      	nop
 8019eec:	200003d0 	.word	0x200003d0

08019ef0 <_kill_r>:
 8019ef0:	b538      	push	{r3, r4, r5, lr}
 8019ef2:	4d07      	ldr	r5, [pc, #28]	; (8019f10 <_kill_r+0x20>)
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	4608      	mov	r0, r1
 8019efa:	4611      	mov	r1, r2
 8019efc:	602b      	str	r3, [r5, #0]
 8019efe:	f7eb f9a5 	bl	800524c <_kill>
 8019f02:	1c43      	adds	r3, r0, #1
 8019f04:	d102      	bne.n	8019f0c <_kill_r+0x1c>
 8019f06:	682b      	ldr	r3, [r5, #0]
 8019f08:	b103      	cbz	r3, 8019f0c <_kill_r+0x1c>
 8019f0a:	6023      	str	r3, [r4, #0]
 8019f0c:	bd38      	pop	{r3, r4, r5, pc}
 8019f0e:	bf00      	nop
 8019f10:	200033b8 	.word	0x200033b8

08019f14 <_getpid_r>:
 8019f14:	f7eb b992 	b.w	800523c <_getpid>

08019f18 <__swhatbuf_r>:
 8019f18:	b570      	push	{r4, r5, r6, lr}
 8019f1a:	460c      	mov	r4, r1
 8019f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f20:	2900      	cmp	r1, #0
 8019f22:	b096      	sub	sp, #88	; 0x58
 8019f24:	4615      	mov	r5, r2
 8019f26:	461e      	mov	r6, r3
 8019f28:	da0d      	bge.n	8019f46 <__swhatbuf_r+0x2e>
 8019f2a:	89a3      	ldrh	r3, [r4, #12]
 8019f2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019f30:	f04f 0100 	mov.w	r1, #0
 8019f34:	bf0c      	ite	eq
 8019f36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019f3a:	2340      	movne	r3, #64	; 0x40
 8019f3c:	2000      	movs	r0, #0
 8019f3e:	6031      	str	r1, [r6, #0]
 8019f40:	602b      	str	r3, [r5, #0]
 8019f42:	b016      	add	sp, #88	; 0x58
 8019f44:	bd70      	pop	{r4, r5, r6, pc}
 8019f46:	466a      	mov	r2, sp
 8019f48:	f000 f848 	bl	8019fdc <_fstat_r>
 8019f4c:	2800      	cmp	r0, #0
 8019f4e:	dbec      	blt.n	8019f2a <__swhatbuf_r+0x12>
 8019f50:	9901      	ldr	r1, [sp, #4]
 8019f52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019f56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019f5a:	4259      	negs	r1, r3
 8019f5c:	4159      	adcs	r1, r3
 8019f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f62:	e7eb      	b.n	8019f3c <__swhatbuf_r+0x24>

08019f64 <__smakebuf_r>:
 8019f64:	898b      	ldrh	r3, [r1, #12]
 8019f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f68:	079d      	lsls	r5, r3, #30
 8019f6a:	4606      	mov	r6, r0
 8019f6c:	460c      	mov	r4, r1
 8019f6e:	d507      	bpl.n	8019f80 <__smakebuf_r+0x1c>
 8019f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019f74:	6023      	str	r3, [r4, #0]
 8019f76:	6123      	str	r3, [r4, #16]
 8019f78:	2301      	movs	r3, #1
 8019f7a:	6163      	str	r3, [r4, #20]
 8019f7c:	b002      	add	sp, #8
 8019f7e:	bd70      	pop	{r4, r5, r6, pc}
 8019f80:	ab01      	add	r3, sp, #4
 8019f82:	466a      	mov	r2, sp
 8019f84:	f7ff ffc8 	bl	8019f18 <__swhatbuf_r>
 8019f88:	9900      	ldr	r1, [sp, #0]
 8019f8a:	4605      	mov	r5, r0
 8019f8c:	4630      	mov	r0, r6
 8019f8e:	f7fd fb91 	bl	80176b4 <_malloc_r>
 8019f92:	b948      	cbnz	r0, 8019fa8 <__smakebuf_r+0x44>
 8019f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f98:	059a      	lsls	r2, r3, #22
 8019f9a:	d4ef      	bmi.n	8019f7c <__smakebuf_r+0x18>
 8019f9c:	f023 0303 	bic.w	r3, r3, #3
 8019fa0:	f043 0302 	orr.w	r3, r3, #2
 8019fa4:	81a3      	strh	r3, [r4, #12]
 8019fa6:	e7e3      	b.n	8019f70 <__smakebuf_r+0xc>
 8019fa8:	89a3      	ldrh	r3, [r4, #12]
 8019faa:	6020      	str	r0, [r4, #0]
 8019fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fb0:	81a3      	strh	r3, [r4, #12]
 8019fb2:	9b00      	ldr	r3, [sp, #0]
 8019fb4:	6163      	str	r3, [r4, #20]
 8019fb6:	9b01      	ldr	r3, [sp, #4]
 8019fb8:	6120      	str	r0, [r4, #16]
 8019fba:	b15b      	cbz	r3, 8019fd4 <__smakebuf_r+0x70>
 8019fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019fc0:	4630      	mov	r0, r6
 8019fc2:	f000 f81d 	bl	801a000 <_isatty_r>
 8019fc6:	b128      	cbz	r0, 8019fd4 <__smakebuf_r+0x70>
 8019fc8:	89a3      	ldrh	r3, [r4, #12]
 8019fca:	f023 0303 	bic.w	r3, r3, #3
 8019fce:	f043 0301 	orr.w	r3, r3, #1
 8019fd2:	81a3      	strh	r3, [r4, #12]
 8019fd4:	89a3      	ldrh	r3, [r4, #12]
 8019fd6:	431d      	orrs	r5, r3
 8019fd8:	81a5      	strh	r5, [r4, #12]
 8019fda:	e7cf      	b.n	8019f7c <__smakebuf_r+0x18>

08019fdc <_fstat_r>:
 8019fdc:	b538      	push	{r3, r4, r5, lr}
 8019fde:	4d07      	ldr	r5, [pc, #28]	; (8019ffc <_fstat_r+0x20>)
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	4604      	mov	r4, r0
 8019fe4:	4608      	mov	r0, r1
 8019fe6:	4611      	mov	r1, r2
 8019fe8:	602b      	str	r3, [r5, #0]
 8019fea:	f7eb f98e 	bl	800530a <_fstat>
 8019fee:	1c43      	adds	r3, r0, #1
 8019ff0:	d102      	bne.n	8019ff8 <_fstat_r+0x1c>
 8019ff2:	682b      	ldr	r3, [r5, #0]
 8019ff4:	b103      	cbz	r3, 8019ff8 <_fstat_r+0x1c>
 8019ff6:	6023      	str	r3, [r4, #0]
 8019ff8:	bd38      	pop	{r3, r4, r5, pc}
 8019ffa:	bf00      	nop
 8019ffc:	200033b8 	.word	0x200033b8

0801a000 <_isatty_r>:
 801a000:	b538      	push	{r3, r4, r5, lr}
 801a002:	4d06      	ldr	r5, [pc, #24]	; (801a01c <_isatty_r+0x1c>)
 801a004:	2300      	movs	r3, #0
 801a006:	4604      	mov	r4, r0
 801a008:	4608      	mov	r0, r1
 801a00a:	602b      	str	r3, [r5, #0]
 801a00c:	f7eb f98d 	bl	800532a <_isatty>
 801a010:	1c43      	adds	r3, r0, #1
 801a012:	d102      	bne.n	801a01a <_isatty_r+0x1a>
 801a014:	682b      	ldr	r3, [r5, #0]
 801a016:	b103      	cbz	r3, 801a01a <_isatty_r+0x1a>
 801a018:	6023      	str	r3, [r4, #0]
 801a01a:	bd38      	pop	{r3, r4, r5, pc}
 801a01c:	200033b8 	.word	0x200033b8

0801a020 <fmod>:
 801a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a022:	ed2d 8b02 	vpush	{d8}
 801a026:	ec57 6b10 	vmov	r6, r7, d0
 801a02a:	ec55 4b11 	vmov	r4, r5, d1
 801a02e:	f000 f86d 	bl	801a10c <__ieee754_fmod>
 801a032:	4622      	mov	r2, r4
 801a034:	462b      	mov	r3, r5
 801a036:	4630      	mov	r0, r6
 801a038:	4639      	mov	r1, r7
 801a03a:	eeb0 8a40 	vmov.f32	s16, s0
 801a03e:	eef0 8a60 	vmov.f32	s17, s1
 801a042:	f7e6 fd9b 	bl	8000b7c <__aeabi_dcmpun>
 801a046:	b990      	cbnz	r0, 801a06e <fmod+0x4e>
 801a048:	2200      	movs	r2, #0
 801a04a:	2300      	movs	r3, #0
 801a04c:	4620      	mov	r0, r4
 801a04e:	4629      	mov	r1, r5
 801a050:	f7e6 fd62 	bl	8000b18 <__aeabi_dcmpeq>
 801a054:	b158      	cbz	r0, 801a06e <fmod+0x4e>
 801a056:	f7fc fbfb 	bl	8016850 <__errno>
 801a05a:	2321      	movs	r3, #33	; 0x21
 801a05c:	6003      	str	r3, [r0, #0]
 801a05e:	2200      	movs	r2, #0
 801a060:	2300      	movs	r3, #0
 801a062:	4610      	mov	r0, r2
 801a064:	4619      	mov	r1, r3
 801a066:	f7e6 fc19 	bl	800089c <__aeabi_ddiv>
 801a06a:	ec41 0b18 	vmov	d8, r0, r1
 801a06e:	eeb0 0a48 	vmov.f32	s0, s16
 801a072:	eef0 0a68 	vmov.f32	s1, s17
 801a076:	ecbd 8b02 	vpop	{d8}
 801a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a07c <round>:
 801a07c:	ec53 2b10 	vmov	r2, r3, d0
 801a080:	b570      	push	{r4, r5, r6, lr}
 801a082:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801a086:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801a08a:	2813      	cmp	r0, #19
 801a08c:	ee10 5a10 	vmov	r5, s0
 801a090:	4619      	mov	r1, r3
 801a092:	dc18      	bgt.n	801a0c6 <round+0x4a>
 801a094:	2800      	cmp	r0, #0
 801a096:	da09      	bge.n	801a0ac <round+0x30>
 801a098:	3001      	adds	r0, #1
 801a09a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801a09e:	d103      	bne.n	801a0a8 <round+0x2c>
 801a0a0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a0a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	e02a      	b.n	801a102 <round+0x86>
 801a0ac:	4c16      	ldr	r4, [pc, #88]	; (801a108 <round+0x8c>)
 801a0ae:	4104      	asrs	r4, r0
 801a0b0:	ea03 0604 	and.w	r6, r3, r4
 801a0b4:	4316      	orrs	r6, r2
 801a0b6:	d011      	beq.n	801a0dc <round+0x60>
 801a0b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a0bc:	4103      	asrs	r3, r0
 801a0be:	440b      	add	r3, r1
 801a0c0:	ea23 0104 	bic.w	r1, r3, r4
 801a0c4:	e7f0      	b.n	801a0a8 <round+0x2c>
 801a0c6:	2833      	cmp	r0, #51	; 0x33
 801a0c8:	dd0b      	ble.n	801a0e2 <round+0x66>
 801a0ca:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a0ce:	d105      	bne.n	801a0dc <round+0x60>
 801a0d0:	ee10 0a10 	vmov	r0, s0
 801a0d4:	f7e6 f902 	bl	80002dc <__adddf3>
 801a0d8:	4602      	mov	r2, r0
 801a0da:	460b      	mov	r3, r1
 801a0dc:	ec43 2b10 	vmov	d0, r2, r3
 801a0e0:	bd70      	pop	{r4, r5, r6, pc}
 801a0e2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801a0e6:	f04f 34ff 	mov.w	r4, #4294967295
 801a0ea:	40f4      	lsrs	r4, r6
 801a0ec:	4214      	tst	r4, r2
 801a0ee:	d0f5      	beq.n	801a0dc <round+0x60>
 801a0f0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	4083      	lsls	r3, r0
 801a0f8:	195b      	adds	r3, r3, r5
 801a0fa:	bf28      	it	cs
 801a0fc:	3101      	addcs	r1, #1
 801a0fe:	ea23 0304 	bic.w	r3, r3, r4
 801a102:	461a      	mov	r2, r3
 801a104:	460b      	mov	r3, r1
 801a106:	e7e9      	b.n	801a0dc <round+0x60>
 801a108:	000fffff 	.word	0x000fffff

0801a10c <__ieee754_fmod>:
 801a10c:	ec53 2b11 	vmov	r2, r3, d1
 801a110:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a118:	ea5c 0402 	orrs.w	r4, ip, r2
 801a11c:	ec51 0b10 	vmov	r0, r1, d0
 801a120:	ee11 7a10 	vmov	r7, s2
 801a124:	ee11 ea10 	vmov	lr, s2
 801a128:	461e      	mov	r6, r3
 801a12a:	d00c      	beq.n	801a146 <__ieee754_fmod+0x3a>
 801a12c:	4c78      	ldr	r4, [pc, #480]	; (801a310 <__ieee754_fmod+0x204>)
 801a12e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801a132:	45a0      	cmp	r8, r4
 801a134:	4689      	mov	r9, r1
 801a136:	dc06      	bgt.n	801a146 <__ieee754_fmod+0x3a>
 801a138:	4254      	negs	r4, r2
 801a13a:	4d76      	ldr	r5, [pc, #472]	; (801a314 <__ieee754_fmod+0x208>)
 801a13c:	4314      	orrs	r4, r2
 801a13e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801a142:	42ac      	cmp	r4, r5
 801a144:	d909      	bls.n	801a15a <__ieee754_fmod+0x4e>
 801a146:	f7e6 fa7f 	bl	8000648 <__aeabi_dmul>
 801a14a:	4602      	mov	r2, r0
 801a14c:	460b      	mov	r3, r1
 801a14e:	f7e6 fba5 	bl	800089c <__aeabi_ddiv>
 801a152:	ec41 0b10 	vmov	d0, r0, r1
 801a156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a15a:	45e0      	cmp	r8, ip
 801a15c:	ee10 aa10 	vmov	sl, s0
 801a160:	ee10 4a10 	vmov	r4, s0
 801a164:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801a168:	dc09      	bgt.n	801a17e <__ieee754_fmod+0x72>
 801a16a:	dbf2      	blt.n	801a152 <__ieee754_fmod+0x46>
 801a16c:	4290      	cmp	r0, r2
 801a16e:	d3f0      	bcc.n	801a152 <__ieee754_fmod+0x46>
 801a170:	d105      	bne.n	801a17e <__ieee754_fmod+0x72>
 801a172:	4b69      	ldr	r3, [pc, #420]	; (801a318 <__ieee754_fmod+0x20c>)
 801a174:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801a178:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a17c:	e7e9      	b.n	801a152 <__ieee754_fmod+0x46>
 801a17e:	4a65      	ldr	r2, [pc, #404]	; (801a314 <__ieee754_fmod+0x208>)
 801a180:	ea19 0f02 	tst.w	r9, r2
 801a184:	d148      	bne.n	801a218 <__ieee754_fmod+0x10c>
 801a186:	f1b8 0f00 	cmp.w	r8, #0
 801a18a:	d13d      	bne.n	801a208 <__ieee754_fmod+0xfc>
 801a18c:	4963      	ldr	r1, [pc, #396]	; (801a31c <__ieee754_fmod+0x210>)
 801a18e:	4653      	mov	r3, sl
 801a190:	2b00      	cmp	r3, #0
 801a192:	dc36      	bgt.n	801a202 <__ieee754_fmod+0xf6>
 801a194:	4216      	tst	r6, r2
 801a196:	d14f      	bne.n	801a238 <__ieee754_fmod+0x12c>
 801a198:	f1bc 0f00 	cmp.w	ip, #0
 801a19c:	d144      	bne.n	801a228 <__ieee754_fmod+0x11c>
 801a19e:	4a5f      	ldr	r2, [pc, #380]	; (801a31c <__ieee754_fmod+0x210>)
 801a1a0:	463b      	mov	r3, r7
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	dc3d      	bgt.n	801a222 <__ieee754_fmod+0x116>
 801a1a6:	485e      	ldr	r0, [pc, #376]	; (801a320 <__ieee754_fmod+0x214>)
 801a1a8:	4281      	cmp	r1, r0
 801a1aa:	db4a      	blt.n	801a242 <__ieee754_fmod+0x136>
 801a1ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a1b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a1b4:	485a      	ldr	r0, [pc, #360]	; (801a320 <__ieee754_fmod+0x214>)
 801a1b6:	4282      	cmp	r2, r0
 801a1b8:	db57      	blt.n	801a26a <__ieee754_fmod+0x15e>
 801a1ba:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801a1be:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801a1c2:	1a89      	subs	r1, r1, r2
 801a1c4:	1b98      	subs	r0, r3, r6
 801a1c6:	eba4 070e 	sub.w	r7, r4, lr
 801a1ca:	2900      	cmp	r1, #0
 801a1cc:	d162      	bne.n	801a294 <__ieee754_fmod+0x188>
 801a1ce:	4574      	cmp	r4, lr
 801a1d0:	bf38      	it	cc
 801a1d2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801a1d6:	2800      	cmp	r0, #0
 801a1d8:	bfa4      	itt	ge
 801a1da:	463c      	movge	r4, r7
 801a1dc:	4603      	movge	r3, r0
 801a1de:	ea53 0104 	orrs.w	r1, r3, r4
 801a1e2:	d0c6      	beq.n	801a172 <__ieee754_fmod+0x66>
 801a1e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a1e8:	db69      	blt.n	801a2be <__ieee754_fmod+0x1b2>
 801a1ea:	494d      	ldr	r1, [pc, #308]	; (801a320 <__ieee754_fmod+0x214>)
 801a1ec:	428a      	cmp	r2, r1
 801a1ee:	db6c      	blt.n	801a2ca <__ieee754_fmod+0x1be>
 801a1f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a1f4:	432b      	orrs	r3, r5
 801a1f6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801a1fa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a1fe:	4620      	mov	r0, r4
 801a200:	e7a7      	b.n	801a152 <__ieee754_fmod+0x46>
 801a202:	3901      	subs	r1, #1
 801a204:	005b      	lsls	r3, r3, #1
 801a206:	e7c3      	b.n	801a190 <__ieee754_fmod+0x84>
 801a208:	4945      	ldr	r1, [pc, #276]	; (801a320 <__ieee754_fmod+0x214>)
 801a20a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801a20e:	2b00      	cmp	r3, #0
 801a210:	ddc0      	ble.n	801a194 <__ieee754_fmod+0x88>
 801a212:	3901      	subs	r1, #1
 801a214:	005b      	lsls	r3, r3, #1
 801a216:	e7fa      	b.n	801a20e <__ieee754_fmod+0x102>
 801a218:	ea4f 5128 	mov.w	r1, r8, asr #20
 801a21c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a220:	e7b8      	b.n	801a194 <__ieee754_fmod+0x88>
 801a222:	3a01      	subs	r2, #1
 801a224:	005b      	lsls	r3, r3, #1
 801a226:	e7bc      	b.n	801a1a2 <__ieee754_fmod+0x96>
 801a228:	4a3d      	ldr	r2, [pc, #244]	; (801a320 <__ieee754_fmod+0x214>)
 801a22a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801a22e:	2b00      	cmp	r3, #0
 801a230:	ddb9      	ble.n	801a1a6 <__ieee754_fmod+0x9a>
 801a232:	3a01      	subs	r2, #1
 801a234:	005b      	lsls	r3, r3, #1
 801a236:	e7fa      	b.n	801a22e <__ieee754_fmod+0x122>
 801a238:	ea4f 522c 	mov.w	r2, ip, asr #20
 801a23c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a240:	e7b1      	b.n	801a1a6 <__ieee754_fmod+0x9a>
 801a242:	1a40      	subs	r0, r0, r1
 801a244:	281f      	cmp	r0, #31
 801a246:	dc0a      	bgt.n	801a25e <__ieee754_fmod+0x152>
 801a248:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801a24c:	fa08 f800 	lsl.w	r8, r8, r0
 801a250:	fa2a f303 	lsr.w	r3, sl, r3
 801a254:	ea43 0308 	orr.w	r3, r3, r8
 801a258:	fa0a f400 	lsl.w	r4, sl, r0
 801a25c:	e7aa      	b.n	801a1b4 <__ieee754_fmod+0xa8>
 801a25e:	4b31      	ldr	r3, [pc, #196]	; (801a324 <__ieee754_fmod+0x218>)
 801a260:	1a5b      	subs	r3, r3, r1
 801a262:	fa0a f303 	lsl.w	r3, sl, r3
 801a266:	2400      	movs	r4, #0
 801a268:	e7a4      	b.n	801a1b4 <__ieee754_fmod+0xa8>
 801a26a:	1a80      	subs	r0, r0, r2
 801a26c:	281f      	cmp	r0, #31
 801a26e:	dc0a      	bgt.n	801a286 <__ieee754_fmod+0x17a>
 801a270:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801a274:	fa0c fc00 	lsl.w	ip, ip, r0
 801a278:	fa27 f606 	lsr.w	r6, r7, r6
 801a27c:	ea46 060c 	orr.w	r6, r6, ip
 801a280:	fa07 fe00 	lsl.w	lr, r7, r0
 801a284:	e79d      	b.n	801a1c2 <__ieee754_fmod+0xb6>
 801a286:	4e27      	ldr	r6, [pc, #156]	; (801a324 <__ieee754_fmod+0x218>)
 801a288:	1ab6      	subs	r6, r6, r2
 801a28a:	fa07 f606 	lsl.w	r6, r7, r6
 801a28e:	f04f 0e00 	mov.w	lr, #0
 801a292:	e796      	b.n	801a1c2 <__ieee754_fmod+0xb6>
 801a294:	4574      	cmp	r4, lr
 801a296:	bf38      	it	cc
 801a298:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801a29c:	2800      	cmp	r0, #0
 801a29e:	da05      	bge.n	801a2ac <__ieee754_fmod+0x1a0>
 801a2a0:	0fe0      	lsrs	r0, r4, #31
 801a2a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a2a6:	0064      	lsls	r4, r4, #1
 801a2a8:	3901      	subs	r1, #1
 801a2aa:	e78b      	b.n	801a1c4 <__ieee754_fmod+0xb8>
 801a2ac:	ea50 0307 	orrs.w	r3, r0, r7
 801a2b0:	f43f af5f 	beq.w	801a172 <__ieee754_fmod+0x66>
 801a2b4:	0ffb      	lsrs	r3, r7, #31
 801a2b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801a2ba:	007c      	lsls	r4, r7, #1
 801a2bc:	e7f4      	b.n	801a2a8 <__ieee754_fmod+0x19c>
 801a2be:	0fe1      	lsrs	r1, r4, #31
 801a2c0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a2c4:	0064      	lsls	r4, r4, #1
 801a2c6:	3a01      	subs	r2, #1
 801a2c8:	e78c      	b.n	801a1e4 <__ieee754_fmod+0xd8>
 801a2ca:	1a89      	subs	r1, r1, r2
 801a2cc:	2914      	cmp	r1, #20
 801a2ce:	dc0a      	bgt.n	801a2e6 <__ieee754_fmod+0x1da>
 801a2d0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801a2d4:	fa03 f202 	lsl.w	r2, r3, r2
 801a2d8:	40cc      	lsrs	r4, r1
 801a2da:	4322      	orrs	r2, r4
 801a2dc:	410b      	asrs	r3, r1
 801a2de:	ea43 0105 	orr.w	r1, r3, r5
 801a2e2:	4610      	mov	r0, r2
 801a2e4:	e735      	b.n	801a152 <__ieee754_fmod+0x46>
 801a2e6:	291f      	cmp	r1, #31
 801a2e8:	dc07      	bgt.n	801a2fa <__ieee754_fmod+0x1ee>
 801a2ea:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801a2ee:	40cc      	lsrs	r4, r1
 801a2f0:	fa03 f202 	lsl.w	r2, r3, r2
 801a2f4:	4322      	orrs	r2, r4
 801a2f6:	462b      	mov	r3, r5
 801a2f8:	e7f1      	b.n	801a2de <__ieee754_fmod+0x1d2>
 801a2fa:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801a2fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a302:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801a306:	32e2      	adds	r2, #226	; 0xe2
 801a308:	fa43 f202 	asr.w	r2, r3, r2
 801a30c:	e7f3      	b.n	801a2f6 <__ieee754_fmod+0x1ea>
 801a30e:	bf00      	nop
 801a310:	7fefffff 	.word	0x7fefffff
 801a314:	7ff00000 	.word	0x7ff00000
 801a318:	0801d0c8 	.word	0x0801d0c8
 801a31c:	fffffbed 	.word	0xfffffbed
 801a320:	fffffc02 	.word	0xfffffc02
 801a324:	fffffbe2 	.word	0xfffffbe2

0801a328 <_init>:
 801a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a32a:	bf00      	nop
 801a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a32e:	bc08      	pop	{r3}
 801a330:	469e      	mov	lr, r3
 801a332:	4770      	bx	lr

0801a334 <_fini>:
 801a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a336:	bf00      	nop
 801a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a33a:	bc08      	pop	{r3}
 801a33c:	469e      	mov	lr, r3
 801a33e:	4770      	bx	lr
