
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000185ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cb0  080187d0  080187d0  000287d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b480  0801b480  00030538  2**0
                  CONTENTS
  4 .ARM          00000008  0801b480  0801b480  0002b480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b488  0801b488  00030538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b488  0801b488  0002b488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b48c  0801b48c  0002b48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000538  20000000  0801b490  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e90  20000538  0801b9c8  00030538  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033c8  0801b9c8  000333c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030538  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030568  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f4a5  00000000  00000000  000305ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065b2  00000000  00000000  0005fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002990  00000000  00000000  00066008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fdc  00000000  00000000  00068998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028960  00000000  00000000  0006a974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035515  00000000  00000000  000932d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee748  00000000  00000000  000c87e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c334  00000000  00000000  001b6f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000538 	.word	0x20000538
 80001fc:	00000000 	.word	0x00000000
 8000200:	080187b4 	.word	0x080187b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000053c 	.word	0x2000053c
 800021c:	080187b4 	.word	0x080187b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fe2:	0adb      	lsrs	r3, r3, #11
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <FlashCheckCRC+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <FlashCheckCRC+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <FlashCheckCRC+0x70>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <FlashCheckCRC+0x74>)
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <FlashCheckCRC+0x78>)
 8001028:	f006 ffe4 	bl	8007ff4 <HAL_CRC_Calculate>
 800102c:	4603      	mov	r3, r0
 800102e:	2200      	movs	r2, #0
 8001030:	461c      	mov	r4, r3
 8001032:	4615      	mov	r5, r2
 8001034:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800103e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	4299      	cmp	r1, r3
 800104c:	bf08      	it	eq
 800104e:	4290      	cmpeq	r0, r2
 8001050:	d101      	bne.n	8001056 <FlashCheckCRC+0x66>
	{
		return true;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <FlashCheckCRC+0x68>
	}
	return false;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	0801f000 	.word	0x0801f000
 8001068:	20001b44 	.word	0x20001b44

0800106c <FlashReadToBuf>:


bool FlashReadToBuf()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <FlashReadToBuf+0x88>)
 8001078:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 800107a:	f7ff ffb9 	bl	8000ff0 <FlashCheckCRC>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d031      	beq.n	80010e8 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8001084:	e025      	b.n	80010d2 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e013      	b.n	80010c0 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d208      	bcs.n	80010ba <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	1d39      	adds	r1, r7, #4
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	7811      	ldrb	r1, [r2, #0]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <FlashReadToBuf+0x90>)
 80010b8:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	dde8      	ble.n	8001098 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3308      	adds	r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
			i = i + 8;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3308      	adds	r3, #8
 80010d0:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d203      	bcs.n	80010e4 <FlashReadToBuf+0x78>
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <FlashReadToBuf+0x94>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d3d0      	bcc.n	8001086 <FlashReadToBuf+0x1a>
		}
		return true;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <FlashReadToBuf+0x7e>
	}
	return false;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0801f000 	.word	0x0801f000
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000558 	.word	0x20000558
 8001100:	0801ffff 	.word	0x0801ffff

08001104 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 800110c:	f7ff ffae 	bl	800106c <FlashReadToBuf>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <FlashRead+0x30>)
 800111a:	4618      	mov	r0, r3
 800111c:	4611      	mov	r1, r2
 800111e:	2348      	movs	r3, #72	; 0x48
 8001120:	461a      	mov	r2, r3
 8001122:	f015 f948 	bl	80163b6 <memcpy>
		return true;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <FlashRead+0x28>
	}
	return false;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000558 	.word	0x20000558

08001138 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8001140:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <FlashWrite+0x170>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 8001156:	4b55      	ldr	r3, [pc, #340]	; (80012ac <FlashWrite+0x174>)
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 800116e:	f7ff ff7d 	bl	800106c <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8001172:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <FlashWrite+0x178>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	2348      	movs	r3, #72	; 0x48
 800117c:	461a      	mov	r2, r3
 800117e:	f015 f91a 	bl	80163b6 <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 8001182:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <FlashWrite+0x17c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4949      	ldr	r1, [pc, #292]	; (80012b0 <FlashWrite+0x178>)
 800118a:	484b      	ldr	r0, [pc, #300]	; (80012b8 <FlashWrite+0x180>)
 800118c:	f006 ff32 	bl	8007ff4 <HAL_CRC_Calculate>
 8001190:	4603      	mov	r3, r0
 8001192:	2200      	movs	r2, #0
 8001194:	461c      	mov	r4, r3
 8001196:	4615      	mov	r5, r2
 8001198:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 800119c:	f007 fc12 	bl	80089c4 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <FlashWrite+0x184>)
 80011a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a6:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 80011a8:	4845      	ldr	r0, [pc, #276]	; (80012c0 <FlashWrite+0x188>)
 80011aa:	f7ff ff13 	bl	8000fd4 <GetPage>
 80011ae:	4604      	mov	r4, r0
 80011b0:	483e      	ldr	r0, [pc, #248]	; (80012ac <FlashWrite+0x174>)
 80011b2:	f7ff ff0f 	bl	8000fd4 <GetPage>
 80011b6:	4603      	mov	r3, r0
 80011b8:	1ae3      	subs	r3, r4, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <FlashWrite+0x18c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <FlashWrite+0x18c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 80011ca:	4838      	ldr	r0, [pc, #224]	; (80012ac <FlashWrite+0x174>)
 80011cc:	f7ff ff02 	bl	8000fd4 <GetPage>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <FlashWrite+0x18c>)
 80011d4:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <FlashWrite+0x18c>)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4838      	ldr	r0, [pc, #224]	; (80012c4 <FlashWrite+0x18c>)
 80011e4:	f007 fcda 	bl	8008b9c <HAL_FLASHEx_Erase>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d152      	bne.n	8001294 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 80011ee:	e04b      	b.n	8001288 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
 80011f4:	e01b      	b.n	800122e <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	4413      	add	r3, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <FlashWrite+0x17c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20a      	bcs.n	800121c <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	441a      	add	r2, r3
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	f107 0108 	add.w	r1, r7, #8
 8001212:	440b      	add	r3, r1
 8001214:	4926      	ldr	r1, [pc, #152]	; (80012b0 <FlashWrite+0x178>)
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e005      	b.n	8001228 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	f107 0208 	add.w	r2, r7, #8
 8001222:	4413      	add	r3, r2
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	3301      	adds	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	2b07      	cmp	r3, #7
 8001232:	dde0      	ble.n	80011f6 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 8001234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <FlashWrite+0x17c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d20f      	bcs.n	800125e <FlashWrite+0x126>
 800123e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001244:	2000      	movs	r0, #0
 8001246:	f007 fb51 	bl	80088ec <HAL_FLASH_Program>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d106      	bne.n	800125e <FlashWrite+0x126>
			{
				Address = Address + 8;
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	3308      	adds	r3, #8
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	3308      	adds	r3, #8
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125c:	e014      	b.n	8001288 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 800125e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <FlashWrite+0x17c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d314      	bcc.n	8001292 <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8001268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800126c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800126e:	2000      	movs	r0, #0
 8001270:	f007 fb3c 	bl	80088ec <HAL_FLASH_Program>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 800127a:	f007 fbc5 	bl	8008a08 <HAL_FLASH_Lock>
					flashWriting = 0;
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <FlashWrite+0x170>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
					return true;
 8001284:	2301      	movs	r3, #1
 8001286:	e00b      	b.n	80012a0 <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <FlashWrite+0x188>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d3af      	bcc.n	80011f0 <FlashWrite+0xb8>
 8001290:	e000      	b.n	8001294 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 8001292:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001294:	f007 fbb8 	bl	8008a08 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <FlashWrite+0x170>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	return false;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}
 80012a8:	20000554 	.word	0x20000554
 80012ac:	0801f000 	.word	0x0801f000
 80012b0:	20000558 	.word	0x20000558
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20001b44 	.word	0x20001b44
 80012bc:	40022000 	.word	0x40022000
 80012c0:	0801ffff 	.word	0x0801ffff
 80012c4:	200005a0 	.word	0x200005a0

080012c8 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	ed87 0b04 	vstr	d0, [r7, #16]
 80012d2:	ed87 1b02 	vstr	d1, [r7, #8]
 80012d6:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 80012da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e2:	f7ff fc23 	bl	8000b2c <__aeabi_dcmplt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <clamp+0x2a>
 80012ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f0:	e001      	b.n	80012f6 <clamp+0x2e>
 80012f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 80012fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001302:	f7ff fc31 	bl	8000b68 <__aeabi_dcmpgt>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <clamp+0x4a>
 800130c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001310:	e001      	b.n	8001316 <clamp+0x4e>
 8001312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001316:	ec43 2b17 	vmov	d7, r2, r3
}
 800131a:	eeb0 0a47 	vmov.f32	s0, s14
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <get_mean_ADC_reading_indexed+0x70>)
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e012      	b.n	8001366 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <get_mean_ADC_reading_indexed+0x74>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <get_mean_ADC_reading_indexed+0x70>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <get_mean_ADC_reading_indexed+0x70>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3303      	adds	r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b3b      	cmp	r3, #59	; 0x3b
 800136a:	dde9      	ble.n	8001340 <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <get_mean_ADC_reading_indexed+0x70>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f911 	bl	8000598 <__aeabi_f2d>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <get_mean_ADC_reading_indexed+0x78>)
 800137c:	f7ff fa8e 	bl	800089c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	ec43 2b17 	vmov	d7, r2, r3
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000620 	.word	0x20000620
 800139c:	20000624 	.word	0x20000624
 80013a0:	40340000 	.word	0x40340000
 80013a4:	00000000 	.word	0x00000000

080013a8 <get_mcu_temp>:

void get_mcu_temp(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff ffbb 	bl	8001328 <get_mean_ADC_reading_indexed>
 80013b2:	ec51 0b10 	vmov	r0, r1, d0
 80013b6:	a328      	add	r3, pc, #160	; (adr r3, 8001458 <get_mcu_temp+0xb0>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f944 	bl	8000648 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <get_mcu_temp+0xa0>)
 80013ce:	f7ff fa65 	bl	800089c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	a317      	add	r3, pc, #92	; (adr r3, 8001438 <get_mcu_temp+0x90>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7fe ff7a 	bl	80002d8 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	a314      	add	r3, pc, #80	; (adr r3, 8001440 <get_mcu_temp+0x98>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff fa53 	bl	800089c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <get_mcu_temp+0xa4>)
 8001404:	f7fe ff6a 	bl	80002dc <__adddf3>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fbf2 	bl	8000bf8 <__aeabi_d2uiz>
 8001414:	4603      	mov	r3, r0
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <get_mcu_temp+0xa8>)
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fd85 	bl	8003f28 <Moving_Average_Compute>
 800141e:	ec53 2b10 	vmov	r2, r3, d0
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fc07 	bl	8000c38 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <get_mcu_temp+0xac>)
 800142e:	6193      	str	r3, [r2, #24]
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	851eb852 	.word	0x851eb852
 800143c:	3fe851eb 	.word	0x3fe851eb
 8001440:	47ae147b 	.word	0x47ae147b
 8001444:	3f647ae1 	.word	0x3f647ae1
 8001448:	40b00000 	.word	0x40b00000
 800144c:	40390000 	.word	0x40390000
 8001450:	20000a30 	.word	0x20000a30
 8001454:	20000030 	.word	0x20000030
 8001458:	66666666 	.word	0x66666666
 800145c:	400a6666 	.word	0x400a6666

08001460 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	02db      	lsls	r3, r3, #11
 800146e:	b21a      	sxth	r2, r3
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	b29b      	uxth	r3, r3
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	b29b      	uxth	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <change_state>:

void change_state(mainstates new_state){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <change_state+0x58>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <change_state+0x5c>)
 800149c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 80014a0:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <change_state+0x58>)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <change_state+0x58>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d110      	bne.n	80014d0 <change_state+0x44>
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <change_state+0x60>)
 80014b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <change_state+0x64>)
 80014ba:	f7ff fb2d 	bl	8000b18 <__aeabi_dcmpeq>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2104      	movs	r1, #4
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <change_state+0x68>)
 80014ca:	f007 fe25 	bl	8009118 <HAL_GPIO_WritePin>
 80014ce:	e005      	b.n	80014dc <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <change_state+0x68>)
 80014d6:	f007 fe1f 	bl	8009118 <HAL_GPIO_WritePin>
	}
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000001d 	.word	0x2000001d
 80014e8:	20000030 	.word	0x20000030
 80014ec:	200006a0 	.word	0x200006a0
 80014f0:	3ff00000 	.word	0x3ff00000
 80014f4:	48000400 	.word	0x48000400

080014f8 <get_bus_voltage>:

void get_bus_voltage(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff ff13 	bl	8001328 <get_mean_ADC_reading_indexed>
 8001502:	ec53 2b10 	vmov	r2, r3, d0
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb75 	bl	8000bf8 <__aeabi_d2uiz>
 800150e:	4603      	mov	r3, r0
 8001510:	490d      	ldr	r1, [pc, #52]	; (8001548 <get_bus_voltage+0x50>)
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fd08 	bl	8003f28 <Moving_Average_Compute>
 8001518:	ec51 0b10 	vmov	r0, r1, d0
 800151c:	a308      	add	r3, pc, #32	; (adr r3, 8001540 <get_bus_voltage+0x48>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f891 	bl	8000648 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb83 	bl	8000c38 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <get_bus_voltage+0x54>)
 8001536:	6113      	str	r3, [r2, #16]
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	f3af 8000 	nop.w
 8001540:	ada68bd9 	.word	0xada68bd9
 8001544:	3f813656 	.word	0x3f813656
 8001548:	20000d5c 	.word	0x20000d5c
 800154c:	20000030 	.word	0x20000030

08001550 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fee6 	bl	8001328 <get_mean_ADC_reading_indexed>
 800155c:	ec53 2b10 	vmov	r2, r3, d0
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fb48 	bl	8000bf8 <__aeabi_d2uiz>
 8001568:	4603      	mov	r3, r0
 800156a:	4977      	ldr	r1, [pc, #476]	; (8001748 <get_thermocouple_temperature+0x1f8>)
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fcdb 	bl	8003f28 <Moving_Average_Compute>
 8001572:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <get_thermocouple_temperature+0x1fc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d12e      	bne.n	80015dc <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 800157e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001586:	f7ff f85f 	bl	8000648 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	a357      	add	r3, pc, #348	; (adr r3, 80016f0 <get_thermocouple_temperature+0x1a0>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f856 	bl	8000648 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4614      	mov	r4, r2
 80015a2:	461d      	mov	r5, r3
 80015a4:	a354      	add	r3, pc, #336	; (adr r3, 80016f8 <get_thermocouple_temperature+0x1a8>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ae:	f7ff f84b 	bl	8000648 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7fe fe8f 	bl	80002dc <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	a34e      	add	r3, pc, #312	; (adr r3, 8001700 <get_thermocouple_temperature+0x1b0>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fe86 	bl	80002dc <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	495e      	ldr	r1, [pc, #376]	; (8001750 <get_thermocouple_temperature+0x200>)
 80015d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80015da:	e064      	b.n	80016a6 <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 80015dc:	4b5b      	ldr	r3, [pc, #364]	; (800174c <get_thermocouple_temperature+0x1fc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d12e      	bne.n	8001642 <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80015e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ec:	f7ff f82c 	bl	8000648 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	a343      	add	r3, pc, #268	; (adr r3, 8001708 <get_thermocouple_temperature+0x1b8>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f823 	bl	8000648 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	a341      	add	r3, pc, #260	; (adr r3, 8001710 <get_thermocouple_temperature+0x1c0>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001614:	f7ff f818 	bl	8000648 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7fe fe5c 	bl	80002dc <__adddf3>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	a33a      	add	r3, pc, #232	; (adr r3, 8001718 <get_thermocouple_temperature+0x1c8>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe fe53 	bl	80002dc <__adddf3>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4945      	ldr	r1, [pc, #276]	; (8001750 <get_thermocouple_temperature+0x200>)
 800163c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001640:	e031      	b.n	80016a6 <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <get_thermocouple_temperature+0x1fc>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d12d      	bne.n	80016a6 <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 800164a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800164e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001652:	f7fe fff9 	bl	8000648 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	a330      	add	r3, pc, #192	; (adr r3, 8001720 <get_thermocouple_temperature+0x1d0>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fff0 	bl	8000648 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	a32d      	add	r3, pc, #180	; (adr r3, 8001728 <get_thermocouple_temperature+0x1d8>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167a:	f7fe ffe5 	bl	8000648 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7fe fe29 	bl	80002dc <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	a327      	add	r3, pc, #156	; (adr r3, 8001730 <get_thermocouple_temperature+0x1e0>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe fe20 	bl	80002dc <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	492b      	ldr	r1, [pc, #172]	; (8001750 <get_thermocouple_temperature+0x200>)
 80016a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <get_thermocouple_temperature+0x200>)
 80016a8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ac:	4b29      	ldr	r3, [pc, #164]	; (8001754 <get_thermocouple_temperature+0x204>)
 80016ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016b2:	f7fe fe13 	bl	80002dc <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4925      	ldr	r1, [pc, #148]	; (8001750 <get_thermocouple_temperature+0x200>)
 80016bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <get_thermocouple_temperature+0x200>)
 80016c2:	ed93 7b02 	vldr	d7, [r3, #8]
 80016c6:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8001738 <get_thermocouple_temperature+0x1e8>
 80016ca:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001740 <get_thermocouple_temperature+0x1f0>
 80016ce:	eeb0 0a47 	vmov.f32	s0, s14
 80016d2:	eef0 0a67 	vmov.f32	s1, s15
 80016d6:	f7ff fdf7 	bl	80012c8 <clamp>
 80016da:	eeb0 7a40 	vmov.f32	s14, s0
 80016de:	eef0 7a60 	vmov.f32	s15, s1
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <get_thermocouple_temperature+0x200>)
 80016e4:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	92e63abf 	.word	0x92e63abf
 80016f4:	3ee1b6ee 	.word	0x3ee1b6ee
 80016f8:	1a8bcf67 	.word	0x1a8bcf67
 80016fc:	3fd3ea38 	.word	0x3fd3ea38
 8001700:	ef80bf90 	.word	0xef80bf90
 8001704:	403810db 	.word	0x403810db
 8001708:	82fead10 	.word	0x82fead10
 800170c:	3ea7dc92 	.word	0x3ea7dc92
 8001710:	c53ce03f 	.word	0xc53ce03f
 8001714:	3fbd94aa 	.word	0x3fbd94aa
 8001718:	34da2134 	.word	0x34da2134
 800171c:	403a2648 	.word	0x403a2648
 8001720:	202b3c5a 	.word	0x202b3c5a
 8001724:	3f0edf88 	.word	0x3f0edf88
 8001728:	15fb4706 	.word	0x15fb4706
 800172c:	3fda2f75 	.word	0x3fda2f75
 8001730:	53430524 	.word	0x53430524
 8001734:	40381413 	.word	0x40381413
 8001738:	00000000 	.word	0x00000000
 800173c:	408f3800 	.word	0x408f3800
	...
 8001748:	20000704 	.word	0x20000704
 800174c:	200005b0 	.word	0x200005b0
 8001750:	20000030 	.word	0x20000030
 8001754:	200006a0 	.word	0x200006a0

08001758 <settings_menue>:

void settings_menue(){
 8001758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800175c:	b08d      	sub	sp, #52	; 0x34
 800175e:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001760:	2120      	movs	r1, #32
 8001762:	48c1      	ldr	r0, [pc, #772]	; (8001a68 <settings_menue+0x310>)
 8001764:	f007 fcc0 	bl	80090e8 <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	f040 82cb 	bne.w	8001d06 <settings_menue+0x5ae>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001770:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001774:	f7ff fe74 	bl	8001460 <RGB_to_BRG>
 8001778:	4603      	mov	r3, r0
 800177a:	461c      	mov	r4, r3
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fe6f 	bl	8001460 <RGB_to_BRG>
 8001782:	4603      	mov	r3, r0
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	9400      	str	r4, [sp, #0]
 8001788:	4bb8      	ldr	r3, [pc, #736]	; (8001a6c <settings_menue+0x314>)
 800178a:	4ab9      	ldr	r2, [pc, #740]	; (8001a70 <settings_menue+0x318>)
 800178c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001790:	2000      	movs	r0, #0
 8001792:	f004 f933 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001796:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800179a:	f7ff fe61 	bl	8001460 <RGB_to_BRG>
 800179e:	4603      	mov	r3, r0
 80017a0:	461c      	mov	r4, r3
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fe5c 	bl	8001460 <RGB_to_BRG>
 80017a8:	4603      	mov	r3, r0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	9400      	str	r4, [sp, #0]
 80017ae:	4baf      	ldr	r3, [pc, #700]	; (8001a6c <settings_menue+0x314>)
 80017b0:	4ab0      	ldr	r2, [pc, #704]	; (8001a74 <settings_menue+0x31c>)
 80017b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017b6:	2096      	movs	r0, #150	; 0x96
 80017b8:	f004 f920 	bl	80059fc <LCD_PutStr>

		TIM2->CNT = 1000;
 80017bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80017e0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80017e4:	f7ff fe3c 	bl	8001460 <RGB_to_BRG>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461c      	mov	r4, r3
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fe37 	bl	8001460 <RGB_to_BRG>
 80017f2:	4603      	mov	r3, r0
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	9400      	str	r4, [sp, #0]
 80017f8:	4b9c      	ldr	r3, [pc, #624]	; (8001a6c <settings_menue+0x314>)
 80017fa:	4a9f      	ldr	r2, [pc, #636]	; (8001a78 <settings_menue+0x320>)
 80017fc:	210c      	movs	r1, #12
 80017fe:	203c      	movs	r0, #60	; 0x3c
 8001800:	f004 f8fc 	bl	80059fc <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001804:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001808:	f7ff fe2a 	bl	8001460 <RGB_to_BRG>
 800180c:	4603      	mov	r3, r0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2328      	movs	r3, #40	; 0x28
 8001812:	22f0      	movs	r2, #240	; 0xf0
 8001814:	2128      	movs	r1, #40	; 0x28
 8001816:	2000      	movs	r0, #0
 8001818:	f004 f8b2 	bl	8005980 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 800181c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001820:	f7ff fe1e 	bl	8001460 <RGB_to_BRG>
 8001824:	4603      	mov	r3, r0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2329      	movs	r3, #41	; 0x29
 800182a:	22f0      	movs	r2, #240	; 0xf0
 800182c:	2129      	movs	r1, #41	; 0x29
 800182e:	2000      	movs	r0, #0
 8001830:	f004 f8a6 	bl	8005980 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001834:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001838:	f7ff fe12 	bl	8001460 <RGB_to_BRG>
 800183c:	4603      	mov	r3, r0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	232a      	movs	r3, #42	; 0x2a
 8001842:	22f0      	movs	r2, #240	; 0xf0
 8001844:	212a      	movs	r1, #42	; 0x2a
 8001846:	2000      	movs	r0, #0
 8001848:	f004 f89a 	bl	8005980 <LCD_DrawLine>

		HAL_Delay(500);
 800184c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001850:	f004 f9ee 	bl	8005c30 <HAL_Delay>
		while(menu_active == 1){
 8001854:	e253      	b.n	8001cfe <settings_menue+0x5a6>
			if(menue_level == 0){
 8001856:	8c3b      	ldrh	r3, [r7, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d120      	bne.n	800189e <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 800185c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe76 	bl	8000554 <__aeabi_ui2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8001a50 <settings_menue+0x2f8>
 8001870:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001a58 <settings_menue+0x300>
 8001874:	ec43 2b10 	vmov	d0, r2, r3
 8001878:	f7ff fd26 	bl	80012c8 <clamp>
 800187c:	ec53 2b10 	vmov	r2, r3, d0
 8001880:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f9b6 	bl	8000bf8 <__aeabi_d2uiz>
 800188c:	4603      	mov	r3, r0
 800188e:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 800189e:	8c3b      	ldrh	r3, [r7, #32]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	f040 8091 	bne.w	80019c8 <settings_menue+0x270>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 80018a6:	69b8      	ldr	r0, [r7, #24]
 80018a8:	f7fe fe76 	bl	8000598 <__aeabi_f2d>
 80018ac:	4604      	mov	r4, r0
 80018ae:	460d      	mov	r5, r1
 80018b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe4c 	bl	8000554 <__aeabi_ui2d>
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <settings_menue+0x324>)
 80018c2:	f7fe fd09 	bl	80002d8 <__aeabi_dsub>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f9b3 	bl	8000c38 <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe5f 	bl	8000598 <__aeabi_f2d>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e2:	f7fe ffdb 	bl	800089c <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fcf5 	bl	80002dc <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4690      	mov	r8, r2
 80018f8:	4699      	mov	r9, r3
 80018fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fe46 	bl	8000598 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001912:	00c9      	lsls	r1, r1, #3
 8001914:	485a      	ldr	r0, [pc, #360]	; (8001a80 <settings_menue+0x328>)
 8001916:	180c      	adds	r4, r1, r0
 8001918:	4640      	mov	r0, r8
 800191a:	4649      	mov	r1, r9
 800191c:	f7fe fcdc 	bl	80002d8 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800192a:	2b05      	cmp	r3, #5
 800192c:	d002      	beq.n	8001934 <settings_menue+0x1dc>
 800192e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001930:	2b08      	cmp	r3, #8
 8001932:	d12c      	bne.n	800198e <settings_menue+0x236>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001934:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <settings_menue+0x328>)
 800193a:	4413      	add	r3, r2
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f930 	bl	8000ba8 <__aeabi_d2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	bfb8      	it	lt
 800194e:	425b      	neglt	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe0f 	bl	8000574 <__aeabi_i2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001a60 <settings_menue+0x308>
 800195e:	ec43 2b10 	vmov	d0, r2, r3
 8001962:	f016 fda3 	bl	80184ac <fmod>
 8001966:	eeb0 7a40 	vmov.f32	s14, s0
 800196a:	eef0 7a60 	vmov.f32	s15, s1
 800196e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4a43      	ldr	r2, [pc, #268]	; (8001a80 <settings_menue+0x328>)
 8001974:	189c      	adds	r4, r3, r2
 8001976:	eeb0 0a47 	vmov.f32	s0, s14
 800197a:	eef0 0a67 	vmov.f32	s1, s15
 800197e:	f016 fdc3 	bl	8018508 <round>
 8001982:	eeb0 7a40 	vmov.f32	s14, s0
 8001986:	eef0 7a60 	vmov.f32	s15, s1
 800198a:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 800198e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001990:	2b01      	cmp	r3, #1
 8001992:	d019      	beq.n	80019c8 <settings_menue+0x270>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <settings_menue+0x328>)
 800199a:	4413      	add	r3, r2
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f900 	bl	8000ba8 <__aeabi_d2iz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019ae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4932      	ldr	r1, [pc, #200]	; (8001a80 <settings_menue+0x328>)
 80019b8:	185c      	adds	r4, r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7fe fdda 	bl	8000574 <__aeabi_i2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 80019c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ca:	2b0b      	cmp	r3, #11
 80019cc:	d906      	bls.n	80019dc <settings_menue+0x284>
							menu_cursor_position = menu_length-1;
 80019ce:	230b      	movs	r3, #11
 80019d0:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 80019d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 80019dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d903      	bls.n	80019ea <settings_menue+0x292>
				menue_start = menu_cursor_position-7;
 80019e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019e4:	3b07      	subs	r3, #7
 80019e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80019e8:	e001      	b.n	80019ee <settings_menue+0x296>
			}
			else{
				menue_start = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 80019ee:	2120      	movs	r1, #32
 80019f0:	481d      	ldr	r0, [pc, #116]	; (8001a68 <settings_menue+0x310>)
 80019f2:	f007 fb79 	bl	80090e8 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d143      	bne.n	8001a84 <settings_menue+0x32c>
 80019fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d840      	bhi.n	8001a84 <settings_menue+0x32c>
				if(menue_level == 0){
 8001a02:	8c3b      	ldrh	r3, [r7, #32]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <settings_menue+0x2cc>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <settings_menue+0x328>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f90e 	bl	8000c38 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001a20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a22:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001a24:	8c3b      	ldrh	r3, [r7, #32]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d106      	bne.n	8001a38 <settings_menue+0x2e0>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a30:	005a      	lsls	r2, r3, #1
 8001a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001a38:	8c3b      	ldrh	r3, [r7, #32]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bfb8      	it	lt
 8001a40:	425b      	neglt	r3, r3
 8001a42:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001a44:	20c8      	movs	r0, #200	; 0xc8
 8001a46:	f004 f8f3 	bl	8005c30 <HAL_Delay>
 8001a4a:	e04a      	b.n	8001ae2 <settings_menue+0x38a>
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	412e8480 	.word	0x412e8480
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	408f4000 	.word	0x408f4000
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40000000 	.word	0x40000000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	08019998 	.word	0x08019998
 8001a70:	080187d0 	.word	0x080187d0
 8001a74:	080187dc 	.word	0x080187dc
 8001a78:	080187e4 	.word	0x080187e4
 8001a7c:	408f4000 	.word	0x408f4000
 8001a80:	200006a0 	.word	0x200006a0
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001a84:	2120      	movs	r1, #32
 8001a86:	48a4      	ldr	r0, [pc, #656]	; (8001d18 <settings_menue+0x5c0>)
 8001a88:	f007 fb2e 	bl	80090e8 <HAL_GPIO_ReadPin>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <settings_menue+0x346>
 8001a92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a94:	2b0b      	cmp	r3, #11
 8001a96:	d102      	bne.n	8001a9e <settings_menue+0x346>
				menu_active = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	83fb      	strh	r3, [r7, #30]
 8001a9c:	e021      	b.n	8001ae2 <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	489d      	ldr	r0, [pc, #628]	; (8001d18 <settings_menue+0x5c0>)
 8001aa2:	f007 fb21 	bl	80090e8 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <settings_menue+0x366>
 8001aac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aae:	2b0a      	cmp	r3, #10
 8001ab0:	d105      	bne.n	8001abe <settings_menue+0x366>
				menu_active = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001ab6:	4899      	ldr	r0, [pc, #612]	; (8001d1c <settings_menue+0x5c4>)
 8001ab8:	f7ff fb3e 	bl	8001138 <FlashWrite>
 8001abc:	e011      	b.n	8001ae2 <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001abe:	2120      	movs	r1, #32
 8001ac0:	4895      	ldr	r0, [pc, #596]	; (8001d18 <settings_menue+0x5c0>)
 8001ac2:	f007 fb11 	bl	80090e8 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10a      	bne.n	8001ae2 <settings_menue+0x38a>
 8001acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d107      	bne.n	8001ae2 <settings_menue+0x38a>
				flash_values = default_flash_values;
 8001ad2:	4a92      	ldr	r2, [pc, #584]	; (8001d1c <settings_menue+0x5c4>)
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <settings_menue+0x5c8>)
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2348      	movs	r3, #72	; 0x48
 8001adc:	461a      	mov	r2, r3
 8001ade:	f014 fc6a 	bl	80163b6 <memcpy>
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e104      	b.n	8001cf2 <settings_menue+0x59a>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d12b      	bne.n	8001b48 <settings_menue+0x3f0>
 8001af0:	8c3b      	ldrh	r3, [r7, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d128      	bne.n	8001b48 <settings_menue+0x3f0>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	0091      	lsls	r1, r2, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	332d      	adds	r3, #45	; 0x2d
 8001b12:	b29c      	uxth	r4, r3
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4a81      	ldr	r2, [pc, #516]	; (8001d24 <settings_menue+0x5cc>)
 8001b20:	189d      	adds	r5, r3, r2
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fc9c 	bl	8001460 <RGB_to_BRG>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461e      	mov	r6, r3
 8001b2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b30:	f7ff fc96 	bl	8001460 <RGB_to_BRG>
 8001b34:	4603      	mov	r3, r0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9600      	str	r6, [sp, #0]
 8001b3a:	4b7b      	ldr	r3, [pc, #492]	; (8001d28 <settings_menue+0x5d0>)
 8001b3c:	462a      	mov	r2, r5
 8001b3e:	4621      	mov	r1, r4
 8001b40:	2005      	movs	r0, #5
 8001b42:	f003 ff5b 	bl	80059fc <LCD_PutStr>
 8001b46:	e027      	b.n	8001b98 <settings_menue+0x440>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001b48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	461a      	mov	r2, r3
 8001b58:	0091      	lsls	r1, r2, #2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	332d      	adds	r3, #45	; 0x2d
 8001b64:	b29c      	uxth	r4, r3
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4a6c      	ldr	r2, [pc, #432]	; (8001d24 <settings_menue+0x5cc>)
 8001b72:	189d      	adds	r5, r3, r2
 8001b74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b78:	f7ff fc72 	bl	8001460 <RGB_to_BRG>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461e      	mov	r6, r3
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fc6d 	bl	8001460 <RGB_to_BRG>
 8001b86:	4603      	mov	r3, r0
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	9600      	str	r6, [sp, #0]
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <settings_menue+0x5d0>)
 8001b8e:	462a      	mov	r2, r5
 8001b90:	4621      	mov	r1, r4
 8001b92:	2005      	movs	r0, #5
 8001b94:	f003 ff32 	bl	80059fc <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2214      	movs	r2, #20
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f014 fb89 	bl	80162b6 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4a5c      	ldr	r2, [pc, #368]	; (8001d1c <settings_menue+0x5c4>)
 8001baa:	4413      	add	r3, r2
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	4638      	mov	r0, r7
 8001bb2:	495e      	ldr	r1, [pc, #376]	; (8001d2c <settings_menue+0x5d4>)
 8001bb4:	f014 fb1c 	bl	80161f0 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <settings_menue+0x5c4>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <settings_menue+0x5d8>)
 8001bca:	f7fe ffaf 	bl	8000b2c <__aeabi_dcmplt>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <settings_menue+0x48e>
					str[1] = 32;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001be0:	2320      	movs	r3, #32
 8001be2:	713b      	strb	r3, [r7, #4]
 8001be4:	e011      	b.n	8001c0a <settings_menue+0x4b2>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <settings_menue+0x5c4>)
 8001bec:	4413      	add	r3, r2
 8001bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf2:	a347      	add	r3, pc, #284	; (adr r3, 8001d10 <settings_menue+0x5b8>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe ff98 	bl	8000b2c <__aeabi_dcmplt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <settings_menue+0x4b2>
					str[2] = 32;
 8001c02:	2320      	movs	r3, #32
 8001c04:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001c06:	2320      	movs	r3, #32
 8001c08:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	dc49      	bgt.n	8001ca4 <settings_menue+0x54c>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d124      	bne.n	8001c62 <settings_menue+0x50a>
 8001c18:	8c3b      	ldrh	r3, [r7, #32]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d121      	bne.n	8001c62 <settings_menue+0x50a>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	0091      	lsls	r1, r2, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	460b      	mov	r3, r1
 8001c34:	4413      	add	r3, r2
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	332d      	adds	r3, #45	; 0x2d
 8001c3a:	b29c      	uxth	r4, r3
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff fc0f 	bl	8001460 <RGB_to_BRG>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461d      	mov	r5, r3
 8001c46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c4a:	f7ff fc09 	bl	8001460 <RGB_to_BRG>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	463a      	mov	r2, r7
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	9500      	str	r5, [sp, #0]
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <settings_menue+0x5d0>)
 8001c58:	4621      	mov	r1, r4
 8001c5a:	20c8      	movs	r0, #200	; 0xc8
 8001c5c:	f003 fece 	bl	80059fc <LCD_PutStr>
 8001c60:	e020      	b.n	8001ca4 <settings_menue+0x54c>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001c62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	0091      	lsls	r1, r2, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	460b      	mov	r3, r1
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	332d      	adds	r3, #45	; 0x2d
 8001c7e:	b29c      	uxth	r4, r3
 8001c80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c84:	f7ff fbec 	bl	8001460 <RGB_to_BRG>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff fbe7 	bl	8001460 <RGB_to_BRG>
 8001c92:	4603      	mov	r3, r0
 8001c94:	463a      	mov	r2, r7
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	9500      	str	r5, [sp, #0]
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <settings_menue+0x5d0>)
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	20c8      	movs	r0, #200	; 0xc8
 8001ca0:	f003 feac 	bl	80059fc <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	dd20      	ble.n	8001cec <settings_menue+0x594>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001caa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	0091      	lsls	r1, r2, #2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	332d      	adds	r3, #45	; 0x2d
 8001cc6:	b29c      	uxth	r4, r3
 8001cc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ccc:	f7ff fbc8 	bl	8001460 <RGB_to_BRG>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fbc3 	bl	8001460 <RGB_to_BRG>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	9500      	str	r5, [sp, #0]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <settings_menue+0x5d0>)
 8001ce2:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <settings_menue+0x5dc>)
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	20c8      	movs	r0, #200	; 0xc8
 8001ce8:	f003 fe88 	bl	80059fc <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cf4:	3307      	adds	r3, #7
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f77f aef5 	ble.w	8001ae8 <settings_menue+0x390>
		while(menu_active == 1){
 8001cfe:	8bfb      	ldrh	r3, [r7, #30]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f43f ada8 	beq.w	8001856 <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001d06:	bf00      	nop
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d10:	00000000 	.word	0x00000000
 8001d14:	4058e000 	.word	0x4058e000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	200006a0 	.word	0x200006a0
 8001d20:	20000080 	.word	0x20000080
 8001d24:	200000c8 	.word	0x200000c8
 8001d28:	08019998 	.word	0x08019998
 8001d2c:	080187f0 	.word	0x080187f0
 8001d30:	40230000 	.word	0x40230000
 8001d34:	080187f8 	.word	0x080187f8

08001d38 <update_display>:

void update_display(){
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001d3e:	2228      	movs	r2, #40	; 0x28
 8001d40:	2100      	movs	r1, #0
 8001d42:	4875      	ldr	r0, [pc, #468]	; (8001f18 <update_display+0x1e0>)
 8001d44:	f014 fab7 	bl	80162b6 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001d48:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <update_display+0x1e4>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	4974      	ldr	r1, [pc, #464]	; (8001f20 <update_display+0x1e8>)
 8001d50:	4871      	ldr	r0, [pc, #452]	; (8001f18 <update_display+0x1e0>)
 8001d52:	f014 fa4d 	bl	80161f0 <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001d56:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <update_display+0x1e4>)
 8001d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5c:	a36c      	add	r3, pc, #432	; (adr r3, 8001f10 <update_display+0x1d8>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fee3 	bl	8000b2c <__aeabi_dcmplt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <update_display+0x40>
		buffer[2] = 32;
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <update_display+0x1e0>)
 8001d6e:	2220      	movs	r2, #32
 8001d70:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001d72:	4b69      	ldr	r3, [pc, #420]	; (8001f18 <update_display+0x1e0>)
 8001d74:	2220      	movs	r2, #32
 8001d76:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d7c:	f7ff fb70 	bl	8001460 <RGB_to_BRG>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461c      	mov	r4, r3
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fb6b 	bl	8001460 <RGB_to_BRG>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9400      	str	r4, [sp, #0]
 8001d90:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <update_display+0x1ec>)
 8001d92:	4a61      	ldr	r2, [pc, #388]	; (8001f18 <update_display+0x1e0>)
 8001d94:	214b      	movs	r1, #75	; 0x4b
 8001d96:	200a      	movs	r0, #10
 8001d98:	f003 fe30 	bl	80059fc <LCD_PutStr>

	if(sensor_values.heater_current < 10){
 8001d9c:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <update_display+0x1e4>)
 8001d9e:	8a9b      	ldrh	r3, [r3, #20]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d812      	bhi.n	8001dca <update_display+0x92>
	  	LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001da4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001da8:	f7ff fb5a 	bl	8001460 <RGB_to_BRG>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461c      	mov	r4, r3
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fb55 	bl	8001460 <RGB_to_BRG>
 8001db6:	4603      	mov	r3, r0
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	9400      	str	r4, [sp, #0]
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <update_display+0x1ec>)
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <update_display+0x1f0>)
 8001dc0:	21a5      	movs	r1, #165	; 0xa5
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f003 fe1a 	bl	80059fc <LCD_PutStr>
 8001dc8:	e02e      	b.n	8001e28 <update_display+0xf0>
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8001dca:	2228      	movs	r2, #40	; 0x28
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4852      	ldr	r0, [pc, #328]	; (8001f18 <update_display+0x1e0>)
 8001dd0:	f014 fa71 	bl	80162b6 <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001dd4:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <update_display+0x1e4>)
 8001dd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dda:	4951      	ldr	r1, [pc, #324]	; (8001f20 <update_display+0x1e8>)
 8001ddc:	484e      	ldr	r0, [pc, #312]	; (8001f18 <update_display+0x1e0>)
 8001dde:	f014 fa07 	bl	80161f0 <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 8001de2:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <update_display+0x1e4>)
 8001de4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001de8:	a349      	add	r3, pc, #292	; (adr r3, 8001f10 <update_display+0x1d8>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fe9d 	bl	8000b2c <__aeabi_dcmplt>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <update_display+0xcc>
			buffer[2] = 32;
 8001df8:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <update_display+0x1e0>)
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <update_display+0x1e0>)
 8001e00:	2220      	movs	r2, #32
 8001e02:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e08:	f7ff fb2a 	bl	8001460 <RGB_to_BRG>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461c      	mov	r4, r3
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fb25 	bl	8001460 <RGB_to_BRG>
 8001e16:	4603      	mov	r3, r0
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	9400      	str	r4, [sp, #0]
 8001e1c:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <update_display+0x1ec>)
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <update_display+0x1e0>)
 8001e20:	21a5      	movs	r1, #165	; 0xa5
 8001e22:	200a      	movs	r0, #10
 8001e24:	f003 fdea 	bl	80059fc <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 8001e28:	2228      	movs	r2, #40	; 0x28
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	483a      	ldr	r0, [pc, #232]	; (8001f18 <update_display+0x1e0>)
 8001e2e:	f014 fa42 	bl	80162b6 <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <update_display+0x1e4>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fbae 	bl	8000598 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	493a      	ldr	r1, [pc, #232]	; (8001f2c <update_display+0x1f4>)
 8001e42:	4835      	ldr	r0, [pc, #212]	; (8001f18 <update_display+0x1e0>)
 8001e44:	f014 f9d4 	bl	80161f0 <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e4c:	f7ff fb08 	bl	8001460 <RGB_to_BRG>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461c      	mov	r4, r3
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fb03 	bl	8001460 <RGB_to_BRG>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	9400      	str	r4, [sp, #0]
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <update_display+0x1f8>)
 8001e62:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <update_display+0x1e0>)
 8001e64:	21ff      	movs	r1, #255	; 0xff
 8001e66:	2064      	movs	r0, #100	; 0x64
 8001e68:	f003 fdc8 	bl	80059fc <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8001e6c:	2228      	movs	r2, #40	; 0x28
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4829      	ldr	r0, [pc, #164]	; (8001f18 <update_display+0x1e0>)
 8001e72:	f014 fa20 	bl	80162b6 <memset>
	sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <update_display+0x1e4>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb8c 	bl	8000598 <__aeabi_f2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4929      	ldr	r1, [pc, #164]	; (8001f2c <update_display+0x1f4>)
 8001e86:	4824      	ldr	r0, [pc, #144]	; (8001f18 <update_display+0x1e0>)
 8001e88:	f014 f9b2 	bl	80161f0 <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e90:	f7ff fae6 	bl	8001460 <RGB_to_BRG>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461c      	mov	r4, r3
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fae1 	bl	8001460 <RGB_to_BRG>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	9400      	str	r4, [sp, #0]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <update_display+0x1f8>)
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <update_display+0x1e0>)
 8001ea8:	f240 1113 	movw	r1, #275	; 0x113
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	f003 fda5 	bl	80059fc <LCD_PutStr>

	if(handle == T210){
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <update_display+0x1fc>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d112      	bne.n	8001ee0 <update_display+0x1a8>
		LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001eba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ebe:	f7ff facf 	bl	8001460 <RGB_to_BRG>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461c      	mov	r4, r3
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff faca 	bl	8001460 <RGB_to_BRG>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	9400      	str	r4, [sp, #0]
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <update_display+0x1f8>)
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <update_display+0x200>)
 8001ed6:	21eb      	movs	r1, #235	; 0xeb
 8001ed8:	2064      	movs	r0, #100	; 0x64
 8001eda:	f003 fd8f 	bl	80059fc <LCD_PutStr>
 8001ede:	e045      	b.n	8001f6c <update_display+0x234>
	}
	else if(handle == T245){
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <update_display+0x1fc>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d12b      	bne.n	8001f40 <update_display+0x208>
		LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ee8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eec:	f7ff fab8 	bl	8001460 <RGB_to_BRG>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461c      	mov	r4, r3
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fab3 	bl	8001460 <RGB_to_BRG>
 8001efa:	4603      	mov	r3, r0
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	9400      	str	r4, [sp, #0]
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <update_display+0x1f8>)
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <update_display+0x204>)
 8001f04:	21eb      	movs	r1, #235	; 0xeb
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f003 fd78 	bl	80059fc <LCD_PutStr>
 8001f0c:	e02e      	b.n	8001f6c <update_display+0x234>
 8001f0e:	bf00      	nop
 8001f10:	00000000 	.word	0x00000000
 8001f14:	4058e000 	.word	0x4058e000
 8001f18:	200005f8 	.word	0x200005f8
 8001f1c:	20000030 	.word	0x20000030
 8001f20:	08018800 	.word	0x08018800
 8001f24:	0801a910 	.word	0x0801a910
 8001f28:	08018804 	.word	0x08018804
 8001f2c:	0801880c 	.word	0x0801880c
 8001f30:	080189c8 	.word	0x080189c8
 8001f34:	200005b0 	.word	0x200005b0
 8001f38:	08018814 	.word	0x08018814
 8001f3c:	0801881c 	.word	0x0801881c
	}
	else if(handle == NT115){
 8001f40:	4bab      	ldr	r3, [pc, #684]	; (80021f0 <update_display+0x4b8>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d111      	bne.n	8001f6c <update_display+0x234>
		LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f4c:	f7ff fa88 	bl	8001460 <RGB_to_BRG>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461c      	mov	r4, r3
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff fa83 	bl	8001460 <RGB_to_BRG>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	9400      	str	r4, [sp, #0]
 8001f60:	4ba4      	ldr	r3, [pc, #656]	; (80021f4 <update_display+0x4bc>)
 8001f62:	4aa5      	ldr	r2, [pc, #660]	; (80021f8 <update_display+0x4c0>)
 8001f64:	21eb      	movs	r1, #235	; 0xeb
 8001f66:	2064      	movs	r0, #100	; 0x64
 8001f68:	f003 fd48 	bl	80059fc <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8001f6c:	4ba3      	ldr	r3, [pc, #652]	; (80021fc <update_display+0x4c4>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <update_display+0x24e>
 8001f74:	4ba1      	ldr	r3, [pc, #644]	; (80021fc <update_display+0x4c4>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d004      	beq.n	8001f86 <update_display+0x24e>
 8001f7c:	4b9f      	ldr	r3, [pc, #636]	; (80021fc <update_display+0x4c4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	f040 8098 	bne.w	80020b6 <update_display+0x37e>
 8001f86:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <update_display+0x4c8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8093 	bne.w	80020b6 <update_display+0x37e>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8001f90:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f94:	f7ff fa64 	bl	8001460 <RGB_to_BRG>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8001fa0:	22e6      	movs	r2, #230	; 0xe6
 8001fa2:	2137      	movs	r1, #55	; 0x37
 8001fa4:	20d2      	movs	r0, #210	; 0xd2
 8001fa6:	f00f fc9f 	bl	80118e8 <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fa58 	bl	8001460 <RGB_to_BRG>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461c      	mov	r4, r3
 8001fb4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001fb8:	f7ff fa52 	bl	8001460 <RGB_to_BRG>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	9400      	str	r4, [sp, #0]
 8001fc2:	4b90      	ldr	r3, [pc, #576]	; (8002204 <update_display+0x4cc>)
 8001fc4:	4a90      	ldr	r2, [pc, #576]	; (8002208 <update_display+0x4d0>)
 8001fc6:	213a      	movs	r1, #58	; 0x3a
 8001fc8:	20d6      	movs	r0, #214	; 0xd6
 8001fca:	f003 fd17 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fa46 	bl	8001460 <RGB_to_BRG>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001fdc:	f7ff fa40 	bl	8001460 <RGB_to_BRG>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	9400      	str	r4, [sp, #0]
 8001fe6:	4b87      	ldr	r3, [pc, #540]	; (8002204 <update_display+0x4cc>)
 8001fe8:	4a88      	ldr	r2, [pc, #544]	; (800220c <update_display+0x4d4>)
 8001fea:	215c      	movs	r1, #92	; 0x5c
 8001fec:	20d8      	movs	r0, #216	; 0xd8
 8001fee:	f003 fd05 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff fa34 	bl	8001460 <RGB_to_BRG>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002000:	f7ff fa2e 	bl	8001460 <RGB_to_BRG>
 8002004:	4603      	mov	r3, r0
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	9400      	str	r4, [sp, #0]
 800200a:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <update_display+0x4cc>)
 800200c:	4a7e      	ldr	r2, [pc, #504]	; (8002208 <update_display+0x4d0>)
 800200e:	217e      	movs	r1, #126	; 0x7e
 8002010:	20d6      	movs	r0, #214	; 0xd6
 8002012:	f003 fcf3 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff fa22 	bl	8001460 <RGB_to_BRG>
 800201c:	4603      	mov	r3, r0
 800201e:	461c      	mov	r4, r3
 8002020:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002024:	f7ff fa1c 	bl	8001460 <RGB_to_BRG>
 8002028:	4603      	mov	r3, r0
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	9400      	str	r4, [sp, #0]
 800202e:	4b75      	ldr	r3, [pc, #468]	; (8002204 <update_display+0x4cc>)
 8002030:	4a76      	ldr	r2, [pc, #472]	; (800220c <update_display+0x4d4>)
 8002032:	21a1      	movs	r1, #161	; 0xa1
 8002034:	20d8      	movs	r0, #216	; 0xd8
 8002036:	f003 fce1 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fa10 	bl	8001460 <RGB_to_BRG>
 8002040:	4603      	mov	r3, r0
 8002042:	461c      	mov	r4, r3
 8002044:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002048:	f7ff fa0a 	bl	8001460 <RGB_to_BRG>
 800204c:	4603      	mov	r3, r0
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	9400      	str	r4, [sp, #0]
 8002052:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <update_display+0x4cc>)
 8002054:	4a6c      	ldr	r2, [pc, #432]	; (8002208 <update_display+0x4d0>)
 8002056:	21c2      	movs	r1, #194	; 0xc2
 8002058:	20d6      	movs	r0, #214	; 0xd6
 800205a:	f003 fccf 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff f9fe 	bl	8001460 <RGB_to_BRG>
 8002064:	4603      	mov	r3, r0
 8002066:	461c      	mov	r4, r3
 8002068:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800206c:	f7ff f9f8 	bl	8001460 <RGB_to_BRG>
 8002070:	4603      	mov	r3, r0
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	9400      	str	r4, [sp, #0]
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <update_display+0x4cc>)
 8002078:	4a64      	ldr	r2, [pc, #400]	; (800220c <update_display+0x4d4>)
 800207a:	21e4      	movs	r1, #228	; 0xe4
 800207c:	20d8      	movs	r0, #216	; 0xd8
 800207e:	f003 fcbd 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff f9ec 	bl	8001460 <RGB_to_BRG>
 8002088:	4603      	mov	r3, r0
 800208a:	461c      	mov	r4, r3
 800208c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002090:	f7ff f9e6 	bl	8001460 <RGB_to_BRG>
 8002094:	4603      	mov	r3, r0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9400      	str	r4, [sp, #0]
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <update_display+0x4cc>)
 800209c:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <update_display+0x4d0>)
 800209e:	f44f 7183 	mov.w	r1, #262	; 0x106
 80020a2:	20d6      	movs	r0, #214	; 0xd6
 80020a4:	f003 fcaa 	bl	80059fc <LCD_PutStr>
		sleep_state_written_to_LCD = 1;
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <update_display+0x4c8>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
		standby_state_written_to_LCD = 0;
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <update_display+0x4d8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	e128      	b.n	8002308 <update_display+0x5d0>
	}
	else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <update_display+0x4c4>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	f040 80b8 	bne.w	8002230 <update_display+0x4f8>
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <update_display+0x4d8>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 80b3 	bne.w	8002230 <update_display+0x4f8>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 80020ca:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020ce:	f7ff f9c7 	bl	8001460 <RGB_to_BRG>
 80020d2:	4603      	mov	r3, r0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80020da:	22e6      	movs	r2, #230	; 0xe6
 80020dc:	2137      	movs	r1, #55	; 0x37
 80020de:	20d2      	movs	r0, #210	; 0xd2
 80020e0:	f00f fc02 	bl	80118e8 <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f9bb 	bl	8001460 <RGB_to_BRG>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461c      	mov	r4, r3
 80020ee:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020f2:	f7ff f9b5 	bl	8001460 <RGB_to_BRG>
 80020f6:	4603      	mov	r3, r0
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	9400      	str	r4, [sp, #0]
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <update_display+0x4cc>)
 80020fe:	4a45      	ldr	r2, [pc, #276]	; (8002214 <update_display+0x4dc>)
 8002100:	213a      	movs	r1, #58	; 0x3a
 8002102:	20d6      	movs	r0, #214	; 0xd6
 8002104:	f003 fc7a 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff f9a9 	bl	8001460 <RGB_to_BRG>
 800210e:	4603      	mov	r3, r0
 8002110:	461c      	mov	r4, r3
 8002112:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002116:	f7ff f9a3 	bl	8001460 <RGB_to_BRG>
 800211a:	4603      	mov	r3, r0
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	9400      	str	r4, [sp, #0]
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <update_display+0x4cc>)
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <update_display+0x4e0>)
 8002124:	215c      	movs	r1, #92	; 0x5c
 8002126:	20d6      	movs	r0, #214	; 0xd6
 8002128:	f003 fc68 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff f997 	bl	8001460 <RGB_to_BRG>
 8002132:	4603      	mov	r3, r0
 8002134:	461c      	mov	r4, r3
 8002136:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800213a:	f7ff f991 	bl	8001460 <RGB_to_BRG>
 800213e:	4603      	mov	r3, r0
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	9400      	str	r4, [sp, #0]
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <update_display+0x4cc>)
 8002146:	4a35      	ldr	r2, [pc, #212]	; (800221c <update_display+0x4e4>)
 8002148:	217e      	movs	r1, #126	; 0x7e
 800214a:	20d6      	movs	r0, #214	; 0xd6
 800214c:	f003 fc56 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff f985 	bl	8001460 <RGB_to_BRG>
 8002156:	4603      	mov	r3, r0
 8002158:	461c      	mov	r4, r3
 800215a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800215e:	f7ff f97f 	bl	8001460 <RGB_to_BRG>
 8002162:	4603      	mov	r3, r0
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	9400      	str	r4, [sp, #0]
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <update_display+0x4cc>)
 800216a:	4a2d      	ldr	r2, [pc, #180]	; (8002220 <update_display+0x4e8>)
 800216c:	21a1      	movs	r1, #161	; 0xa1
 800216e:	20d6      	movs	r0, #214	; 0xd6
 8002170:	f003 fc44 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff f973 	bl	8001460 <RGB_to_BRG>
 800217a:	4603      	mov	r3, r0
 800217c:	461c      	mov	r4, r3
 800217e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002182:	f7ff f96d 	bl	8001460 <RGB_to_BRG>
 8002186:	4603      	mov	r3, r0
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	9400      	str	r4, [sp, #0]
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <update_display+0x4cc>)
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <update_display+0x4ec>)
 8002190:	21c2      	movs	r1, #194	; 0xc2
 8002192:	20d6      	movs	r0, #214	; 0xd6
 8002194:	f003 fc32 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff f961 	bl	8001460 <RGB_to_BRG>
 800219e:	4603      	mov	r3, r0
 80021a0:	461c      	mov	r4, r3
 80021a2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021a6:	f7ff f95b 	bl	8001460 <RGB_to_BRG>
 80021aa:	4603      	mov	r3, r0
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9400      	str	r4, [sp, #0]
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <update_display+0x4cc>)
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <update_display+0x4f0>)
 80021b4:	21e4      	movs	r1, #228	; 0xe4
 80021b6:	20d6      	movs	r0, #214	; 0xd6
 80021b8:	f003 fc20 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff f94f 	bl	8001460 <RGB_to_BRG>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461c      	mov	r4, r3
 80021c6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021ca:	f7ff f949 	bl	8001460 <RGB_to_BRG>
 80021ce:	4603      	mov	r3, r0
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	9400      	str	r4, [sp, #0]
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <update_display+0x4cc>)
 80021d6:	4a15      	ldr	r2, [pc, #84]	; (800222c <update_display+0x4f4>)
 80021d8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80021dc:	20d6      	movs	r0, #214	; 0xd6
 80021de:	f003 fc0d 	bl	80059fc <LCD_PutStr>
		standby_state_written_to_LCD = 1;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <update_display+0x4d8>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <update_display+0x4c8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e08b      	b.n	8002308 <update_display+0x5d0>
 80021f0:	200005b0 	.word	0x200005b0
 80021f4:	080189c8 	.word	0x080189c8
 80021f8:	08018824 	.word	0x08018824
 80021fc:	2000001d 	.word	0x2000001d
 8002200:	200005d7 	.word	0x200005d7
 8002204:	08019998 	.word	0x08019998
 8002208:	0801882c 	.word	0x0801882c
 800220c:	08018830 	.word	0x08018830
 8002210:	200005d8 	.word	0x200005d8
 8002214:	08018834 	.word	0x08018834
 8002218:	08018838 	.word	0x08018838
 800221c:	0801883c 	.word	0x0801883c
 8002220:	08018840 	.word	0x08018840
 8002224:	08018844 	.word	0x08018844
 8002228:	08018848 	.word	0x08018848
 800222c:	0801884c 	.word	0x0801884c
	}
	else if(active_state == RUN){
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <update_display+0x5e8>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d167      	bne.n	8002308 <update_display+0x5d0>
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <update_display+0x5ec>)
 800223a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b39      	ldr	r3, [pc, #228]	; (8002328 <update_display+0x5f0>)
 8002244:	f7fe fb2a 	bl	800089c <__aeabi_ddiv>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b35      	ldr	r3, [pc, #212]	; (800232c <update_display+0x5f4>)
 8002256:	f7fe f9f7 	bl	8000648 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	a12c      	add	r1, pc, #176	; (adr r1, 8002310 <update_display+0x5d8>)
 8002260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002264:	f7fe f838 	bl	80002d8 <__aeabi_dsub>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fc9a 	bl	8000ba8 <__aeabi_d2iz>
 8002274:	4603      	mov	r3, r0
 8002276:	b21c      	sxth	r4, r3
 8002278:	f248 607e 	movw	r0, #34430	; 0x867e
 800227c:	f7ff f8f0 	bl	8001460 <RGB_to_BRG>
 8002280:	4603      	mov	r3, r0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f240 131f 	movw	r3, #287	; 0x11f
 8002288:	22e6      	movs	r2, #230	; 0xe6
 800228a:	4621      	mov	r1, r4
 800228c:	20d2      	movs	r0, #210	; 0xd2
 800228e:	f00f fb2b 	bl	80118e8 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <update_display+0x5ec>)
 8002294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <update_display+0x5f0>)
 800229e:	f7fe fafd 	bl	800089c <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	a31b      	add	r3, pc, #108	; (adr r3, 8002318 <update_display+0x5e0>)
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe f9ca 	bl	8000648 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	a115      	add	r1, pc, #84	; (adr r1, 8002310 <update_display+0x5d8>)
 80022ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022be:	f7fe f80b 	bl	80002d8 <__aeabi_dsub>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <update_display+0x5f8>)
 80022d0:	f7fe f802 	bl	80002d8 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fc64 	bl	8000ba8 <__aeabi_d2iz>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b21c      	sxth	r4, r3
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff f8bb 	bl	8001460 <RGB_to_BRG>
 80022ea:	4603      	mov	r3, r0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4623      	mov	r3, r4
 80022f0:	22e6      	movs	r2, #230	; 0xe6
 80022f2:	2137      	movs	r1, #55	; 0x37
 80022f4:	20d2      	movs	r0, #210	; 0xd2
 80022f6:	f00f faf7 	bl	80118e8 <UG_FillFrame>
		standby_state_written_to_LCD = 0;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <update_display+0x5fc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <update_display+0x600>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
	}
}
 8002306:	e7ff      	b.n	8002308 <update_display+0x5d0>
 8002308:	bf00      	nop
 800230a:	3704      	adds	r7, #4
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	00000000 	.word	0x00000000
 8002314:	4071f000 	.word	0x4071f000
 8002318:	00000000 	.word	0x00000000
 800231c:	406ce000 	.word	0x406ce000
 8002320:	2000001d 	.word	0x2000001d
 8002324:	200006e8 	.word	0x200006e8
 8002328:	407f4000 	.word	0x407f4000
 800232c:	406d0000 	.word	0x406d0000
 8002330:	3ff00000 	.word	0x3ff00000
 8002334:	200005d8 	.word	0x200005d8
 8002338:	200005d7 	.word	0x200005d7

0800233c <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b083      	sub	sp, #12
 8002340:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff f88c 	bl	8001460 <RGB_to_BRG>
 8002348:	4603      	mov	r3, r0
 800234a:	4618      	mov	r0, r3
 800234c:	f00f faa8 	bl	80118a0 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002350:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002354:	f7ff f884 	bl	8001460 <RGB_to_BRG>
 8002358:	4603      	mov	r3, r0
 800235a:	461c      	mov	r4, r3
 800235c:	2000      	movs	r0, #0
 800235e:	f7ff f87f 	bl	8001460 <RGB_to_BRG>
 8002362:	4603      	mov	r3, r0
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	9400      	str	r4, [sp, #0]
 8002368:	4bc3      	ldr	r3, [pc, #780]	; (8002678 <LCD_draw_main_screen+0x33c>)
 800236a:	4ac4      	ldr	r2, [pc, #784]	; (800267c <LCD_draw_main_screen+0x340>)
 800236c:	210c      	movs	r1, #12
 800236e:	2035      	movs	r0, #53	; 0x35
 8002370:	f003 fb44 	bl	80059fc <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002374:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002378:	f7ff f872 	bl	8001460 <RGB_to_BRG>
 800237c:	4603      	mov	r3, r0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2328      	movs	r3, #40	; 0x28
 8002382:	22f0      	movs	r2, #240	; 0xf0
 8002384:	2128      	movs	r1, #40	; 0x28
 8002386:	2000      	movs	r0, #0
 8002388:	f003 fafa 	bl	8005980 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 800238c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002390:	f7ff f866 	bl	8001460 <RGB_to_BRG>
 8002394:	4603      	mov	r3, r0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2329      	movs	r3, #41	; 0x29
 800239a:	22f0      	movs	r2, #240	; 0xf0
 800239c:	2129      	movs	r1, #41	; 0x29
 800239e:	2000      	movs	r0, #0
 80023a0:	f003 faee 	bl	8005980 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 80023a4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80023a8:	f7ff f85a 	bl	8001460 <RGB_to_BRG>
 80023ac:	4603      	mov	r3, r0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	232a      	movs	r3, #42	; 0x2a
 80023b2:	22f0      	movs	r2, #240	; 0xf0
 80023b4:	212a      	movs	r1, #42	; 0x2a
 80023b6:	2000      	movs	r0, #0
 80023b8:	f003 fae2 	bl	8005980 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80023bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023c0:	f7ff f84e 	bl	8001460 <RGB_to_BRG>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461c      	mov	r4, r3
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7ff f849 	bl	8001460 <RGB_to_BRG>
 80023ce:	4603      	mov	r3, r0
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	9400      	str	r4, [sp, #0]
 80023d4:	4baa      	ldr	r3, [pc, #680]	; (8002680 <LCD_draw_main_screen+0x344>)
 80023d6:	4aab      	ldr	r2, [pc, #684]	; (8002684 <LCD_draw_main_screen+0x348>)
 80023d8:	2132      	movs	r1, #50	; 0x32
 80023da:	200a      	movs	r0, #10
 80023dc:	f003 fb0e 	bl	80059fc <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 80023e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023e4:	f7ff f83c 	bl	8001460 <RGB_to_BRG>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2205      	movs	r2, #5
 80023ec:	2155      	movs	r1, #85	; 0x55
 80023ee:	2078      	movs	r0, #120	; 0x78
 80023f0:	f00f fb34 	bl	8011a5c <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 80023f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023f8:	f7ff f832 	bl	8001460 <RGB_to_BRG>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2204      	movs	r2, #4
 8002400:	2155      	movs	r1, #85	; 0x55
 8002402:	2078      	movs	r0, #120	; 0x78
 8002404:	f00f fb2a 	bl	8011a5c <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002408:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800240c:	f7ff f828 	bl	8001460 <RGB_to_BRG>
 8002410:	4603      	mov	r3, r0
 8002412:	2203      	movs	r2, #3
 8002414:	2155      	movs	r1, #85	; 0x55
 8002416:	2078      	movs	r0, #120	; 0x78
 8002418:	f00f fb20 	bl	8011a5c <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800241c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002420:	f7ff f81e 	bl	8001460 <RGB_to_BRG>
 8002424:	4603      	mov	r3, r0
 8002426:	461c      	mov	r4, r3
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff f819 	bl	8001460 <RGB_to_BRG>
 800242e:	4603      	mov	r3, r0
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	9400      	str	r4, [sp, #0]
 8002434:	4b94      	ldr	r3, [pc, #592]	; (8002688 <LCD_draw_main_screen+0x34c>)
 8002436:	4a95      	ldr	r2, [pc, #596]	; (800268c <LCD_draw_main_screen+0x350>)
 8002438:	214b      	movs	r1, #75	; 0x4b
 800243a:	2082      	movs	r0, #130	; 0x82
 800243c:	f003 fade 	bl	80059fc <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002440:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002444:	f7ff f80c 	bl	8001460 <RGB_to_BRG>
 8002448:	4603      	mov	r3, r0
 800244a:	461c      	mov	r4, r3
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff f807 	bl	8001460 <RGB_to_BRG>
 8002452:	4603      	mov	r3, r0
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	9400      	str	r4, [sp, #0]
 8002458:	4b89      	ldr	r3, [pc, #548]	; (8002680 <LCD_draw_main_screen+0x344>)
 800245a:	4a8d      	ldr	r2, [pc, #564]	; (8002690 <LCD_draw_main_screen+0x354>)
 800245c:	218c      	movs	r1, #140	; 0x8c
 800245e:	200a      	movs	r0, #10
 8002460:	f003 facc 	bl	80059fc <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002464:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002468:	f7fe fffa 	bl	8001460 <RGB_to_BRG>
 800246c:	4603      	mov	r3, r0
 800246e:	2205      	movs	r2, #5
 8002470:	21af      	movs	r1, #175	; 0xaf
 8002472:	2078      	movs	r0, #120	; 0x78
 8002474:	f00f faf2 	bl	8011a5c <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002478:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800247c:	f7fe fff0 	bl	8001460 <RGB_to_BRG>
 8002480:	4603      	mov	r3, r0
 8002482:	2204      	movs	r2, #4
 8002484:	21af      	movs	r1, #175	; 0xaf
 8002486:	2078      	movs	r0, #120	; 0x78
 8002488:	f00f fae8 	bl	8011a5c <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 800248c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002490:	f7fe ffe6 	bl	8001460 <RGB_to_BRG>
 8002494:	4603      	mov	r3, r0
 8002496:	2203      	movs	r2, #3
 8002498:	21af      	movs	r1, #175	; 0xaf
 800249a:	2078      	movs	r0, #120	; 0x78
 800249c:	f00f fade 	bl	8011a5c <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80024a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024a4:	f7fe ffdc 	bl	8001460 <RGB_to_BRG>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461c      	mov	r4, r3
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe ffd7 	bl	8001460 <RGB_to_BRG>
 80024b2:	4603      	mov	r3, r0
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	9400      	str	r4, [sp, #0]
 80024b8:	4b73      	ldr	r3, [pc, #460]	; (8002688 <LCD_draw_main_screen+0x34c>)
 80024ba:	4a74      	ldr	r2, [pc, #464]	; (800268c <LCD_draw_main_screen+0x350>)
 80024bc:	21a5      	movs	r1, #165	; 0xa5
 80024be:	2082      	movs	r0, #130	; 0x82
 80024c0:	f003 fa9c 	bl	80059fc <LCD_PutStr>

		UG_DrawFrame(4, 134, 182, 220, RGB_to_BRG(C_WHITE));
 80024c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024c8:	f7fe ffca 	bl	8001460 <RGB_to_BRG>
 80024cc:	4603      	mov	r3, r0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	23dc      	movs	r3, #220	; 0xdc
 80024d2:	22b6      	movs	r2, #182	; 0xb6
 80024d4:	2186      	movs	r1, #134	; 0x86
 80024d6:	2004      	movs	r0, #4
 80024d8:	f00f fa78 	bl	80119cc <UG_DrawFrame>
		UG_DrawFrame(3, 133, 183, 221, RGB_to_BRG(C_WHITE));
 80024dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024e0:	f7fe ffbe 	bl	8001460 <RGB_to_BRG>
 80024e4:	4603      	mov	r3, r0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	23dd      	movs	r3, #221	; 0xdd
 80024ea:	22b7      	movs	r2, #183	; 0xb7
 80024ec:	2185      	movs	r1, #133	; 0x85
 80024ee:	2003      	movs	r0, #3
 80024f0:	f00f fa6c 	bl	80119cc <UG_DrawFrame>

		LCD_PutStr(2, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80024f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024f8:	f7fe ffb2 	bl	8001460 <RGB_to_BRG>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461c      	mov	r4, r3
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe ffad 	bl	8001460 <RGB_to_BRG>
 8002506:	4603      	mov	r3, r0
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	9400      	str	r4, [sp, #0]
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <LCD_draw_main_screen+0x358>)
 800250e:	4a62      	ldr	r2, [pc, #392]	; (8002698 <LCD_draw_main_screen+0x35c>)
 8002510:	21eb      	movs	r1, #235	; 0xeb
 8002512:	2002      	movs	r0, #2
 8002514:	f003 fa72 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002518:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800251c:	f7fe ffa0 	bl	8001460 <RGB_to_BRG>
 8002520:	4603      	mov	r3, r0
 8002522:	461c      	mov	r4, r3
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe ff9b 	bl	8001460 <RGB_to_BRG>
 800252a:	4603      	mov	r3, r0
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9400      	str	r4, [sp, #0]
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <LCD_draw_main_screen+0x358>)
 8002532:	4a5a      	ldr	r2, [pc, #360]	; (800269c <LCD_draw_main_screen+0x360>)
 8002534:	21ff      	movs	r1, #255	; 0xff
 8002536:	2002      	movs	r0, #2
 8002538:	f003 fa60 	bl	80059fc <LCD_PutStr>
		LCD_PutStr(2, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800253c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002540:	f7fe ff8e 	bl	8001460 <RGB_to_BRG>
 8002544:	4603      	mov	r3, r0
 8002546:	461c      	mov	r4, r3
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe ff89 	bl	8001460 <RGB_to_BRG>
 800254e:	4603      	mov	r3, r0
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	9400      	str	r4, [sp, #0]
 8002554:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <LCD_draw_main_screen+0x358>)
 8002556:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <LCD_draw_main_screen+0x364>)
 8002558:	f240 1113 	movw	r1, #275	; 0x113
 800255c:	2002      	movs	r0, #2
 800255e:	f003 fa4d 	bl	80059fc <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002562:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002566:	f7fe ff7b 	bl	8001460 <RGB_to_BRG>
 800256a:	4603      	mov	r3, r0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002572:	22f0      	movs	r2, #240	; 0xf0
 8002574:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002578:	2002      	movs	r0, #2
 800257a:	f00f fb55 	bl	8011c28 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 800257e:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002582:	f7fe ff6d 	bl	8001460 <RGB_to_BRG>
 8002586:	4603      	mov	r3, r0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	f240 1329 	movw	r3, #297	; 0x129
 800258e:	22f0      	movs	r2, #240	; 0xf0
 8002590:	f240 1129 	movw	r1, #297	; 0x129
 8002594:	2002      	movs	r0, #2
 8002596:	f00f fb47 	bl	8011c28 <UG_DrawLine>


		LCD_PutStr(2, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 800259a:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800259e:	f7fe ff5f 	bl	8001460 <RGB_to_BRG>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461c      	mov	r4, r3
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe ff5a 	bl	8001460 <RGB_to_BRG>
 80025ac:	4603      	mov	r3, r0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	9400      	str	r4, [sp, #0]
 80025b2:	4b33      	ldr	r3, [pc, #204]	; (8002680 <LCD_draw_main_screen+0x344>)
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <LCD_draw_main_screen+0x368>)
 80025b6:	f240 112d 	movw	r1, #301	; 0x12d
 80025ba:	2002      	movs	r0, #2
 80025bc:	f003 fa1e 	bl	80059fc <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 80025c0:	2228      	movs	r2, #40	; 0x28
 80025c2:	2100      	movs	r1, #0
 80025c4:	4838      	ldr	r0, [pc, #224]	; (80026a8 <LCD_draw_main_screen+0x36c>)
 80025c6:	f013 fe76 	bl	80162b6 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <LCD_draw_main_screen+0x370>)
 80025cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025d0:	4937      	ldr	r1, [pc, #220]	; (80026b0 <LCD_draw_main_screen+0x374>)
 80025d2:	4835      	ldr	r0, [pc, #212]	; (80026a8 <LCD_draw_main_screen+0x36c>)
 80025d4:	f013 fe0c 	bl	80161f0 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 80025d8:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80025dc:	f7fe ff40 	bl	8001460 <RGB_to_BRG>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461c      	mov	r4, r3
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe ff3b 	bl	8001460 <RGB_to_BRG>
 80025ea:	4603      	mov	r3, r0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	9400      	str	r4, [sp, #0]
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <LCD_draw_main_screen+0x344>)
 80025f2:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <LCD_draw_main_screen+0x36c>)
 80025f4:	f240 112d 	movw	r1, #301	; 0x12d
 80025f8:	2082      	movs	r0, #130	; 0x82
 80025fa:	f003 f9ff 	bl	80059fc <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 80025fe:	2228      	movs	r2, #40	; 0x28
 8002600:	2100      	movs	r1, #0
 8002602:	4829      	ldr	r0, [pc, #164]	; (80026a8 <LCD_draw_main_screen+0x36c>)
 8002604:	f013 fe57 	bl	80162b6 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <LCD_draw_main_screen+0x370>)
 800260a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800260e:	4928      	ldr	r1, [pc, #160]	; (80026b0 <LCD_draw_main_screen+0x374>)
 8002610:	4825      	ldr	r0, [pc, #148]	; (80026a8 <LCD_draw_main_screen+0x36c>)
 8002612:	f013 fded 	bl	80161f0 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002616:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800261a:	f7fe ff21 	bl	8001460 <RGB_to_BRG>
 800261e:	4603      	mov	r3, r0
 8002620:	461c      	mov	r4, r3
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe ff1c 	bl	8001460 <RGB_to_BRG>
 8002628:	4603      	mov	r3, r0
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	9400      	str	r4, [sp, #0]
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <LCD_draw_main_screen+0x344>)
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <LCD_draw_main_screen+0x36c>)
 8002632:	f240 112d 	movw	r1, #301	; 0x12d
 8002636:	20be      	movs	r0, #190	; 0xbe
 8002638:	f003 f9e0 	bl	80059fc <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 800263c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002640:	f7fe ff0e 	bl	8001460 <RGB_to_BRG>
 8002644:	4603      	mov	r3, r0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f240 1321 	movw	r3, #289	; 0x121
 800264c:	22e8      	movs	r2, #232	; 0xe8
 800264e:	2135      	movs	r1, #53	; 0x35
 8002650:	20d0      	movs	r0, #208	; 0xd0
 8002652:	f00f f9bb 	bl	80119cc <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002656:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800265a:	f7fe ff01 	bl	8001460 <RGB_to_BRG>
 800265e:	4603      	mov	r3, r0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002666:	22e7      	movs	r2, #231	; 0xe7
 8002668:	2136      	movs	r1, #54	; 0x36
 800266a:	20d1      	movs	r0, #209	; 0xd1
 800266c:	f00f f9ae 	bl	80119cc <UG_DrawFrame>
}
 8002670:	bf00      	nop
 8002672:	3704      	adds	r7, #4
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	08019764 	.word	0x08019764
 800267c:	08018850 	.word	0x08018850
 8002680:	08019998 	.word	0x08019998
 8002684:	0801885c 	.word	0x0801885c
 8002688:	0801a830 	.word	0x0801a830
 800268c:	08018868 	.word	0x08018868
 8002690:	0801886c 	.word	0x0801886c
 8002694:	080189c8 	.word	0x080189c8
 8002698:	08018878 	.word	0x08018878
 800269c:	08018888 	.word	0x08018888
 80026a0:	080188a4 	.word	0x080188a4
 80026a4:	080188c4 	.word	0x080188c4
 80026a8:	200005f8 	.word	0x200005f8
 80026ac:	200006a0 	.word	0x200006a0
 80026b0:	080187f0 	.word	0x080187f0

080026b4 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 80026b4:	b598      	push	{r3, r4, r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 80026b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ff48 	bl	8000554 <__aeabi_ui2d>
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <get_set_temperature+0x68>)
 80026c6:	ed93 7b00 	vldr	d7, [r3]
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <get_set_temperature+0x6c>)
 80026cc:	ed93 6b00 	vldr	d6, [r3]
 80026d0:	eeb0 2a46 	vmov.f32	s4, s12
 80026d4:	eef0 2a66 	vmov.f32	s5, s13
 80026d8:	eeb0 1a47 	vmov.f32	s2, s14
 80026dc:	eef0 1a67 	vmov.f32	s3, s15
 80026e0:	ec41 0b10 	vmov	d0, r0, r1
 80026e4:	f7fe fdf0 	bl	80012c8 <clamp>
 80026e8:	ec53 2b10 	vmov	r2, r3, d0
 80026ec:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa80 	bl	8000bf8 <__aeabi_d2uiz>
 80026f8:	4603      	mov	r3, r0
 80026fa:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 80026fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	b29b      	uxth	r3, r3
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff33 	bl	8000574 <__aeabi_i2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4904      	ldr	r1, [pc, #16]	; (8002724 <get_set_temperature+0x70>)
 8002714:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002718:	bf00      	nop
 800271a:	bd98      	pop	{r3, r4, r7, pc}
 800271c:	20000020 	.word	0x20000020
 8002720:	20000028 	.word	0x20000028
 8002724:	20000030 	.word	0x20000030

08002728 <beep>:

/* Beep the beeper */
void beep(){
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <beep+0x30>)
 800272e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <beep+0x34>)
 8002738:	f7fe f9ee 	bl	8000b18 <__aeabi_dcmpeq>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d100      	bne.n	8002744 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 8002742:	e006      	b.n	8002752 <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8002744:	2104      	movs	r1, #4
 8002746:	4806      	ldr	r0, [pc, #24]	; (8002760 <beep+0x38>)
 8002748:	f00a f9aa 	bl	800caa0 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 800274c:	4805      	ldr	r0, [pc, #20]	; (8002764 <beep+0x3c>)
 800274e:	f00a f8b7 	bl	800c8c0 <HAL_TIM_Base_Start_IT>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200006a0 	.word	0x200006a0
 800275c:	3ff00000 	.word	0x3ff00000
 8002760:	20001d18 	.word	0x20001d18
 8002764:	20001e94 	.word	0x20001e94

08002768 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <handle_emergency_shutdown+0xb8>)
 800276e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <handle_emergency_shutdown+0x20>
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <handle_emergency_shutdown+0xbc>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 800277e:	f003 fa4b 	bl	8005c18 <HAL_GetTick>
 8002782:	4603      	mov	r3, r0
 8002784:	4a28      	ldr	r2, [pc, #160]	; (8002828 <handle_emergency_shutdown+0xc0>)
 8002786:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <handle_emergency_shutdown+0xb8>)
 800278a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	f7fe f9bf 	bl	8000b18 <__aeabi_dcmpeq>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d024      	beq.n	80027ea <handle_emergency_shutdown+0x82>
 80027a0:	f003 fa3a 	bl	8005c18 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <handle_emergency_shutdown+0xc0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fed1 	bl	8000554 <__aeabi_ui2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <handle_emergency_shutdown+0xc4>)
 80027b8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80027bc:	a316      	add	r3, pc, #88	; (adr r3, 8002818 <handle_emergency_shutdown+0xb0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd ff41 	bl	8000648 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fe f9c1 	bl	8000b54 <__aeabi_dcmpge>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <handle_emergency_shutdown+0x82>
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <handle_emergency_shutdown+0xbc>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f7fe fe53 	bl	800148c <change_state>
		beep();
 80027e6:	f7ff ff9f 	bl	8002728 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <handle_emergency_shutdown+0xb8>)
 80027ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <handle_emergency_shutdown+0xc8>)
 80027f6:	f7fe f9b7 	bl	8000b68 <__aeabi_dcmpgt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d100      	bne.n	8002802 <handle_emergency_shutdown+0x9a>
		change_state(EMERGENCY_SLEEP);
		beep();
	}
}
 8002800:	e008      	b.n	8002814 <handle_emergency_shutdown+0xac>
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <handle_emergency_shutdown+0xbc>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <handle_emergency_shutdown+0xac>
		change_state(EMERGENCY_SLEEP);
 800280a:	2003      	movs	r0, #3
 800280c:	f7fe fe3e 	bl	800148c <change_state>
		beep();
 8002810:	f7ff ff8a 	bl	8002728 <beep>
}
 8002814:	bf00      	nop
 8002816:	bdb0      	pop	{r4, r5, r7, pc}
 8002818:	00000000 	.word	0x00000000
 800281c:	40ed4c00 	.word	0x40ed4c00
 8002820:	20000030 	.word	0x20000030
 8002824:	2000001d 	.word	0x2000001d
 8002828:	200005c0 	.word	0x200005c0
 800282c:	200006a0 	.word	0x200006a0
 8002830:	407e0000 	.word	0x407e0000

08002834 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8002834:	b598      	push	{r3, r4, r7, lr}
 8002836:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <handle_button_status+0x98>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d11e      	bne.n	800287e <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <handle_button_status+0x98>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <handle_button_status+0x9c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <handle_button_status+0x22>
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <handle_button_status+0x9c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d103      	bne.n	800285e <handle_button_status+0x2a>
			change_state(HALTED);
 8002856:	2004      	movs	r0, #4
 8002858:	f7fe fe18 	bl	800148c <change_state>
 800285c:	e00a      	b.n	8002874 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <handle_button_status+0x9c>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <handle_button_status+0x3a>
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <handle_button_status+0x9c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d102      	bne.n	8002874 <handle_button_status+0x40>
			change_state(RUN);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fe0c 	bl	800148c <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8002874:	f003 f9d0 	bl	8005c18 <HAL_GetTick>
 8002878:	4603      	mov	r3, r0
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <handle_button_status+0xa0>)
 800287c:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <handle_button_status+0xa4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10d      	bne.n	80028a2 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <handle_button_status+0xa4>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <handle_button_status+0xa8>)
 800288e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002892:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f9ad 	bl	8000bf8 <__aeabi_d2uiz>
 800289e:	4603      	mov	r3, r0
 80028a0:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <handle_button_status+0xac>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10d      	bne.n	80028c6 <handle_button_status+0x92>
		SW_3_pressed = 0;
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <handle_button_status+0xac>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <handle_button_status+0xa8>)
 80028b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028b6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f99b 	bl	8000bf8 <__aeabi_d2uiz>
 80028c2:	4603      	mov	r3, r0
 80028c4:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 80028c6:	bf00      	nop
 80028c8:	bd98      	pop	{r3, r4, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200005d4 	.word	0x200005d4
 80028d0:	2000001d 	.word	0x2000001d
 80028d4:	200005bc 	.word	0x200005bc
 80028d8:	200005d5 	.word	0x200005d5
 80028dc:	200006a0 	.word	0x200006a0
 80028e0:	200005d6 	.word	0x200005d6
 80028e4:	00000000 	.word	0x00000000

080028e8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f4:	f006 fbf8 	bl	80090e8 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <get_stand_status+0x1c>
		stand_status = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	71fb      	strb	r3, [r7, #7]
 8002902:	e001      	b.n	8002908 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	493b      	ldr	r1, [pc, #236]	; (80029f8 <get_stand_status+0x110>)
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fb0b 	bl	8003f28 <Moving_Average_Compute>
 8002912:	eeb0 7a40 	vmov.f32	s14, s0
 8002916:	eef0 7a60 	vmov.f32	s15, s1
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <get_stand_status+0x114>)
 800291c:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8002920:	4b36      	ldr	r3, [pc, #216]	; (80029fc <get_stand_status+0x114>)
 8002922:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002926:	a330      	add	r3, pc, #192	; (adr r3, 80029e8 <get_stand_status+0x100>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fe f912 	bl	8000b54 <__aeabi_dcmpge>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d039      	beq.n	80029aa <get_stand_status+0xc2>
		if(active_state == RUN){
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <get_stand_status+0x118>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d107      	bne.n	800294e <get_stand_status+0x66>
			change_state(STANDBY);
 800293e:	2001      	movs	r0, #1
 8002940:	f7fe fda4 	bl	800148c <change_state>
			previous_standby_millis = HAL_GetTick();
 8002944:	f003 f968 	bl	8005c18 <HAL_GetTick>
 8002948:	4603      	mov	r3, r0
 800294a:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <get_stand_status+0x11c>)
 800294c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 800294e:	f003 f963 	bl	8005c18 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <get_stand_status+0x11c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fdfa 	bl	8000554 <__aeabi_ui2d>
 8002960:	4604      	mov	r4, r0
 8002962:	460d      	mov	r5, r1
 8002964:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <get_stand_status+0x120>)
 8002966:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800296a:	a321      	add	r3, pc, #132	; (adr r3, 80029f0 <get_stand_status+0x108>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fe6a 	bl	8000648 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fe f8ea 	bl	8000b54 <__aeabi_dcmpge>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <get_stand_status+0xac>
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <get_stand_status+0x118>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <get_stand_status+0xac>
			change_state(SLEEP);
 800298e:	2002      	movs	r0, #2
 8002990:	f7fe fd7c 	bl	800148c <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <get_stand_status+0x118>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d003      	beq.n	80029a4 <get_stand_status+0xbc>
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <get_stand_status+0x118>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d102      	bne.n	80029aa <get_stand_status+0xc2>
			change_state(SLEEP);
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7fe fd71 	bl	800148c <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <get_stand_status+0x114>)
 80029ac:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80029b0:	a30d      	add	r3, pc, #52	; (adr r3, 80029e8 <get_stand_status+0x100>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fe f8b9 	bl	8000b2c <__aeabi_dcmplt>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d100      	bne.n	80029c2 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 80029c0:	e00e      	b.n	80029e0 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <get_stand_status+0x118>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d007      	beq.n	80029da <get_stand_status+0xf2>
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <get_stand_status+0x118>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d003      	beq.n	80029da <get_stand_status+0xf2>
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <get_stand_status+0x118>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <get_stand_status+0xf8>
			change_state(RUN);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe fd56 	bl	800148c <change_state>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}
 80029e8:	9999999a 	.word	0x9999999a
 80029ec:	3fc99999 	.word	0x3fc99999
 80029f0:	00000000 	.word	0x00000000
 80029f4:	40ed4c00 	.word	0x40ed4c00
 80029f8:	20001088 	.word	0x20001088
 80029fc:	20000030 	.word	0x20000030
 8002a00:	2000001d 	.word	0x2000001d
 8002a04:	200005c4 	.word	0x200005c4
 8002a08:	200006a0 	.word	0x200006a0

08002a0c <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8002a12:	2110      	movs	r1, #16
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f006 fb66 	bl	80090e8 <HAL_GPIO_ReadPin>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <get_handle_type+0x1c>
		handle_status = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	e001      	b.n	8002a2c <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	495b      	ldr	r1, [pc, #364]	; (8002b9c <get_handle_type+0x190>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fa79 	bl	8003f28 <Moving_Average_Compute>
 8002a36:	eeb0 7a40 	vmov.f32	s14, s0
 8002a3a:	eef0 7a60 	vmov.f32	s15, s1
 8002a3e:	4b58      	ldr	r3, [pc, #352]	; (8002ba0 <get_handle_type+0x194>)
 8002a40:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8002a44:	2120      	movs	r1, #32
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4a:	f006 fb4d 	bl	80090e8 <HAL_GPIO_ReadPin>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <get_handle_type+0x4e>
		handle_status = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e001      	b.n	8002a5e <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4950      	ldr	r1, [pc, #320]	; (8002ba4 <get_handle_type+0x198>)
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fa60 	bl	8003f28 <Moving_Average_Compute>
 8002a68:	eeb0 7a40 	vmov.f32	s14, s0
 8002a6c:	eef0 7a60 	vmov.f32	s15, s1
 8002a70:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <get_handle_type+0x194>)
 8002a72:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* If the handle1_sense is low & handle2_sense is high -> T210 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <get_handle_type+0x194>)
 8002a78:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <get_handle_type+0x19c>)
 8002a82:	f7fe f867 	bl	8000b54 <__aeabi_dcmpge>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <get_handle_type+0xc8>
 8002a8c:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <get_handle_type+0x194>)
 8002a8e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <get_handle_type+0x19c>)
 8002a98:	f7fe f848 	bl	8000b2c <__aeabi_dcmplt>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d018      	beq.n	8002ad4 <get_handle_type+0xc8>
		handle = NT115;
 8002aa2:	4b42      	ldr	r3, [pc, #264]	; (8002bac <get_handle_type+0x1a0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 14; //60W
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <get_handle_type+0x194>)
 8002aaa:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <get_handle_type+0x1a4>)
 8002aac:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 8002aae:	4941      	ldr	r1, [pc, #260]	; (8002bb4 <get_handle_type+0x1a8>)
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <get_handle_type+0x1ac>)
 8002ab6:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 8002aba:	4940      	ldr	r1, [pc, #256]	; (8002bbc <get_handle_type+0x1b0>)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <get_handle_type+0x1b4>)
 8002ac2:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002ac6:	493f      	ldr	r1, [pc, #252]	; (8002bc4 <get_handle_type+0x1b8>)
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <get_handle_type+0x1bc>)
 8002ace:	e9c1 2300 	strd	r2, r3, [r1]
 8002ad2:	e046      	b.n	8002b62 <get_handle_type+0x156>
	}
	/* If the handle1_sense is high & handle2_sense is low -> T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <get_handle_type+0x194>)
 8002ad6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <get_handle_type+0x19c>)
 8002ae0:	f7fe f824 	bl	8000b2c <__aeabi_dcmplt>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d023      	beq.n	8002b32 <get_handle_type+0x126>
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <get_handle_type+0x194>)
 8002aec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <get_handle_type+0x19c>)
 8002af6:	f7fe f82d 	bl	8000b54 <__aeabi_dcmpge>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d018      	beq.n	8002b32 <get_handle_type+0x126>
		handle = T210;
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <get_handle_type+0x1a0>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <get_handle_type+0x194>)
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <get_handle_type+0x1c0>)
 8002b0a:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 8002b0c:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <get_handle_type+0x1a8>)
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <get_handle_type+0x1c4>)
 8002b14:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8002b18:	4928      	ldr	r1, [pc, #160]	; (8002bbc <get_handle_type+0x1b0>)
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <get_handle_type+0x1c4>)
 8002b20:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002b24:	4927      	ldr	r1, [pc, #156]	; (8002bc4 <get_handle_type+0x1b8>)
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <get_handle_type+0x19c>)
 8002b2c:	e9c1 2300 	strd	r2, r3, [r1]
 8002b30:	e017      	b.n	8002b62 <get_handle_type+0x156>
	}
	else{
		handle = T245;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <get_handle_type+0x1a0>)
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <get_handle_type+0x194>)
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <get_handle_type+0x1c8>)
 8002b3c:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 8002b3e:	491d      	ldr	r1, [pc, #116]	; (8002bb4 <get_handle_type+0x1a8>)
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <get_handle_type+0x1cc>)
 8002b46:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8002b4a:	491c      	ldr	r1, [pc, #112]	; (8002bbc <get_handle_type+0x1b0>)
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <get_handle_type+0x1ac>)
 8002b52:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002b56:	491b      	ldr	r1, [pc, #108]	; (8002bc4 <get_handle_type+0x1b8>)
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <get_handle_type+0x19c>)
 8002b5e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <get_handle_type+0x1a8>)
 8002b64:	ed93 7b00 	vldr	d7, [r3]
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <get_handle_type+0x1b0>)
 8002b6a:	ed93 6b00 	vldr	d6, [r3]
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <get_handle_type+0x1b8>)
 8002b70:	ed93 5b00 	vldr	d5, [r3]
 8002b74:	eeb0 2a45 	vmov.f32	s4, s10
 8002b78:	eef0 2a65 	vmov.f32	s5, s11
 8002b7c:	eeb0 1a46 	vmov.f32	s2, s12
 8002b80:	eef0 1a66 	vmov.f32	s3, s13
 8002b84:	eeb0 0a47 	vmov.f32	s0, s14
 8002b88:	eef0 0a67 	vmov.f32	s1, s15
 8002b8c:	4813      	ldr	r0, [pc, #76]	; (8002bdc <get_handle_type+0x1d0>)
 8002b8e:	f001 fca2 	bl	80044d6 <PID_SetTunings>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200013b4 	.word	0x200013b4
 8002ba0:	20000030 	.word	0x20000030
 8002ba4:	200016e0 	.word	0x200016e0
 8002ba8:	3fe00000 	.word	0x3fe00000
 8002bac:	200005b0 	.word	0x200005b0
 8002bb0:	41600000 	.word	0x41600000
 8002bb4:	200005e0 	.word	0x200005e0
 8002bb8:	40080000 	.word	0x40080000
 8002bbc:	200005e8 	.word	0x200005e8
 8002bc0:	3ff00000 	.word	0x3ff00000
 8002bc4:	200005f0 	.word	0x200005f0
 8002bc8:	3fd00000 	.word	0x3fd00000
 8002bcc:	42700000 	.word	0x42700000
 8002bd0:	40140000 	.word	0x40140000
 8002bd4:	42f00000 	.word	0x42f00000
 8002bd8:	40200000 	.word	0x40200000
 8002bdc:	20001f78 	.word	0x20001f78

08002be0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d006      	beq.n	8002bfe <HAL_GPIO_EXTI_Callback+0x1e>
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_EXTI_Callback+0x1e>
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d109      	bne.n	8002c12 <HAL_GPIO_EXTI_Callback+0x32>
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c08:	f009 fe5a 	bl	800c8c0 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
    }
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000001c 	.word	0x2000001c
 8002c20:	20001e48 	.word	0x20001e48

08002c24 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7f1b      	ldrb	r3, [r3, #28]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d003      	beq.n	8002c3c <HAL_TIM_IC_CaptureCallback+0x18>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7f1b      	ldrb	r3, [r3, #28]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8002c3c:	f7ff fd74 	bl	8002728 <beep>
	}
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <set_heater_duty+0x48>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc89 	bl	8000574 <__aeabi_i2d>
 8002c62:	a309      	add	r3, pc, #36	; (adr r3, 8002c88 <set_heater_duty+0x40>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f7fd fcee 	bl	8000648 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4907      	ldr	r1, [pc, #28]	; (8002c90 <set_heater_duty+0x48>)
 8002c72:	680c      	ldr	r4, [r1, #0]
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fd ffbe 	bl	8000bf8 <__aeabi_d2uiz>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	33333333 	.word	0x33333333
 8002c8c:	3fd33333 	.word	0x3fd33333
 8002c90:	20001c80 	.word	0x20001c80
 8002c94:	00000000 	.word	0x00000000

08002c98 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <heater_on+0xa0>)
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc79 	bl	8000598 <__aeabi_f2d>
 8002ca6:	a31e      	add	r3, pc, #120	; (adr r3, 8002d20 <heater_on+0x88>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fccc 	bl	8000648 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <heater_on+0xa0>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc6b 	bl	8000598 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fde7 	bl	800089c <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <heater_on+0xa4>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fcb4 	bl	8000648 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4916      	ldr	r1, [pc, #88]	; (8002d40 <heater_on+0xa8>)
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <heater_on+0xa8>)
 8002cec:	ed93 7b00 	vldr	d7, [r3]
 8002cf0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8002d28 <heater_on+0x90>
 8002cf4:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002d30 <heater_on+0x98>
 8002cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cfc:	eef0 0a67 	vmov.f32	s1, s15
 8002d00:	f7fe fae2 	bl	80012c8 <clamp>
 8002d04:	ec53 2b10 	vmov	r2, r3, d0
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7fd ff74 	bl	8000bf8 <__aeabi_d2uiz>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff97 	bl	8002c48 <set_heater_duty>
}
 8002d1a:	bf00      	nop
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	a5e353f8 	.word	0xa5e353f8
 8002d24:	3fc0c49b 	.word	0x3fc0c49b
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	407f4000 	.word	0x407f4000
	...
 8002d38:	20000030 	.word	0x20000030
 8002d3c:	200006e8 	.word	0x200006e8
 8002d40:	200006f8 	.word	0x200006f8

08002d44 <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7ff ff7d 	bl	8002c48 <set_heater_duty>
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10d      	bne.n	8002d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7f1b      	ldrb	r3, [r3, #28]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d109      	bne.n	8002d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		current_measurement_requested = 0;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8002d7c:	f003 fb8c 	bl	8006498 <HAL_ADC_Start_IT>
	}
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20001c80 	.word	0x20001c80
 8002d8c:	20000700 	.word	0x20000700
 8002d90:	20001a78 	.word	0x20001a78

08002d94 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10c      	bne.n	8002dbe <HAL_TIM_PeriodElapsedCallback+0x2a>
		thermocouple_measurement_done = 0;
 8002da4:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
		heater_off();
 8002daa:	f7ff ffcb 	bl	8002d44 <heater_off>
		__HAL_TIM_ENABLE(&htim7);
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d109      	bne.n	8002dda <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_GPIO_WritePin(GPIOB, USR_3_Pin, GPIO_PIN_SET);
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	2102      	movs	r1, #2
 8002dca:	482f      	ldr	r0, [pc, #188]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002dcc:	f006 f9a4 	bl	8009118 <HAL_GPIO_WritePin>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8002dd0:	223c      	movs	r2, #60	; 0x3c
 8002dd2:	492e      	ldr	r1, [pc, #184]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002dd4:	482e      	ldr	r0, [pc, #184]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002dd6:	f003 fc8f 	bl	80066f8 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_PeriodElapsedCallback+0x5c>
		HAL_TIM_Base_Stop_IT(&htim17);
 8002de2:	482c      	ldr	r0, [pc, #176]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002de4:	f009 fdd6 	bl	800c994 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002de8:	2104      	movs	r1, #4
 8002dea:	482b      	ldr	r0, [pc, #172]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002dec:	f009 ffa4 	bl	800cd38 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d13d      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d139      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0xe0>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8002e00:	2120      	movs	r1, #32
 8002e02:	4821      	ldr	r0, [pc, #132]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002e04:	f006 f970 	bl	80090e8 <HAL_GPIO_ReadPin>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10b      	bne.n	8002e26 <HAL_TIM_PeriodElapsedCallback+0x92>
			SW_ready = 1;
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8002e14:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
			beep();
 8002e1a:	f7ff fc85 	bl	8002728 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8002e1e:	481f      	ldr	r0, [pc, #124]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002e20:	f009 fdb8 	bl	800c994 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 8002e24:	e026      	b.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0xe0>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2c:	f006 f95c 	bl	80090e8 <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10b      	bne.n	8002e4e <HAL_TIM_PeriodElapsedCallback+0xba>
			SW_ready = 1;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
			beep();
 8002e42:	f7ff fc71 	bl	8002728 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8002e46:	4815      	ldr	r0, [pc, #84]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002e48:	f009 fda4 	bl	800c994 <HAL_TIM_Base_Stop_IT>
}
 8002e4c:	e012      	b.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0xe0>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8002e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002e54:	f006 f948 	bl	80090e8 <HAL_GPIO_ReadPin>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d10a      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0xe0>
			SW_ready = 1;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
			beep();
 8002e6a:	f7ff fc5d 	bl	8002728 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8002e6e:	480b      	ldr	r0, [pc, #44]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002e70:	f009 fd90 	bl	800c994 <HAL_TIM_Base_Stop_IT>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20001d64 	.word	0x20001d64
 8002e80:	200001b9 	.word	0x200001b9
 8002e84:	20001db0 	.word	0x20001db0
 8002e88:	48000400 	.word	0x48000400
 8002e8c:	20000624 	.word	0x20000624
 8002e90:	20001a0c 	.word	0x20001a0c
 8002e94:	20001e94 	.word	0x20001e94
 8002e98:	20001d18 	.word	0x20001d18
 8002e9c:	20001e48 	.word	0x20001e48
 8002ea0:	2000001c 	.word	0x2000001c
 8002ea4:	200005d4 	.word	0x200005d4
 8002ea8:	200005d5 	.word	0x200005d5
 8002eac:	200005d6 	.word	0x200005d6

08002eb0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d115      	bne.n	8002eee <HAL_ADC_ConvCpltCallback+0x3e>
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_ADC_ConvCpltCallback+0x7c>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d111      	bne.n	8002eee <HAL_ADC_ConvCpltCallback+0x3e>
		HAL_GPIO_WritePin(GPIOB, USR_3_Pin, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2102      	movs	r1, #2
 8002ece:	4818      	ldr	r0, [pc, #96]	; (8002f30 <HAL_ADC_ConvCpltCallback+0x80>)
 8002ed0:	f006 f922 	bl	8009118 <HAL_GPIO_WritePin>
		get_thermocouple_temperature();
 8002ed4:	f7fe fb3c 	bl	8001550 <get_thermocouple_temperature>
		heater_on();
 8002ed8:	f7ff fede 	bl	8002c98 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8002edc:	4815      	ldr	r0, [pc, #84]	; (8002f34 <HAL_ADC_ConvCpltCallback+0x84>)
 8002ede:	f001 f907 	bl	80040f0 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8002ee2:	4815      	ldr	r0, [pc, #84]	; (8002f38 <HAL_ADC_ConvCpltCallback+0x88>)
 8002ee4:	f003 fcbc 	bl	8006860 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_ADC_ConvCpltCallback+0x7c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2)){
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_ADC_ConvCpltCallback+0x8c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d115      	bne.n	8002f24 <HAL_ADC_ConvCpltCallback+0x74>
		HAL_GPIO_WritePin(GPIOB, USR_2_Pin, GPIO_PIN_RESET);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2101      	movs	r1, #1
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <HAL_ADC_ConvCpltCallback+0x80>)
 8002efe:	f006 f90b 	bl	8009118 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2104      	movs	r1, #4
 8002f06:	480a      	ldr	r0, [pc, #40]	; (8002f30 <HAL_ADC_ConvCpltCallback+0x80>)
 8002f08:	f006 f906 	bl	8009118 <HAL_GPIO_WritePin>
		sensor_values.heater_current = HAL_ADC_GetValue(&hadc2);
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <HAL_ADC_ConvCpltCallback+0x90>)
 8002f0e:	f003 fd08 	bl	8006922 <HAL_ADC_GetValue>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_ADC_ConvCpltCallback+0x94>)
 8002f18:	829a      	strh	r2, [r3, #20]
		heater_on();
 8002f1a:	f7ff febd 	bl	8002c98 <heater_on>
		current_measurement_done = 1;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_ADC_ConvCpltCallback+0x98>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
	}



}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200001b9 	.word	0x200001b9
 8002f30:	48000400 	.word	0x48000400
 8002f34:	20001f78 	.word	0x20001f78
 8002f38:	20001a0c 	.word	0x20001a0c
 8002f3c:	50000100 	.word	0x50000100
 8002f40:	20001a78 	.word	0x20001a78
 8002f44:	20000030 	.word	0x20000030
 8002f48:	200001b8 	.word	0x200001b8
 8002f4c:	00000000 	.word	0x00000000

08002f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	ed2d 8b04 	vpush	{d8-d9}
 8002f58:	b08c      	sub	sp, #48	; 0x30
 8002f5a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5c:	f002 fdf8 	bl	8005b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f60:	f000 fa38 	bl	80033d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f64:	f000 fefc 	bl	8003d60 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f68:	f000 fec8 	bl	8003cfc <MX_DMA_Init>
  MX_ADC1_Init();
 8002f6c:	f000 fa80 	bl	8003470 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002f70:	f000 fb16 	bl	80035a0 <MX_ADC2_Init>
  MX_CRC_Init();
 8002f74:	f000 fb7a 	bl	800366c <MX_CRC_Init>
  MX_TIM1_Init();
 8002f78:	f000 fc18 	bl	80037ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f7c:	f000 fcb6 	bl	80038ec <MX_TIM2_Init>
  MX_TIM4_Init();
 8002f80:	f000 fd08 	bl	8003994 <MX_TIM4_Init>
  MX_SPI2_Init();
 8002f84:	f000 fbd4 	bl	8003730 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002f88:	f000 fb92 	bl	80036b0 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8002f8c:	f011 fefe 	bl	8014d8c <MX_USB_Device_Init>
  MX_TIM17_Init();
 8002f90:	f000 fe38 	bl	8003c04 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002f94:	f000 fe66 	bl	8003c64 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002f98:	f000 fd8c 	bl	8003ab4 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002f9c:	f000 fdca 	bl	8003b34 <MX_TIM8_Init>
  MX_TIM6_Init();
 8002fa0:	f000 fd52 	bl	8003a48 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002fa4:	f000 fe06 	bl	8003bb4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7ff fe4d 	bl	8002c48 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8002fae:	2108      	movs	r1, #8
 8002fb0:	4889      	ldr	r0, [pc, #548]	; (80031d8 <main+0x288>)
 8002fb2:	f00a ff79 	bl	800dea8 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002fb6:	213c      	movs	r1, #60	; 0x3c
 8002fb8:	4888      	ldr	r0, [pc, #544]	; (80031dc <main+0x28c>)
 8002fba:	f00a f897 	bl	800d0ec <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4885      	ldr	r0, [pc, #532]	; (80031d8 <main+0x288>)
 8002fc2:	f009 fd6d 	bl	800caa0 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8002fc6:	4b86      	ldr	r3, [pc, #536]	; (80031e0 <main+0x290>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2205      	movs	r2, #5
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 8002fce:	4885      	ldr	r0, [pc, #532]	; (80031e4 <main+0x294>)
 8002fd0:	f009 fc76 	bl	800c8c0 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8002fd4:	4b84      	ldr	r3, [pc, #528]	; (80031e8 <main+0x298>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b83      	ldr	r3, [pc, #524]	; (80031e8 <main+0x298>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002fe4:	217f      	movs	r1, #127	; 0x7f
 8002fe6:	4881      	ldr	r0, [pc, #516]	; (80031ec <main+0x29c>)
 8002fe8:	f004 fd58 	bl	8007a9c <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002fec:	217f      	movs	r1, #127	; 0x7f
 8002fee:	4880      	ldr	r0, [pc, #512]	; (80031f0 <main+0x2a0>)
 8002ff0:	f004 fd54 	bl	8007a9c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8002ff4:	223c      	movs	r2, #60	; 0x3c
 8002ff6:	497f      	ldr	r1, [pc, #508]	; (80031f4 <main+0x2a4>)
 8002ff8:	487d      	ldr	r0, [pc, #500]	; (80031f0 <main+0x2a0>)
 8002ffa:	f003 fb7d 	bl	80066f8 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,40);
 8002ffe:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80031f8 <main+0x2a8>
 8003002:	487e      	ldr	r0, [pc, #504]	; (80031fc <main+0x2ac>)
 8003004:	f000 ff5f 	bl	8003ec6 <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003008:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003200 <main+0x2b0>
 800300c:	487d      	ldr	r0, [pc, #500]	; (8003204 <main+0x2b4>)
 800300e:	f000 ff5a 	bl	8003ec6 <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003012:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003016:	487c      	ldr	r0, [pc, #496]	; (8003208 <main+0x2b8>)
 8003018:	f000 ff55 	bl	8003ec6 <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 800301c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003020:	487a      	ldr	r0, [pc, #488]	; (800320c <main+0x2bc>)
 8003022:	f000 ff50 	bl	8003ec6 <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003026:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800302a:	4879      	ldr	r0, [pc, #484]	; (8003210 <main+0x2c0>)
 800302c:	f000 ff4b 	bl	8003ec6 <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003030:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003034:	4877      	ldr	r0, [pc, #476]	; (8003214 <main+0x2c4>)
 8003036:	f000 ff46 	bl	8003ec6 <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 800303a:	20c8      	movs	r0, #200	; 0xc8
 800303c:	f002 fdf8 	bl	8005c30 <HAL_Delay>
	LCD_init();
 8003040:	f002 fd1a 	bl	8005a78 <LCD_init>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003044:	f7fd ffd4 	bl	8000ff0 <FlashCheckCRC>
 8003048:	4603      	mov	r3, r0
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <main+0x10a>
  	    	FlashWrite(&default_flash_values);
 8003054:	4870      	ldr	r0, [pc, #448]	; (8003218 <main+0x2c8>)
 8003056:	f7fe f86f 	bl	8001138 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 800305a:	4870      	ldr	r0, [pc, #448]	; (800321c <main+0x2cc>)
 800305c:	f7fe f852 	bl	8001104 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 8003060:	2004      	movs	r0, #4
 8003062:	f7fe fa13 	bl	800148c <change_state>

  		settings_menue();
 8003066:	f7fe fb77 	bl	8001758 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 800306a:	4b6c      	ldr	r3, [pc, #432]	; (800321c <main+0x2cc>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fdbe 	bl	8000bf8 <__aeabi_d2uiz>
 800307c:	4603      	mov	r3, r0
 800307e:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003080:	4b67      	ldr	r3, [pc, #412]	; (8003220 <main+0x2d0>)
 8003082:	ed93 7b00 	vldr	d7, [r3]
 8003086:	4b67      	ldr	r3, [pc, #412]	; (8003224 <main+0x2d4>)
 8003088:	ed93 6b00 	vldr	d6, [r3]
 800308c:	4b66      	ldr	r3, [pc, #408]	; (8003228 <main+0x2d8>)
 800308e:	ed93 5b00 	vldr	d5, [r3]
 8003092:	2300      	movs	r3, #0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2301      	movs	r3, #1
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	eeb0 2a45 	vmov.f32	s4, s10
 800309e:	eef0 2a65 	vmov.f32	s5, s11
 80030a2:	eeb0 1a46 	vmov.f32	s2, s12
 80030a6:	eef0 1a66 	vmov.f32	s3, s13
 80030aa:	eeb0 0a47 	vmov.f32	s0, s14
 80030ae:	eef0 0a67 	vmov.f32	s1, s15
 80030b2:	4b5e      	ldr	r3, [pc, #376]	; (800322c <main+0x2dc>)
 80030b4:	4a5e      	ldr	r2, [pc, #376]	; (8003230 <main+0x2e0>)
 80030b6:	495f      	ldr	r1, [pc, #380]	; (8003234 <main+0x2e4>)
 80030b8:	485f      	ldr	r0, [pc, #380]	; (8003238 <main+0x2e8>)
 80030ba:	f000 ffcd 	bl	8004058 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80030be:	2101      	movs	r1, #1
 80030c0:	485d      	ldr	r0, [pc, #372]	; (8003238 <main+0x2e8>)
 80030c2:	f001 f95c 	bl	800437e <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <main+0x2ec>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	4619      	mov	r1, r3
 80030ce:	485a      	ldr	r0, [pc, #360]	; (8003238 <main+0x2e8>)
 80030d0:	f001 fb04 	bl	80046dc <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 80030d4:	ed9f 1b38 	vldr	d1, [pc, #224]	; 80031b8 <main+0x268>
 80030d8:	ed9f 0b39 	vldr	d0, [pc, #228]	; 80031c0 <main+0x270>
 80030dc:	4856      	ldr	r0, [pc, #344]	; (8003238 <main+0x2e8>)
 80030de:	f001 f96c 	bl	80043ba <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 	// Set max and min I limit
 80030e2:	ed9f 1b39 	vldr	d1, [pc, #228]	; 80031c8 <main+0x278>
 80030e6:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 80031d0 <main+0x280>
 80030ea:	4853      	ldr	r0, [pc, #332]	; (8003238 <main+0x2e8>)
 80030ec:	f001 f9d3 	bl	8004496 <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 80030f0:	f7ff f924 	bl	800233c <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 80030f4:	2300      	movs	r3, #0
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	e00e      	b.n	8003118 <main+0x1c8>
  			get_bus_voltage();
 80030fa:	f7fe f9fd 	bl	80014f8 <get_bus_voltage>
  			get_mcu_temp();
 80030fe:	f7fe f953 	bl	80013a8 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003102:	f7fe fa25 	bl	8001550 <get_thermocouple_temperature>
  			get_handle_type();
 8003106:	f7ff fc81 	bl	8002a0c <get_handle_type>
  			get_stand_status();
 800310a:	f7ff fbed 	bl	80028e8 <get_stand_status>
  			handle_button_status();
 800310e:	f7ff fb91 	bl	8002834 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3301      	adds	r3, #1
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2bc7      	cmp	r3, #199	; 0xc7
 800311c:	dded      	ble.n	80030fa <main+0x1aa>
  		}

  		/* Start-up beep */
  		beep();
 800311e:	f7ff fb03 	bl	8002728 <beep>
  		HAL_Delay(100);
 8003122:	2064      	movs	r0, #100	; 0x64
 8003124:	f002 fd84 	bl	8005c30 <HAL_Delay>
  		beep();
 8003128:	f7ff fafe 	bl	8002728 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 800312c:	f002 fd74 	bl	8005c18 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	4b43      	ldr	r3, [pc, #268]	; (8003240 <main+0x2f0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1ad2      	subs	r2, r2, r3
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <main+0x2f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d30e      	bcc.n	800315e <main+0x20e>
  				get_stand_status();
 8003140:	f7ff fbd2 	bl	80028e8 <get_stand_status>
  				get_handle_type();
 8003144:	f7ff fc62 	bl	8002a0c <get_handle_type>
  				get_set_temperature();
 8003148:	f7ff fab4 	bl	80026b4 <get_set_temperature>
  				handle_button_status();
 800314c:	f7ff fb72 	bl	8002834 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003150:	f7ff fb0a 	bl	8002768 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003154:	f002 fd60 	bl	8005c18 <HAL_GetTick>
 8003158:	4603      	mov	r3, r0
 800315a:	4a39      	ldr	r2, [pc, #228]	; (8003240 <main+0x2f0>)
 800315c:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 800315e:	f002 fd5b 	bl	8005c18 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	4b38      	ldr	r3, [pc, #224]	; (8003248 <main+0x2f8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1ad2      	subs	r2, r2, r3
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <main+0x2fc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d308      	bcc.n	8003184 <main+0x234>
  				get_bus_voltage();
 8003172:	f7fe f9c1 	bl	80014f8 <get_bus_voltage>
  				get_mcu_temp();
 8003176:	f7fe f917 	bl	80013a8 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 800317a:	f002 fd4d 	bl	8005c18 <HAL_GetTick>
 800317e:	4603      	mov	r3, r0
 8003180:	4a31      	ldr	r2, [pc, #196]	; (8003248 <main+0x2f8>)
 8003182:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <main+0x300>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	dc6d      	bgt.n	8003268 <main+0x318>
 800318c:	2b02      	cmp	r3, #2
 800318e:	da63      	bge.n	8003258 <main+0x308>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <main+0x24a>
 8003194:	2b01      	cmp	r3, #1
 8003196:	d007      	beq.n	80031a8 <main+0x258>
 8003198:	e066      	b.n	8003268 <main+0x318>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <main+0x304>)
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	4922      	ldr	r1, [pc, #136]	; (800322c <main+0x2dc>)
 80031a2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80031a6:	e05f      	b.n	8003268 <main+0x318>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <main+0x2cc>)
 80031aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031ae:	491f      	ldr	r1, [pc, #124]	; (800322c <main+0x2dc>)
 80031b0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80031b4:	e058      	b.n	8003268 <main+0x318>
 80031b6:	bf00      	nop
 80031b8:	00000000 	.word	0x00000000
 80031bc:	407f4000 	.word	0x407f4000
	...
 80031cc:	4062c000 	.word	0x4062c000
 80031d0:	00000000 	.word	0x00000000
 80031d4:	c062c000 	.word	0xc062c000
 80031d8:	20001c80 	.word	0x20001c80
 80031dc:	20001ccc 	.word	0x20001ccc
 80031e0:	20001d18 	.word	0x20001d18
 80031e4:	20001d64 	.word	0x20001d64
 80031e8:	20001db0 	.word	0x20001db0
 80031ec:	20001a78 	.word	0x20001a78
 80031f0:	20001a0c 	.word	0x20001a0c
 80031f4:	20000624 	.word	0x20000624
 80031f8:	42200000 	.word	0x42200000
 80031fc:	20000704 	.word	0x20000704
 8003200:	42c80000 	.word	0x42c80000
 8003204:	20000a30 	.word	0x20000a30
 8003208:	20000d5c 	.word	0x20000d5c
 800320c:	20001088 	.word	0x20001088
 8003210:	200013b4 	.word	0x200013b4
 8003214:	200016e0 	.word	0x200016e0
 8003218:	20000080 	.word	0x20000080
 800321c:	200006a0 	.word	0x200006a0
 8003220:	200005e0 	.word	0x200005e0
 8003224:	200005e8 	.word	0x200005e8
 8003228:	200005f0 	.word	0x200005f0
 800322c:	200006f0 	.word	0x200006f0
 8003230:	200006e8 	.word	0x200006e8
 8003234:	20000038 	.word	0x20000038
 8003238:	20001f78 	.word	0x20001f78
 800323c:	2000000c 	.word	0x2000000c
 8003240:	200005cc 	.word	0x200005cc
 8003244:	20000014 	.word	0x20000014
 8003248:	200005d0 	.word	0x200005d0
 800324c:	20000018 	.word	0x20000018
 8003250:	2000001d 	.word	0x2000001d
 8003254:	20000030 	.word	0x20000030
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003258:	494e      	ldr	r1, [pc, #312]	; (8003394 <main+0x444>)
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003266:	bf00      	nop
  			// ----------------------------------------------



  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003268:	f002 fcd6 	bl	8005c18 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <main+0x448>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <main+0x44c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d35c      	bcc.n	8003336 <main+0x3e6>
  				memset(&buffer, '\0', sizeof(buffer));
 800327c:	2228      	movs	r2, #40	; 0x28
 800327e:	2100      	movs	r1, #0
 8003280:	4847      	ldr	r0, [pc, #284]	; (80033a0 <main+0x450>)
 8003282:	f013 f818 	bl	80162b6 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003286:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <main+0x454>)
 8003288:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800328c:	4b45      	ldr	r3, [pc, #276]	; (80033a4 <main+0x454>)
 800328e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003292:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <main+0x458>)
 8003294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <main+0x45c>)
 800329e:	f7fd fafd 	bl	800089c <__aeabi_ddiv>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	ec43 2b18 	vmov	d8, r2, r3
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 80032aa:	4841      	ldr	r0, [pc, #260]	; (80033b0 <main+0x460>)
 80032ac:	f001 fa5a 	bl	8004764 <PID_GetPpart>
 80032b0:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <main+0x45c>)
 80032ba:	f7fd faef 	bl	800089c <__aeabi_ddiv>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 80032c6:	483a      	ldr	r0, [pc, #232]	; (80033b0 <main+0x460>)
 80032c8:	f001 fa5e 	bl	8004788 <PID_GetIpart>
 80032cc:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <main+0x45c>)
 80032d6:	f7fd fae1 	bl	800089c <__aeabi_ddiv>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4692      	mov	sl, r2
 80032e0:	469b      	mov	fp, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0);
 80032e2:	4833      	ldr	r0, [pc, #204]	; (80033b0 <main+0x460>)
 80032e4:	f001 fa62 	bl	80047ac <PID_GetDpart>
 80032e8:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <main+0x45c>)
 80032f2:	f7fd fad3 	bl	800089c <__aeabi_ddiv>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80032fe:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003302:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003306:	ed8d 8b02 	vstr	d8, [sp, #8]
 800330a:	e9cd 4500 	strd	r4, r5, [sp]
 800330e:	4642      	mov	r2, r8
 8003310:	464b      	mov	r3, r9
 8003312:	4928      	ldr	r1, [pc, #160]	; (80033b4 <main+0x464>)
 8003314:	4822      	ldr	r0, [pc, #136]	; (80033a0 <main+0x450>)
 8003316:	f012 ff6b 	bl	80161f0 <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 800331a:	4821      	ldr	r0, [pc, #132]	; (80033a0 <main+0x450>)
 800331c:	f7fc ffd0 	bl	80002c0 <strlen>
 8003320:	4603      	mov	r3, r0
 8003322:	b29b      	uxth	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	481e      	ldr	r0, [pc, #120]	; (80033a0 <main+0x450>)
 8003328:	f011 fdee 	bl	8014f08 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 800332c:	f002 fc74 	bl	8005c18 <HAL_GetTick>
 8003330:	4603      	mov	r3, r0
 8003332:	4a19      	ldr	r2, [pc, #100]	; (8003398 <main+0x448>)
 8003334:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003336:	f002 fc6f 	bl	8005c18 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <main+0x468>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1ad2      	subs	r2, r2, r3
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <main+0x46c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d311      	bcc.n	800336e <main+0x41e>
  					if(thermocouple_measurement_done == 1){
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <main+0x470>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d10d      	bne.n	800336e <main+0x41e>
						current_measurement_done = 0;
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <main+0x474>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8003358:	20fa      	movs	r0, #250	; 0xfa
 800335a:	f7ff fc75 	bl	8002c48 <set_heater_duty>
						current_measurement_requested = 1;
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <main+0x478>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 8003364:	f002 fc58 	bl	8005c18 <HAL_GetTick>
 8003368:	4603      	mov	r3, r0
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <main+0x468>)
 800336c:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 800336e:	f002 fc53 	bl	8005c18 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <main+0x47c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1ad2      	subs	r2, r2, r3
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <main+0x480>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	f4ff aed4 	bcc.w	800312c <main+0x1dc>
  				update_display();
 8003384:	f7fe fcd8 	bl	8001d38 <update_display>
  				previous_millis_display = HAL_GetTick();
 8003388:	f002 fc46 	bl	8005c18 <HAL_GetTick>
 800338c:	4603      	mov	r3, r0
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <main+0x47c>)
 8003390:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003392:	e6cb      	b.n	800312c <main+0x1dc>
 8003394:	200006f0 	.word	0x200006f0
 8003398:	200005b8 	.word	0x200005b8
 800339c:	20000008 	.word	0x20000008
 80033a0:	200005f8 	.word	0x200005f8
 80033a4:	20000030 	.word	0x20000030
 80033a8:	200006e8 	.word	0x200006e8
 80033ac:	40240000 	.word	0x40240000
 80033b0:	20001f78 	.word	0x20001f78
 80033b4:	080188cc 	.word	0x080188cc
 80033b8:	200005c8 	.word	0x200005c8
 80033bc:	20000010 	.word	0x20000010
 80033c0:	200001b9 	.word	0x200001b9
 80033c4:	200001b8 	.word	0x200001b8
 80033c8:	20000700 	.word	0x20000700
 80033cc:	200005b4 	.word	0x200005b4
 80033d0:	20000004 	.word	0x20000004

080033d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b094      	sub	sp, #80	; 0x50
 80033d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033da:	f107 0318 	add.w	r3, r7, #24
 80033de:	2238      	movs	r2, #56	; 0x38
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f012 ff67 	bl	80162b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f007 fd24 	bl	800ae44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80033fc:	2322      	movs	r3, #34	; 0x22
 80033fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800340a:	2301      	movs	r3, #1
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800340e:	2302      	movs	r3, #2
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003412:	2302      	movs	r3, #2
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003416:	2304      	movs	r3, #4
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800341a:	2355      	movs	r3, #85	; 0x55
 800341c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800341e:	2302      	movs	r3, #2
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003422:	2302      	movs	r3, #2
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003426:	2302      	movs	r3, #2
 8003428:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800342a:	f107 0318 	add.w	r3, r7, #24
 800342e:	4618      	mov	r0, r3
 8003430:	f007 fdbc 	bl	800afac <HAL_RCC_OscConfig>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800343a:	f000 fd3f 	bl	8003ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800343e:	230f      	movs	r3, #15
 8003440:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003442:	2303      	movs	r3, #3
 8003444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2104      	movs	r1, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f008 f8ba 	bl	800b5d0 <HAL_RCC_ClockConfig>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003462:	f000 fd2b 	bl	8003ebc <Error_Handler>
  }
}
 8003466:	bf00      	nop
 8003468:	3750      	adds	r7, #80	; 0x50
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2220      	movs	r2, #32
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f012 ff14 	bl	80162b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <MX_ADC1_Init+0x120>)
 8003490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003494:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003496:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <MX_ADC1_Init+0x120>)
 8003498:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800349c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800349e:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <MX_ADC1_Init+0x120>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034a4:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <MX_ADC1_Init+0x120>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <MX_ADC1_Init+0x120>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <MX_ADC1_Init+0x120>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <MX_ADC1_Init+0x120>)
 80034b8:	2204      	movs	r2, #4
 80034ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034bc:	4b34      	ldr	r3, [pc, #208]	; (8003590 <MX_ADC1_Init+0x120>)
 80034be:	2200      	movs	r2, #0
 80034c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <MX_ADC1_Init+0x120>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <MX_ADC1_Init+0x120>)
 80034ca:	2203      	movs	r2, #3
 80034cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034ce:	4b30      	ldr	r3, [pc, #192]	; (8003590 <MX_ADC1_Init+0x120>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034d6:	4b2e      	ldr	r3, [pc, #184]	; (8003590 <MX_ADC1_Init+0x120>)
 80034d8:	2200      	movs	r2, #0
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034dc:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <MX_ADC1_Init+0x120>)
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034e2:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <MX_ADC1_Init+0x120>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <MX_ADC1_Init+0x120>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <MX_ADC1_Init+0x120>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034f8:	4825      	ldr	r0, [pc, #148]	; (8003590 <MX_ADC1_Init+0x120>)
 80034fa:	f002 fe49 	bl	8006190 <HAL_ADC_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003504:	f000 fcda 	bl	8003ebc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800350c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003510:	4619      	mov	r1, r3
 8003512:	481f      	ldr	r0, [pc, #124]	; (8003590 <MX_ADC1_Init+0x120>)
 8003514:	f004 fb56 	bl	8007bc4 <HAL_ADCEx_MultiModeConfigChannel>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800351e:	f000 fccd 	bl	8003ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <MX_ADC1_Init+0x124>)
 8003524:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003526:	2306      	movs	r3, #6
 8003528:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800352a:	2306      	movs	r3, #6
 800352c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800352e:	237f      	movs	r3, #127	; 0x7f
 8003530:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003532:	2304      	movs	r3, #4
 8003534:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4814      	ldr	r0, [pc, #80]	; (8003590 <MX_ADC1_Init+0x120>)
 8003540:	f003 fc34 	bl	8006dac <HAL_ADC_ConfigChannel>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800354a:	f000 fcb7 	bl	8003ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <MX_ADC1_Init+0x128>)
 8003550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003552:	230c      	movs	r3, #12
 8003554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	4619      	mov	r1, r3
 800355a:	480d      	ldr	r0, [pc, #52]	; (8003590 <MX_ADC1_Init+0x120>)
 800355c:	f003 fc26 	bl	8006dac <HAL_ADC_ConfigChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003566:	f000 fca9 	bl	8003ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_ADC1_Init+0x12c>)
 800356c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800356e:	2312      	movs	r3, #18
 8003570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <MX_ADC1_Init+0x120>)
 8003578:	f003 fc18 	bl	8006dac <HAL_ADC_ConfigChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8003582:	f000 fc9b 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	3730      	adds	r7, #48	; 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20001a0c 	.word	0x20001a0c
 8003594:	0c900008 	.word	0x0c900008
 8003598:	10c00010 	.word	0x10c00010
 800359c:	c3210000 	.word	0xc3210000

080035a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035a6:	463b      	mov	r3, r7
 80035a8:	2220      	movs	r2, #32
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f012 fe82 	bl	80162b6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035b4:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <MX_ADC2_Init+0xc4>)
 80035b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80035b8:	4b29      	ldr	r3, [pc, #164]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035da:	2204      	movs	r2, #4
 80035dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <MX_ADC2_Init+0xc0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <MX_ADC2_Init+0xc0>)
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <MX_ADC2_Init+0xc0>)
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <MX_ADC2_Init+0xc0>)
 800360e:	2200      	movs	r2, #0
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <MX_ADC2_Init+0xc0>)
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <MX_ADC2_Init+0xc0>)
 800361c:	f002 fdb8 	bl	8006190 <HAL_ADC_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003626:	f000 fc49 	bl	8003ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <MX_ADC2_Init+0xc8>)
 800362c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800362e:	2306      	movs	r3, #6
 8003630:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003632:	2306      	movs	r3, #6
 8003634:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003636:	237f      	movs	r3, #127	; 0x7f
 8003638:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800363a:	2304      	movs	r3, #4
 800363c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003642:	463b      	mov	r3, r7
 8003644:	4619      	mov	r1, r3
 8003646:	4806      	ldr	r0, [pc, #24]	; (8003660 <MX_ADC2_Init+0xc0>)
 8003648:	f003 fbb0 	bl	8006dac <HAL_ADC_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003652:	f000 fc33 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20001a78 	.word	0x20001a78
 8003664:	50000100 	.word	0x50000100
 8003668:	2a000400 	.word	0x2a000400

0800366c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <MX_CRC_Init+0x3c>)
 8003672:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <MX_CRC_Init+0x40>)
 8003674:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_CRC_Init+0x3c>)
 8003678:	2200      	movs	r2, #0
 800367a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <MX_CRC_Init+0x3c>)
 800367e:	2200      	movs	r2, #0
 8003680:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_CRC_Init+0x3c>)
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <MX_CRC_Init+0x3c>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_CRC_Init+0x3c>)
 8003690:	2201      	movs	r2, #1
 8003692:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003694:	4804      	ldr	r0, [pc, #16]	; (80036a8 <MX_CRC_Init+0x3c>)
 8003696:	f004 fc49 	bl	8007f2c <HAL_CRC_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80036a0:	f000 fc0c 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20001b44 	.word	0x20001b44
 80036ac:	40023000 	.word	0x40023000

080036b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <MX_I2C1_Init+0x74>)
 80036b6:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <MX_I2C1_Init+0x78>)
 80036b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80036ba:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <MX_I2C1_Init+0x74>)
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <MX_I2C1_Init+0x7c>)
 80036be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <MX_I2C1_Init+0x74>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <MX_I2C1_Init+0x74>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <MX_I2C1_Init+0x74>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <MX_I2C1_Init+0x74>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <MX_I2C1_Init+0x74>)
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <MX_I2C1_Init+0x74>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <MX_I2C1_Init+0x74>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036ea:	480e      	ldr	r0, [pc, #56]	; (8003724 <MX_I2C1_Init+0x74>)
 80036ec:	f005 fd44 	bl	8009178 <HAL_I2C_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036f6:	f000 fbe1 	bl	8003ebc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036fa:	2100      	movs	r1, #0
 80036fc:	4809      	ldr	r0, [pc, #36]	; (8003724 <MX_I2C1_Init+0x74>)
 80036fe:	f005 fdd6 	bl	80092ae <HAL_I2CEx_ConfigAnalogFilter>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003708:	f000 fbd8 	bl	8003ebc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800370c:	2100      	movs	r1, #0
 800370e:	4805      	ldr	r0, [pc, #20]	; (8003724 <MX_I2C1_Init+0x74>)
 8003710:	f005 fe18 	bl	8009344 <HAL_I2CEx_ConfigDigitalFilter>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800371a:	f000 fbcf 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20001b68 	.word	0x20001b68
 8003728:	40005400 	.word	0x40005400
 800372c:	30a0a7fb 	.word	0x30a0a7fb

08003730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <MX_SPI2_Init+0x78>)
 8003738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <MX_SPI2_Init+0x74>)
 800373c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003748:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <MX_SPI2_Init+0x74>)
 800374c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003750:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <MX_SPI2_Init+0x74>)
 800375a:	2200      	movs	r2, #0
 800375c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003764:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003768:	2210      	movs	r2, #16
 800376a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <MX_SPI2_Init+0x74>)
 800376e:	2200      	movs	r2, #0
 8003770:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003774:	2200      	movs	r2, #0
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <MX_SPI2_Init+0x74>)
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003780:	2207      	movs	r2, #7
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <MX_SPI2_Init+0x74>)
 800378c:	2208      	movs	r2, #8
 800378e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003790:	4804      	ldr	r0, [pc, #16]	; (80037a4 <MX_SPI2_Init+0x74>)
 8003792:	f008 fb29 	bl	800bde8 <HAL_SPI_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800379c:	f000 fb8e 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20001bbc 	.word	0x20001bbc
 80037a8:	40003800 	.word	0x40003800

080037ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b098      	sub	sp, #96	; 0x60
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	611a      	str	r2, [r3, #16]
 80037ce:	615a      	str	r2, [r3, #20]
 80037d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	2234      	movs	r2, #52	; 0x34
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f012 fd6c 	bl	80162b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <MX_TIM1_Init+0x138>)
 80037e0:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <MX_TIM1_Init+0x13c>)
 80037e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <MX_TIM1_Init+0x138>)
 80037e6:	2213      	movs	r2, #19
 80037e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <MX_TIM1_Init+0x138>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80037f0:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <MX_TIM1_Init+0x138>)
 80037f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <MX_TIM1_Init+0x138>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <MX_TIM1_Init+0x138>)
 8003800:	2200      	movs	r2, #0
 8003802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003804:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <MX_TIM1_Init+0x138>)
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800380a:	4836      	ldr	r0, [pc, #216]	; (80038e4 <MX_TIM1_Init+0x138>)
 800380c:	f009 f8f1 	bl	800c9f2 <HAL_TIM_PWM_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003816:	f000 fb51 	bl	8003ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800382a:	4619      	mov	r1, r3
 800382c:	482d      	ldr	r0, [pc, #180]	; (80038e4 <MX_TIM1_Init+0x138>)
 800382e:	f00a fc43 	bl	800e0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003838:	f000 fb40 	bl	8003ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800383c:	2360      	movs	r3, #96	; 0x60
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003844:	2300      	movs	r3, #0
 8003846:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003848:	2300      	movs	r3, #0
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800384c:	2300      	movs	r3, #0
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003854:	2300      	movs	r3, #0
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800385c:	2200      	movs	r2, #0
 800385e:	4619      	mov	r1, r3
 8003860:	4820      	ldr	r0, [pc, #128]	; (80038e4 <MX_TIM1_Init+0x138>)
 8003862:	f009 fe41 	bl	800d4e8 <HAL_TIM_PWM_ConfigChannel>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800386c:	f000 fb26 	bl	8003ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003870:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003874:	2208      	movs	r2, #8
 8003876:	4619      	mov	r1, r3
 8003878:	481a      	ldr	r0, [pc, #104]	; (80038e4 <MX_TIM1_Init+0x138>)
 800387a:	f009 fe35 	bl	800d4e8 <HAL_TIM_PWM_ConfigChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003884:	f000 fb1a 	bl	8003ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003888:	2300      	movs	r3, #0
 800388a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800389c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80038ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80038b8:	2300      	movs	r3, #0
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	4807      	ldr	r0, [pc, #28]	; (80038e4 <MX_TIM1_Init+0x138>)
 80038c6:	f00a fc79 	bl	800e1bc <HAL_TIMEx_ConfigBreakDeadTime>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80038d0:	f000 faf4 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038d4:	4803      	ldr	r0, [pc, #12]	; (80038e4 <MX_TIM1_Init+0x138>)
 80038d6:	f001 fadf 	bl	8004e98 <HAL_TIM_MspPostInit>

}
 80038da:	bf00      	nop
 80038dc:	3760      	adds	r7, #96	; 0x60
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20001c80 	.word	0x20001c80
 80038e8:	40012c00 	.word	0x40012c00

080038ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038f2:	f107 030c 	add.w	r3, r7, #12
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f012 fcdb 	bl	80162b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003900:	463b      	mov	r3, r7
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800390a:	4b21      	ldr	r3, [pc, #132]	; (8003990 <MX_TIM2_Init+0xa4>)
 800390c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003912:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <MX_TIM2_Init+0xa4>)
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <MX_TIM2_Init+0xa4>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <MX_TIM2_Init+0xa4>)
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003926:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <MX_TIM2_Init+0xa4>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <MX_TIM2_Init+0xa4>)
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003932:	2303      	movs	r3, #3
 8003934:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003936:	2302      	movs	r3, #2
 8003938:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003942:	230a      	movs	r3, #10
 8003944:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003952:	230a      	movs	r3, #10
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4619      	mov	r1, r3
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <MX_TIM2_Init+0xa4>)
 800395e:	f009 fb1f 	bl	800cfa0 <HAL_TIM_Encoder_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003968:	f000 faa8 	bl	8003ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003974:	463b      	mov	r3, r7
 8003976:	4619      	mov	r1, r3
 8003978:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_TIM2_Init+0xa4>)
 800397a:	f00a fb9d 	bl	800e0b8 <HAL_TIMEx_MasterConfigSynchronization>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003984:	f000 fa9a 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003988:	bf00      	nop
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20001ccc 	.word	0x20001ccc

08003994 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399a:	f107 031c 	add.w	r3, r7, #28
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039a6:	463b      	mov	r3, r7
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
 80039b4:	615a      	str	r2, [r3, #20]
 80039b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <MX_TIM4_Init+0xb0>)
 80039bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80039c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039ce:	220a      	movs	r2, #10
 80039d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80039de:	4818      	ldr	r0, [pc, #96]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039e0:	f009 f807 	bl	800c9f2 <HAL_TIM_PWM_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80039ea:	f000 fa67 	bl	8003ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039f6:	f107 031c 	add.w	r3, r7, #28
 80039fa:	4619      	mov	r1, r3
 80039fc:	4810      	ldr	r0, [pc, #64]	; (8003a40 <MX_TIM4_Init+0xac>)
 80039fe:	f00a fb5b 	bl	800e0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003a08:	f000 fa58 	bl	8003ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a0c:	2360      	movs	r3, #96	; 0x60
 8003a0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4807      	ldr	r0, [pc, #28]	; (8003a40 <MX_TIM4_Init+0xac>)
 8003a24:	f009 fd60 	bl	800d4e8 <HAL_TIM_PWM_ConfigChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003a2e:	f000 fa45 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a32:	4803      	ldr	r0, [pc, #12]	; (8003a40 <MX_TIM4_Init+0xac>)
 8003a34:	f001 fa30 	bl	8004e98 <HAL_TIM_MspPostInit>

}
 8003a38:	bf00      	nop
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20001d18 	.word	0x20001d18
 8003a44:	40000800 	.word	0x40000800

08003a48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a58:	4b14      	ldr	r3, [pc, #80]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <MX_TIM6_Init+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a60:	f244 2267 	movw	r2, #16999	; 0x4267
 8003a64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a6e:	22fa      	movs	r2, #250	; 0xfa
 8003a70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a78:	480c      	ldr	r0, [pc, #48]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a7a:	f008 fec9 	bl	800c810 <HAL_TIM_Base_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003a84:	f000 fa1a 	bl	8003ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4805      	ldr	r0, [pc, #20]	; (8003aac <MX_TIM6_Init+0x64>)
 8003a96:	f00a fb0f 	bl	800e0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003aa0:	f000 fa0c 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20001d64 	.word	0x20001d64
 8003ab0:	40001000 	.word	0x40001000

08003ab4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <MX_TIM7_Init+0x7c>)
 8003ac8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003acc:	f244 2267 	movw	r2, #16999	; 0x4267
 8003ad0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003ada:	2209      	movs	r2, #9
 8003adc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ae4:	4811      	ldr	r0, [pc, #68]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003ae6:	f008 fe93 	bl	800c810 <HAL_TIM_Base_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003af0:	f000 f9e4 	bl	8003ebc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003af4:	2108      	movs	r1, #8
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003af8:	f009 fa02 	bl	800cf00 <HAL_TIM_OnePulse_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8003b02:	f000 f9db 	bl	8003ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b06:	2320      	movs	r3, #32
 8003b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4806      	ldr	r0, [pc, #24]	; (8003b2c <MX_TIM7_Init+0x78>)
 8003b14:	f00a fad0 	bl	800e0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8003b1e:	f000 f9cd 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20001db0 	.word	0x20001db0
 8003b30:	40001400 	.word	0x40001400

08003b34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <MX_TIM8_Init+0x7c>)
 8003b48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003b4a:	4b18      	ldr	r3, [pc, #96]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003b70:	2108      	movs	r1, #8
 8003b72:	480e      	ldr	r0, [pc, #56]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b74:	f009 f9c4 	bl	800cf00 <HAL_TIM_OnePulse_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8003b7e:	f000 f99d 	bl	8003ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4806      	ldr	r0, [pc, #24]	; (8003bac <MX_TIM8_Init+0x78>)
 8003b94:	f00a fa90 	bl	800e0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003b9e:	f000 f98d 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20001dfc 	.word	0x20001dfc
 8003bb0:	40013400 	.word	0x40013400

08003bb4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003bba:	4a11      	ldr	r2, [pc, #68]	; (8003c00 <MX_TIM16_Init+0x4c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003bc0:	f244 2267 	movw	r2, #16999	; 0x4267
 8003bc4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003bce:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003bd2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003be6:	4805      	ldr	r0, [pc, #20]	; (8003bfc <MX_TIM16_Init+0x48>)
 8003be8:	f008 fe12 	bl	800c810 <HAL_TIM_Base_Init>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003bf2:	f000 f963 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20001e48 	.word	0x20001e48
 8003c00:	40014400 	.word	0x40014400

08003c04 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <MX_TIM17_Init+0x5c>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c10:	f244 2267 	movw	r2, #16999	; 0x4267
 8003c14:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c1e:	2231      	movs	r2, #49	; 0x31
 8003c20:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003c34:	4809      	ldr	r0, [pc, #36]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c36:	f008 fdeb 	bl	800c810 <HAL_TIM_Base_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003c40:	f000 f93c 	bl	8003ebc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003c44:	2108      	movs	r1, #8
 8003c46:	4805      	ldr	r0, [pc, #20]	; (8003c5c <MX_TIM17_Init+0x58>)
 8003c48:	f009 f95a 	bl	800cf00 <HAL_TIM_OnePulse_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003c52:	f000 f933 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20001e94 	.word	0x20001e94
 8003c60:	40014800 	.word	0x40014800

08003c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c68:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c6a:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <MX_USART1_UART_Init+0x94>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c82:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cac:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003cae:	f00a fb7c 	bl	800e3aa <HAL_UART_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003cb8:	f000 f900 	bl	8003ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	480d      	ldr	r0, [pc, #52]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003cc0:	f00b f8e8 	bl	800ee94 <HAL_UARTEx_SetTxFifoThreshold>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003cca:	f000 f8f7 	bl	8003ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4808      	ldr	r0, [pc, #32]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003cd2:	f00b f91d 	bl	800ef10 <HAL_UARTEx_SetRxFifoThreshold>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003cdc:	f000 f8ee 	bl	8003ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ce0:	4804      	ldr	r0, [pc, #16]	; (8003cf4 <MX_USART1_UART_Init+0x90>)
 8003ce2:	f00b f89e 	bl	800ee22 <HAL_UARTEx_DisableFifoMode>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003cec:	f000 f8e6 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20001ee0 	.word	0x20001ee0
 8003cf8:	40013800 	.word	0x40013800

08003cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <MX_DMA_Init+0x60>)
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <MX_DMA_Init+0x60>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6493      	str	r3, [r2, #72]	; 0x48
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <MX_DMA_Init+0x60>)
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <MX_DMA_Init+0x60>)
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <MX_DMA_Init+0x60>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6493      	str	r3, [r2, #72]	; 0x48
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <MX_DMA_Init+0x60>)
 8003d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	200b      	movs	r0, #11
 8003d38:	f004 f8c3 	bl	8007ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d3c:	200b      	movs	r0, #11
 8003d3e:	f004 f8da 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	200d      	movs	r0, #13
 8003d48:	f004 f8bb 	bl	8007ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003d4c:	200d      	movs	r0, #13
 8003d4e:	f004 f8d2 	bl	8007ef6 <HAL_NVIC_EnableIRQ>

}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d66:	f107 0314 	add.w	r3, r7, #20
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d76:	4b4e      	ldr	r3, [pc, #312]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d82:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d8e:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	4a47      	ldr	r2, [pc, #284]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003d94:	f043 0320 	orr.w	r3, r3, #32
 8003d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d9a:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4a41      	ldr	r2, [pc, #260]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db2:	4b3f      	ldr	r3, [pc, #252]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	4a3b      	ldr	r2, [pc, #236]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <MX_GPIO_Init+0x150>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2102      	movs	r1, #2
 8003dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dde:	f005 f99b 	bl	8009118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003de2:	2200      	movs	r2, #0
 8003de4:	f645 4107 	movw	r1, #23559	; 0x5c07
 8003de8:	4832      	ldr	r0, [pc, #200]	; (8003eb4 <MX_GPIO_Init+0x154>)
 8003dea:	f005 f995 	bl	8009118 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8003dee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	482d      	ldr	r0, [pc, #180]	; (8003eb8 <MX_GPIO_Init+0x158>)
 8003e04:	f004 ffee 	bl	8008de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e22:	f004 ffdf 	bl	8008de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8003e26:	2370      	movs	r3, #112	; 0x70
 8003e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4619      	mov	r1, r3
 8003e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e3c:	f004 ffd2 	bl	8008de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8003e4e:	f107 0314 	add.w	r3, r7, #20
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e58:	f004 ffc4 	bl	8008de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003e5c:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003e60:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4619      	mov	r1, r3
 8003e74:	480f      	ldr	r0, [pc, #60]	; (8003eb4 <MX_GPIO_Init+0x154>)
 8003e76:	f004 ffb5 	bl	8008de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8003e7a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <MX_GPIO_Init+0x154>)
 8003e92:	f004 ffa7 	bl	8008de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2017      	movs	r0, #23
 8003e9c:	f004 f811 	bl	8007ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ea0:	2017      	movs	r0, #23
 8003ea2:	f004 f828 	bl	8007ef6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ea6:	bf00      	nop
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	48000400 	.word	0x48000400
 8003eb8:	48000800 	.word	0x48000800

08003ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec0:	b672      	cpsid	i
}
 8003ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <Error_Handler+0x8>

08003ec6 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e008      	b.n	8003f00 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	edd3 7a00 	vldr	s15, [r3]
 8003f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d4e9      	bmi.n	8003eee <Moving_Average_Init+0x28>
	}
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	441a      	add	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	edd3 7a00 	vldr	s15, [r3]
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f92:	d507      	bpl.n	8003fa4 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8003fa2:	e003      	b.n	8003fac <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fc4:	ee16 0a90 	vmov	r0, s13
 8003fc8:	f7fc fae6 	bl	8000598 <__aeabi_f2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8003fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8003fd8:	eef0 0a67 	vmov.f32	s1, s15
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004012:	f7fc fda9 	bl	8000b68 <__aeabi_dcmpgt>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8004028:	e011      	b.n	800404e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004036:	f7fc fd79 	bl	8000b2c <__aeabi_dcmplt>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d100      	bne.n	8004042 <PID_Init+0x60>
}
 8004040:	e005      	b.n	800404e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6278      	str	r0, [r7, #36]	; 0x24
 8004060:	6239      	str	r1, [r7, #32]
 8004062:	61fa      	str	r2, [r7, #28]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	ed87 0b04 	vstr	d0, [r7, #16]
 800406a:	ed87 1b02 	vstr	d1, [r7, #8]
 800406e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2200      	movs	r2, #0
 8004088:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800408a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80040e0 <PID+0x88>
 800408e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80040e8 <PID+0x90>
 8004092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004094:	f000 f991 	bl	80043ba <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	2264      	movs	r2, #100	; 0x64
 800409c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800409e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040a2:	4619      	mov	r1, r3
 80040a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040a6:	f000 fad9 	bl	800465c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80040aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040ae:	4619      	mov	r1, r3
 80040b0:	ed97 2b00 	vldr	d2, [r7]
 80040b4:	ed97 1b02 	vldr	d1, [r7, #8]
 80040b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80040bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040be:	f000 fa25 	bl	800450c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80040c2:	f001 fda9 	bl	8005c18 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	605a      	str	r2, [r3, #4]

}
 80040d2:	bf00      	nop
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w
 80040e0:	00000000 	.word	0x00000000
 80040e4:	406fe000 	.word	0x406fe000
	...

080040f0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b08c      	sub	sp, #48	; 0x30
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <PID_Compute+0x16>
	{
		return _FALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	e136      	b.n	8004374 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8004106:	f001 fd87 	bl	8005c18 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	6a3a      	ldr	r2, [r7, #32]
 800411c:	429a      	cmp	r2, r3
 800411e:	d204      	bcs.n	800412a <PID_Compute+0x3a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8124 	beq.w	8004372 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800413e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004142:	f7fc f8c9 	bl	80002d8 <__aeabi_dsub>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004154:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004158:	f7fc f8be 	bl	80002d8 <__aeabi_dsub>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004170:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004174:	f7fc fa68 	bl	8000648 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4650      	mov	r0, sl
 800417e:	4659      	mov	r1, fp
 8004180:	f7fc f8ac 	bl	80002dc <__adddf3>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800419a:	f7fc fce5 	bl	8000b68 <__aeabi_dcmpgt>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d006      	beq.n	80041b2 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80041b0:	e010      	b.n	80041d4 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80041be:	f7fc fcb5 	bl	8000b2c <__aeabi_dcmplt>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80041f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f8:	f7fc fa26 	bl	8000648 <__aeabi_dmul>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4650      	mov	r0, sl
 8004202:	4659      	mov	r1, fp
 8004204:	f7fc f868 	bl	80002d8 <__aeabi_dsub>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800421e:	f7fc fca3 	bl	8000b68 <__aeabi_dcmpgt>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004234:	e010      	b.n	8004258 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004242:	f7fc fc73 	bl	8000b2c <__aeabi_dcmplt>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800425e:	4690      	mov	r8, r2
 8004260:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004268:	4640      	mov	r0, r8
 800426a:	4649      	mov	r1, r9
 800426c:	f7fc f9ec 	bl	8000648 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d017      	beq.n	80042b2 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004288:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800428c:	f7fc f9dc 	bl	8000648 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800429e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a2:	f7fc f9d1 	bl	8000648 <__aeabi_dmul>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80042b0:	e005      	b.n	80042be <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80042ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ce:	f7fc f9bb 	bl	8000648 <__aeabi_dmul>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4640      	mov	r0, r8
 80042d8:	4649      	mov	r1, r9
 80042da:	f7fb fffd 	bl	80002d8 <__aeabi_dsub>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042e6:	f7fb fff9 	bl	80002dc <__adddf3>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80042f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042fc:	f7fc fc34 	bl	8000b68 <__aeabi_dcmpgt>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800430c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004310:	e00e      	b.n	8004330 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004318:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800431c:	f7fc fc06 	bl	8000b2c <__aeabi_dcmplt>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800432c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004336:	4614      	mov	r4, r2
 8004338:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800433c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004340:	4620      	mov	r0, r4
 8004342:	4629      	mov	r1, r5
 8004344:	f7fc f980 	bl	8000648 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8004372:	2300      	movs	r3, #0
	}

}
 8004374:	4618      	mov	r0, r3
 8004376:	3730      	adds	r7, #48	; 0x30
 8004378:	46bd      	mov	sp, r7
 800437a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800437e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <PID_SetMode+0x2e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fe1b 	bl	8003fe2 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	705a      	strb	r2, [r3, #1]

}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b086      	sub	sp, #24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6178      	str	r0, [r7, #20]
 80043c2:	ed87 0b02 	vstr	d0, [r7, #8]
 80043c6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80043ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043d2:	f7fc fbbf 	bl	8000b54 <__aeabi_dcmpge>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d158      	bne.n	800448e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80043e6:	6979      	ldr	r1, [r7, #20]
 80043e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d04b      	beq.n	8004490 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004406:	f7fc fbaf 	bl	8000b68 <__aeabi_dcmpgt>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800441a:	e9c1 2300 	strd	r2, r3, [r1]
 800441e:	e012      	b.n	8004446 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800442e:	f7fc fb7d 	bl	8000b2c <__aeabi_dcmplt>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004442:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004452:	f7fc fb89 	bl	8000b68 <__aeabi_dcmpgt>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d006      	beq.n	800446a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004468:	e012      	b.n	8004490 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004476:	f7fc fb59 	bl	8000b2c <__aeabi_dcmplt>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004486:	6979      	ldr	r1, [r7, #20]
 8004488:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800448c:	e000      	b.n	8004490 <PID_SetOutputLimits+0xd6>
		return;
 800448e:	bf00      	nop
		}
		else { }

	}

}
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	6178      	str	r0, [r7, #20]
 800449e:	ed87 0b02 	vstr	d0, [r7, #8]
 80044a2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80044a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ae:	f7fc fb51 	bl	8000b54 <__aeabi_dcmpge>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044be:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 80044c2:	6979      	ldr	r1, [r7, #20]
 80044c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80044cc:	e000      	b.n	80044d0 <PID_SetILimits+0x3a>
		return;
 80044ce:	bf00      	nop
}
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b088      	sub	sp, #32
 80044da:	af00      	add	r7, sp, #0
 80044dc:	61f8      	str	r0, [r7, #28]
 80044de:	ed87 0b04 	vstr	d0, [r7, #16]
 80044e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80044e6:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	789b      	ldrb	r3, [r3, #2]
 80044ee:	4619      	mov	r1, r3
 80044f0:	ed97 2b00 	vldr	d2, [r7]
 80044f4:	ed97 1b02 	vldr	d1, [r7, #8]
 80044f8:	ed97 0b04 	vldr	d0, [r7, #16]
 80044fc:	69f8      	ldr	r0, [r7, #28]
 80044fe:	f000 f805 	bl	800450c <PID_SetTunings2>
}
 8004502:	bf00      	nop
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	61f8      	str	r0, [r7, #28]
 8004514:	ed87 0b04 	vstr	d0, [r7, #16]
 8004518:	ed87 1b02 	vstr	d1, [r7, #8]
 800451c:	ed87 2b00 	vstr	d2, [r7]
 8004520:	460b      	mov	r3, r1
 8004522:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004530:	f7fc fafc 	bl	8000b2c <__aeabi_dcmplt>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 8089 	bne.w	800464e <PID_SetTunings2+0x142>
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004548:	f7fc faf0 	bl	8000b2c <__aeabi_dcmplt>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d17d      	bne.n	800464e <PID_SetTunings2+0x142>
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800455e:	f7fc fae5 	bl	8000b2c <__aeabi_dcmplt>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d172      	bne.n	800464e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	7efa      	ldrb	r2, [r7, #27]
 800456c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800456e:	7efb      	ldrb	r3, [r7, #27]
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004580:	69f9      	ldr	r1, [r7, #28]
 8004582:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004586:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004590:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fb ffd6 	bl	8000554 <__aeabi_ui2d>
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <PID_SetTunings2+0x14c>)
 80045ae:	f7fc f975 	bl	800089c <__aeabi_ddiv>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80045c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045cc:	f7fc f83c 	bl	8000648 <__aeabi_dmul>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	69f9      	ldr	r1, [r7, #28]
 80045d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80045da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045e2:	f7fc f95b 	bl	800089c <__aeabi_ddiv>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	69f9      	ldr	r1, [r7, #28]
 80045ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d12b      	bne.n	8004650 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80045fe:	f04f 0000 	mov.w	r0, #0
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	f7fb fe67 	bl	80002d8 <__aeabi_dsub>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	69f9      	ldr	r1, [r7, #28]
 8004610:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800461a:	f04f 0000 	mov.w	r0, #0
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	f7fb fe59 	bl	80002d8 <__aeabi_dsub>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	69f9      	ldr	r1, [r7, #28]
 800462c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004636:	f04f 0000 	mov.w	r0, #0
 800463a:	f04f 0100 	mov.w	r1, #0
 800463e:	f7fb fe4b 	bl	80002d8 <__aeabi_dsub>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	69f9      	ldr	r1, [r7, #28]
 8004648:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800464c:	e000      	b.n	8004650 <PID_SetTunings2+0x144>
		return;
 800464e:	bf00      	nop

	}

}
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	408f4000 	.word	0x408f4000

0800465c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02e      	beq.n	80046ce <PID_SetControllerDirection+0x72>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	78db      	ldrb	r3, [r3, #3]
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	429a      	cmp	r2, r3
 8004678:	d029      	beq.n	80046ce <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004680:	f04f 0000 	mov.w	r0, #0
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f7fb fe26 	bl	80002d8 <__aeabi_dsub>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800469c:	f04f 0000 	mov.w	r0, #0
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	f7fb fe18 	bl	80002d8 <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80046b8:	f04f 0000 	mov.w	r0, #0
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	f7fb fe0a 	bl	80002d8 <__aeabi_dsub>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	70da      	strb	r2, [r3, #3]

}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dd01      	ble.n	80046f2 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	dd2e      	ble.n	800475c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80046fe:	68b8      	ldr	r0, [r7, #8]
 8004700:	f7fb ff38 	bl	8000574 <__aeabi_i2d>
 8004704:	4604      	mov	r4, r0
 8004706:	460d      	mov	r5, r1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb ff21 	bl	8000554 <__aeabi_ui2d>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4620      	mov	r0, r4
 8004718:	4629      	mov	r1, r5
 800471a:	f7fc f8bf 	bl	800089c <__aeabi_ddiv>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800472c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004730:	f7fb ff8a 	bl	8000648 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004748:	f7fc f8a8 	bl	800089c <__aeabi_ddiv>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]

	}

}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bdb0      	pop	{r4, r5, r7, pc}

08004764 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004772:	ec43 2b17 	vmov	d7, r2, r3
}
 8004776:	eeb0 0a47 	vmov.f32	s0, s14
 800477a:	eef0 0a67 	vmov.f32	s1, s15
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004796:	ec43 2b17 	vmov	d7, r2, r3
}
 800479a:	eeb0 0a47 	vmov.f32	s0, s14
 800479e:	eef0 0a67 	vmov.f32	s1, s15
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80047ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80047be:	eeb0 0a47 	vmov.f32	s0, s14
 80047c2:	eef0 0a67 	vmov.f32	s1, s15
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d6:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_MspInit+0x44>)
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <HAL_MspInit+0x44>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6613      	str	r3, [r2, #96]	; 0x60
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_MspInit+0x44>)
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_MspInit+0x44>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_MspInit+0x44>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_MspInit+0x44>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004806:	f006 fbc1 	bl	800af8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000

08004818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b09c      	sub	sp, #112	; 0x70
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004830:	f107 0318 	add.w	r3, r7, #24
 8004834:	2244      	movs	r2, #68	; 0x44
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f011 fd3c 	bl	80162b6 <memset>
  if(hadc->Instance==ADC1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004846:	d171      	bne.n	800492c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800484e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004854:	f107 0318 	add.w	r3, r7, #24
 8004858:	4618      	mov	r0, r3
 800485a:	f007 f8d5 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004864:	f7ff fb2a 	bl	8003ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004868:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <HAL_ADC_MspInit+0x1b0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a56      	ldr	r2, [pc, #344]	; (80049c8 <HAL_ADC_MspInit+0x1b0>)
 8004870:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004872:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <HAL_ADC_MspInit+0x1b0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10b      	bne.n	8004892 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800487a:	4b54      	ldr	r3, [pc, #336]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	4a53      	ldr	r2, [pc, #332]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004886:	4b51      	ldr	r3, [pc, #324]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004892:	4b4e      	ldr	r3, [pc, #312]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	4a4d      	ldr	r2, [pc, #308]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800489e:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 80048aa:	230c      	movs	r3, #12
 80048ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048ae:	2303      	movs	r3, #3
 80048b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048ba:	4619      	mov	r1, r3
 80048bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048c0:	f004 fa90 	bl	8008de4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048c6:	4a43      	ldr	r2, [pc, #268]	; (80049d4 <HAL_ADC_MspInit+0x1bc>)
 80048c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048cc:	2205      	movs	r2, #5
 80048ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048d8:	2200      	movs	r2, #0
 80048da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048dc:	4b3c      	ldr	r3, [pc, #240]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80048f2:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048fe:	4834      	ldr	r0, [pc, #208]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 8004900:	f003 fd1a 	bl	8008338 <HAL_DMA_Init>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800490a:	f7ff fad7 	bl	8003ebc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2f      	ldr	r2, [pc, #188]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
 8004914:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <HAL_ADC_MspInit+0x1b8>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	210a      	movs	r1, #10
 800491e:	2012      	movs	r0, #18
 8004920:	f003 facf 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004924:	2012      	movs	r0, #18
 8004926:	f003 fae6 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800492a:	e049      	b.n	80049c0 <HAL_ADC_MspInit+0x1a8>
  else if(hadc->Instance==ADC2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <HAL_ADC_MspInit+0x1c0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d144      	bne.n	80049c0 <HAL_ADC_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800493c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004940:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004942:	f107 0318 	add.w	r3, r7, #24
 8004946:	4618      	mov	r0, r3
 8004948:	f007 f85e 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004952:	f7ff fab3 	bl	8003ebc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <HAL_ADC_MspInit+0x1b0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_ADC_MspInit+0x1b0>)
 800495e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_ADC_MspInit+0x1b0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10b      	bne.n	8004980 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 800496a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 800496e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 8004986:	f043 0320 	orr.w	r3, r3, #32
 800498a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_ADC_MspInit+0x1b4>)
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 8004998:	2302      	movs	r3, #2
 800499a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800499c:	2303      	movs	r3, #3
 800499e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 80049a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049a8:	4619      	mov	r1, r3
 80049aa:	480c      	ldr	r0, [pc, #48]	; (80049dc <HAL_ADC_MspInit+0x1c4>)
 80049ac:	f004 fa1a 	bl	8008de4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 80049b0:	2200      	movs	r2, #0
 80049b2:	210a      	movs	r1, #10
 80049b4:	2012      	movs	r0, #18
 80049b6:	f003 fa84 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80049ba:	2012      	movs	r0, #18
 80049bc:	f003 fa9b 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3770      	adds	r7, #112	; 0x70
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20002010 	.word	0x20002010
 80049cc:	40021000 	.word	0x40021000
 80049d0:	20001ae4 	.word	0x20001ae4
 80049d4:	40020030 	.word	0x40020030
 80049d8:	50000100 	.word	0x50000100
 80049dc:	48001400 	.word	0x48001400

080049e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_CRC_MspInit+0x38>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10b      	bne.n	8004a0a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_CRC_MspInit+0x3c>)
 80049f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_CRC_MspInit+0x3c>)
 80049f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049fc:	6493      	str	r3, [r2, #72]	; 0x48
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_CRC_MspInit+0x3c>)
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40023000 	.word	0x40023000
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b09c      	sub	sp, #112	; 0x70
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a38:	f107 0318 	add.w	r3, r7, #24
 8004a3c:	2244      	movs	r2, #68	; 0x44
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f011 fc38 	bl	80162b6 <memset>
  if(hi2c->Instance==I2C1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2e      	ldr	r2, [pc, #184]	; (8004b04 <HAL_I2C_MspInit+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d154      	bne.n	8004afa <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a54:	2300      	movs	r3, #0
 8004a56:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a58:	f107 0318 	add.w	r3, r7, #24
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f006 ffd3 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a68:	f7ff fa28 	bl	8003ebc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a70:	4a25      	ldr	r2, [pc, #148]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a78:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aa2:	2312      	movs	r3, #18
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004aae:	2304      	movs	r3, #4
 8004ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004abc:	f004 f992 	bl	8008de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ac6:	2312      	movs	r3, #18
 8004ac8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ada:	4619      	mov	r1, r3
 8004adc:	480b      	ldr	r0, [pc, #44]	; (8004b0c <HAL_I2C_MspInit+0xec>)
 8004ade:	f004 f981 	bl	8008de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_I2C_MspInit+0xe8>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004afa:	bf00      	nop
 8004afc:	3770      	adds	r7, #112	; 0x70
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40005400 	.word	0x40005400
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	48000400 	.word	0x48000400

08004b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <HAL_SPI_MspInit+0xd0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d151      	bne.n	8004bd6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b32:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <HAL_SPI_MspInit+0xd4>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <HAL_SPI_MspInit+0xd4>)
 8004b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3e:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <HAL_SPI_MspInit+0xd4>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4a:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <HAL_SPI_MspInit+0xd4>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <HAL_SPI_MspInit+0xd4>)
 8004b50:	f043 0302 	orr.w	r3, r3, #2
 8004b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_SPI_MspInit+0xd4>)
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004b62:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b70:	2300      	movs	r3, #0
 8004b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b74:	2305      	movs	r3, #5
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	481a      	ldr	r0, [pc, #104]	; (8004be8 <HAL_SPI_MspInit+0xd8>)
 8004b80:	f004 f930 	bl	8008de4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004b84:	4b19      	ldr	r3, [pc, #100]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004b86:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <HAL_SPI_MspInit+0xe0>)
 8004b88:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004b8c:	220d      	movs	r2, #13
 8004b8e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004b92:	2210      	movs	r2, #16
 8004b94:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004b9e:	2280      	movs	r2, #128	; 0x80
 8004ba0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ba8:	4b10      	ldr	r3, [pc, #64]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004bba:	480c      	ldr	r0, [pc, #48]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004bbc:	f003 fbbc 	bl	8008338 <HAL_DMA_Init>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004bc6:	f7ff f979 	bl	8003ebc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a07      	ldr	r2, [pc, #28]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
 8004bd0:	4a06      	ldr	r2, [pc, #24]	; (8004bec <HAL_SPI_MspInit+0xdc>)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004bd6:	bf00      	nop
 8004bd8:	3728      	adds	r7, #40	; 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40003800 	.word	0x40003800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	48000400 	.word	0x48000400
 8004bec:	20001c20 	.word	0x20001c20
 8004bf0:	40020008 	.word	0x40020008

08004bf4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_TIM_PWM_MspInit+0x98>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12c      	bne.n	8004c60 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c06:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c10:	6613      	str	r3, [r2, #96]	; 0x60
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2100      	movs	r1, #0
 8004c22:	2018      	movs	r0, #24
 8004c24:	f003 f94d 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004c28:	2018      	movs	r0, #24
 8004c2a:	f003 f964 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2100      	movs	r1, #0
 8004c32:	2019      	movs	r0, #25
 8004c34:	f003 f945 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004c38:	2019      	movs	r0, #25
 8004c3a:	f003 f95c 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	201a      	movs	r0, #26
 8004c44:	f003 f93d 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004c48:	201a      	movs	r0, #26
 8004c4a:	f003 f954 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2100      	movs	r1, #0
 8004c52:	201b      	movs	r0, #27
 8004c54:	f003 f935 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004c58:	201b      	movs	r0, #27
 8004c5a:	f003 f94c 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c5e:	e010      	b.n	8004c82 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_TIM_PWM_MspInit+0xa0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10b      	bne.n	8004c82 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40000800 	.word	0x40000800

08004c98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb8:	d14c      	bne.n	8004d54 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cba:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc6:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd2:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cea:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8004cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d06:	2302      	movs	r3, #2
 8004d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d12:	2301      	movs	r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004d16:	f107 0314 	add.w	r3, r7, #20
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d20:	f004 f860 	bl	8008de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8004d24:	2308      	movs	r3, #8
 8004d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d30:	2300      	movs	r3, #0
 8004d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d34:	2301      	movs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004d38:	f107 0314 	add.w	r3, r7, #20
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4808      	ldr	r0, [pc, #32]	; (8004d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004d40:	f004 f850 	bl	8008de4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d44:	2200      	movs	r2, #0
 8004d46:	2100      	movs	r1, #0
 8004d48:	201c      	movs	r0, #28
 8004d4a:	f003 f8ba 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d4e:	201c      	movs	r0, #28
 8004d50:	f003 f8d1 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004d54:	bf00      	nop
 8004d56:	3728      	adds	r7, #40	; 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	48000400 	.word	0x48000400

08004d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <HAL_TIM_Base_MspInit+0xe0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d114      	bne.n	8004da0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	4a33      	ldr	r2, [pc, #204]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004d7c:	f043 0310 	orr.w	r3, r3, #16
 8004d80:	6593      	str	r3, [r2, #88]	; 0x58
 8004d82:	4b31      	ldr	r3, [pc, #196]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2100      	movs	r1, #0
 8004d92:	2036      	movs	r0, #54	; 0x36
 8004d94:	f003 f895 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d98:	2036      	movs	r0, #54	; 0x36
 8004d9a:	f003 f8ac 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004d9e:	e04c      	b.n	8004e3a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <HAL_TIM_Base_MspInit+0xe8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d114      	bne.n	8004dd4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004daa:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	2037      	movs	r0, #55	; 0x37
 8004dc8:	f003 f87b 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004dcc:	2037      	movs	r0, #55	; 0x37
 8004dce:	f003 f892 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
}
 8004dd2:	e032      	b.n	8004e3a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <HAL_TIM_Base_MspInit+0xec>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d114      	bne.n	8004e08 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de8:	6613      	str	r3, [r2, #96]	; 0x60
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2100      	movs	r1, #0
 8004dfa:	2019      	movs	r0, #25
 8004dfc:	f003 f861 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e00:	2019      	movs	r0, #25
 8004e02:	f003 f878 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
}
 8004e06:	e018      	b.n	8004e3a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <HAL_TIM_Base_MspInit+0xf0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d113      	bne.n	8004e3a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_TIM_Base_MspInit+0xe4>)
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	201a      	movs	r0, #26
 8004e30:	f003 f847 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004e34:	201a      	movs	r0, #26
 8004e36:	f003 f85e 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40001000 	.word	0x40001000
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40001400 	.word	0x40001400
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <HAL_TIM_OnePulse_MspInit+0x38>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10b      	bne.n	8004e82 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e74:	6613      	str	r3, [r2, #96]	; 0x60
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40021000 	.word	0x40021000

08004e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_TIM_MspPostInit+0xa8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d11c      	bne.n	8004ef4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_TIM_MspPostInit+0xac>)
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <HAL_TIM_MspPostInit+0xac>)
 8004ec0:	f043 0320 	orr.w	r3, r3, #32
 8004ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ec6:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <HAL_TIM_MspPostInit+0xac>)
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004ee6:	f107 0314 	add.w	r3, r7, #20
 8004eea:	4619      	mov	r1, r3
 8004eec:	4816      	ldr	r0, [pc, #88]	; (8004f48 <HAL_TIM_MspPostInit+0xb0>)
 8004eee:	f003 ff79 	bl	8008de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004ef2:	e020      	b.n	8004f36 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <HAL_TIM_MspPostInit+0xb4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d11b      	bne.n	8004f36 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004efe:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_TIM_MspPostInit+0xac>)
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <HAL_TIM_MspPostInit+0xac>)
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_TIM_MspPostInit+0xac>)
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f26:	2302      	movs	r3, #2
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4807      	ldr	r0, [pc, #28]	; (8004f50 <HAL_TIM_MspPostInit+0xb8>)
 8004f32:	f003 ff57 	bl	8008de4 <HAL_GPIO_Init>
}
 8004f36:	bf00      	nop
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40021000 	.word	0x40021000
 8004f48:	48001400 	.word	0x48001400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	48000400 	.word	0x48000400

08004f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b09a      	sub	sp, #104	; 0x68
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f6c:	f107 0310 	add.w	r3, r7, #16
 8004f70:	2244      	movs	r2, #68	; 0x44
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f011 f99e 	bl	80162b6 <memset>
  if(huart->Instance==USART1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_UART_MspInit+0xa8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d137      	bne.n	8004ff4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f84:	2301      	movs	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f8c:	f107 0310 	add.w	r3, r7, #16
 8004f90:	4618      	mov	r0, r3
 8004f92:	f006 fd39 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f9c:	f7fe ff8e 	bl	8003ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <HAL_UART_MspInit+0xac>)
 8004fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <HAL_UART_MspInit+0xac>)
 8004fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004faa:	6613      	str	r3, [r2, #96]	; 0x60
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <HAL_UART_MspInit+0xac>)
 8004fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_UART_MspInit+0xac>)
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	4a10      	ldr	r2, [pc, #64]	; (8005000 <HAL_UART_MspInit+0xac>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <HAL_UART_MspInit+0xac>)
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004fd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004fd4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff0:	f003 fef8 	bl	8008de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ff4:	bf00      	nop
 8004ff6:	3768      	adds	r7, #104	; 0x68
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40021000 	.word	0x40021000

08005004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005008:	e7fe      	b.n	8005008 <NMI_Handler+0x4>

0800500a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800500e:	e7fe      	b.n	800500e <HardFault_Handler+0x4>

08005010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005014:	e7fe      	b.n	8005014 <MemManage_Handler+0x4>

08005016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800501a:	e7fe      	b.n	800501a <BusFault_Handler+0x4>

0800501c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005020:	e7fe      	b.n	8005020 <UsageFault_Handler+0x4>

08005022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005050:	f000 fdd0 	bl	8005bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}

08005058 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <DMA1_Channel1_IRQHandler+0x10>)
 800505e:	f003 fae7 	bl	8008630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20001c20 	.word	0x20001c20

0800506c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <DMA1_Channel3_IRQHandler+0x10>)
 8005072:	f003 fadd 	bl	8008630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20001ae4 	.word	0x20001ae4

08005080 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005084:	4803      	ldr	r0, [pc, #12]	; (8005094 <ADC1_2_IRQHandler+0x14>)
 8005086:	f001 fc59 	bl	800693c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800508a:	4803      	ldr	r0, [pc, #12]	; (8005098 <ADC1_2_IRQHandler+0x18>)
 800508c:	f001 fc56 	bl	800693c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20001a0c 	.word	0x20001a0c
 8005098:	20001a78 	.word	0x20001a78

0800509c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <USB_LP_IRQHandler+0x10>)
 80050a2:	f004 fa8b 	bl	80095bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20002d80 	.word	0x20002d80

080050b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 80050b4:	2020      	movs	r0, #32
 80050b6:	f004 f847 	bl	8009148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 80050ba:	2080      	movs	r0, #128	; 0x80
 80050bc:	f004 f844 	bl	8009148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 80050c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050c4:	f004 f840 	bl	8009148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}

080050cc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80050d2:	f008 f8b9 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20001c80 	.word	0x20001c80

080050e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80050e6:	f008 f8af 	bl	800d248 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80050ea:	4803      	ldr	r0, [pc, #12]	; (80050f8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80050ec:	f008 f8ac 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20001c80 	.word	0x20001c80
 80050f8:	20001e48 	.word	0x20001e48

080050fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005100:	4803      	ldr	r0, [pc, #12]	; (8005110 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005102:	f008 f8a1 	bl	800d248 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005106:	4803      	ldr	r0, [pc, #12]	; (8005114 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005108:	f008 f89e 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20001c80 	.word	0x20001c80
 8005114:	20001e94 	.word	0x20001e94

08005118 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800511c:	4802      	ldr	r0, [pc, #8]	; (8005128 <TIM1_CC_IRQHandler+0x10>)
 800511e:	f008 f893 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20001c80 	.word	0x20001c80

0800512c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005130:	4802      	ldr	r0, [pc, #8]	; (800513c <TIM2_IRQHandler+0x10>)
 8005132:	f008 f889 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005136:	bf00      	nop
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20001ccc 	.word	0x20001ccc

08005140 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005144:	4802      	ldr	r0, [pc, #8]	; (8005150 <TIM6_DAC_IRQHandler+0x10>)
 8005146:	f008 f87f 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20001d64 	.word	0x20001d64

08005154 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005158:	4802      	ldr	r0, [pc, #8]	; (8005164 <TIM7_IRQHandler+0x10>)
 800515a:	f008 f875 	bl	800d248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20001db0 	.word	0x20001db0

08005168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return 1;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_kill>:

int _kill(int pid, int sig)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005182:	f011 f8eb 	bl	801635c <__errno>
 8005186:	4603      	mov	r3, r0
 8005188:	2216      	movs	r2, #22
 800518a:	601a      	str	r2, [r3, #0]
  return -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_exit>:

void _exit (int status)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff ffe7 	bl	8005178 <_kill>
  while (1) {}    /* Make sure we hang here */
 80051aa:	e7fe      	b.n	80051aa <_exit+0x12>

080051ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e00a      	b.n	80051d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80051be:	f3af 8000 	nop.w
 80051c2:	4601      	mov	r1, r0
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	60ba      	str	r2, [r7, #8]
 80051ca:	b2ca      	uxtb	r2, r1
 80051cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dbf0      	blt.n	80051be <_read+0x12>
  }

  return len;
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e009      	b.n	800520c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	60ba      	str	r2, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3301      	adds	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	dbf1      	blt.n	80051f8 <_write+0x12>
  }
  return len;
 8005214:	687b      	ldr	r3, [r7, #4]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_close>:

int _close(int file)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005246:	605a      	str	r2, [r3, #4]
  return 0;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <_isatty>:

int _isatty(int file)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800525e:	2301      	movs	r3, #1
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <_sbrk+0x5c>)
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <_sbrk+0x60>)
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <_sbrk+0x64>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <_sbrk+0x64>)
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <_sbrk+0x68>)
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d207      	bcs.n	80052c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052b8:	f011 f850 	bl	801635c <__errno>
 80052bc:	4603      	mov	r3, r0
 80052be:	220c      	movs	r2, #12
 80052c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e009      	b.n	80052dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <_sbrk+0x64>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <_sbrk+0x64>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <_sbrk+0x64>)
 80052d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20008000 	.word	0x20008000
 80052e8:	00000400 	.word	0x00000400
 80052ec:	20002014 	.word	0x20002014
 80052f0:	200033c8 	.word	0x200033c8

080052f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <SystemInit+0x20>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <SystemInit+0x20>)
 8005300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005308:	bf00      	nop
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005318:	480d      	ldr	r0, [pc, #52]	; (8005350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800531a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800531c:	f7ff ffea 	bl	80052f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005320:	480c      	ldr	r0, [pc, #48]	; (8005354 <LoopForever+0x6>)
  ldr r1, =_edata
 8005322:	490d      	ldr	r1, [pc, #52]	; (8005358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005324:	4a0d      	ldr	r2, [pc, #52]	; (800535c <LoopForever+0xe>)
  movs r3, #0
 8005326:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005328:	e002      	b.n	8005330 <LoopCopyDataInit>

0800532a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800532a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800532c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800532e:	3304      	adds	r3, #4

08005330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005334:	d3f9      	bcc.n	800532a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005338:	4c0a      	ldr	r4, [pc, #40]	; (8005364 <LoopForever+0x16>)
  movs r3, #0
 800533a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800533c:	e001      	b.n	8005342 <LoopFillZerobss>

0800533e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800533e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005340:	3204      	adds	r2, #4

08005342 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005344:	d3fb      	bcc.n	800533e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005346:	f011 f80f 	bl	8016368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800534a:	f7fd fe01 	bl	8002f50 <main>

0800534e <LoopForever>:

LoopForever:
    b LoopForever
 800534e:	e7fe      	b.n	800534e <LoopForever>
  ldr   r0, =_estack
 8005350:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005358:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 800535c:	0801b490 	.word	0x0801b490
  ldr r2, =_sbss
 8005360:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 8005364:	200033c8 	.word	0x200033c8

08005368 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005368:	e7fe      	b.n	8005368 <COMP1_2_3_IRQHandler>
	...

0800536c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <setSPI_Size+0x54>)
 8005378:	f993 3000 	ldrsb.w	r3, [r3]
 800537c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005380:	429a      	cmp	r2, r3
 8005382:	d017      	beq.n	80053b4 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <setSPI_Size+0x58>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <setSPI_Size+0x58>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005392:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8005394:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <setSPI_Size+0x54>)
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d104      	bne.n	80053ac <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <setSPI_Size+0x58>)
 80053a4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80053a8:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80053aa:	e003      	b.n	80053b4 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <setSPI_Size+0x58>)
 80053ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053b2:	60da      	str	r2, [r3, #12]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	200001c0 	.word	0x200001c0
 80053c4:	20001bbc 	.word	0x20001bbc

080053c8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	460a      	mov	r2, r1
 80053d2:	71fb      	strb	r3, [r7, #7]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80053d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ffc5 	bl	800536c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80053e2:	4b3c      	ldr	r3, [pc, #240]	; (80054d4 <setDMAMemMode+0x10c>)
 80053e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80053e8:	461a      	mov	r2, r3
 80053ea:	79bb      	ldrb	r3, [r7, #6]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d106      	bne.n	80053fe <setDMAMemMode+0x36>
 80053f0:	4b38      	ldr	r3, [pc, #224]	; (80054d4 <setDMAMemMode+0x10c>)
 80053f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80053f6:	461a      	mov	r2, r3
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d066      	beq.n	80054cc <setDMAMemMode+0x104>
    config.dma_sz =size;
 80053fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005402:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <setDMAMemMode+0x10c>)
 8005404:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8005406:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800540a:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <setDMAMemMode+0x10c>)
 800540c:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 800540e:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <setDMAMemMode+0x110>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <setDMAMemMode+0x110>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8005422:	bf00      	nop
 8005424:	4b2c      	ldr	r3, [pc, #176]	; (80054d8 <setDMAMemMode+0x110>)
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f7      	bne.n	8005424 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10e      	bne.n	8005458 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800543a:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <setDMAMemMode+0x110>)
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8005442:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <setDMAMemMode+0x110>)
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <setDMAMemMode+0x110>)
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e00d      	b.n	8005474 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8005458:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <setDMAMemMode+0x110>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8005460:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <setDMAMemMode+0x110>)
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <setDMAMemMode+0x110>)
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005472:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8005474:	79bb      	ldrb	r3, [r7, #6]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d116      	bne.n	80054a8 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <setDMAMemMode+0x110>)
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005482:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <setDMAMemMode+0x110>)
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800548c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <setDMAMemMode+0x110>)
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <setDMAMemMode+0x110>)
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80054a4:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 80054a6:	e011      	b.n	80054cc <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <setDMAMemMode+0x110>)
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <setDMAMemMode+0x110>)
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	2200      	movs	r2, #0
 80054b6:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <setDMAMemMode+0x110>)
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <setDMAMemMode+0x110>)
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200001c0 	.word	0x200001c0
 80054d8:	20001bbc 	.word	0x20001bbc

080054dc <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7ff ff3f 	bl	800536c <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80054ee:	2200      	movs	r2, #0
 80054f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054f4:	4815      	ldr	r0, [pc, #84]	; (800554c <LCD_WriteCommand+0x70>)
 80054f6:	f003 fe0f 	bl	8009118 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80054fa:	2200      	movs	r2, #0
 80054fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005500:	4812      	ldr	r0, [pc, #72]	; (800554c <LCD_WriteCommand+0x70>)
 8005502:	f003 fe09 	bl	8009118 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8005506:	f04f 33ff 	mov.w	r3, #4294967295
 800550a:	2201      	movs	r2, #1
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4810      	ldr	r0, [pc, #64]	; (8005550 <LCD_WriteCommand+0x74>)
 8005510:	f006 fd15 	bl	800bf3e <HAL_SPI_Transmit>
  if(argc){
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800551a:	2201      	movs	r2, #1
 800551c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005520:	480a      	ldr	r0, [pc, #40]	; (800554c <LCD_WriteCommand+0x70>)
 8005522:	f003 fdf9 	bl	8009118 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1c59      	adds	r1, r3, #1
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	b29a      	uxth	r2, r3
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
 8005532:	4807      	ldr	r0, [pc, #28]	; (8005550 <LCD_WriteCommand+0x74>)
 8005534:	f006 fd03 	bl	800bf3e <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005538:	2201      	movs	r2, #1
 800553a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800553e:	4803      	ldr	r0, [pc, #12]	; (800554c <LCD_WriteCommand+0x70>)
 8005540:	f003 fdea 	bl	8009118 <HAL_GPIO_WritePin>
#endif
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	48000400 	.word	0x48000400
 8005550:	20001bbc 	.word	0x20001bbc

08005554 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800555e:	2201      	movs	r2, #1
 8005560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005564:	4830      	ldr	r0, [pc, #192]	; (8005628 <LCD_WriteData+0xd4>)
 8005566:	f003 fdd7 	bl	8009118 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800556a:	2200      	movs	r2, #0
 800556c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005570:	482d      	ldr	r0, [pc, #180]	; (8005628 <LCD_WriteData+0xd4>)
 8005572:	f003 fdd1 	bl	8009118 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8005576:	e049      	b.n	800560c <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800557e:	4293      	cmp	r3, r2
 8005580:	bf28      	it	cs
 8005582:	4613      	movcs	r3, r2
 8005584:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b20      	cmp	r3, #32
 800558a:	d924      	bls.n	80055d6 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800558c:	89fb      	ldrh	r3, [r7, #14]
 800558e:	461a      	mov	r2, r3
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4826      	ldr	r0, [pc, #152]	; (800562c <LCD_WriteData+0xd8>)
 8005594:	f006 fe48 	bl	800c228 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8005598:	bf00      	nop
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <LCD_WriteData+0xd8>)
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	4618      	mov	r0, r3
 80055a0:	f003 f8f5 	bl	800878e <HAL_DMA_GetState>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d1f7      	bne.n	800559a <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <LCD_WriteData+0xdc>)
 80055ac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d127      	bne.n	8005604 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <LCD_WriteData+0xdc>)
 80055b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d104      	bne.n	80055c8 <LCD_WriteData+0x74>
          buff += chunk_size;
 80055be:	89fb      	ldrh	r3, [r7, #14]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	e01d      	b.n	8005604 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 80055c8:	89fb      	ldrh	r3, [r7, #14]
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e016      	b.n	8005604 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80055d6:	89fa      	ldrh	r2, [r7, #14]
 80055d8:	f04f 33ff 	mov.w	r3, #4294967295
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4813      	ldr	r0, [pc, #76]	; (800562c <LCD_WriteData+0xd8>)
 80055e0:	f006 fcad 	bl	800bf3e <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <LCD_WriteData+0xdc>)
 80055e6:	f993 3000 	ldrsb.w	r3, [r3]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d104      	bne.n	80055f8 <LCD_WriteData+0xa4>
        buff += chunk_size;
 80055ee:	89fb      	ldrh	r3, [r7, #14]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	e005      	b.n	8005604 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80055f8:	89fb      	ldrh	r3, [r7, #14]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8005604:	89fb      	ldrh	r3, [r7, #14]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1b2      	bne.n	8005578 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005612:	2201      	movs	r2, #1
 8005614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <LCD_WriteData+0xd4>)
 800561a:	f003 fd7d 	bl	8009118 <HAL_GPIO_WritePin>
#endif
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	48000400 	.word	0x48000400
 800562c:	20001bbc 	.word	0x20001bbc
 8005630:	200001c0 	.word	0x200001c0

08005634 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b08b      	sub	sp, #44	; 0x2c
 8005638:	af00      	add	r7, sp, #0
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	4623      	mov	r3, r4
 8005644:	80fb      	strh	r3, [r7, #6]
 8005646:	4603      	mov	r3, r0
 8005648:	80bb      	strh	r3, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	807b      	strh	r3, [r7, #2]
 800564e:	4613      	mov	r3, r2
 8005650:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800565a:	88bb      	ldrh	r3, [r7, #4]
 800565c:	847b      	strh	r3, [r7, #34]	; 0x22
 800565e:	883b      	ldrh	r3, [r7, #0]
 8005660:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005662:	232a      	movs	r3, #42	; 0x2a
 8005664:	763b      	strb	r3, [r7, #24]
 8005666:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800566a:	121b      	asrs	r3, r3, #8
 800566c:	b21b      	sxth	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	767b      	strb	r3, [r7, #25]
 8005672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005674:	b2db      	uxtb	r3, r3
 8005676:	76bb      	strb	r3, [r7, #26]
 8005678:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800567c:	121b      	asrs	r3, r3, #8
 800567e:	b21b      	sxth	r3, r3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	76fb      	strb	r3, [r7, #27]
 8005684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005686:	b2db      	uxtb	r3, r3
 8005688:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800568a:	f107 0318 	add.w	r3, r7, #24
 800568e:	2104      	movs	r1, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff23 	bl	80054dc <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8005696:	232b      	movs	r3, #43	; 0x2b
 8005698:	743b      	strb	r3, [r7, #16]
 800569a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800569e:	121b      	asrs	r3, r3, #8
 80056a0:	b21b      	sxth	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	747b      	strb	r3, [r7, #17]
 80056a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	74bb      	strb	r3, [r7, #18]
 80056ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80056b0:	121b      	asrs	r3, r3, #8
 80056b2:	b21b      	sxth	r3, r3
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	74fb      	strb	r3, [r7, #19]
 80056b8:	8c3b      	ldrh	r3, [r7, #32]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80056be:	f107 0310 	add.w	r3, r7, #16
 80056c2:	2104      	movs	r1, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff09 	bl	80054dc <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80056ca:	232c      	movs	r3, #44	; 0x2c
 80056cc:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff ff01 	bl	80054dc <LCD_WriteCommand>
  }
}
 80056da:	bf00      	nop
 80056dc:	372c      	adds	r7, #44	; 0x2c
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd90      	pop	{r4, r7, pc}
	...

080056e4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	80fb      	strh	r3, [r7, #6]
 80056ee:	460b      	mov	r3, r1
 80056f0:	80bb      	strh	r3, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80056f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	db39      	blt.n	8005772 <LCD_DrawPixel+0x8e>
 80056fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005702:	2bef      	cmp	r3, #239	; 0xef
 8005704:	dc35      	bgt.n	8005772 <LCD_DrawPixel+0x8e>
 8005706:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	db31      	blt.n	8005772 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800570e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005712:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005716:	da2c      	bge.n	8005772 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8005718:	887b      	ldrh	r3, [r7, #2]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	b29b      	uxth	r3, r3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	733b      	strb	r3, [r7, #12]
 8005722:	887b      	ldrh	r3, [r7, #2]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8005728:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800572c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005730:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005734:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005738:	f7ff ff7c 	bl	8005634 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800573c:	2201      	movs	r2, #1
 800573e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005742:	480e      	ldr	r0, [pc, #56]	; (800577c <LCD_DrawPixel+0x98>)
 8005744:	f003 fce8 	bl	8009118 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8005748:	2200      	movs	r2, #0
 800574a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800574e:	480b      	ldr	r0, [pc, #44]	; (800577c <LCD_DrawPixel+0x98>)
 8005750:	f003 fce2 	bl	8009118 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005754:	f107 010c 	add.w	r1, r7, #12
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	2202      	movs	r2, #2
 800575e:	4808      	ldr	r0, [pc, #32]	; (8005780 <LCD_DrawPixel+0x9c>)
 8005760:	f006 fbed 	bl	800bf3e <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005764:	2201      	movs	r2, #1
 8005766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800576a:	4804      	ldr	r0, [pc, #16]	; (800577c <LCD_DrawPixel+0x98>)
 800576c:	f003 fcd4 	bl	8009118 <HAL_GPIO_WritePin>
 8005770:	e000      	b.n	8005774 <LCD_DrawPixel+0x90>
    return;
 8005772:	bf00      	nop
#endif
}
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	48000400 	.word	0x48000400
 8005780:	20001bbc 	.word	0x20001bbc

08005784 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005784:	b580      	push	{r7, lr}
 8005786:	b094      	sub	sp, #80	; 0x50
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b20      	cmp	r3, #32
 8005794:	d905      	bls.n	80057a2 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8005796:	1cbb      	adds	r3, r7, #2
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff feda 	bl	8005554 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80057a0:	e026      	b.n	80057f0 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80057a2:	2300      	movs	r3, #0
 80057a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a6:	e009      	b.n	80057bc <LCD_FillPixels+0x38>
      fill[t]=color;
 80057a8:	887a      	ldrh	r2, [r7, #2]
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	3350      	adds	r3, #80	; 0x50
 80057b0:	443b      	add	r3, r7
 80057b2:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	3301      	adds	r3, #1
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b20      	cmp	r3, #32
 80057c0:	bf28      	it	cs
 80057c2:	2320      	movcs	r3, #32
 80057c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3ee      	bcc.n	80057a8 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 80057ca:	e00e      	b.n	80057ea <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	bf28      	it	cs
 80057d2:	2320      	movcs	r3, #32
 80057d4:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff feb9 	bl	8005554 <LCD_WriteData>
      pixels-=sz;
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ed      	bne.n	80057cc <LCD_FillPixels+0x48>
}
 80057f0:	bf00      	nop
 80057f2:	3750      	adds	r7, #80	; 0x50
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4623      	mov	r3, r4
 8005808:	80fb      	strh	r3, [r7, #6]
 800580a:	4603      	mov	r3, r0
 800580c:	80bb      	strh	r3, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	807b      	strh	r3, [r7, #2]
 8005812:	4613      	mov	r3, r2
 8005814:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8005816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d105      	bne.n	800582c <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8005820:	2100      	movs	r1, #0
 8005822:	2001      	movs	r0, #1
 8005824:	f7ff fdd0 	bl	80053c8 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	e014      	b.n	8005856 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800582c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005830:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800583c:	f7ff fefa 	bl	8005634 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005840:	2101      	movs	r1, #1
 8005842:	2000      	movs	r0, #0
 8005844:	f7ff fdc0 	bl	80053c8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005848:	2201      	movs	r2, #1
 800584a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800584e:	4804      	ldr	r0, [pc, #16]	; (8005860 <LCD_FillArea+0x68>)
 8005850:	f003 fc62 	bl	8009118 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <LCD_FillArea+0x6c>)
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bd90      	pop	{r4, r7, pc}
 800585e:	bf00      	nop
 8005860:	48000400 	.word	0x48000400
 8005864:	08005785 	.word	0x08005785

08005868 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	4623      	mov	r3, r4
 8005878:	80fb      	strh	r3, [r7, #6]
 800587a:	4603      	mov	r3, r0
 800587c:	80bb      	strh	r3, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	807b      	strh	r3, [r7, #2]
 8005882:	4613      	mov	r3, r2
 8005884:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	3301      	adds	r3, #1
 800588e:	4619      	mov	r1, r3
 8005890:	883a      	ldrh	r2, [r7, #0]
 8005892:	88bb      	ldrh	r3, [r7, #4]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	3301      	adds	r3, #1
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800589e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80058ae:	f7ff fec1 	bl	8005634 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80058b2:	2101      	movs	r1, #1
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7ff fd87 	bl	80053c8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80058ba:	8c3b      	ldrh	r3, [r7, #32]
 80058bc:	4619      	mov	r1, r3
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff ff60 	bl	8005784 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 80058c4:	2100      	movs	r1, #0
 80058c6:	2001      	movs	r0, #1
 80058c8:	f7ff fd7e 	bl	80053c8 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}

080058d6 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80058d6:	b590      	push	{r4, r7, lr}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	4603      	mov	r3, r0
 80058de:	603a      	str	r2, [r7, #0]
 80058e0:	80fb      	strh	r3, [r7, #6]
 80058e2:	460b      	mov	r3, r1
 80058e4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	889b      	ldrh	r3, [r3, #4]
 80058ea:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	88db      	ldrh	r3, [r3, #6]
 80058f0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	2bef      	cmp	r3, #239	; 0xef
 80058f6:	d839      	bhi.n	800596c <LCD_DrawImage+0x96>
 80058f8:	88bb      	ldrh	r3, [r7, #4]
 80058fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80058fe:	d235      	bcs.n	800596c <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	89fb      	ldrh	r3, [r7, #14]
 8005904:	4413      	add	r3, r2
 8005906:	2bf0      	cmp	r3, #240	; 0xf0
 8005908:	dc32      	bgt.n	8005970 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800590a:	88ba      	ldrh	r2, [r7, #4]
 800590c:	89bb      	ldrh	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005914:	dc2e      	bgt.n	8005974 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	7a1b      	ldrb	r3, [r3, #8]
 800591a:	2b10      	cmp	r3, #16
 800591c:	d12c      	bne.n	8005978 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800591e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005922:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	4413      	add	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	b21c      	sxth	r4, r3
 8005934:	88ba      	ldrh	r2, [r7, #4]
 8005936:	89bb      	ldrh	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	b21b      	sxth	r3, r3
 8005942:	4622      	mov	r2, r4
 8005944:	f7ff fe76 	bl	8005634 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005948:	2101      	movs	r1, #1
 800594a:	2001      	movs	r0, #1
 800594c:	f7ff fd3c 	bl	80053c8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	89fb      	ldrh	r3, [r7, #14]
 8005956:	89ba      	ldrh	r2, [r7, #12]
 8005958:	fb02 f303 	mul.w	r3, r2, r3
 800595c:	4619      	mov	r1, r3
 800595e:	f7ff fdf9 	bl	8005554 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005962:	2100      	movs	r1, #0
 8005964:	2001      	movs	r0, #1
 8005966:	f7ff fd2f 	bl	80053c8 <setDMAMemMode>
 800596a:	e006      	b.n	800597a <LCD_DrawImage+0xa4>
    return;
 800596c:	bf00      	nop
 800596e:	e004      	b.n	800597a <LCD_DrawImage+0xa4>
    return;
 8005970:	bf00      	nop
 8005972:	e002      	b.n	800597a <LCD_DrawImage+0xa4>
    return;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <LCD_DrawImage+0xa4>
    return;
 8005978:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	bd90      	pop	{r4, r7, pc}

08005980 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b087      	sub	sp, #28
 8005984:	af02      	add	r7, sp, #8
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	4623      	mov	r3, r4
 8005990:	80fb      	strh	r3, [r7, #6]
 8005992:	4603      	mov	r3, r0
 8005994:	80bb      	strh	r3, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	807b      	strh	r3, [r7, #2]
 800599a:	4613      	mov	r3, r2
 800599c:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	887b      	ldrh	r3, [r7, #2]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d10a      	bne.n	80059bc <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80059a6:	88ba      	ldrh	r2, [r7, #4]
 80059a8:	883b      	ldrh	r3, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d918      	bls.n	80059e0 <LCD_DrawLine+0x60>
 80059ae:	88bb      	ldrh	r3, [r7, #4]
 80059b0:	81bb      	strh	r3, [r7, #12]
 80059b2:	883b      	ldrh	r3, [r7, #0]
 80059b4:	80bb      	strh	r3, [r7, #4]
 80059b6:	89bb      	ldrh	r3, [r7, #12]
 80059b8:	803b      	strh	r3, [r7, #0]
 80059ba:	e011      	b.n	80059e0 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80059bc:	88ba      	ldrh	r2, [r7, #4]
 80059be:	883b      	ldrh	r3, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d10a      	bne.n	80059da <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d909      	bls.n	80059e0 <LCD_DrawLine+0x60>
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	81fb      	strh	r3, [r7, #14]
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	80fb      	strh	r3, [r7, #6]
 80059d4:	89fb      	ldrh	r3, [r7, #14]
 80059d6:	807b      	strh	r3, [r7, #2]
 80059d8:	e002      	b.n	80059e0 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	e009      	b.n	80059f4 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80059e0:	883c      	ldrh	r4, [r7, #0]
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	88b9      	ldrh	r1, [r7, #4]
 80059e6:	88f8      	ldrh	r0, [r7, #6]
 80059e8:	8c3b      	ldrh	r3, [r7, #32]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4623      	mov	r3, r4
 80059ee:	f7ff ff3b 	bl	8005868 <LCD_Fill>
  return UG_RESULT_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd90      	pop	{r4, r7, pc}

080059fc <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60ba      	str	r2, [r7, #8]
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	4603      	mov	r3, r0
 8005a08:	81fb      	strh	r3, [r7, #14]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f00b ff36 	bl	8011880 <UG_FontSelect>
  UG_SetForecolor(color);
 8005a14:	8b3b      	ldrh	r3, [r7, #24]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f00c fa7e 	bl	8011f18 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8005a1c:	8bbb      	ldrh	r3, [r7, #28]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f00c fa8c 	bl	8011f3c <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a28:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f00c f9da 	bl	8011de8 <UG_PutString>
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <LCD_setPower+0x14>
 8005a4c:	2329      	movs	r3, #41	; 0x29
 8005a4e:	e000      	b.n	8005a52 <LCD_setPower+0x16>
 8005a50:	2328      	movs	r3, #40	; 0x28
 8005a52:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005a54:	f107 030c 	add.w	r3, r7, #12
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fd3e 	bl	80054dc <LCD_WriteCommand>
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <LCD_Update>:

static void LCD_Update(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f7ff fcaa 	bl	80053c8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a84:	482a      	ldr	r0, [pc, #168]	; (8005b30 <LCD_init+0xb8>)
 8005a86:	f003 fb47 	bl	8009118 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a90:	4827      	ldr	r0, [pc, #156]	; (8005b30 <LCD_init+0xb8>)
 8005a92:	f003 fb41 	bl	8009118 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005a96:	2001      	movs	r0, #1
 8005a98:	f000 f8ca 	bl	8005c30 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005aa2:	4823      	ldr	r0, [pc, #140]	; (8005b30 <LCD_init+0xb8>)
 8005aa4:	f003 fb38 	bl	8009118 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8005aa8:	20c8      	movs	r0, #200	; 0xc8
 8005aaa:	f000 f8c1 	bl	8005c30 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005aae:	4921      	ldr	r1, [pc, #132]	; (8005b34 <LCD_init+0xbc>)
 8005ab0:	4821      	ldr	r0, [pc, #132]	; (8005b38 <LCD_init+0xc0>)
 8005ab2:	f00b fe4b 	bl	801174c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8005ab6:	4921      	ldr	r1, [pc, #132]	; (8005b3c <LCD_init+0xc4>)
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f00d fad5 	bl	8013068 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005abe:	4920      	ldr	r1, [pc, #128]	; (8005b40 <LCD_init+0xc8>)
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f00d fad1 	bl	8013068 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005ac6:	491f      	ldr	r1, [pc, #124]	; (8005b44 <LCD_init+0xcc>)
 8005ac8:	2002      	movs	r0, #2
 8005aca:	f00d facd 	bl	8013068 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005ace:	491e      	ldr	r1, [pc, #120]	; (8005b48 <LCD_init+0xd0>)
 8005ad0:	2003      	movs	r0, #3
 8005ad2:	f00d fac9 	bl	8013068 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f00c fa42 	bl	8011f60 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005adc:	2000      	movs	r0, #0
 8005ade:	f00c fa53 	bl	8011f88 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	80fb      	strh	r3, [r7, #6]
 8005ae6:	e013      	b.n	8005b10 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	3301      	adds	r3, #1
 8005aec:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <LCD_init+0xd4>)
 8005aee:	441a      	add	r2, r3
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	4916      	ldr	r1, [pc, #88]	; (8005b4c <LCD_init+0xd4>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7ff fcef 	bl	80054dc <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	4a12      	ldr	r2, [pc, #72]	; (8005b4c <LCD_init+0xd4>)
 8005b02:	5cd3      	ldrb	r3, [r2, r3]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	4413      	add	r3, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	2b4b      	cmp	r3, #75	; 0x4b
 8005b14:	d9e8      	bls.n	8005ae8 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005b16:	2000      	movs	r0, #0
 8005b18:	f00b fec2 	bl	80118a0 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7ff ff8d 	bl	8005a3c <LCD_setPower>
  UG_Update();
 8005b22:	f00d fac3 	bl	80130ac <UG_Update>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	48000400 	.word	0x48000400
 8005b34:	200001c4 	.word	0x200001c4
 8005b38:	20002018 	.word	0x20002018
 8005b3c:	08005981 	.word	0x08005981
 8005b40:	08005869 	.word	0x08005869
 8005b44:	080057f9 	.word	0x080057f9
 8005b48:	080058d7 	.word	0x080058d7
 8005b4c:	08018954 	.word	0x08018954

08005b50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b5a:	2003      	movs	r0, #3
 8005b5c:	f002 f9a6 	bl	8007eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b60:	200f      	movs	r0, #15
 8005b62:	f000 f80d 	bl	8005b80 <HAL_InitTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	71fb      	strb	r3, [r7, #7]
 8005b70:	e001      	b.n	8005b76 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005b72:	f7fe fe2d 	bl	80047d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b76:	79fb      	ldrb	r3, [r7, #7]

}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <HAL_InitTick+0x68>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d022      	beq.n	8005bda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005b94:	4b15      	ldr	r3, [pc, #84]	; (8005bec <HAL_InitTick+0x6c>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <HAL_InitTick+0x68>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f002 f9b2 	bl	8007f12 <HAL_SYSTICK_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d809      	bhi.n	8005bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc2:	f002 f97e 	bl	8007ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <HAL_InitTick+0x70>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e007      	b.n	8005bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e004      	b.n	8005bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
 8005bd8:	e001      	b.n	8005bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200001d4 	.word	0x200001d4
 8005bec:	200001bc 	.word	0x200001bc
 8005bf0:	200001d0 	.word	0x200001d0

08005bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_IncTick+0x1c>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_IncTick+0x20>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	4a03      	ldr	r2, [pc, #12]	; (8005c10 <HAL_IncTick+0x1c>)
 8005c04:	6013      	str	r3, [r2, #0]
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	2000208c 	.word	0x2000208c
 8005c14:	200001d4 	.word	0x200001d4

08005c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <HAL_GetTick+0x14>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000208c 	.word	0x2000208c

08005c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7ff ffee 	bl	8005c18 <HAL_GetTick>
 8005c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d004      	beq.n	8005c54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <HAL_Delay+0x40>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c54:	bf00      	nop
 8005c56:	f7ff ffdf 	bl	8005c18 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d8f7      	bhi.n	8005c56 <HAL_Delay+0x26>
  {
  }
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	200001d4 	.word	0x200001d4

08005c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3360      	adds	r3, #96	; 0x60
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <LL_ADC_SetOffset+0x44>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	03fff000 	.word	0x03fff000

08005d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3360      	adds	r3, #96	; 0x60
 8005d32:	461a      	mov	r2, r3
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3360      	adds	r3, #96	; 0x60
 8005d60:	461a      	mov	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b087      	sub	sp, #28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3360      	adds	r3, #96	; 0x60
 8005d96:	461a      	mov	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3360      	adds	r3, #96	; 0x60
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	615a      	str	r2, [r3, #20]
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3330      	adds	r3, #48	; 0x30
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	4413      	add	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	211f      	movs	r1, #31
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	401a      	ands	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0e9b      	lsrs	r3, r3, #26
 8005e76:	f003 011f 	and.w	r1, r3, #31
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	431a      	orrs	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	0e5b      	lsrs	r3, r3, #25
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	4413      	add	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	0d1b      	lsrs	r3, r3, #20
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2107      	movs	r1, #7
 8005eea:	fa01 f303 	lsl.w	r3, r1, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	401a      	ands	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	0d1b      	lsrs	r3, r3, #20
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	431a      	orrs	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	401a      	ands	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f003 0318 	and.w	r3, r3, #24
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005f38:	40d9      	lsrs	r1, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	0007ffff 	.word	0x0007ffff

08005f5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 031f 	and.w	r3, r3, #31
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6093      	str	r3, [r2, #8]
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fcc:	d101      	bne.n	8005fd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ff4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601c:	d101      	bne.n	8006022 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800606c:	f043 0202 	orr.w	r2, r3, #2
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <LL_ADC_IsEnabled+0x18>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <LL_ADC_IsEnabled+0x1a>
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d101      	bne.n	80060be <LL_ADC_IsDisableOngoing+0x18>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <LL_ADC_IsDisableOngoing+0x1a>
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060e0:	f043 0204 	orr.w	r2, r3, #4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006108:	f043 0210 	orr.w	r2, r3, #16
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d101      	bne.n	8006134 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006152:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006156:	f043 0220 	orr.w	r2, r3, #32
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b08      	cmp	r3, #8
 800617c:	d101      	bne.n	8006182 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b089      	sub	sp, #36	; 0x24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e167      	b.n	800647a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7fe fb2d 	bl	8004818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fef1 	bl	8005fb8 <LL_ADC_IsDeepPowerDownEnabled>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fed7 	bl	8005f94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff ff0c 	bl	8006008 <LL_ADC_IsInternalRegulatorEnabled>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d115      	bne.n	8006222 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fef0 	bl	8005fe0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006200:	4ba0      	ldr	r3, [pc, #640]	; (8006484 <HAL_ADC_Init+0x2f4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	099b      	lsrs	r3, r3, #6
 8006206:	4aa0      	ldr	r2, [pc, #640]	; (8006488 <HAL_ADC_Init+0x2f8>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	099b      	lsrs	r3, r3, #6
 800620e:	3301      	adds	r3, #1
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006214:	e002      	b.n	800621c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b01      	subs	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f9      	bne.n	8006216 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff feee 	bl	8006008 <LL_ADC_IsInternalRegulatorEnabled>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10d      	bne.n	800624e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	f043 0210 	orr.w	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006242:	f043 0201 	orr.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ff62 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 8006258:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 8100 	bne.w	8006468 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f040 80fc 	bne.w	8006468 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006274:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006278:	f043 0202 	orr.w	r2, r3, #2
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fefb 	bl	8006080 <LL_ADC_IsEnabled>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d111      	bne.n	80062b4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006294:	f7ff fef4 	bl	8006080 <LL_ADC_IsEnabled>
 8006298:	4604      	mov	r4, r0
 800629a:	487c      	ldr	r0, [pc, #496]	; (800648c <HAL_ADC_Init+0x2fc>)
 800629c:	f7ff fef0 	bl	8006080 <LL_ADC_IsEnabled>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4323      	orrs	r3, r4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4619      	mov	r1, r3
 80062ae:	4878      	ldr	r0, [pc, #480]	; (8006490 <HAL_ADC_Init+0x300>)
 80062b0:	f7ff fce0 	bl	8005c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7f5b      	ldrb	r3, [r3, #29]
 80062b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80062be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80062c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80062ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d106      	bne.n	80062f0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	3b01      	subs	r3, #1
 80062e8:	045b      	lsls	r3, r3, #17
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	4b60      	ldr	r3, [pc, #384]	; (8006494 <HAL_ADC_Init+0x304>)
 8006314:	4013      	ands	r3, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	69b9      	ldr	r1, [r7, #24]
 800631c:	430b      	orrs	r3, r1
 800631e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ff15 	bl	800616a <LL_ADC_INJ_IsConversionOngoing>
 8006340:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d16d      	bne.n	8006424 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d16a      	bne.n	8006424 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006352:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800635a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800635c:	4313      	orrs	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636a:	f023 0302 	bic.w	r3, r3, #2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	69b9      	ldr	r1, [r7, #24]
 8006374:	430b      	orrs	r3, r1
 8006376:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d017      	beq.n	80063b0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800638e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006398:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800639c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6911      	ldr	r1, [r2, #16]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	430b      	orrs	r3, r1
 80063aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80063ae:	e013      	b.n	80063d8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80063be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80063d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d118      	bne.n	8006414 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063ec:	f023 0304 	bic.w	r3, r3, #4
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063f8:	4311      	orrs	r1, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80063fe:	4311      	orrs	r1, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006404:	430a      	orrs	r2, r1
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	611a      	str	r2, [r3, #16]
 8006412:	e007      	b.n	8006424 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10c      	bne.n	8006446 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	f023 010f 	bic.w	r1, r3, #15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	1e5a      	subs	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
 8006444:	e007      	b.n	8006456 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 020f 	bic.w	r2, r2, #15
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	65da      	str	r2, [r3, #92]	; 0x5c
 8006466:	e007      	b.n	8006478 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	f043 0210 	orr.w	r2, r3, #16
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006478:	7ffb      	ldrb	r3, [r7, #31]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3724      	adds	r7, #36	; 0x24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd90      	pop	{r4, r7, pc}
 8006482:	bf00      	nop
 8006484:	200001bc 	.word	0x200001bc
 8006488:	053e2d63 	.word	0x053e2d63
 800648c:	50000100 	.word	0x50000100
 8006490:	50000300 	.word	0x50000300
 8006494:	fff04007 	.word	0xfff04007

08006498 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064a0:	4893      	ldr	r0, [pc, #588]	; (80066f0 <HAL_ADC_Start_IT+0x258>)
 80064a2:	f7ff fd5b 	bl	8005f5c <LL_ADC_GetMultimode>
 80064a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fe35 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 8113 	bne.w	80066e0 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_ADC_Start_IT+0x30>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e10e      	b.n	80066e6 <HAL_ADC_Start_IT+0x24e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 f917 	bl	8007704 <ADC_Enable>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 80fa 	bne.w	80066d6 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7e      	ldr	r2, [pc, #504]	; (80066f4 <HAL_ADC_Start_IT+0x25c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d002      	beq.n	8006506 <HAL_ADC_Start_IT+0x6e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	e001      	b.n	800650a <HAL_ADC_Start_IT+0x72>
 8006506:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	4293      	cmp	r3, r2
 8006510:	d002      	beq.n	8006518 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006534:	f023 0206 	bic.w	r2, r3, #6
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	661a      	str	r2, [r3, #96]	; 0x60
 800653c:	e002      	b.n	8006544 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	221c      	movs	r2, #28
 800654a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 021c 	bic.w	r2, r2, #28
 8006562:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d108      	bne.n	800657e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0208 	orr.w	r2, r2, #8
 800657a:	605a      	str	r2, [r3, #4]
          break;
 800657c:	e008      	b.n	8006590 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0204 	orr.w	r2, r2, #4
 800658c:	605a      	str	r2, [r3, #4]
          break;
 800658e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0210 	orr.w	r2, r2, #16
 80065a6:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a51      	ldr	r2, [pc, #324]	; (80066f4 <HAL_ADC_Start_IT+0x25c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d002      	beq.n	80065b8 <HAL_ADC_Start_IT+0x120>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	e001      	b.n	80065bc <HAL_ADC_Start_IT+0x124>
 80065b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d008      	beq.n	80065d6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b05      	cmp	r3, #5
 80065ce:	d002      	beq.n	80065d6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b09      	cmp	r3, #9
 80065d4:	d13a      	bne.n	800664c <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d02d      	beq.n	8006640 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d110      	bne.n	800661e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0220 	bic.w	r2, r2, #32
 800660a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661a:	605a      	str	r2, [r3, #4]
              break;
 800661c:	e010      	b.n	8006640 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800662c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0220 	orr.w	r2, r2, #32
 800663c:	605a      	str	r2, [r3, #4]
              break;
 800663e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fd41 	bl	80060cc <LL_ADC_REG_StartConversion>
 800664a:	e04b      	b.n	80066e4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006650:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <HAL_ADC_Start_IT+0x25c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d002      	beq.n	8006668 <HAL_ADC_Start_IT+0x1d0>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	e001      	b.n	800666c <HAL_ADC_Start_IT+0x1d4>
 8006668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800666c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d034      	beq.n	80066e4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006682:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b08      	cmp	r3, #8
 8006690:	d110      	bne.n	80066b4 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0220 	bic.w	r2, r2, #32
 80066a0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b0:	605a      	str	r2, [r3, #4]
              break;
 80066b2:	e017      	b.n	80066e4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0220 	orr.w	r2, r2, #32
 80066d2:	605a      	str	r2, [r3, #4]
              break;
 80066d4:	e006      	b.n	80066e4 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80066de:	e001      	b.n	80066e4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
 80066e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	50000300 	.word	0x50000300
 80066f4:	50000100 	.word	0x50000100

080066f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006704:	4851      	ldr	r0, [pc, #324]	; (800684c <HAL_ADC_Start_DMA+0x154>)
 8006706:	f7ff fc29 	bl	8005f5c <LL_ADC_GetMultimode>
 800670a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fd03 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	f040 808f 	bne.w	800683c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_ADC_Start_DMA+0x34>
 8006728:	2302      	movs	r3, #2
 800672a:	e08a      	b.n	8006842 <HAL_ADC_Start_DMA+0x14a>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b05      	cmp	r3, #5
 800673e:	d002      	beq.n	8006746 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b09      	cmp	r3, #9
 8006744:	d173      	bne.n	800682e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 ffdc 	bl	8007704 <ADC_Enable>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d166      	bne.n	8006824 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a38      	ldr	r2, [pc, #224]	; (8006850 <HAL_ADC_Start_DMA+0x158>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d002      	beq.n	800677a <HAL_ADC_Start_DMA+0x82>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	e001      	b.n	800677e <HAL_ADC_Start_DMA+0x86>
 800677a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	4293      	cmp	r3, r2
 8006784:	d002      	beq.n	800678c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006790:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a8:	f023 0206 	bic.w	r2, r3, #6
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	661a      	str	r2, [r3, #96]	; 0x60
 80067b0:	e002      	b.n	80067b8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	4a25      	ldr	r2, [pc, #148]	; (8006854 <HAL_ADC_Start_DMA+0x15c>)
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c4:	4a24      	ldr	r2, [pc, #144]	; (8006858 <HAL_ADC_Start_DMA+0x160>)
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <HAL_ADC_Start_DMA+0x164>)
 80067ce:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	221c      	movs	r2, #28
 80067d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0210 	orr.w	r2, r2, #16
 80067ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3340      	adds	r3, #64	; 0x40
 800680a:	4619      	mov	r1, r3
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f001 fe3a 	bl	8008488 <HAL_DMA_Start_IT>
 8006814:	4603      	mov	r3, r0
 8006816:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fc55 	bl	80060cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006822:	e00d      	b.n	8006840 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800682c:	e008      	b.n	8006840 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800683a:	e001      	b.n	8006840 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800683c:	2302      	movs	r3, #2
 800683e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	50000300 	.word	0x50000300
 8006850:	50000100 	.word	0x50000100
 8006854:	080078cf 	.word	0x080078cf
 8006858:	080079a7 	.word	0x080079a7
 800685c:	080079c3 	.word	0x080079c3

08006860 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_ADC_Stop_DMA+0x16>
 8006872:	2302      	movs	r3, #2
 8006874:	e051      	b.n	800691a <HAL_ADC_Stop_DMA+0xba>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800687e:	2103      	movs	r1, #3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fe83 	bl	800758c <ADC_ConversionStop>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d13f      	bne.n	8006910 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d10f      	bne.n	80068ce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 fe63 	bl	800857e <HAL_DMA_Abort>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0210 	bic.w	r2, r2, #16
 80068dc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 ff93 	bl	8007810 <ADC_Disable>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
 80068ee:	e002      	b.n	80068f6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 ff8d 	bl	8007810 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006900:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006944:	2300      	movs	r3, #0
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006958:	4883      	ldr	r0, [pc, #524]	; (8006b68 <HAL_ADC_IRQHandler+0x22c>)
 800695a:	f7ff faff 	bl	8005f5c <LL_ADC_GetMultimode>
 800695e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d017      	beq.n	800699a <HAL_ADC_IRQHandler+0x5e>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d012      	beq.n	800699a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	d105      	bne.n	800698c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006984:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 f90f 	bl	8007bb0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2202      	movs	r2, #2
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_ADC_IRQHandler+0x72>
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8085 	beq.w	8006ac4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d07f      	beq.n	8006ac4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fa19 	bl	8005e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d064      	beq.n	8006ab6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a5e      	ldr	r2, [pc, #376]	; (8006b6c <HAL_ADC_IRQHandler+0x230>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d002      	beq.n	80069fc <HAL_ADC_IRQHandler+0xc0>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	e001      	b.n	8006a00 <HAL_ADC_IRQHandler+0xc4>
 80069fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d008      	beq.n	8006a1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d002      	beq.n	8006a1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d104      	bne.n	8006a24 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	e00d      	b.n	8006a40 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a50      	ldr	r2, [pc, #320]	; (8006b6c <HAL_ADC_IRQHandler+0x230>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d002      	beq.n	8006a34 <HAL_ADC_IRQHandler+0xf8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	e001      	b.n	8006a38 <HAL_ADC_IRQHandler+0xfc>
 8006a34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d135      	bne.n	8006ab6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d12e      	bne.n	8006ab6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fb5d 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11a      	bne.n	8006a9e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 020c 	bic.w	r2, r2, #12
 8006a76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d112      	bne.n	8006ab6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	f043 0201 	orr.w	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a9c:	e00b      	b.n	8006ab6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa2:	f043 0210 	orr.w	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aae:	f043 0201 	orr.w	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fc f9fa 	bl	8002eb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	220c      	movs	r2, #12
 8006ac2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <HAL_ADC_IRQHandler+0x19c>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 809e 	beq.w	8006c20 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8098 	beq.w	8006c20 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff f9c2 	bl	8005e96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006b12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f97d 	bl	8005e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b1e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <HAL_ADC_IRQHandler+0x230>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d002      	beq.n	8006b30 <HAL_ADC_IRQHandler+0x1f4>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	e001      	b.n	8006b34 <HAL_ADC_IRQHandler+0x1f8>
 8006b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d008      	beq.n	8006b4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	d002      	beq.n	8006b4e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b07      	cmp	r3, #7
 8006b4c:	d104      	bne.n	8006b58 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	e011      	b.n	8006b7c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a03      	ldr	r2, [pc, #12]	; (8006b6c <HAL_ADC_IRQHandler+0x230>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d006      	beq.n	8006b70 <HAL_ADC_IRQHandler+0x234>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	e005      	b.n	8006b74 <HAL_ADC_IRQHandler+0x238>
 8006b68:	50000300 	.word	0x50000300
 8006b6c:	50000100 	.word	0x50000100
 8006b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b74:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d047      	beq.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <HAL_ADC_IRQHandler+0x260>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d03f      	beq.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d13a      	bne.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d133      	bne.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d12e      	bne.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fad6 	bl	800616a <LL_ADC_INJ_IsConversionOngoing>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d11a      	bne.n	8006bfa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bd2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d112      	bne.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf0:	f043 0201 	orr.w	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bf8:	e00b      	b.n	8006c12 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfe:	f043 0210 	orr.w	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	f043 0201 	orr.w	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ffa4 	bl	8007b60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2260      	movs	r2, #96	; 0x60
 8006c1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d011      	beq.n	8006c4e <HAL_ADC_IRQHandler+0x312>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00c      	beq.n	8006c4e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f89f 	bl	8006d84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d012      	beq.n	8006c7e <HAL_ADC_IRQHandler+0x342>
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00d      	beq.n	8006c7e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 ff8a 	bl	8007b88 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <HAL_ADC_IRQHandler+0x372>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00d      	beq.n	8006cae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ff7c 	bl	8007b9c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d036      	beq.n	8006d26 <HAL_ADC_IRQHandler+0x3ea>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d031      	beq.n	8006d26 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	e014      	b.n	8006cfa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006cd6:	4825      	ldr	r0, [pc, #148]	; (8006d6c <HAL_ADC_IRQHandler+0x430>)
 8006cd8:	f7ff f94e 	bl	8005f78 <LL_ADC_GetMultiDMATransfer>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce6:	e008      	b.n	8006cfa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10e      	bne.n	8006d1e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d10:	f043 0202 	orr.w	r2, r3, #2
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f83d 	bl	8006d98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2210      	movs	r2, #16
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d018      	beq.n	8006d62 <HAL_ADC_IRQHandler+0x426>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	f043 0208 	orr.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 ff09 	bl	8007b74 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006d62:	bf00      	nop
 8006d64:	3728      	adds	r7, #40	; 0x28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	50000300 	.word	0x50000300

08006d70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b0b6      	sub	sp, #216	; 0xd8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_ADC_ConfigChannel+0x22>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e3c8      	b.n	8007560 <HAL_ADC_ConfigChannel+0x7b4>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff f99e 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 83ad 	bne.w	8007542 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6859      	ldr	r1, [r3, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	f7ff f822 	bl	8005e3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff f98c 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 8006e04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff f9ac 	bl	800616a <LL_ADC_INJ_IsConversionOngoing>
 8006e12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 81d9 	bne.w	80071d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f040 81d4 	bne.w	80071d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e32:	d10f      	bne.n	8006e54 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f7ff f83c 	bl	8005ebc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe ffd0 	bl	8005df2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006e52:	e00e      	b.n	8006e72 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6819      	ldr	r1, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	461a      	mov	r2, r3
 8006e62:	f7ff f82b 	bl	8005ebc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe ffc0 	bl	8005df2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d022      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6919      	ldr	r1, [r3, #16]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ea4:	f7fe ff1a 	bl	8005cdc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6919      	ldr	r1, [r3, #16]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f7fe ff66 	bl	8005d86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d102      	bne.n	8006ed0 <HAL_ADC_ConfigChannel+0x124>
 8006eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ece:	e000      	b.n	8006ed2 <HAL_ADC_ConfigChannel+0x126>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fe ff72 	bl	8005dbc <LL_ADC_SetOffsetSaturation>
 8006ed8:	e17b      	b.n	80071d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe ff1f 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_ADC_ConfigChannel+0x15a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe ff14 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8006efc:	4603      	mov	r3, r0
 8006efe:	0e9b      	lsrs	r3, r3, #26
 8006f00:	f003 021f 	and.w	r2, r3, #31
 8006f04:	e01e      	b.n	8006f44 <HAL_ADC_ConfigChannel+0x198>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe ff09 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f1c:	fa93 f3a3 	rbit	r3, r3
 8006f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006f34:	2320      	movs	r3, #32
 8006f36:	e004      	b.n	8006f42 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f3c:	fab3 f383 	clz	r3, r3
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_ADC_ConfigChannel+0x1b0>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	0e9b      	lsrs	r3, r3, #26
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	e018      	b.n	8006f8e <HAL_ADC_ConfigChannel+0x1e2>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006f80:	2320      	movs	r3, #32
 8006f82:	e004      	b.n	8006f8e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f88:	fab3 f383 	clz	r3, r3
 8006f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d106      	bne.n	8006fa0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fed8 	bl	8005d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe febc 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_ADC_ConfigChannel+0x220>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe feb1 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	0e9b      	lsrs	r3, r3, #26
 8006fc6:	f003 021f 	and.w	r2, r3, #31
 8006fca:	e01e      	b.n	800700a <HAL_ADC_ConfigChannel+0x25e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fea6 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fe2:	fa93 f3a3 	rbit	r3, r3
 8006fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006ffa:	2320      	movs	r3, #32
 8006ffc:	e004      	b.n	8007008 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007002:	fab3 f383 	clz	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <HAL_ADC_ConfigChannel+0x276>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	0e9b      	lsrs	r3, r3, #26
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	e018      	b.n	8007054 <HAL_ADC_ConfigChannel+0x2a8>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800702e:	fa93 f3a3 	rbit	r3, r3
 8007032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800703a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800703e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007046:	2320      	movs	r3, #32
 8007048:	e004      	b.n	8007054 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800704a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704e:	fab3 f383 	clz	r3, r3
 8007052:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007054:	429a      	cmp	r2, r3
 8007056:	d106      	bne.n	8007066 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2200      	movs	r2, #0
 800705e:	2101      	movs	r1, #1
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fe75 	bl	8005d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2102      	movs	r1, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fe59 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8007072:	4603      	mov	r3, r0
 8007074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x2e6>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2102      	movs	r1, #2
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fe4e 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8007088:	4603      	mov	r3, r0
 800708a:	0e9b      	lsrs	r3, r3, #26
 800708c:	f003 021f 	and.w	r2, r3, #31
 8007090:	e01e      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x324>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2102      	movs	r1, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fe43 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 800709e:	4603      	mov	r3, r0
 80070a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a8:	fa93 f3a3 	rbit	r3, r3
 80070ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80070b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80070b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80070c0:	2320      	movs	r3, #32
 80070c2:	e004      	b.n	80070ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80070c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070c8:	fab3 f383 	clz	r3, r3
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x33c>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	0e9b      	lsrs	r3, r3, #26
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	e016      	b.n	8007116 <HAL_ADC_ConfigChannel+0x36a>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070f4:	fa93 f3a3 	rbit	r3, r3
 80070f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80070fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007108:	2320      	movs	r3, #32
 800710a:	e004      	b.n	8007116 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800710c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007110:	fab3 f383 	clz	r3, r3
 8007114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007116:	429a      	cmp	r2, r3
 8007118:	d106      	bne.n	8007128 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2200      	movs	r2, #0
 8007120:	2102      	movs	r1, #2
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fe14 	bl	8005d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2103      	movs	r1, #3
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fdf8 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8007134:	4603      	mov	r3, r0
 8007136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x3a8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2103      	movs	r1, #3
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fded 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 800714a:	4603      	mov	r3, r0
 800714c:	0e9b      	lsrs	r3, r3, #26
 800714e:	f003 021f 	and.w	r2, r3, #31
 8007152:	e017      	b.n	8007184 <HAL_ADC_ConfigChannel+0x3d8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2103      	movs	r1, #3
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fde2 	bl	8005d24 <LL_ADC_GetOffsetChannel>
 8007160:	4603      	mov	r3, r0
 8007162:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007166:	fa93 f3a3 	rbit	r3, r3
 800716a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800716c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007176:	2320      	movs	r3, #32
 8007178:	e003      	b.n	8007182 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800717a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717c:	fab3 f383 	clz	r3, r3
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <HAL_ADC_ConfigChannel+0x3f0>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	0e9b      	lsrs	r3, r3, #26
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	e011      	b.n	80071c0 <HAL_ADC_ConfigChannel+0x414>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071a4:	fa93 f3a3 	rbit	r3, r3
 80071a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80071aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80071b4:	2320      	movs	r3, #32
 80071b6:	e003      	b.n	80071c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	fab3 f383 	clz	r3, r3
 80071be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d106      	bne.n	80071d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2200      	movs	r2, #0
 80071ca:	2103      	movs	r1, #3
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fdbf 	bl	8005d50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe ff52 	bl	8006080 <LL_ADC_IsEnabled>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f040 8140 	bne.w	8007464 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	461a      	mov	r2, r3
 80071f2:	f7fe fe8f 	bl	8005f14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	4a8f      	ldr	r2, [pc, #572]	; (8007438 <HAL_ADC_ConfigChannel+0x68c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	f040 8131 	bne.w	8007464 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <HAL_ADC_ConfigChannel+0x47e>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	0e9b      	lsrs	r3, r3, #26
 8007218:	3301      	adds	r3, #1
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	2b09      	cmp	r3, #9
 8007220:	bf94      	ite	ls
 8007222:	2301      	movls	r3, #1
 8007224:	2300      	movhi	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	e019      	b.n	800725e <HAL_ADC_ConfigChannel+0x4b2>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007232:	fa93 f3a3 	rbit	r3, r3
 8007236:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800723a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800723c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8007242:	2320      	movs	r3, #32
 8007244:	e003      	b.n	800724e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8007246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007248:	fab3 f383 	clz	r3, r3
 800724c:	b2db      	uxtb	r3, r3
 800724e:	3301      	adds	r3, #1
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	2b09      	cmp	r3, #9
 8007256:	bf94      	ite	ls
 8007258:	2301      	movls	r3, #1
 800725a:	2300      	movhi	r3, #0
 800725c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800725e:	2b00      	cmp	r3, #0
 8007260:	d079      	beq.n	8007356 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726a:	2b00      	cmp	r3, #0
 800726c:	d107      	bne.n	800727e <HAL_ADC_ConfigChannel+0x4d2>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	0e9b      	lsrs	r3, r3, #26
 8007274:	3301      	adds	r3, #1
 8007276:	069b      	lsls	r3, r3, #26
 8007278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800727c:	e015      	b.n	80072aa <HAL_ADC_ConfigChannel+0x4fe>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007286:	fa93 f3a3 	rbit	r3, r3
 800728a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800728c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007296:	2320      	movs	r3, #32
 8007298:	e003      	b.n	80072a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800729a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800729c:	fab3 f383 	clz	r3, r3
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	3301      	adds	r3, #1
 80072a4:	069b      	lsls	r3, r3, #26
 80072a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <HAL_ADC_ConfigChannel+0x51e>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	0e9b      	lsrs	r3, r3, #26
 80072bc:	3301      	adds	r3, #1
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2101      	movs	r1, #1
 80072c4:	fa01 f303 	lsl.w	r3, r1, r3
 80072c8:	e017      	b.n	80072fa <HAL_ADC_ConfigChannel+0x54e>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	fa93 f3a3 	rbit	r3, r3
 80072d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80072dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80072e2:	2320      	movs	r3, #32
 80072e4:	e003      	b.n	80072ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80072e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e8:	fab3 f383 	clz	r3, r3
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	3301      	adds	r3, #1
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2101      	movs	r1, #1
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	ea42 0103 	orr.w	r1, r2, r3
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <HAL_ADC_ConfigChannel+0x574>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	0e9b      	lsrs	r3, r3, #26
 8007310:	3301      	adds	r3, #1
 8007312:	f003 021f 	and.w	r2, r3, #31
 8007316:	4613      	mov	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4413      	add	r3, r2
 800731c:	051b      	lsls	r3, r3, #20
 800731e:	e018      	b.n	8007352 <HAL_ADC_ConfigChannel+0x5a6>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	fa93 f3a3 	rbit	r3, r3
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007338:	2320      	movs	r3, #32
 800733a:	e003      	b.n	8007344 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800733c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733e:	fab3 f383 	clz	r3, r3
 8007342:	b2db      	uxtb	r3, r3
 8007344:	3301      	adds	r3, #1
 8007346:	f003 021f 	and.w	r2, r3, #31
 800734a:	4613      	mov	r3, r2
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	4413      	add	r3, r2
 8007350:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007352:	430b      	orrs	r3, r1
 8007354:	e081      	b.n	800745a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <HAL_ADC_ConfigChannel+0x5c6>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	0e9b      	lsrs	r3, r3, #26
 8007368:	3301      	adds	r3, #1
 800736a:	069b      	lsls	r3, r3, #26
 800736c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007370:	e015      	b.n	800739e <HAL_ADC_ConfigChannel+0x5f2>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	fa93 f3a3 	rbit	r3, r3
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800738a:	2320      	movs	r3, #32
 800738c:	e003      	b.n	8007396 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	fab3 f383 	clz	r3, r3
 8007394:	b2db      	uxtb	r3, r3
 8007396:	3301      	adds	r3, #1
 8007398:	069b      	lsls	r3, r3, #26
 800739a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <HAL_ADC_ConfigChannel+0x612>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	0e9b      	lsrs	r3, r3, #26
 80073b0:	3301      	adds	r3, #1
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2101      	movs	r1, #1
 80073b8:	fa01 f303 	lsl.w	r3, r1, r3
 80073bc:	e017      	b.n	80073ee <HAL_ADC_ConfigChannel+0x642>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	fa93 f3a3 	rbit	r3, r3
 80073ca:	61fb      	str	r3, [r7, #28]
  return result;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80073d6:	2320      	movs	r3, #32
 80073d8:	e003      	b.n	80073e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	fab3 f383 	clz	r3, r3
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3301      	adds	r3, #1
 80073e4:	f003 031f 	and.w	r3, r3, #31
 80073e8:	2101      	movs	r1, #1
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	ea42 0103 	orr.w	r1, r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <HAL_ADC_ConfigChannel+0x66e>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	0e9b      	lsrs	r3, r3, #26
 8007404:	3301      	adds	r3, #1
 8007406:	f003 021f 	and.w	r2, r3, #31
 800740a:	4613      	mov	r3, r2
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	4413      	add	r3, r2
 8007410:	3b1e      	subs	r3, #30
 8007412:	051b      	lsls	r3, r3, #20
 8007414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007418:	e01e      	b.n	8007458 <HAL_ADC_ConfigChannel+0x6ac>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	fa93 f3a3 	rbit	r3, r3
 8007426:	613b      	str	r3, [r7, #16]
  return result;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8007432:	2320      	movs	r3, #32
 8007434:	e006      	b.n	8007444 <HAL_ADC_ConfigChannel+0x698>
 8007436:	bf00      	nop
 8007438:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	fab3 f383 	clz	r3, r3
 8007442:	b2db      	uxtb	r3, r3
 8007444:	3301      	adds	r3, #1
 8007446:	f003 021f 	and.w	r2, r3, #31
 800744a:	4613      	mov	r3, r2
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	4413      	add	r3, r2
 8007450:	3b1e      	subs	r3, #30
 8007452:	051b      	lsls	r3, r3, #20
 8007454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007458:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800745e:	4619      	mov	r1, r3
 8007460:	f7fe fd2c 	bl	8005ebc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b3f      	ldr	r3, [pc, #252]	; (8007568 <HAL_ADC_ConfigChannel+0x7bc>)
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d071      	beq.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007470:	483e      	ldr	r0, [pc, #248]	; (800756c <HAL_ADC_ConfigChannel+0x7c0>)
 8007472:	f7fe fc25 	bl	8005cc0 <LL_ADC_GetCommonPathInternalCh>
 8007476:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a3c      	ldr	r2, [pc, #240]	; (8007570 <HAL_ADC_ConfigChannel+0x7c4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_ADC_ConfigChannel+0x6e2>
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3a      	ldr	r2, [pc, #232]	; (8007574 <HAL_ADC_ConfigChannel+0x7c8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d127      	bne.n	80074de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800748e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d121      	bne.n	80074de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a2:	d157      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074ac:	4619      	mov	r1, r3
 80074ae:	482f      	ldr	r0, [pc, #188]	; (800756c <HAL_ADC_ConfigChannel+0x7c0>)
 80074b0:	f7fe fbf3 	bl	8005c9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074b4:	4b30      	ldr	r3, [pc, #192]	; (8007578 <HAL_ADC_ConfigChannel+0x7cc>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	099b      	lsrs	r3, r3, #6
 80074ba:	4a30      	ldr	r2, [pc, #192]	; (800757c <HAL_ADC_ConfigChannel+0x7d0>)
 80074bc:	fba2 2303 	umull	r2, r3, r2, r3
 80074c0:	099b      	lsrs	r3, r3, #6
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	4613      	mov	r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80074ce:	e002      	b.n	80074d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f9      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074dc:	e03a      	b.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a27      	ldr	r2, [pc, #156]	; (8007580 <HAL_ADC_ConfigChannel+0x7d4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d113      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80074e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10d      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a22      	ldr	r2, [pc, #136]	; (8007584 <HAL_ADC_ConfigChannel+0x7d8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d02a      	beq.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007506:	4619      	mov	r1, r3
 8007508:	4818      	ldr	r0, [pc, #96]	; (800756c <HAL_ADC_ConfigChannel+0x7c0>)
 800750a:	f7fe fbc6 	bl	8005c9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800750e:	e021      	b.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <HAL_ADC_ConfigChannel+0x7dc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d11c      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800751a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800751e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d116      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a16      	ldr	r2, [pc, #88]	; (8007584 <HAL_ADC_ConfigChannel+0x7d8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d011      	beq.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007538:	4619      	mov	r1, r3
 800753a:	480c      	ldr	r0, [pc, #48]	; (800756c <HAL_ADC_ConfigChannel+0x7c0>)
 800753c:	f7fe fbad 	bl	8005c9a <LL_ADC_SetCommonPathInternalCh>
 8007540:	e008      	b.n	8007554 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007546:	f043 0220 	orr.w	r2, r3, #32
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800755c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007560:	4618      	mov	r0, r3
 8007562:	37d8      	adds	r7, #216	; 0xd8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	80080000 	.word	0x80080000
 800756c:	50000300 	.word	0x50000300
 8007570:	c3210000 	.word	0xc3210000
 8007574:	90c00010 	.word	0x90c00010
 8007578:	200001bc 	.word	0x200001bc
 800757c:	053e2d63 	.word	0x053e2d63
 8007580:	c7520000 	.word	0xc7520000
 8007584:	50000100 	.word	0x50000100
 8007588:	cb840000 	.word	0xcb840000

0800758c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007596:	2300      	movs	r3, #0
 8007598:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fdba 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 80075a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fddb 	bl	800616a <LL_ADC_INJ_IsConversionOngoing>
 80075b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8098 	beq.w	80076f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02a      	beq.n	8007628 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7f5b      	ldrb	r3, [r3, #29]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d126      	bne.n	8007628 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7f1b      	ldrb	r3, [r3, #28]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d122      	bne.n	8007628 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80075e2:	2301      	movs	r3, #1
 80075e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80075e6:	e014      	b.n	8007612 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4a45      	ldr	r2, [pc, #276]	; (8007700 <ADC_ConversionStop+0x174>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d90d      	bls.n	800760c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f4:	f043 0210 	orr.w	r2, r3, #16
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007600:	f043 0201 	orr.w	r2, r3, #1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e074      	b.n	80076f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3301      	adds	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d1e3      	bne.n	80075e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2240      	movs	r2, #64	; 0x40
 8007626:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d014      	beq.n	8007658 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fd72 	bl	800611c <LL_ADC_REG_IsConversionOngoing>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fd2f 	bl	80060a6 <LL_ADC_IsDisableOngoing>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fd4e 	bl	80060f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d014      	beq.n	8007688 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fd81 	bl	800616a <LL_ADC_INJ_IsConversionOngoing>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fd17 	bl	80060a6 <LL_ADC_IsDisableOngoing>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fd5d 	bl	8006142 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d005      	beq.n	800769a <ADC_ConversionStop+0x10e>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d105      	bne.n	80076a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007694:	230c      	movs	r3, #12
 8007696:	617b      	str	r3, [r7, #20]
        break;
 8007698:	e005      	b.n	80076a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800769a:	2308      	movs	r3, #8
 800769c:	617b      	str	r3, [r7, #20]
        break;
 800769e:	e002      	b.n	80076a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80076a0:	2304      	movs	r3, #4
 80076a2:	617b      	str	r3, [r7, #20]
        break;
 80076a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80076a6:	f7fe fab7 	bl	8005c18 <HAL_GetTick>
 80076aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80076ac:	e01b      	b.n	80076e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80076ae:	f7fe fab3 	bl	8005c18 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b05      	cmp	r3, #5
 80076ba:	d914      	bls.n	80076e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ce:	f043 0210 	orr.w	r2, r3, #16
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076da:	f043 0201 	orr.w	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e007      	b.n	80076f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1dc      	bne.n	80076ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3720      	adds	r7, #32
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	a33fffff 	.word	0xa33fffff

08007704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800770c:	2300      	movs	r3, #0
 800770e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fcb3 	bl	8006080 <LL_ADC_IsEnabled>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d169      	bne.n	80077f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	4b36      	ldr	r3, [pc, #216]	; (8007800 <ADC_Enable+0xfc>)
 8007728:	4013      	ands	r3, r2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007732:	f043 0210 	orr.w	r2, r3, #16
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773e:	f043 0201 	orr.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e055      	b.n	80077f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fc6e 	bl	8006030 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007754:	482b      	ldr	r0, [pc, #172]	; (8007804 <ADC_Enable+0x100>)
 8007756:	f7fe fab3 	bl	8005cc0 <LL_ADC_GetCommonPathInternalCh>
 800775a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800775c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007760:	2b00      	cmp	r3, #0
 8007762:	d013      	beq.n	800778c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007764:	4b28      	ldr	r3, [pc, #160]	; (8007808 <ADC_Enable+0x104>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	099b      	lsrs	r3, r3, #6
 800776a:	4a28      	ldr	r2, [pc, #160]	; (800780c <ADC_Enable+0x108>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	099b      	lsrs	r3, r3, #6
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800777e:	e002      	b.n	8007786 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3b01      	subs	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f9      	bne.n	8007780 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800778c:	f7fe fa44 	bl	8005c18 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007792:	e028      	b.n	80077e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fc71 	bl	8006080 <LL_ADC_IsEnabled>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe fc41 	bl	8006030 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80077ae:	f7fe fa33 	bl	8005c18 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d914      	bls.n	80077e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d00d      	beq.n	80077e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ce:	f043 0210 	orr.w	r2, r3, #16
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077da:	f043 0201 	orr.w	r2, r3, #1
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e007      	b.n	80077f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d1cf      	bne.n	8007794 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	8000003f 	.word	0x8000003f
 8007804:	50000300 	.word	0x50000300
 8007808:	200001bc 	.word	0x200001bc
 800780c:	053e2d63 	.word	0x053e2d63

08007810 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fc42 	bl	80060a6 <LL_ADC_IsDisableOngoing>
 8007822:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe fc29 	bl	8006080 <LL_ADC_IsEnabled>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d047      	beq.n	80078c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d144      	bne.n	80078c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 030d 	and.w	r3, r3, #13
 8007844:	2b01      	cmp	r3, #1
 8007846:	d10c      	bne.n	8007862 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe fc03 	bl	8006058 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2203      	movs	r2, #3
 8007858:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800785a:	f7fe f9dd 	bl	8005c18 <HAL_GetTick>
 800785e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007860:	e029      	b.n	80078b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007866:	f043 0210 	orr.w	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007872:	f043 0201 	orr.w	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e023      	b.n	80078c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800787e:	f7fe f9cb 	bl	8005c18 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d914      	bls.n	80078b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	f043 0210 	orr.w	r2, r3, #16
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078aa:	f043 0201 	orr.w	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e007      	b.n	80078c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1dc      	bne.n	800787e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d14b      	bne.n	8007980 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d021      	beq.n	8007946 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fa86 	bl	8005e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d032      	beq.n	8007978 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d12b      	bne.n	8007978 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11f      	bne.n	8007978 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793c:	f043 0201 	orr.w	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	65da      	str	r2, [r3, #92]	; 0x5c
 8007944:	e018      	b.n	8007978 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d111      	bne.n	8007978 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007970:	f043 0201 	orr.w	r2, r3, #1
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7fb fa99 	bl	8002eb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800797e:	e00e      	b.n	800799e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fa03 	bl	8006d98 <HAL_ADC_ErrorCallback>
}
 8007992:	e004      	b.n	800799e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff f9db 	bl	8006d70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e0:	f043 0204 	orr.w	r2, r3, #4
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff f9d5 	bl	8006d98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <LL_ADC_IsEnabled>:
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <LL_ADC_IsEnabled+0x18>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <LL_ADC_IsEnabled+0x1a>
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <LL_ADC_StartCalibration>:
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007a2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	609a      	str	r2, [r3, #8]
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <LL_ADC_IsCalibrationOnGoing>:
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a62:	d101      	bne.n	8007a68 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <LL_ADC_REG_IsConversionOngoing>:
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d101      	bne.n	8007a8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_ADCEx_Calibration_Start+0x1c>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e04d      	b.n	8007b54 <HAL_ADCEx_Calibration_Start+0xb8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fea5 	bl	8007810 <ADC_Disable>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d136      	bne.n	8007b3e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ad8:	f023 0302 	bic.w	r3, r3, #2
 8007adc:	f043 0202 	orr.w	r2, r3, #2
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ff96 	bl	8007a1c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007af0:	e014      	b.n	8007b1c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_ADCEx_Calibration_Start+0xc0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d90d      	bls.n	8007b1c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b04:	f023 0312 	bic.w	r3, r3, #18
 8007b08:	f043 0210 	orr.w	r2, r3, #16
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e01b      	b.n	8007b54 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff ff94 	bl	8007a4e <LL_ADC_IsCalibrationOnGoing>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e2      	bne.n	8007af2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b30:	f023 0303 	bic.w	r3, r3, #3
 8007b34:	f043 0201 	orr.w	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b3c:	e005      	b.n	8007b4a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b42:	f043 0210 	orr.w	r2, r3, #16
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	0004de01 	.word	0x0004de01

08007b60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b0a1      	sub	sp, #132	; 0x84
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e08b      	b.n	8007cfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007bea:	2300      	movs	r3, #0
 8007bec:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007bee:	2300      	movs	r3, #0
 8007bf0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bfa:	d102      	bne.n	8007c02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007bfc:	4b41      	ldr	r3, [pc, #260]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007bfe:	60bb      	str	r3, [r7, #8]
 8007c00:	e001      	b.n	8007c06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c10:	f043 0220 	orr.w	r2, r3, #32
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e06a      	b.n	8007cfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff ff25 	bl	8007a76 <LL_ADC_REG_IsConversionOngoing>
 8007c2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ff1f 	bl	8007a76 <LL_ADC_REG_IsConversionOngoing>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d14c      	bne.n	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d149      	bne.n	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007c44:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007c46:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d028      	beq.n	8007ca2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c62:	035b      	lsls	r3, r3, #13
 8007c64:	430b      	orrs	r3, r1
 8007c66:	431a      	orrs	r2, r3
 8007c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007c70:	f7ff fec1 	bl	80079f6 <LL_ADC_IsEnabled>
 8007c74:	4604      	mov	r4, r0
 8007c76:	4823      	ldr	r0, [pc, #140]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007c78:	f7ff febd 	bl	80079f6 <LL_ADC_IsEnabled>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4323      	orrs	r3, r4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d133      	bne.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007c8c:	f023 030f 	bic.w	r3, r3, #15
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	6811      	ldr	r1, [r2, #0]
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	6892      	ldr	r2, [r2, #8]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ca0:	e024      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007cae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007cb2:	f7ff fea0 	bl	80079f6 <LL_ADC_IsEnabled>
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4812      	ldr	r0, [pc, #72]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007cba:	f7ff fe9c 	bl	80079f6 <LL_ADC_IsEnabled>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4323      	orrs	r3, r4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d112      	bne.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007cce:	f023 030f 	bic.w	r3, r3, #15
 8007cd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007cd4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007cd6:	e009      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007cea:	e000      	b.n	8007cee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007cec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3784      	adds	r7, #132	; 0x84
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	50000100 	.word	0x50000100
 8007d08:	50000300 	.word	0x50000300

08007d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d1c:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <__NVIC_SetPriorityGrouping+0x44>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d28:	4013      	ands	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d3e:	4a04      	ldr	r2, [pc, #16]	; (8007d50 <__NVIC_SetPriorityGrouping+0x44>)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	60d3      	str	r3, [r2, #12]
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	e000ed00 	.word	0xe000ed00

08007d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d58:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <__NVIC_GetPriorityGrouping+0x18>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	0a1b      	lsrs	r3, r3, #8
 8007d5e:	f003 0307 	and.w	r3, r3, #7
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	e000ed00 	.word	0xe000ed00

08007d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	db0b      	blt.n	8007d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	f003 021f 	and.w	r2, r3, #31
 8007d88:	4907      	ldr	r1, [pc, #28]	; (8007da8 <__NVIC_EnableIRQ+0x38>)
 8007d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	2001      	movs	r0, #1
 8007d92:	fa00 f202 	lsl.w	r2, r0, r2
 8007d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	e000e100 	.word	0xe000e100

08007dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	db0a      	blt.n	8007dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	490c      	ldr	r1, [pc, #48]	; (8007df8 <__NVIC_SetPriority+0x4c>)
 8007dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dca:	0112      	lsls	r2, r2, #4
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	440b      	add	r3, r1
 8007dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dd4:	e00a      	b.n	8007dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	4908      	ldr	r1, [pc, #32]	; (8007dfc <__NVIC_SetPriority+0x50>)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	3b04      	subs	r3, #4
 8007de4:	0112      	lsls	r2, r2, #4
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	440b      	add	r3, r1
 8007dea:	761a      	strb	r2, [r3, #24]
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	e000e100 	.word	0xe000e100
 8007dfc:	e000ed00 	.word	0xe000ed00

08007e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	f1c3 0307 	rsb	r3, r3, #7
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	bf28      	it	cs
 8007e1e:	2304      	movcs	r3, #4
 8007e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3304      	adds	r3, #4
 8007e26:	2b06      	cmp	r3, #6
 8007e28:	d902      	bls.n	8007e30 <NVIC_EncodePriority+0x30>
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3b03      	subs	r3, #3
 8007e2e:	e000      	b.n	8007e32 <NVIC_EncodePriority+0x32>
 8007e30:	2300      	movs	r3, #0
 8007e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	43da      	mvns	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	401a      	ands	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e48:	f04f 31ff 	mov.w	r1, #4294967295
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e52:	43d9      	mvns	r1, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e58:	4313      	orrs	r3, r2
         );
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3724      	adds	r7, #36	; 0x24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e78:	d301      	bcc.n	8007e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e00f      	b.n	8007e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <SysTick_Config+0x40>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e86:	210f      	movs	r1, #15
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	f7ff ff8e 	bl	8007dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <SysTick_Config+0x40>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e96:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <SysTick_Config+0x40>)
 8007e98:	2207      	movs	r2, #7
 8007e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	e000e010 	.word	0xe000e010

08007eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ff29 	bl	8007d0c <__NVIC_SetPriorityGrouping>
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	4603      	mov	r3, r0
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ed0:	f7ff ff40 	bl	8007d54 <__NVIC_GetPriorityGrouping>
 8007ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	6978      	ldr	r0, [r7, #20]
 8007edc:	f7ff ff90 	bl	8007e00 <NVIC_EncodePriority>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff ff5f 	bl	8007dac <__NVIC_SetPriority>
}
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	4603      	mov	r3, r0
 8007efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff ff33 	bl	8007d70 <__NVIC_EnableIRQ>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ffa4 	bl	8007e68 <SysTick_Config>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e054      	b.n	8007fe8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7f5b      	ldrb	r3, [r3, #29]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fc fd46 	bl	80049e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	791b      	ldrb	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10c      	bne.n	8007f7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a22      	ldr	r2, [pc, #136]	; (8007ff0 <HAL_CRC_Init+0xc4>)
 8007f68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0218 	bic.w	r2, r2, #24
 8007f78:	609a      	str	r2, [r3, #8]
 8007f7a:	e00c      	b.n	8007f96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6899      	ldr	r1, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f948 	bl	800821c <HAL_CRCEx_Polynomial_Set>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e028      	b.n	8007fe8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	795b      	ldrb	r3, [r3, #5]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d105      	bne.n	8007faa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa6:	611a      	str	r2, [r3, #16]
 8007fa8:	e004      	b.n	8007fb4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6912      	ldr	r2, [r2, #16]
 8007fb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695a      	ldr	r2, [r3, #20]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	04c11db7 	.word	0x04c11db7

08007ff4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2202      	movs	r2, #2
 8008008:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0201 	orr.w	r2, r2, #1
 8008018:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d006      	beq.n	8008030 <HAL_CRC_Calculate+0x3c>
 8008022:	2b03      	cmp	r3, #3
 8008024:	d829      	bhi.n	800807a <HAL_CRC_Calculate+0x86>
 8008026:	2b01      	cmp	r3, #1
 8008028:	d019      	beq.n	800805e <HAL_CRC_Calculate+0x6a>
 800802a:	2b02      	cmp	r3, #2
 800802c:	d01e      	beq.n	800806c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800802e:	e024      	b.n	800807a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e00a      	b.n	800804c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	441a      	add	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	3301      	adds	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d3f0      	bcc.n	8008036 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	613b      	str	r3, [r7, #16]
      break;
 800805c:	e00e      	b.n	800807c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f812 	bl	800808c <CRC_Handle_8>
 8008068:	6138      	str	r0, [r7, #16]
      break;
 800806a:	e007      	b.n	800807c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 f899 	bl	80081a8 <CRC_Handle_16>
 8008076:	6138      	str	r0, [r7, #16]
      break;
 8008078:	e000      	b.n	800807c <HAL_CRC_Calculate+0x88>
      break;
 800807a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008082:	693b      	ldr	r3, [r7, #16]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800808c:	b480      	push	{r7}
 800808e:	b089      	sub	sp, #36	; 0x24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008098:	2300      	movs	r3, #0
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	e023      	b.n	80080e6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	4413      	add	r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	3301      	adds	r3, #1
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	440b      	add	r3, r1
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80080b8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	3302      	adds	r3, #2
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	440b      	add	r3, r1
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80080c8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	3303      	adds	r3, #3
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	440b      	add	r3, r1
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80080dc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80080de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	3301      	adds	r3, #1
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	089b      	lsrs	r3, r3, #2
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d3d6      	bcc.n	800809e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d04d      	beq.n	8008196 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d107      	bne.n	8008114 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4413      	add	r3, r2
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d116      	bne.n	800814c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	b21a      	sxth	r2, r3
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	3301      	adds	r3, #1
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	440b      	add	r3, r1
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	b21b      	sxth	r3, r3
 800813a:	4313      	orrs	r3, r2
 800813c:	b21b      	sxth	r3, r3
 800813e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	8b7a      	ldrh	r2, [r7, #26]
 800814a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d11f      	bne.n	8008196 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b21a      	sxth	r2, r3
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	3301      	adds	r3, #1
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	440b      	add	r3, r1
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	b21b      	sxth	r3, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	b21b      	sxth	r3, r3
 8008176:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	8b7a      	ldrh	r2, [r7, #26]
 8008182:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	3302      	adds	r3, #2
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3724      	adds	r7, #36	; 0x24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e013      	b.n	80081e2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	041a      	lsls	r2, r3, #16
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	3302      	adds	r3, #2
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	440b      	add	r3, r1
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	3301      	adds	r3, #1
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3e6      	bcc.n	80081ba <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	881a      	ldrh	r2, [r3, #0]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
}
 8008210:	4618      	mov	r0, r3
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800822c:	231f      	movs	r3, #31
 800822e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
 800823e:	e063      	b.n	8008308 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008240:	bf00      	nop
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1e5a      	subs	r2, r3, #1
 8008246:	613a      	str	r2, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d009      	beq.n	8008260 <HAL_CRCEx_Polynomial_Set+0x44>
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0f0      	beq.n	8008242 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b18      	cmp	r3, #24
 8008264:	d846      	bhi.n	80082f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <HAL_CRCEx_Polynomial_Set+0x50>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	080082fb 	.word	0x080082fb
 8008270:	080082f5 	.word	0x080082f5
 8008274:	080082f5 	.word	0x080082f5
 8008278:	080082f5 	.word	0x080082f5
 800827c:	080082f5 	.word	0x080082f5
 8008280:	080082f5 	.word	0x080082f5
 8008284:	080082f5 	.word	0x080082f5
 8008288:	080082f5 	.word	0x080082f5
 800828c:	080082e9 	.word	0x080082e9
 8008290:	080082f5 	.word	0x080082f5
 8008294:	080082f5 	.word	0x080082f5
 8008298:	080082f5 	.word	0x080082f5
 800829c:	080082f5 	.word	0x080082f5
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	080082f5 	.word	0x080082f5
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	080082dd 	.word	0x080082dd
 80082b0:	080082f5 	.word	0x080082f5
 80082b4:	080082f5 	.word	0x080082f5
 80082b8:	080082f5 	.word	0x080082f5
 80082bc:	080082f5 	.word	0x080082f5
 80082c0:	080082f5 	.word	0x080082f5
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	080082d1 	.word	0x080082d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	d913      	bls.n	80082fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80082da:	e010      	b.n	80082fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b07      	cmp	r3, #7
 80082e0:	d90f      	bls.n	8008302 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80082e6:	e00c      	b.n	8008302 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b0f      	cmp	r3, #15
 80082ec:	d90b      	bls.n	8008306 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80082f2:	e008      	b.n	8008306 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
        break;
 80082f8:	e006      	b.n	8008308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80082fa:	bf00      	nop
 80082fc:	e004      	b.n	8008308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80082fe:	bf00      	nop
 8008300:	e002      	b.n	8008308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008302:	bf00      	nop
 8008304:	e000      	b.n	8008308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008306:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10d      	bne.n	800832a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f023 0118 	bic.w	r1, r3, #24
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	430a      	orrs	r2, r1
 8008328:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
}
 800832c:	4618      	mov	r0, r3
 800832e:	371c      	adds	r7, #28
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e08d      	b.n	8008466 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	4b47      	ldr	r3, [pc, #284]	; (8008470 <HAL_DMA_Init+0x138>)
 8008352:	429a      	cmp	r2, r3
 8008354:	d80f      	bhi.n	8008376 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	4b45      	ldr	r3, [pc, #276]	; (8008474 <HAL_DMA_Init+0x13c>)
 800835e:	4413      	add	r3, r2
 8008360:	4a45      	ldr	r2, [pc, #276]	; (8008478 <HAL_DMA_Init+0x140>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	009a      	lsls	r2, r3, #2
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a42      	ldr	r2, [pc, #264]	; (800847c <HAL_DMA_Init+0x144>)
 8008372:	641a      	str	r2, [r3, #64]	; 0x40
 8008374:	e00e      	b.n	8008394 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	4b40      	ldr	r3, [pc, #256]	; (8008480 <HAL_DMA_Init+0x148>)
 800837e:	4413      	add	r3, r2
 8008380:	4a3d      	ldr	r2, [pc, #244]	; (8008478 <HAL_DMA_Init+0x140>)
 8008382:	fba2 2303 	umull	r2, r3, r2, r3
 8008386:	091b      	lsrs	r3, r3, #4
 8008388:	009a      	lsls	r2, r3, #2
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a3c      	ldr	r2, [pc, #240]	; (8008484 <HAL_DMA_Init+0x14c>)
 8008392:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80083b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa1e 	bl	8008828 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f4:	d102      	bne.n	80083fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008410:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d010      	beq.n	800843c <HAL_DMA_Init+0x104>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b04      	cmp	r3, #4
 8008420:	d80c      	bhi.n	800843c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa3e 	bl	80088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	e008      	b.n	800844e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40020407 	.word	0x40020407
 8008474:	bffdfff8 	.word	0xbffdfff8
 8008478:	cccccccd 	.word	0xcccccccd
 800847c:	40020000 	.word	0x40020000
 8008480:	bffdfbf8 	.word	0xbffdfbf8
 8008484:	40020400 	.word	0x40020400

08008488 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_DMA_Start_IT+0x20>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e066      	b.n	8008576 <HAL_DMA_Start_IT+0xee>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d155      	bne.n	8008568 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0201 	bic.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f962 	bl	80087aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 020e 	orr.w	r2, r2, #14
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e00f      	b.n	8008520 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0204 	bic.w	r2, r2, #4
 800850e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 020a 	orr.w	r2, r2, #10
 800851e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800853c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008554:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	e005      	b.n	8008574 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008570:	2302      	movs	r3, #2
 8008572:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008574:	7dfb      	ldrb	r3, [r7, #23]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d005      	beq.n	80085a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2204      	movs	r2, #4
 800859a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
 80085a0:	e037      	b.n	8008612 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 020e 	bic.w	r2, r2, #14
 80085b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0201 	bic.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d6:	f003 021f 	and.w	r2, r3, #31
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2101      	movs	r1, #1
 80085e0:	fa01 f202 	lsl.w	r2, r1, r2
 80085e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008606:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008610:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864c:	f003 031f 	and.w	r3, r3, #31
 8008650:	2204      	movs	r2, #4
 8008652:	409a      	lsls	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4013      	ands	r3, r2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d026      	beq.n	80086aa <HAL_DMA_IRQHandler+0x7a>
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d021      	beq.n	80086aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d107      	bne.n	8008684 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0204 	bic.w	r2, r2, #4
 8008682:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008688:	f003 021f 	and.w	r2, r3, #31
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	2104      	movs	r1, #4
 8008692:	fa01 f202 	lsl.w	r2, r1, r2
 8008696:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	2b00      	cmp	r3, #0
 800869e:	d071      	beq.n	8008784 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80086a8:	e06c      	b.n	8008784 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	f003 031f 	and.w	r3, r3, #31
 80086b2:	2202      	movs	r2, #2
 80086b4:	409a      	lsls	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d02e      	beq.n	800871c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d029      	beq.n	800871c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 020a 	bic.w	r2, r2, #10
 80086e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	f003 021f 	and.w	r2, r3, #31
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	2102      	movs	r1, #2
 80086fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008700:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d038      	beq.n	8008784 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800871a:	e033      	b.n	8008784 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2208      	movs	r2, #8
 8008726:	409a      	lsls	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d02a      	beq.n	8008786 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d025      	beq.n	8008786 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 020e 	bic.w	r2, r2, #14
 8008748:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	f003 021f 	and.w	r2, r3, #31
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	2101      	movs	r1, #1
 8008758:	fa01 f202 	lsl.w	r2, r1, r2
 800875c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008784:	bf00      	nop
 8008786:	bf00      	nop
}
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800879c:	b2db      	uxtb	r3, r3
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b085      	sub	sp, #20
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
 80087b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d8:	f003 021f 	and.w	r2, r3, #31
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	2101      	movs	r1, #1
 80087e2:	fa01 f202 	lsl.w	r2, r1, r2
 80087e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d108      	bne.n	800880a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008808:	e007      	b.n	800881a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]
}
 800881a:	bf00      	nop
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	4b16      	ldr	r3, [pc, #88]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008838:	429a      	cmp	r2, r3
 800883a:	d802      	bhi.n	8008842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800883c:	4b15      	ldr	r3, [pc, #84]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	e001      	b.n	8008846 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008844:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	3b08      	subs	r3, #8
 8008852:	4a12      	ldr	r2, [pc, #72]	; (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008854:	fba2 2303 	umull	r2, r3, r2, r3
 8008858:	091b      	lsrs	r3, r3, #4
 800885a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	089b      	lsrs	r3, r3, #2
 8008862:	009a      	lsls	r2, r3, #2
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	461a      	mov	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a0b      	ldr	r2, [pc, #44]	; (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008872:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 031f 	and.w	r3, r3, #31
 800887a:	2201      	movs	r2, #1
 800887c:	409a      	lsls	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	40020407 	.word	0x40020407
 8008894:	40020800 	.word	0x40020800
 8008898:	40020820 	.word	0x40020820
 800889c:	cccccccd 	.word	0xcccccccd
 80088a0:	40020880 	.word	0x40020880

080088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	461a      	mov	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80088c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	f003 031f 	and.w	r3, r3, #31
 80088d0:	2201      	movs	r2, #1
 80088d2:	409a      	lsls	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	1000823f 	.word	0x1000823f
 80088e8:	40020940 	.word	0x40020940

080088ec <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80088fe:	4b2f      	ldr	r3, [pc, #188]	; (80089bc <HAL_FLASH_Program+0xd0>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <HAL_FLASH_Program+0x1e>
 8008906:	2302      	movs	r3, #2
 8008908:	e053      	b.n	80089b2 <HAL_FLASH_Program+0xc6>
 800890a:	4b2c      	ldr	r3, [pc, #176]	; (80089bc <HAL_FLASH_Program+0xd0>)
 800890c:	2201      	movs	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008914:	f000 f892 	bl	8008a3c <FLASH_WaitForLastOperation>
 8008918:	4603      	mov	r3, r0
 800891a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d143      	bne.n	80089aa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008922:	4b26      	ldr	r3, [pc, #152]	; (80089bc <HAL_FLASH_Program+0xd0>)
 8008924:	2200      	movs	r2, #0
 8008926:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008928:	4b25      	ldr	r3, [pc, #148]	; (80089c0 <HAL_FLASH_Program+0xd4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008934:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <HAL_FLASH_Program+0xd4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a21      	ldr	r2, [pc, #132]	; (80089c0 <HAL_FLASH_Program+0xd4>)
 800893a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800893e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <HAL_FLASH_Program+0xd0>)
 8008942:	2202      	movs	r2, #2
 8008944:	771a      	strb	r2, [r3, #28]
 8008946:	e002      	b.n	800894e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008948:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <HAL_FLASH_Program+0xd0>)
 800894a:	2200      	movs	r2, #0
 800894c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d107      	bne.n	8008964 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008958:	68b8      	ldr	r0, [r7, #8]
 800895a:	f000 f8c3 	bl	8008ae4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800895e:	2301      	movs	r3, #1
 8008960:	613b      	str	r3, [r7, #16]
 8008962:	e010      	b.n	8008986 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d002      	beq.n	8008970 <HAL_FLASH_Program+0x84>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d10a      	bne.n	8008986 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	4619      	mov	r1, r3
 8008974:	68b8      	ldr	r0, [r7, #8]
 8008976:	f000 f8db 	bl	8008b30 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d102      	bne.n	8008986 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008980:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008984:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800898a:	f000 f857 	bl	8008a3c <FLASH_WaitForLastOperation>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d006      	beq.n	80089a6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008998:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_FLASH_Program+0xd4>)
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	43db      	mvns	r3, r3
 80089a0:	4907      	ldr	r1, [pc, #28]	; (80089c0 <HAL_FLASH_Program+0xd4>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80089a6:	f000 f9d3 	bl	8008d50 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80089aa:	4b04      	ldr	r3, [pc, #16]	; (80089bc <HAL_FLASH_Program+0xd0>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	200001d8 	.word	0x200001d8
 80089c0:	40022000 	.word	0x40022000

080089c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <HAL_FLASH_Unlock+0x38>)
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	da0b      	bge.n	80089ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <HAL_FLASH_Unlock+0x38>)
 80089d8:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <HAL_FLASH_Unlock+0x3c>)
 80089da:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80089dc:	4b07      	ldr	r3, [pc, #28]	; (80089fc <HAL_FLASH_Unlock+0x38>)
 80089de:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <HAL_FLASH_Unlock+0x40>)
 80089e0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80089e2:	4b06      	ldr	r3, [pc, #24]	; (80089fc <HAL_FLASH_Unlock+0x38>)
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da01      	bge.n	80089ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80089ee:	79fb      	ldrb	r3, [r7, #7]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	40022000 	.word	0x40022000
 8008a00:	45670123 	.word	0x45670123
 8008a04:	cdef89ab 	.word	0xcdef89ab

08008a08 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008a12:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <HAL_FLASH_Lock+0x30>)
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	4a08      	ldr	r2, [pc, #32]	; (8008a38 <HAL_FLASH_Lock+0x30>)
 8008a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a1c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_FLASH_Lock+0x30>)
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	da01      	bge.n	8008a2a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	40022000 	.word	0x40022000

08008a3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8008a44:	f7fd f8e8 	bl	8005c18 <HAL_GetTick>
 8008a48:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008a4a:	e009      	b.n	8008a60 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008a4c:	f7fd f8e4 	bl	8005c18 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d201      	bcs.n	8008a60 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e038      	b.n	8008ad2 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008a60:	4b1e      	ldr	r3, [pc, #120]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d0ee      	beq.n	8008a4c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008a6e:	4b1b      	ldr	r3, [pc, #108]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008a76:	4013      	ands	r3, r2
 8008a78:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01e      	beq.n	8008abe <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008a80:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <FLASH_WaitForLastOperation+0xa4>)
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <FLASH_WaitForLastOperation+0xa4>)
 8008a8a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d007      	beq.n	8008aa6 <FLASH_WaitForLastOperation+0x6a>
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008aa0:	490e      	ldr	r1, [pc, #56]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	618b      	str	r3, [r1, #24]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <FLASH_WaitForLastOperation+0x7e>
 8008ab0:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008ab8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e009      	b.n	8008ad2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008abe:	4b07      	ldr	r3, [pc, #28]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d102      	bne.n	8008ad0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008aca:	4b04      	ldr	r3, [pc, #16]	; (8008adc <FLASH_WaitForLastOperation+0xa0>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40022000 	.word	0x40022000
 8008ae0:	200001d8 	.word	0x200001d8

08008ae4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008af0:	4b0e      	ldr	r3, [pc, #56]	; (8008b2c <FLASH_Program_DoubleWord+0x48>)
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <FLASH_Program_DoubleWord+0x48>)
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008b02:	f3bf 8f6f 	isb	sy
}
 8008b06:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	f04f 0300 	mov.w	r3, #0
 8008b14:	000a      	movs	r2, r1
 8008b16:	2300      	movs	r3, #0
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	3104      	adds	r1, #4
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	600b      	str	r3, [r1, #0]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	40022000 	.word	0x40022000

08008b30 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b089      	sub	sp, #36	; 0x24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008b3a:	2340      	movs	r3, #64	; 0x40
 8008b3c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <FLASH_Program_Fast+0x68>)
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <FLASH_Program_Fast+0x68>)
 8008b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b50:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b52:	f3ef 8310 	mrs	r3, PRIMASK
 8008b56:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b58:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8008b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b5c:	b672      	cpsid	i
}
 8008b5e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	3304      	adds	r3, #4
 8008b72:	617b      	str	r3, [r7, #20]
    row_index--;
 8008b74:	7ffb      	ldrb	r3, [r7, #31]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1ef      	bne.n	8008b60 <FLASH_Program_Fast+0x30>
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f383 8810 	msr	PRIMASK, r3
}
 8008b8a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008b8c:	bf00      	nop
 8008b8e:	3724      	adds	r7, #36	; 0x24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40022000 	.word	0x40022000

08008b9c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008ba6:	4b47      	ldr	r3, [pc, #284]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_FLASHEx_Erase+0x16>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e083      	b.n	8008cba <HAL_FLASHEx_Erase+0x11e>
 8008bb2:	4b44      	ldr	r3, [pc, #272]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bbc:	f7ff ff3e 	bl	8008a3c <FLASH_WaitForLastOperation>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d173      	bne.n	8008cb2 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008bca:	4b3e      	ldr	r3, [pc, #248]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008bd0:	4b3d      	ldr	r3, [pc, #244]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d013      	beq.n	8008c04 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008bdc:	4b3a      	ldr	r3, [pc, #232]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008be8:	4b37      	ldr	r3, [pc, #220]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a36      	ldr	r2, [pc, #216]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bf2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008bf4:	4b33      	ldr	r3, [pc, #204]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	771a      	strb	r2, [r3, #28]
 8008bfa:	e016      	b.n	8008c2a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008bfc:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	771a      	strb	r2, [r3, #28]
 8008c02:	e012      	b.n	8008c2a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008c04:	4b30      	ldr	r3, [pc, #192]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008c10:	4b2d      	ldr	r3, [pc, #180]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a2c      	ldr	r2, [pc, #176]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c1a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008c1c:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008c1e:	2202      	movs	r2, #2
 8008c20:	771a      	strb	r2, [r3, #28]
 8008c22:	e002      	b.n	8008c2a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008c24:	4b27      	ldr	r3, [pc, #156]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d111      	bne.n	8008c56 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 f848 	bl	8008ccc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c40:	f7ff fefc 	bl	8008a3c <FLASH_WaitForLastOperation>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8008c48:	4b1f      	ldr	r3, [pc, #124]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	4a1e      	ldr	r2, [pc, #120]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c4e:	f023 0304 	bic.w	r3, r3, #4
 8008c52:	6153      	str	r3, [r2, #20]
 8008c54:	e02b      	b.n	8008cae <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	60bb      	str	r3, [r7, #8]
 8008c64:	e01b      	b.n	8008c9e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68b8      	ldr	r0, [r7, #8]
 8008c6e:	f000 f84b 	bl	8008d08 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c76:	f7ff fee1 	bl	8008a3c <FLASH_WaitForLastOperation>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	4a11      	ldr	r2, [pc, #68]	; (8008cc8 <HAL_FLASHEx_Erase+0x12c>)
 8008c84:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008c88:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	601a      	str	r2, [r3, #0]
          break;
 8008c96:	e00a      	b.n	8008cae <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d3db      	bcc.n	8008c66 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008cae:	f000 f84f 	bl	8008d50 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008cb2:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <HAL_FLASHEx_Erase+0x128>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]

  return status;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	200001d8 	.word	0x200001d8
 8008cc8:	40022000 	.word	0x40022000

08008ccc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <FLASH_MassErase+0x38>)
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <FLASH_MassErase+0x38>)
 8008ce4:	f043 0304 	orr.w	r3, r3, #4
 8008ce8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <FLASH_MassErase+0x38>)
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	4a05      	ldr	r2, [pc, #20]	; (8008d04 <FLASH_MassErase+0x38>)
 8008cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf4:	6153      	str	r3, [r2, #20]
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40022000 	.word	0x40022000

08008d08 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008d12:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <FLASH_PageErase+0x44>)
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008d22:	490a      	ldr	r1, [pc, #40]	; (8008d4c <FLASH_PageErase+0x44>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <FLASH_PageErase+0x44>)
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	4a07      	ldr	r2, [pc, #28]	; (8008d4c <FLASH_PageErase+0x44>)
 8008d2e:	f043 0302 	orr.w	r3, r3, #2
 8008d32:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <FLASH_PageErase+0x44>)
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <FLASH_PageErase+0x44>)
 8008d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d3e:	6153      	str	r3, [r2, #20]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40022000 	.word	0x40022000

08008d50 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008d56:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <FLASH_FlushCaches+0x8c>)
 8008d58:	7f1b      	ldrb	r3, [r3, #28]
 8008d5a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d002      	beq.n	8008d68 <FLASH_FlushCaches+0x18>
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d117      	bne.n	8008d98 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008d68:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008d74:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a19      	ldr	r2, [pc, #100]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	4b17      	ldr	r3, [pc, #92]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a16      	ldr	r2, [pc, #88]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d8c:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a13      	ldr	r2, [pc, #76]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d96:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d002      	beq.n	8008da4 <FLASH_FlushCaches+0x54>
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d111      	bne.n	8008dc8 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008da4:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a0d      	ldr	r2, [pc, #52]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a07      	ldr	r2, [pc, #28]	; (8008de0 <FLASH_FlushCaches+0x90>)
 8008dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dc6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <FLASH_FlushCaches+0x8c>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	771a      	strb	r2, [r3, #28]
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	200001d8 	.word	0x200001d8
 8008de0:	40022000 	.word	0x40022000

08008de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008df2:	e15a      	b.n	80090aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	2101      	movs	r1, #1
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008e00:	4013      	ands	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 814c 	beq.w	80090a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d005      	beq.n	8008e24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d130      	bne.n	8008e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	2203      	movs	r2, #3
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	43db      	mvns	r3, r3
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	43db      	mvns	r3, r3
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4013      	ands	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	091b      	lsrs	r3, r3, #4
 8008e70:	f003 0201 	and.w	r2, r3, #1
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d017      	beq.n	8008ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea2:	43db      	mvns	r3, r3
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d123      	bne.n	8008f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	08da      	lsrs	r2, r3, #3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3208      	adds	r2, #8
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f003 0307 	and.w	r3, r3, #7
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	220f      	movs	r2, #15
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	43db      	mvns	r3, r3
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	fa02 f303 	lsl.w	r3, r2, r3
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	08da      	lsrs	r2, r3, #3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3208      	adds	r2, #8
 8008f10:	6939      	ldr	r1, [r7, #16]
 8008f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	2203      	movs	r2, #3
 8008f22:	fa02 f303 	lsl.w	r3, r2, r3
 8008f26:	43db      	mvns	r3, r3
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f003 0203 	and.w	r2, r3, #3
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80a6 	beq.w	80090a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f58:	4b5b      	ldr	r3, [pc, #364]	; (80090c8 <HAL_GPIO_Init+0x2e4>)
 8008f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f5c:	4a5a      	ldr	r2, [pc, #360]	; (80090c8 <HAL_GPIO_Init+0x2e4>)
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	6613      	str	r3, [r2, #96]	; 0x60
 8008f64:	4b58      	ldr	r3, [pc, #352]	; (80090c8 <HAL_GPIO_Init+0x2e4>)
 8008f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f70:	4a56      	ldr	r2, [pc, #344]	; (80090cc <HAL_GPIO_Init+0x2e8>)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	089b      	lsrs	r3, r3, #2
 8008f76:	3302      	adds	r3, #2
 8008f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	220f      	movs	r2, #15
 8008f88:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4013      	ands	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008f9a:	d01f      	beq.n	8008fdc <HAL_GPIO_Init+0x1f8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a4c      	ldr	r2, [pc, #304]	; (80090d0 <HAL_GPIO_Init+0x2ec>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d019      	beq.n	8008fd8 <HAL_GPIO_Init+0x1f4>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a4b      	ldr	r2, [pc, #300]	; (80090d4 <HAL_GPIO_Init+0x2f0>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d013      	beq.n	8008fd4 <HAL_GPIO_Init+0x1f0>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a4a      	ldr	r2, [pc, #296]	; (80090d8 <HAL_GPIO_Init+0x2f4>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d00d      	beq.n	8008fd0 <HAL_GPIO_Init+0x1ec>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a49      	ldr	r2, [pc, #292]	; (80090dc <HAL_GPIO_Init+0x2f8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d007      	beq.n	8008fcc <HAL_GPIO_Init+0x1e8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a48      	ldr	r2, [pc, #288]	; (80090e0 <HAL_GPIO_Init+0x2fc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d101      	bne.n	8008fc8 <HAL_GPIO_Init+0x1e4>
 8008fc4:	2305      	movs	r3, #5
 8008fc6:	e00a      	b.n	8008fde <HAL_GPIO_Init+0x1fa>
 8008fc8:	2306      	movs	r3, #6
 8008fca:	e008      	b.n	8008fde <HAL_GPIO_Init+0x1fa>
 8008fcc:	2304      	movs	r3, #4
 8008fce:	e006      	b.n	8008fde <HAL_GPIO_Init+0x1fa>
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e004      	b.n	8008fde <HAL_GPIO_Init+0x1fa>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e002      	b.n	8008fde <HAL_GPIO_Init+0x1fa>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <HAL_GPIO_Init+0x1fa>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	f002 0203 	and.w	r2, r2, #3
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4093      	lsls	r3, r2
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008fee:	4937      	ldr	r1, [pc, #220]	; (80090cc <HAL_GPIO_Init+0x2e8>)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	089b      	lsrs	r3, r3, #2
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ffc:	4b39      	ldr	r3, [pc, #228]	; (80090e4 <HAL_GPIO_Init+0x300>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	43db      	mvns	r3, r3
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4013      	ands	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009020:	4a30      	ldr	r2, [pc, #192]	; (80090e4 <HAL_GPIO_Init+0x300>)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009026:	4b2f      	ldr	r3, [pc, #188]	; (80090e4 <HAL_GPIO_Init+0x300>)
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	43db      	mvns	r3, r3
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4013      	ands	r3, r2
 8009034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800904a:	4a26      	ldr	r2, [pc, #152]	; (80090e4 <HAL_GPIO_Init+0x300>)
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009050:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <HAL_GPIO_Init+0x300>)
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	43db      	mvns	r3, r3
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	4013      	ands	r3, r2
 800905e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009074:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <HAL_GPIO_Init+0x300>)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800907a:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <HAL_GPIO_Init+0x300>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	43db      	mvns	r3, r3
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4013      	ands	r3, r2
 8009088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800909e:	4a11      	ldr	r2, [pc, #68]	; (80090e4 <HAL_GPIO_Init+0x300>)
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	3301      	adds	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f47f ae9d 	bne.w	8008df4 <HAL_GPIO_Init+0x10>
  }
}
 80090ba:	bf00      	nop
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	40021000 	.word	0x40021000
 80090cc:	40010000 	.word	0x40010000
 80090d0:	48000400 	.word	0x48000400
 80090d4:	48000800 	.word	0x48000800
 80090d8:	48000c00 	.word	0x48000c00
 80090dc:	48001000 	.word	0x48001000
 80090e0:	48001400 	.word	0x48001400
 80090e4:	40010400 	.word	0x40010400

080090e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	887b      	ldrh	r3, [r7, #2]
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
 8009104:	e001      	b.n	800910a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800910a:	7bfb      	ldrb	r3, [r7, #15]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
 8009124:	4613      	mov	r3, r2
 8009126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009128:	787b      	ldrb	r3, [r7, #1]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800912e:	887a      	ldrh	r2, [r7, #2]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009134:	e002      	b.n	800913c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009136:	887a      	ldrh	r2, [r7, #2]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	4013      	ands	r3, r2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d006      	beq.n	800916c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800915e:	4a05      	ldr	r2, [pc, #20]	; (8009174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f9 fd3a 	bl	8002be0 <HAL_GPIO_EXTI_Callback>
  }
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	40010400 	.word	0x40010400

08009178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e08d      	b.n	80092a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fb fc3e 	bl	8004a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2224      	movs	r2, #36	; 0x24
 80091a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d107      	bne.n	80091f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091ee:	609a      	str	r2, [r3, #8]
 80091f0:	e006      	b.n	8009200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80091fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d108      	bne.n	800921a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009216:	605a      	str	r2, [r3, #4]
 8009218:	e007      	b.n	800922a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800923c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800924c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691a      	ldr	r2, [r3, #16]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	69d9      	ldr	r1, [r3, #28]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1a      	ldr	r2, [r3, #32]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	d138      	bne.n	8009336 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e032      	b.n	8009338 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2224      	movs	r2, #36	; 0x24
 80092de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0201 	bic.w	r2, r2, #1
 80092f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009300:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6819      	ldr	r1, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0201 	orr.w	r2, r2, #1
 8009320:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	e000      	b.n	8009338 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009336:	2302      	movs	r3, #2
  }
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b20      	cmp	r3, #32
 8009358:	d139      	bne.n	80093ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009360:	2b01      	cmp	r3, #1
 8009362:	d101      	bne.n	8009368 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009364:	2302      	movs	r3, #2
 8009366:	e033      	b.n	80093d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2224      	movs	r2, #36	; 0x24
 8009374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f022 0201 	bic.w	r2, r2, #1
 8009386:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009396:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f042 0201 	orr.w	r2, r2, #1
 80093b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e000      	b.n	80093d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80093ce:	2302      	movs	r3, #2
  }
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0c0      	b.n	8009570 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d106      	bne.n	8009408 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f00b fec8 	bl	8015198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2203      	movs	r2, #3
 800940c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f005 fe1e 	bl	800f056 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	e03e      	b.n	800949e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009420:	7bfa      	ldrb	r2, [r7, #15]
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	440b      	add	r3, r1
 800942e:	3311      	adds	r3, #17
 8009430:	2201      	movs	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009434:	7bfa      	ldrb	r2, [r7, #15]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	440b      	add	r3, r1
 8009442:	3310      	adds	r3, #16
 8009444:	7bfa      	ldrb	r2, [r7, #15]
 8009446:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009448:	7bfa      	ldrb	r2, [r7, #15]
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	440b      	add	r3, r1
 8009456:	3313      	adds	r3, #19
 8009458:	2200      	movs	r2, #0
 800945a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800945c:	7bfa      	ldrb	r2, [r7, #15]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	440b      	add	r3, r1
 800946a:	3320      	adds	r3, #32
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	440b      	add	r3, r1
 800947e:	3324      	adds	r3, #36	; 0x24
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	440b      	add	r3, r1
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	3301      	adds	r3, #1
 800949c:	73fb      	strb	r3, [r7, #15]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	791b      	ldrb	r3, [r3, #4]
 80094a2:	7bfa      	ldrb	r2, [r7, #15]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d3bb      	bcc.n	8009420 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	e044      	b.n	8009538 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80094ae:	7bfa      	ldrb	r2, [r7, #15]
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	440b      	add	r3, r1
 80094bc:	f203 1351 	addw	r3, r3, #337	; 0x151
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80094c4:	7bfa      	ldrb	r2, [r7, #15]
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	440b      	add	r3, r1
 80094d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094d6:	7bfa      	ldrb	r2, [r7, #15]
 80094d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80094da:	7bfa      	ldrb	r2, [r7, #15]
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	440b      	add	r3, r1
 80094e8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80094f0:	7bfa      	ldrb	r2, [r7, #15]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	440b      	add	r3, r1
 80094fe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009506:	7bfa      	ldrb	r2, [r7, #15]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	440b      	add	r3, r1
 8009514:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800951c:	7bfa      	ldrb	r2, [r7, #15]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	440b      	add	r3, r1
 800952a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	3301      	adds	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	791b      	ldrb	r3, [r3, #4]
 800953c:	7bfa      	ldrb	r2, [r7, #15]
 800953e:	429a      	cmp	r2, r3
 8009540:	d3b5      	bcc.n	80094ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3304      	adds	r3, #4
 800954a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800954e:	f005 fd9d 	bl	800f08c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7a9b      	ldrb	r3, [r3, #10]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d102      	bne.n	800956e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 fc41 	bl	800adf0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009586:	2b01      	cmp	r3, #1
 8009588:	d101      	bne.n	800958e <HAL_PCD_Start+0x16>
 800958a:	2302      	movs	r3, #2
 800958c:	e012      	b.n	80095b4 <HAL_PCD_Start+0x3c>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f005 fd44 	bl	800f028 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f008 f804 	bl	80115b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f008 f809 	bl	80115e0 <USB_ReadInterrupts>
 80095ce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fb04 	bl	8009be8 <PCD_EP_ISR_Handler>

    return;
 80095e0:	e110      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d013      	beq.n	8009614 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095fe:	b292      	uxth	r2, r2
 8009600:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f00b fe58 	bl	80152ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800960a:	2100      	movs	r1, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f8fc 	bl	800980a <HAL_PCD_SetAddress>

    return;
 8009612:	e0f7      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00c      	beq.n	8009638 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009630:	b292      	uxth	r2, r2
 8009632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009636:	e0e5      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00c      	beq.n	800965c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800964a:	b29a      	uxth	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009654:	b292      	uxth	r2, r2
 8009656:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800965a:	e0d3      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d034      	beq.n	80096d0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800966e:	b29a      	uxth	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0204 	bic.w	r2, r2, #4
 8009678:	b292      	uxth	r2, r2
 800967a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009686:	b29a      	uxth	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0208 	bic.w	r2, r2, #8
 8009690:	b292      	uxth	r2, r2
 8009692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800969c:	2b01      	cmp	r3, #1
 800969e:	d107      	bne.n	80096b0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f00b fff8 	bl	80156a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f00b fe3b 	bl	801532c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096c8:	b292      	uxth	r2, r2
 80096ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80096ce:	e099      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d027      	beq.n	800972a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0208 	orr.w	r2, r2, #8
 80096ec:	b292      	uxth	r2, r2
 80096ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009704:	b292      	uxth	r2, r2
 8009706:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009712:	b29a      	uxth	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 0204 	orr.w	r2, r2, #4
 800971c:	b292      	uxth	r2, r2
 800971e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f00b fde8 	bl	80152f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009728:	e06c      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009730:	2b00      	cmp	r3, #0
 8009732:	d040      	beq.n	80097b6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009746:	b292      	uxth	r2, r2
 8009748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d12b      	bne.n	80097ae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0204 	orr.w	r2, r2, #4
 8009768:	b292      	uxth	r2, r2
 800976a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009776:	b29a      	uxth	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 0208 	orr.w	r2, r2, #8
 8009780:	b292      	uxth	r2, r2
 8009782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009796:	b29b      	uxth	r3, r3
 8009798:	089b      	lsrs	r3, r3, #2
 800979a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80097a4:	2101      	movs	r1, #1
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f00b ff7a 	bl	80156a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80097ac:	e02a      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f00b fda2 	bl	80152f8 <HAL_PCD_SuspendCallback>
    return;
 80097b4:	e026      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00f      	beq.n	80097e0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097d2:	b292      	uxth	r2, r2
 80097d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f00b fd60 	bl	801529e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80097de:	e011      	b.n	8009804 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097fc:	b292      	uxth	r2, r2
 80097fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009802:	bf00      	nop
  }
}
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_PCD_SetAddress+0x1a>
 8009820:	2302      	movs	r3, #2
 8009822:	e012      	b.n	800984a <HAL_PCD_SetAddress+0x40>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	78fa      	ldrb	r2, [r7, #3]
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f007 fea5 	bl	801158a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	461a      	mov	r2, r3
 8009860:	4603      	mov	r3, r0
 8009862:	70fb      	strb	r3, [r7, #3]
 8009864:	460b      	mov	r3, r1
 8009866:	803b      	strh	r3, [r7, #0]
 8009868:	4613      	mov	r3, r2
 800986a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da0e      	bge.n	8009896 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	f003 0207 	and.w	r2, r3, #7
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	3310      	adds	r3, #16
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	4413      	add	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	705a      	strb	r2, [r3, #1]
 8009894:	e00e      	b.n	80098b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	f003 0207 	and.w	r2, r3, #7
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	4413      	add	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80098c0:	883a      	ldrh	r2, [r7, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	78ba      	ldrb	r2, [r7, #2]
 80098ca:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80098cc:	78bb      	ldrb	r3, [r7, #2]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d102      	bne.n	80098d8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_PCD_EP_Open+0x94>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e00e      	b.n	8009904 <HAL_PCD_EP_Open+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f005 fbe7 	bl	800f0c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8009902:	7afb      	ldrb	r3, [r7, #11]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800991c:	2b00      	cmp	r3, #0
 800991e:	da0e      	bge.n	800993e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	f003 0207 	and.w	r2, r3, #7
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	3310      	adds	r3, #16
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4413      	add	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	705a      	strb	r2, [r3, #1]
 800993c:	e00e      	b.n	800995c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f003 0207 	and.w	r2, r3, #7
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	4413      	add	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	f003 0307 	and.w	r3, r3, #7
 8009962:	b2da      	uxtb	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <HAL_PCD_EP_Close+0x6a>
 8009972:	2302      	movs	r3, #2
 8009974:	e00e      	b.n	8009994 <HAL_PCD_EP_Close+0x88>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	4618      	mov	r0, r3
 8009986:	f005 ff63 	bl	800f850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	460b      	mov	r3, r1
 80099aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	f003 0207 	and.w	r2, r3, #7
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2200      	movs	r2, #0
 80099d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2200      	movs	r2, #0
 80099da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099dc:	7afb      	ldrb	r3, [r7, #11]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6979      	ldr	r1, [r7, #20]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f006 f91b 	bl	800fc2a <USB_EPStartXfer>

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	460b      	mov	r3, r1
 8009a08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a0a:	78fb      	ldrb	r3, [r7, #3]
 8009a0c:	f003 0207 	and.w	r2, r3, #7
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	440b      	add	r3, r1
 8009a1c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009a20:	681b      	ldr	r3, [r3, #0]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b086      	sub	sp, #24
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	f003 0207 	and.w	r2, r3, #7
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	3310      	adds	r3, #16
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2200      	movs	r2, #0
 8009a72:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2201      	movs	r2, #1
 8009a78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6979      	ldr	r1, [r7, #20]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f006 f8cc 	bl	800fc2a <USB_EPStartXfer>

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	7912      	ldrb	r2, [r2, #4]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d901      	bls.n	8009aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e03e      	b.n	8009b38 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da0e      	bge.n	8009ae0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	f003 0207 	and.w	r2, r3, #7
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	3310      	adds	r3, #16
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2201      	movs	r2, #1
 8009adc:	705a      	strb	r2, [r3, #1]
 8009ade:	e00c      	b.n	8009afa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2201      	movs	r2, #1
 8009afe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <HAL_PCD_EP_SetStall+0x7e>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e00e      	b.n	8009b38 <HAL_PCD_EP_SetStall+0x9c>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f007 fc2f 	bl	801138c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	7912      	ldrb	r2, [r2, #4]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d901      	bls.n	8009b5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e040      	b.n	8009be0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da0e      	bge.n	8009b84 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b66:	78fb      	ldrb	r3, [r7, #3]
 8009b68:	f003 0207 	and.w	r2, r3, #7
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	3310      	adds	r3, #16
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4413      	add	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	705a      	strb	r2, [r3, #1]
 8009b82:	e00e      	b.n	8009ba2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	f003 0207 	and.w	r2, r3, #7
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	4413      	add	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d101      	bne.n	8009bc2 <HAL_PCD_EP_ClrStall+0x82>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e00e      	b.n	8009be0 <HAL_PCD_EP_ClrStall+0xa0>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68f9      	ldr	r1, [r7, #12]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f007 fc2c 	bl	801142e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b096      	sub	sp, #88	; 0x58
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009bf0:	e3ae      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009bfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009bfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 030f 	and.w	r3, r3, #15
 8009c08:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009c0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8170 	bne.w	8009ef6 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c1a:	f003 0310 	and.w	r3, r3, #16
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d14d      	bne.n	8009cbe <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c32:	81fb      	strh	r3, [r7, #14]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3310      	adds	r3, #16
 8009c4a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4413      	add	r3, r2
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	4413      	add	r3, r2
 8009c66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c76:	695a      	ldr	r2, [r3, #20]
 8009c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	441a      	add	r2, r3
 8009c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f00b faf0 	bl	801526a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	7b1b      	ldrb	r3, [r3, #12]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 835d 	beq.w	800a350 <PCD_EP_ISR_Handler+0x768>
 8009c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f040 8358 	bne.w	800a350 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7b1b      	ldrb	r3, [r3, #12]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	b292      	uxth	r2, r2
 8009cb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	731a      	strb	r2, [r3, #12]
 8009cbc:	e348      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cc4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009cd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d032      	beq.n	8009d42 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	4413      	add	r3, r2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d02:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f007 fcb4 	bl	8011684 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009d28:	4013      	ands	r3, r2
 8009d2a:	823b      	strh	r3, [r7, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	8a3a      	ldrh	r2, [r7, #16]
 8009d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d36:	b292      	uxth	r2, r2
 8009d38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f00b fa68 	bl	8015210 <HAL_PCD_SetupStageCallback>
 8009d40:	e306      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009d42:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f280 8302 	bge.w	800a350 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009d58:	4013      	ands	r3, r2
 8009d5a:	83fb      	strh	r3, [r7, #30]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	8bfa      	ldrh	r2, [r7, #30]
 8009d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d66:	b292      	uxth	r2, r2
 8009d68:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	461a      	mov	r2, r3
 8009d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	4413      	add	r3, r2
 8009d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d90:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d019      	beq.n	8009dce <PCD_EP_ISR_Handler+0x1e6>
 8009d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d015      	beq.n	8009dce <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009da8:	6959      	ldr	r1, [r3, #20]
 8009daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f007 fc66 	bl	8011684 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dba:	695a      	ldr	r2, [r3, #20]
 8009dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dc4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f00b fa33 	bl	8015234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 82b5 	bne.w	800a350 <PCD_EP_ISR_Handler+0x768>
 8009de6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009df2:	f000 82ad 	beq.w	800a350 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	61bb      	str	r3, [r7, #24]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	61bb      	str	r3, [r7, #24]
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	801a      	strh	r2, [r3, #0]
 8009e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8009e2c:	d91d      	bls.n	8009e6a <PCD_EP_ISR_Handler+0x282>
 8009e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	095b      	lsrs	r3, r3, #5
 8009e34:	647b      	str	r3, [r7, #68]	; 0x44
 8009e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f003 031f 	and.w	r3, r3, #31
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d102      	bne.n	8009e48 <PCD_EP_ISR_Handler+0x260>
 8009e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e44:	3b01      	subs	r3, #1
 8009e46:	647b      	str	r3, [r7, #68]	; 0x44
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	029b      	lsls	r3, r3, #10
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	801a      	strh	r2, [r3, #0]
 8009e68:	e026      	b.n	8009eb8 <PCD_EP_ISR_Handler+0x2d0>
 8009e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <PCD_EP_ISR_Handler+0x2a0>
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	801a      	strh	r2, [r3, #0]
 8009e86:	e017      	b.n	8009eb8 <PCD_EP_ISR_Handler+0x2d0>
 8009e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	085b      	lsrs	r3, r3, #1
 8009e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <PCD_EP_ISR_Handler+0x2ba>
 8009e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec8:	827b      	strh	r3, [r7, #18]
 8009eca:	8a7b      	ldrh	r3, [r7, #18]
 8009ecc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ed0:	827b      	strh	r3, [r7, #18]
 8009ed2:	8a7b      	ldrh	r3, [r7, #18]
 8009ed4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ed8:	827b      	strh	r3, [r7, #18]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	8a7b      	ldrh	r3, [r7, #18]
 8009ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	8013      	strh	r3, [r2, #0]
 8009ef4:	e22c      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009f0a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f280 80f6 	bge.w	800a100 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f46:	b292      	uxth	r2, r2
 8009f48:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009f4a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009f4e:	4613      	mov	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	00db      	lsls	r3, r3, #3
 8009f56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f62:	7b1b      	ldrb	r3, [r3, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d123      	bne.n	8009fb0 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	4413      	add	r3, r2
 8009f82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f8c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8009f90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 808e 	beq.w	800a0b6 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa0:	6959      	ldr	r1, [r3, #20]
 8009fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa4:	88da      	ldrh	r2, [r3, #6]
 8009fa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009faa:	f007 fb6b 	bl	8011684 <USB_ReadPMA>
 8009fae:	e082      	b.n	800a0b6 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fb2:	78db      	ldrb	r3, [r3, #3]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d10a      	bne.n	8009fce <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009fb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9d3 	bl	800a36c <HAL_PCD_EP_DB_Receive>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009fcc:	e073      	b.n	800a0b6 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	441a      	add	r2, r3
 8009ffa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a00a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a00e:	b29b      	uxth	r3, r3
 800a010:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d022      	beq.n	800a072 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a034:	b29b      	uxth	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	4413      	add	r3, r2
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	4413      	add	r3, r2
 800a046:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a050:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a054:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d02c      	beq.n	800a0b6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a062:	6959      	ldr	r1, [r3, #20]
 800a064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a066:	891a      	ldrh	r2, [r3, #8]
 800a068:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a06c:	f007 fb0a 	bl	8011684 <USB_ReadPMA>
 800a070:	e021      	b.n	800a0b6 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	461a      	mov	r2, r3
 800a07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	4413      	add	r3, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	4413      	add	r3, r2
 800a08c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a096:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a09a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6818      	ldr	r0, [r3, #0]
 800a0a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0a8:	6959      	ldr	r1, [r3, #20]
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ac:	895a      	ldrh	r2, [r3, #10]
 800a0ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a0b2:	f007 fae7 	bl	8011684 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0b8:	69da      	ldr	r2, [r3, #28]
 800a0ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a0be:	441a      	add	r2, r3
 800a0c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a0c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0c6:	695a      	ldr	r2, [r3, #20]
 800a0c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a0cc:	441a      	add	r2, r3
 800a0ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <PCD_EP_ISR_Handler+0x4fe>
 800a0da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d206      	bcs.n	800a0f4 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a0e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f00b f8a1 	bl	8015234 <HAL_PCD_DataOutStageCallback>
 800a0f2:	e005      	b.n	800a100 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f005 fd95 	bl	800fc2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a100:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8121 	beq.w	800a350 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800a10e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	3310      	adds	r3, #16
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	4413      	add	r3, r2
 800a120:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	441a      	add	r2, r3
 800a14e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a160:	78db      	ldrb	r3, [r3, #3]
 800a162:	2b01      	cmp	r3, #1
 800a164:	f040 80a2 	bne.w	800a2ac <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800a168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a16a:	2200      	movs	r2, #0
 800a16c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a170:	7b1b      	ldrb	r3, [r3, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 8093 	beq.w	800a29e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a180:	2b00      	cmp	r3, #0
 800a182:	d046      	beq.n	800a212 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d126      	bne.n	800a1da <PCD_EP_ISR_Handler+0x5f2>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	461a      	mov	r2, r3
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	4413      	add	r3, r2
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	00da      	lsls	r2, r3, #3
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1b2:	623b      	str	r3, [r7, #32]
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	801a      	strh	r2, [r3, #0]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	e061      	b.n	800a29e <PCD_EP_ISR_Handler+0x6b6>
 800a1da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1dc:	785b      	ldrb	r3, [r3, #1]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d15d      	bne.n	800a29e <PCD_EP_ISR_Handler+0x6b6>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	4413      	add	r3, r2
 800a1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	00da      	lsls	r2, r3, #3
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	4413      	add	r3, r2
 800a204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	2200      	movs	r2, #0
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	e045      	b.n	800a29e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d126      	bne.n	800a26e <PCD_EP_ISR_Handler+0x686>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a22e:	b29b      	uxth	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a234:	4413      	add	r3, r2
 800a236:	637b      	str	r3, [r7, #52]	; 0x34
 800a238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	00da      	lsls	r2, r3, #3
 800a23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a240:	4413      	add	r3, r2
 800a242:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a246:	633b      	str	r3, [r7, #48]	; 0x30
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a252:	b29a      	uxth	r2, r3
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	801a      	strh	r2, [r3, #0]
 800a258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a266:	b29a      	uxth	r2, r3
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	801a      	strh	r2, [r3, #0]
 800a26c:	e017      	b.n	800a29e <PCD_EP_ISR_Handler+0x6b6>
 800a26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d113      	bne.n	800a29e <PCD_EP_ISR_Handler+0x6b6>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a27e:	b29b      	uxth	r3, r3
 800a280:	461a      	mov	r2, r3
 800a282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a284:	4413      	add	r3, r2
 800a286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	00da      	lsls	r2, r3, #3
 800a28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a290:	4413      	add	r3, r2
 800a292:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a296:	63bb      	str	r3, [r7, #56]	; 0x38
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	2200      	movs	r2, #0
 800a29c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f00a ffe0 	bl	801526a <HAL_PCD_DataInStageCallback>
 800a2aa:	e051      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a2ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a2b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d144      	bne.n	800a342 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e2:	699a      	ldr	r2, [r3, #24]
 800a2e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d907      	bls.n	800a2fc <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800a2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a2f4:	1ad2      	subs	r2, r2, r3
 800a2f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f8:	619a      	str	r2, [r3, #24]
 800a2fa:	e002      	b.n	800a302 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a2fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2fe:	2200      	movs	r2, #0
 800a300:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f00a ffaa 	bl	801526a <HAL_PCD_DataInStageCallback>
 800a316:	e01b      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a31a:	695a      	ldr	r2, [r3, #20]
 800a31c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a320:	441a      	add	r2, r3
 800a322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a324:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a328:	69da      	ldr	r2, [r3, #28]
 800a32a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a32e:	441a      	add	r2, r3
 800a330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a332:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a33a:	4618      	mov	r0, r3
 800a33c:	f005 fc75 	bl	800fc2a <USB_EPStartXfer>
 800a340:	e006      	b.n	800a350 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a342:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a346:	461a      	mov	r2, r3
 800a348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f917 	bl	800a57e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a358:	b29b      	uxth	r3, r3
 800a35a:	b21b      	sxth	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f6ff ac48 	blt.w	8009bf2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3758      	adds	r7, #88	; 0x58
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d07c      	beq.n	800a47e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	461a      	mov	r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	00db      	lsls	r3, r3, #3
 800a396:	4413      	add	r3, r2
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	6812      	ldr	r2, [r2, #0]
 800a39c:	4413      	add	r3, r2
 800a39e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	8b7b      	ldrh	r3, [r7, #26]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d306      	bcc.n	800a3c2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	8b7b      	ldrh	r3, [r7, #26]
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	619a      	str	r2, [r3, #24]
 800a3c0:	e002      	b.n	800a3c8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d123      	bne.n	800a418 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ea:	833b      	strh	r3, [r7, #24]
 800a3ec:	8b3b      	ldrh	r3, [r7, #24]
 800a3ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3f2:	833b      	strh	r3, [r7, #24]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	441a      	add	r2, r3
 800a402:	8b3b      	ldrh	r3, [r7, #24]
 800a404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a40c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a414:	b29b      	uxth	r3, r3
 800a416:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01f      	beq.n	800a462 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	b29b      	uxth	r3, r3
 800a434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43c:	82fb      	strh	r3, [r7, #22]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	441a      	add	r2, r3
 800a44c:	8afb      	ldrh	r3, [r7, #22]
 800a44e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a45a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a45e:	b29b      	uxth	r3, r3
 800a460:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a462:	8b7b      	ldrh	r3, [r7, #26]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8085 	beq.w	800a574 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	6959      	ldr	r1, [r3, #20]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	891a      	ldrh	r2, [r3, #8]
 800a476:	8b7b      	ldrh	r3, [r7, #26]
 800a478:	f007 f904 	bl	8011684 <USB_ReadPMA>
 800a47c:	e07a      	b.n	800a574 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a486:	b29b      	uxth	r3, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	4413      	add	r3, r2
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	6812      	ldr	r2, [r2, #0]
 800a496:	4413      	add	r3, r2
 800a498:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	699a      	ldr	r2, [r3, #24]
 800a4a8:	8b7b      	ldrh	r3, [r7, #26]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d306      	bcc.n	800a4bc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	699a      	ldr	r2, [r3, #24]
 800a4b2:	8b7b      	ldrh	r3, [r7, #26]
 800a4b4:	1ad2      	subs	r2, r2, r3
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	619a      	str	r2, [r3, #24]
 800a4ba:	e002      	b.n	800a4c2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d123      	bne.n	800a512 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e4:	83fb      	strh	r3, [r7, #30]
 800a4e6:	8bfb      	ldrh	r3, [r7, #30]
 800a4e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4ec:	83fb      	strh	r3, [r7, #30]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	441a      	add	r2, r3
 800a4fc:	8bfb      	ldrh	r3, [r7, #30]
 800a4fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a50e:	b29b      	uxth	r3, r3
 800a510:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a512:	88fb      	ldrh	r3, [r7, #6]
 800a514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d11f      	bne.n	800a55c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a536:	83bb      	strh	r3, [r7, #28]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	441a      	add	r2, r3
 800a546:	8bbb      	ldrh	r3, [r7, #28]
 800a548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a558:	b29b      	uxth	r3, r3
 800a55a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a55c:	8b7b      	ldrh	r3, [r7, #26]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6959      	ldr	r1, [r3, #20]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	895a      	ldrh	r2, [r3, #10]
 800a56e:	8b7b      	ldrh	r3, [r7, #26]
 800a570:	f007 f888 	bl	8011684 <USB_ReadPMA>
    }
  }

  return count;
 800a574:	8b7b      	ldrh	r3, [r7, #26]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b0a4      	sub	sp, #144	; 0x90
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	4613      	mov	r3, r2
 800a58a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a58c:	88fb      	ldrh	r3, [r7, #6]
 800a58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 81db 	beq.w	800a94e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	6812      	ldr	r2, [r2, #0]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5bc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	699a      	ldr	r2, [r3, #24]
 800a5c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d907      	bls.n	800a5dc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	699a      	ldr	r2, [r3, #24]
 800a5d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5d4:	1ad2      	subs	r2, r2, r3
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	619a      	str	r2, [r3, #24]
 800a5da:	e002      	b.n	800a5e2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f040 80b9 	bne.w	800a75e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	785b      	ldrb	r3, [r3, #1]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d126      	bne.n	800a642 <HAL_PCD_EP_DB_Transmit+0xc4>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a602:	b29b      	uxth	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	4413      	add	r3, r2
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	00da      	lsls	r2, r3, #3
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	4413      	add	r3, r2
 800a616:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a61a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	b29b      	uxth	r3, r3
 800a622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a626:	b29a      	uxth	r2, r3
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	801a      	strh	r2, [r3, #0]
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	b29b      	uxth	r3, r3
 800a632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	e01a      	b.n	800a678 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d116      	bne.n	800a678 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a658:	b29b      	uxth	r3, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65e:	4413      	add	r3, r2
 800a660:	637b      	str	r3, [r7, #52]	; 0x34
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	00da      	lsls	r2, r3, #3
 800a668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66a:	4413      	add	r3, r2
 800a66c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a670:	633b      	str	r3, [r7, #48]	; 0x30
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	2200      	movs	r2, #0
 800a676:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d126      	bne.n	800a6d4 <HAL_PCD_EP_DB_Transmit+0x156>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	61fb      	str	r3, [r7, #28]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a694:	b29b      	uxth	r3, r3
 800a696:	461a      	mov	r2, r3
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	4413      	add	r3, r2
 800a69c:	61fb      	str	r3, [r7, #28]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	00da      	lsls	r2, r3, #3
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	801a      	strh	r2, [r3, #0]
 800a6d2:	e017      	b.n	800a704 <HAL_PCD_EP_DB_Transmit+0x186>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	785b      	ldrb	r3, [r3, #1]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d113      	bne.n	800a704 <HAL_PCD_EP_DB_Transmit+0x186>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	4413      	add	r3, r2
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	00da      	lsls	r2, r3, #3
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6fc:	623b      	str	r3, [r7, #32]
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	2200      	movs	r2, #0
 800a702:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	4619      	mov	r1, r3
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f00a fdad 	bl	801526a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a710:	88fb      	ldrh	r3, [r7, #6]
 800a712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 82fa 	beq.w	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a736:	82fb      	strh	r3, [r7, #22]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	461a      	mov	r2, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	441a      	add	r2, r3
 800a746:	8afb      	ldrh	r3, [r7, #22]
 800a748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a74c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a758:	b29b      	uxth	r3, r3
 800a75a:	8013      	strh	r3, [r2, #0]
 800a75c:	e2d8      	b.n	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d021      	beq.n	800a7ac <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a782:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	441a      	add	r2, r3
 800a794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a79c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	f040 82ac 	bne.w	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	695a      	ldr	r2, [r3, #20]
 800a7bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	69da      	ldr	r2, [r3, #28]
 800a7ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7ce:	441a      	add	r2, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	6a1a      	ldr	r2, [r3, #32]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d30b      	bcc.n	800a7f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	6a1a      	ldr	r2, [r3, #32]
 800a7ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7f0:	1ad2      	subs	r2, r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	621a      	str	r2, [r3, #32]
 800a7f6:	e017      	b.n	800a828 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d108      	bne.n	800a812 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a810:	e00a      	b.n	800a828 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	785b      	ldrb	r3, [r3, #1]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d165      	bne.n	800a8fc <HAL_PCD_EP_DB_Transmit+0x37e>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a83e:	b29b      	uxth	r3, r3
 800a840:	461a      	mov	r2, r3
 800a842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a844:	4413      	add	r3, r2
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	00da      	lsls	r2, r3, #3
 800a84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a850:	4413      	add	r3, r2
 800a852:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a856:	63bb      	str	r3, [r7, #56]	; 0x38
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a862:	b29a      	uxth	r2, r3
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	801a      	strh	r2, [r3, #0]
 800a868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a86c:	2b3e      	cmp	r3, #62	; 0x3e
 800a86e:	d91d      	bls.n	800a8ac <HAL_PCD_EP_DB_Transmit+0x32e>
 800a870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a874:	095b      	lsrs	r3, r3, #5
 800a876:	64bb      	str	r3, [r7, #72]	; 0x48
 800a878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a87c:	f003 031f 	and.w	r3, r3, #31
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <HAL_PCD_EP_DB_Transmit+0x30c>
 800a884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a886:	3b01      	subs	r3, #1
 800a888:	64bb      	str	r3, [r7, #72]	; 0x48
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	b29a      	uxth	r2, r3
 800a890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a892:	b29b      	uxth	r3, r3
 800a894:	029b      	lsls	r3, r3, #10
 800a896:	b29b      	uxth	r3, r3
 800a898:	4313      	orrs	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	e044      	b.n	800a936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a8ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <HAL_PCD_EP_DB_Transmit+0x34c>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	801a      	strh	r2, [r3, #0]
 800a8c8:	e035      	b.n	800a936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a8ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <HAL_PCD_EP_DB_Transmit+0x366>
 800a8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	029b      	lsls	r3, r3, #10
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f8:	801a      	strh	r2, [r3, #0]
 800a8fa:	e01c      	b.n	800a936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d118      	bne.n	800a936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	647b      	str	r3, [r7, #68]	; 0x44
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a912:	b29b      	uxth	r3, r3
 800a914:	461a      	mov	r2, r3
 800a916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a918:	4413      	add	r3, r2
 800a91a:	647b      	str	r3, [r7, #68]	; 0x44
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	00da      	lsls	r2, r3, #3
 800a922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a924:	4413      	add	r3, r2
 800a926:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a92a:	643b      	str	r3, [r7, #64]	; 0x40
 800a92c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a930:	b29a      	uxth	r2, r3
 800a932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a934:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	6959      	ldr	r1, [r3, #20]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	891a      	ldrh	r2, [r3, #8]
 800a942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a946:	b29b      	uxth	r3, r3
 800a948:	f006 fe5a 	bl	8011600 <USB_WritePMA>
 800a94c:	e1e0      	b.n	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a956:	b29b      	uxth	r3, r3
 800a958:	461a      	mov	r2, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	4413      	add	r3, r2
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	6812      	ldr	r2, [r2, #0]
 800a966:	4413      	add	r3, r2
 800a968:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a972:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	699a      	ldr	r2, [r3, #24]
 800a97a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a97e:	429a      	cmp	r2, r3
 800a980:	d307      	bcc.n	800a992 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	699a      	ldr	r2, [r3, #24]
 800a986:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a98a:	1ad2      	subs	r2, r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	619a      	str	r2, [r3, #24]
 800a990:	e002      	b.n	800a998 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f040 80c0 	bne.w	800ab22 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	785b      	ldrb	r3, [r3, #1]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d126      	bne.n	800a9f8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9be:	4413      	add	r3, r2
 800a9c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	00da      	lsls	r2, r3, #3
 800a9c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	e01a      	b.n	800aa2e <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d116      	bne.n	800aa2e <HAL_PCD_EP_DB_Transmit+0x4b0>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	667b      	str	r3, [r7, #100]	; 0x64
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	461a      	mov	r2, r3
 800aa12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa14:	4413      	add	r3, r2
 800aa16:	667b      	str	r3, [r7, #100]	; 0x64
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	00da      	lsls	r2, r3, #3
 800aa1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa20:	4413      	add	r3, r2
 800aa22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa26:	663b      	str	r3, [r7, #96]	; 0x60
 800aa28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	677b      	str	r3, [r7, #116]	; 0x74
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	785b      	ldrb	r3, [r3, #1]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d12b      	bne.n	800aa94 <HAL_PCD_EP_DB_Transmit+0x516>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa50:	4413      	add	r3, r2
 800aa52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	00da      	lsls	r2, r3, #3
 800aa5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa78:	801a      	strh	r2, [r3, #0]
 800aa7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa90:	801a      	strh	r2, [r3, #0]
 800aa92:	e017      	b.n	800aac4 <HAL_PCD_EP_DB_Transmit+0x546>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	785b      	ldrb	r3, [r3, #1]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d113      	bne.n	800aac4 <HAL_PCD_EP_DB_Transmit+0x546>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaaa:	4413      	add	r3, r2
 800aaac:	677b      	str	r3, [r7, #116]	; 0x74
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	00da      	lsls	r2, r3, #3
 800aab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aab6:	4413      	add	r3, r2
 800aab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aabc:	673b      	str	r3, [r7, #112]	; 0x70
 800aabe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aac0:	2200      	movs	r2, #0
 800aac2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	4619      	mov	r1, r3
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f00a fbcd 	bl	801526a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f040 811a 	bne.w	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	441a      	add	r2, r3
 800ab08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800ab0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	8013      	strh	r3, [r2, #0]
 800ab20:	e0f6      	b.n	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ab22:	88fb      	ldrh	r3, [r7, #6]
 800ab24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d121      	bne.n	800ab70 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	441a      	add	r2, r3
 800ab58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ab5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	f040 80ca 	bne.w	800ad10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	695a      	ldr	r2, [r3, #20]
 800ab80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ab84:	441a      	add	r2, r3
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	69da      	ldr	r2, [r3, #28]
 800ab8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ab92:	441a      	add	r2, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6a1a      	ldr	r2, [r3, #32]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d30b      	bcc.n	800abbc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abb4:	1ad2      	subs	r2, r2, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	621a      	str	r2, [r3, #32]
 800abba:	e017      	b.n	800abec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d108      	bne.n	800abd6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800abc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800abc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800abd4:	e00a      	b.n	800abec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2200      	movs	r2, #0
 800abe2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	657b      	str	r3, [r7, #84]	; 0x54
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d165      	bne.n	800acc6 <HAL_PCD_EP_DB_Transmit+0x748>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac0e:	4413      	add	r3, r2
 800ac10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	00da      	lsls	r2, r3, #3
 800ac18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac20:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac30:	801a      	strh	r2, [r3, #0]
 800ac32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac36:	2b3e      	cmp	r3, #62	; 0x3e
 800ac38:	d91d      	bls.n	800ac76 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800ac3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac3e:	095b      	lsrs	r3, r3, #5
 800ac40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac46:	f003 031f 	and.w	r3, r3, #31
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ac4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac50:	3b01      	subs	r3, #1
 800ac52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	029b      	lsls	r3, r3, #10
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	4313      	orrs	r3, r2
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac72:	801a      	strh	r2, [r3, #0]
 800ac74:	e041      	b.n	800acfa <HAL_PCD_EP_DB_Transmit+0x77c>
 800ac76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10a      	bne.n	800ac94 <HAL_PCD_EP_DB_Transmit+0x716>
 800ac7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac90:	801a      	strh	r2, [r3, #0]
 800ac92:	e032      	b.n	800acfa <HAL_PCD_EP_DB_Transmit+0x77c>
 800ac94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac98:	085b      	lsrs	r3, r3, #1
 800ac9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <HAL_PCD_EP_DB_Transmit+0x730>
 800aca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acaa:	3301      	adds	r3, #1
 800acac:	66bb      	str	r3, [r7, #104]	; 0x68
 800acae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	029b      	lsls	r3, r3, #10
 800acba:	b29b      	uxth	r3, r3
 800acbc:	4313      	orrs	r3, r2
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acc2:	801a      	strh	r2, [r3, #0]
 800acc4:	e019      	b.n	800acfa <HAL_PCD_EP_DB_Transmit+0x77c>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	785b      	ldrb	r3, [r3, #1]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d115      	bne.n	800acfa <HAL_PCD_EP_DB_Transmit+0x77c>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acdc:	4413      	add	r3, r2
 800acde:	657b      	str	r3, [r7, #84]	; 0x54
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	00da      	lsls	r2, r3, #3
 800ace6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace8:	4413      	add	r3, r2
 800acea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acee:	653b      	str	r3, [r7, #80]	; 0x50
 800acf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6818      	ldr	r0, [r3, #0]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	6959      	ldr	r1, [r3, #20]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	895a      	ldrh	r2, [r3, #10]
 800ad06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	f006 fc78 	bl	8011600 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad2a:	82bb      	strh	r3, [r7, #20]
 800ad2c:	8abb      	ldrh	r3, [r7, #20]
 800ad2e:	f083 0310 	eor.w	r3, r3, #16
 800ad32:	82bb      	strh	r3, [r7, #20]
 800ad34:	8abb      	ldrh	r3, [r7, #20]
 800ad36:	f083 0320 	eor.w	r3, r3, #32
 800ad3a:	82bb      	strh	r3, [r7, #20]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	441a      	add	r2, r3
 800ad4a:	8abb      	ldrh	r3, [r7, #20]
 800ad4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3790      	adds	r7, #144	; 0x90
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b087      	sub	sp, #28
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	607b      	str	r3, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	817b      	strh	r3, [r7, #10]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ad7c:	897b      	ldrh	r3, [r7, #10]
 800ad7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00b      	beq.n	800ada0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad88:	897b      	ldrh	r3, [r7, #10]
 800ad8a:	f003 0207 	and.w	r2, r3, #7
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	3310      	adds	r3, #16
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
 800ad9e:	e009      	b.n	800adb4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ada0:	897a      	ldrh	r2, [r7, #10]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	4413      	add	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800adb4:	893b      	ldrh	r3, [r7, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d107      	bne.n	800adca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2200      	movs	r2, #0
 800adbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	80da      	strh	r2, [r3, #6]
 800adc8:	e00b      	b.n	800ade2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2201      	movs	r2, #1
 800adce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	b29a      	uxth	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	0c1b      	lsrs	r3, r3, #16
 800addc:	b29a      	uxth	r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	371c      	adds	r7, #28
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f043 0301 	orr.w	r3, r3, #1
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	f043 0302 	orr.w	r3, r3, #2
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d141      	bne.n	800aed6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ae52:	4b4b      	ldr	r3, [pc, #300]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae5e:	d131      	bne.n	800aec4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae60:	4b47      	ldr	r3, [pc, #284]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae66:	4a46      	ldr	r2, [pc, #280]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae70:	4b43      	ldr	r3, [pc, #268]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae78:	4a41      	ldr	r2, [pc, #260]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ae80:	4b40      	ldr	r3, [pc, #256]	; (800af84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2232      	movs	r2, #50	; 0x32
 800ae86:	fb02 f303 	mul.w	r3, r2, r3
 800ae8a:	4a3f      	ldr	r2, [pc, #252]	; (800af88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ae8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae90:	0c9b      	lsrs	r3, r3, #18
 800ae92:	3301      	adds	r3, #1
 800ae94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae96:	e002      	b.n	800ae9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae9e:	4b38      	ldr	r3, [pc, #224]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeaa:	d102      	bne.n	800aeb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f2      	bne.n	800ae98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aeb2:	4b33      	ldr	r3, [pc, #204]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aebe:	d158      	bne.n	800af72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e057      	b.n	800af74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aec4:	4b2e      	ldr	r3, [pc, #184]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeca:	4a2d      	ldr	r2, [pc, #180]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aed4:	e04d      	b.n	800af72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aedc:	d141      	bne.n	800af62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aede:	4b28      	ldr	r3, [pc, #160]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeea:	d131      	bne.n	800af50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aeec:	4b24      	ldr	r3, [pc, #144]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aef2:	4a23      	ldr	r2, [pc, #140]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aefc:	4b20      	ldr	r3, [pc, #128]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af04:	4a1e      	ldr	r2, [pc, #120]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800af0c:	4b1d      	ldr	r3, [pc, #116]	; (800af84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2232      	movs	r2, #50	; 0x32
 800af12:	fb02 f303 	mul.w	r3, r2, r3
 800af16:	4a1c      	ldr	r2, [pc, #112]	; (800af88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af18:	fba2 2303 	umull	r2, r3, r2, r3
 800af1c:	0c9b      	lsrs	r3, r3, #18
 800af1e:	3301      	adds	r3, #1
 800af20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af22:	e002      	b.n	800af2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3b01      	subs	r3, #1
 800af28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af36:	d102      	bne.n	800af3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1f2      	bne.n	800af24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af3e:	4b10      	ldr	r3, [pc, #64]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af4a:	d112      	bne.n	800af72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e011      	b.n	800af74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af56:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800af60:	e007      	b.n	800af72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800af62:	4b07      	ldr	r3, [pc, #28]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af6a:	4a05      	ldr	r2, [pc, #20]	; (800af80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	40007000 	.word	0x40007000
 800af84:	200001bc 	.word	0x200001bc
 800af88:	431bde83 	.word	0x431bde83

0800af8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800af90:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	4a04      	ldr	r2, [pc, #16]	; (800afa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800af96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af9a:	6093      	str	r3, [r2, #8]
}
 800af9c:	bf00      	nop
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	40007000 	.word	0x40007000

0800afac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e2fe      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d075      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afca:	4b97      	ldr	r3, [pc, #604]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f003 030c 	and.w	r3, r3, #12
 800afd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afd4:	4b94      	ldr	r3, [pc, #592]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b0c      	cmp	r3, #12
 800afe2:	d102      	bne.n	800afea <HAL_RCC_OscConfig+0x3e>
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d002      	beq.n	800aff0 <HAL_RCC_OscConfig+0x44>
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b08      	cmp	r3, #8
 800afee:	d10b      	bne.n	800b008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aff0:	4b8d      	ldr	r3, [pc, #564]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d05b      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x108>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d157      	bne.n	800b0b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e2d9      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b010:	d106      	bne.n	800b020 <HAL_RCC_OscConfig+0x74>
 800b012:	4b85      	ldr	r3, [pc, #532]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a84      	ldr	r2, [pc, #528]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	e01d      	b.n	800b05c <HAL_RCC_OscConfig+0xb0>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b028:	d10c      	bne.n	800b044 <HAL_RCC_OscConfig+0x98>
 800b02a:	4b7f      	ldr	r3, [pc, #508]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a7e      	ldr	r2, [pc, #504]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b034:	6013      	str	r3, [r2, #0]
 800b036:	4b7c      	ldr	r3, [pc, #496]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a7b      	ldr	r2, [pc, #492]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	e00b      	b.n	800b05c <HAL_RCC_OscConfig+0xb0>
 800b044:	4b78      	ldr	r3, [pc, #480]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a77      	ldr	r2, [pc, #476]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b04a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	4b75      	ldr	r3, [pc, #468]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a74      	ldr	r2, [pc, #464]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b05a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d013      	beq.n	800b08c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b064:	f7fa fdd8 	bl	8005c18 <HAL_GetTick>
 800b068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b06a:	e008      	b.n	800b07e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b06c:	f7fa fdd4 	bl	8005c18 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	2b64      	cmp	r3, #100	; 0x64
 800b078:	d901      	bls.n	800b07e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e29e      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b07e:	4b6a      	ldr	r3, [pc, #424]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0f0      	beq.n	800b06c <HAL_RCC_OscConfig+0xc0>
 800b08a:	e014      	b.n	800b0b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b08c:	f7fa fdc4 	bl	8005c18 <HAL_GetTick>
 800b090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b092:	e008      	b.n	800b0a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b094:	f7fa fdc0 	bl	8005c18 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	2b64      	cmp	r3, #100	; 0x64
 800b0a0:	d901      	bls.n	800b0a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e28a      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0a6:	4b60      	ldr	r3, [pc, #384]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1f0      	bne.n	800b094 <HAL_RCC_OscConfig+0xe8>
 800b0b2:	e000      	b.n	800b0b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d075      	beq.n	800b1ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0c2:	4b59      	ldr	r3, [pc, #356]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 030c 	and.w	r3, r3, #12
 800b0ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0cc:	4b56      	ldr	r3, [pc, #344]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0303 	and.w	r3, r3, #3
 800b0d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	2b0c      	cmp	r3, #12
 800b0da:	d102      	bne.n	800b0e2 <HAL_RCC_OscConfig+0x136>
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d002      	beq.n	800b0e8 <HAL_RCC_OscConfig+0x13c>
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b04      	cmp	r3, #4
 800b0e6:	d11f      	bne.n	800b128 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0e8:	4b4f      	ldr	r3, [pc, #316]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d005      	beq.n	800b100 <HAL_RCC_OscConfig+0x154>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e25d      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b100:	4b49      	ldr	r3, [pc, #292]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	061b      	lsls	r3, r3, #24
 800b10e:	4946      	ldr	r1, [pc, #280]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b110:	4313      	orrs	r3, r2
 800b112:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b114:	4b45      	ldr	r3, [pc, #276]	; (800b22c <HAL_RCC_OscConfig+0x280>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fa fd31 	bl	8005b80 <HAL_InitTick>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d043      	beq.n	800b1ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e249      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d023      	beq.n	800b178 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b130:	4b3d      	ldr	r3, [pc, #244]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a3c      	ldr	r2, [pc, #240]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b13a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b13c:	f7fa fd6c 	bl	8005c18 <HAL_GetTick>
 800b140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b142:	e008      	b.n	800b156 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b144:	f7fa fd68 	bl	8005c18 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d901      	bls.n	800b156 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e232      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b156:	4b34      	ldr	r3, [pc, #208]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0f0      	beq.n	800b144 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b162:	4b31      	ldr	r3, [pc, #196]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	061b      	lsls	r3, r3, #24
 800b170:	492d      	ldr	r1, [pc, #180]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b172:	4313      	orrs	r3, r2
 800b174:	604b      	str	r3, [r1, #4]
 800b176:	e01a      	b.n	800b1ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b178:	4b2b      	ldr	r3, [pc, #172]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a2a      	ldr	r2, [pc, #168]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b17e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b184:	f7fa fd48 	bl	8005c18 <HAL_GetTick>
 800b188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b18a:	e008      	b.n	800b19e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b18c:	f7fa fd44 	bl	8005c18 <HAL_GetTick>
 800b190:	4602      	mov	r2, r0
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	2b02      	cmp	r3, #2
 800b198:	d901      	bls.n	800b19e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e20e      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b19e:	4b22      	ldr	r3, [pc, #136]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1f0      	bne.n	800b18c <HAL_RCC_OscConfig+0x1e0>
 800b1aa:	e000      	b.n	800b1ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0308 	and.w	r3, r3, #8
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d041      	beq.n	800b23e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d01c      	beq.n	800b1fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1c2:	4b19      	ldr	r3, [pc, #100]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1c8:	4a17      	ldr	r2, [pc, #92]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b1ca:	f043 0301 	orr.w	r3, r3, #1
 800b1ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1d2:	f7fa fd21 	bl	8005c18 <HAL_GetTick>
 800b1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1d8:	e008      	b.n	800b1ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1da:	f7fa fd1d 	bl	8005c18 <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d901      	bls.n	800b1ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e1e7      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1ec:	4b0e      	ldr	r3, [pc, #56]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0ef      	beq.n	800b1da <HAL_RCC_OscConfig+0x22e>
 800b1fa:	e020      	b.n	800b23e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b1fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b202:	4a09      	ldr	r2, [pc, #36]	; (800b228 <HAL_RCC_OscConfig+0x27c>)
 800b204:	f023 0301 	bic.w	r3, r3, #1
 800b208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b20c:	f7fa fd04 	bl	8005c18 <HAL_GetTick>
 800b210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b212:	e00d      	b.n	800b230 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b214:	f7fa fd00 	bl	8005c18 <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d906      	bls.n	800b230 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	e1ca      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
 800b226:	bf00      	nop
 800b228:	40021000 	.word	0x40021000
 800b22c:	200001d0 	.word	0x200001d0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b230:	4b8c      	ldr	r3, [pc, #560]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b236:	f003 0302 	and.w	r3, r3, #2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1ea      	bne.n	800b214 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0304 	and.w	r3, r3, #4
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 80a6 	beq.w	800b398 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b24c:	2300      	movs	r3, #0
 800b24e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b250:	4b84      	ldr	r3, [pc, #528]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <HAL_RCC_OscConfig+0x2b4>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e000      	b.n	800b262 <HAL_RCC_OscConfig+0x2b6>
 800b260:	2300      	movs	r3, #0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00d      	beq.n	800b282 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b266:	4b7f      	ldr	r3, [pc, #508]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26a:	4a7e      	ldr	r2, [pc, #504]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b26c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b270:	6593      	str	r3, [r2, #88]	; 0x58
 800b272:	4b7c      	ldr	r3, [pc, #496]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b27e:	2301      	movs	r3, #1
 800b280:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b282:	4b79      	ldr	r3, [pc, #484]	; (800b468 <HAL_RCC_OscConfig+0x4bc>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d118      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b28e:	4b76      	ldr	r3, [pc, #472]	; (800b468 <HAL_RCC_OscConfig+0x4bc>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a75      	ldr	r2, [pc, #468]	; (800b468 <HAL_RCC_OscConfig+0x4bc>)
 800b294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b29a:	f7fa fcbd 	bl	8005c18 <HAL_GetTick>
 800b29e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2a0:	e008      	b.n	800b2b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2a2:	f7fa fcb9 	bl	8005c18 <HAL_GetTick>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d901      	bls.n	800b2b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e183      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2b4:	4b6c      	ldr	r3, [pc, #432]	; (800b468 <HAL_RCC_OscConfig+0x4bc>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0f0      	beq.n	800b2a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d108      	bne.n	800b2da <HAL_RCC_OscConfig+0x32e>
 800b2c8:	4b66      	ldr	r3, [pc, #408]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ce:	4a65      	ldr	r2, [pc, #404]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b2d0:	f043 0301 	orr.w	r3, r3, #1
 800b2d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2d8:	e024      	b.n	800b324 <HAL_RCC_OscConfig+0x378>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	d110      	bne.n	800b304 <HAL_RCC_OscConfig+0x358>
 800b2e2:	4b60      	ldr	r3, [pc, #384]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e8:	4a5e      	ldr	r2, [pc, #376]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b2ea:	f043 0304 	orr.w	r3, r3, #4
 800b2ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2f2:	4b5c      	ldr	r3, [pc, #368]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f8:	4a5a      	ldr	r2, [pc, #360]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b302:	e00f      	b.n	800b324 <HAL_RCC_OscConfig+0x378>
 800b304:	4b57      	ldr	r3, [pc, #348]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b30a:	4a56      	ldr	r2, [pc, #344]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b30c:	f023 0301 	bic.w	r3, r3, #1
 800b310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b314:	4b53      	ldr	r3, [pc, #332]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b31a:	4a52      	ldr	r2, [pc, #328]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b31c:	f023 0304 	bic.w	r3, r3, #4
 800b320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d016      	beq.n	800b35a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b32c:	f7fa fc74 	bl	8005c18 <HAL_GetTick>
 800b330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b332:	e00a      	b.n	800b34a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b334:	f7fa fc70 	bl	8005c18 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b342:	4293      	cmp	r3, r2
 800b344:	d901      	bls.n	800b34a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e138      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b34a:	4b46      	ldr	r3, [pc, #280]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0ed      	beq.n	800b334 <HAL_RCC_OscConfig+0x388>
 800b358:	e015      	b.n	800b386 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b35a:	f7fa fc5d 	bl	8005c18 <HAL_GetTick>
 800b35e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b360:	e00a      	b.n	800b378 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b362:	f7fa fc59 	bl	8005c18 <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b370:	4293      	cmp	r3, r2
 800b372:	d901      	bls.n	800b378 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e121      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b378:	4b3a      	ldr	r3, [pc, #232]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b37e:	f003 0302 	and.w	r3, r3, #2
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1ed      	bne.n	800b362 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b386:	7ffb      	ldrb	r3, [r7, #31]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d105      	bne.n	800b398 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b38c:	4b35      	ldr	r3, [pc, #212]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b390:	4a34      	ldr	r2, [pc, #208]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b396:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0320 	and.w	r3, r3, #32
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d03c      	beq.n	800b41e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01c      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3ac:	4b2d      	ldr	r3, [pc, #180]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b3ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3b2:	4a2c      	ldr	r2, [pc, #176]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b3b4:	f043 0301 	orr.w	r3, r3, #1
 800b3b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3bc:	f7fa fc2c 	bl	8005c18 <HAL_GetTick>
 800b3c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b3c2:	e008      	b.n	800b3d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3c4:	f7fa fc28 	bl	8005c18 <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d901      	bls.n	800b3d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e0f2      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b3d6:	4b23      	ldr	r3, [pc, #140]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b3d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0ef      	beq.n	800b3c4 <HAL_RCC_OscConfig+0x418>
 800b3e4:	e01b      	b.n	800b41e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3e6:	4b1f      	ldr	r3, [pc, #124]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b3e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3ec:	4a1d      	ldr	r2, [pc, #116]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b3ee:	f023 0301 	bic.w	r3, r3, #1
 800b3f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f6:	f7fa fc0f 	bl	8005c18 <HAL_GetTick>
 800b3fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b3fc:	e008      	b.n	800b410 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3fe:	f7fa fc0b 	bl	8005c18 <HAL_GetTick>
 800b402:	4602      	mov	r2, r0
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d901      	bls.n	800b410 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e0d5      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b410:	4b14      	ldr	r3, [pc, #80]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1ef      	bne.n	800b3fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80c9 	beq.w	800b5ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b428:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	f003 030c 	and.w	r3, r3, #12
 800b430:	2b0c      	cmp	r3, #12
 800b432:	f000 8083 	beq.w	800b53c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d15e      	bne.n	800b4fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a08      	ldr	r2, [pc, #32]	; (800b464 <HAL_RCC_OscConfig+0x4b8>)
 800b444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44a:	f7fa fbe5 	bl	8005c18 <HAL_GetTick>
 800b44e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b450:	e00c      	b.n	800b46c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b452:	f7fa fbe1 	bl	8005c18 <HAL_GetTick>
 800b456:	4602      	mov	r2, r0
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d905      	bls.n	800b46c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e0ab      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
 800b464:	40021000 	.word	0x40021000
 800b468:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b46c:	4b55      	ldr	r3, [pc, #340]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1ec      	bne.n	800b452 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b478:	4b52      	ldr	r3, [pc, #328]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b47a:	68da      	ldr	r2, [r3, #12]
 800b47c:	4b52      	ldr	r3, [pc, #328]	; (800b5c8 <HAL_RCC_OscConfig+0x61c>)
 800b47e:	4013      	ands	r3, r2
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6a11      	ldr	r1, [r2, #32]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b488:	3a01      	subs	r2, #1
 800b48a:	0112      	lsls	r2, r2, #4
 800b48c:	4311      	orrs	r1, r2
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b492:	0212      	lsls	r2, r2, #8
 800b494:	4311      	orrs	r1, r2
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b49a:	0852      	lsrs	r2, r2, #1
 800b49c:	3a01      	subs	r2, #1
 800b49e:	0552      	lsls	r2, r2, #21
 800b4a0:	4311      	orrs	r1, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4a6:	0852      	lsrs	r2, r2, #1
 800b4a8:	3a01      	subs	r2, #1
 800b4aa:	0652      	lsls	r2, r2, #25
 800b4ac:	4311      	orrs	r1, r2
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b4b2:	06d2      	lsls	r2, r2, #27
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	4943      	ldr	r1, [pc, #268]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4bc:	4b41      	ldr	r3, [pc, #260]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a40      	ldr	r2, [pc, #256]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4c8:	4b3e      	ldr	r3, [pc, #248]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	4a3d      	ldr	r2, [pc, #244]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d4:	f7fa fba0 	bl	8005c18 <HAL_GetTick>
 800b4d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4da:	e008      	b.n	800b4ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4dc:	f7fa fb9c 	bl	8005c18 <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d901      	bls.n	800b4ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e066      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4ee:	4b35      	ldr	r3, [pc, #212]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d0f0      	beq.n	800b4dc <HAL_RCC_OscConfig+0x530>
 800b4fa:	e05e      	b.n	800b5ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4fc:	4b31      	ldr	r3, [pc, #196]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a30      	ldr	r2, [pc, #192]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b508:	f7fa fb86 	bl	8005c18 <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b50e:	e008      	b.n	800b522 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b510:	f7fa fb82 	bl	8005c18 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e04c      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b522:	4b28      	ldr	r3, [pc, #160]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1f0      	bne.n	800b510 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b52e:	4b25      	ldr	r3, [pc, #148]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	4924      	ldr	r1, [pc, #144]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b534:	4b25      	ldr	r3, [pc, #148]	; (800b5cc <HAL_RCC_OscConfig+0x620>)
 800b536:	4013      	ands	r3, r2
 800b538:	60cb      	str	r3, [r1, #12]
 800b53a:	e03e      	b.n	800b5ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e039      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b548:	4b1e      	ldr	r3, [pc, #120]	; (800b5c4 <HAL_RCC_OscConfig+0x618>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f003 0203 	and.w	r2, r3, #3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d12c      	bne.n	800b5b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	3b01      	subs	r3, #1
 800b568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d123      	bne.n	800b5b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d11b      	bne.n	800b5b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d113      	bne.n	800b5b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b598:	085b      	lsrs	r3, r3, #1
 800b59a:	3b01      	subs	r3, #1
 800b59c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d109      	bne.n	800b5b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ac:	085b      	lsrs	r3, r3, #1
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d001      	beq.n	800b5ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	40021000 	.word	0x40021000
 800b5c8:	019f800c 	.word	0x019f800c
 800b5cc:	feeefffc 	.word	0xfeeefffc

0800b5d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e11e      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5e8:	4b91      	ldr	r3, [pc, #580]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 030f 	and.w	r3, r3, #15
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d910      	bls.n	800b618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5f6:	4b8e      	ldr	r3, [pc, #568]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f023 020f 	bic.w	r2, r3, #15
 800b5fe:	498c      	ldr	r1, [pc, #560]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	4313      	orrs	r3, r2
 800b604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b606:	4b8a      	ldr	r3, [pc, #552]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 030f 	and.w	r3, r3, #15
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d001      	beq.n	800b618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	e106      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	d073      	beq.n	800b70c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d129      	bne.n	800b680 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b62c:	4b81      	ldr	r3, [pc, #516]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e0f4      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b63c:	f000 f99e 	bl	800b97c <RCC_GetSysClockFreqFromPLLSource>
 800b640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	4a7c      	ldr	r2, [pc, #496]	; (800b838 <HAL_RCC_ClockConfig+0x268>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d93f      	bls.n	800b6ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b64a:	4b7a      	ldr	r3, [pc, #488]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d033      	beq.n	800b6ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b666:	2b00      	cmp	r3, #0
 800b668:	d12f      	bne.n	800b6ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b66a:	4b72      	ldr	r3, [pc, #456]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b672:	4a70      	ldr	r2, [pc, #448]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b678:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b67a:	2380      	movs	r3, #128	; 0x80
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	e024      	b.n	800b6ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d107      	bne.n	800b698 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b688:	4b6a      	ldr	r3, [pc, #424]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d109      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e0c6      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b698:	4b66      	ldr	r3, [pc, #408]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e0be      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b6a8:	f000 f8ce 	bl	800b848 <HAL_RCC_GetSysClockFreq>
 800b6ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	4a61      	ldr	r2, [pc, #388]	; (800b838 <HAL_RCC_ClockConfig+0x268>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d909      	bls.n	800b6ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b6b6:	4b5f      	ldr	r3, [pc, #380]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6be:	4a5d      	ldr	r2, [pc, #372]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b6c6:	2380      	movs	r3, #128	; 0x80
 800b6c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b6ca:	4b5a      	ldr	r3, [pc, #360]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f023 0203 	bic.w	r2, r3, #3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	4957      	ldr	r1, [pc, #348]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6dc:	f7fa fa9c 	bl	8005c18 <HAL_GetTick>
 800b6e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6e2:	e00a      	b.n	800b6fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6e4:	f7fa fa98 	bl	8005c18 <HAL_GetTick>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d901      	bls.n	800b6fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e095      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6fa:	4b4e      	ldr	r3, [pc, #312]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f003 020c 	and.w	r2, r3, #12
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	429a      	cmp	r2, r3
 800b70a:	d1eb      	bne.n	800b6e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0302 	and.w	r3, r3, #2
 800b714:	2b00      	cmp	r3, #0
 800b716:	d023      	beq.n	800b760 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b724:	4b43      	ldr	r3, [pc, #268]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	4a42      	ldr	r2, [pc, #264]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b72a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b72e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0308 	and.w	r3, r3, #8
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b73c:	4b3d      	ldr	r3, [pc, #244]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b744:	4a3b      	ldr	r2, [pc, #236]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b74a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b74c:	4b39      	ldr	r3, [pc, #228]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	4936      	ldr	r1, [pc, #216]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	608b      	str	r3, [r1, #8]
 800b75e:	e008      	b.n	800b772 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b80      	cmp	r3, #128	; 0x80
 800b764:	d105      	bne.n	800b772 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b766:	4b33      	ldr	r3, [pc, #204]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	4a32      	ldr	r2, [pc, #200]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b76c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b770:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b772:	4b2f      	ldr	r3, [pc, #188]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 030f 	and.w	r3, r3, #15
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d21d      	bcs.n	800b7bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b780:	4b2b      	ldr	r3, [pc, #172]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f023 020f 	bic.w	r2, r3, #15
 800b788:	4929      	ldr	r1, [pc, #164]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b790:	f7fa fa42 	bl	8005c18 <HAL_GetTick>
 800b794:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b796:	e00a      	b.n	800b7ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b798:	f7fa fa3e 	bl	8005c18 <HAL_GetTick>
 800b79c:	4602      	mov	r2, r0
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d901      	bls.n	800b7ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e03b      	b.n	800b826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ae:	4b20      	ldr	r3, [pc, #128]	; (800b830 <HAL_RCC_ClockConfig+0x260>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 030f 	and.w	r3, r3, #15
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d1ed      	bne.n	800b798 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0304 	and.w	r3, r3, #4
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d008      	beq.n	800b7da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7c8:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	4917      	ldr	r1, [pc, #92]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0308 	and.w	r3, r3, #8
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b7e6:	4b13      	ldr	r3, [pc, #76]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	490f      	ldr	r1, [pc, #60]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b7fa:	f000 f825 	bl	800b848 <HAL_RCC_GetSysClockFreq>
 800b7fe:	4602      	mov	r2, r0
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <HAL_RCC_ClockConfig+0x264>)
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	091b      	lsrs	r3, r3, #4
 800b806:	f003 030f 	and.w	r3, r3, #15
 800b80a:	490c      	ldr	r1, [pc, #48]	; (800b83c <HAL_RCC_ClockConfig+0x26c>)
 800b80c:	5ccb      	ldrb	r3, [r1, r3]
 800b80e:	f003 031f 	and.w	r3, r3, #31
 800b812:	fa22 f303 	lsr.w	r3, r2, r3
 800b816:	4a0a      	ldr	r2, [pc, #40]	; (800b840 <HAL_RCC_ClockConfig+0x270>)
 800b818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b81a:	4b0a      	ldr	r3, [pc, #40]	; (800b844 <HAL_RCC_ClockConfig+0x274>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fa f9ae 	bl	8005b80 <HAL_InitTick>
 800b824:	4603      	mov	r3, r0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	40022000 	.word	0x40022000
 800b834:	40021000 	.word	0x40021000
 800b838:	04c4b400 	.word	0x04c4b400
 800b83c:	0801893c 	.word	0x0801893c
 800b840:	200001bc 	.word	0x200001bc
 800b844:	200001d0 	.word	0x200001d0

0800b848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b84e:	4b2c      	ldr	r3, [pc, #176]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f003 030c 	and.w	r3, r3, #12
 800b856:	2b04      	cmp	r3, #4
 800b858:	d102      	bne.n	800b860 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b85a:	4b2a      	ldr	r3, [pc, #168]	; (800b904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b85c:	613b      	str	r3, [r7, #16]
 800b85e:	e047      	b.n	800b8f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b860:	4b27      	ldr	r3, [pc, #156]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f003 030c 	and.w	r3, r3, #12
 800b868:	2b08      	cmp	r3, #8
 800b86a:	d102      	bne.n	800b872 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b86c:	4b26      	ldr	r3, [pc, #152]	; (800b908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b86e:	613b      	str	r3, [r7, #16]
 800b870:	e03e      	b.n	800b8f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b872:	4b23      	ldr	r3, [pc, #140]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 030c 	and.w	r3, r3, #12
 800b87a:	2b0c      	cmp	r3, #12
 800b87c:	d136      	bne.n	800b8ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b87e:	4b20      	ldr	r3, [pc, #128]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f003 0303 	and.w	r3, r3, #3
 800b886:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b888:	4b1d      	ldr	r3, [pc, #116]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	091b      	lsrs	r3, r3, #4
 800b88e:	f003 030f 	and.w	r3, r3, #15
 800b892:	3301      	adds	r3, #1
 800b894:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d10c      	bne.n	800b8b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b89c:	4a1a      	ldr	r2, [pc, #104]	; (800b908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a4:	4a16      	ldr	r2, [pc, #88]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8a6:	68d2      	ldr	r2, [r2, #12]
 800b8a8:	0a12      	lsrs	r2, r2, #8
 800b8aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8ae:	fb02 f303 	mul.w	r3, r2, r3
 800b8b2:	617b      	str	r3, [r7, #20]
      break;
 800b8b4:	e00c      	b.n	800b8d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b8b6:	4a13      	ldr	r2, [pc, #76]	; (800b904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8be:	4a10      	ldr	r2, [pc, #64]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8c0:	68d2      	ldr	r2, [r2, #12]
 800b8c2:	0a12      	lsrs	r2, r2, #8
 800b8c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8c8:	fb02 f303 	mul.w	r3, r2, r3
 800b8cc:	617b      	str	r3, [r7, #20]
      break;
 800b8ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	0e5b      	lsrs	r3, r3, #25
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	3301      	adds	r3, #1
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e8:	613b      	str	r3, [r7, #16]
 800b8ea:	e001      	b.n	800b8f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b8f0:	693b      	ldr	r3, [r7, #16]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	371c      	adds	r7, #28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	40021000 	.word	0x40021000
 800b904:	00f42400 	.word	0x00f42400
 800b908:	007a1200 	.word	0x007a1200

0800b90c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b910:	4b03      	ldr	r3, [pc, #12]	; (800b920 <HAL_RCC_GetHCLKFreq+0x14>)
 800b912:	681b      	ldr	r3, [r3, #0]
}
 800b914:	4618      	mov	r0, r3
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	200001bc 	.word	0x200001bc

0800b924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b928:	f7ff fff0 	bl	800b90c <HAL_RCC_GetHCLKFreq>
 800b92c:	4602      	mov	r2, r0
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	0a1b      	lsrs	r3, r3, #8
 800b934:	f003 0307 	and.w	r3, r3, #7
 800b938:	4904      	ldr	r1, [pc, #16]	; (800b94c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b93a:	5ccb      	ldrb	r3, [r1, r3]
 800b93c:	f003 031f 	and.w	r3, r3, #31
 800b940:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b944:	4618      	mov	r0, r3
 800b946:	bd80      	pop	{r7, pc}
 800b948:	40021000 	.word	0x40021000
 800b94c:	0801894c 	.word	0x0801894c

0800b950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b954:	f7ff ffda 	bl	800b90c <HAL_RCC_GetHCLKFreq>
 800b958:	4602      	mov	r2, r0
 800b95a:	4b06      	ldr	r3, [pc, #24]	; (800b974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	0adb      	lsrs	r3, r3, #11
 800b960:	f003 0307 	and.w	r3, r3, #7
 800b964:	4904      	ldr	r1, [pc, #16]	; (800b978 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b966:	5ccb      	ldrb	r3, [r1, r3]
 800b968:	f003 031f 	and.w	r3, r3, #31
 800b96c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b970:	4618      	mov	r0, r3
 800b972:	bd80      	pop	{r7, pc}
 800b974:	40021000 	.word	0x40021000
 800b978:	0801894c 	.word	0x0801894c

0800b97c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b982:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b98c:	4b1b      	ldr	r3, [pc, #108]	; (800b9fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	091b      	lsrs	r3, r3, #4
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	3301      	adds	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d10c      	bne.n	800b9ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9a0:	4a17      	ldr	r2, [pc, #92]	; (800ba00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a8:	4a14      	ldr	r2, [pc, #80]	; (800b9fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9aa:	68d2      	ldr	r2, [r2, #12]
 800b9ac:	0a12      	lsrs	r2, r2, #8
 800b9ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9b2:	fb02 f303 	mul.w	r3, r2, r3
 800b9b6:	617b      	str	r3, [r7, #20]
    break;
 800b9b8:	e00c      	b.n	800b9d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9ba:	4a12      	ldr	r2, [pc, #72]	; (800ba04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c2:	4a0e      	ldr	r2, [pc, #56]	; (800b9fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9c4:	68d2      	ldr	r2, [r2, #12]
 800b9c6:	0a12      	lsrs	r2, r2, #8
 800b9c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9cc:	fb02 f303 	mul.w	r3, r2, r3
 800b9d0:	617b      	str	r3, [r7, #20]
    break;
 800b9d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b9d4:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	0e5b      	lsrs	r3, r3, #25
 800b9da:	f003 0303 	and.w	r3, r3, #3
 800b9de:	3301      	adds	r3, #1
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b9ee:	687b      	ldr	r3, [r7, #4]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	40021000 	.word	0x40021000
 800ba00:	007a1200 	.word	0x007a1200
 800ba04:	00f42400 	.word	0x00f42400

0800ba08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba10:	2300      	movs	r3, #0
 800ba12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba14:	2300      	movs	r3, #0
 800ba16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 8098 	beq.w	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba26:	2300      	movs	r3, #0
 800ba28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba2a:	4b43      	ldr	r3, [pc, #268]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10d      	bne.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba36:	4b40      	ldr	r3, [pc, #256]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3a:	4a3f      	ldr	r2, [pc, #252]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba40:	6593      	str	r3, [r2, #88]	; 0x58
 800ba42:	4b3d      	ldr	r3, [pc, #244]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba4a:	60bb      	str	r3, [r7, #8]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba52:	4b3a      	ldr	r3, [pc, #232]	; (800bb3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a39      	ldr	r2, [pc, #228]	; (800bb3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba5e:	f7fa f8db 	bl	8005c18 <HAL_GetTick>
 800ba62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba64:	e009      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba66:	f7fa f8d7 	bl	8005c18 <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d902      	bls.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	74fb      	strb	r3, [r7, #19]
        break;
 800ba78:	e005      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba7a:	4b30      	ldr	r3, [pc, #192]	; (800bb3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0ef      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ba86:	7cfb      	ldrb	r3, [r7, #19]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d159      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba8c:	4b2a      	ldr	r3, [pc, #168]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d01e      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d019      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800baa8:	4b23      	ldr	r3, [pc, #140]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bab4:	4b20      	ldr	r3, [pc, #128]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baba:	4a1f      	ldr	r2, [pc, #124]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800babc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bac4:	4b1c      	ldr	r3, [pc, #112]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baca:	4a1b      	ldr	r2, [pc, #108]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bacc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bad4:	4a18      	ldr	r2, [pc, #96]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d016      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bae6:	f7fa f897 	bl	8005c18 <HAL_GetTick>
 800baea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baec:	e00b      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baee:	f7fa f893 	bl	8005c18 <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d902      	bls.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bb00:	2303      	movs	r3, #3
 800bb02:	74fb      	strb	r3, [r7, #19]
            break;
 800bb04:	e006      	b.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d0ec      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bb14:	7cfb      	ldrb	r3, [r7, #19]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10b      	bne.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb1a:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb28:	4903      	ldr	r1, [pc, #12]	; (800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb30:	e008      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb32:	7cfb      	ldrb	r3, [r7, #19]
 800bb34:	74bb      	strb	r3, [r7, #18]
 800bb36:	e005      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bb38:	40021000 	.word	0x40021000
 800bb3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb40:	7cfb      	ldrb	r3, [r7, #19]
 800bb42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb44:	7c7b      	ldrb	r3, [r7, #17]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d105      	bne.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb4a:	4ba6      	ldr	r3, [pc, #664]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4e:	4aa5      	ldr	r2, [pc, #660]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bb50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00a      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb62:	4ba0      	ldr	r3, [pc, #640]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bb64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb68:	f023 0203 	bic.w	r2, r3, #3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	499c      	ldr	r1, [pc, #624]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00a      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb84:	4b97      	ldr	r3, [pc, #604]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bb86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8a:	f023 020c 	bic.w	r2, r3, #12
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	4994      	ldr	r1, [pc, #592]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0304 	and.w	r3, r3, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bba6:	4b8f      	ldr	r3, [pc, #572]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	498b      	ldr	r1, [pc, #556]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0308 	and.w	r3, r3, #8
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00a      	beq.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bbc8:	4b86      	ldr	r3, [pc, #536]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bbca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	4983      	ldr	r1, [pc, #524]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0320 	and.w	r3, r3, #32
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00a      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bbea:	4b7e      	ldr	r3, [pc, #504]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bbec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	497a      	ldr	r1, [pc, #488]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc0c:	4b75      	ldr	r3, [pc, #468]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	4972      	ldr	r1, [pc, #456]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00a      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bc2e:	4b6d      	ldr	r3, [pc, #436]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	4969      	ldr	r1, [pc, #420]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00a      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc50:	4b64      	ldr	r3, [pc, #400]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	4961      	ldr	r1, [pc, #388]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc60:	4313      	orrs	r3, r2
 800bc62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc72:	4b5c      	ldr	r3, [pc, #368]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	4958      	ldr	r1, [pc, #352]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d015      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc94:	4b53      	ldr	r3, [pc, #332]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	4950      	ldr	r1, [pc, #320]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb2:	d105      	bne.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcb4:	4b4b      	ldr	r3, [pc, #300]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	4a4a      	ldr	r2, [pc, #296]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d015      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bccc:	4b45      	ldr	r3, [pc, #276]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcda:	4942      	ldr	r1, [pc, #264]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcea:	d105      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcec:	4b3d      	ldr	r3, [pc, #244]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	4a3c      	ldr	r2, [pc, #240]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bcf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcf6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d015      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd04:	4b37      	ldr	r3, [pc, #220]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd12:	4934      	ldr	r1, [pc, #208]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd22:	d105      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd24:	4b2f      	ldr	r3, [pc, #188]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	4a2e      	ldr	r2, [pc, #184]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d015      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd3c:	4b29      	ldr	r3, [pc, #164]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4a:	4926      	ldr	r1, [pc, #152]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd5a:	d105      	bne.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd5c:	4b21      	ldr	r3, [pc, #132]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	4a20      	ldr	r2, [pc, #128]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d015      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd74:	4b1b      	ldr	r3, [pc, #108]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	4918      	ldr	r1, [pc, #96]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd92:	d105      	bne.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd94:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	4a12      	ldr	r2, [pc, #72]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bd9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d015      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bdac:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	490a      	ldr	r1, [pc, #40]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdca:	d105      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bdcc:	4b05      	ldr	r3, [pc, #20]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	4a04      	ldr	r2, [pc, #16]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800bdd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bdd8:	7cbb      	ldrb	r3, [r7, #18]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	40021000 	.word	0x40021000

0800bde8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e09d      	b.n	800bf36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d108      	bne.n	800be14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be0a:	d009      	beq.n	800be20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	61da      	str	r2, [r3, #28]
 800be12:	e005      	b.n	800be20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7f8 fe68 	bl	8004b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be60:	d902      	bls.n	800be68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e002      	b.n	800be6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800be68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800be76:	d007      	beq.n	800be88 <HAL_SPI_Init+0xa0>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be80:	d002      	beq.n	800be88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800be98:	431a      	orrs	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	431a      	orrs	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	431a      	orrs	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800beb6:	431a      	orrs	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bec0:	431a      	orrs	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beca:	ea42 0103 	orr.w	r1, r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	0c1b      	lsrs	r3, r3, #16
 800bee4:	f003 0204 	and.w	r2, r3, #4
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	f003 0310 	and.w	r3, r3, #16
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef6:	f003 0308 	and.w	r3, r3, #8
 800befa:	431a      	orrs	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bf04:	ea42 0103 	orr.w	r1, r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	430a      	orrs	r2, r1
 800bf14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	69da      	ldr	r2, [r3, #28]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b088      	sub	sp, #32
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	603b      	str	r3, [r7, #0]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d101      	bne.n	800bf60 <HAL_SPI_Transmit+0x22>
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	e15f      	b.n	800c220 <HAL_SPI_Transmit+0x2e2>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf68:	f7f9 fe56 	bl	8005c18 <HAL_GetTick>
 800bf6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bf6e:	88fb      	ldrh	r3, [r7, #6]
 800bf70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d002      	beq.n	800bf84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bf7e:	2302      	movs	r3, #2
 800bf80:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf82:	e148      	b.n	800c216 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <HAL_SPI_Transmit+0x52>
 800bf8a:	88fb      	ldrh	r3, [r7, #6]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf94:	e13f      	b.n	800c216 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2203      	movs	r2, #3
 800bf9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	88fa      	ldrh	r2, [r7, #6]
 800bfae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfe0:	d10f      	bne.n	800c002 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00c:	2b40      	cmp	r3, #64	; 0x40
 800c00e:	d007      	beq.n	800c020 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c01e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c028:	d94f      	bls.n	800c0ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d002      	beq.n	800c038 <HAL_SPI_Transmit+0xfa>
 800c032:	8afb      	ldrh	r3, [r7, #22]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d142      	bne.n	800c0be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03c:	881a      	ldrh	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	1c9a      	adds	r2, r3, #2
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c05c:	e02f      	b.n	800c0be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d112      	bne.n	800c092 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	881a      	ldrh	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07c:	1c9a      	adds	r2, r3, #2
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c086:	b29b      	uxth	r3, r3
 800c088:	3b01      	subs	r3, #1
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c090:	e015      	b.n	800c0be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c092:	f7f9 fdc1 	bl	8005c18 <HAL_GetTick>
 800c096:	4602      	mov	r2, r0
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d803      	bhi.n	800c0aa <HAL_SPI_Transmit+0x16c>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a8:	d102      	bne.n	800c0b0 <HAL_SPI_Transmit+0x172>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c0bc:	e0ab      	b.n	800c216 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1ca      	bne.n	800c05e <HAL_SPI_Transmit+0x120>
 800c0c8:	e080      	b.n	800c1cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d002      	beq.n	800c0d8 <HAL_SPI_Transmit+0x19a>
 800c0d2:	8afb      	ldrh	r3, [r7, #22]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d174      	bne.n	800c1c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d912      	bls.n	800c108 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e6:	881a      	ldrh	r2, [r3, #0]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f2:	1c9a      	adds	r2, r3, #2
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b02      	subs	r3, #2
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c106:	e05c      	b.n	800c1c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	330c      	adds	r3, #12
 800c112:	7812      	ldrb	r2, [r2, #0]
 800c114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c124:	b29b      	uxth	r3, r3
 800c126:	3b01      	subs	r3, #1
 800c128:	b29a      	uxth	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c12e:	e048      	b.n	800c1c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d12b      	bne.n	800c196 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c142:	b29b      	uxth	r3, r3
 800c144:	2b01      	cmp	r3, #1
 800c146:	d912      	bls.n	800c16e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14c:	881a      	ldrh	r2, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c158:	1c9a      	adds	r2, r3, #2
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b02      	subs	r3, #2
 800c166:	b29a      	uxth	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c16c:	e029      	b.n	800c1c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	330c      	adds	r3, #12
 800c178:	7812      	ldrb	r2, [r2, #0]
 800c17a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	3b01      	subs	r3, #1
 800c18e:	b29a      	uxth	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c194:	e015      	b.n	800c1c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c196:	f7f9 fd3f 	bl	8005c18 <HAL_GetTick>
 800c19a:	4602      	mov	r2, r0
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d803      	bhi.n	800c1ae <HAL_SPI_Transmit+0x270>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ac:	d102      	bne.n	800c1b4 <HAL_SPI_Transmit+0x276>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d106      	bne.n	800c1c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c1c0:	e029      	b.n	800c216 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1b1      	bne.n	800c130 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 fad7 	bl	800c784 <SPI_EndRxTxTransaction>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10a      	bne.n	800c200 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	613b      	str	r3, [r7, #16]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	613b      	str	r3, [r7, #16]
 800c1fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	77fb      	strb	r3, [r7, #31]
 800c20c:	e003      	b.n	800c216 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c21e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3720      	adds	r7, #32
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	4613      	mov	r3, r2
 800c234:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c240:	2b01      	cmp	r3, #1
 800c242:	d101      	bne.n	800c248 <HAL_SPI_Transmit_DMA+0x20>
 800c244:	2302      	movs	r3, #2
 800c246:	e0d4      	b.n	800c3f2 <HAL_SPI_Transmit_DMA+0x1ca>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d002      	beq.n	800c262 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c25c:	2302      	movs	r3, #2
 800c25e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c260:	e0c2      	b.n	800c3e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <HAL_SPI_Transmit_DMA+0x46>
 800c268:	88fb      	ldrh	r3, [r7, #6]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d102      	bne.n	800c274 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c272:	e0b9      	b.n	800c3e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2203      	movs	r2, #3
 800c278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	88fa      	ldrh	r2, [r7, #6]
 800c28c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	88fa      	ldrh	r2, [r7, #6]
 800c292:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2be:	d10f      	bne.n	800c2e0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e4:	4a45      	ldr	r2, [pc, #276]	; (800c3fc <HAL_SPI_Transmit_DMA+0x1d4>)
 800c2e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ec:	4a44      	ldr	r2, [pc, #272]	; (800c400 <HAL_SPI_Transmit_DMA+0x1d8>)
 800c2ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f4:	4a43      	ldr	r2, [pc, #268]	; (800c404 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c2f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c30e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c318:	d82d      	bhi.n	800c376 <HAL_SPI_Transmit_DMA+0x14e>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c324:	d127      	bne.n	800c376 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10f      	bne.n	800c354 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c342:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c348:	b29b      	uxth	r3, r3
 800c34a:	085b      	lsrs	r3, r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c352:	e010      	b.n	800c376 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c362:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c368:	b29b      	uxth	r3, r3
 800c36a:	085b      	lsrs	r3, r3, #1
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	3301      	adds	r3, #1
 800c370:	b29a      	uxth	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37e:	4619      	mov	r1, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	330c      	adds	r3, #12
 800c386:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c38c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c38e:	f7fc f87b 	bl	8008488 <HAL_DMA_Start_IT>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d008      	beq.n	800c3aa <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c39c:	f043 0210 	orr.w	r2, r3, #16
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c3a8:	e01e      	b.n	800c3e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b4:	2b40      	cmp	r3, #64	; 0x40
 800c3b6:	d007      	beq.n	800c3c8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3c6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f042 0220 	orr.w	r2, r2, #32
 800c3d6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0202 	orr.w	r2, r2, #2
 800c3e6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0800c4eb 	.word	0x0800c4eb
 800c400:	0800c445 	.word	0x0800c445
 800c404:	0800c507 	.word	0x0800c507

0800c408 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c450:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c452:	f7f9 fbe1 	bl	8005c18 <HAL_GetTick>
 800c456:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 0320 	and.w	r3, r3, #32
 800c462:	2b20      	cmp	r3, #32
 800c464:	d03b      	beq.n	800c4de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f022 0220 	bic.w	r2, r2, #32
 800c474:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f022 0202 	bic.w	r2, r2, #2
 800c484:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	2164      	movs	r1, #100	; 0x64
 800c48a:	6978      	ldr	r0, [r7, #20]
 800c48c:	f000 f97a 	bl	800c784 <SPI_EndRxTxTransaction>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d005      	beq.n	800c4a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c49a:	f043 0220 	orr.w	r2, r3, #32
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10a      	bne.n	800c4c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	60fb      	str	r3, [r7, #12]
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c4d6:	6978      	ldr	r0, [r7, #20]
 800c4d8:	f7ff ffaa 	bl	800c430 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c4dc:	e002      	b.n	800c4e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c4de:	6978      	ldr	r0, [r7, #20]
 800c4e0:	f7ff ff92 	bl	800c408 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7ff ff8f 	bl	800c41c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c512:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	685a      	ldr	r2, [r3, #4]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f022 0203 	bic.w	r2, r2, #3
 800c522:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c528:	f043 0210 	orr.w	r2, r3, #16
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f7ff ff79 	bl	800c430 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
	...

0800c548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	4613      	mov	r3, r2
 800c556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c558:	f7f9 fb5e 	bl	8005c18 <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c560:	1a9b      	subs	r3, r3, r2
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	4413      	add	r3, r2
 800c566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c568:	f7f9 fb56 	bl	8005c18 <HAL_GetTick>
 800c56c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c56e:	4b39      	ldr	r3, [pc, #228]	; (800c654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	015b      	lsls	r3, r3, #5
 800c574:	0d1b      	lsrs	r3, r3, #20
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	fb02 f303 	mul.w	r3, r2, r3
 800c57c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c57e:	e054      	b.n	800c62a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c586:	d050      	beq.n	800c62a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c588:	f7f9 fb46 	bl	8005c18 <HAL_GetTick>
 800c58c:	4602      	mov	r2, r0
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	69fa      	ldr	r2, [r7, #28]
 800c594:	429a      	cmp	r2, r3
 800c596:	d902      	bls.n	800c59e <SPI_WaitFlagStateUntilTimeout+0x56>
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d13d      	bne.n	800c61a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5b6:	d111      	bne.n	800c5dc <SPI_WaitFlagStateUntilTimeout+0x94>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5c0:	d004      	beq.n	800c5cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ca:	d107      	bne.n	800c5dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5e4:	d10f      	bne.n	800c606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e017      	b.n	800c64a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	3b01      	subs	r3, #1
 800c628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	4013      	ands	r3, r2
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	429a      	cmp	r2, r3
 800c638:	bf0c      	ite	eq
 800c63a:	2301      	moveq	r3, #1
 800c63c:	2300      	movne	r3, #0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	429a      	cmp	r2, r3
 800c646:	d19b      	bne.n	800c580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3720      	adds	r7, #32
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	200001bc 	.word	0x200001bc

0800c658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c66a:	f7f9 fad5 	bl	8005c18 <HAL_GetTick>
 800c66e:	4602      	mov	r2, r0
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	1a9b      	subs	r3, r3, r2
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	4413      	add	r3, r2
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c67a:	f7f9 facd 	bl	8005c18 <HAL_GetTick>
 800c67e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	330c      	adds	r3, #12
 800c686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c688:	4b3d      	ldr	r3, [pc, #244]	; (800c780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	00da      	lsls	r2, r3, #3
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	0d1b      	lsrs	r3, r3, #20
 800c698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69a:	fb02 f303 	mul.w	r3, r2, r3
 800c69e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c6a0:	e060      	b.n	800c764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c6a8:	d107      	bne.n	800c6ba <SPI_WaitFifoStateUntilTimeout+0x62>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d104      	bne.n	800c6ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c0:	d050      	beq.n	800c764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c6c2:	f7f9 faa9 	bl	8005c18 <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d902      	bls.n	800c6d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d13d      	bne.n	800c754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6f0:	d111      	bne.n	800c716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6fa:	d004      	beq.n	800c706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c704:	d107      	bne.n	800c716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c71e:	d10f      	bne.n	800c740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c73e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e010      	b.n	800c776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	3b01      	subs	r3, #1
 800c762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	4013      	ands	r3, r2
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d196      	bne.n	800c6a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3728      	adds	r7, #40	; 0x28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	200001bc 	.word	0x200001bc

0800c784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af02      	add	r7, sp, #8
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	2200      	movs	r2, #0
 800c798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff ff5b 	bl	800c658 <SPI_WaitFifoStateUntilTimeout>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d007      	beq.n	800c7b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ac:	f043 0220 	orr.w	r2, r3, #32
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e027      	b.n	800c808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	2180      	movs	r1, #128	; 0x80
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff fec0 	bl	800c548 <SPI_WaitFlagStateUntilTimeout>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d007      	beq.n	800c7de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7d2:	f043 0220 	orr.w	r2, r3, #32
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e014      	b.n	800c808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f7ff ff34 	bl	800c658 <SPI_WaitFifoStateUntilTimeout>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d007      	beq.n	800c806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7fa:	f043 0220 	orr.w	r2, r3, #32
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e000      	b.n	800c808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e049      	b.n	800c8b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d106      	bne.n	800c83c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7f8 fa94 	bl	8004d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2202      	movs	r2, #2
 800c840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3304      	adds	r3, #4
 800c84c:	4619      	mov	r1, r3
 800c84e:	4610      	mov	r0, r2
 800c850:	f000 ff72 	bl	800d738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d001      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e04a      	b.n	800c96e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2202      	movs	r2, #2
 800c8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68da      	ldr	r2, [r3, #12]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f042 0201 	orr.w	r2, r2, #1
 800c8ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a21      	ldr	r2, [pc, #132]	; (800c97c <HAL_TIM_Base_Start_IT+0xbc>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d018      	beq.n	800c92c <HAL_TIM_Base_Start_IT+0x6c>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c902:	d013      	beq.n	800c92c <HAL_TIM_Base_Start_IT+0x6c>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a1d      	ldr	r2, [pc, #116]	; (800c980 <HAL_TIM_Base_Start_IT+0xc0>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00e      	beq.n	800c92c <HAL_TIM_Base_Start_IT+0x6c>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a1c      	ldr	r2, [pc, #112]	; (800c984 <HAL_TIM_Base_Start_IT+0xc4>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d009      	beq.n	800c92c <HAL_TIM_Base_Start_IT+0x6c>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a1a      	ldr	r2, [pc, #104]	; (800c988 <HAL_TIM_Base_Start_IT+0xc8>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d004      	beq.n	800c92c <HAL_TIM_Base_Start_IT+0x6c>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a19      	ldr	r2, [pc, #100]	; (800c98c <HAL_TIM_Base_Start_IT+0xcc>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d115      	bne.n	800c958 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	689a      	ldr	r2, [r3, #8]
 800c932:	4b17      	ldr	r3, [pc, #92]	; (800c990 <HAL_TIM_Base_Start_IT+0xd0>)
 800c934:	4013      	ands	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b06      	cmp	r3, #6
 800c93c:	d015      	beq.n	800c96a <HAL_TIM_Base_Start_IT+0xaa>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c944:	d011      	beq.n	800c96a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f042 0201 	orr.w	r2, r2, #1
 800c954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c956:	e008      	b.n	800c96a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f042 0201 	orr.w	r2, r2, #1
 800c966:	601a      	str	r2, [r3, #0]
 800c968:	e000      	b.n	800c96c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c96a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	40012c00 	.word	0x40012c00
 800c980:	40000400 	.word	0x40000400
 800c984:	40000800 	.word	0x40000800
 800c988:	40013400 	.word	0x40013400
 800c98c:	40014000 	.word	0x40014000
 800c990:	00010007 	.word	0x00010007

0800c994 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68da      	ldr	r2, [r3, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f022 0201 	bic.w	r2, r2, #1
 800c9aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6a1a      	ldr	r2, [r3, #32]
 800c9b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10f      	bne.n	800c9dc <HAL_TIM_Base_Stop_IT+0x48>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	f244 4344 	movw	r3, #17476	; 0x4444
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d107      	bne.n	800c9dc <HAL_TIM_Base_Stop_IT+0x48>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f022 0201 	bic.w	r2, r2, #1
 800c9da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e049      	b.n	800ca98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d106      	bne.n	800ca1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7f8 f8eb 	bl	8004bf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2202      	movs	r2, #2
 800ca22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4619      	mov	r1, r3
 800ca30:	4610      	mov	r0, r2
 800ca32:	f000 fe81 	bl	800d738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d109      	bne.n	800cac8 <HAL_TIM_PWM_Start_IT+0x28>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	bf14      	ite	ne
 800cac0:	2301      	movne	r3, #1
 800cac2:	2300      	moveq	r3, #0
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	e03c      	b.n	800cb42 <HAL_TIM_PWM_Start_IT+0xa2>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2b04      	cmp	r3, #4
 800cacc:	d109      	bne.n	800cae2 <HAL_TIM_PWM_Start_IT+0x42>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	bf14      	ite	ne
 800cada:	2301      	movne	r3, #1
 800cadc:	2300      	moveq	r3, #0
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	e02f      	b.n	800cb42 <HAL_TIM_PWM_Start_IT+0xa2>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b08      	cmp	r3, #8
 800cae6:	d109      	bne.n	800cafc <HAL_TIM_PWM_Start_IT+0x5c>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	bf14      	ite	ne
 800caf4:	2301      	movne	r3, #1
 800caf6:	2300      	moveq	r3, #0
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	e022      	b.n	800cb42 <HAL_TIM_PWM_Start_IT+0xa2>
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2b0c      	cmp	r3, #12
 800cb00:	d109      	bne.n	800cb16 <HAL_TIM_PWM_Start_IT+0x76>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	bf14      	ite	ne
 800cb0e:	2301      	movne	r3, #1
 800cb10:	2300      	moveq	r3, #0
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	e015      	b.n	800cb42 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2b10      	cmp	r3, #16
 800cb1a:	d109      	bne.n	800cb30 <HAL_TIM_PWM_Start_IT+0x90>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	bf14      	ite	ne
 800cb28:	2301      	movne	r3, #1
 800cb2a:	2300      	moveq	r3, #0
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	e008      	b.n	800cb42 <HAL_TIM_PWM_Start_IT+0xa2>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	bf14      	ite	ne
 800cb3c:	2301      	movne	r3, #1
 800cb3e:	2300      	moveq	r3, #0
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e0e2      	b.n	800cd10 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d104      	bne.n	800cb5a <HAL_TIM_PWM_Start_IT+0xba>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2202      	movs	r2, #2
 800cb54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb58:	e023      	b.n	800cba2 <HAL_TIM_PWM_Start_IT+0x102>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b04      	cmp	r3, #4
 800cb5e:	d104      	bne.n	800cb6a <HAL_TIM_PWM_Start_IT+0xca>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2202      	movs	r2, #2
 800cb64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb68:	e01b      	b.n	800cba2 <HAL_TIM_PWM_Start_IT+0x102>
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b08      	cmp	r3, #8
 800cb6e:	d104      	bne.n	800cb7a <HAL_TIM_PWM_Start_IT+0xda>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb78:	e013      	b.n	800cba2 <HAL_TIM_PWM_Start_IT+0x102>
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b0c      	cmp	r3, #12
 800cb7e:	d104      	bne.n	800cb8a <HAL_TIM_PWM_Start_IT+0xea>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb88:	e00b      	b.n	800cba2 <HAL_TIM_PWM_Start_IT+0x102>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b10      	cmp	r3, #16
 800cb8e:	d104      	bne.n	800cb9a <HAL_TIM_PWM_Start_IT+0xfa>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb98:	e003      	b.n	800cba2 <HAL_TIM_PWM_Start_IT+0x102>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2202      	movs	r2, #2
 800cb9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b0c      	cmp	r3, #12
 800cba6:	d841      	bhi.n	800cc2c <HAL_TIM_PWM_Start_IT+0x18c>
 800cba8:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <HAL_TIM_PWM_Start_IT+0x110>)
 800cbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbae:	bf00      	nop
 800cbb0:	0800cbe5 	.word	0x0800cbe5
 800cbb4:	0800cc2d 	.word	0x0800cc2d
 800cbb8:	0800cc2d 	.word	0x0800cc2d
 800cbbc:	0800cc2d 	.word	0x0800cc2d
 800cbc0:	0800cbf7 	.word	0x0800cbf7
 800cbc4:	0800cc2d 	.word	0x0800cc2d
 800cbc8:	0800cc2d 	.word	0x0800cc2d
 800cbcc:	0800cc2d 	.word	0x0800cc2d
 800cbd0:	0800cc09 	.word	0x0800cc09
 800cbd4:	0800cc2d 	.word	0x0800cc2d
 800cbd8:	0800cc2d 	.word	0x0800cc2d
 800cbdc:	0800cc2d 	.word	0x0800cc2d
 800cbe0:	0800cc1b 	.word	0x0800cc1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0202 	orr.w	r2, r2, #2
 800cbf2:	60da      	str	r2, [r3, #12]
      break;
 800cbf4:	e01d      	b.n	800cc32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68da      	ldr	r2, [r3, #12]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f042 0204 	orr.w	r2, r2, #4
 800cc04:	60da      	str	r2, [r3, #12]
      break;
 800cc06:	e014      	b.n	800cc32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0208 	orr.w	r2, r2, #8
 800cc16:	60da      	str	r2, [r3, #12]
      break;
 800cc18:	e00b      	b.n	800cc32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f042 0210 	orr.w	r2, r2, #16
 800cc28:	60da      	str	r2, [r3, #12]
      break;
 800cc2a:	e002      	b.n	800cc32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc30:	bf00      	nop
  }

  if (status == HAL_OK)
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d16a      	bne.n	800cd0e <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 f90b 	bl	800de5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a33      	ldr	r2, [pc, #204]	; (800cd18 <HAL_TIM_PWM_Start_IT+0x278>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d013      	beq.n	800cc78 <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a31      	ldr	r2, [pc, #196]	; (800cd1c <HAL_TIM_PWM_Start_IT+0x27c>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d00e      	beq.n	800cc78 <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a30      	ldr	r2, [pc, #192]	; (800cd20 <HAL_TIM_PWM_Start_IT+0x280>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d009      	beq.n	800cc78 <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a2e      	ldr	r2, [pc, #184]	; (800cd24 <HAL_TIM_PWM_Start_IT+0x284>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d004      	beq.n	800cc78 <HAL_TIM_PWM_Start_IT+0x1d8>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a2d      	ldr	r2, [pc, #180]	; (800cd28 <HAL_TIM_PWM_Start_IT+0x288>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d101      	bne.n	800cc7c <HAL_TIM_PWM_Start_IT+0x1dc>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <HAL_TIM_PWM_Start_IT+0x1de>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d007      	beq.n	800cc92 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a20      	ldr	r2, [pc, #128]	; (800cd18 <HAL_TIM_PWM_Start_IT+0x278>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d018      	beq.n	800ccce <HAL_TIM_PWM_Start_IT+0x22e>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca4:	d013      	beq.n	800ccce <HAL_TIM_PWM_Start_IT+0x22e>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <HAL_TIM_PWM_Start_IT+0x28c>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d00e      	beq.n	800ccce <HAL_TIM_PWM_Start_IT+0x22e>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a1e      	ldr	r2, [pc, #120]	; (800cd30 <HAL_TIM_PWM_Start_IT+0x290>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d009      	beq.n	800ccce <HAL_TIM_PWM_Start_IT+0x22e>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a17      	ldr	r2, [pc, #92]	; (800cd1c <HAL_TIM_PWM_Start_IT+0x27c>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d004      	beq.n	800ccce <HAL_TIM_PWM_Start_IT+0x22e>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a15      	ldr	r2, [pc, #84]	; (800cd20 <HAL_TIM_PWM_Start_IT+0x280>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d115      	bne.n	800ccfa <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	689a      	ldr	r2, [r3, #8]
 800ccd4:	4b17      	ldr	r3, [pc, #92]	; (800cd34 <HAL_TIM_PWM_Start_IT+0x294>)
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b06      	cmp	r3, #6
 800ccde:	d015      	beq.n	800cd0c <HAL_TIM_PWM_Start_IT+0x26c>
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce6:	d011      	beq.n	800cd0c <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 0201 	orr.w	r2, r2, #1
 800ccf6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccf8:	e008      	b.n	800cd0c <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f042 0201 	orr.w	r2, r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	e000      	b.n	800cd0e <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd0c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	40012c00 	.word	0x40012c00
 800cd1c:	40013400 	.word	0x40013400
 800cd20:	40014000 	.word	0x40014000
 800cd24:	40014400 	.word	0x40014400
 800cd28:	40014800 	.word	0x40014800
 800cd2c:	40000400 	.word	0x40000400
 800cd30:	40000800 	.word	0x40000800
 800cd34:	00010007 	.word	0x00010007

0800cd38 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b0c      	cmp	r3, #12
 800cd4a:	d841      	bhi.n	800cdd0 <HAL_TIM_PWM_Stop_IT+0x98>
 800cd4c:	a201      	add	r2, pc, #4	; (adr r2, 800cd54 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800cd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd52:	bf00      	nop
 800cd54:	0800cd89 	.word	0x0800cd89
 800cd58:	0800cdd1 	.word	0x0800cdd1
 800cd5c:	0800cdd1 	.word	0x0800cdd1
 800cd60:	0800cdd1 	.word	0x0800cdd1
 800cd64:	0800cd9b 	.word	0x0800cd9b
 800cd68:	0800cdd1 	.word	0x0800cdd1
 800cd6c:	0800cdd1 	.word	0x0800cdd1
 800cd70:	0800cdd1 	.word	0x0800cdd1
 800cd74:	0800cdad 	.word	0x0800cdad
 800cd78:	0800cdd1 	.word	0x0800cdd1
 800cd7c:	0800cdd1 	.word	0x0800cdd1
 800cd80:	0800cdd1 	.word	0x0800cdd1
 800cd84:	0800cdbf 	.word	0x0800cdbf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68da      	ldr	r2, [r3, #12]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f022 0202 	bic.w	r2, r2, #2
 800cd96:	60da      	str	r2, [r3, #12]
      break;
 800cd98:	e01d      	b.n	800cdd6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68da      	ldr	r2, [r3, #12]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0204 	bic.w	r2, r2, #4
 800cda8:	60da      	str	r2, [r3, #12]
      break;
 800cdaa:	e014      	b.n	800cdd6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68da      	ldr	r2, [r3, #12]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0208 	bic.w	r2, r2, #8
 800cdba:	60da      	str	r2, [r3, #12]
      break;
 800cdbc:	e00b      	b.n	800cdd6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68da      	ldr	r2, [r3, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f022 0210 	bic.w	r2, r2, #16
 800cdcc:	60da      	str	r2, [r3, #12]
      break;
 800cdce:	e002      	b.n	800cdd6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
      break;
 800cdd4:	bf00      	nop
  }

  if (status == HAL_OK)
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f040 8081 	bne.w	800cee0 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2200      	movs	r2, #0
 800cde4:	6839      	ldr	r1, [r7, #0]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f001 f838 	bl	800de5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a3e      	ldr	r2, [pc, #248]	; (800ceec <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d013      	beq.n	800ce1e <HAL_TIM_PWM_Stop_IT+0xe6>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a3d      	ldr	r2, [pc, #244]	; (800cef0 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d00e      	beq.n	800ce1e <HAL_TIM_PWM_Stop_IT+0xe6>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a3b      	ldr	r2, [pc, #236]	; (800cef4 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d009      	beq.n	800ce1e <HAL_TIM_PWM_Stop_IT+0xe6>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a3a      	ldr	r2, [pc, #232]	; (800cef8 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d004      	beq.n	800ce1e <HAL_TIM_PWM_Stop_IT+0xe6>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a38      	ldr	r2, [pc, #224]	; (800cefc <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d101      	bne.n	800ce22 <HAL_TIM_PWM_Stop_IT+0xea>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e000      	b.n	800ce24 <HAL_TIM_PWM_Stop_IT+0xec>
 800ce22:	2300      	movs	r3, #0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d017      	beq.n	800ce58 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6a1a      	ldr	r2, [r3, #32]
 800ce2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ce32:	4013      	ands	r3, r2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10f      	bne.n	800ce58 <HAL_TIM_PWM_Stop_IT+0x120>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6a1a      	ldr	r2, [r3, #32]
 800ce3e:	f244 4344 	movw	r3, #17476	; 0x4444
 800ce42:	4013      	ands	r3, r2
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d107      	bne.n	800ce58 <HAL_TIM_PWM_Stop_IT+0x120>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6a1a      	ldr	r2, [r3, #32]
 800ce5e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ce62:	4013      	ands	r3, r2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10f      	bne.n	800ce88 <HAL_TIM_PWM_Stop_IT+0x150>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6a1a      	ldr	r2, [r3, #32]
 800ce6e:	f244 4344 	movw	r3, #17476	; 0x4444
 800ce72:	4013      	ands	r3, r2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d107      	bne.n	800ce88 <HAL_TIM_PWM_Stop_IT+0x150>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f022 0201 	bic.w	r2, r2, #1
 800ce86:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d104      	bne.n	800ce98 <HAL_TIM_PWM_Stop_IT+0x160>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce96:	e023      	b.n	800cee0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2b04      	cmp	r3, #4
 800ce9c:	d104      	bne.n	800cea8 <HAL_TIM_PWM_Stop_IT+0x170>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cea6:	e01b      	b.n	800cee0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b08      	cmp	r3, #8
 800ceac:	d104      	bne.n	800ceb8 <HAL_TIM_PWM_Stop_IT+0x180>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ceb6:	e013      	b.n	800cee0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2b0c      	cmp	r3, #12
 800cebc:	d104      	bne.n	800cec8 <HAL_TIM_PWM_Stop_IT+0x190>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cec6:	e00b      	b.n	800cee0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2b10      	cmp	r3, #16
 800cecc:	d104      	bne.n	800ced8 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ced6:	e003      	b.n	800cee0 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	40012c00 	.word	0x40012c00
 800cef0:	40013400 	.word	0x40013400
 800cef4:	40014000 	.word	0x40014000
 800cef8:	40014400 	.word	0x40014400
 800cefc:	40014800 	.word	0x40014800

0800cf00 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e041      	b.n	800cf98 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d106      	bne.n	800cf2e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7f7 ff95 	bl	8004e58 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2202      	movs	r2, #2
 800cf32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f000 fbf9 	bl	800d738 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f022 0208 	bic.w	r2, r2, #8
 800cf54:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6819      	ldr	r1, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e097      	b.n	800d0e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7f7 fe65 	bl	8004c98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	6812      	ldr	r2, [r2, #0]
 800cfe0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800cfe4:	f023 0307 	bic.w	r3, r3, #7
 800cfe8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	3304      	adds	r3, #4
 800cff2:	4619      	mov	r1, r3
 800cff4:	4610      	mov	r0, r2
 800cff6:	f000 fb9f 	bl	800d738 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6a1b      	ldr	r3, [r3, #32]
 800d010:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	4313      	orrs	r3, r2
 800d01a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d022:	f023 0303 	bic.w	r3, r3, #3
 800d026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	689a      	ldr	r2, [r3, #8]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	4313      	orrs	r3, r2
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	4313      	orrs	r3, r2
 800d038:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d040:	f023 030c 	bic.w	r3, r3, #12
 800d044:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d04c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	68da      	ldr	r2, [r3, #12]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	69db      	ldr	r3, [r3, #28]
 800d05a:	021b      	lsls	r3, r3, #8
 800d05c:	4313      	orrs	r3, r2
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	4313      	orrs	r3, r2
 800d062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	011a      	lsls	r2, r3, #4
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	031b      	lsls	r3, r3, #12
 800d070:	4313      	orrs	r3, r2
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	4313      	orrs	r3, r2
 800d076:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d07e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d086:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	695b      	ldr	r3, [r3, #20]
 800d090:	011b      	lsls	r3, r3, #4
 800d092:	4313      	orrs	r3, r2
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4313      	orrs	r3, r2
 800d098:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d104:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d10c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d114:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d110      	bne.n	800d13e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d102      	bne.n	800d128 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d122:	7b7b      	ldrb	r3, [r7, #13]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d001      	beq.n	800d12c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e089      	b.n	800d240 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2202      	movs	r2, #2
 800d130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d13c:	e031      	b.n	800d1a2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b04      	cmp	r3, #4
 800d142:	d110      	bne.n	800d166 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d144:	7bbb      	ldrb	r3, [r7, #14]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d102      	bne.n	800d150 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d14a:	7b3b      	ldrb	r3, [r7, #12]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d001      	beq.n	800d154 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e075      	b.n	800d240 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d164:	e01d      	b.n	800d1a2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d166:	7bfb      	ldrb	r3, [r7, #15]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d108      	bne.n	800d17e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d105      	bne.n	800d17e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d172:	7b7b      	ldrb	r3, [r7, #13]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d102      	bne.n	800d17e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d178:	7b3b      	ldrb	r3, [r7, #12]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d001      	beq.n	800d182 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e05e      	b.n	800d240 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2202      	movs	r2, #2
 800d186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2202      	movs	r2, #2
 800d18e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2202      	movs	r2, #2
 800d196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2202      	movs	r2, #2
 800d19e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <HAL_TIM_Encoder_Start_IT+0xc4>
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2b04      	cmp	r3, #4
 800d1ac:	d010      	beq.n	800d1d0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800d1ae:	e01f      	b.n	800d1f0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fe4f 	bl	800de5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68da      	ldr	r2, [r3, #12]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f042 0202 	orr.w	r2, r2, #2
 800d1cc:	60da      	str	r2, [r3, #12]
      break;
 800d1ce:	e02e      	b.n	800d22e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	2104      	movs	r1, #4
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 fe3f 	bl	800de5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f042 0204 	orr.w	r2, r2, #4
 800d1ec:	60da      	str	r2, [r3, #12]
      break;
 800d1ee:	e01e      	b.n	800d22e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f000 fe2f 	bl	800de5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2201      	movs	r2, #1
 800d204:	2104      	movs	r1, #4
 800d206:	4618      	mov	r0, r3
 800d208:	f000 fe28 	bl	800de5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68da      	ldr	r2, [r3, #12]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f042 0202 	orr.w	r2, r2, #2
 800d21a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68da      	ldr	r2, [r3, #12]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f042 0204 	orr.w	r2, r2, #4
 800d22a:	60da      	str	r2, [r3, #12]
      break;
 800d22c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f042 0201 	orr.w	r2, r2, #1
 800d23c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f003 0302 	and.w	r3, r3, #2
 800d266:	2b00      	cmp	r3, #0
 800d268:	d020      	beq.n	800d2ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d01b      	beq.n	800d2ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f06f 0202 	mvn.w	r2, #2
 800d27c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2201      	movs	r2, #1
 800d282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	f003 0303 	and.w	r3, r3, #3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7f5 fcc6 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 800d298:	e005      	b.n	800d2a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fa38 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7f5 fd57 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f003 0304 	and.w	r3, r3, #4
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d020      	beq.n	800d2f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f003 0304 	and.w	r3, r3, #4
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01b      	beq.n	800d2f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f06f 0204 	mvn.w	r2, #4
 800d2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2202      	movs	r2, #2
 800d2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7f5 fca0 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 800d2e4:	e005      	b.n	800d2f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fa12 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7f5 fd31 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	f003 0308 	and.w	r3, r3, #8
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d020      	beq.n	800d344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01b      	beq.n	800d344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f06f 0208 	mvn.w	r2, #8
 800d314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2204      	movs	r2, #4
 800d31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	69db      	ldr	r3, [r3, #28]
 800d322:	f003 0303 	and.w	r3, r3, #3
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7f5 fc7a 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 800d330:	e005      	b.n	800d33e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f9ec 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f7f5 fd0b 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	f003 0310 	and.w	r3, r3, #16
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d020      	beq.n	800d390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f003 0310 	and.w	r3, r3, #16
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01b      	beq.n	800d390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f06f 0210 	mvn.w	r2, #16
 800d360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2208      	movs	r2, #8
 800d366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	69db      	ldr	r3, [r3, #28]
 800d36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7f5 fc54 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 800d37c:	e005      	b.n	800d38a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f9c6 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7f5 fce5 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00c      	beq.n	800d3b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f06f 0201 	mvn.w	r2, #1
 800d3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7f5 fcf0 	bl	8002d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d104      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00c      	beq.n	800d3e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d007      	beq.n	800d3e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d3da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 ff83 	bl	800e2e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00c      	beq.n	800d406 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d007      	beq.n	800d406 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 ff7b 	bl	800e2fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00c      	beq.n	800d42a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f97d 	bl	800d724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f003 0320 	and.w	r3, r3, #32
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00c      	beq.n	800d44e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f003 0320 	and.w	r3, r3, #32
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d007      	beq.n	800d44e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f06f 0220 	mvn.w	r2, #32
 800d446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 ff43 	bl	800e2d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00c      	beq.n	800d472 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d007      	beq.n	800d472 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 ff4f 	bl	800e310 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00c      	beq.n	800d496 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d007      	beq.n	800d496 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 ff47 	bl	800e324 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00c      	beq.n	800d4ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d007      	beq.n	800d4ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 ff3f 	bl	800e338 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00c      	beq.n	800d4de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d007      	beq.n	800d4de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 ff37 	bl	800e34c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4de:	bf00      	nop
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
	...

0800d4e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d101      	bne.n	800d506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d502:	2302      	movs	r3, #2
 800d504:	e0ff      	b.n	800d706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b14      	cmp	r3, #20
 800d512:	f200 80f0 	bhi.w	800d6f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d516:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51c:	0800d571 	.word	0x0800d571
 800d520:	0800d6f7 	.word	0x0800d6f7
 800d524:	0800d6f7 	.word	0x0800d6f7
 800d528:	0800d6f7 	.word	0x0800d6f7
 800d52c:	0800d5b1 	.word	0x0800d5b1
 800d530:	0800d6f7 	.word	0x0800d6f7
 800d534:	0800d6f7 	.word	0x0800d6f7
 800d538:	0800d6f7 	.word	0x0800d6f7
 800d53c:	0800d5f3 	.word	0x0800d5f3
 800d540:	0800d6f7 	.word	0x0800d6f7
 800d544:	0800d6f7 	.word	0x0800d6f7
 800d548:	0800d6f7 	.word	0x0800d6f7
 800d54c:	0800d633 	.word	0x0800d633
 800d550:	0800d6f7 	.word	0x0800d6f7
 800d554:	0800d6f7 	.word	0x0800d6f7
 800d558:	0800d6f7 	.word	0x0800d6f7
 800d55c:	0800d675 	.word	0x0800d675
 800d560:	0800d6f7 	.word	0x0800d6f7
 800d564:	0800d6f7 	.word	0x0800d6f7
 800d568:	0800d6f7 	.word	0x0800d6f7
 800d56c:	0800d6b5 	.word	0x0800d6b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 f97a 	bl	800d870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	699a      	ldr	r2, [r3, #24]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f042 0208 	orr.w	r2, r2, #8
 800d58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	699a      	ldr	r2, [r3, #24]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f022 0204 	bic.w	r2, r2, #4
 800d59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6999      	ldr	r1, [r3, #24]
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	691a      	ldr	r2, [r3, #16]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	619a      	str	r2, [r3, #24]
      break;
 800d5ae:	e0a5      	b.n	800d6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68b9      	ldr	r1, [r7, #8]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f9ea 	bl	800d990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	699a      	ldr	r2, [r3, #24]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	699a      	ldr	r2, [r3, #24]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6999      	ldr	r1, [r3, #24]
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	021a      	lsls	r2, r3, #8
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	430a      	orrs	r2, r1
 800d5ee:	619a      	str	r2, [r3, #24]
      break;
 800d5f0:	e084      	b.n	800d6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68b9      	ldr	r1, [r7, #8]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 fa53 	bl	800daa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	69da      	ldr	r2, [r3, #28]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f042 0208 	orr.w	r2, r2, #8
 800d60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	69da      	ldr	r2, [r3, #28]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f022 0204 	bic.w	r2, r2, #4
 800d61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	69d9      	ldr	r1, [r3, #28]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	691a      	ldr	r2, [r3, #16]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	430a      	orrs	r2, r1
 800d62e:	61da      	str	r2, [r3, #28]
      break;
 800d630:	e064      	b.n	800d6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68b9      	ldr	r1, [r7, #8]
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 fabb 	bl	800dbb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	69da      	ldr	r2, [r3, #28]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	69da      	ldr	r2, [r3, #28]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	69d9      	ldr	r1, [r3, #28]
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	021a      	lsls	r2, r3, #8
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	430a      	orrs	r2, r1
 800d670:	61da      	str	r2, [r3, #28]
      break;
 800d672:	e043      	b.n	800d6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68b9      	ldr	r1, [r7, #8]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 fb24 	bl	800dcc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0208 	orr.w	r2, r2, #8
 800d68e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f022 0204 	bic.w	r2, r2, #4
 800d69e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	691a      	ldr	r2, [r3, #16]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d6b2:	e023      	b.n	800d6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68b9      	ldr	r1, [r7, #8]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 fb68 	bl	800dd90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	021a      	lsls	r2, r3, #8
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d6f4:	e002      	b.n	800d6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	75fb      	strb	r3, [r7, #23]
      break;
 800d6fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d704:	7dfb      	ldrb	r3, [r7, #23]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop

0800d710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d718:	bf00      	nop
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d738:	b480      	push	{r7}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a42      	ldr	r2, [pc, #264]	; (800d854 <TIM_Base_SetConfig+0x11c>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d00f      	beq.n	800d770 <TIM_Base_SetConfig+0x38>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d756:	d00b      	beq.n	800d770 <TIM_Base_SetConfig+0x38>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a3f      	ldr	r2, [pc, #252]	; (800d858 <TIM_Base_SetConfig+0x120>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d007      	beq.n	800d770 <TIM_Base_SetConfig+0x38>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a3e      	ldr	r2, [pc, #248]	; (800d85c <TIM_Base_SetConfig+0x124>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d003      	beq.n	800d770 <TIM_Base_SetConfig+0x38>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a3d      	ldr	r2, [pc, #244]	; (800d860 <TIM_Base_SetConfig+0x128>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d108      	bne.n	800d782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a33      	ldr	r2, [pc, #204]	; (800d854 <TIM_Base_SetConfig+0x11c>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d01b      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d790:	d017      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4a30      	ldr	r2, [pc, #192]	; (800d858 <TIM_Base_SetConfig+0x120>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d013      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4a2f      	ldr	r2, [pc, #188]	; (800d85c <TIM_Base_SetConfig+0x124>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d00f      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a2e      	ldr	r2, [pc, #184]	; (800d860 <TIM_Base_SetConfig+0x128>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d00b      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4a2d      	ldr	r2, [pc, #180]	; (800d864 <TIM_Base_SetConfig+0x12c>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d007      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4a2c      	ldr	r2, [pc, #176]	; (800d868 <TIM_Base_SetConfig+0x130>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d003      	beq.n	800d7c2 <TIM_Base_SetConfig+0x8a>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4a2b      	ldr	r2, [pc, #172]	; (800d86c <TIM_Base_SetConfig+0x134>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d108      	bne.n	800d7d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	689a      	ldr	r2, [r3, #8]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a16      	ldr	r2, [pc, #88]	; (800d854 <TIM_Base_SetConfig+0x11c>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d00f      	beq.n	800d820 <TIM_Base_SetConfig+0xe8>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a17      	ldr	r2, [pc, #92]	; (800d860 <TIM_Base_SetConfig+0x128>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d00b      	beq.n	800d820 <TIM_Base_SetConfig+0xe8>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a16      	ldr	r2, [pc, #88]	; (800d864 <TIM_Base_SetConfig+0x12c>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d007      	beq.n	800d820 <TIM_Base_SetConfig+0xe8>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a15      	ldr	r2, [pc, #84]	; (800d868 <TIM_Base_SetConfig+0x130>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d003      	beq.n	800d820 <TIM_Base_SetConfig+0xe8>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a14      	ldr	r2, [pc, #80]	; (800d86c <TIM_Base_SetConfig+0x134>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d103      	bne.n	800d828 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	691a      	ldr	r2, [r3, #16]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	2b01      	cmp	r3, #1
 800d838:	d105      	bne.n	800d846 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	f023 0201 	bic.w	r2, r3, #1
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	611a      	str	r2, [r3, #16]
  }
}
 800d846:	bf00      	nop
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	40012c00 	.word	0x40012c00
 800d858:	40000400 	.word	0x40000400
 800d85c:	40000800 	.word	0x40000800
 800d860:	40013400 	.word	0x40013400
 800d864:	40014000 	.word	0x40014000
 800d868:	40014400 	.word	0x40014400
 800d86c:	40014800 	.word	0x40014800

0800d870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d870:	b480      	push	{r7}
 800d872:	b087      	sub	sp, #28
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a1b      	ldr	r3, [r3, #32]
 800d884:	f023 0201 	bic.w	r2, r3, #1
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 0303 	bic.w	r3, r3, #3
 800d8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f023 0302 	bic.w	r3, r3, #2
 800d8bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a2c      	ldr	r2, [pc, #176]	; (800d97c <TIM_OC1_SetConfig+0x10c>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d00f      	beq.n	800d8f0 <TIM_OC1_SetConfig+0x80>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a2b      	ldr	r2, [pc, #172]	; (800d980 <TIM_OC1_SetConfig+0x110>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d00b      	beq.n	800d8f0 <TIM_OC1_SetConfig+0x80>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a2a      	ldr	r2, [pc, #168]	; (800d984 <TIM_OC1_SetConfig+0x114>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d007      	beq.n	800d8f0 <TIM_OC1_SetConfig+0x80>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a29      	ldr	r2, [pc, #164]	; (800d988 <TIM_OC1_SetConfig+0x118>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d003      	beq.n	800d8f0 <TIM_OC1_SetConfig+0x80>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a28      	ldr	r2, [pc, #160]	; (800d98c <TIM_OC1_SetConfig+0x11c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d10c      	bne.n	800d90a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f023 0308 	bic.w	r3, r3, #8
 800d8f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f023 0304 	bic.w	r3, r3, #4
 800d908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a1b      	ldr	r2, [pc, #108]	; (800d97c <TIM_OC1_SetConfig+0x10c>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d00f      	beq.n	800d932 <TIM_OC1_SetConfig+0xc2>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a1a      	ldr	r2, [pc, #104]	; (800d980 <TIM_OC1_SetConfig+0x110>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d00b      	beq.n	800d932 <TIM_OC1_SetConfig+0xc2>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a19      	ldr	r2, [pc, #100]	; (800d984 <TIM_OC1_SetConfig+0x114>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d007      	beq.n	800d932 <TIM_OC1_SetConfig+0xc2>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a18      	ldr	r2, [pc, #96]	; (800d988 <TIM_OC1_SetConfig+0x118>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d003      	beq.n	800d932 <TIM_OC1_SetConfig+0xc2>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a17      	ldr	r2, [pc, #92]	; (800d98c <TIM_OC1_SetConfig+0x11c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d111      	bne.n	800d956 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	4313      	orrs	r3, r2
 800d94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	4313      	orrs	r3, r2
 800d954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	621a      	str	r2, [r3, #32]
}
 800d970:	bf00      	nop
 800d972:	371c      	adds	r7, #28
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	40012c00 	.word	0x40012c00
 800d980:	40013400 	.word	0x40013400
 800d984:	40014000 	.word	0x40014000
 800d988:	40014400 	.word	0x40014400
 800d98c:	40014800 	.word	0x40014800

0800d990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d990:	b480      	push	{r7}
 800d992:	b087      	sub	sp, #28
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a1b      	ldr	r3, [r3, #32]
 800d99e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a1b      	ldr	r3, [r3, #32]
 800d9a4:	f023 0210 	bic.w	r2, r3, #16
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d9be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	021b      	lsls	r3, r3, #8
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f023 0320 	bic.w	r3, r3, #32
 800d9de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a28      	ldr	r2, [pc, #160]	; (800da90 <TIM_OC2_SetConfig+0x100>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d003      	beq.n	800d9fc <TIM_OC2_SetConfig+0x6c>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4a27      	ldr	r2, [pc, #156]	; (800da94 <TIM_OC2_SetConfig+0x104>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d10d      	bne.n	800da18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a1d      	ldr	r2, [pc, #116]	; (800da90 <TIM_OC2_SetConfig+0x100>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d00f      	beq.n	800da40 <TIM_OC2_SetConfig+0xb0>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a1c      	ldr	r2, [pc, #112]	; (800da94 <TIM_OC2_SetConfig+0x104>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d00b      	beq.n	800da40 <TIM_OC2_SetConfig+0xb0>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a1b      	ldr	r2, [pc, #108]	; (800da98 <TIM_OC2_SetConfig+0x108>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d007      	beq.n	800da40 <TIM_OC2_SetConfig+0xb0>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a1a      	ldr	r2, [pc, #104]	; (800da9c <TIM_OC2_SetConfig+0x10c>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d003      	beq.n	800da40 <TIM_OC2_SetConfig+0xb0>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a19      	ldr	r2, [pc, #100]	; (800daa0 <TIM_OC2_SetConfig+0x110>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d113      	bne.n	800da68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	695b      	ldr	r3, [r3, #20]
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	4313      	orrs	r3, r2
 800da5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	4313      	orrs	r3, r2
 800da66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	697a      	ldr	r2, [r7, #20]
 800da80:	621a      	str	r2, [r3, #32]
}
 800da82:	bf00      	nop
 800da84:	371c      	adds	r7, #28
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	40012c00 	.word	0x40012c00
 800da94:	40013400 	.word	0x40013400
 800da98:	40014000 	.word	0x40014000
 800da9c:	40014400 	.word	0x40014400
 800daa0:	40014800 	.word	0x40014800

0800daa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a1b      	ldr	r3, [r3, #32]
 800dab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f023 0303 	bic.w	r3, r3, #3
 800dade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800daf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	021b      	lsls	r3, r3, #8
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a27      	ldr	r2, [pc, #156]	; (800dba0 <TIM_OC3_SetConfig+0xfc>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d003      	beq.n	800db0e <TIM_OC3_SetConfig+0x6a>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a26      	ldr	r2, [pc, #152]	; (800dba4 <TIM_OC3_SetConfig+0x100>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d10d      	bne.n	800db2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	021b      	lsls	r3, r3, #8
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	4313      	orrs	r3, r2
 800db20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a1c      	ldr	r2, [pc, #112]	; (800dba0 <TIM_OC3_SetConfig+0xfc>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d00f      	beq.n	800db52 <TIM_OC3_SetConfig+0xae>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a1b      	ldr	r2, [pc, #108]	; (800dba4 <TIM_OC3_SetConfig+0x100>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d00b      	beq.n	800db52 <TIM_OC3_SetConfig+0xae>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a1a      	ldr	r2, [pc, #104]	; (800dba8 <TIM_OC3_SetConfig+0x104>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d007      	beq.n	800db52 <TIM_OC3_SetConfig+0xae>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a19      	ldr	r2, [pc, #100]	; (800dbac <TIM_OC3_SetConfig+0x108>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d003      	beq.n	800db52 <TIM_OC3_SetConfig+0xae>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a18      	ldr	r2, [pc, #96]	; (800dbb0 <TIM_OC3_SetConfig+0x10c>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d113      	bne.n	800db7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	011b      	lsls	r3, r3, #4
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	011b      	lsls	r3, r3, #4
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	4313      	orrs	r3, r2
 800db78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	621a      	str	r2, [r3, #32]
}
 800db94:	bf00      	nop
 800db96:	371c      	adds	r7, #28
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	40012c00 	.word	0x40012c00
 800dba4:	40013400 	.word	0x40013400
 800dba8:	40014000 	.word	0x40014000
 800dbac:	40014400 	.word	0x40014400
 800dbb0:	40014800 	.word	0x40014800

0800dbb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b087      	sub	sp, #28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a1b      	ldr	r3, [r3, #32]
 800dbc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dbe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	021b      	lsls	r3, r3, #8
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	031b      	lsls	r3, r3, #12
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a28      	ldr	r2, [pc, #160]	; (800dcb4 <TIM_OC4_SetConfig+0x100>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d003      	beq.n	800dc20 <TIM_OC4_SetConfig+0x6c>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a27      	ldr	r2, [pc, #156]	; (800dcb8 <TIM_OC4_SetConfig+0x104>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d10d      	bne.n	800dc3c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	031b      	lsls	r3, r3, #12
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	4313      	orrs	r3, r2
 800dc32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <TIM_OC4_SetConfig+0x100>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d00f      	beq.n	800dc64 <TIM_OC4_SetConfig+0xb0>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a1c      	ldr	r2, [pc, #112]	; (800dcb8 <TIM_OC4_SetConfig+0x104>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d00b      	beq.n	800dc64 <TIM_OC4_SetConfig+0xb0>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a1b      	ldr	r2, [pc, #108]	; (800dcbc <TIM_OC4_SetConfig+0x108>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d007      	beq.n	800dc64 <TIM_OC4_SetConfig+0xb0>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a1a      	ldr	r2, [pc, #104]	; (800dcc0 <TIM_OC4_SetConfig+0x10c>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d003      	beq.n	800dc64 <TIM_OC4_SetConfig+0xb0>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a19      	ldr	r2, [pc, #100]	; (800dcc4 <TIM_OC4_SetConfig+0x110>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d113      	bne.n	800dc8c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	019b      	lsls	r3, r3, #6
 800dc7a:	693a      	ldr	r2, [r7, #16]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	019b      	lsls	r3, r3, #6
 800dc86:	693a      	ldr	r2, [r7, #16]
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	621a      	str	r2, [r3, #32]
}
 800dca6:	bf00      	nop
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	40012c00 	.word	0x40012c00
 800dcb8:	40013400 	.word	0x40013400
 800dcbc:	40014000 	.word	0x40014000
 800dcc0:	40014400 	.word	0x40014400
 800dcc4:	40014800 	.word	0x40014800

0800dcc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b087      	sub	sp, #28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a1b      	ldr	r3, [r3, #32]
 800dcd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a1b      	ldr	r3, [r3, #32]
 800dcdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dd0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	041b      	lsls	r3, r3, #16
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a17      	ldr	r2, [pc, #92]	; (800dd7c <TIM_OC5_SetConfig+0xb4>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d00f      	beq.n	800dd42 <TIM_OC5_SetConfig+0x7a>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a16      	ldr	r2, [pc, #88]	; (800dd80 <TIM_OC5_SetConfig+0xb8>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d00b      	beq.n	800dd42 <TIM_OC5_SetConfig+0x7a>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a15      	ldr	r2, [pc, #84]	; (800dd84 <TIM_OC5_SetConfig+0xbc>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d007      	beq.n	800dd42 <TIM_OC5_SetConfig+0x7a>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a14      	ldr	r2, [pc, #80]	; (800dd88 <TIM_OC5_SetConfig+0xc0>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d003      	beq.n	800dd42 <TIM_OC5_SetConfig+0x7a>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a13      	ldr	r2, [pc, #76]	; (800dd8c <TIM_OC5_SetConfig+0xc4>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d109      	bne.n	800dd56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	021b      	lsls	r3, r3, #8
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	621a      	str	r2, [r3, #32]
}
 800dd70:	bf00      	nop
 800dd72:	371c      	adds	r7, #28
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	40012c00 	.word	0x40012c00
 800dd80:	40013400 	.word	0x40013400
 800dd84:	40014000 	.word	0x40014000
 800dd88:	40014400 	.word	0x40014400
 800dd8c:	40014800 	.word	0x40014800

0800dd90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
 800dda4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ddbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	021b      	lsls	r3, r3, #8
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ddd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	051b      	lsls	r3, r3, #20
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a18      	ldr	r2, [pc, #96]	; (800de48 <TIM_OC6_SetConfig+0xb8>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d00f      	beq.n	800de0c <TIM_OC6_SetConfig+0x7c>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a17      	ldr	r2, [pc, #92]	; (800de4c <TIM_OC6_SetConfig+0xbc>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d00b      	beq.n	800de0c <TIM_OC6_SetConfig+0x7c>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a16      	ldr	r2, [pc, #88]	; (800de50 <TIM_OC6_SetConfig+0xc0>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d007      	beq.n	800de0c <TIM_OC6_SetConfig+0x7c>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a15      	ldr	r2, [pc, #84]	; (800de54 <TIM_OC6_SetConfig+0xc4>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d003      	beq.n	800de0c <TIM_OC6_SetConfig+0x7c>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a14      	ldr	r2, [pc, #80]	; (800de58 <TIM_OC6_SetConfig+0xc8>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d109      	bne.n	800de20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	029b      	lsls	r3, r3, #10
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685a      	ldr	r2, [r3, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	693a      	ldr	r2, [r7, #16]
 800de38:	621a      	str	r2, [r3, #32]
}
 800de3a:	bf00      	nop
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	40012c00 	.word	0x40012c00
 800de4c:	40013400 	.word	0x40013400
 800de50:	40014000 	.word	0x40014000
 800de54:	40014400 	.word	0x40014400
 800de58:	40014800 	.word	0x40014800

0800de5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b087      	sub	sp, #28
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f003 031f 	and.w	r3, r3, #31
 800de6e:	2201      	movs	r2, #1
 800de70:	fa02 f303 	lsl.w	r3, r2, r3
 800de74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6a1a      	ldr	r2, [r3, #32]
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	43db      	mvns	r3, r3
 800de7e:	401a      	ands	r2, r3
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6a1a      	ldr	r2, [r3, #32]
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	f003 031f 	and.w	r3, r3, #31
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	fa01 f303 	lsl.w	r3, r1, r3
 800de94:	431a      	orrs	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	621a      	str	r2, [r3, #32]
}
 800de9a:	bf00      	nop
 800de9c:	371c      	adds	r7, #28
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
	...

0800dea8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d109      	bne.n	800ded0 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	bf14      	ite	ne
 800dec8:	2301      	movne	r3, #1
 800deca:	2300      	moveq	r3, #0
 800decc:	b2db      	uxtb	r3, r3
 800dece:	e022      	b.n	800df16 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d109      	bne.n	800deea <HAL_TIMEx_PWMN_Start_IT+0x42>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b01      	cmp	r3, #1
 800dee0:	bf14      	ite	ne
 800dee2:	2301      	movne	r3, #1
 800dee4:	2300      	moveq	r3, #0
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	e015      	b.n	800df16 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	2b08      	cmp	r3, #8
 800deee:	d109      	bne.n	800df04 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800def6:	b2db      	uxtb	r3, r3
 800def8:	2b01      	cmp	r3, #1
 800defa:	bf14      	ite	ne
 800defc:	2301      	movne	r3, #1
 800defe:	2300      	moveq	r3, #0
 800df00:	b2db      	uxtb	r3, r3
 800df02:	e008      	b.n	800df16 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	bf14      	ite	ne
 800df10:	2301      	movne	r3, #1
 800df12:	2300      	moveq	r3, #0
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	e0bc      	b.n	800e098 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d104      	bne.n	800df2e <HAL_TIMEx_PWMN_Start_IT+0x86>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2202      	movs	r2, #2
 800df28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df2c:	e013      	b.n	800df56 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b04      	cmp	r3, #4
 800df32:	d104      	bne.n	800df3e <HAL_TIMEx_PWMN_Start_IT+0x96>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2202      	movs	r2, #2
 800df38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df3c:	e00b      	b.n	800df56 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b08      	cmp	r3, #8
 800df42:	d104      	bne.n	800df4e <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2202      	movs	r2, #2
 800df48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800df4c:	e003      	b.n	800df56 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2202      	movs	r2, #2
 800df52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	2b0c      	cmp	r3, #12
 800df5a:	d841      	bhi.n	800dfe0 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800df5c:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800df99 	.word	0x0800df99
 800df68:	0800dfe1 	.word	0x0800dfe1
 800df6c:	0800dfe1 	.word	0x0800dfe1
 800df70:	0800dfe1 	.word	0x0800dfe1
 800df74:	0800dfab 	.word	0x0800dfab
 800df78:	0800dfe1 	.word	0x0800dfe1
 800df7c:	0800dfe1 	.word	0x0800dfe1
 800df80:	0800dfe1 	.word	0x0800dfe1
 800df84:	0800dfbd 	.word	0x0800dfbd
 800df88:	0800dfe1 	.word	0x0800dfe1
 800df8c:	0800dfe1 	.word	0x0800dfe1
 800df90:	0800dfe1 	.word	0x0800dfe1
 800df94:	0800dfcf 	.word	0x0800dfcf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68da      	ldr	r2, [r3, #12]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f042 0202 	orr.w	r2, r2, #2
 800dfa6:	60da      	str	r2, [r3, #12]
      break;
 800dfa8:	e01d      	b.n	800dfe6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68da      	ldr	r2, [r3, #12]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f042 0204 	orr.w	r2, r2, #4
 800dfb8:	60da      	str	r2, [r3, #12]
      break;
 800dfba:	e014      	b.n	800dfe6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68da      	ldr	r2, [r3, #12]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f042 0208 	orr.w	r2, r2, #8
 800dfca:	60da      	str	r2, [r3, #12]
      break;
 800dfcc:	e00b      	b.n	800dfe6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68da      	ldr	r2, [r3, #12]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f042 0210 	orr.w	r2, r2, #16
 800dfdc:	60da      	str	r2, [r3, #12]
      break;
 800dfde:	e002      	b.n	800dfe6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	73fb      	strb	r3, [r7, #15]
      break;
 800dfe4:	bf00      	nop
  }

  if (status == HAL_OK)
 800dfe6:	7bfb      	ldrb	r3, [r7, #15]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d154      	bne.n	800e096 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68da      	ldr	r2, [r3, #12]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dffa:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2204      	movs	r2, #4
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 f9ab 	bl	800e360 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a20      	ldr	r2, [pc, #128]	; (800e0a0 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d018      	beq.n	800e056 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e02c:	d013      	beq.n	800e056 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a1c      	ldr	r2, [pc, #112]	; (800e0a4 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d00e      	beq.n	800e056 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a1a      	ldr	r2, [pc, #104]	; (800e0a8 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d009      	beq.n	800e056 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a19      	ldr	r2, [pc, #100]	; (800e0ac <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d004      	beq.n	800e056 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a17      	ldr	r2, [pc, #92]	; (800e0b0 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d115      	bne.n	800e082 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	689a      	ldr	r2, [r3, #8]
 800e05c:	4b15      	ldr	r3, [pc, #84]	; (800e0b4 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800e05e:	4013      	ands	r3, r2
 800e060:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2b06      	cmp	r3, #6
 800e066:	d015      	beq.n	800e094 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e06e:	d011      	beq.n	800e094 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f042 0201 	orr.w	r2, r2, #1
 800e07e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e080:	e008      	b.n	800e094 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f042 0201 	orr.w	r2, r2, #1
 800e090:	601a      	str	r2, [r3, #0]
 800e092:	e000      	b.n	800e096 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e094:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e096:	7bfb      	ldrb	r3, [r7, #15]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	40012c00 	.word	0x40012c00
 800e0a4:	40000400 	.word	0x40000400
 800e0a8:	40000800 	.word	0x40000800
 800e0ac:	40013400 	.word	0x40013400
 800e0b0:	40014000 	.word	0x40014000
 800e0b4:	00010007 	.word	0x00010007

0800e0b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d101      	bne.n	800e0d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e0cc:	2302      	movs	r3, #2
 800e0ce:	e065      	b.n	800e19c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2202      	movs	r2, #2
 800e0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a2c      	ldr	r2, [pc, #176]	; (800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d004      	beq.n	800e104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a2b      	ldr	r2, [pc, #172]	; (800e1ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d108      	bne.n	800e116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e10a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	4313      	orrs	r3, r2
 800e114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e11c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	4313      	orrs	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a1b      	ldr	r2, [pc, #108]	; (800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d018      	beq.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e146:	d013      	beq.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a18      	ldr	r2, [pc, #96]	; (800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d00e      	beq.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a17      	ldr	r2, [pc, #92]	; (800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d009      	beq.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a12      	ldr	r2, [pc, #72]	; (800e1ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d004      	beq.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a13      	ldr	r2, [pc, #76]	; (800e1b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d10c      	bne.n	800e18a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	4313      	orrs	r3, r2
 800e180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3714      	adds	r7, #20
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	40012c00 	.word	0x40012c00
 800e1ac:	40013400 	.word	0x40013400
 800e1b0:	40000400 	.word	0x40000400
 800e1b4:	40000800 	.word	0x40000800
 800e1b8:	40014000 	.word	0x40014000

0800e1bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d101      	bne.n	800e1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	e073      	b.n	800e2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	4313      	orrs	r3, r2
 800e208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4313      	orrs	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	4313      	orrs	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	4313      	orrs	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	041b      	lsls	r3, r3, #16
 800e24e:	4313      	orrs	r3, r2
 800e250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	69db      	ldr	r3, [r3, #28]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a19      	ldr	r2, [pc, #100]	; (800e2cc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d004      	beq.n	800e274 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a18      	ldr	r2, [pc, #96]	; (800e2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d11c      	bne.n	800e2ae <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27e:	051b      	lsls	r3, r3, #20
 800e280:	4313      	orrs	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29c:	4313      	orrs	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	40012c00 	.word	0x40012c00
 800e2d0:	40013400 	.word	0x40013400

0800e2d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e354:	bf00      	nop
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800e360:	b480      	push	{r7}
 800e362:	b087      	sub	sp, #28
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	f003 030f 	and.w	r3, r3, #15
 800e372:	2204      	movs	r2, #4
 800e374:	fa02 f303 	lsl.w	r3, r2, r3
 800e378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6a1a      	ldr	r2, [r3, #32]
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	43db      	mvns	r3, r3
 800e382:	401a      	ands	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6a1a      	ldr	r2, [r3, #32]
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	6879      	ldr	r1, [r7, #4]
 800e394:	fa01 f303 	lsl.w	r3, r1, r3
 800e398:	431a      	orrs	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	621a      	str	r2, [r3, #32]
}
 800e39e:	bf00      	nop
 800e3a0:	371c      	adds	r7, #28
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr

0800e3aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b082      	sub	sp, #8
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d101      	bne.n	800e3bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e042      	b.n	800e442 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7f6 fdc0 	bl	8004f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2224      	movs	r2, #36	; 0x24
 800e3d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f022 0201 	bic.w	r2, r2, #1
 800e3ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 faf5 	bl	800e9e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f826 	bl	800e44c <UART_SetConfig>
 800e400:	4603      	mov	r3, r0
 800e402:	2b01      	cmp	r3, #1
 800e404:	d101      	bne.n	800e40a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e01b      	b.n	800e442 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	685a      	ldr	r2, [r3, #4]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689a      	ldr	r2, [r3, #8]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e428:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f042 0201 	orr.w	r2, r2, #1
 800e438:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fb74 	bl	800eb28 <UART_CheckIdleState>
 800e440:	4603      	mov	r3, r0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e44c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e450:	b08c      	sub	sp, #48	; 0x30
 800e452:	af00      	add	r7, sp, #0
 800e454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	689a      	ldr	r2, [r3, #8]
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	431a      	orrs	r2, r3
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	431a      	orrs	r2, r3
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	69db      	ldr	r3, [r3, #28]
 800e470:	4313      	orrs	r3, r2
 800e472:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	4bab      	ldr	r3, [pc, #684]	; (800e728 <UART_SetConfig+0x2dc>)
 800e47c:	4013      	ands	r3, r2
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	6812      	ldr	r2, [r2, #0]
 800e482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e484:	430b      	orrs	r3, r1
 800e486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	68da      	ldr	r2, [r3, #12]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	430a      	orrs	r2, r1
 800e49c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4aa0      	ldr	r2, [pc, #640]	; (800e72c <UART_SetConfig+0x2e0>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d004      	beq.n	800e4b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	6a1b      	ldr	r3, [r3, #32]
 800e4b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e4c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e4c6:	697a      	ldr	r2, [r7, #20]
 800e4c8:	6812      	ldr	r2, [r2, #0]
 800e4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4cc:	430b      	orrs	r3, r1
 800e4ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d6:	f023 010f 	bic.w	r1, r3, #15
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a91      	ldr	r2, [pc, #580]	; (800e730 <UART_SetConfig+0x2e4>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d125      	bne.n	800e53c <UART_SetConfig+0xf0>
 800e4f0:	4b90      	ldr	r3, [pc, #576]	; (800e734 <UART_SetConfig+0x2e8>)
 800e4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4f6:	f003 0303 	and.w	r3, r3, #3
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d81a      	bhi.n	800e534 <UART_SetConfig+0xe8>
 800e4fe:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <UART_SetConfig+0xb8>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e515 	.word	0x0800e515
 800e508:	0800e525 	.word	0x0800e525
 800e50c:	0800e51d 	.word	0x0800e51d
 800e510:	0800e52d 	.word	0x0800e52d
 800e514:	2301      	movs	r3, #1
 800e516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e51a:	e0d6      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e51c:	2302      	movs	r3, #2
 800e51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e522:	e0d2      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e524:	2304      	movs	r3, #4
 800e526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e52a:	e0ce      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e52c:	2308      	movs	r3, #8
 800e52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e532:	e0ca      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e534:	2310      	movs	r3, #16
 800e536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e53a:	e0c6      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a7d      	ldr	r2, [pc, #500]	; (800e738 <UART_SetConfig+0x2ec>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d138      	bne.n	800e5b8 <UART_SetConfig+0x16c>
 800e546:	4b7b      	ldr	r3, [pc, #492]	; (800e734 <UART_SetConfig+0x2e8>)
 800e548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e54c:	f003 030c 	and.w	r3, r3, #12
 800e550:	2b0c      	cmp	r3, #12
 800e552:	d82d      	bhi.n	800e5b0 <UART_SetConfig+0x164>
 800e554:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <UART_SetConfig+0x110>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e591 	.word	0x0800e591
 800e560:	0800e5b1 	.word	0x0800e5b1
 800e564:	0800e5b1 	.word	0x0800e5b1
 800e568:	0800e5b1 	.word	0x0800e5b1
 800e56c:	0800e5a1 	.word	0x0800e5a1
 800e570:	0800e5b1 	.word	0x0800e5b1
 800e574:	0800e5b1 	.word	0x0800e5b1
 800e578:	0800e5b1 	.word	0x0800e5b1
 800e57c:	0800e599 	.word	0x0800e599
 800e580:	0800e5b1 	.word	0x0800e5b1
 800e584:	0800e5b1 	.word	0x0800e5b1
 800e588:	0800e5b1 	.word	0x0800e5b1
 800e58c:	0800e5a9 	.word	0x0800e5a9
 800e590:	2300      	movs	r3, #0
 800e592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e596:	e098      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e598:	2302      	movs	r3, #2
 800e59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e59e:	e094      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5a0:	2304      	movs	r3, #4
 800e5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5a6:	e090      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5a8:	2308      	movs	r3, #8
 800e5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ae:	e08c      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5b0:	2310      	movs	r3, #16
 800e5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5b6:	e088      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a5f      	ldr	r2, [pc, #380]	; (800e73c <UART_SetConfig+0x2f0>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d125      	bne.n	800e60e <UART_SetConfig+0x1c2>
 800e5c2:	4b5c      	ldr	r3, [pc, #368]	; (800e734 <UART_SetConfig+0x2e8>)
 800e5c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e5cc:	2b30      	cmp	r3, #48	; 0x30
 800e5ce:	d016      	beq.n	800e5fe <UART_SetConfig+0x1b2>
 800e5d0:	2b30      	cmp	r3, #48	; 0x30
 800e5d2:	d818      	bhi.n	800e606 <UART_SetConfig+0x1ba>
 800e5d4:	2b20      	cmp	r3, #32
 800e5d6:	d00a      	beq.n	800e5ee <UART_SetConfig+0x1a2>
 800e5d8:	2b20      	cmp	r3, #32
 800e5da:	d814      	bhi.n	800e606 <UART_SetConfig+0x1ba>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <UART_SetConfig+0x19a>
 800e5e0:	2b10      	cmp	r3, #16
 800e5e2:	d008      	beq.n	800e5f6 <UART_SetConfig+0x1aa>
 800e5e4:	e00f      	b.n	800e606 <UART_SetConfig+0x1ba>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ec:	e06d      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5f4:	e069      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5f6:	2304      	movs	r3, #4
 800e5f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5fc:	e065      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e5fe:	2308      	movs	r3, #8
 800e600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e604:	e061      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e606:	2310      	movs	r3, #16
 800e608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e60c:	e05d      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a4b      	ldr	r2, [pc, #300]	; (800e740 <UART_SetConfig+0x2f4>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d125      	bne.n	800e664 <UART_SetConfig+0x218>
 800e618:	4b46      	ldr	r3, [pc, #280]	; (800e734 <UART_SetConfig+0x2e8>)
 800e61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e61e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e622:	2bc0      	cmp	r3, #192	; 0xc0
 800e624:	d016      	beq.n	800e654 <UART_SetConfig+0x208>
 800e626:	2bc0      	cmp	r3, #192	; 0xc0
 800e628:	d818      	bhi.n	800e65c <UART_SetConfig+0x210>
 800e62a:	2b80      	cmp	r3, #128	; 0x80
 800e62c:	d00a      	beq.n	800e644 <UART_SetConfig+0x1f8>
 800e62e:	2b80      	cmp	r3, #128	; 0x80
 800e630:	d814      	bhi.n	800e65c <UART_SetConfig+0x210>
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <UART_SetConfig+0x1f0>
 800e636:	2b40      	cmp	r3, #64	; 0x40
 800e638:	d008      	beq.n	800e64c <UART_SetConfig+0x200>
 800e63a:	e00f      	b.n	800e65c <UART_SetConfig+0x210>
 800e63c:	2300      	movs	r3, #0
 800e63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e642:	e042      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e644:	2302      	movs	r3, #2
 800e646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e64a:	e03e      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e64c:	2304      	movs	r3, #4
 800e64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e652:	e03a      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e654:	2308      	movs	r3, #8
 800e656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e65a:	e036      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e65c:	2310      	movs	r3, #16
 800e65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e662:	e032      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a30      	ldr	r2, [pc, #192]	; (800e72c <UART_SetConfig+0x2e0>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d12a      	bne.n	800e6c4 <UART_SetConfig+0x278>
 800e66e:	4b31      	ldr	r3, [pc, #196]	; (800e734 <UART_SetConfig+0x2e8>)
 800e670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e67c:	d01a      	beq.n	800e6b4 <UART_SetConfig+0x268>
 800e67e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e682:	d81b      	bhi.n	800e6bc <UART_SetConfig+0x270>
 800e684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e688:	d00c      	beq.n	800e6a4 <UART_SetConfig+0x258>
 800e68a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e68e:	d815      	bhi.n	800e6bc <UART_SetConfig+0x270>
 800e690:	2b00      	cmp	r3, #0
 800e692:	d003      	beq.n	800e69c <UART_SetConfig+0x250>
 800e694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e698:	d008      	beq.n	800e6ac <UART_SetConfig+0x260>
 800e69a:	e00f      	b.n	800e6bc <UART_SetConfig+0x270>
 800e69c:	2300      	movs	r3, #0
 800e69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6a2:	e012      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e6a4:	2302      	movs	r3, #2
 800e6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6aa:	e00e      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e6ac:	2304      	movs	r3, #4
 800e6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6b2:	e00a      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e6b4:	2308      	movs	r3, #8
 800e6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6ba:	e006      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e6bc:	2310      	movs	r3, #16
 800e6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6c2:	e002      	b.n	800e6ca <UART_SetConfig+0x27e>
 800e6c4:	2310      	movs	r3, #16
 800e6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a17      	ldr	r2, [pc, #92]	; (800e72c <UART_SetConfig+0x2e0>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	f040 80a8 	bne.w	800e826 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e6da:	2b08      	cmp	r3, #8
 800e6dc:	d834      	bhi.n	800e748 <UART_SetConfig+0x2fc>
 800e6de:	a201      	add	r2, pc, #4	; (adr r2, 800e6e4 <UART_SetConfig+0x298>)
 800e6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e4:	0800e709 	.word	0x0800e709
 800e6e8:	0800e749 	.word	0x0800e749
 800e6ec:	0800e711 	.word	0x0800e711
 800e6f0:	0800e749 	.word	0x0800e749
 800e6f4:	0800e717 	.word	0x0800e717
 800e6f8:	0800e749 	.word	0x0800e749
 800e6fc:	0800e749 	.word	0x0800e749
 800e700:	0800e749 	.word	0x0800e749
 800e704:	0800e71f 	.word	0x0800e71f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e708:	f7fd f90c 	bl	800b924 <HAL_RCC_GetPCLK1Freq>
 800e70c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e70e:	e021      	b.n	800e754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e710:	4b0c      	ldr	r3, [pc, #48]	; (800e744 <UART_SetConfig+0x2f8>)
 800e712:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e714:	e01e      	b.n	800e754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e716:	f7fd f897 	bl	800b848 <HAL_RCC_GetSysClockFreq>
 800e71a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e71c:	e01a      	b.n	800e754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e724:	e016      	b.n	800e754 <UART_SetConfig+0x308>
 800e726:	bf00      	nop
 800e728:	cfff69f3 	.word	0xcfff69f3
 800e72c:	40008000 	.word	0x40008000
 800e730:	40013800 	.word	0x40013800
 800e734:	40021000 	.word	0x40021000
 800e738:	40004400 	.word	0x40004400
 800e73c:	40004800 	.word	0x40004800
 800e740:	40004c00 	.word	0x40004c00
 800e744:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e748:	2300      	movs	r3, #0
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e74c:	2301      	movs	r3, #1
 800e74e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e756:	2b00      	cmp	r3, #0
 800e758:	f000 812a 	beq.w	800e9b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e760:	4a9e      	ldr	r2, [pc, #632]	; (800e9dc <UART_SetConfig+0x590>)
 800e762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e766:	461a      	mov	r2, r3
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e76e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	685a      	ldr	r2, [r3, #4]
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	69ba      	ldr	r2, [r7, #24]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d305      	bcc.n	800e78c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d903      	bls.n	800e794 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e792:	e10d      	b.n	800e9b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	2200      	movs	r2, #0
 800e798:	60bb      	str	r3, [r7, #8]
 800e79a:	60fa      	str	r2, [r7, #12]
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a0:	4a8e      	ldr	r2, [pc, #568]	; (800e9dc <UART_SetConfig+0x590>)
 800e7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	607a      	str	r2, [r7, #4]
 800e7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7b6:	f7f2 fa8f 	bl	8000cd8 <__aeabi_uldivmod>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4610      	mov	r0, r2
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	f04f 0300 	mov.w	r3, #0
 800e7ca:	020b      	lsls	r3, r1, #8
 800e7cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7d0:	0202      	lsls	r2, r0, #8
 800e7d2:	6979      	ldr	r1, [r7, #20]
 800e7d4:	6849      	ldr	r1, [r1, #4]
 800e7d6:	0849      	lsrs	r1, r1, #1
 800e7d8:	2000      	movs	r0, #0
 800e7da:	460c      	mov	r4, r1
 800e7dc:	4605      	mov	r5, r0
 800e7de:	eb12 0804 	adds.w	r8, r2, r4
 800e7e2:	eb43 0905 	adc.w	r9, r3, r5
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	469a      	mov	sl, r3
 800e7ee:	4693      	mov	fp, r2
 800e7f0:	4652      	mov	r2, sl
 800e7f2:	465b      	mov	r3, fp
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	f7f2 fa6e 	bl	8000cd8 <__aeabi_uldivmod>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4613      	mov	r3, r2
 800e802:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e804:	6a3b      	ldr	r3, [r7, #32]
 800e806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e80a:	d308      	bcc.n	800e81e <UART_SetConfig+0x3d2>
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e812:	d204      	bcs.n	800e81e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6a3a      	ldr	r2, [r7, #32]
 800e81a:	60da      	str	r2, [r3, #12]
 800e81c:	e0c8      	b.n	800e9b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800e81e:	2301      	movs	r3, #1
 800e820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e824:	e0c4      	b.n	800e9b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e82e:	d167      	bne.n	800e900 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800e830:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e834:	2b08      	cmp	r3, #8
 800e836:	d828      	bhi.n	800e88a <UART_SetConfig+0x43e>
 800e838:	a201      	add	r2, pc, #4	; (adr r2, 800e840 <UART_SetConfig+0x3f4>)
 800e83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83e:	bf00      	nop
 800e840:	0800e865 	.word	0x0800e865
 800e844:	0800e86d 	.word	0x0800e86d
 800e848:	0800e875 	.word	0x0800e875
 800e84c:	0800e88b 	.word	0x0800e88b
 800e850:	0800e87b 	.word	0x0800e87b
 800e854:	0800e88b 	.word	0x0800e88b
 800e858:	0800e88b 	.word	0x0800e88b
 800e85c:	0800e88b 	.word	0x0800e88b
 800e860:	0800e883 	.word	0x0800e883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e864:	f7fd f85e 	bl	800b924 <HAL_RCC_GetPCLK1Freq>
 800e868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e86a:	e014      	b.n	800e896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e86c:	f7fd f870 	bl	800b950 <HAL_RCC_GetPCLK2Freq>
 800e870:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e872:	e010      	b.n	800e896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e874:	4b5a      	ldr	r3, [pc, #360]	; (800e9e0 <UART_SetConfig+0x594>)
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e878:	e00d      	b.n	800e896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e87a:	f7fc ffe5 	bl	800b848 <HAL_RCC_GetSysClockFreq>
 800e87e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e880:	e009      	b.n	800e896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e888:	e005      	b.n	800e896 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800e88a:	2300      	movs	r3, #0
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f000 8089 	beq.w	800e9b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a2:	4a4e      	ldr	r2, [pc, #312]	; (800e9dc <UART_SetConfig+0x590>)
 800e8a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8b0:	005a      	lsls	r2, r3, #1
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	085b      	lsrs	r3, r3, #1
 800e8b8:	441a      	add	r2, r3
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	2b0f      	cmp	r3, #15
 800e8c8:	d916      	bls.n	800e8f8 <UART_SetConfig+0x4ac>
 800e8ca:	6a3b      	ldr	r3, [r7, #32]
 800e8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8d0:	d212      	bcs.n	800e8f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	f023 030f 	bic.w	r3, r3, #15
 800e8da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	085b      	lsrs	r3, r3, #1
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	f003 0307 	and.w	r3, r3, #7
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	8bfb      	ldrh	r3, [r7, #30]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	8bfa      	ldrh	r2, [r7, #30]
 800e8f4:	60da      	str	r2, [r3, #12]
 800e8f6:	e05b      	b.n	800e9b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e8fe:	e057      	b.n	800e9b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e900:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e904:	2b08      	cmp	r3, #8
 800e906:	d828      	bhi.n	800e95a <UART_SetConfig+0x50e>
 800e908:	a201      	add	r2, pc, #4	; (adr r2, 800e910 <UART_SetConfig+0x4c4>)
 800e90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90e:	bf00      	nop
 800e910:	0800e935 	.word	0x0800e935
 800e914:	0800e93d 	.word	0x0800e93d
 800e918:	0800e945 	.word	0x0800e945
 800e91c:	0800e95b 	.word	0x0800e95b
 800e920:	0800e94b 	.word	0x0800e94b
 800e924:	0800e95b 	.word	0x0800e95b
 800e928:	0800e95b 	.word	0x0800e95b
 800e92c:	0800e95b 	.word	0x0800e95b
 800e930:	0800e953 	.word	0x0800e953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e934:	f7fc fff6 	bl	800b924 <HAL_RCC_GetPCLK1Freq>
 800e938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e93a:	e014      	b.n	800e966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e93c:	f7fd f808 	bl	800b950 <HAL_RCC_GetPCLK2Freq>
 800e940:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e942:	e010      	b.n	800e966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e944:	4b26      	ldr	r3, [pc, #152]	; (800e9e0 <UART_SetConfig+0x594>)
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e948:	e00d      	b.n	800e966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e94a:	f7fc ff7d 	bl	800b848 <HAL_RCC_GetSysClockFreq>
 800e94e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e950:	e009      	b.n	800e966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e956:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e958:	e005      	b.n	800e966 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800e95a:	2300      	movs	r3, #0
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e95e:	2301      	movs	r3, #1
 800e960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e964:	bf00      	nop
    }

    if (pclk != 0U)
 800e966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d021      	beq.n	800e9b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e970:	4a1a      	ldr	r2, [pc, #104]	; (800e9dc <UART_SetConfig+0x590>)
 800e972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e976:	461a      	mov	r2, r3
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	085b      	lsrs	r3, r3, #1
 800e984:	441a      	add	r2, r3
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e98e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e990:	6a3b      	ldr	r3, [r7, #32]
 800e992:	2b0f      	cmp	r3, #15
 800e994:	d909      	bls.n	800e9aa <UART_SetConfig+0x55e>
 800e996:	6a3b      	ldr	r3, [r7, #32]
 800e998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e99c:	d205      	bcs.n	800e9aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60da      	str	r2, [r3, #12]
 800e9a8:	e002      	b.n	800e9b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e9cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3730      	adds	r7, #48	; 0x30
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9da:	bf00      	nop
 800e9dc:	080189a0 	.word	0x080189a0
 800e9e0:	00f42400 	.word	0x00f42400

0800e9e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f0:	f003 0308 	and.w	r3, r3, #8
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00a      	beq.n	800ea0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	430a      	orrs	r2, r1
 800ea2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea34:	f003 0302 	and.w	r3, r3, #2
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00a      	beq.n	800ea52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	430a      	orrs	r2, r1
 800ea50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea56:	f003 0304 	and.w	r3, r3, #4
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00a      	beq.n	800ea74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	430a      	orrs	r2, r1
 800ea72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea78:	f003 0310 	and.w	r3, r3, #16
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00a      	beq.n	800ea96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	430a      	orrs	r2, r1
 800ea94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea9a:	f003 0320 	and.w	r3, r3, #32
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00a      	beq.n	800eab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	430a      	orrs	r2, r1
 800eab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d01a      	beq.n	800eafa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	430a      	orrs	r2, r1
 800ead8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eae2:	d10a      	bne.n	800eafa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00a      	beq.n	800eb1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	430a      	orrs	r2, r1
 800eb1a:	605a      	str	r2, [r3, #4]
  }
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b098      	sub	sp, #96	; 0x60
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb38:	f7f7 f86e 	bl	8005c18 <HAL_GetTick>
 800eb3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f003 0308 	and.w	r3, r3, #8
 800eb48:	2b08      	cmp	r3, #8
 800eb4a:	d12f      	bne.n	800ebac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb54:	2200      	movs	r2, #0
 800eb56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f88e 	bl	800ec7c <UART_WaitOnFlagUntilTimeout>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d022      	beq.n	800ebac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	e853 3f00 	ldrex	r3, [r3]
 800eb72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb7a:	653b      	str	r3, [r7, #80]	; 0x50
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	461a      	mov	r2, r3
 800eb82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb84:	647b      	str	r3, [r7, #68]	; 0x44
 800eb86:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb8c:	e841 2300 	strex	r3, r2, [r1]
 800eb90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1e6      	bne.n	800eb66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2220      	movs	r2, #32
 800eb9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e063      	b.n	800ec74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f003 0304 	and.w	r3, r3, #4
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	d149      	bne.n	800ec4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f857 	bl	800ec7c <UART_WaitOnFlagUntilTimeout>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d03c      	beq.n	800ec4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	e853 3f00 	ldrex	r3, [r3]
 800ebe0:	623b      	str	r3, [r7, #32]
   return(result);
 800ebe2:	6a3b      	ldr	r3, [r7, #32]
 800ebe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf2:	633b      	str	r3, [r7, #48]	; 0x30
 800ebf4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebfa:	e841 2300 	strex	r3, r2, [r1]
 800ebfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1e6      	bne.n	800ebd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3308      	adds	r3, #8
 800ec0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	e853 3f00 	ldrex	r3, [r3]
 800ec14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f023 0301 	bic.w	r3, r3, #1
 800ec1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3308      	adds	r3, #8
 800ec24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec26:	61fa      	str	r2, [r7, #28]
 800ec28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec2a:	69b9      	ldr	r1, [r7, #24]
 800ec2c:	69fa      	ldr	r2, [r7, #28]
 800ec2e:	e841 2300 	strex	r3, r2, [r1]
 800ec32:	617b      	str	r3, [r7, #20]
   return(result);
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1e5      	bne.n	800ec06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2220      	movs	r2, #32
 800ec3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	e012      	b.n	800ec74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2220      	movs	r2, #32
 800ec52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2220      	movs	r2, #32
 800ec5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec72:	2300      	movs	r3, #0
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3758      	adds	r7, #88	; 0x58
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	603b      	str	r3, [r7, #0]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec8c:	e04f      	b.n	800ed2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec94:	d04b      	beq.n	800ed2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec96:	f7f6 ffbf 	bl	8005c18 <HAL_GetTick>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d302      	bcc.n	800ecac <UART_WaitOnFlagUntilTimeout+0x30>
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e04e      	b.n	800ed4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f003 0304 	and.w	r3, r3, #4
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d037      	beq.n	800ed2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	2b80      	cmp	r3, #128	; 0x80
 800ecc2:	d034      	beq.n	800ed2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2b40      	cmp	r3, #64	; 0x40
 800ecc8:	d031      	beq.n	800ed2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	69db      	ldr	r3, [r3, #28]
 800ecd0:	f003 0308 	and.w	r3, r3, #8
 800ecd4:	2b08      	cmp	r3, #8
 800ecd6:	d110      	bne.n	800ecfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2208      	movs	r2, #8
 800ecde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f000 f838 	bl	800ed56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2208      	movs	r2, #8
 800ecea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e029      	b.n	800ed4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	69db      	ldr	r3, [r3, #28]
 800ed00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed08:	d111      	bne.n	800ed2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f000 f81e 	bl	800ed56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e00f      	b.n	800ed4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	69da      	ldr	r2, [r3, #28]
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	4013      	ands	r3, r2
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	bf0c      	ite	eq
 800ed3e:	2301      	moveq	r3, #1
 800ed40:	2300      	movne	r3, #0
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	461a      	mov	r2, r3
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d0a0      	beq.n	800ec8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b095      	sub	sp, #84	; 0x54
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed66:	e853 3f00 	ldrex	r3, [r3]
 800ed6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ed7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed84:	e841 2300 	strex	r3, r2, [r1]
 800ed88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1e6      	bne.n	800ed5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3308      	adds	r3, #8
 800ed96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	e853 3f00 	ldrex	r3, [r3]
 800ed9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eda6:	f023 0301 	bic.w	r3, r3, #1
 800edaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3308      	adds	r3, #8
 800edb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800edb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edbc:	e841 2300 	strex	r3, r2, [r1]
 800edc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1e3      	bne.n	800ed90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d118      	bne.n	800ee02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	e853 3f00 	ldrex	r3, [r3]
 800eddc:	60bb      	str	r3, [r7, #8]
   return(result);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	f023 0310 	bic.w	r3, r3, #16
 800ede4:	647b      	str	r3, [r7, #68]	; 0x44
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	461a      	mov	r2, r3
 800edec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edee:	61bb      	str	r3, [r7, #24]
 800edf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf2:	6979      	ldr	r1, [r7, #20]
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	e841 2300 	strex	r3, r2, [r1]
 800edfa:	613b      	str	r3, [r7, #16]
   return(result);
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1e6      	bne.n	800edd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2220      	movs	r2, #32
 800ee06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ee16:	bf00      	nop
 800ee18:	3754      	adds	r7, #84	; 0x54
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b085      	sub	sp, #20
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d101      	bne.n	800ee38 <HAL_UARTEx_DisableFifoMode+0x16>
 800ee34:	2302      	movs	r3, #2
 800ee36:	e027      	b.n	800ee88 <HAL_UARTEx_DisableFifoMode+0x66>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2224      	movs	r2, #36	; 0x24
 800ee44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f022 0201 	bic.w	r2, r2, #1
 800ee5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ee66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2220      	movs	r2, #32
 800ee7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d101      	bne.n	800eeac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eea8:	2302      	movs	r3, #2
 800eeaa:	e02d      	b.n	800ef08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2224      	movs	r2, #36	; 0x24
 800eeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f022 0201 	bic.w	r2, r2, #1
 800eed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	430a      	orrs	r2, r1
 800eee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f84f 	bl	800ef8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2220      	movs	r2, #32
 800eefa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d101      	bne.n	800ef28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef24:	2302      	movs	r3, #2
 800ef26:	e02d      	b.n	800ef84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2224      	movs	r2, #36	; 0x24
 800ef34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f022 0201 	bic.w	r2, r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	430a      	orrs	r2, r1
 800ef62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f811 	bl	800ef8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2220      	movs	r2, #32
 800ef76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d108      	bne.n	800efae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800efac:	e031      	b.n	800f012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800efae:	2308      	movs	r3, #8
 800efb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800efb2:	2308      	movs	r3, #8
 800efb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	0e5b      	lsrs	r3, r3, #25
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	f003 0307 	and.w	r3, r3, #7
 800efc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	0f5b      	lsrs	r3, r3, #29
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efd6:	7bbb      	ldrb	r3, [r7, #14]
 800efd8:	7b3a      	ldrb	r2, [r7, #12]
 800efda:	4911      	ldr	r1, [pc, #68]	; (800f020 <UARTEx_SetNbDataToProcess+0x94>)
 800efdc:	5c8a      	ldrb	r2, [r1, r2]
 800efde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800efe2:	7b3a      	ldrb	r2, [r7, #12]
 800efe4:	490f      	ldr	r1, [pc, #60]	; (800f024 <UARTEx_SetNbDataToProcess+0x98>)
 800efe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800efec:	b29a      	uxth	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	7b7a      	ldrb	r2, [r7, #13]
 800eff8:	4909      	ldr	r1, [pc, #36]	; (800f020 <UARTEx_SetNbDataToProcess+0x94>)
 800effa:	5c8a      	ldrb	r2, [r1, r2]
 800effc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f000:	7b7a      	ldrb	r2, [r7, #13]
 800f002:	4908      	ldr	r1, [pc, #32]	; (800f024 <UARTEx_SetNbDataToProcess+0x98>)
 800f004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f006:	fb93 f3f2 	sdiv	r3, r3, r2
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f012:	bf00      	nop
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	080189b8 	.word	0x080189b8
 800f024:	080189c0 	.word	0x080189c0

0800f028 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f038:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f03c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	b29a      	uxth	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f056:	b480      	push	{r7}
 800f058:	b085      	sub	sp, #20
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f05e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f062:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	43db      	mvns	r3, r3
 800f072:	b29b      	uxth	r3, r3
 800f074:	4013      	ands	r3, r2
 800f076:	b29a      	uxth	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3714      	adds	r7, #20
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	1d3b      	adds	r3, r7, #4
 800f096:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2201      	movs	r2, #1
 800f09e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f0ba:	2300      	movs	r3, #0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b09d      	sub	sp, #116	; 0x74
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	4413      	add	r3, r2
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	78db      	ldrb	r3, [r3, #3]
 800f0f6:	2b03      	cmp	r3, #3
 800f0f8:	d81f      	bhi.n	800f13a <USB_ActivateEndpoint+0x72>
 800f0fa:	a201      	add	r2, pc, #4	; (adr r2, 800f100 <USB_ActivateEndpoint+0x38>)
 800f0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f100:	0800f111 	.word	0x0800f111
 800f104:	0800f12d 	.word	0x0800f12d
 800f108:	0800f143 	.word	0x0800f143
 800f10c:	0800f11f 	.word	0x0800f11f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f110:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f118:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f11c:	e012      	b.n	800f144 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f11e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f122:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f126:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f12a:	e00b      	b.n	800f144 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f12c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f134:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f138:	e004      	b.n	800f144 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
 800f13c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f140:	e000      	b.n	800f144 <USB_ActivateEndpoint+0x7c>
      break;
 800f142:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	441a      	add	r2, r3
 800f14e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f15a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f162:	b29b      	uxth	r3, r3
 800f164:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	b29b      	uxth	r3, r3
 800f174:	b21b      	sxth	r3, r3
 800f176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f17e:	b21a      	sxth	r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	b21b      	sxth	r3, r3
 800f186:	4313      	orrs	r3, r2
 800f188:	b21b      	sxth	r3, r3
 800f18a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	441a      	add	r2, r3
 800f198:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f19c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	7b1b      	ldrb	r3, [r3, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f040 8178 	bne.w	800f4aa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	785b      	ldrb	r3, [r3, #1]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f000 8084 	beq.w	800f2cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	61bb      	str	r3, [r7, #24]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	00da      	lsls	r2, r3, #3
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1e6:	617b      	str	r3, [r7, #20]
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	88db      	ldrh	r3, [r3, #6]
 800f1ec:	085b      	lsrs	r3, r3, #1
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	005b      	lsls	r3, r3, #1
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	827b      	strh	r3, [r7, #18]
 800f206:	8a7b      	ldrh	r3, [r7, #18]
 800f208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d01b      	beq.n	800f248 <USB_ActivateEndpoint+0x180>
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f226:	823b      	strh	r3, [r7, #16]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	441a      	add	r2, r3
 800f232:	8a3b      	ldrh	r3, [r7, #16]
 800f234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f23c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f244:	b29b      	uxth	r3, r3
 800f246:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	78db      	ldrb	r3, [r3, #3]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d020      	beq.n	800f292 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4413      	add	r3, r2
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f266:	81bb      	strh	r3, [r7, #12]
 800f268:	89bb      	ldrh	r3, [r7, #12]
 800f26a:	f083 0320 	eor.w	r3, r3, #32
 800f26e:	81bb      	strh	r3, [r7, #12]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	441a      	add	r2, r3
 800f27a:	89bb      	ldrh	r3, [r7, #12]
 800f27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	8013      	strh	r3, [r2, #0]
 800f290:	e2d5      	b.n	800f83e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4413      	add	r3, r2
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2a8:	81fb      	strh	r3, [r7, #14]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	441a      	add	r2, r3
 800f2b4:	89fb      	ldrh	r3, [r7, #14]
 800f2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	8013      	strh	r3, [r2, #0]
 800f2ca:	e2b8      	b.n	800f83e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	633b      	str	r3, [r7, #48]	; 0x30
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	4413      	add	r3, r2
 800f2de:	633b      	str	r3, [r7, #48]	; 0x30
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	00da      	lsls	r2, r3, #3
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	88db      	ldrh	r3, [r3, #6]
 800f2f4:	085b      	lsrs	r3, r3, #1
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	005b      	lsls	r3, r3, #1
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	62bb      	str	r3, [r7, #40]	; 0x28
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	461a      	mov	r2, r3
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	4413      	add	r3, r2
 800f312:	62bb      	str	r3, [r7, #40]	; 0x28
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	00da      	lsls	r2, r3, #3
 800f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31c:	4413      	add	r3, r2
 800f31e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f322:	627b      	str	r3, [r7, #36]	; 0x24
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	881b      	ldrh	r3, [r3, #0]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f32e:	b29a      	uxth	r2, r3
 800f330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f332:	801a      	strh	r2, [r3, #0]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	2b3e      	cmp	r3, #62	; 0x3e
 800f33a:	d91d      	bls.n	800f378 <USB_ActivateEndpoint+0x2b0>
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	691b      	ldr	r3, [r3, #16]
 800f340:	095b      	lsrs	r3, r3, #5
 800f342:	66bb      	str	r3, [r7, #104]	; 0x68
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	f003 031f 	and.w	r3, r3, #31
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d102      	bne.n	800f356 <USB_ActivateEndpoint+0x28e>
 800f350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f352:	3b01      	subs	r3, #1
 800f354:	66bb      	str	r3, [r7, #104]	; 0x68
 800f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f35e:	b29b      	uxth	r3, r3
 800f360:	029b      	lsls	r3, r3, #10
 800f362:	b29b      	uxth	r3, r3
 800f364:	4313      	orrs	r3, r2
 800f366:	b29b      	uxth	r3, r3
 800f368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f370:	b29a      	uxth	r2, r3
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	801a      	strh	r2, [r3, #0]
 800f376:	e026      	b.n	800f3c6 <USB_ActivateEndpoint+0x2fe>
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d10a      	bne.n	800f396 <USB_ActivateEndpoint+0x2ce>
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	b29b      	uxth	r3, r3
 800f386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f38e:	b29a      	uxth	r2, r3
 800f390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f392:	801a      	strh	r2, [r3, #0]
 800f394:	e017      	b.n	800f3c6 <USB_ActivateEndpoint+0x2fe>
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	085b      	lsrs	r3, r3, #1
 800f39c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	f003 0301 	and.w	r3, r3, #1
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d002      	beq.n	800f3b0 <USB_ActivateEndpoint+0x2e8>
 800f3aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	029b      	lsls	r3, r3, #10
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	4413      	add	r3, r2
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d01b      	beq.n	800f416 <USB_ActivateEndpoint+0x34e>
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3f4:	843b      	strh	r3, [r7, #32]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	441a      	add	r2, r3
 800f400:	8c3b      	ldrh	r3, [r7, #32]
 800f402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f40a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f412:	b29b      	uxth	r3, r3
 800f414:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d124      	bne.n	800f468 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f434:	83bb      	strh	r3, [r7, #28]
 800f436:	8bbb      	ldrh	r3, [r7, #28]
 800f438:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f43c:	83bb      	strh	r3, [r7, #28]
 800f43e:	8bbb      	ldrh	r3, [r7, #28]
 800f440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f444:	83bb      	strh	r3, [r7, #28]
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	441a      	add	r2, r3
 800f450:	8bbb      	ldrh	r3, [r7, #28]
 800f452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f45a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f45e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f462:	b29b      	uxth	r3, r3
 800f464:	8013      	strh	r3, [r2, #0]
 800f466:	e1ea      	b.n	800f83e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	b29b      	uxth	r3, r3
 800f476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f47e:	83fb      	strh	r3, [r7, #30]
 800f480:	8bfb      	ldrh	r3, [r7, #30]
 800f482:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f486:	83fb      	strh	r3, [r7, #30]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	441a      	add	r2, r3
 800f492:	8bfb      	ldrh	r3, [r7, #30]
 800f494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f49c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	8013      	strh	r3, [r2, #0]
 800f4a8:	e1c9      	b.n	800f83e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	78db      	ldrb	r3, [r3, #3]
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	d11e      	bne.n	800f4f0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	441a      	add	r2, r3
 800f4d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f4da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	8013      	strh	r3, [r2, #0]
 800f4ee:	e01d      	b.n	800f52c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f506:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	441a      	add	r2, r3
 800f514:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f51c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f528:	b29b      	uxth	r3, r3
 800f52a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f536:	b29b      	uxth	r3, r3
 800f538:	461a      	mov	r2, r3
 800f53a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f53c:	4413      	add	r3, r2
 800f53e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	00da      	lsls	r2, r3, #3
 800f546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f548:	4413      	add	r3, r2
 800f54a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f54e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	891b      	ldrh	r3, [r3, #8]
 800f554:	085b      	lsrs	r3, r3, #1
 800f556:	b29b      	uxth	r3, r3
 800f558:	005b      	lsls	r3, r3, #1
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f55e:	801a      	strh	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	657b      	str	r3, [r7, #84]	; 0x54
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	461a      	mov	r2, r3
 800f56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f570:	4413      	add	r3, r2
 800f572:	657b      	str	r3, [r7, #84]	; 0x54
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	00da      	lsls	r2, r3, #3
 800f57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f57c:	4413      	add	r3, r2
 800f57e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f582:	653b      	str	r3, [r7, #80]	; 0x50
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	085b      	lsrs	r3, r3, #1
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	b29a      	uxth	r2, r3
 800f590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f592:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	785b      	ldrb	r3, [r3, #1]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f040 8093 	bne.w	800f6c4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	4413      	add	r3, r2
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f5ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f5b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d01b      	beq.n	800f5f2 <USB_ActivateEndpoint+0x52a>
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	4413      	add	r3, r2
 800f5c4:	881b      	ldrh	r3, [r3, #0]
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	441a      	add	r2, r3
 800f5dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f5de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01b      	beq.n	800f642 <USB_ActivateEndpoint+0x57a>
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4413      	add	r3, r2
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	b29b      	uxth	r3, r3
 800f618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f620:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	441a      	add	r2, r3
 800f62c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f62e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f63a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f63e:	b29b      	uxth	r3, r3
 800f640:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4413      	add	r3, r2
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f658:	873b      	strh	r3, [r7, #56]	; 0x38
 800f65a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f65c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f660:	873b      	strh	r3, [r7, #56]	; 0x38
 800f662:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f668:	873b      	strh	r3, [r7, #56]	; 0x38
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	441a      	add	r2, r3
 800f674:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f67a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f686:	b29b      	uxth	r3, r3
 800f688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	b29b      	uxth	r3, r3
 800f698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f69c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	441a      	add	r2, r3
 800f6ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f6ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	8013      	strh	r3, [r2, #0]
 800f6c2:	e0bc      	b.n	800f83e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	4413      	add	r3, r2
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f6d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d01d      	beq.n	800f71c <USB_ActivateEndpoint+0x654>
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	441a      	add	r2, r3
 800f704:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f70c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f718:	b29b      	uxth	r3, r3
 800f71a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4413      	add	r3, r2
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f72c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f734:	2b00      	cmp	r3, #0
 800f736:	d01d      	beq.n	800f774 <USB_ActivateEndpoint+0x6ac>
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	4413      	add	r3, r2
 800f742:	881b      	ldrh	r3, [r3, #0]
 800f744:	b29b      	uxth	r3, r3
 800f746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f74e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	441a      	add	r2, r3
 800f75c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f76c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f770:	b29b      	uxth	r3, r3
 800f772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	78db      	ldrb	r3, [r3, #3]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d024      	beq.n	800f7c6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	4413      	add	r3, r2
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f78e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f792:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f796:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f79a:	f083 0320 	eor.w	r3, r3, #32
 800f79e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	441a      	add	r2, r3
 800f7ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	8013      	strh	r3, [r2, #0]
 800f7c4:	e01d      	b.n	800f802 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	009b      	lsls	r3, r3, #2
 800f7ce:	4413      	add	r3, r2
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	441a      	add	r2, r3
 800f7ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f7ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	4413      	add	r3, r2
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f818:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	441a      	add	r2, r3
 800f826:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f82a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f82e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f83e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f842:	4618      	mov	r0, r3
 800f844:	3774      	adds	r7, #116	; 0x74
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop

0800f850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f850:	b480      	push	{r7}
 800f852:	b08d      	sub	sp, #52	; 0x34
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	7b1b      	ldrb	r3, [r3, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f040 808e 	bne.w	800f980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	785b      	ldrb	r3, [r3, #1]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d044      	beq.n	800f8f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	4413      	add	r3, r2
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	81bb      	strh	r3, [r7, #12]
 800f87a:	89bb      	ldrh	r3, [r7, #12]
 800f87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f880:	2b00      	cmp	r3, #0
 800f882:	d01b      	beq.n	800f8bc <USB_DeactivateEndpoint+0x6c>
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	4413      	add	r3, r2
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	b29b      	uxth	r3, r3
 800f892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f89a:	817b      	strh	r3, [r7, #10]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	441a      	add	r2, r3
 800f8a6:	897b      	ldrh	r3, [r7, #10]
 800f8a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	4413      	add	r3, r2
 800f8c6:	881b      	ldrh	r3, [r3, #0]
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8d2:	813b      	strh	r3, [r7, #8]
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	441a      	add	r2, r3
 800f8de:	893b      	ldrh	r3, [r7, #8]
 800f8e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	8013      	strh	r3, [r2, #0]
 800f8f4:	e192      	b.n	800fc1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	827b      	strh	r3, [r7, #18]
 800f904:	8a7b      	ldrh	r3, [r7, #18]
 800f906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d01b      	beq.n	800f946 <USB_DeactivateEndpoint+0xf6>
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4413      	add	r3, r2
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f924:	823b      	strh	r3, [r7, #16]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	441a      	add	r2, r3
 800f930:	8a3b      	ldrh	r3, [r7, #16]
 800f932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f93a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f942:	b29b      	uxth	r3, r3
 800f944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	4413      	add	r3, r2
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	b29b      	uxth	r3, r3
 800f954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95c:	81fb      	strh	r3, [r7, #14]
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	441a      	add	r2, r3
 800f968:	89fb      	ldrh	r3, [r7, #14]
 800f96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	8013      	strh	r3, [r2, #0]
 800f97e:	e14d      	b.n	800fc1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	785b      	ldrb	r3, [r3, #1]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f040 80a5 	bne.w	800fad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	009b      	lsls	r3, r3, #2
 800f992:	4413      	add	r3, r2
 800f994:	881b      	ldrh	r3, [r3, #0]
 800f996:	843b      	strh	r3, [r7, #32]
 800f998:	8c3b      	ldrh	r3, [r7, #32]
 800f99a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d01b      	beq.n	800f9da <USB_DeactivateEndpoint+0x18a>
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	4413      	add	r3, r2
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9b8:	83fb      	strh	r3, [r7, #30]
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	441a      	add	r2, r3
 800f9c4:	8bfb      	ldrh	r3, [r7, #30]
 800f9c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4413      	add	r3, r2
 800f9e4:	881b      	ldrh	r3, [r3, #0]
 800f9e6:	83bb      	strh	r3, [r7, #28]
 800f9e8:	8bbb      	ldrh	r3, [r7, #28]
 800f9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d01b      	beq.n	800fa2a <USB_DeactivateEndpoint+0x1da>
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4413      	add	r3, r2
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa08:	837b      	strh	r3, [r7, #26]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	441a      	add	r2, r3
 800fa14:	8b7b      	ldrh	r3, [r7, #26]
 800fa16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa40:	833b      	strh	r3, [r7, #24]
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	441a      	add	r2, r3
 800fa4c:	8b3b      	ldrh	r3, [r7, #24]
 800fa4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	4413      	add	r3, r2
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa78:	82fb      	strh	r3, [r7, #22]
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	441a      	add	r2, r3
 800fa84:	8afb      	ldrh	r3, [r7, #22]
 800fa86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	4413      	add	r3, r2
 800faa4:	881b      	ldrh	r3, [r3, #0]
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fab0:	82bb      	strh	r3, [r7, #20]
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	441a      	add	r2, r3
 800fabc:	8abb      	ldrh	r3, [r7, #20]
 800fabe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800face:	b29b      	uxth	r3, r3
 800fad0:	8013      	strh	r3, [r2, #0]
 800fad2:	e0a3      	b.n	800fc1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	4413      	add	r3, r2
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d01b      	beq.n	800fb24 <USB_DeactivateEndpoint+0x2d4>
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	441a      	add	r2, r3
 800fb0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fb10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	4413      	add	r3, r2
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fb32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d01b      	beq.n	800fb74 <USB_DeactivateEndpoint+0x324>
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb52:	853b      	strh	r3, [r7, #40]	; 0x28
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	441a      	add	r2, r3
 800fb5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	441a      	add	r2, r3
 800fb96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	441a      	add	r2, r3
 800fbce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	4413      	add	r3, r2
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbfa:	847b      	strh	r3, [r7, #34]	; 0x22
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	441a      	add	r2, r3
 800fc06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3734      	adds	r7, #52	; 0x34
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b0c2      	sub	sp, #264	; 0x108
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc38:	6018      	str	r0, [r3, #0]
 800fc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc42:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	785b      	ldrb	r3, [r3, #1]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	f040 86b7 	bne.w	80109c4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fc56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	699a      	ldr	r2, [r3, #24]
 800fc62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d908      	bls.n	800fc84 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800fc72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fc82:	e007      	b.n	800fc94 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800fc84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	699b      	ldr	r3, [r3, #24]
 800fc90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800fc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	7b1b      	ldrb	r3, [r3, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d13a      	bne.n	800fd1a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6959      	ldr	r1, [r3, #20]
 800fcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	88da      	ldrh	r2, [r3, #6]
 800fcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fcc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fcca:	6800      	ldr	r0, [r0, #0]
 800fccc:	f001 fc98 	bl	8011600 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fcd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	613b      	str	r3, [r7, #16]
 800fcdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	461a      	mov	r2, r3
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]
 800fcf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	00da      	lsls	r2, r3, #3
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	4413      	add	r3, r2
 800fd06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	801a      	strh	r2, [r3, #0]
 800fd16:	f000 be1f 	b.w	8010958 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fd1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	78db      	ldrb	r3, [r3, #3]
 800fd26:	2b02      	cmp	r3, #2
 800fd28:	f040 8462 	bne.w	80105f0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	6a1a      	ldr	r2, [r3, #32]
 800fd38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	f240 83df 	bls.w	8010508 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fd74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	441a      	add	r2, r3
 800fd8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fd92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6a1a      	ldr	r2, [r3, #32]
 800fdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdb6:	1ad2      	subs	r2, r2, r3
 800fdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fdc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4413      	add	r3, r2
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 81c7 	beq.w	801017a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fdec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	633b      	str	r3, [r7, #48]	; 0x30
 800fdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	785b      	ldrb	r3, [r3, #1]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d177      	bne.n	800fef8 <USB_EPStartXfer+0x2ce>
 800fe08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	461a      	mov	r2, r3
 800fe26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe28:	4413      	add	r3, r2
 800fe2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	00da      	lsls	r2, r3, #3
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe42:	627b      	str	r3, [r7, #36]	; 0x24
 800fe44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe46:	881b      	ldrh	r3, [r3, #0]
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	801a      	strh	r2, [r3, #0]
 800fe54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe58:	2b3e      	cmp	r3, #62	; 0x3e
 800fe5a:	d921      	bls.n	800fea0 <USB_EPStartXfer+0x276>
 800fe5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe60:	095b      	lsrs	r3, r3, #5
 800fe62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fe66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe6a:	f003 031f 	and.w	r3, r3, #31
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d104      	bne.n	800fe7c <USB_EPStartXfer+0x252>
 800fe72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fe76:	3b01      	subs	r3, #1
 800fe78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	029b      	lsls	r3, r3, #10
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9c:	801a      	strh	r2, [r3, #0]
 800fe9e:	e050      	b.n	800ff42 <USB_EPStartXfer+0x318>
 800fea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10a      	bne.n	800febe <USB_EPStartXfer+0x294>
 800fea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	b29b      	uxth	r3, r3
 800feae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800feb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	801a      	strh	r2, [r3, #0]
 800febc:	e041      	b.n	800ff42 <USB_EPStartXfer+0x318>
 800febe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fec2:	085b      	lsrs	r3, r3, #1
 800fec4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fecc:	f003 0301 	and.w	r3, r3, #1
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <USB_EPStartXfer+0x2b4>
 800fed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fed8:	3301      	adds	r3, #1
 800feda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fee8:	b29b      	uxth	r3, r3
 800feea:	029b      	lsls	r3, r3, #10
 800feec:	b29b      	uxth	r3, r3
 800feee:	4313      	orrs	r3, r2
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef4:	801a      	strh	r2, [r3, #0]
 800fef6:	e024      	b.n	800ff42 <USB_EPStartXfer+0x318>
 800fef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fefc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	785b      	ldrb	r3, [r3, #1]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d11c      	bne.n	800ff42 <USB_EPStartXfer+0x318>
 800ff08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	461a      	mov	r2, r3
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1c:	4413      	add	r3, r2
 800ff1e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	00da      	lsls	r2, r3, #3
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	4413      	add	r3, r2
 800ff32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ff36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ff42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	895b      	ldrh	r3, [r3, #10]
 800ff4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ff52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	6959      	ldr	r1, [r3, #20]
 800ff5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ff68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ff6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ff70:	6800      	ldr	r0, [r0, #0]
 800ff72:	f001 fb45 	bl	8011600 <USB_WritePMA>
            ep->xfer_buff += len;
 800ff76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	695a      	ldr	r2, [r3, #20]
 800ff82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff86:	441a      	add	r2, r3
 800ff88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ff94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	6a1a      	ldr	r2, [r3, #32]
 800ffa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d90f      	bls.n	800ffd0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ffb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	6a1a      	ldr	r2, [r3, #32]
 800ffbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffc0:	1ad2      	subs	r2, r2, r3
 800ffc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	621a      	str	r2, [r3, #32]
 800ffce:	e00e      	b.n	800ffee <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ffd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	6a1b      	ldr	r3, [r3, #32]
 800ffdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ffe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2200      	movs	r2, #0
 800ffec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ffee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	785b      	ldrb	r3, [r3, #1]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d177      	bne.n	80100ee <USB_EPStartXfer+0x4c4>
 800fffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	61bb      	str	r3, [r7, #24]
 801000a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801000e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010018:	b29b      	uxth	r3, r3
 801001a:	461a      	mov	r2, r3
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	4413      	add	r3, r2
 8010020:	61bb      	str	r3, [r7, #24]
 8010022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	00da      	lsls	r2, r3, #3
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	4413      	add	r3, r2
 8010034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010038:	617b      	str	r3, [r7, #20]
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	881b      	ldrh	r3, [r3, #0]
 801003e:	b29b      	uxth	r3, r3
 8010040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010044:	b29a      	uxth	r2, r3
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	801a      	strh	r2, [r3, #0]
 801004a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801004e:	2b3e      	cmp	r3, #62	; 0x3e
 8010050:	d921      	bls.n	8010096 <USB_EPStartXfer+0x46c>
 8010052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010056:	095b      	lsrs	r3, r3, #5
 8010058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801005c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010060:	f003 031f 	and.w	r3, r3, #31
 8010064:	2b00      	cmp	r3, #0
 8010066:	d104      	bne.n	8010072 <USB_EPStartXfer+0x448>
 8010068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801006c:	3b01      	subs	r3, #1
 801006e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	b29a      	uxth	r2, r3
 8010078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801007c:	b29b      	uxth	r3, r3
 801007e:	029b      	lsls	r3, r3, #10
 8010080:	b29b      	uxth	r3, r3
 8010082:	4313      	orrs	r3, r2
 8010084:	b29b      	uxth	r3, r3
 8010086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801008a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801008e:	b29a      	uxth	r2, r3
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	801a      	strh	r2, [r3, #0]
 8010094:	e056      	b.n	8010144 <USB_EPStartXfer+0x51a>
 8010096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801009a:	2b00      	cmp	r3, #0
 801009c:	d10a      	bne.n	80100b4 <USB_EPStartXfer+0x48a>
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	881b      	ldrh	r3, [r3, #0]
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	801a      	strh	r2, [r3, #0]
 80100b2:	e047      	b.n	8010144 <USB_EPStartXfer+0x51a>
 80100b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100b8:	085b      	lsrs	r3, r3, #1
 80100ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80100be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d004      	beq.n	80100d4 <USB_EPStartXfer+0x4aa>
 80100ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80100ce:	3301      	adds	r3, #1
 80100d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	b29a      	uxth	r2, r3
 80100da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80100de:	b29b      	uxth	r3, r3
 80100e0:	029b      	lsls	r3, r3, #10
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	4313      	orrs	r3, r2
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	801a      	strh	r2, [r3, #0]
 80100ec:	e02a      	b.n	8010144 <USB_EPStartXfer+0x51a>
 80100ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	785b      	ldrb	r3, [r3, #1]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d122      	bne.n	8010144 <USB_EPStartXfer+0x51a>
 80100fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	623b      	str	r3, [r7, #32]
 801010a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801010e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010118:	b29b      	uxth	r3, r3
 801011a:	461a      	mov	r2, r3
 801011c:	6a3b      	ldr	r3, [r7, #32]
 801011e:	4413      	add	r3, r2
 8010120:	623b      	str	r3, [r7, #32]
 8010122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	00da      	lsls	r2, r3, #3
 8010130:	6a3b      	ldr	r3, [r7, #32]
 8010132:	4413      	add	r3, r2
 8010134:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010138:	61fb      	str	r3, [r7, #28]
 801013a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801013e:	b29a      	uxth	r2, r3
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	891b      	ldrh	r3, [r3, #8]
 8010150:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	6959      	ldr	r1, [r3, #20]
 8010160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010164:	b29b      	uxth	r3, r3
 8010166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801016a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801016e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010172:	6800      	ldr	r0, [r0, #0]
 8010174:	f001 fa44 	bl	8011600 <USB_WritePMA>
 8010178:	e3ee      	b.n	8010958 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801017a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801017e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	785b      	ldrb	r3, [r3, #1]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d177      	bne.n	801027a <USB_EPStartXfer+0x650>
 801018a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801018e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	64bb      	str	r3, [r7, #72]	; 0x48
 8010196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801019a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	461a      	mov	r2, r3
 80101a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101aa:	4413      	add	r3, r2
 80101ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80101ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	00da      	lsls	r2, r3, #3
 80101bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101be:	4413      	add	r3, r2
 80101c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80101c4:	647b      	str	r3, [r7, #68]	; 0x44
 80101c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101c8:	881b      	ldrh	r3, [r3, #0]
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d4:	801a      	strh	r2, [r3, #0]
 80101d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101da:	2b3e      	cmp	r3, #62	; 0x3e
 80101dc:	d921      	bls.n	8010222 <USB_EPStartXfer+0x5f8>
 80101de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101e2:	095b      	lsrs	r3, r3, #5
 80101e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80101e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101ec:	f003 031f 	and.w	r3, r3, #31
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d104      	bne.n	80101fe <USB_EPStartXfer+0x5d4>
 80101f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80101f8:	3b01      	subs	r3, #1
 80101fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80101fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	b29a      	uxth	r2, r3
 8010204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010208:	b29b      	uxth	r3, r3
 801020a:	029b      	lsls	r3, r3, #10
 801020c:	b29b      	uxth	r3, r3
 801020e:	4313      	orrs	r3, r2
 8010210:	b29b      	uxth	r3, r3
 8010212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801021a:	b29a      	uxth	r2, r3
 801021c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801021e:	801a      	strh	r2, [r3, #0]
 8010220:	e056      	b.n	80102d0 <USB_EPStartXfer+0x6a6>
 8010222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10a      	bne.n	8010240 <USB_EPStartXfer+0x616>
 801022a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801022c:	881b      	ldrh	r3, [r3, #0]
 801022e:	b29b      	uxth	r3, r3
 8010230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010238:	b29a      	uxth	r2, r3
 801023a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801023c:	801a      	strh	r2, [r3, #0]
 801023e:	e047      	b.n	80102d0 <USB_EPStartXfer+0x6a6>
 8010240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010244:	085b      	lsrs	r3, r3, #1
 8010246:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801024a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <USB_EPStartXfer+0x636>
 8010256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801025a:	3301      	adds	r3, #1
 801025c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	b29a      	uxth	r2, r3
 8010266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801026a:	b29b      	uxth	r3, r3
 801026c:	029b      	lsls	r3, r3, #10
 801026e:	b29b      	uxth	r3, r3
 8010270:	4313      	orrs	r3, r2
 8010272:	b29a      	uxth	r2, r3
 8010274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010276:	801a      	strh	r2, [r3, #0]
 8010278:	e02a      	b.n	80102d0 <USB_EPStartXfer+0x6a6>
 801027a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801027e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	785b      	ldrb	r3, [r3, #1]
 8010286:	2b01      	cmp	r3, #1
 8010288:	d122      	bne.n	80102d0 <USB_EPStartXfer+0x6a6>
 801028a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801028e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	653b      	str	r3, [r7, #80]	; 0x50
 8010296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801029a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	461a      	mov	r2, r3
 80102a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102aa:	4413      	add	r3, r2
 80102ac:	653b      	str	r3, [r7, #80]	; 0x50
 80102ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	00da      	lsls	r2, r3, #3
 80102bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102be:	4413      	add	r3, r2
 80102c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80102c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80102d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	891b      	ldrh	r3, [r3, #8]
 80102dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80102e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	6959      	ldr	r1, [r3, #20]
 80102ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80102f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80102fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80102fe:	6800      	ldr	r0, [r0, #0]
 8010300:	f001 f97e 	bl	8011600 <USB_WritePMA>
            ep->xfer_buff += len;
 8010304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	695a      	ldr	r2, [r3, #20]
 8010310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010314:	441a      	add	r2, r3
 8010316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801031a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6a1a      	ldr	r2, [r3, #32]
 801032e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	429a      	cmp	r2, r3
 801033c:	d90f      	bls.n	801035e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 801033e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	6a1a      	ldr	r2, [r3, #32]
 801034a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801034e:	1ad2      	subs	r2, r2, r3
 8010350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	621a      	str	r2, [r3, #32]
 801035c:	e00e      	b.n	801037c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 801035e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	6a1b      	ldr	r3, [r3, #32]
 801036a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801036e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2200      	movs	r2, #0
 801037a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801037c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	643b      	str	r3, [r7, #64]	; 0x40
 8010388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801038c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	785b      	ldrb	r3, [r3, #1]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d177      	bne.n	8010488 <USB_EPStartXfer+0x85e>
 8010398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80103a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	461a      	mov	r2, r3
 80103b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b8:	4413      	add	r3, r2
 80103ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80103bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	00da      	lsls	r2, r3, #3
 80103ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103cc:	4413      	add	r3, r2
 80103ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80103d2:	637b      	str	r3, [r7, #52]	; 0x34
 80103d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103de:	b29a      	uxth	r2, r3
 80103e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e2:	801a      	strh	r2, [r3, #0]
 80103e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103e8:	2b3e      	cmp	r3, #62	; 0x3e
 80103ea:	d921      	bls.n	8010430 <USB_EPStartXfer+0x806>
 80103ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103f0:	095b      	lsrs	r3, r3, #5
 80103f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80103f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103fa:	f003 031f 	and.w	r3, r3, #31
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d104      	bne.n	801040c <USB_EPStartXfer+0x7e2>
 8010402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010406:	3b01      	subs	r3, #1
 8010408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	b29a      	uxth	r2, r3
 8010412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010416:	b29b      	uxth	r3, r3
 8010418:	029b      	lsls	r3, r3, #10
 801041a:	b29b      	uxth	r3, r3
 801041c:	4313      	orrs	r3, r2
 801041e:	b29b      	uxth	r3, r3
 8010420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010428:	b29a      	uxth	r2, r3
 801042a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801042c:	801a      	strh	r2, [r3, #0]
 801042e:	e050      	b.n	80104d2 <USB_EPStartXfer+0x8a8>
 8010430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10a      	bne.n	801044e <USB_EPStartXfer+0x824>
 8010438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	b29b      	uxth	r3, r3
 801043e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010446:	b29a      	uxth	r2, r3
 8010448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801044a:	801a      	strh	r2, [r3, #0]
 801044c:	e041      	b.n	80104d2 <USB_EPStartXfer+0x8a8>
 801044e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010452:	085b      	lsrs	r3, r3, #1
 8010454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801045c:	f003 0301 	and.w	r3, r3, #1
 8010460:	2b00      	cmp	r3, #0
 8010462:	d004      	beq.n	801046e <USB_EPStartXfer+0x844>
 8010464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010468:	3301      	adds	r3, #1
 801046a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801046e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010470:	881b      	ldrh	r3, [r3, #0]
 8010472:	b29a      	uxth	r2, r3
 8010474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010478:	b29b      	uxth	r3, r3
 801047a:	029b      	lsls	r3, r3, #10
 801047c:	b29b      	uxth	r3, r3
 801047e:	4313      	orrs	r3, r2
 8010480:	b29a      	uxth	r2, r3
 8010482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010484:	801a      	strh	r2, [r3, #0]
 8010486:	e024      	b.n	80104d2 <USB_EPStartXfer+0x8a8>
 8010488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801048c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	785b      	ldrb	r3, [r3, #1]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d11c      	bne.n	80104d2 <USB_EPStartXfer+0x8a8>
 8010498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801049c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	461a      	mov	r2, r3
 80104aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ac:	4413      	add	r3, r2
 80104ae:	643b      	str	r3, [r7, #64]	; 0x40
 80104b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	00da      	lsls	r2, r3, #3
 80104be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104c0:	4413      	add	r3, r2
 80104c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80104c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104cc:	b29a      	uxth	r2, r3
 80104ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80104d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	895b      	ldrh	r3, [r3, #10]
 80104de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80104e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6959      	ldr	r1, [r3, #20]
 80104ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80104f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80104fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010500:	6800      	ldr	r0, [r0, #0]
 8010502:	f001 f87d 	bl	8011600 <USB_WritePMA>
 8010506:	e227      	b.n	8010958 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801050c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	6a1b      	ldr	r3, [r3, #32]
 8010514:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801051c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	4413      	add	r3, r2
 8010532:	881b      	ldrh	r3, [r3, #0]
 8010534:	b29b      	uxth	r3, r3
 8010536:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801053a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801053e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	441a      	add	r2, r3
 801055c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801056c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010570:	b29b      	uxth	r3, r3
 8010572:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801058e:	b29b      	uxth	r3, r3
 8010590:	461a      	mov	r2, r3
 8010592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010594:	4413      	add	r3, r2
 8010596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801059c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	00da      	lsls	r2, r3, #3
 80105a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105a8:	4413      	add	r3, r2
 80105aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80105ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80105b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80105ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	891b      	ldrh	r3, [r3, #8]
 80105c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	6959      	ldr	r1, [r3, #20]
 80105d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105da:	b29b      	uxth	r3, r3
 80105dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80105e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80105e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80105e8:	6800      	ldr	r0, [r0, #0]
 80105ea:	f001 f809 	bl	8011600 <USB_WritePMA>
 80105ee:	e1b3      	b.n	8010958 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80105f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	6a1a      	ldr	r2, [r3, #32]
 80105fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010600:	1ad2      	subs	r2, r2, r3
 8010602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801060e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	009b      	lsls	r3, r3, #2
 8010626:	4413      	add	r3, r2
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	b29b      	uxth	r3, r3
 801062c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 80c6 	beq.w	80107c2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801063a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	673b      	str	r3, [r7, #112]	; 0x70
 8010642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	785b      	ldrb	r3, [r3, #1]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d177      	bne.n	8010742 <USB_EPStartXfer+0xb18>
 8010652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	66bb      	str	r3, [r7, #104]	; 0x68
 801065e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801066c:	b29b      	uxth	r3, r3
 801066e:	461a      	mov	r2, r3
 8010670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010672:	4413      	add	r3, r2
 8010674:	66bb      	str	r3, [r7, #104]	; 0x68
 8010676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801067a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	00da      	lsls	r2, r3, #3
 8010684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010686:	4413      	add	r3, r2
 8010688:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801068c:	667b      	str	r3, [r7, #100]	; 0x64
 801068e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	b29b      	uxth	r3, r3
 8010694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010698:	b29a      	uxth	r2, r3
 801069a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801069c:	801a      	strh	r2, [r3, #0]
 801069e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106a2:	2b3e      	cmp	r3, #62	; 0x3e
 80106a4:	d921      	bls.n	80106ea <USB_EPStartXfer+0xac0>
 80106a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106aa:	095b      	lsrs	r3, r3, #5
 80106ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80106b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106b4:	f003 031f 	and.w	r3, r3, #31
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d104      	bne.n	80106c6 <USB_EPStartXfer+0xa9c>
 80106bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80106c0:	3b01      	subs	r3, #1
 80106c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80106c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	029b      	lsls	r3, r3, #10
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	4313      	orrs	r3, r2
 80106d8:	b29b      	uxth	r3, r3
 80106da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106e6:	801a      	strh	r2, [r3, #0]
 80106e8:	e050      	b.n	801078c <USB_EPStartXfer+0xb62>
 80106ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d10a      	bne.n	8010708 <USB_EPStartXfer+0xade>
 80106f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010700:	b29a      	uxth	r2, r3
 8010702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010704:	801a      	strh	r2, [r3, #0]
 8010706:	e041      	b.n	801078c <USB_EPStartXfer+0xb62>
 8010708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801070c:	085b      	lsrs	r3, r3, #1
 801070e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <USB_EPStartXfer+0xafe>
 801071e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010722:	3301      	adds	r3, #1
 8010724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	b29a      	uxth	r2, r3
 801072e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010732:	b29b      	uxth	r3, r3
 8010734:	029b      	lsls	r3, r3, #10
 8010736:	b29b      	uxth	r3, r3
 8010738:	4313      	orrs	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801073e:	801a      	strh	r2, [r3, #0]
 8010740:	e024      	b.n	801078c <USB_EPStartXfer+0xb62>
 8010742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	785b      	ldrb	r3, [r3, #1]
 801074e:	2b01      	cmp	r3, #1
 8010750:	d11c      	bne.n	801078c <USB_EPStartXfer+0xb62>
 8010752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010760:	b29b      	uxth	r3, r3
 8010762:	461a      	mov	r2, r3
 8010764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010766:	4413      	add	r3, r2
 8010768:	673b      	str	r3, [r7, #112]	; 0x70
 801076a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801076e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	00da      	lsls	r2, r3, #3
 8010778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801077a:	4413      	add	r3, r2
 801077c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010780:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010786:	b29a      	uxth	r2, r3
 8010788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801078a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801078c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	895b      	ldrh	r3, [r3, #10]
 8010798:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801079c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	6959      	ldr	r1, [r3, #20]
 80107a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80107b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80107b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80107ba:	6800      	ldr	r0, [r0, #0]
 80107bc:	f000 ff20 	bl	8011600 <USB_WritePMA>
 80107c0:	e0ca      	b.n	8010958 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80107c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	785b      	ldrb	r3, [r3, #1]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d177      	bne.n	80108c2 <USB_EPStartXfer+0xc98>
 80107d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80107de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	461a      	mov	r2, r3
 80107f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80107f2:	4413      	add	r3, r2
 80107f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80107f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	00da      	lsls	r2, r3, #3
 8010804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010806:	4413      	add	r3, r2
 8010808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801080c:	67bb      	str	r3, [r7, #120]	; 0x78
 801080e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010810:	881b      	ldrh	r3, [r3, #0]
 8010812:	b29b      	uxth	r3, r3
 8010814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010818:	b29a      	uxth	r2, r3
 801081a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801081c:	801a      	strh	r2, [r3, #0]
 801081e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010822:	2b3e      	cmp	r3, #62	; 0x3e
 8010824:	d921      	bls.n	801086a <USB_EPStartXfer+0xc40>
 8010826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801082a:	095b      	lsrs	r3, r3, #5
 801082c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010834:	f003 031f 	and.w	r3, r3, #31
 8010838:	2b00      	cmp	r3, #0
 801083a:	d104      	bne.n	8010846 <USB_EPStartXfer+0xc1c>
 801083c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010840:	3b01      	subs	r3, #1
 8010842:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	b29a      	uxth	r2, r3
 801084c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010850:	b29b      	uxth	r3, r3
 8010852:	029b      	lsls	r3, r3, #10
 8010854:	b29b      	uxth	r3, r3
 8010856:	4313      	orrs	r3, r2
 8010858:	b29b      	uxth	r3, r3
 801085a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801085e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010862:	b29a      	uxth	r2, r3
 8010864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010866:	801a      	strh	r2, [r3, #0]
 8010868:	e05c      	b.n	8010924 <USB_EPStartXfer+0xcfa>
 801086a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801086e:	2b00      	cmp	r3, #0
 8010870:	d10a      	bne.n	8010888 <USB_EPStartXfer+0xc5e>
 8010872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	b29b      	uxth	r3, r3
 8010878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801087c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010880:	b29a      	uxth	r2, r3
 8010882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010884:	801a      	strh	r2, [r3, #0]
 8010886:	e04d      	b.n	8010924 <USB_EPStartXfer+0xcfa>
 8010888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801088c:	085b      	lsrs	r3, r3, #1
 801088e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010896:	f003 0301 	and.w	r3, r3, #1
 801089a:	2b00      	cmp	r3, #0
 801089c:	d004      	beq.n	80108a8 <USB_EPStartXfer+0xc7e>
 801089e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80108a2:	3301      	adds	r3, #1
 80108a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80108a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	029b      	lsls	r3, r3, #10
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4313      	orrs	r3, r2
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108be:	801a      	strh	r2, [r3, #0]
 80108c0:	e030      	b.n	8010924 <USB_EPStartXfer+0xcfa>
 80108c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	785b      	ldrb	r3, [r3, #1]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d128      	bne.n	8010924 <USB_EPStartXfer+0xcfa>
 80108d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80108e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	461a      	mov	r2, r3
 80108f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108f6:	4413      	add	r3, r2
 80108f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80108fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	00da      	lsls	r2, r3, #3
 801090a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801090e:	4413      	add	r3, r2
 8010910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801091c:	b29a      	uxth	r2, r3
 801091e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010922:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	891b      	ldrh	r3, [r3, #8]
 8010930:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	6959      	ldr	r1, [r3, #20]
 8010940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010944:	b29b      	uxth	r3, r3
 8010946:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801094a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801094e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010952:	6800      	ldr	r0, [r0, #0]
 8010954:	f000 fe54 	bl	8011600 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4413      	add	r3, r2
 8010972:	881b      	ldrh	r3, [r3, #0]
 8010974:	b29b      	uxth	r3, r3
 8010976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801097a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801097e:	817b      	strh	r3, [r7, #10]
 8010980:	897b      	ldrh	r3, [r7, #10]
 8010982:	f083 0310 	eor.w	r3, r3, #16
 8010986:	817b      	strh	r3, [r7, #10]
 8010988:	897b      	ldrh	r3, [r7, #10]
 801098a:	f083 0320 	eor.w	r3, r3, #32
 801098e:	817b      	strh	r3, [r7, #10]
 8010990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801099e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	441a      	add	r2, r3
 80109aa:	897b      	ldrh	r3, [r7, #10]
 80109ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109bc:	b29b      	uxth	r3, r3
 80109be:	8013      	strh	r3, [r2, #0]
 80109c0:	f000 bcde 	b.w	8011380 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80109c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	7b1b      	ldrb	r3, [r3, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f040 80bb 	bne.w	8010b4c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80109d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	699a      	ldr	r2, [r3, #24]
 80109e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d917      	bls.n	8010a22 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80109f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	691b      	ldr	r3, [r3, #16]
 80109fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	699a      	ldr	r2, [r3, #24]
 8010a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a12:	1ad2      	subs	r2, r2, r3
 8010a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	619a      	str	r2, [r3, #24]
 8010a20:	e00e      	b.n	8010a40 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8010a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	699b      	ldr	r3, [r3, #24]
 8010a2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	461a      	mov	r2, r3
 8010a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a64:	4413      	add	r3, r2
 8010a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	00da      	lsls	r2, r3, #3
 8010a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a7c:	4413      	add	r3, r2
 8010a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a8a:	881b      	ldrh	r3, [r3, #0]
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a98:	801a      	strh	r2, [r3, #0]
 8010a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8010aa0:	d924      	bls.n	8010aec <USB_EPStartXfer+0xec2>
 8010aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aa6:	095b      	lsrs	r3, r3, #5
 8010aa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ab0:	f003 031f 	and.w	r3, r3, #31
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d104      	bne.n	8010ac2 <USB_EPStartXfer+0xe98>
 8010ab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010abc:	3b01      	subs	r3, #1
 8010abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ac6:	881b      	ldrh	r3, [r3, #0]
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	029b      	lsls	r3, r3, #10
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ae6:	801a      	strh	r2, [r3, #0]
 8010ae8:	f000 bc10 	b.w	801130c <USB_EPStartXfer+0x16e2>
 8010aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10c      	bne.n	8010b0e <USB_EPStartXfer+0xee4>
 8010af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010af8:	881b      	ldrh	r3, [r3, #0]
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b0a:	801a      	strh	r2, [r3, #0]
 8010b0c:	e3fe      	b.n	801130c <USB_EPStartXfer+0x16e2>
 8010b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b12:	085b      	lsrs	r3, r3, #1
 8010b14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <USB_EPStartXfer+0xf04>
 8010b24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b28:	3301      	adds	r3, #1
 8010b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	029b      	lsls	r3, r3, #10
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	4313      	orrs	r3, r2
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b48:	801a      	strh	r2, [r3, #0]
 8010b4a:	e3df      	b.n	801130c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	78db      	ldrb	r3, [r3, #3]
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	f040 8218 	bne.w	8010f8e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	785b      	ldrb	r3, [r3, #1]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f040 809d 	bne.w	8010caa <USB_EPStartXfer+0x1080>
 8010b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	461a      	mov	r2, r3
 8010b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b94:	4413      	add	r3, r2
 8010b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	00da      	lsls	r2, r3, #3
 8010ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010bac:	4413      	add	r3, r2
 8010bae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bba:	881b      	ldrh	r3, [r3, #0]
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bc8:	801a      	strh	r2, [r3, #0]
 8010bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8010bd8:	d92b      	bls.n	8010c32 <USB_EPStartXfer+0x1008>
 8010bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	095b      	lsrs	r3, r3, #5
 8010be8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	691b      	ldr	r3, [r3, #16]
 8010bf8:	f003 031f 	and.w	r3, r3, #31
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d104      	bne.n	8010c0a <USB_EPStartXfer+0xfe0>
 8010c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c04:	3b01      	subs	r3, #1
 8010c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	029b      	lsls	r3, r3, #10
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c2e:	801a      	strh	r2, [r3, #0]
 8010c30:	e070      	b.n	8010d14 <USB_EPStartXfer+0x10ea>
 8010c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d10c      	bne.n	8010c5c <USB_EPStartXfer+0x1032>
 8010c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c58:	801a      	strh	r2, [r3, #0]
 8010c5a:	e05b      	b.n	8010d14 <USB_EPStartXfer+0x10ea>
 8010c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	085b      	lsrs	r3, r3, #1
 8010c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	691b      	ldr	r3, [r3, #16]
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d004      	beq.n	8010c8c <USB_EPStartXfer+0x1062>
 8010c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c86:	3301      	adds	r3, #1
 8010c88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c90:	881b      	ldrh	r3, [r3, #0]
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	029b      	lsls	r3, r3, #10
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ca6:	801a      	strh	r2, [r3, #0]
 8010ca8:	e034      	b.n	8010d14 <USB_EPStartXfer+0x10ea>
 8010caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	785b      	ldrb	r3, [r3, #1]
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d12c      	bne.n	8010d14 <USB_EPStartXfer+0x10ea>
 8010cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	461a      	mov	r2, r3
 8010cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cde:	4413      	add	r3, r2
 8010ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	00da      	lsls	r2, r3, #3
 8010cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	691b      	ldr	r3, [r3, #16]
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010d12:	801a      	strh	r2, [r3, #0]
 8010d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	785b      	ldrb	r3, [r3, #1]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	f040 809d 	bne.w	8010e6e <USB_EPStartXfer+0x1244>
 8010d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	461a      	mov	r2, r3
 8010d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d58:	4413      	add	r3, r2
 8010d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	00da      	lsls	r2, r3, #3
 8010d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d70:	4413      	add	r3, r2
 8010d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d8c:	801a      	strh	r2, [r3, #0]
 8010d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8010d9c:	d92b      	bls.n	8010df6 <USB_EPStartXfer+0x11cc>
 8010d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	691b      	ldr	r3, [r3, #16]
 8010daa:	095b      	lsrs	r3, r3, #5
 8010dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	f003 031f 	and.w	r3, r3, #31
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d104      	bne.n	8010dce <USB_EPStartXfer+0x11a4>
 8010dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010dd2:	881b      	ldrh	r3, [r3, #0]
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	029b      	lsls	r3, r3, #10
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4313      	orrs	r3, r2
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010df2:	801a      	strh	r2, [r3, #0]
 8010df4:	e069      	b.n	8010eca <USB_EPStartXfer+0x12a0>
 8010df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d10c      	bne.n	8010e20 <USB_EPStartXfer+0x11f6>
 8010e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e0a:	881b      	ldrh	r3, [r3, #0]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e1c:	801a      	strh	r2, [r3, #0]
 8010e1e:	e054      	b.n	8010eca <USB_EPStartXfer+0x12a0>
 8010e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	085b      	lsrs	r3, r3, #1
 8010e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	691b      	ldr	r3, [r3, #16]
 8010e3e:	f003 0301 	and.w	r3, r3, #1
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d004      	beq.n	8010e50 <USB_EPStartXfer+0x1226>
 8010e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e54:	881b      	ldrh	r3, [r3, #0]
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	029b      	lsls	r3, r3, #10
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	4313      	orrs	r3, r2
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e6a:	801a      	strh	r2, [r3, #0]
 8010e6c:	e02d      	b.n	8010eca <USB_EPStartXfer+0x12a0>
 8010e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	785b      	ldrb	r3, [r3, #1]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d125      	bne.n	8010eca <USB_EPStartXfer+0x12a0>
 8010e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	461a      	mov	r2, r3
 8010e90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010e94:	4413      	add	r3, r2
 8010e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	00da      	lsls	r2, r3, #3
 8010ea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010eac:	4413      	add	r3, r2
 8010eae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	691b      	ldr	r3, [r3, #16]
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ec8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	69db      	ldr	r3, [r3, #28]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 8218 	beq.w	801130c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4413      	add	r3, r2
 8010ef6:	881b      	ldrh	r3, [r3, #0]
 8010ef8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010efc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d005      	beq.n	8010f14 <USB_EPStartXfer+0x12ea>
 8010f08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d10d      	bne.n	8010f30 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010f14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f040 81f5 	bne.w	801130c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010f22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f040 81ee 	bne.w	801130c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f56:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	441a      	add	r2, r3
 8010f74:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	8013      	strh	r3, [r2, #0]
 8010f8c:	e1be      	b.n	801130c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	78db      	ldrb	r3, [r3, #3]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	f040 81b4 	bne.w	8011308 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	699a      	ldr	r2, [r3, #24]
 8010fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	691b      	ldr	r3, [r3, #16]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d917      	bls.n	8010fec <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8010fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	691b      	ldr	r3, [r3, #16]
 8010fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	699a      	ldr	r2, [r3, #24]
 8010fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fdc:	1ad2      	subs	r2, r2, r3
 8010fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	619a      	str	r2, [r3, #24]
 8010fea:	e00e      	b.n	801100a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	699b      	ldr	r3, [r3, #24]
 8010ff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2200      	movs	r2, #0
 8011008:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801100a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801100e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	785b      	ldrb	r3, [r3, #1]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f040 8085 	bne.w	8011126 <USB_EPStartXfer+0x14fc>
 801101c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801102a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801102e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011038:	b29b      	uxth	r3, r3
 801103a:	461a      	mov	r2, r3
 801103c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011040:	4413      	add	r3, r2
 8011042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801104a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	00da      	lsls	r2, r3, #3
 8011054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011058:	4413      	add	r3, r2
 801105a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801105e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	b29b      	uxth	r3, r3
 801106a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801106e:	b29a      	uxth	r2, r3
 8011070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011074:	801a      	strh	r2, [r3, #0]
 8011076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801107a:	2b3e      	cmp	r3, #62	; 0x3e
 801107c:	d923      	bls.n	80110c6 <USB_EPStartXfer+0x149c>
 801107e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011082:	095b      	lsrs	r3, r3, #5
 8011084:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801108c:	f003 031f 	and.w	r3, r3, #31
 8011090:	2b00      	cmp	r3, #0
 8011092:	d104      	bne.n	801109e <USB_EPStartXfer+0x1474>
 8011094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011098:	3b01      	subs	r3, #1
 801109a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801109e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80110a2:	881b      	ldrh	r3, [r3, #0]
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	029b      	lsls	r3, r3, #10
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	4313      	orrs	r3, r2
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110bc:	b29a      	uxth	r2, r3
 80110be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80110c2:	801a      	strh	r2, [r3, #0]
 80110c4:	e060      	b.n	8011188 <USB_EPStartXfer+0x155e>
 80110c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d10c      	bne.n	80110e8 <USB_EPStartXfer+0x14be>
 80110ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110de:	b29a      	uxth	r2, r3
 80110e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80110e4:	801a      	strh	r2, [r3, #0]
 80110e6:	e04f      	b.n	8011188 <USB_EPStartXfer+0x155e>
 80110e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110ec:	085b      	lsrs	r3, r3, #1
 80110ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80110f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d004      	beq.n	8011108 <USB_EPStartXfer+0x14de>
 80110fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011102:	3301      	adds	r3, #1
 8011104:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801110c:	881b      	ldrh	r3, [r3, #0]
 801110e:	b29a      	uxth	r2, r3
 8011110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011114:	b29b      	uxth	r3, r3
 8011116:	029b      	lsls	r3, r3, #10
 8011118:	b29b      	uxth	r3, r3
 801111a:	4313      	orrs	r3, r2
 801111c:	b29a      	uxth	r2, r3
 801111e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011122:	801a      	strh	r2, [r3, #0]
 8011124:	e030      	b.n	8011188 <USB_EPStartXfer+0x155e>
 8011126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801112a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	785b      	ldrb	r3, [r3, #1]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d128      	bne.n	8011188 <USB_EPStartXfer+0x155e>
 8011136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801113a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011152:	b29b      	uxth	r3, r3
 8011154:	461a      	mov	r2, r3
 8011156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801115a:	4413      	add	r3, r2
 801115c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	00da      	lsls	r2, r3, #3
 801116e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011172:	4413      	add	r3, r2
 8011174:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801117c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011180:	b29a      	uxth	r2, r3
 8011182:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011186:	801a      	strh	r2, [r3, #0]
 8011188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801118c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801119a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	785b      	ldrb	r3, [r3, #1]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f040 8085 	bne.w	80112b2 <USB_EPStartXfer+0x1688>
 80111a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80111b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	461a      	mov	r2, r3
 80111c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80111cc:	4413      	add	r3, r2
 80111ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80111d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	00da      	lsls	r2, r3, #3
 80111e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80111e4:	4413      	add	r3, r2
 80111e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80111ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80111ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011200:	801a      	strh	r2, [r3, #0]
 8011202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011206:	2b3e      	cmp	r3, #62	; 0x3e
 8011208:	d923      	bls.n	8011252 <USB_EPStartXfer+0x1628>
 801120a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801120e:	095b      	lsrs	r3, r3, #5
 8011210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011218:	f003 031f 	and.w	r3, r3, #31
 801121c:	2b00      	cmp	r3, #0
 801121e:	d104      	bne.n	801122a <USB_EPStartXfer+0x1600>
 8011220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011224:	3b01      	subs	r3, #1
 8011226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801122a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801122e:	881b      	ldrh	r3, [r3, #0]
 8011230:	b29a      	uxth	r2, r3
 8011232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011236:	b29b      	uxth	r3, r3
 8011238:	029b      	lsls	r3, r3, #10
 801123a:	b29b      	uxth	r3, r3
 801123c:	4313      	orrs	r3, r2
 801123e:	b29b      	uxth	r3, r3
 8011240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011248:	b29a      	uxth	r2, r3
 801124a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801124e:	801a      	strh	r2, [r3, #0]
 8011250:	e05c      	b.n	801130c <USB_EPStartXfer+0x16e2>
 8011252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10c      	bne.n	8011274 <USB_EPStartXfer+0x164a>
 801125a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801125e:	881b      	ldrh	r3, [r3, #0]
 8011260:	b29b      	uxth	r3, r3
 8011262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801126a:	b29a      	uxth	r2, r3
 801126c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011270:	801a      	strh	r2, [r3, #0]
 8011272:	e04b      	b.n	801130c <USB_EPStartXfer+0x16e2>
 8011274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011278:	085b      	lsrs	r3, r3, #1
 801127a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801127e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011282:	f003 0301 	and.w	r3, r3, #1
 8011286:	2b00      	cmp	r3, #0
 8011288:	d004      	beq.n	8011294 <USB_EPStartXfer+0x166a>
 801128a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801128e:	3301      	adds	r3, #1
 8011290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011298:	881b      	ldrh	r3, [r3, #0]
 801129a:	b29a      	uxth	r2, r3
 801129c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	029b      	lsls	r3, r3, #10
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	4313      	orrs	r3, r2
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80112ae:	801a      	strh	r2, [r3, #0]
 80112b0:	e02c      	b.n	801130c <USB_EPStartXfer+0x16e2>
 80112b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	785b      	ldrb	r3, [r3, #1]
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d124      	bne.n	801130c <USB_EPStartXfer+0x16e2>
 80112c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	461a      	mov	r2, r3
 80112d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80112d8:	4413      	add	r3, r2
 80112da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80112de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	00da      	lsls	r2, r3, #3
 80112ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80112f0:	4413      	add	r3, r2
 80112f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80112f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80112fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112fe:	b29a      	uxth	r2, r3
 8011300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011304:	801a      	strh	r2, [r3, #0]
 8011306:	e001      	b.n	801130c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011308:	2301      	movs	r3, #1
 801130a:	e03a      	b.n	8011382 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801130c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011314:	681a      	ldr	r2, [r3, #0]
 8011316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801131a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	4413      	add	r3, r2
 8011326:	881b      	ldrh	r3, [r3, #0]
 8011328:	b29b      	uxth	r3, r3
 801132a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801132e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011332:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801133a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801133e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011342:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011346:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801134a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801134e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	441a      	add	r2, r3
 8011368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801136c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801137c:	b29b      	uxth	r3, r3
 801137e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011380:	2300      	movs	r3, #0
}
 8011382:	4618      	mov	r0, r3
 8011384:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801138c:	b480      	push	{r7}
 801138e:	b085      	sub	sp, #20
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	785b      	ldrb	r3, [r3, #1]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d020      	beq.n	80113e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	4413      	add	r3, r2
 80113a8:	881b      	ldrh	r3, [r3, #0]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113b4:	81bb      	strh	r3, [r7, #12]
 80113b6:	89bb      	ldrh	r3, [r7, #12]
 80113b8:	f083 0310 	eor.w	r3, r3, #16
 80113bc:	81bb      	strh	r3, [r7, #12]
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	441a      	add	r2, r3
 80113c8:	89bb      	ldrh	r3, [r7, #12]
 80113ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113da:	b29b      	uxth	r3, r3
 80113dc:	8013      	strh	r3, [r2, #0]
 80113de:	e01f      	b.n	8011420 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4413      	add	r3, r2
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80113f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113f6:	81fb      	strh	r3, [r7, #14]
 80113f8:	89fb      	ldrh	r3, [r7, #14]
 80113fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80113fe:	81fb      	strh	r3, [r7, #14]
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	441a      	add	r2, r3
 801140a:	89fb      	ldrh	r3, [r7, #14]
 801140c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801141c:	b29b      	uxth	r3, r3
 801141e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3714      	adds	r7, #20
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr

0801142e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801142e:	b480      	push	{r7}
 8011430:	b087      	sub	sp, #28
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
 8011436:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	7b1b      	ldrb	r3, [r3, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	f040 809d 	bne.w	801157c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	785b      	ldrb	r3, [r3, #1]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d04c      	beq.n	80114e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	4413      	add	r3, r2
 8011454:	881b      	ldrh	r3, [r3, #0]
 8011456:	823b      	strh	r3, [r7, #16]
 8011458:	8a3b      	ldrh	r3, [r7, #16]
 801145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801145e:	2b00      	cmp	r3, #0
 8011460:	d01b      	beq.n	801149a <USB_EPClearStall+0x6c>
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	881b      	ldrh	r3, [r3, #0]
 801146e:	b29b      	uxth	r3, r3
 8011470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011478:	81fb      	strh	r3, [r7, #14]
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	441a      	add	r2, r3
 8011484:	89fb      	ldrh	r3, [r7, #14]
 8011486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801148a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011492:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011496:	b29b      	uxth	r3, r3
 8011498:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	78db      	ldrb	r3, [r3, #3]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d06c      	beq.n	801157c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	4413      	add	r3, r2
 80114ac:	881b      	ldrh	r3, [r3, #0]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114b8:	81bb      	strh	r3, [r7, #12]
 80114ba:	89bb      	ldrh	r3, [r7, #12]
 80114bc:	f083 0320 	eor.w	r3, r3, #32
 80114c0:	81bb      	strh	r3, [r7, #12]
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	441a      	add	r2, r3
 80114cc:	89bb      	ldrh	r3, [r7, #12]
 80114ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114de:	b29b      	uxth	r3, r3
 80114e0:	8013      	strh	r3, [r2, #0]
 80114e2:	e04b      	b.n	801157c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	82fb      	strh	r3, [r7, #22]
 80114f2:	8afb      	ldrh	r3, [r7, #22]
 80114f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d01b      	beq.n	8011534 <USB_EPClearStall+0x106>
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4413      	add	r3, r2
 8011506:	881b      	ldrh	r3, [r3, #0]
 8011508:	b29b      	uxth	r3, r3
 801150a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801150e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011512:	82bb      	strh	r3, [r7, #20]
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	441a      	add	r2, r3
 801151e:	8abb      	ldrh	r3, [r7, #20]
 8011520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801152c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011530:	b29b      	uxth	r3, r3
 8011532:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	b29b      	uxth	r3, r3
 8011542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801154a:	827b      	strh	r3, [r7, #18]
 801154c:	8a7b      	ldrh	r3, [r7, #18]
 801154e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011552:	827b      	strh	r3, [r7, #18]
 8011554:	8a7b      	ldrh	r3, [r7, #18]
 8011556:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801155a:	827b      	strh	r3, [r7, #18]
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	441a      	add	r2, r3
 8011566:	8a7b      	ldrh	r3, [r7, #18]
 8011568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801156c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011578:	b29b      	uxth	r3, r3
 801157a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801157c:	2300      	movs	r3, #0
}
 801157e:	4618      	mov	r0, r3
 8011580:	371c      	adds	r7, #28
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr

0801158a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801158a:	b480      	push	{r7}
 801158c:	b083      	sub	sp, #12
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	460b      	mov	r3, r1
 8011594:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011596:	78fb      	ldrb	r3, [r7, #3]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d103      	bne.n	80115a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2280      	movs	r2, #128	; 0x80
 80115a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80115a4:	2300      	movs	r3, #0
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr

080115b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80115b2:	b480      	push	{r7}
 80115b4:	b083      	sub	sp, #12
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80115d2:	2300      	movs	r3, #0
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b085      	sub	sp, #20
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80115f2:	68fb      	ldr	r3, [r7, #12]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011600:	b480      	push	{r7}
 8011602:	b08b      	sub	sp, #44	; 0x2c
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	4611      	mov	r1, r2
 801160c:	461a      	mov	r2, r3
 801160e:	460b      	mov	r3, r1
 8011610:	80fb      	strh	r3, [r7, #6]
 8011612:	4613      	mov	r3, r2
 8011614:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011616:	88bb      	ldrh	r3, [r7, #4]
 8011618:	3301      	adds	r3, #1
 801161a:	085b      	lsrs	r3, r3, #1
 801161c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011626:	88fa      	ldrh	r2, [r7, #6]
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	4413      	add	r3, r2
 801162c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011630:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	627b      	str	r3, [r7, #36]	; 0x24
 8011636:	e01b      	b.n	8011670 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	3301      	adds	r3, #1
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	021b      	lsls	r3, r3, #8
 8011646:	b21a      	sxth	r2, r3
 8011648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801164c:	4313      	orrs	r3, r2
 801164e:	b21b      	sxth	r3, r3
 8011650:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	8a7a      	ldrh	r2, [r7, #18]
 8011656:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011658:	6a3b      	ldr	r3, [r7, #32]
 801165a:	3302      	adds	r3, #2
 801165c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	3301      	adds	r3, #1
 8011662:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	3301      	adds	r3, #1
 8011668:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166c:	3b01      	subs	r3, #1
 801166e:	627b      	str	r3, [r7, #36]	; 0x24
 8011670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011672:	2b00      	cmp	r3, #0
 8011674:	d1e0      	bne.n	8011638 <USB_WritePMA+0x38>
  }
}
 8011676:	bf00      	nop
 8011678:	bf00      	nop
 801167a:	372c      	adds	r7, #44	; 0x2c
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011684:	b480      	push	{r7}
 8011686:	b08b      	sub	sp, #44	; 0x2c
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	4611      	mov	r1, r2
 8011690:	461a      	mov	r2, r3
 8011692:	460b      	mov	r3, r1
 8011694:	80fb      	strh	r3, [r7, #6]
 8011696:	4613      	mov	r3, r2
 8011698:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801169a:	88bb      	ldrh	r3, [r7, #4]
 801169c:	085b      	lsrs	r3, r3, #1
 801169e:	b29b      	uxth	r3, r3
 80116a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80116aa:	88fa      	ldrh	r2, [r7, #6]
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	4413      	add	r3, r2
 80116b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80116b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	627b      	str	r3, [r7, #36]	; 0x24
 80116ba:	e018      	b.n	80116ee <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	881b      	ldrh	r3, [r3, #0]
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80116c4:	6a3b      	ldr	r3, [r7, #32]
 80116c6:	3302      	adds	r3, #2
 80116c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	3301      	adds	r3, #1
 80116d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	0a1b      	lsrs	r3, r3, #8
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	3301      	adds	r3, #1
 80116e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	3b01      	subs	r3, #1
 80116ec:	627b      	str	r3, [r7, #36]	; 0x24
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d1e3      	bne.n	80116bc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80116f4:	88bb      	ldrh	r3, [r7, #4]
 80116f6:	f003 0301 	and.w	r3, r3, #1
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d007      	beq.n	8011710 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011700:	6a3b      	ldr	r3, [r7, #32]
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	b29b      	uxth	r3, r3
 8011706:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	b2da      	uxtb	r2, r3
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	701a      	strb	r2, [r3, #0]
  }
}
 8011710:	bf00      	nop
 8011712:	372c      	adds	r7, #44	; 0x2c
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr

0801171c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	607a      	str	r2, [r7, #4]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 801172e:	89fb      	ldrh	r3, [r7, #14]
 8011730:	021b      	lsls	r3, r3, #8
 8011732:	b21a      	sxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	b21b      	sxth	r3, r3
 801173a:	4313      	orrs	r3, r2
 801173c:	b21b      	sxth	r3, r3
 801173e:	b29b      	uxth	r3, r3
}
 8011740:	4618      	mov	r0, r3
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 801174c:	b480      	push	{r7}
 801174e:	b085      	sub	sp, #20
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2204      	movs	r2, #4
 8011760:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2204      	movs	r2, #4
 8011766:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011770:	b29a      	uxth	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011778:	b29b      	uxth	r3, r3
 801177a:	1ad3      	subs	r3, r2, r3
 801177c:	b29b      	uxth	r3, r3
 801177e:	3b01      	subs	r3, #1
 8011780:	b29b      	uxth	r3, r3
 8011782:	b21a      	sxth	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011790:	b29a      	uxth	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011798:	b29b      	uxth	r3, r3
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	b29b      	uxth	r3, r3
 801179e:	3b01      	subs	r3, #1
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	b21a      	sxth	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2201      	movs	r2, #1
 80117c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2201      	movs	r2, #1
 80117c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2200      	movs	r2, #0
 80117d6:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2200      	movs	r2, #0
 80117f2:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2200      	movs	r2, #0
 8011804:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2200      	movs	r2, #0
 801180a:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8011812:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801181c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2200      	movs	r2, #0
 8011838:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 801183a:	2300      	movs	r3, #0
 801183c:	73fb      	strb	r3, [r7, #15]
 801183e:	e010      	b.n	8011862 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8011840:	7bfb      	ldrb	r3, [r7, #15]
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	330a      	adds	r3, #10
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	4413      	add	r3, r2
 801184a:	2200      	movs	r2, #0
 801184c:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 801184e:	7bfb      	ldrb	r3, [r7, #15]
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	330a      	adds	r3, #10
 8011854:	00db      	lsls	r3, r3, #3
 8011856:	4413      	add	r3, r2
 8011858:	2200      	movs	r2, #0
 801185a:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 801185c:	7bfb      	ldrb	r3, [r7, #15]
 801185e:	3301      	adds	r3, #1
 8011860:	73fb      	strb	r3, [r7, #15]
 8011862:	7bfb      	ldrb	r3, [r7, #15]
 8011864:	2b03      	cmp	r3, #3
 8011866:	d9eb      	bls.n	8011840 <UG_Init+0xf4>
   }

   gui = g;
 8011868:	4a04      	ldr	r2, [pc, #16]	; (801187c <UG_Init+0x130>)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6013      	str	r3, [r2, #0]
   return 1;
 801186e:	2301      	movs	r3, #1
}
 8011870:	4618      	mov	r0, r3
 8011872:	3714      	adds	r7, #20
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr
 801187c:	20002090 	.word	0x20002090

08011880 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8011888:	4b04      	ldr	r3, [pc, #16]	; (801189c <UG_FontSelect+0x1c>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011890:	bf00      	nop
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	20002090 	.word	0x20002090

080118a0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af02      	add	r7, sp, #8
 80118a6:	4603      	mov	r3, r0
 80118a8:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80118aa:	4b0e      	ldr	r3, [pc, #56]	; (80118e4 <UG_FillScreen+0x44>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	3b01      	subs	r3, #1
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	b21a      	sxth	r2, r3
 80118bc:	4b09      	ldr	r3, [pc, #36]	; (80118e4 <UG_FillScreen+0x44>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	3b01      	subs	r3, #1
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	b219      	sxth	r1, r3
 80118ce:	88fb      	ldrh	r3, [r7, #6]
 80118d0:	9300      	str	r3, [sp, #0]
 80118d2:	460b      	mov	r3, r1
 80118d4:	2100      	movs	r1, #0
 80118d6:	2000      	movs	r0, #0
 80118d8:	f000 f806 	bl	80118e8 <UG_FillFrame>
}
 80118dc:	bf00      	nop
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	20002090 	.word	0x20002090

080118e8 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80118e8:	b5b0      	push	{r4, r5, r7, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	af02      	add	r7, sp, #8
 80118ee:	4604      	mov	r4, r0
 80118f0:	4608      	mov	r0, r1
 80118f2:	4611      	mov	r1, r2
 80118f4:	461a      	mov	r2, r3
 80118f6:	4623      	mov	r3, r4
 80118f8:	80fb      	strh	r3, [r7, #6]
 80118fa:	4603      	mov	r3, r0
 80118fc:	80bb      	strh	r3, [r7, #4]
 80118fe:	460b      	mov	r3, r1
 8011900:	807b      	strh	r3, [r7, #2]
 8011902:	4613      	mov	r3, r2
 8011904:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8011906:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801190e:	429a      	cmp	r2, r3
 8011910:	da05      	bge.n	801191e <UG_FillFrame+0x36>
     swap(x1,x2);
 8011912:	88fb      	ldrh	r3, [r7, #6]
 8011914:	817b      	strh	r3, [r7, #10]
 8011916:	887b      	ldrh	r3, [r7, #2]
 8011918:	80fb      	strh	r3, [r7, #6]
 801191a:	897b      	ldrh	r3, [r7, #10]
 801191c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 801191e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011922:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011926:	429a      	cmp	r2, r3
 8011928:	da05      	bge.n	8011936 <UG_FillFrame+0x4e>
     swap(y1,y2);
 801192a:	88bb      	ldrh	r3, [r7, #4]
 801192c:	813b      	strh	r3, [r7, #8]
 801192e:	883b      	ldrh	r3, [r7, #0]
 8011930:	80bb      	strh	r3, [r7, #4]
 8011932:	893b      	ldrh	r3, [r7, #8]
 8011934:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8011936:	4b24      	ldr	r3, [pc, #144]	; (80119c8 <UG_FillFrame+0xe0>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801193e:	f003 0302 	and.w	r3, r3, #2
 8011942:	2b00      	cmp	r3, #0
 8011944:	d012      	beq.n	801196c <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011946:	4b20      	ldr	r3, [pc, #128]	; (80119c8 <UG_FillFrame+0xe0>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801194c:	461d      	mov	r5, r3
 801194e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011952:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011956:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801195a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801195e:	8c3b      	ldrh	r3, [r7, #32]
 8011960:	9300      	str	r3, [sp, #0]
 8011962:	4623      	mov	r3, r4
 8011964:	47a8      	blx	r5
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d028      	beq.n	80119be <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 801196c:	88bb      	ldrh	r3, [r7, #4]
 801196e:	81bb      	strh	r3, [r7, #12]
 8011970:	e01e      	b.n	80119b0 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8011972:	88fb      	ldrh	r3, [r7, #6]
 8011974:	81fb      	strh	r3, [r7, #14]
 8011976:	e00f      	b.n	8011998 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8011978:	4b13      	ldr	r3, [pc, #76]	; (80119c8 <UG_FillFrame+0xe0>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	8c3a      	ldrh	r2, [r7, #32]
 8011982:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8011986:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801198a:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 801198c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011990:	b29b      	uxth	r3, r3
 8011992:	3301      	adds	r3, #1
 8011994:	b29b      	uxth	r3, r3
 8011996:	81fb      	strh	r3, [r7, #14]
 8011998:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801199c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	dde9      	ble.n	8011978 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80119a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	3301      	adds	r3, #1
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	81bb      	strh	r3, [r7, #12]
 80119b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80119b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	ddda      	ble.n	8011972 <UG_FillFrame+0x8a>
 80119bc:	e000      	b.n	80119c0 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80119be:	bf00      	nop
      }
   }
}
 80119c0:	3710      	adds	r7, #16
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bdb0      	pop	{r4, r5, r7, pc}
 80119c6:	bf00      	nop
 80119c8:	20002090 	.word	0x20002090

080119cc <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80119cc:	b590      	push	{r4, r7, lr}
 80119ce:	b085      	sub	sp, #20
 80119d0:	af02      	add	r7, sp, #8
 80119d2:	4604      	mov	r4, r0
 80119d4:	4608      	mov	r0, r1
 80119d6:	4611      	mov	r1, r2
 80119d8:	461a      	mov	r2, r3
 80119da:	4623      	mov	r3, r4
 80119dc:	80fb      	strh	r3, [r7, #6]
 80119de:	4603      	mov	r3, r0
 80119e0:	80bb      	strh	r3, [r7, #4]
 80119e2:	460b      	mov	r3, r1
 80119e4:	807b      	strh	r3, [r7, #2]
 80119e6:	4613      	mov	r3, r2
 80119e8:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 80119ea:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80119ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80119f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80119f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80119fa:	8b3b      	ldrh	r3, [r7, #24]
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	4623      	mov	r3, r4
 8011a00:	f000 f912 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8011a04:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011a08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011a0c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8011a10:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011a14:	8b3b      	ldrh	r3, [r7, #24]
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	4623      	mov	r3, r4
 8011a1a:	f000 f905 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8011a1e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011a22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011a2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011a2e:	8b3b      	ldrh	r3, [r7, #24]
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	4623      	mov	r3, r4
 8011a34:	f000 f8f8 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8011a38:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011a3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011a40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011a44:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8011a48:	8b3b      	ldrh	r3, [r7, #24]
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	4623      	mov	r3, r4
 8011a4e:	f000 f8eb 	bl	8011c28 <UG_DrawLine>
}
 8011a52:	bf00      	nop
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd90      	pop	{r4, r7, pc}
	...

08011a5c <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8011a5c:	b590      	push	{r4, r7, lr}
 8011a5e:	b087      	sub	sp, #28
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	4604      	mov	r4, r0
 8011a64:	4608      	mov	r0, r1
 8011a66:	4611      	mov	r1, r2
 8011a68:	461a      	mov	r2, r3
 8011a6a:	4623      	mov	r3, r4
 8011a6c:	80fb      	strh	r3, [r7, #6]
 8011a6e:	4603      	mov	r3, r0
 8011a70:	80bb      	strh	r3, [r7, #4]
 8011a72:	460b      	mov	r3, r1
 8011a74:	807b      	strh	r3, [r7, #2]
 8011a76:	4613      	mov	r3, r2
 8011a78:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8011a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f2c0 80c8 	blt.w	8011c14 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8011a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f2c0 80c5 	blt.w	8011c18 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8011a8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f340 80c2 	ble.w	8011c1c <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8011a98:	887b      	ldrh	r3, [r7, #2]
 8011a9a:	005b      	lsls	r3, r3, #1
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	f1c3 0301 	rsb	r3, r3, #1
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	823b      	strh	r3, [r7, #16]
   e = 0;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	81fb      	strh	r3, [r7, #14]
   x = r;
 8011aae:	887b      	ldrh	r3, [r7, #2]
 8011ab0:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8011ab6:	e0a5      	b.n	8011c04 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8011ab8:	4b5a      	ldr	r3, [pc, #360]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	88f9      	ldrh	r1, [r7, #6]
 8011ac2:	8afa      	ldrh	r2, [r7, #22]
 8011ac4:	1a8a      	subs	r2, r1, r2
 8011ac6:	b292      	uxth	r2, r2
 8011ac8:	b210      	sxth	r0, r2
 8011aca:	88b9      	ldrh	r1, [r7, #4]
 8011acc:	8aba      	ldrh	r2, [r7, #20]
 8011ace:	440a      	add	r2, r1
 8011ad0:	b292      	uxth	r2, r2
 8011ad2:	b211      	sxth	r1, r2
 8011ad4:	883a      	ldrh	r2, [r7, #0]
 8011ad6:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8011ad8:	4b52      	ldr	r3, [pc, #328]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	88f9      	ldrh	r1, [r7, #6]
 8011ae2:	8afa      	ldrh	r2, [r7, #22]
 8011ae4:	1a8a      	subs	r2, r1, r2
 8011ae6:	b292      	uxth	r2, r2
 8011ae8:	b210      	sxth	r0, r2
 8011aea:	88b9      	ldrh	r1, [r7, #4]
 8011aec:	8aba      	ldrh	r2, [r7, #20]
 8011aee:	1a8a      	subs	r2, r1, r2
 8011af0:	b292      	uxth	r2, r2
 8011af2:	b211      	sxth	r1, r2
 8011af4:	883a      	ldrh	r2, [r7, #0]
 8011af6:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8011af8:	4b4a      	ldr	r3, [pc, #296]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	88f9      	ldrh	r1, [r7, #6]
 8011b02:	8afa      	ldrh	r2, [r7, #22]
 8011b04:	440a      	add	r2, r1
 8011b06:	b292      	uxth	r2, r2
 8011b08:	b210      	sxth	r0, r2
 8011b0a:	88b9      	ldrh	r1, [r7, #4]
 8011b0c:	8aba      	ldrh	r2, [r7, #20]
 8011b0e:	440a      	add	r2, r1
 8011b10:	b292      	uxth	r2, r2
 8011b12:	b211      	sxth	r1, r2
 8011b14:	883a      	ldrh	r2, [r7, #0]
 8011b16:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8011b18:	4b42      	ldr	r3, [pc, #264]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	88f9      	ldrh	r1, [r7, #6]
 8011b22:	8afa      	ldrh	r2, [r7, #22]
 8011b24:	440a      	add	r2, r1
 8011b26:	b292      	uxth	r2, r2
 8011b28:	b210      	sxth	r0, r2
 8011b2a:	88b9      	ldrh	r1, [r7, #4]
 8011b2c:	8aba      	ldrh	r2, [r7, #20]
 8011b2e:	1a8a      	subs	r2, r1, r2
 8011b30:	b292      	uxth	r2, r2
 8011b32:	b211      	sxth	r1, r2
 8011b34:	883a      	ldrh	r2, [r7, #0]
 8011b36:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8011b38:	4b3a      	ldr	r3, [pc, #232]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	88f9      	ldrh	r1, [r7, #6]
 8011b42:	8aba      	ldrh	r2, [r7, #20]
 8011b44:	1a8a      	subs	r2, r1, r2
 8011b46:	b292      	uxth	r2, r2
 8011b48:	b210      	sxth	r0, r2
 8011b4a:	88b9      	ldrh	r1, [r7, #4]
 8011b4c:	8afa      	ldrh	r2, [r7, #22]
 8011b4e:	440a      	add	r2, r1
 8011b50:	b292      	uxth	r2, r2
 8011b52:	b211      	sxth	r1, r2
 8011b54:	883a      	ldrh	r2, [r7, #0]
 8011b56:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8011b58:	4b32      	ldr	r3, [pc, #200]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	88f9      	ldrh	r1, [r7, #6]
 8011b62:	8aba      	ldrh	r2, [r7, #20]
 8011b64:	1a8a      	subs	r2, r1, r2
 8011b66:	b292      	uxth	r2, r2
 8011b68:	b210      	sxth	r0, r2
 8011b6a:	88b9      	ldrh	r1, [r7, #4]
 8011b6c:	8afa      	ldrh	r2, [r7, #22]
 8011b6e:	1a8a      	subs	r2, r1, r2
 8011b70:	b292      	uxth	r2, r2
 8011b72:	b211      	sxth	r1, r2
 8011b74:	883a      	ldrh	r2, [r7, #0]
 8011b76:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8011b78:	4b2a      	ldr	r3, [pc, #168]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	88f9      	ldrh	r1, [r7, #6]
 8011b82:	8aba      	ldrh	r2, [r7, #20]
 8011b84:	440a      	add	r2, r1
 8011b86:	b292      	uxth	r2, r2
 8011b88:	b210      	sxth	r0, r2
 8011b8a:	88b9      	ldrh	r1, [r7, #4]
 8011b8c:	8afa      	ldrh	r2, [r7, #22]
 8011b8e:	440a      	add	r2, r1
 8011b90:	b292      	uxth	r2, r2
 8011b92:	b211      	sxth	r1, r2
 8011b94:	883a      	ldrh	r2, [r7, #0]
 8011b96:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8011b98:	4b22      	ldr	r3, [pc, #136]	; (8011c24 <UG_DrawCircle+0x1c8>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	88f9      	ldrh	r1, [r7, #6]
 8011ba2:	8aba      	ldrh	r2, [r7, #20]
 8011ba4:	440a      	add	r2, r1
 8011ba6:	b292      	uxth	r2, r2
 8011ba8:	b210      	sxth	r0, r2
 8011baa:	88b9      	ldrh	r1, [r7, #4]
 8011bac:	8afa      	ldrh	r2, [r7, #22]
 8011bae:	1a8a      	subs	r2, r1, r2
 8011bb0:	b292      	uxth	r2, r2
 8011bb2:	b211      	sxth	r1, r2
 8011bb4:	883a      	ldrh	r2, [r7, #0]
 8011bb6:	4798      	blx	r3

      y++;
 8011bb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8011bc4:	89fa      	ldrh	r2, [r7, #14]
 8011bc6:	8a3b      	ldrh	r3, [r7, #16]
 8011bc8:	4413      	add	r3, r2
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8011bce:	8a3b      	ldrh	r3, [r7, #16]
 8011bd0:	3302      	adds	r3, #2
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8011bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011bda:	005a      	lsls	r2, r3, #1
 8011bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011be0:	4413      	add	r3, r2
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	dd0e      	ble.n	8011c04 <UG_DrawCircle+0x1a8>
      {
         x--;
 8011be6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	3b01      	subs	r3, #1
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8011bf2:	89fa      	ldrh	r2, [r7, #14]
 8011bf4:	8a7b      	ldrh	r3, [r7, #18]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8011bfc:	8a7b      	ldrh	r3, [r7, #18]
 8011bfe:	3302      	adds	r3, #2
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8011c04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	f6bf af53 	bge.w	8011ab8 <UG_DrawCircle+0x5c>
 8011c12:	e004      	b.n	8011c1e <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8011c14:	bf00      	nop
 8011c16:	e002      	b.n	8011c1e <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8011c18:	bf00      	nop
 8011c1a:	e000      	b.n	8011c1e <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8011c1c:	bf00      	nop
      }
   }
}
 8011c1e:	371c      	adds	r7, #28
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd90      	pop	{r4, r7, pc}
 8011c24:	20002090 	.word	0x20002090

08011c28 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8011c28:	b5b0      	push	{r4, r5, r7, lr}
 8011c2a:	b08a      	sub	sp, #40	; 0x28
 8011c2c:	af02      	add	r7, sp, #8
 8011c2e:	4604      	mov	r4, r0
 8011c30:	4608      	mov	r0, r1
 8011c32:	4611      	mov	r1, r2
 8011c34:	461a      	mov	r2, r3
 8011c36:	4623      	mov	r3, r4
 8011c38:	80fb      	strh	r3, [r7, #6]
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	80bb      	strh	r3, [r7, #4]
 8011c3e:	460b      	mov	r3, r1
 8011c40:	807b      	strh	r3, [r7, #2]
 8011c42:	4613      	mov	r3, r2
 8011c44:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8011c46:	4b67      	ldr	r3, [pc, #412]	; (8011de4 <UG_DrawLine+0x1bc>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011c4e:	f003 0302 	and.w	r3, r3, #2
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d013      	beq.n	8011c7e <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011c56:	4b63      	ldr	r3, [pc, #396]	; (8011de4 <UG_DrawLine+0x1bc>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c5c:	461d      	mov	r5, r3
 8011c5e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011c62:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011c66:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011c6a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011c6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	4623      	mov	r3, r4
 8011c74:	47a8      	blx	r5
 8011c76:	4603      	mov	r3, r0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f000 80ae 	beq.w	8011dda <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8011c7e:	887a      	ldrh	r2, [r7, #2]
 8011c80:	88fb      	ldrh	r3, [r7, #6]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8011c88:	883a      	ldrh	r2, [r7, #0]
 8011c8a:	88bb      	ldrh	r3, [r7, #4]
 8011c8c:	1ad3      	subs	r3, r2, r3
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8011c92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	bfb8      	it	lt
 8011c9a:	425b      	neglt	r3, r3
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8011ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	bfb8      	it	lt
 8011ca8:	425b      	neglt	r3, r3
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8011cae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	dd01      	ble.n	8011cba <UG_DrawLine+0x92>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e001      	b.n	8011cbe <UG_DrawLine+0x96>
 8011cba:	f04f 33ff 	mov.w	r3, #4294967295
 8011cbe:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8011cc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	dd01      	ble.n	8011ccc <UG_DrawLine+0xa4>
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e001      	b.n	8011cd0 <UG_DrawLine+0xa8>
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd0:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8011cd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cd6:	105b      	asrs	r3, r3, #1
 8011cd8:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8011cda:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011cde:	105b      	asrs	r3, r3, #1
 8011ce0:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8011ce2:	88fb      	ldrh	r3, [r7, #6]
 8011ce4:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8011ce6:	88bb      	ldrh	r3, [r7, #4]
 8011ce8:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8011cea:	4b3e      	ldr	r3, [pc, #248]	; (8011de4 <UG_DrawLine+0x1bc>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011cf4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011cf8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011cfc:	4798      	blx	r3

   if( dxabs >= dyabs )
 8011cfe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	db33      	blt.n	8011d72 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	83fb      	strh	r3, [r7, #30]
 8011d0e:	e029      	b.n	8011d64 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8011d10:	8b7a      	ldrh	r2, [r7, #26]
 8011d12:	89fb      	ldrh	r3, [r7, #14]
 8011d14:	4413      	add	r3, r2
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8011d1a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8011d1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	db09      	blt.n	8011d3a <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8011d26:	8b7a      	ldrh	r2, [r7, #26]
 8011d28:	8a3b      	ldrh	r3, [r7, #16]
 8011d2a:	1ad3      	subs	r3, r2, r3
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8011d30:	8afa      	ldrh	r2, [r7, #22]
 8011d32:	897b      	ldrh	r3, [r7, #10]
 8011d34:	4413      	add	r3, r2
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8011d3a:	8b3a      	ldrh	r2, [r7, #24]
 8011d3c:	89bb      	ldrh	r3, [r7, #12]
 8011d3e:	4413      	add	r3, r2
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8011d44:	4b27      	ldr	r3, [pc, #156]	; (8011de4 <UG_DrawLine+0x1bc>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011d4e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011d52:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011d56:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8011d58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	3301      	adds	r3, #1
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	83fb      	strh	r3, [r7, #30]
 8011d64:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011d68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	dbcf      	blt.n	8011d10 <UG_DrawLine+0xe8>
 8011d70:	e034      	b.n	8011ddc <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8011d72:	2300      	movs	r3, #0
 8011d74:	83fb      	strh	r3, [r7, #30]
 8011d76:	e029      	b.n	8011dcc <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8011d78:	8bba      	ldrh	r2, [r7, #28]
 8011d7a:	8a3b      	ldrh	r3, [r7, #16]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8011d82:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8011d86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	db09      	blt.n	8011da2 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8011d8e:	8bba      	ldrh	r2, [r7, #28]
 8011d90:	89fb      	ldrh	r3, [r7, #14]
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8011d98:	8b3a      	ldrh	r2, [r7, #24]
 8011d9a:	89bb      	ldrh	r3, [r7, #12]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8011da2:	8afa      	ldrh	r2, [r7, #22]
 8011da4:	897b      	ldrh	r3, [r7, #10]
 8011da6:	4413      	add	r3, r2
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8011dac:	4b0d      	ldr	r3, [pc, #52]	; (8011de4 <UG_DrawLine+0x1bc>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011db6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011dba:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011dbe:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8011dc0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	83fb      	strh	r3, [r7, #30]
 8011dcc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011dd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	dbcf      	blt.n	8011d78 <UG_DrawLine+0x150>
 8011dd8:	e000      	b.n	8011ddc <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011dda:	bf00      	nop
      }
   }  
}
 8011ddc:	3720      	adds	r7, #32
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bdb0      	pop	{r4, r5, r7, pc}
 8011de2:	bf00      	nop
 8011de4:	20002090 	.word	0x20002090

08011de8 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8011de8:	b590      	push	{r4, r7, lr}
 8011dea:	b087      	sub	sp, #28
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	4603      	mov	r3, r0
 8011df0:	603a      	str	r2, [r7, #0]
 8011df2:	80fb      	strh	r3, [r7, #6]
 8011df4:	460b      	mov	r3, r1
 8011df6:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8011df8:	88fb      	ldrh	r3, [r7, #6]
 8011dfa:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8011dfc:	88bb      	ldrh	r3, [r7, #4]
 8011dfe:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8011e00:	4b44      	ldr	r3, [pc, #272]	; (8011f14 <UG_PutString+0x12c>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e06:	4618      	mov	r0, r3
 8011e08:	f000 fa96 	bl	8012338 <_UG_FontSelect>
   while ( *str != 0 )
 8011e0c:	e064      	b.n	8011ed8 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8011e0e:	4b41      	ldr	r3, [pc, #260]	; (8011f14 <UG_PutString+0x12c>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d106      	bne.n	8011e28 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8011e1a:	463b      	mov	r3, r7
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f000 f8c7 	bl	8011fb0 <_UG_DecodeUTF8>
 8011e22:	4603      	mov	r3, r0
 8011e24:	817b      	strh	r3, [r7, #10]
 8011e26:	e004      	b.n	8011e32 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	1c5a      	adds	r2, r3, #1
 8011e2c:	603a      	str	r2, [r7, #0]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8011e32:	897b      	ldrh	r3, [r7, #10]
 8011e34:	2b0a      	cmp	r3, #10
 8011e36:	d105      	bne.n	8011e44 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8011e38:	4b36      	ldr	r3, [pc, #216]	; (8011f14 <UG_PutString+0x12c>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	881b      	ldrh	r3, [r3, #0]
 8011e40:	81fb      	strh	r3, [r7, #14]
         continue;
 8011e42:	e049      	b.n	8011ed8 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8011e44:	897b      	ldrh	r3, [r7, #10]
 8011e46:	2100      	movs	r1, #0
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 f929 	bl	80120a0 <_UG_GetCharData>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8011e52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e5a:	d100      	bne.n	8011e5e <UG_PutString+0x76>
 8011e5c:	e03c      	b.n	8011ed8 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8011e5e:	4b2d      	ldr	r3, [pc, #180]	; (8011f14 <UG_PutString+0x12c>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011e6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011e72:	4413      	add	r3, r2
 8011e74:	4299      	cmp	r1, r3
 8011e76:	dc12      	bgt.n	8011e9e <UG_PutString+0xb6>
      {
         xp = x;
 8011e78:	88fb      	ldrh	r3, [r7, #6]
 8011e7a:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8011e7c:	4b25      	ldr	r3, [pc, #148]	; (8011f14 <UG_PutString+0x12c>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e84:	b21a      	sxth	r2, r3
 8011e86:	4b23      	ldr	r3, [pc, #140]	; (8011f14 <UG_PutString+0x12c>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8011e8e:	b21b      	sxth	r3, r3
 8011e90:	4413      	add	r3, r2
 8011e92:	b21b      	sxth	r3, r3
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	89bb      	ldrh	r3, [r7, #12]
 8011e98:	4413      	add	r3, r2
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8011e9e:	4b1d      	ldr	r3, [pc, #116]	; (8011f14 <UG_PutString+0x12c>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8011ea6:	4b1b      	ldr	r3, [pc, #108]	; (8011f14 <UG_PutString+0x12c>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011eae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011eb2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8011eb6:	8978      	ldrh	r0, [r7, #10]
 8011eb8:	9300      	str	r3, [sp, #0]
 8011eba:	4623      	mov	r3, r4
 8011ebc:	f000 fabe 	bl	801243c <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8011ec0:	4b14      	ldr	r3, [pc, #80]	; (8011f14 <UG_PutString+0x12c>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	893b      	ldrh	r3, [r7, #8]
 8011ecc:	4413      	add	r3, r2
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	89fb      	ldrh	r3, [r7, #14]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d196      	bne.n	8011e0e <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8011ee0:	4b0c      	ldr	r3, [pc, #48]	; (8011f14 <UG_PutString+0x12c>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011ee8:	f003 0302 	and.w	r3, r3, #2
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d00c      	beq.n	8011f0a <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8011ef0:	4b08      	ldr	r3, [pc, #32]	; (8011f14 <UG_PutString+0x12c>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ef6:	461c      	mov	r4, r3
 8011ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8011efc:	f04f 32ff 	mov.w	r2, #4294967295
 8011f00:	f04f 31ff 	mov.w	r1, #4294967295
 8011f04:	f04f 30ff 	mov.w	r0, #4294967295
 8011f08:	47a0      	blx	r4
}
 8011f0a:	bf00      	nop
 8011f0c:	3714      	adds	r7, #20
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd90      	pop	{r4, r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20002090 	.word	0x20002090

08011f18 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	4603      	mov	r3, r0
 8011f20:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8011f22:	4b05      	ldr	r3, [pc, #20]	; (8011f38 <UG_SetForecolor+0x20>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	88fa      	ldrh	r2, [r7, #6]
 8011f28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8011f2c:	bf00      	nop
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr
 8011f38:	20002090 	.word	0x20002090

08011f3c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b083      	sub	sp, #12
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8011f46:	4b05      	ldr	r3, [pc, #20]	; (8011f5c <UG_SetBackcolor+0x20>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	88fa      	ldrh	r2, [r7, #6]
 8011f4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8011f50:	bf00      	nop
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr
 8011f5c:	20002090 	.word	0x20002090

08011f60 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	4603      	mov	r3, r0
 8011f68:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8011f6a:	4b06      	ldr	r3, [pc, #24]	; (8011f84 <UG_FontSetHSpace+0x24>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	88fa      	ldrh	r2, [r7, #6]
 8011f70:	b252      	sxtb	r2, r2
 8011f72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8011f76:	bf00      	nop
 8011f78:	370c      	adds	r7, #12
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	20002090 	.word	0x20002090

08011f88 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8011f92:	4b06      	ldr	r3, [pc, #24]	; (8011fac <UG_FontSetVSpace+0x24>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	88fa      	ldrh	r2, [r7, #6]
 8011f98:	b252      	sxtb	r2, r2
 8011f9a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8011f9e:	bf00      	nop
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	20002090 	.word	0x20002090

08011fb0 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8011fb0:	b480      	push	{r7}
 8011fb2:	b085      	sub	sp, #20
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]

  char c=**str;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8011fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	db07      	blt.n	8011fd8 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	1c5a      	adds	r2, r3, #1
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]
    return c;
 8011fd2:	7bfb      	ldrb	r3, [r7, #15]
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	e05c      	b.n	8012092 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8011fe0:	e04f      	b.n	8012082 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	1c5a      	adds	r2, r3, #1
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8011ff4:	7bbb      	ldrb	r3, [r7, #14]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d130      	bne.n	801205c <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	2bdf      	cmp	r3, #223	; 0xdf
 8011ffe:	d806      	bhi.n	801200e <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8012000:	2301      	movs	r3, #1
 8012002:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8012004:	7bfb      	ldrb	r3, [r7, #15]
 8012006:	f003 031f 	and.w	r3, r3, #31
 801200a:	73fb      	strb	r3, [r7, #15]
 801200c:	e023      	b.n	8012056 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 801200e:	7bfb      	ldrb	r3, [r7, #15]
 8012010:	2bef      	cmp	r3, #239	; 0xef
 8012012:	d806      	bhi.n	8012022 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8012014:	2302      	movs	r3, #2
 8012016:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8012018:	7bfb      	ldrb	r3, [r7, #15]
 801201a:	f003 030f 	and.w	r3, r3, #15
 801201e:	73fb      	strb	r3, [r7, #15]
 8012020:	e019      	b.n	8012056 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8012022:	7bfb      	ldrb	r3, [r7, #15]
 8012024:	2bf7      	cmp	r3, #247	; 0xf7
 8012026:	d806      	bhi.n	8012036 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8012028:	2303      	movs	r3, #3
 801202a:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 801202c:	7bfb      	ldrb	r3, [r7, #15]
 801202e:	f003 0307 	and.w	r3, r3, #7
 8012032:	73fb      	strb	r3, [r7, #15]
 8012034:	e00f      	b.n	8012056 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8012036:	7bfb      	ldrb	r3, [r7, #15]
 8012038:	2bfb      	cmp	r3, #251	; 0xfb
 801203a:	d806      	bhi.n	801204a <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 801203c:	2304      	movs	r3, #4
 801203e:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8012040:	7bfb      	ldrb	r3, [r7, #15]
 8012042:	f003 0303 	and.w	r3, r3, #3
 8012046:	73fb      	strb	r3, [r7, #15]
 8012048:	e005      	b.n	8012056 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 801204a:	2305      	movs	r3, #5
 801204c:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 801204e:	7bfb      	ldrb	r3, [r7, #15]
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8012056:	7bfb      	ldrb	r3, [r7, #15]
 8012058:	81bb      	strh	r3, [r7, #12]
 801205a:	e012      	b.n	8012082 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 801205c:	89bb      	ldrh	r3, [r7, #12]
 801205e:	019b      	lsls	r3, r3, #6
 8012060:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8012062:	7bfb      	ldrb	r3, [r7, #15]
 8012064:	b21b      	sxth	r3, r3
 8012066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801206a:	b21a      	sxth	r2, r3
 801206c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012070:	4313      	orrs	r3, r2
 8012072:	b21b      	sxth	r3, r3
 8012074:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8012076:	7bbb      	ldrb	r3, [r7, #14]
 8012078:	3b01      	subs	r3, #1
 801207a:	73bb      	strb	r3, [r7, #14]
 801207c:	7bbb      	ldrb	r3, [r7, #14]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d005      	beq.n	801208e <_UG_DecodeUTF8+0xde>
  while(**str)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1aa      	bne.n	8011fe2 <_UG_DecodeUTF8+0x32>
 801208c:	e000      	b.n	8012090 <_UG_DecodeUTF8+0xe0>
        break;
 801208e:	bf00      	nop
    }
  }
  return encoding;
 8012090:	89bb      	ldrh	r3, [r7, #12]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3714      	adds	r7, #20
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
	...

080120a0 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b086      	sub	sp, #24
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	4603      	mov	r3, r0
 80120a8:	6039      	str	r1, [r7, #0]
 80120aa:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80120bc:	2300      	movs	r3, #0
 80120be:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80120c0:	4b98      	ldr	r3, [pc, #608]	; (8012324 <_UG_GetCharData+0x284>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120c6:	4b98      	ldr	r3, [pc, #608]	; (8012328 <_UG_GetCharData+0x288>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d10f      	bne.n	80120ee <_UG_GetCharData+0x4e>
 80120ce:	4b97      	ldr	r3, [pc, #604]	; (801232c <_UG_GetCharData+0x28c>)
 80120d0:	881b      	ldrh	r3, [r3, #0]
 80120d2:	88fa      	ldrh	r2, [r7, #6]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d10a      	bne.n	80120ee <_UG_GetCharData+0x4e>
    if(p){
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d003      	beq.n	80120e6 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80120de:	4b94      	ldr	r3, [pc, #592]	; (8012330 <_UG_GetCharData+0x290>)
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80120e6:	4b93      	ldr	r3, [pc, #588]	; (8012334 <_UG_GetCharData+0x294>)
 80120e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120ec:	e116      	b.n	801231c <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80120ee:	4b8d      	ldr	r3, [pc, #564]	; (8012324 <_UG_GetCharData+0x284>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f000 80cc 	beq.w	8012294 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 80120fc:	88fb      	ldrh	r3, [r7, #6]
 80120fe:	2bfc      	cmp	r3, #252	; 0xfc
 8012100:	f300 80c8 	bgt.w	8012294 <_UG_GetCharData+0x1f4>
 8012104:	2bd6      	cmp	r3, #214	; 0xd6
 8012106:	da09      	bge.n	801211c <_UG_GetCharData+0x7c>
 8012108:	2bc4      	cmp	r3, #196	; 0xc4
 801210a:	d06c      	beq.n	80121e6 <_UG_GetCharData+0x146>
 801210c:	2bc4      	cmp	r3, #196	; 0xc4
 801210e:	f300 80c1 	bgt.w	8012294 <_UG_GetCharData+0x1f4>
 8012112:	2bb0      	cmp	r3, #176	; 0xb0
 8012114:	d06d      	beq.n	80121f2 <_UG_GetCharData+0x152>
 8012116:	2bb5      	cmp	r3, #181	; 0xb5
 8012118:	d068      	beq.n	80121ec <_UG_GetCharData+0x14c>
 801211a:	e06e      	b.n	80121fa <_UG_GetCharData+0x15a>
 801211c:	3bd6      	subs	r3, #214	; 0xd6
 801211e:	2b26      	cmp	r3, #38	; 0x26
 8012120:	f200 80b8 	bhi.w	8012294 <_UG_GetCharData+0x1f4>
 8012124:	a201      	add	r2, pc, #4	; (adr r2, 801212c <_UG_GetCharData+0x8c>)
 8012126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801212a:	bf00      	nop
 801212c:	080121cf 	.word	0x080121cf
 8012130:	08012295 	.word	0x08012295
 8012134:	08012295 	.word	0x08012295
 8012138:	08012295 	.word	0x08012295
 801213c:	08012295 	.word	0x08012295
 8012140:	08012295 	.word	0x08012295
 8012144:	080121db 	.word	0x080121db
 8012148:	08012295 	.word	0x08012295
 801214c:	08012295 	.word	0x08012295
 8012150:	08012295 	.word	0x08012295
 8012154:	08012295 	.word	0x08012295
 8012158:	08012295 	.word	0x08012295
 801215c:	08012295 	.word	0x08012295
 8012160:	08012295 	.word	0x08012295
 8012164:	080121e1 	.word	0x080121e1
 8012168:	08012295 	.word	0x08012295
 801216c:	08012295 	.word	0x08012295
 8012170:	08012295 	.word	0x08012295
 8012174:	08012295 	.word	0x08012295
 8012178:	08012295 	.word	0x08012295
 801217c:	08012295 	.word	0x08012295
 8012180:	08012295 	.word	0x08012295
 8012184:	08012295 	.word	0x08012295
 8012188:	08012295 	.word	0x08012295
 801218c:	08012295 	.word	0x08012295
 8012190:	08012295 	.word	0x08012295
 8012194:	08012295 	.word	0x08012295
 8012198:	08012295 	.word	0x08012295
 801219c:	08012295 	.word	0x08012295
 80121a0:	08012295 	.word	0x08012295
 80121a4:	08012295 	.word	0x08012295
 80121a8:	08012295 	.word	0x08012295
 80121ac:	080121c9 	.word	0x080121c9
 80121b0:	08012295 	.word	0x08012295
 80121b4:	08012295 	.word	0x08012295
 80121b8:	08012295 	.word	0x08012295
 80121bc:	08012295 	.word	0x08012295
 80121c0:	08012295 	.word	0x08012295
 80121c4:	080121d5 	.word	0x080121d5
    {
       case 0xF6: encoding = 0x94; break; // ö
 80121c8:	2394      	movs	r3, #148	; 0x94
 80121ca:	80fb      	strh	r3, [r7, #6]
 80121cc:	e015      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80121ce:	2399      	movs	r3, #153	; 0x99
 80121d0:	80fb      	strh	r3, [r7, #6]
 80121d2:	e012      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80121d4:	2381      	movs	r3, #129	; 0x81
 80121d6:	80fb      	strh	r3, [r7, #6]
 80121d8:	e00f      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80121da:	239a      	movs	r3, #154	; 0x9a
 80121dc:	80fb      	strh	r3, [r7, #6]
 80121de:	e00c      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80121e0:	2384      	movs	r3, #132	; 0x84
 80121e2:	80fb      	strh	r3, [r7, #6]
 80121e4:	e009      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80121e6:	238e      	movs	r3, #142	; 0x8e
 80121e8:	80fb      	strh	r3, [r7, #6]
 80121ea:	e006      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80121ec:	23e6      	movs	r3, #230	; 0xe6
 80121ee:	80fb      	strh	r3, [r7, #6]
 80121f0:	e003      	b.n	80121fa <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80121f2:	23f8      	movs	r3, #248	; 0xf8
 80121f4:	80fb      	strh	r3, [r7, #6]
 80121f6:	bf00      	nop
 80121f8:	e04c      	b.n	8012294 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80121fa:	e04b      	b.n	8012294 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80121fc:	4b49      	ldr	r3, [pc, #292]	; (8012324 <_UG_GetCharData+0x284>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012202:	8a7a      	ldrh	r2, [r7, #18]
 8012204:	0052      	lsls	r2, r2, #1
 8012206:	4413      	add	r3, r2
 8012208:	4618      	mov	r0, r3
 801220a:	f7ff fa87 	bl	801171c <ptr_8to16>
 801220e:	4603      	mov	r3, r0
 8012210:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8012212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012216:	2b00      	cmp	r3, #0
 8012218:	da06      	bge.n	8012228 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 801221a:	89fb      	ldrh	r3, [r7, #14]
 801221c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012220:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8012222:	2301      	movs	r3, #1
 8012224:	747b      	strb	r3, [r7, #17]
 8012226:	e032      	b.n	801228e <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8012228:	7c7b      	ldrb	r3, [r7, #17]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d021      	beq.n	8012272 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 801222e:	88fa      	ldrh	r2, [r7, #6]
 8012230:	8afb      	ldrh	r3, [r7, #22]
 8012232:	429a      	cmp	r2, r3
 8012234:	d30d      	bcc.n	8012252 <_UG_GetCharData+0x1b2>
 8012236:	88fa      	ldrh	r2, [r7, #6]
 8012238:	89fb      	ldrh	r3, [r7, #14]
 801223a:	429a      	cmp	r2, r3
 801223c:	d809      	bhi.n	8012252 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 801223e:	88fa      	ldrh	r2, [r7, #6]
 8012240:	8afb      	ldrh	r3, [r7, #22]
 8012242:	1ad3      	subs	r3, r2, r3
 8012244:	b29a      	uxth	r2, r3
 8012246:	8abb      	ldrh	r3, [r7, #20]
 8012248:	4413      	add	r3, r2
 801224a:	82bb      	strh	r3, [r7, #20]
        found=1;
 801224c:	2301      	movs	r3, #1
 801224e:	743b      	strb	r3, [r7, #16]
        break;
 8012250:	e02a      	b.n	80122a8 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8012252:	88fa      	ldrh	r2, [r7, #6]
 8012254:	8afb      	ldrh	r3, [r7, #22]
 8012256:	429a      	cmp	r2, r3
 8012258:	d323      	bcc.n	80122a2 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 801225a:	89fa      	ldrh	r2, [r7, #14]
 801225c:	8afb      	ldrh	r3, [r7, #22]
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	b29a      	uxth	r2, r3
 8012262:	8abb      	ldrh	r3, [r7, #20]
 8012264:	4413      	add	r3, r2
 8012266:	b29b      	uxth	r3, r3
 8012268:	3301      	adds	r3, #1
 801226a:	82bb      	strh	r3, [r7, #20]
      range=0;
 801226c:	2300      	movs	r3, #0
 801226e:	747b      	strb	r3, [r7, #17]
 8012270:	e00d      	b.n	801228e <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012272:	88fa      	ldrh	r2, [r7, #6]
 8012274:	89fb      	ldrh	r3, [r7, #14]
 8012276:	429a      	cmp	r2, r3
 8012278:	d102      	bne.n	8012280 <_UG_GetCharData+0x1e0>
      {
        found=1;
 801227a:	2301      	movs	r3, #1
 801227c:	743b      	strb	r3, [r7, #16]
        break;
 801227e:	e013      	b.n	80122a8 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012280:	88fa      	ldrh	r2, [r7, #6]
 8012282:	89fb      	ldrh	r3, [r7, #14]
 8012284:	429a      	cmp	r2, r3
 8012286:	d30e      	bcc.n	80122a6 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8012288:	8abb      	ldrh	r3, [r7, #20]
 801228a:	3301      	adds	r3, #1
 801228c:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 801228e:	8a7b      	ldrh	r3, [r7, #18]
 8012290:	3301      	adds	r3, #1
 8012292:	827b      	strh	r3, [r7, #18]
 8012294:	4b23      	ldr	r3, [pc, #140]	; (8012324 <_UG_GetCharData+0x284>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801229a:	8a7a      	ldrh	r2, [r7, #18]
 801229c:	429a      	cmp	r2, r3
 801229e:	d3ad      	bcc.n	80121fc <_UG_GetCharData+0x15c>
 80122a0:	e002      	b.n	80122a8 <_UG_GetCharData+0x208>
        break;
 80122a2:	bf00      	nop
 80122a4:	e000      	b.n	80122a8 <_UG_GetCharData+0x208>
        break;
 80122a6:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80122a8:	7c3b      	ldrb	r3, [r7, #16]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d034      	beq.n	8012318 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80122ae:	4b1d      	ldr	r3, [pc, #116]	; (8012324 <_UG_GetCharData+0x284>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122b4:	4a1c      	ldr	r2, [pc, #112]	; (8012328 <_UG_GetCharData+0x288>)
 80122b6:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80122b8:	4a1c      	ldr	r2, [pc, #112]	; (801232c <_UG_GetCharData+0x28c>)
 80122ba:	88fb      	ldrh	r3, [r7, #6]
 80122bc:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80122be:	4b19      	ldr	r3, [pc, #100]	; (8012324 <_UG_GetCharData+0x284>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c4:	8aba      	ldrh	r2, [r7, #20]
 80122c6:	4917      	ldr	r1, [pc, #92]	; (8012324 <_UG_GetCharData+0x284>)
 80122c8:	6809      	ldr	r1, [r1, #0]
 80122ca:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 80122cc:	fb01 f202 	mul.w	r2, r1, r2
 80122d0:	4413      	add	r3, r2
 80122d2:	4a17      	ldr	r2, [pc, #92]	; (8012330 <_UG_GetCharData+0x290>)
 80122d4:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80122d6:	4b13      	ldr	r3, [pc, #76]	; (8012324 <_UG_GetCharData+0x284>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d009      	beq.n	80122f4 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80122e0:	4b10      	ldr	r3, [pc, #64]	; (8012324 <_UG_GetCharData+0x284>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122e6:	8abb      	ldrh	r3, [r7, #20]
 80122e8:	4413      	add	r3, r2
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	b21a      	sxth	r2, r3
 80122ee:	4b11      	ldr	r3, [pc, #68]	; (8012334 <_UG_GetCharData+0x294>)
 80122f0:	801a      	strh	r2, [r3, #0]
 80122f2:	e006      	b.n	8012302 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80122f4:	4b0b      	ldr	r3, [pc, #44]	; (8012324 <_UG_GetCharData+0x284>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80122fc:	b21a      	sxth	r2, r3
 80122fe:	4b0d      	ldr	r3, [pc, #52]	; (8012334 <_UG_GetCharData+0x294>)
 8012300:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d003      	beq.n	8012310 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8012308:	4b09      	ldr	r3, [pc, #36]	; (8012330 <_UG_GetCharData+0x290>)
 801230a:	681a      	ldr	r2, [r3, #0]
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8012310:	4b08      	ldr	r3, [pc, #32]	; (8012334 <_UG_GetCharData+0x294>)
 8012312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012316:	e001      	b.n	801231c <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8012318:	f04f 33ff 	mov.w	r3, #4294967295
}
 801231c:	4618      	mov	r0, r3
 801231e:	3718      	adds	r7, #24
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	20002090 	.word	0x20002090
 8012328:	20002094 	.word	0x20002094
 801232c:	20002098 	.word	0x20002098
 8012330:	2000209c 	.word	0x2000209c
 8012334:	200020a0 	.word	0x200020a0

08012338 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8012338:	b590      	push	{r4, r7, lr}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012340:	4b3d      	ldr	r3, [pc, #244]	; (8012438 <_UG_FontSelect+0x100>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	429a      	cmp	r2, r3
 801234a:	d070      	beq.n	801242e <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 801234c:	4b3a      	ldr	r3, [pc, #232]	; (8012438 <_UG_FontSelect+0x100>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	781a      	ldrb	r2, [r3, #0]
 8012358:	4b37      	ldr	r3, [pc, #220]	; (8012438 <_UG_FontSelect+0x100>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012360:	b2d2      	uxtb	r2, r2
 8012362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	1c5a      	adds	r2, r3, #1
 801236a:	607a      	str	r2, [r7, #4]
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	b25b      	sxtb	r3, r3
 8012370:	2b00      	cmp	r3, #0
 8012372:	da01      	bge.n	8012378 <_UG_FontSelect+0x40>
 8012374:	2201      	movs	r2, #1
 8012376:	e000      	b.n	801237a <_UG_FontSelect+0x42>
 8012378:	2200      	movs	r2, #0
 801237a:	4b2f      	ldr	r3, [pc, #188]	; (8012438 <_UG_FontSelect+0x100>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	b2d2      	uxtb	r2, r2
 8012380:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	607a      	str	r2, [r7, #4]
 801238a:	4a2b      	ldr	r2, [pc, #172]	; (8012438 <_UG_FontSelect+0x100>)
 801238c:	6812      	ldr	r2, [r2, #0]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	1c5a      	adds	r2, r3, #1
 8012398:	607a      	str	r2, [r7, #4]
 801239a:	4a27      	ldr	r2, [pc, #156]	; (8012438 <_UG_FontSelect+0x100>)
 801239c:	6812      	ldr	r2, [r2, #0]
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80123a4:	4b24      	ldr	r3, [pc, #144]	; (8012438 <_UG_FontSelect+0x100>)
 80123a6:	681c      	ldr	r4, [r3, #0]
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7ff f9b7 	bl	801171c <ptr_8to16>
 80123ae:	4603      	mov	r3, r0
 80123b0:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3302      	adds	r3, #2
 80123b6:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80123b8:	4b1f      	ldr	r3, [pc, #124]	; (8012438 <_UG_FontSelect+0x100>)
 80123ba:	681c      	ldr	r4, [r3, #0]
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f7ff f9ad 	bl	801171c <ptr_8to16>
 80123c2:	4603      	mov	r3, r0
 80123c4:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	3302      	adds	r3, #2
 80123ca:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80123cc:	4b1a      	ldr	r3, [pc, #104]	; (8012438 <_UG_FontSelect+0x100>)
 80123ce:	681c      	ldr	r4, [r3, #0]
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7ff f9a3 	bl	801171c <ptr_8to16>
 80123d6:	4603      	mov	r3, r0
 80123d8:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	3302      	adds	r3, #2
 80123de:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	1c5a      	adds	r2, r3, #1
 80123e4:	607a      	str	r2, [r7, #4]
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00b      	beq.n	8012404 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80123ec:	4b12      	ldr	r3, [pc, #72]	; (8012438 <_UG_FontSelect+0x100>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80123f4:	4b10      	ldr	r3, [pc, #64]	; (8012438 <_UG_FontSelect+0x100>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123fa:	461a      	mov	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	4413      	add	r3, r2
 8012400:	607b      	str	r3, [r7, #4]
 8012402:	e003      	b.n	801240c <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8012404:	4b0c      	ldr	r3, [pc, #48]	; (8012438 <_UG_FontSelect+0x100>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	2200      	movs	r2, #0
 801240a:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 801240c:	4b0a      	ldr	r3, [pc, #40]	; (8012438 <_UG_FontSelect+0x100>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8012414:	4b08      	ldr	r3, [pc, #32]	; (8012438 <_UG_FontSelect+0x100>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801241a:	005b      	lsls	r3, r3, #1
 801241c:	461a      	mov	r2, r3
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	4413      	add	r3, r2
 8012422:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8012424:	4b04      	ldr	r3, [pc, #16]	; (8012438 <_UG_FontSelect+0x100>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	641a      	str	r2, [r3, #64]	; 0x40
 801242c:	e000      	b.n	8012430 <_UG_FontSelect+0xf8>
    return;
 801242e:	bf00      	nop
}
 8012430:	370c      	adds	r7, #12
 8012432:	46bd      	mov	sp, r7
 8012434:	bd90      	pop	{r4, r7, pc}
 8012436:	bf00      	nop
 8012438:	20002090 	.word	0x20002090

0801243c <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 801243c:	b5b0      	push	{r4, r5, r7, lr}
 801243e:	b08c      	sub	sp, #48	; 0x30
 8012440:	af00      	add	r7, sp, #0
 8012442:	4604      	mov	r4, r0
 8012444:	4608      	mov	r0, r1
 8012446:	4611      	mov	r1, r2
 8012448:	461a      	mov	r2, r3
 801244a:	4623      	mov	r3, r4
 801244c:	80fb      	strh	r3, [r7, #6]
 801244e:	4603      	mov	r3, r0
 8012450:	80bb      	strh	r3, [r7, #4]
 8012452:	460b      	mov	r3, r1
 8012454:	807b      	strh	r3, [r7, #2]
 8012456:	4613      	mov	r3, r2
 8012458:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 801245a:	2300      	movs	r3, #0
 801245c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801245e:	2300      	movs	r3, #0
 8012460:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012462:	2300      	movs	r3, #0
 8012464:	847b      	strh	r3, [r7, #34]	; 0x22
 8012466:	2300      	movs	r3, #0
 8012468:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 801246a:	4b8c      	ldr	r3, [pc, #560]	; (801269c <_UG_PutChar+0x260>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012472:	75fb      	strb	r3, [r7, #23]
 8012474:	4b89      	ldr	r3, [pc, #548]	; (801269c <_UG_PutChar+0x260>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801247c:	f003 0302 	and.w	r3, r3, #2
 8012480:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012482:	2300      	movs	r3, #0
 8012484:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8012486:	f107 0208 	add.w	r2, r7, #8
 801248a:	88fb      	ldrh	r3, [r7, #6]
 801248c:	4611      	mov	r1, r2
 801248e:	4618      	mov	r0, r3
 8012490:	f7ff fe06 	bl	80120a0 <_UG_GetCharData>
 8012494:	4603      	mov	r3, r0
 8012496:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8012498:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a0:	d102      	bne.n	80124a8 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80124a2:	f04f 33ff 	mov.w	r3, #4294967295
 80124a6:	e226      	b.n	80128f6 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 80124a8:	4b7c      	ldr	r3, [pc, #496]	; (801269c <_UG_PutChar+0x260>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80124b0:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 80124b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <_UG_PutChar+0x80>
     return 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	e21c      	b.n	80128f6 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 80124bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124be:	08db      	lsrs	r3, r3, #3
 80124c0:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80124c2:	4b76      	ldr	r3, [pc, #472]	; (801269c <_UG_PutChar+0x260>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80124ca:	f003 0307 	and.w	r3, r3, #7
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d002      	beq.n	80124da <_UG_PutChar+0x9e>
 80124d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124d6:	3301      	adds	r3, #1
 80124d8:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80124da:	7dbb      	ldrb	r3, [r7, #22]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d01d      	beq.n	801251c <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80124e0:	4b6e      	ldr	r3, [pc, #440]	; (801269c <_UG_PutChar+0x260>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124e6:	461d      	mov	r5, r3
 80124e8:	88ba      	ldrh	r2, [r7, #4]
 80124ea:	8abb      	ldrh	r3, [r7, #20]
 80124ec:	4413      	add	r3, r2
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	3b01      	subs	r3, #1
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	b21c      	sxth	r4, r3
 80124f6:	4b69      	ldr	r3, [pc, #420]	; (801269c <_UG_PutChar+0x260>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80124fe:	b29a      	uxth	r2, r3
 8012500:	887b      	ldrh	r3, [r7, #2]
 8012502:	4413      	add	r3, r2
 8012504:	b29b      	uxth	r3, r3
 8012506:	3b01      	subs	r3, #1
 8012508:	b29b      	uxth	r3, r3
 801250a:	b21b      	sxth	r3, r3
 801250c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012510:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8012514:	4622      	mov	r2, r4
 8012516:	47a8      	blx	r5
 8012518:	4603      	mov	r3, r0
 801251a:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 801251c:	4b5f      	ldr	r3, [pc, #380]	; (801269c <_UG_PutChar+0x260>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 8172 	bne.w	801280e <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 801252a:	2300      	movs	r3, #0
 801252c:	853b      	strh	r3, [r7, #40]	; 0x28
 801252e:	e0ec      	b.n	801270a <_UG_PutChar+0x2ce>
     {
       c=0;
 8012530:	2300      	movs	r3, #0
 8012532:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012534:	2300      	movs	r3, #0
 8012536:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012538:	e0df      	b.n	80126fa <_UG_PutChar+0x2be>
       {
         b = *data++;
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	60ba      	str	r2, [r7, #8]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012544:	2300      	movs	r3, #0
 8012546:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012548:	e0ca      	b.n	80126e0 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 801254a:	7f7b      	ldrb	r3, [r7, #29]
 801254c:	f003 0301 	and.w	r3, r3, #1
 8012550:	2b00      	cmp	r3, #0
 8012552:	d033      	beq.n	80125bc <_UG_PutChar+0x180>
           {
             if(driver)
 8012554:	7dbb      	ldrb	r3, [r7, #22]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d01f      	beq.n	801259a <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 801255a:	8c3b      	ldrh	r3, [r7, #32]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d00a      	beq.n	8012576 <_UG_PutChar+0x13a>
 8012560:	7dfb      	ldrb	r3, [r7, #23]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d107      	bne.n	8012576 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8012566:	8c3a      	ldrh	r2, [r7, #32]
 8012568:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	4610      	mov	r0, r2
 8012570:	4798      	blx	r3
                 bpixels=0;
 8012572:	2300      	movs	r3, #0
 8012574:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8012576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012578:	2b00      	cmp	r3, #0
 801257a:	d10a      	bne.n	8012592 <_UG_PutChar+0x156>
 801257c:	7dfb      	ldrb	r3, [r7, #23]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d007      	beq.n	8012592 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012582:	88ba      	ldrh	r2, [r7, #4]
 8012584:	8bfb      	ldrh	r3, [r7, #30]
 8012586:	4413      	add	r3, r2
 8012588:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 801258a:	887a      	ldrh	r2, [r7, #2]
 801258c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801258e:	4413      	add	r3, r2
 8012590:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012594:	3301      	adds	r3, #1
 8012596:	847b      	strh	r3, [r7, #34]	; 0x22
 8012598:	e096      	b.n	80126c8 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 801259a:	4b40      	ldr	r3, [pc, #256]	; (801269c <_UG_PutChar+0x260>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	685b      	ldr	r3, [r3, #4]
 80125a2:	88b9      	ldrh	r1, [r7, #4]
 80125a4:	8bfa      	ldrh	r2, [r7, #30]
 80125a6:	440a      	add	r2, r1
 80125a8:	b292      	uxth	r2, r2
 80125aa:	b210      	sxth	r0, r2
 80125ac:	8879      	ldrh	r1, [r7, #2]
 80125ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80125b0:	440a      	add	r2, r1
 80125b2:	b292      	uxth	r2, r2
 80125b4:	b211      	sxth	r1, r2
 80125b6:	883a      	ldrh	r2, [r7, #0]
 80125b8:	4798      	blx	r3
 80125ba:	e085      	b.n	80126c8 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80125bc:	7dbb      	ldrb	r3, [r7, #22]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d06e      	beq.n	80126a0 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80125c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d064      	beq.n	8012692 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80125c8:	7dfb      	ldrb	r3, [r7, #23]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d15e      	bne.n	801268c <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 80125ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80125d0:	8839      	ldrh	r1, [r7, #0]
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	4610      	mov	r0, r2
 80125d6:	4798      	blx	r3
                   fpixels=0;
 80125d8:	2300      	movs	r3, #0
 80125da:	847b      	strh	r3, [r7, #34]	; 0x22
 80125dc:	e059      	b.n	8012692 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80125de:	88ba      	ldrh	r2, [r7, #4]
 80125e0:	8abb      	ldrh	r3, [r7, #20]
 80125e2:	4413      	add	r3, r2
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80125ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80125ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d003      	beq.n	80125fe <_UG_PutChar+0x1c2>
 80125f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80125f8:	89fb      	ldrh	r3, [r7, #14]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d224      	bcs.n	8012648 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80125fe:	4b27      	ldr	r3, [pc, #156]	; (801269c <_UG_PutChar+0x260>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012604:	461d      	mov	r5, r3
 8012606:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801260a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801260e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012610:	89fb      	ldrh	r3, [r7, #14]
 8012612:	4413      	add	r3, r2
 8012614:	b29b      	uxth	r3, r3
 8012616:	3b01      	subs	r3, #1
 8012618:	b29b      	uxth	r3, r3
 801261a:	b21c      	sxth	r4, r3
 801261c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801261e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012622:	fb92 f3f3 	sdiv	r3, r2, r3
 8012626:	b29a      	uxth	r2, r3
 8012628:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801262a:	4413      	add	r3, r2
 801262c:	b29b      	uxth	r3, r3
 801262e:	b21b      	sxth	r3, r3
 8012630:	4622      	mov	r2, r4
 8012632:	47a8      	blx	r5
 8012634:	4603      	mov	r3, r0
 8012636:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012638:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801263a:	8839      	ldrh	r1, [r7, #0]
 801263c:	69bb      	ldr	r3, [r7, #24]
 801263e:	4610      	mov	r0, r2
 8012640:	4798      	blx	r3
                       fpixels=0;
 8012642:	2300      	movs	r3, #0
 8012644:	847b      	strh	r3, [r7, #34]	; 0x22
 8012646:	e021      	b.n	801268c <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012648:	4b14      	ldr	r3, [pc, #80]	; (801269c <_UG_PutChar+0x260>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801264e:	461c      	mov	r4, r3
 8012650:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012654:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012658:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801265a:	89fb      	ldrh	r3, [r7, #14]
 801265c:	4413      	add	r3, r2
 801265e:	b29b      	uxth	r3, r3
 8012660:	3b01      	subs	r3, #1
 8012662:	b29b      	uxth	r3, r3
 8012664:	b21a      	sxth	r2, r3
 8012666:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801266a:	47a0      	blx	r4
 801266c:	4603      	mov	r3, r0
 801266e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012670:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012672:	8839      	ldrh	r1, [r7, #0]
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	4610      	mov	r0, r2
 8012678:	4798      	blx	r3
                       fpixels -= width;
 801267a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801267c:	89fb      	ldrh	r3, [r7, #14]
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8012682:	88bb      	ldrh	r3, [r7, #4]
 8012684:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8012686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012688:	3301      	adds	r3, #1
 801268a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 801268c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801268e:	2b00      	cmp	r3, #0
 8012690:	d1a5      	bne.n	80125de <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8012692:	8c3b      	ldrh	r3, [r7, #32]
 8012694:	3301      	adds	r3, #1
 8012696:	843b      	strh	r3, [r7, #32]
 8012698:	e016      	b.n	80126c8 <_UG_PutChar+0x28c>
 801269a:	bf00      	nop
 801269c:	20002090 	.word	0x20002090
             }
             else if(!trans)                           // Not accelerated output
 80126a0:	7dfb      	ldrb	r3, [r7, #23]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d110      	bne.n	80126c8 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 80126a6:	4b96      	ldr	r3, [pc, #600]	; (8012900 <_UG_PutChar+0x4c4>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	88b9      	ldrh	r1, [r7, #4]
 80126b0:	8bfa      	ldrh	r2, [r7, #30]
 80126b2:	440a      	add	r2, r1
 80126b4:	b292      	uxth	r2, r2
 80126b6:	b210      	sxth	r0, r2
 80126b8:	8879      	ldrh	r1, [r7, #2]
 80126ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80126bc:	440a      	add	r2, r1
 80126be:	b292      	uxth	r2, r2
 80126c0:	b211      	sxth	r1, r2
 80126c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80126c6:	4798      	blx	r3
             }
           }
           b >>= 1;
 80126c8:	7f7b      	ldrb	r3, [r7, #29]
 80126ca:	085b      	lsrs	r3, r3, #1
 80126cc:	777b      	strb	r3, [r7, #29]
           c++;
 80126ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	3301      	adds	r3, #1
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80126da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80126dc:	3301      	adds	r3, #1
 80126de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80126e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80126e2:	2b07      	cmp	r3, #7
 80126e4:	d806      	bhi.n	80126f4 <_UG_PutChar+0x2b8>
 80126e6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80126ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	f6ff af2b 	blt.w	801254a <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 80126f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126f6:	3301      	adds	r3, #1
 80126f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80126fa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80126fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126fe:	429a      	cmp	r2, r3
 8012700:	f4ff af1b 	bcc.w	801253a <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012706:	3301      	adds	r3, #1
 8012708:	853b      	strh	r3, [r7, #40]	; 0x28
 801270a:	4b7d      	ldr	r3, [pc, #500]	; (8012900 <_UG_PutChar+0x4c4>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012712:	b29b      	uxth	r3, r3
 8012714:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012716:	429a      	cmp	r2, r3
 8012718:	f4ff af0a 	bcc.w	8012530 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 801271c:	7dbb      	ldrb	r3, [r7, #22]
 801271e:	2b00      	cmp	r3, #0
 8012720:	f000 80e7 	beq.w	80128f2 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8012724:	8c3b      	ldrh	r3, [r7, #32]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d009      	beq.n	801273e <_UG_PutChar+0x302>
 801272a:	7dfb      	ldrb	r3, [r7, #23]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d106      	bne.n	801273e <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8012730:	8c3a      	ldrh	r2, [r7, #32]
 8012732:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	4610      	mov	r0, r2
 801273a:	4798      	blx	r3
 801273c:	e0d9      	b.n	80128f2 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 801273e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012740:	2b00      	cmp	r3, #0
 8012742:	f000 80d6 	beq.w	80128f2 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8012746:	7dfb      	ldrb	r3, [r7, #23]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d15c      	bne.n	8012806 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 801274c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801274e:	8839      	ldrh	r1, [r7, #0]
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	4610      	mov	r0, r2
 8012754:	4798      	blx	r3
 8012756:	e0cc      	b.n	80128f2 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8012758:	88ba      	ldrh	r2, [r7, #4]
 801275a:	8abb      	ldrh	r3, [r7, #20]
 801275c:	4413      	add	r3, r2
 801275e:	b29a      	uxth	r2, r3
 8012760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8012766:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012768:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801276c:	429a      	cmp	r2, r3
 801276e:	d003      	beq.n	8012778 <_UG_PutChar+0x33c>
 8012770:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012772:	8a3b      	ldrh	r3, [r7, #16]
 8012774:	429a      	cmp	r2, r3
 8012776:	d224      	bcs.n	80127c2 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012778:	4b61      	ldr	r3, [pc, #388]	; (8012900 <_UG_PutChar+0x4c4>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801277e:	461d      	mov	r5, r3
 8012780:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012784:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801278a:	8a3b      	ldrh	r3, [r7, #16]
 801278c:	4413      	add	r3, r2
 801278e:	b29b      	uxth	r3, r3
 8012790:	3b01      	subs	r3, #1
 8012792:	b29b      	uxth	r3, r3
 8012794:	b21c      	sxth	r4, r3
 8012796:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012798:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801279c:	fb92 f3f3 	sdiv	r3, r2, r3
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80127a4:	4413      	add	r3, r2
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	b21b      	sxth	r3, r3
 80127aa:	4622      	mov	r2, r4
 80127ac:	47a8      	blx	r5
 80127ae:	4603      	mov	r3, r0
 80127b0:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80127b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127b4:	8839      	ldrh	r1, [r7, #0]
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	4610      	mov	r0, r2
 80127ba:	4798      	blx	r3
               fpixels=0;
 80127bc:	2300      	movs	r3, #0
 80127be:	847b      	strh	r3, [r7, #34]	; 0x22
 80127c0:	e021      	b.n	8012806 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80127c2:	4b4f      	ldr	r3, [pc, #316]	; (8012900 <_UG_PutChar+0x4c4>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80127c8:	461c      	mov	r4, r3
 80127ca:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80127ce:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80127d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80127d4:	8a3b      	ldrh	r3, [r7, #16]
 80127d6:	4413      	add	r3, r2
 80127d8:	b29b      	uxth	r3, r3
 80127da:	3b01      	subs	r3, #1
 80127dc:	b29b      	uxth	r3, r3
 80127de:	b21a      	sxth	r2, r3
 80127e0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80127e4:	47a0      	blx	r4
 80127e6:	4603      	mov	r3, r0
 80127e8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80127ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127ec:	8839      	ldrh	r1, [r7, #0]
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	4610      	mov	r0, r2
 80127f2:	4798      	blx	r3
               fpixels -= width;
 80127f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127f6:	8a3b      	ldrh	r3, [r7, #16]
 80127f8:	1ad3      	subs	r3, r2, r3
 80127fa:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 80127fc:	88bb      	ldrh	r3, [r7, #4]
 80127fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8012800:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012802:	3301      	adds	r3, #1
 8012804:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8012806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012808:	2b00      	cmp	r3, #0
 801280a:	d1a5      	bne.n	8012758 <_UG_PutChar+0x31c>
 801280c:	e071      	b.n	80128f2 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 801280e:	4b3c      	ldr	r3, [pc, #240]	; (8012900 <_UG_PutChar+0x4c4>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012816:	2b01      	cmp	r3, #1
 8012818:	d16b      	bne.n	80128f2 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 801281a:	2300      	movs	r3, #0
 801281c:	853b      	strh	r3, [r7, #40]	; 0x28
 801281e:	e060      	b.n	80128e2 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8012820:	2300      	movs	r3, #0
 8012822:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012824:	e04a      	b.n	80128bc <_UG_PutChar+0x480>
       {
         b = *data++;
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	1c5a      	adds	r2, r3, #1
 801282a:	60ba      	str	r2, [r7, #8]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8012830:	883b      	ldrh	r3, [r7, #0]
 8012832:	b2db      	uxtb	r3, r3
 8012834:	7f7a      	ldrb	r2, [r7, #29]
 8012836:	fb03 f202 	mul.w	r2, r3, r2
 801283a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801283e:	b2db      	uxtb	r3, r3
 8012840:	7f79      	ldrb	r1, [r7, #29]
 8012842:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8012846:	fb01 f303 	mul.w	r3, r1, r3
 801284a:	4413      	add	r3, r2
 801284c:	121b      	asrs	r3, r3, #8
 801284e:	b21b      	sxth	r3, r3
 8012850:	b2db      	uxtb	r3, r3
 8012852:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8012854:	883b      	ldrh	r3, [r7, #0]
 8012856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801285a:	7f79      	ldrb	r1, [r7, #29]
 801285c:	fb03 f101 	mul.w	r1, r3, r1
 8012860:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012864:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012868:	7f78      	ldrb	r0, [r7, #29]
 801286a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801286e:	fb00 f303 	mul.w	r3, r0, r3
 8012872:	440b      	add	r3, r1
 8012874:	121b      	asrs	r3, r3, #8
 8012876:	b21b      	sxth	r3, r3
 8012878:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801287c:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 801287e:	4313      	orrs	r3, r2
 8012880:	b21b      	sxth	r3, r3
 8012882:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8012884:	7dbb      	ldrb	r3, [r7, #22]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d005      	beq.n	8012896 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 801288a:	8a7a      	ldrh	r2, [r7, #18]
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	4611      	mov	r1, r2
 8012890:	2001      	movs	r0, #1
 8012892:	4798      	blx	r3
 8012894:	e00f      	b.n	80128b6 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8012896:	4b1a      	ldr	r3, [pc, #104]	; (8012900 <_UG_PutChar+0x4c4>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	88b9      	ldrh	r1, [r7, #4]
 80128a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80128a2:	440a      	add	r2, r1
 80128a4:	b292      	uxth	r2, r2
 80128a6:	b210      	sxth	r0, r2
 80128a8:	8879      	ldrh	r1, [r7, #2]
 80128aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80128ac:	440a      	add	r2, r1
 80128ae:	b292      	uxth	r2, r2
 80128b0:	b211      	sxth	r1, r2
 80128b2:	8a7a      	ldrh	r2, [r7, #18]
 80128b4:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80128b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80128b8:	3301      	adds	r3, #1
 80128ba:	857b      	strh	r3, [r7, #42]	; 0x2a
 80128bc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80128be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	dbaf      	blt.n	8012826 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	4a0d      	ldr	r2, [pc, #52]	; (8012900 <_UG_PutChar+0x4c4>)
 80128ca:	6812      	ldr	r2, [r2, #0]
 80128cc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80128d0:	4611      	mov	r1, r2
 80128d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80128d6:	1a8a      	subs	r2, r1, r2
 80128d8:	4413      	add	r3, r2
 80128da:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80128dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80128de:	3301      	adds	r3, #1
 80128e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80128e2:	4b07      	ldr	r3, [pc, #28]	; (8012900 <_UG_PutChar+0x4c4>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d396      	bcc.n	8012820 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 80128f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3730      	adds	r7, #48	; 0x30
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bdb0      	pop	{r4, r5, r7, pc}
 80128fe:	bf00      	nop
 8012900:	20002090 	.word	0x20002090

08012904 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8012904:	b480      	push	{r7}
 8012906:	b089      	sub	sp, #36	; 0x24
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 801290c:	4b57      	ldr	r3, [pc, #348]	; (8012a6c <_UG_ProcessTouchData+0x168>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	88db      	ldrh	r3, [r3, #6]
 8012912:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8012914:	4b55      	ldr	r3, [pc, #340]	; (8012a6c <_UG_ProcessTouchData+0x168>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	891b      	ldrh	r3, [r3, #8]
 801291a:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 801291c:	4b53      	ldr	r3, [pc, #332]	; (8012a6c <_UG_ProcessTouchData+0x168>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	791b      	ldrb	r3, [r3, #4]
 8012922:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801292a:	2300      	movs	r3, #0
 801292c:	83fb      	strh	r3, [r7, #30]
 801292e:	e090      	b.n	8012a52 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	685a      	ldr	r2, [r3, #4]
 8012934:	8bfb      	ldrh	r3, [r7, #30]
 8012936:	015b      	lsls	r3, r3, #5
 8012938:	4413      	add	r3, r2
 801293a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	785b      	ldrb	r3, [r3, #1]
 8012946:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8012948:	7bfb      	ldrb	r3, [r7, #15]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d179      	bne.n	8012a46 <_UG_ProcessTouchData+0x142>
 8012952:	7bfb      	ldrb	r3, [r7, #15]
 8012954:	f003 0302 	and.w	r3, r3, #2
 8012958:	2b00      	cmp	r3, #0
 801295a:	d074      	beq.n	8012a46 <_UG_ProcessTouchData+0x142>
 801295c:	7bfb      	ldrb	r3, [r7, #15]
 801295e:	f003 0308 	and.w	r3, r3, #8
 8012962:	2b00      	cmp	r3, #0
 8012964:	d06f      	beq.n	8012a46 <_UG_ProcessTouchData+0x142>
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801296c:	2b00      	cmp	r3, #0
 801296e:	d16a      	bne.n	8012a46 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8012970:	7dfb      	ldrb	r3, [r7, #23]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d047      	beq.n	8012a06 <_UG_ProcessTouchData+0x102>
 8012976:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801297e:	d042      	beq.n	8012a06 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8012980:	7f7b      	ldrb	r3, [r7, #29]
 8012982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012986:	2b00      	cmp	r3, #0
 8012988:	d107      	bne.n	801299a <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 801298a:	7f7b      	ldrb	r3, [r7, #29]
 801298c:	f043 0305 	orr.w	r3, r3, #5
 8012990:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8012992:	7f7b      	ldrb	r3, [r7, #29]
 8012994:	f023 0318 	bic.w	r3, r3, #24
 8012998:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 801299a:	7f7b      	ldrb	r3, [r7, #29]
 801299c:	f023 0320 	bic.w	r3, r3, #32
 80129a0:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80129a8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	db25      	blt.n	80129fc <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80129b6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	dc1e      	bgt.n	80129fc <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80129c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	db17      	blt.n	80129fc <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80129d2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	dc10      	bgt.n	80129fc <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80129da:	7f7b      	ldrb	r3, [r7, #29]
 80129dc:	f043 0320 	orr.w	r3, r3, #32
 80129e0:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80129e2:	7f7b      	ldrb	r3, [r7, #29]
 80129e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d107      	bne.n	80129fc <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80129ec:	7f7b      	ldrb	r3, [r7, #29]
 80129ee:	f023 0304 	bic.w	r3, r3, #4
 80129f2:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80129f4:	7f7b      	ldrb	r3, [r7, #29]
 80129f6:	f043 0302 	orr.w	r3, r3, #2
 80129fa:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80129fc:	7f7b      	ldrb	r3, [r7, #29]
 80129fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a02:	777b      	strb	r3, [r7, #29]
 8012a04:	e01f      	b.n	8012a46 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8012a06:	7f7b      	ldrb	r3, [r7, #29]
 8012a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d01a      	beq.n	8012a46 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8012a10:	7f7b      	ldrb	r3, [r7, #29]
 8012a12:	f003 0320 	and.w	r3, r3, #32
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d004      	beq.n	8012a24 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8012a1a:	7f7b      	ldrb	r3, [r7, #29]
 8012a1c:	f043 0308 	orr.w	r3, r3, #8
 8012a20:	777b      	strb	r3, [r7, #29]
 8012a22:	e003      	b.n	8012a2c <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8012a24:	7f7b      	ldrb	r3, [r7, #29]
 8012a26:	f043 0310 	orr.w	r3, r3, #16
 8012a2a:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8012a2c:	7f7b      	ldrb	r3, [r7, #29]
 8012a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d003      	beq.n	8012a3e <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8012a36:	7f7b      	ldrb	r3, [r7, #29]
 8012a38:	f043 0301 	orr.w	r3, r3, #1
 8012a3c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8012a3e:	7f7b      	ldrb	r3, [r7, #29]
 8012a40:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8012a44:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	7f7a      	ldrb	r2, [r7, #29]
 8012a4a:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8012a4c:	8bfb      	ldrh	r3, [r7, #30]
 8012a4e:	3301      	adds	r3, #1
 8012a50:	83fb      	strh	r3, [r7, #30]
 8012a52:	8bfa      	ldrh	r2, [r7, #30]
 8012a54:	8abb      	ldrh	r3, [r7, #20]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	f4ff af6a 	bcc.w	8012930 <_UG_ProcessTouchData+0x2c>
   }
}
 8012a5c:	bf00      	nop
 8012a5e:	bf00      	nop
 8012a60:	3724      	adds	r7, #36	; 0x24
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	20002090 	.word	0x20002090

08012a70 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b086      	sub	sp, #24
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8012a7e:	2300      	movs	r3, #0
 8012a80:	82fb      	strh	r3, [r7, #22]
 8012a82:	e035      	b.n	8012af0 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	685a      	ldr	r2, [r3, #4]
 8012a88:	8afb      	ldrh	r3, [r7, #22]
 8012a8a:	015b      	lsls	r3, r3, #5
 8012a8c:	4413      	add	r3, r2
 8012a8e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	785b      	ldrb	r3, [r3, #1]
 8012a9a:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	f003 0301 	and.w	r3, r3, #1
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d121      	bne.n	8012aea <_UG_UpdateObjects+0x7a>
 8012aa6:	7bfb      	ldrb	r3, [r7, #15]
 8012aa8:	f003 0302 	and.w	r3, r3, #2
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d01c      	beq.n	8012aea <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
 8012ab2:	f003 0320 	and.w	r3, r3, #32
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d004      	beq.n	8012ac4 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	6939      	ldr	r1, [r7, #16]
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8012ac4:	7bfb      	ldrb	r3, [r7, #15]
 8012ac6:	f003 0308 	and.w	r3, r3, #8
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00d      	beq.n	8012aea <_UG_UpdateObjects+0x7a>
 8012ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	da09      	bge.n	8012aea <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8012ad6:	7bbb      	ldrb	r3, [r7, #14]
 8012ad8:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d004      	beq.n	8012aea <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	6939      	ldr	r1, [r7, #16]
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8012aea:	8afb      	ldrh	r3, [r7, #22]
 8012aec:	3301      	adds	r3, #1
 8012aee:	82fb      	strh	r3, [r7, #22]
 8012af0:	8afa      	ldrh	r2, [r7, #22]
 8012af2:	8abb      	ldrh	r3, [r7, #20]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d3c5      	bcc.n	8012a84 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8012af8:	bf00      	nop
 8012afa:	bf00      	nop
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
	...

08012b04 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b086      	sub	sp, #24
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8012b0c:	4b22      	ldr	r3, [pc, #136]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b0e:	2200      	movs	r2, #0
 8012b10:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8012b12:	4b21      	ldr	r3, [pc, #132]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b14:	2202      	movs	r2, #2
 8012b16:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8012b1e:	2300      	movs	r3, #0
 8012b20:	82fb      	strh	r3, [r7, #22]
 8012b22:	e02f      	b.n	8012b84 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	685a      	ldr	r2, [r3, #4]
 8012b28:	8afb      	ldrh	r3, [r7, #22]
 8012b2a:	015b      	lsls	r3, r3, #5
 8012b2c:	4413      	add	r3, r2
 8012b2e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8012b36:	7bfb      	ldrb	r3, [r7, #15]
 8012b38:	f003 0301 	and.w	r3, r3, #1
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d11e      	bne.n	8012b7e <_UG_HandleEvents+0x7a>
 8012b40:	7bfb      	ldrb	r3, [r7, #15]
 8012b42:	f003 0302 	and.w	r3, r3, #2
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d019      	beq.n	8012b7e <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	7e9b      	ldrb	r3, [r3, #26]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d015      	beq.n	8012b7e <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8012b52:	4a11      	ldr	r2, [pc, #68]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	7e1a      	ldrb	r2, [r3, #24]
 8012b5c:	4b0e      	ldr	r3, [pc, #56]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b5e:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	7e5a      	ldrb	r2, [r3, #25]
 8012b64:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b66:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	7e9a      	ldrb	r2, [r3, #26]
 8012b6c:	4b0a      	ldr	r3, [pc, #40]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b6e:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b74:	4808      	ldr	r0, [pc, #32]	; (8012b98 <_UG_HandleEvents+0x94>)
 8012b76:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8012b7e:	8afb      	ldrh	r3, [r7, #22]
 8012b80:	3301      	adds	r3, #1
 8012b82:	82fb      	strh	r3, [r7, #22]
 8012b84:	8afa      	ldrh	r2, [r7, #22]
 8012b86:	8abb      	ldrh	r3, [r7, #20]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d3cb      	bcc.n	8012b24 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8012b8c:	bf00      	nop
 8012b8e:	bf00      	nop
 8012b90:	3718      	adds	r7, #24
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	200020a4 	.word	0x200020a4

08012b9c <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8012b9c:	b590      	push	{r4, r7, lr}
 8012b9e:	b08f      	sub	sp, #60	; 0x3c
 8012ba0:	af02      	add	r7, sp, #8
 8012ba2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 812c 	beq.w	8012e06 <_UG_PutText+0x26a>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 8127 	beq.w	8012e06 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	89db      	ldrh	r3, [r3, #14]
 8012bbc:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	895b      	ldrh	r3, [r3, #10]
 8012bc2:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	3302      	adds	r3, #2
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8012bce:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8012bd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bd6:	1ad2      	subs	r2, r2, r3
 8012bd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	f2c0 8114 	blt.w	8012e0a <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	891b      	ldrh	r3, [r3, #8]
 8012be6:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	899b      	ldrh	r3, [r3, #12]
 8012bec:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	7d1b      	ldrb	r3, [r3, #20]
 8012bf2:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	8adb      	ldrh	r3, [r3, #22]
 8012bf8:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	8b1b      	ldrh	r3, [r3, #24]
 8012bfe:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff fb92 	bl	8012338 <_UG_FontSelect>

   rc=1;
 8012c14:	2301      	movs	r3, #1
 8012c16:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012c1c:	4b80      	ldr	r3, [pc, #512]	; (8012e20 <_UG_PutText+0x284>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d107      	bne.n	8012c38 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8012c28:	f107 0308 	add.w	r3, r7, #8
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7ff f9bf 	bl	8011fb0 <_UG_DecodeUTF8>
 8012c32:	4603      	mov	r3, r0
 8012c34:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012c36:	e004      	b.n	8012c42 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	1c5a      	adds	r2, r3, #1
 8012c3c:	60ba      	str	r2, [r7, #8]
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8012c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d006      	beq.n	8012c56 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8012c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c4a:	2b0a      	cmp	r3, #10
 8012c4c:	d1e6      	bne.n	8012c1c <_UG_PutText+0x80>
 8012c4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c50:	3301      	adds	r3, #1
 8012c52:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012c54:	e7e2      	b.n	8012c1c <_UG_PutText+0x80>
     if(!chr) break;
 8012c56:	bf00      	nop
   }

   yp = 0;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8012c5c:	7e7b      	ldrb	r3, [r7, #25]
 8012c5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d01f      	beq.n	8012ca6 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8012c66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012c68:	8c3b      	ldrh	r3, [r7, #32]
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	3301      	adds	r3, #1
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8012c74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c76:	8bfb      	ldrh	r3, [r7, #30]
 8012c78:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8012c7a:	fb11 f303 	smulbb	r3, r1, r3
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8012c86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	b299      	uxth	r1, r3
 8012c8e:	8abb      	ldrh	r3, [r7, #20]
 8012c90:	fb11 f303 	smulbb	r3, r1, r3
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	1ad3      	subs	r3, r2, r3
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8012c9c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f2c0 80b4 	blt.w	8012e0e <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8012ca6:	7e7b      	ldrb	r3, [r7, #25]
 8012ca8:	f003 0310 	and.w	r3, r3, #16
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d003      	beq.n	8012cb8 <_UG_PutText+0x11c>
 8012cb0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012cb4:	105b      	asrs	r3, r3, #1
 8012cb6:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8012cb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012cba:	8c3b      	ldrh	r3, [r7, #32]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012cce:	4b54      	ldr	r3, [pc, #336]	; (8012e20 <_UG_PutText+0x284>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d107      	bne.n	8012cea <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8012cda:	f107 0308 	add.w	r3, r7, #8
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7ff f966 	bl	8011fb0 <_UG_DecodeUTF8>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012ce8:	e004      	b.n	8012cf4 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	1c5a      	adds	r2, r3, #1
 8012cee:	60ba      	str	r2, [r7, #8]
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8012cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d01b      	beq.n	8012d32 <_UG_PutText+0x196>
 8012cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cfc:	2b0a      	cmp	r3, #10
 8012cfe:	d018      	beq.n	8012d32 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8012d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d02:	2100      	movs	r1, #0
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff f9cb 	bl	80120a0 <_UG_GetCharData>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8012d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d16:	d00a      	beq.n	8012d2e <_UG_PutText+0x192>
         sl++;
 8012d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8012d1e:	8a7a      	ldrh	r2, [r7, #18]
 8012d20:	8afb      	ldrh	r3, [r7, #22]
 8012d22:	4413      	add	r3, r2
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d28:	4413      	add	r3, r2
 8012d2a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012d2c:	e7cf      	b.n	8012cce <_UG_PutText+0x132>
         if (w == -1){continue;}
 8012d2e:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012d30:	e7cd      	b.n	8012cce <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8012d32:	8afb      	ldrh	r3, [r7, #22]
 8012d34:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8012d3a:	8b7a      	ldrh	r2, [r7, #26]
 8012d3c:	8bbb      	ldrh	r3, [r7, #28]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	3301      	adds	r3, #1
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8012d48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d4c:	1ad3      	subs	r3, r2, r3
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8012d52:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	db5b      	blt.n	8012e12 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8012d5a:	7e7b      	ldrb	r3, [r7, #25]
 8012d5c:	f003 0301 	and.w	r3, r3, #1
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d002      	beq.n	8012d6a <_UG_PutText+0x1ce>
 8012d64:	2300      	movs	r3, #0
 8012d66:	853b      	strh	r3, [r7, #40]	; 0x28
 8012d68:	e008      	b.n	8012d7c <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8012d6a:	7e7b      	ldrb	r3, [r7, #25]
 8012d6c:	f003 0302 	and.w	r3, r3, #2
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d003      	beq.n	8012d7c <_UG_PutText+0x1e0>
 8012d74:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012d78:	105b      	asrs	r3, r3, #1
 8012d7a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8012d7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012d7e:	8bbb      	ldrh	r3, [r7, #28]
 8012d80:	4413      	add	r3, r2
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012d86:	4b26      	ldr	r3, [pc, #152]	; (8012e20 <_UG_PutText+0x284>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d107      	bne.n	8012da2 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8012d92:	f107 030c 	add.w	r3, r7, #12
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff f90a 	bl	8011fb0 <_UG_DecodeUTF8>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012da0:	e004      	b.n	8012dac <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	1c5a      	adds	r2, r3, #1
 8012da6:	60fa      	str	r2, [r7, #12]
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8012dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d031      	beq.n	8012e16 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8012db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012db4:	2b0a      	cmp	r3, #10
 8012db6:	d01c      	beq.n	8012df2 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	8a1c      	ldrh	r4, [r3, #16]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	8a5b      	ldrh	r3, [r3, #18]
 8012dc0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8012dc4:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8012dc8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	4623      	mov	r3, r4
 8012dce:	f7ff fb35 	bl	801243c <_UG_PutChar>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8012dd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dde:	d0d2      	beq.n	8012d86 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8012de0:	8a7a      	ldrh	r2, [r7, #18]
 8012de2:	8afb      	ldrh	r3, [r7, #22]
 8012de4:	4413      	add	r3, r2
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012dea:	4413      	add	r3, r2
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012df0:	e7c9      	b.n	8012d86 <_UG_PutText+0x1ea>
           break;
 8012df2:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8012df4:	8bfa      	ldrh	r2, [r7, #30]
 8012df6:	8abb      	ldrh	r3, [r7, #20]
 8012df8:	4413      	add	r3, r2
 8012dfa:	b29a      	uxth	r2, r3
 8012dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012dfe:	4413      	add	r3, r2
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8012e04:	e75d      	b.n	8012cc2 <_UG_PutText+0x126>
     return;
 8012e06:	bf00      	nop
 8012e08:	e006      	b.n	8012e18 <_UG_PutText+0x27c>
     return;
 8012e0a:	bf00      	nop
 8012e0c:	e004      	b.n	8012e18 <_UG_PutText+0x27c>
        return;
 8012e0e:	bf00      	nop
 8012e10:	e002      	b.n	8012e18 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8012e12:	bf00      	nop
 8012e14:	e000      	b.n	8012e18 <_UG_PutText+0x27c>
           return;
 8012e16:	bf00      	nop
   }
}
 8012e18:	3734      	adds	r7, #52	; 0x34
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd90      	pop	{r4, r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	20002090 	.word	0x20002090

08012e24 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8012e24:	b5b0      	push	{r4, r5, r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af02      	add	r7, sp, #8
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	4608      	mov	r0, r1
 8012e2e:	4611      	mov	r1, r2
 8012e30:	461a      	mov	r2, r3
 8012e32:	4623      	mov	r3, r4
 8012e34:	80fb      	strh	r3, [r7, #6]
 8012e36:	4603      	mov	r3, r0
 8012e38:	80bb      	strh	r3, [r7, #4]
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	807b      	strh	r3, [r7, #2]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8012e42:	887b      	ldrh	r3, [r7, #2]
 8012e44:	3b01      	subs	r3, #1
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	b21c      	sxth	r4, r3
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	1c9a      	adds	r2, r3, #2
 8012e4e:	61ba      	str	r2, [r7, #24]
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012e56:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012e5a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012e5e:	9300      	str	r3, [sp, #0]
 8012e60:	4613      	mov	r3, r2
 8012e62:	4622      	mov	r2, r4
 8012e64:	f7fe fee0 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8012e68:	88bb      	ldrh	r3, [r7, #4]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	b219      	sxth	r1, r3
 8012e70:	883b      	ldrh	r3, [r7, #0]
 8012e72:	3b01      	subs	r3, #1
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	b21c      	sxth	r4, r3
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	1c9a      	adds	r2, r3, #2
 8012e7c:	61ba      	str	r2, [r7, #24]
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e84:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	4623      	mov	r3, r4
 8012e8c:	f7fe fecc 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8012e90:	69bb      	ldr	r3, [r7, #24]
 8012e92:	1c9a      	adds	r2, r3, #2
 8012e94:	61ba      	str	r2, [r7, #24]
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012e9c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012ea0:	f9b7 1000 	ldrsh.w	r1, [r7]
 8012ea4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	4623      	mov	r3, r4
 8012eac:	f7fe febc 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8012eb0:	883b      	ldrh	r3, [r7, #0]
 8012eb2:	3b01      	subs	r3, #1
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	b21c      	sxth	r4, r3
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	1c9a      	adds	r2, r3, #2
 8012ebc:	61ba      	str	r2, [r7, #24]
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012ec4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012ec8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	4623      	mov	r3, r4
 8012ed0:	f7fe feaa 	bl	8011c28 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8012ed4:	88fb      	ldrh	r3, [r7, #6]
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	b218      	sxth	r0, r3
 8012edc:	88bb      	ldrh	r3, [r7, #4]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	b219      	sxth	r1, r3
 8012ee4:	887b      	ldrh	r3, [r7, #2]
 8012ee6:	3b02      	subs	r3, #2
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	b21c      	sxth	r4, r3
 8012eec:	88bb      	ldrh	r3, [r7, #4]
 8012eee:	3301      	adds	r3, #1
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	b21d      	sxth	r5, r3
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	1c9a      	adds	r2, r3, #2
 8012ef8:	61ba      	str	r2, [r7, #24]
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	462b      	mov	r3, r5
 8012f00:	4622      	mov	r2, r4
 8012f02:	f7fe fe91 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8012f06:	88fb      	ldrh	r3, [r7, #6]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	b218      	sxth	r0, r3
 8012f0e:	88bb      	ldrh	r3, [r7, #4]
 8012f10:	3302      	adds	r3, #2
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	b219      	sxth	r1, r3
 8012f16:	88fb      	ldrh	r3, [r7, #6]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	b21c      	sxth	r4, r3
 8012f1e:	883b      	ldrh	r3, [r7, #0]
 8012f20:	3b02      	subs	r3, #2
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	b21d      	sxth	r5, r3
 8012f26:	69bb      	ldr	r3, [r7, #24]
 8012f28:	1c9a      	adds	r2, r3, #2
 8012f2a:	61ba      	str	r2, [r7, #24]
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	9300      	str	r3, [sp, #0]
 8012f30:	462b      	mov	r3, r5
 8012f32:	4622      	mov	r2, r4
 8012f34:	f7fe fe78 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8012f38:	88fb      	ldrh	r3, [r7, #6]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	b218      	sxth	r0, r3
 8012f40:	883b      	ldrh	r3, [r7, #0]
 8012f42:	3b01      	subs	r3, #1
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	b219      	sxth	r1, r3
 8012f48:	887b      	ldrh	r3, [r7, #2]
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	b21c      	sxth	r4, r3
 8012f50:	883b      	ldrh	r3, [r7, #0]
 8012f52:	3b01      	subs	r3, #1
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	b21d      	sxth	r5, r3
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	1c9a      	adds	r2, r3, #2
 8012f5c:	61ba      	str	r2, [r7, #24]
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	9300      	str	r3, [sp, #0]
 8012f62:	462b      	mov	r3, r5
 8012f64:	4622      	mov	r2, r4
 8012f66:	f7fe fe5f 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8012f6a:	887b      	ldrh	r3, [r7, #2]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	b218      	sxth	r0, r3
 8012f72:	88bb      	ldrh	r3, [r7, #4]
 8012f74:	3301      	adds	r3, #1
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	b219      	sxth	r1, r3
 8012f7a:	887b      	ldrh	r3, [r7, #2]
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	b21c      	sxth	r4, r3
 8012f82:	883b      	ldrh	r3, [r7, #0]
 8012f84:	3b02      	subs	r3, #2
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	b21d      	sxth	r5, r3
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	1c9a      	adds	r2, r3, #2
 8012f8e:	61ba      	str	r2, [r7, #24]
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	9300      	str	r3, [sp, #0]
 8012f94:	462b      	mov	r3, r5
 8012f96:	4622      	mov	r2, r4
 8012f98:	f7fe fe46 	bl	8011c28 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8012f9c:	88fb      	ldrh	r3, [r7, #6]
 8012f9e:	3302      	adds	r3, #2
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	b218      	sxth	r0, r3
 8012fa4:	88bb      	ldrh	r3, [r7, #4]
 8012fa6:	3302      	adds	r3, #2
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	b219      	sxth	r1, r3
 8012fac:	887b      	ldrh	r3, [r7, #2]
 8012fae:	3b03      	subs	r3, #3
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	b21c      	sxth	r4, r3
 8012fb4:	88bb      	ldrh	r3, [r7, #4]
 8012fb6:	3302      	adds	r3, #2
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	b21d      	sxth	r5, r3
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	1c9a      	adds	r2, r3, #2
 8012fc0:	61ba      	str	r2, [r7, #24]
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	462b      	mov	r3, r5
 8012fc8:	4622      	mov	r2, r4
 8012fca:	f7fe fe2d 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8012fce:	88fb      	ldrh	r3, [r7, #6]
 8012fd0:	3302      	adds	r3, #2
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	b218      	sxth	r0, r3
 8012fd6:	88bb      	ldrh	r3, [r7, #4]
 8012fd8:	3303      	adds	r3, #3
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	b219      	sxth	r1, r3
 8012fde:	88fb      	ldrh	r3, [r7, #6]
 8012fe0:	3302      	adds	r3, #2
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	b21c      	sxth	r4, r3
 8012fe6:	883b      	ldrh	r3, [r7, #0]
 8012fe8:	3b03      	subs	r3, #3
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	b21d      	sxth	r5, r3
 8012fee:	69bb      	ldr	r3, [r7, #24]
 8012ff0:	1c9a      	adds	r2, r3, #2
 8012ff2:	61ba      	str	r2, [r7, #24]
 8012ff4:	881b      	ldrh	r3, [r3, #0]
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	462b      	mov	r3, r5
 8012ffa:	4622      	mov	r2, r4
 8012ffc:	f7fe fe14 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8013000:	88fb      	ldrh	r3, [r7, #6]
 8013002:	3302      	adds	r3, #2
 8013004:	b29b      	uxth	r3, r3
 8013006:	b218      	sxth	r0, r3
 8013008:	883b      	ldrh	r3, [r7, #0]
 801300a:	3b02      	subs	r3, #2
 801300c:	b29b      	uxth	r3, r3
 801300e:	b219      	sxth	r1, r3
 8013010:	887b      	ldrh	r3, [r7, #2]
 8013012:	3b02      	subs	r3, #2
 8013014:	b29b      	uxth	r3, r3
 8013016:	b21c      	sxth	r4, r3
 8013018:	883b      	ldrh	r3, [r7, #0]
 801301a:	3b02      	subs	r3, #2
 801301c:	b29b      	uxth	r3, r3
 801301e:	b21d      	sxth	r5, r3
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	1c9a      	adds	r2, r3, #2
 8013024:	61ba      	str	r2, [r7, #24]
 8013026:	881b      	ldrh	r3, [r3, #0]
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	462b      	mov	r3, r5
 801302c:	4622      	mov	r2, r4
 801302e:	f7fe fdfb 	bl	8011c28 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8013032:	887b      	ldrh	r3, [r7, #2]
 8013034:	3b02      	subs	r3, #2
 8013036:	b29b      	uxth	r3, r3
 8013038:	b218      	sxth	r0, r3
 801303a:	88bb      	ldrh	r3, [r7, #4]
 801303c:	3302      	adds	r3, #2
 801303e:	b29b      	uxth	r3, r3
 8013040:	b219      	sxth	r1, r3
 8013042:	887b      	ldrh	r3, [r7, #2]
 8013044:	3b02      	subs	r3, #2
 8013046:	b29b      	uxth	r3, r3
 8013048:	b21a      	sxth	r2, r3
 801304a:	883b      	ldrh	r3, [r7, #0]
 801304c:	3b03      	subs	r3, #3
 801304e:	b29b      	uxth	r3, r3
 8013050:	b21c      	sxth	r4, r3
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	881b      	ldrh	r3, [r3, #0]
 8013056:	9300      	str	r3, [sp, #0]
 8013058:	4623      	mov	r3, r4
 801305a:	f7fe fde5 	bl	8011c28 <UG_DrawLine>
}
 801305e:	bf00      	nop
 8013060:	3708      	adds	r7, #8
 8013062:	46bd      	mov	sp, r7
 8013064:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013068 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8013068:	b480      	push	{r7}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	4603      	mov	r3, r0
 8013070:	6039      	str	r1, [r7, #0]
 8013072:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013074:	79fb      	ldrb	r3, [r7, #7]
 8013076:	2b03      	cmp	r3, #3
 8013078:	d810      	bhi.n	801309c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 801307a:	4b0b      	ldr	r3, [pc, #44]	; (80130a8 <UG_DriverRegister+0x40>)
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	79fb      	ldrb	r3, [r7, #7]
 8013080:	330a      	adds	r3, #10
 8013082:	00db      	lsls	r3, r3, #3
 8013084:	4413      	add	r3, r2
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 801308a:	4b07      	ldr	r3, [pc, #28]	; (80130a8 <UG_DriverRegister+0x40>)
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	79fb      	ldrb	r3, [r7, #7]
 8013090:	330a      	adds	r3, #10
 8013092:	00db      	lsls	r3, r3, #3
 8013094:	4413      	add	r3, r2
 8013096:	2203      	movs	r2, #3
 8013098:	721a      	strb	r2, [r3, #8]
 801309a:	e000      	b.n	801309e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 801309c:	bf00      	nop
}
 801309e:	370c      	adds	r7, #12
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr
 80130a8:	20002090 	.word	0x20002090

080130ac <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80130b2:	4b5e      	ldr	r3, [pc, #376]	; (801322c <UG_Update+0x180>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80130ba:	f003 0301 	and.w	r3, r3, #1
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d00a      	beq.n	80130d8 <UG_Update+0x2c>
 80130c2:	4b5a      	ldr	r3, [pc, #360]	; (801322c <UG_Update+0x180>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80130ca:	4b58      	ldr	r3, [pc, #352]	; (801322c <UG_Update+0x180>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f022 0201 	bic.w	r2, r2, #1
 80130d2:	b2d2      	uxtb	r2, r2
 80130d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80130d8:	4b54      	ldr	r3, [pc, #336]	; (801322c <UG_Update+0x180>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	68da      	ldr	r2, [r3, #12]
 80130de:	4b53      	ldr	r3, [pc, #332]	; (801322c <UG_Update+0x180>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	691b      	ldr	r3, [r3, #16]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d071      	beq.n	80131cc <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80130e8:	4b50      	ldr	r3, [pc, #320]	; (801322c <UG_Update+0x180>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d06c      	beq.n	80131cc <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80130f2:	4b4e      	ldr	r3, [pc, #312]	; (801322c <UG_Update+0x180>)
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	4b4d      	ldr	r3, [pc, #308]	; (801322c <UG_Update+0x180>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	6912      	ldr	r2, [r2, #16]
 80130fc:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80130fe:	4b4b      	ldr	r3, [pc, #300]	; (801322c <UG_Update+0x180>)
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	4b4a      	ldr	r3, [pc, #296]	; (801322c <UG_Update+0x180>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	68d2      	ldr	r2, [r2, #12]
 8013108:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 801310a:	4b48      	ldr	r3, [pc, #288]	; (801322c <UG_Update+0x180>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	695b      	ldr	r3, [r3, #20]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d045      	beq.n	80131a0 <UG_Update+0xf4>
 8013114:	4b45      	ldr	r3, [pc, #276]	; (801322c <UG_Update+0x180>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	695b      	ldr	r3, [r3, #20]
 801311a:	7d9b      	ldrb	r3, [r3, #22]
 801311c:	f003 0302 	and.w	r3, r3, #2
 8013120:	2b00      	cmp	r3, #0
 8013122:	d03d      	beq.n	80131a0 <UG_Update+0xf4>
 8013124:	4b41      	ldr	r3, [pc, #260]	; (801322c <UG_Update+0x180>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	695b      	ldr	r3, [r3, #20]
 801312a:	7a1b      	ldrb	r3, [r3, #8]
 801312c:	f003 0308 	and.w	r3, r3, #8
 8013130:	2b00      	cmp	r3, #0
 8013132:	d035      	beq.n	80131a0 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8013134:	4b3d      	ldr	r3, [pc, #244]	; (801322c <UG_Update+0x180>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	695b      	ldr	r3, [r3, #20]
 801313a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801313e:	4b3b      	ldr	r3, [pc, #236]	; (801322c <UG_Update+0x180>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	691b      	ldr	r3, [r3, #16]
 8013144:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013148:	429a      	cmp	r2, r3
 801314a:	d123      	bne.n	8013194 <UG_Update+0xe8>
 801314c:	4b37      	ldr	r3, [pc, #220]	; (801322c <UG_Update+0x180>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	695b      	ldr	r3, [r3, #20]
 8013152:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013156:	4b35      	ldr	r3, [pc, #212]	; (801322c <UG_Update+0x180>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013160:	429a      	cmp	r2, r3
 8013162:	d117      	bne.n	8013194 <UG_Update+0xe8>
 8013164:	4b31      	ldr	r3, [pc, #196]	; (801322c <UG_Update+0x180>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	695b      	ldr	r3, [r3, #20]
 801316a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801316e:	4b2f      	ldr	r3, [pc, #188]	; (801322c <UG_Update+0x180>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013178:	429a      	cmp	r2, r3
 801317a:	d10b      	bne.n	8013194 <UG_Update+0xe8>
 801317c:	4b2b      	ldr	r3, [pc, #172]	; (801322c <UG_Update+0x180>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	695b      	ldr	r3, [r3, #20]
 8013182:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013186:	4b29      	ldr	r3, [pc, #164]	; (801322c <UG_Update+0x180>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	691b      	ldr	r3, [r3, #16]
 801318c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013190:	429a      	cmp	r2, r3
 8013192:	d005      	beq.n	80131a0 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013194:	4b25      	ldr	r3, [pc, #148]	; (801322c <UG_Update+0x180>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	695b      	ldr	r3, [r3, #20]
 801319a:	4618      	mov	r0, r3
 801319c:	f000 f848 	bl	8013230 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80131a0:	4b22      	ldr	r3, [pc, #136]	; (801322c <UG_Update+0x180>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	691b      	ldr	r3, [r3, #16]
 80131a6:	7a1a      	ldrb	r2, [r3, #8]
 80131a8:	4b20      	ldr	r3, [pc, #128]	; (801322c <UG_Update+0x180>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	691b      	ldr	r3, [r3, #16]
 80131ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80131b2:	b2d2      	uxtb	r2, r2
 80131b4:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80131b6:	4b1d      	ldr	r3, [pc, #116]	; (801322c <UG_Update+0x180>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	691b      	ldr	r3, [r3, #16]
 80131bc:	7a1a      	ldrb	r2, [r3, #8]
 80131be:	4b1b      	ldr	r3, [pc, #108]	; (801322c <UG_Update+0x180>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80131c8:	b2d2      	uxtb	r2, r2
 80131ca:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80131cc:	4b17      	ldr	r3, [pc, #92]	; (801322c <UG_Update+0x180>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	691b      	ldr	r3, [r3, #16]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d01b      	beq.n	801320e <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80131d6:	4b15      	ldr	r3, [pc, #84]	; (801322c <UG_Update+0x180>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	691b      	ldr	r3, [r3, #16]
 80131dc:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	7a1b      	ldrb	r3, [r3, #8]
 80131e2:	f003 0320 	and.w	r3, r3, #32
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d002      	beq.n	80131f0 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 f8ca 	bl	8013384 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	7a1b      	ldrb	r3, [r3, #8]
 80131f4:	f003 0308 	and.w	r3, r3, #8
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d008      	beq.n	801320e <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7ff fb81 	bl	8012904 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f7ff fc34 	bl	8012a70 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f7ff fc7b 	bl	8012b04 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 801320e:	4b07      	ldr	r3, [pc, #28]	; (801322c <UG_Update+0x180>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	689b      	ldr	r3, [r3, #8]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d004      	beq.n	8013224 <UG_Update+0x178>
     gui->device->flush();
 801321a:	4b04      	ldr	r3, [pc, #16]	; (801322c <UG_Update+0x180>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	4798      	blx	r3
   }
}
 8013224:	bf00      	nop
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	20002090 	.word	0x20002090

08013230 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8013230:	b590      	push	{r4, r7, lr}
 8013232:	b08f      	sub	sp, #60	; 0x3c
 8013234:	af02      	add	r7, sp, #8
 8013236:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2b00      	cmp	r3, #0
 801323c:	f000 809a 	beq.w	8013374 <_UG_WindowDrawTitle+0x144>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	7a1b      	ldrb	r3, [r3, #8]
 8013244:	f003 0302 	and.w	r3, r3, #2
 8013248:	2b00      	cmp	r3, #0
 801324a:	f000 8093 	beq.w	8013374 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	89db      	ldrh	r3, [r3, #14]
 8013252:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	8a1b      	ldrh	r3, [r3, #16]
 8013258:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	8a5b      	ldrh	r3, [r3, #18]
 801325e:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	8a9b      	ldrh	r3, [r3, #20]
 8013264:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	7d9b      	ldrb	r3, [r3, #22]
 801326a:	f003 0301 	and.w	r3, r3, #1
 801326e:	2b00      	cmp	r3, #0
 8013270:	d00f      	beq.n	8013292 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013272:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013274:	3303      	adds	r3, #3
 8013276:	b29b      	uxth	r3, r3
 8013278:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 801327a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801327c:	3303      	adds	r3, #3
 801327e:	b29b      	uxth	r3, r3
 8013280:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013284:	3b03      	subs	r3, #3
 8013286:	b29b      	uxth	r3, r3
 8013288:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 801328a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801328c:	3b03      	subs	r3, #3
 801328e:	b29b      	uxth	r3, r3
 8013290:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013292:	4b3b      	ldr	r3, [pc, #236]	; (8013380 <_UG_WindowDrawTitle+0x150>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	691b      	ldr	r3, [r3, #16]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	429a      	cmp	r2, r3
 801329c:	d106      	bne.n	80132ac <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80132a2:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80132a8:	83bb      	strh	r3, [r7, #28]
 80132aa:	e005      	b.n	80132b8 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132b0:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132b6:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132be:	b29a      	uxth	r2, r3
 80132c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132c2:	4413      	add	r3, r2
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	3b01      	subs	r3, #1
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	b21c      	sxth	r4, r3
 80132cc:	8bfb      	ldrh	r3, [r7, #30]
 80132ce:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80132d2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80132d6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	4623      	mov	r3, r4
 80132de:	f7fe fb03 	bl	80118e8 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	699b      	ldr	r3, [r3, #24]
 80132e6:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	69db      	ldr	r3, [r3, #28]
 80132ec:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80132ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80132f0:	3303      	adds	r3, #3
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	b21b      	sxth	r3, r3
 80132f6:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80132f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132fa:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80132fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80132fe:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013306:	b29a      	uxth	r2, r3
 8013308:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801330a:	4413      	add	r3, r2
 801330c:	b29b      	uxth	r3, r3
 801330e:	3b01      	subs	r3, #1
 8013310:	b29b      	uxth	r3, r3
 8013312:	b21b      	sxth	r3, r3
 8013314:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801331c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8013326:	b21b      	sxth	r3, r3
 8013328:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013330:	b21b      	sxth	r3, r3
 8013332:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013334:	f107 030c 	add.w	r3, r7, #12
 8013338:	4618      	mov	r0, r3
 801333a:	f7ff fc2f 	bl	8012b9c <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013344:	b29a      	uxth	r2, r3
 8013346:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013348:	4413      	add	r3, r2
 801334a:	b29b      	uxth	r3, r3
 801334c:	b219      	sxth	r1, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013354:	b29a      	uxth	r2, r3
 8013356:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013358:	4413      	add	r3, r2
 801335a:	b29b      	uxth	r3, r3
 801335c:	b21b      	sxth	r3, r3
 801335e:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013362:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013366:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801336a:	9400      	str	r4, [sp, #0]
 801336c:	f7fe fc5c 	bl	8011c28 <UG_DrawLine>
      return UG_RESULT_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	e001      	b.n	8013378 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013378:	4618      	mov	r0, r3
 801337a:	3734      	adds	r7, #52	; 0x34
 801337c:	46bd      	mov	sp, r7
 801337e:	bd90      	pop	{r4, r7, pc}
 8013380:	20002090 	.word	0x20002090

08013384 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013384:	b590      	push	{r4, r7, lr}
 8013386:	b089      	sub	sp, #36	; 0x24
 8013388:	af02      	add	r7, sp, #8
 801338a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	89db      	ldrh	r3, [r3, #14]
 8013390:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	8a1b      	ldrh	r3, [r3, #16]
 8013396:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	8a5b      	ldrh	r3, [r3, #18]
 801339c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	8a9b      	ldrh	r3, [r3, #20]
 80133a2:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	7a1b      	ldrb	r3, [r3, #8]
 80133a8:	f023 0320 	bic.w	r3, r3, #32
 80133ac:	b2da      	uxtb	r2, r3
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	7a1b      	ldrb	r3, [r3, #8]
 80133b6:	f003 0308 	and.w	r3, r3, #8
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f000 8084 	beq.w	80134c8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	7d9b      	ldrb	r3, [r3, #22]
 80133c4:	f003 0301 	and.w	r3, r3, #1
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d021      	beq.n	8013410 <_UG_WindowUpdate+0x8c>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	7a1b      	ldrb	r3, [r3, #8]
 80133d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d11b      	bne.n	8013410 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80133d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80133dc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80133e0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80133e4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80133e8:	4c43      	ldr	r4, [pc, #268]	; (80134f8 <_UG_WindowUpdate+0x174>)
 80133ea:	9400      	str	r4, [sp, #0]
 80133ec:	f7ff fd1a 	bl	8012e24 <_UG_DrawObjectFrame>
         xs+=3;
 80133f0:	8abb      	ldrh	r3, [r7, #20]
 80133f2:	3303      	adds	r3, #3
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80133f8:	8a7b      	ldrh	r3, [r7, #18]
 80133fa:	3303      	adds	r3, #3
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8013400:	8a3b      	ldrh	r3, [r7, #16]
 8013402:	3b03      	subs	r3, #3
 8013404:	b29b      	uxth	r3, r3
 8013406:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8013408:	89fb      	ldrh	r3, [r7, #14]
 801340a:	3b03      	subs	r3, #3
 801340c:	b29b      	uxth	r3, r3
 801340e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	7d9b      	ldrb	r3, [r3, #22]
 8013414:	f003 0302 	and.w	r3, r3, #2
 8013418:	2b00      	cmp	r3, #0
 801341a:	d01a      	beq.n	8013452 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f7ff ff07 	bl	8013230 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013428:	b29a      	uxth	r2, r3
 801342a:	8a7b      	ldrh	r3, [r7, #18]
 801342c:	4413      	add	r3, r2
 801342e:	b29b      	uxth	r3, r3
 8013430:	3301      	adds	r3, #1
 8013432:	b29b      	uxth	r3, r3
 8013434:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	7a1b      	ldrb	r3, [r3, #8]
 801343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801343e:	2b00      	cmp	r3, #0
 8013440:	d007      	beq.n	8013452 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	7a1b      	ldrb	r3, [r3, #8]
 8013446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801344a:	b2da      	uxtb	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	721a      	strb	r2, [r3, #8]
            return;
 8013450:	e04e      	b.n	80134f0 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	899b      	ldrh	r3, [r3, #12]
 8013456:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 801345a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801345e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013462:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	4623      	mov	r3, r4
 801346a:	f7fe fa3d 	bl	80118e8 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013474:	2300      	movs	r3, #0
 8013476:	82fb      	strh	r3, [r7, #22]
 8013478:	e021      	b.n	80134be <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	685a      	ldr	r2, [r3, #4]
 801347e:	8afb      	ldrh	r3, [r7, #22]
 8013480:	015b      	lsls	r3, r3, #5
 8013482:	4413      	add	r3, r2
 8013484:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	f003 0301 	and.w	r3, r3, #1
 801348e:	2b00      	cmp	r3, #0
 8013490:	d112      	bne.n	80134b8 <_UG_WindowUpdate+0x134>
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	f003 0302 	and.w	r3, r3, #2
 801349a:	2b00      	cmp	r3, #0
 801349c:	d00c      	beq.n	80134b8 <_UG_WindowUpdate+0x134>
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	f003 0308 	and.w	r3, r3, #8
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d006      	beq.n	80134b8 <_UG_WindowUpdate+0x134>
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80134b8:	8afb      	ldrh	r3, [r7, #22]
 80134ba:	3301      	adds	r3, #1
 80134bc:	82fb      	strh	r3, [r7, #22]
 80134be:	8afa      	ldrh	r2, [r7, #22]
 80134c0:	89bb      	ldrh	r3, [r7, #12]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d3d9      	bcc.n	801347a <_UG_WindowUpdate+0xf6>
 80134c6:	e013      	b.n	80134f0 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80134e0:	4b06      	ldr	r3, [pc, #24]	; (80134fc <_UG_WindowUpdate+0x178>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80134e8:	9300      	str	r3, [sp, #0]
 80134ea:	4623      	mov	r3, r4
 80134ec:	f7fe f9fc 	bl	80118e8 <UG_FillFrame>
   }
}
 80134f0:	371c      	adds	r7, #28
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd90      	pop	{r4, r7, pc}
 80134f6:	bf00      	nop
 80134f8:	0801b0e0 	.word	0x0801b0e0
 80134fc:	20002090 	.word	0x20002090

08013500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b084      	sub	sp, #16
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	460b      	mov	r3, r1
 801350a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801350c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013510:	f002 f8fc 	bl	801570c <USBD_static_malloc>
 8013514:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d105      	bne.n	8013528 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2200      	movs	r2, #0
 8013520:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013524:	2302      	movs	r3, #2
 8013526:	e066      	b.n	80135f6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	7c1b      	ldrb	r3, [r3, #16]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d119      	bne.n	801356c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013538:	f44f 7300 	mov.w	r3, #512	; 0x200
 801353c:	2202      	movs	r2, #2
 801353e:	2181      	movs	r1, #129	; 0x81
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f001 ff8a 	bl	801545a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2201      	movs	r2, #1
 801354a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801354c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013550:	2202      	movs	r2, #2
 8013552:	2101      	movs	r1, #1
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f001 ff80 	bl	801545a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2201      	movs	r2, #1
 801355e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2210      	movs	r2, #16
 8013566:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801356a:	e016      	b.n	801359a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801356c:	2340      	movs	r3, #64	; 0x40
 801356e:	2202      	movs	r2, #2
 8013570:	2181      	movs	r1, #129	; 0x81
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f001 ff71 	bl	801545a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2201      	movs	r2, #1
 801357c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801357e:	2340      	movs	r3, #64	; 0x40
 8013580:	2202      	movs	r2, #2
 8013582:	2101      	movs	r1, #1
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f001 ff68 	bl	801545a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2201      	movs	r2, #1
 801358e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2210      	movs	r2, #16
 8013596:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801359a:	2308      	movs	r3, #8
 801359c:	2203      	movs	r2, #3
 801359e:	2182      	movs	r1, #130	; 0x82
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f001 ff5a 	bl	801545a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2201      	movs	r2, #1
 80135aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2200      	movs	r2, #0
 80135bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	7c1b      	ldrb	r3, [r3, #16]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d109      	bne.n	80135e4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80135d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135da:	2101      	movs	r1, #1
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f002 f82b 	bl	8015638 <USBD_LL_PrepareReceive>
 80135e2:	e007      	b.n	80135f4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80135ea:	2340      	movs	r3, #64	; 0x40
 80135ec:	2101      	movs	r1, #1
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f002 f822 	bl	8015638 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135fe:	b580      	push	{r7, lr}
 8013600:	b082      	sub	sp, #8
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
 8013606:	460b      	mov	r3, r1
 8013608:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801360a:	2181      	movs	r1, #129	; 0x81
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f001 ff4a 	bl	80154a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2200      	movs	r2, #0
 8013616:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013618:	2101      	movs	r1, #1
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f001 ff43 	bl	80154a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2200      	movs	r2, #0
 8013624:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013628:	2182      	movs	r1, #130	; 0x82
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f001 ff3b 	bl	80154a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2200      	movs	r2, #0
 801363c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013646:	2b00      	cmp	r3, #0
 8013648:	d00e      	beq.n	8013668 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801365a:	4618      	mov	r0, r3
 801365c:	f002 f864 	bl	8015728 <USBD_static_free>
    pdev->pClassData = NULL;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2200      	movs	r2, #0
 8013664:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3708      	adds	r7, #8
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
	...

08013674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b086      	sub	sp, #24
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013684:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013686:	2300      	movs	r3, #0
 8013688:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801368a:	2300      	movs	r3, #0
 801368c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801368e:	2300      	movs	r3, #0
 8013690:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d101      	bne.n	801369c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013698:	2303      	movs	r3, #3
 801369a:	e0af      	b.n	80137fc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d03f      	beq.n	8013728 <USBD_CDC_Setup+0xb4>
 80136a8:	2b20      	cmp	r3, #32
 80136aa:	f040 809f 	bne.w	80137ec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	88db      	ldrh	r3, [r3, #6]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d02e      	beq.n	8013714 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	b25b      	sxtb	r3, r3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	da16      	bge.n	80136ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80136c6:	689b      	ldr	r3, [r3, #8]
 80136c8:	683a      	ldr	r2, [r7, #0]
 80136ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80136cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	88d2      	ldrh	r2, [r2, #6]
 80136d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	88db      	ldrh	r3, [r3, #6]
 80136d8:	2b07      	cmp	r3, #7
 80136da:	bf28      	it	cs
 80136dc:	2307      	movcs	r3, #7
 80136de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	89fa      	ldrh	r2, [r7, #14]
 80136e4:	4619      	mov	r1, r3
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f001 facf 	bl	8014c8a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80136ec:	e085      	b.n	80137fa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	785a      	ldrb	r2, [r3, #1]
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	88db      	ldrh	r3, [r3, #6]
 80136fc:	b2da      	uxtb	r2, r3
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013704:	6939      	ldr	r1, [r7, #16]
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	88db      	ldrh	r3, [r3, #6]
 801370a:	461a      	mov	r2, r3
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f001 fae8 	bl	8014ce2 <USBD_CtlPrepareRx>
      break;
 8013712:	e072      	b.n	80137fa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801371a:	689b      	ldr	r3, [r3, #8]
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	7850      	ldrb	r0, [r2, #1]
 8013720:	2200      	movs	r2, #0
 8013722:	6839      	ldr	r1, [r7, #0]
 8013724:	4798      	blx	r3
      break;
 8013726:	e068      	b.n	80137fa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	785b      	ldrb	r3, [r3, #1]
 801372c:	2b0b      	cmp	r3, #11
 801372e:	d852      	bhi.n	80137d6 <USBD_CDC_Setup+0x162>
 8013730:	a201      	add	r2, pc, #4	; (adr r2, 8013738 <USBD_CDC_Setup+0xc4>)
 8013732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013736:	bf00      	nop
 8013738:	08013769 	.word	0x08013769
 801373c:	080137e5 	.word	0x080137e5
 8013740:	080137d7 	.word	0x080137d7
 8013744:	080137d7 	.word	0x080137d7
 8013748:	080137d7 	.word	0x080137d7
 801374c:	080137d7 	.word	0x080137d7
 8013750:	080137d7 	.word	0x080137d7
 8013754:	080137d7 	.word	0x080137d7
 8013758:	080137d7 	.word	0x080137d7
 801375c:	080137d7 	.word	0x080137d7
 8013760:	08013793 	.word	0x08013793
 8013764:	080137bd 	.word	0x080137bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801376e:	b2db      	uxtb	r3, r3
 8013770:	2b03      	cmp	r3, #3
 8013772:	d107      	bne.n	8013784 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013774:	f107 030a 	add.w	r3, r7, #10
 8013778:	2202      	movs	r2, #2
 801377a:	4619      	mov	r1, r3
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f001 fa84 	bl	8014c8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013782:	e032      	b.n	80137ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013784:	6839      	ldr	r1, [r7, #0]
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f001 fa0e 	bl	8014ba8 <USBD_CtlError>
            ret = USBD_FAIL;
 801378c:	2303      	movs	r3, #3
 801378e:	75fb      	strb	r3, [r7, #23]
          break;
 8013790:	e02b      	b.n	80137ea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013798:	b2db      	uxtb	r3, r3
 801379a:	2b03      	cmp	r3, #3
 801379c:	d107      	bne.n	80137ae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801379e:	f107 030d 	add.w	r3, r7, #13
 80137a2:	2201      	movs	r2, #1
 80137a4:	4619      	mov	r1, r3
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f001 fa6f 	bl	8014c8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137ac:	e01d      	b.n	80137ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f001 f9f9 	bl	8014ba8 <USBD_CtlError>
            ret = USBD_FAIL;
 80137b6:	2303      	movs	r3, #3
 80137b8:	75fb      	strb	r3, [r7, #23]
          break;
 80137ba:	e016      	b.n	80137ea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	2b03      	cmp	r3, #3
 80137c6:	d00f      	beq.n	80137e8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f001 f9ec 	bl	8014ba8 <USBD_CtlError>
            ret = USBD_FAIL;
 80137d0:	2303      	movs	r3, #3
 80137d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80137d4:	e008      	b.n	80137e8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f001 f9e5 	bl	8014ba8 <USBD_CtlError>
          ret = USBD_FAIL;
 80137de:	2303      	movs	r3, #3
 80137e0:	75fb      	strb	r3, [r7, #23]
          break;
 80137e2:	e002      	b.n	80137ea <USBD_CDC_Setup+0x176>
          break;
 80137e4:	bf00      	nop
 80137e6:	e008      	b.n	80137fa <USBD_CDC_Setup+0x186>
          break;
 80137e8:	bf00      	nop
      }
      break;
 80137ea:	e006      	b.n	80137fa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80137ec:	6839      	ldr	r1, [r7, #0]
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f001 f9da 	bl	8014ba8 <USBD_CtlError>
      ret = USBD_FAIL;
 80137f4:	2303      	movs	r3, #3
 80137f6:	75fb      	strb	r3, [r7, #23]
      break;
 80137f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80137fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3718      	adds	r7, #24
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	460b      	mov	r3, r1
 801380e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013816:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013822:	2303      	movs	r3, #3
 8013824:	e04f      	b.n	80138c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801382c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801382e:	78fa      	ldrb	r2, [r7, #3]
 8013830:	6879      	ldr	r1, [r7, #4]
 8013832:	4613      	mov	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	440b      	add	r3, r1
 801383c:	3318      	adds	r3, #24
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d029      	beq.n	8013898 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013844:	78fa      	ldrb	r2, [r7, #3]
 8013846:	6879      	ldr	r1, [r7, #4]
 8013848:	4613      	mov	r3, r2
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	4413      	add	r3, r2
 801384e:	009b      	lsls	r3, r3, #2
 8013850:	440b      	add	r3, r1
 8013852:	3318      	adds	r3, #24
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	78f9      	ldrb	r1, [r7, #3]
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	460b      	mov	r3, r1
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	440b      	add	r3, r1
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	4403      	add	r3, r0
 8013864:	3320      	adds	r3, #32
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	fbb2 f1f3 	udiv	r1, r2, r3
 801386c:	fb01 f303 	mul.w	r3, r1, r3
 8013870:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013872:	2b00      	cmp	r3, #0
 8013874:	d110      	bne.n	8013898 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013876:	78fa      	ldrb	r2, [r7, #3]
 8013878:	6879      	ldr	r1, [r7, #4]
 801387a:	4613      	mov	r3, r2
 801387c:	009b      	lsls	r3, r3, #2
 801387e:	4413      	add	r3, r2
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	440b      	add	r3, r1
 8013884:	3318      	adds	r3, #24
 8013886:	2200      	movs	r2, #0
 8013888:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801388a:	78f9      	ldrb	r1, [r7, #3]
 801388c:	2300      	movs	r3, #0
 801388e:	2200      	movs	r2, #0
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f001 feb0 	bl	80155f6 <USBD_LL_Transmit>
 8013896:	e015      	b.n	80138c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	2200      	movs	r2, #0
 801389c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138a6:	691b      	ldr	r3, [r3, #16]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d00b      	beq.n	80138c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138b2:	691b      	ldr	r3, [r3, #16]
 80138b4:	68ba      	ldr	r2, [r7, #8]
 80138b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80138c0:	78fa      	ldrb	r2, [r7, #3]
 80138c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80138c4:	2300      	movs	r3, #0
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3710      	adds	r7, #16
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}

080138ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b084      	sub	sp, #16
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	460b      	mov	r3, r1
 80138d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d101      	bne.n	80138f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80138ec:	2303      	movs	r3, #3
 80138ee:	e015      	b.n	801391c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80138f0:	78fb      	ldrb	r3, [r7, #3]
 80138f2:	4619      	mov	r1, r3
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f001 fec0 	bl	801567a <USBD_LL_GetRxDataSize>
 80138fa:	4602      	mov	r2, r0
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	68fa      	ldr	r2, [r7, #12]
 801390c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013916:	4611      	mov	r1, r2
 8013918:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801391a:	2300      	movs	r3, #0
}
 801391c:	4618      	mov	r0, r3
 801391e:	3710      	adds	r7, #16
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013932:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d101      	bne.n	801393e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801393a:	2303      	movs	r3, #3
 801393c:	e01b      	b.n	8013976 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d015      	beq.n	8013974 <USBD_CDC_EP0_RxReady+0x50>
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801394e:	2bff      	cmp	r3, #255	; 0xff
 8013950:	d010      	beq.n	8013974 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013958:	689b      	ldr	r3, [r3, #8]
 801395a:	68fa      	ldr	r2, [r7, #12]
 801395c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013960:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013968:	b292      	uxth	r2, r2
 801396a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	22ff      	movs	r2, #255	; 0xff
 8013970:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013974:	2300      	movs	r3, #0
}
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
	...

08013980 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2243      	movs	r2, #67	; 0x43
 801398c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801398e:	4b03      	ldr	r3, [pc, #12]	; (801399c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013990:	4618      	mov	r0, r3
 8013992:	370c      	adds	r7, #12
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr
 801399c:	20000280 	.word	0x20000280

080139a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b083      	sub	sp, #12
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2243      	movs	r2, #67	; 0x43
 80139ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80139ae:	4b03      	ldr	r3, [pc, #12]	; (80139bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	370c      	adds	r7, #12
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr
 80139bc:	2000023c 	.word	0x2000023c

080139c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2243      	movs	r2, #67	; 0x43
 80139cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80139ce:	4b03      	ldr	r3, [pc, #12]	; (80139dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr
 80139dc:	200002c4 	.word	0x200002c4

080139e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b083      	sub	sp, #12
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	220a      	movs	r2, #10
 80139ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80139ee:	4b03      	ldr	r3, [pc, #12]	; (80139fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	370c      	adds	r7, #12
 80139f4:	46bd      	mov	sp, r7
 80139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fa:	4770      	bx	lr
 80139fc:	200001f8 	.word	0x200001f8

08013a00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b083      	sub	sp, #12
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d101      	bne.n	8013a14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a10:	2303      	movs	r3, #3
 8013a12:	e004      	b.n	8013a1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013a1c:	2300      	movs	r3, #0
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	370c      	adds	r7, #12
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr

08013a2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013a2a:	b480      	push	{r7}
 8013a2c:	b087      	sub	sp, #28
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	60f8      	str	r0, [r7, #12]
 8013a32:	60b9      	str	r1, [r7, #8]
 8013a34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a3c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d101      	bne.n	8013a48 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013a44:	2303      	movs	r3, #3
 8013a46:	e008      	b.n	8013a5a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013a58:	2300      	movs	r3, #0
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	371c      	adds	r7, #28
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a64:	4770      	bx	lr

08013a66 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013a66:	b480      	push	{r7}
 8013a68:	b085      	sub	sp, #20
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d101      	bne.n	8013a82 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	e004      	b.n	8013a8c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	683a      	ldr	r2, [r7, #0]
 8013a86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3714      	adds	r7, #20
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013aa6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d101      	bne.n	8013aba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013ab6:	2303      	movs	r3, #3
 8013ab8:	e01a      	b.n	8013af0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d114      	bne.n	8013aee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013ae2:	2181      	movs	r1, #129	; 0x81
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f001 fd86 	bl	80155f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013aea:	2300      	movs	r3, #0
 8013aec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b084      	sub	sp, #16
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d101      	bne.n	8013b16 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013b12:	2303      	movs	r3, #3
 8013b14:	e016      	b.n	8013b44 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	7c1b      	ldrb	r3, [r3, #16]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d109      	bne.n	8013b32 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b28:	2101      	movs	r1, #1
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f001 fd84 	bl	8015638 <USBD_LL_PrepareReceive>
 8013b30:	e007      	b.n	8013b42 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013b38:	2340      	movs	r3, #64	; 0x40
 8013b3a:	2101      	movs	r1, #1
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f001 fd7b 	bl	8015638 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013b42:	2300      	movs	r3, #0
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}

08013b4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b086      	sub	sp, #24
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	60b9      	str	r1, [r7, #8]
 8013b56:	4613      	mov	r3, r2
 8013b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d101      	bne.n	8013b64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013b60:	2303      	movs	r3, #3
 8013b62:	e01f      	b.n	8013ba4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2200      	movs	r2, #0
 8013b68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2200      	movs	r2, #0
 8013b78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d003      	beq.n	8013b8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	79fa      	ldrb	r2, [r7, #7]
 8013b96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b98:	68f8      	ldr	r0, [r7, #12]
 8013b9a:	f001 fbe3 	bl	8015364 <USBD_LL_Init>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3718      	adds	r7, #24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013bc0:	2303      	movs	r3, #3
 8013bc2:	e016      	b.n	8013bf2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	683a      	ldr	r2, [r7, #0]
 8013bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d00b      	beq.n	8013bf0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be0:	f107 020e 	add.w	r2, r7, #14
 8013be4:	4610      	mov	r0, r2
 8013be6:	4798      	blx	r3
 8013be8:	4602      	mov	r2, r0
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f001 fc0e 	bl	8015424 <USBD_LL_Start>
 8013c08:	4603      	mov	r3, r0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3708      	adds	r7, #8
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}

08013c12 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013c12:	b480      	push	{r7}
 8013c14:	b083      	sub	sp, #12
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c1a:	2300      	movs	r3, #0
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	370c      	adds	r7, #12
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	460b      	mov	r3, r1
 8013c32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013c34:	2303      	movs	r3, #3
 8013c36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d009      	beq.n	8013c56 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	78fa      	ldrb	r2, [r7, #3]
 8013c4c:	4611      	mov	r1, r2
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	4798      	blx	r3
 8013c52:	4603      	mov	r3, r0
 8013c54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3710      	adds	r7, #16
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d007      	beq.n	8013c86 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	78fa      	ldrb	r2, [r7, #3]
 8013c80:	4611      	mov	r1, r2
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	4798      	blx	r3
  }

  return USBD_OK;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 ff46 	bl	8014b34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2201      	movs	r2, #1
 8013cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013cc4:	f003 031f 	and.w	r3, r3, #31
 8013cc8:	2b02      	cmp	r3, #2
 8013cca:	d01a      	beq.n	8013d02 <USBD_LL_SetupStage+0x72>
 8013ccc:	2b02      	cmp	r3, #2
 8013cce:	d822      	bhi.n	8013d16 <USBD_LL_SetupStage+0x86>
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <USBD_LL_SetupStage+0x4a>
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d00a      	beq.n	8013cee <USBD_LL_SetupStage+0x5e>
 8013cd8:	e01d      	b.n	8013d16 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f000 f9ee 	bl	80140c4 <USBD_StdDevReq>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	73fb      	strb	r3, [r7, #15]
      break;
 8013cec:	e020      	b.n	8013d30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f000 fa52 	bl	80141a0 <USBD_StdItfReq>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8013d00:	e016      	b.n	8013d30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d08:	4619      	mov	r1, r3
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f000 fa91 	bl	8014232 <USBD_StdEPReq>
 8013d10:	4603      	mov	r3, r0
 8013d12:	73fb      	strb	r3, [r7, #15]
      break;
 8013d14:	e00c      	b.n	8013d30 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	4619      	mov	r1, r3
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f001 fbdd 	bl	80154e4 <USBD_LL_StallEP>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8013d2e:	bf00      	nop
  }

  return ret;
 8013d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3710      	adds	r7, #16
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}

08013d3a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d3a:	b580      	push	{r7, lr}
 8013d3c:	b086      	sub	sp, #24
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	60f8      	str	r0, [r7, #12]
 8013d42:	460b      	mov	r3, r1
 8013d44:	607a      	str	r2, [r7, #4]
 8013d46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013d48:	7afb      	ldrb	r3, [r7, #11]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d138      	bne.n	8013dc0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013d54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d5c:	2b03      	cmp	r3, #3
 8013d5e:	d14a      	bne.n	8013df6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	689a      	ldr	r2, [r3, #8]
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d913      	bls.n	8013d94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	689a      	ldr	r2, [r3, #8]
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	1ad2      	subs	r2, r2, r3
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	68da      	ldr	r2, [r3, #12]
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	4293      	cmp	r3, r2
 8013d84:	bf28      	it	cs
 8013d86:	4613      	movcs	r3, r2
 8013d88:	461a      	mov	r2, r3
 8013d8a:	6879      	ldr	r1, [r7, #4]
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f000 ffc5 	bl	8014d1c <USBD_CtlContinueRx>
 8013d92:	e030      	b.n	8013df6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	2b03      	cmp	r3, #3
 8013d9e:	d10b      	bne.n	8013db8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013da6:	691b      	ldr	r3, [r3, #16]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d005      	beq.n	8013db8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013db2:	691b      	ldr	r3, [r3, #16]
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f000 ffc0 	bl	8014d3e <USBD_CtlSendStatus>
 8013dbe:	e01a      	b.n	8013df6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	2b03      	cmp	r3, #3
 8013dca:	d114      	bne.n	8013df6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dd2:	699b      	ldr	r3, [r3, #24]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00e      	beq.n	8013df6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dde:	699b      	ldr	r3, [r3, #24]
 8013de0:	7afa      	ldrb	r2, [r7, #11]
 8013de2:	4611      	mov	r1, r2
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	4798      	blx	r3
 8013de8:	4603      	mov	r3, r0
 8013dea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013dec:	7dfb      	ldrb	r3, [r7, #23]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013df2:	7dfb      	ldrb	r3, [r7, #23]
 8013df4:	e000      	b.n	8013df8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013df6:	2300      	movs	r3, #0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3718      	adds	r7, #24
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	460b      	mov	r3, r1
 8013e0a:	607a      	str	r2, [r7, #4]
 8013e0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013e0e:	7afb      	ldrb	r3, [r7, #11]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d16b      	bne.n	8013eec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	3314      	adds	r3, #20
 8013e18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e20:	2b02      	cmp	r3, #2
 8013e22:	d156      	bne.n	8013ed2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	689a      	ldr	r2, [r3, #8]
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	68db      	ldr	r3, [r3, #12]
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d914      	bls.n	8013e5a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	689a      	ldr	r2, [r3, #8]
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	1ad2      	subs	r2, r2, r3
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	689b      	ldr	r3, [r3, #8]
 8013e42:	461a      	mov	r2, r3
 8013e44:	6879      	ldr	r1, [r7, #4]
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f000 ff3a 	bl	8014cc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	2200      	movs	r2, #0
 8013e50:	2100      	movs	r1, #0
 8013e52:	68f8      	ldr	r0, [r7, #12]
 8013e54:	f001 fbf0 	bl	8015638 <USBD_LL_PrepareReceive>
 8013e58:	e03b      	b.n	8013ed2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	68da      	ldr	r2, [r3, #12]
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d11c      	bne.n	8013ea0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	685a      	ldr	r2, [r3, #4]
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d316      	bcc.n	8013ea0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	685a      	ldr	r2, [r3, #4]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d20f      	bcs.n	8013ea0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e80:	2200      	movs	r2, #0
 8013e82:	2100      	movs	r1, #0
 8013e84:	68f8      	ldr	r0, [r7, #12]
 8013e86:	f000 ff1b 	bl	8014cc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e92:	2300      	movs	r3, #0
 8013e94:	2200      	movs	r2, #0
 8013e96:	2100      	movs	r1, #0
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f001 fbcd 	bl	8015638 <USBD_LL_PrepareReceive>
 8013e9e:	e018      	b.n	8013ed2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	2b03      	cmp	r3, #3
 8013eaa:	d10b      	bne.n	8013ec4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d005      	beq.n	8013ec4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ec4:	2180      	movs	r1, #128	; 0x80
 8013ec6:	68f8      	ldr	r0, [r7, #12]
 8013ec8:	f001 fb0c 	bl	80154e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ecc:	68f8      	ldr	r0, [r7, #12]
 8013ece:	f000 ff49 	bl	8014d64 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ed8:	2b01      	cmp	r3, #1
 8013eda:	d122      	bne.n	8013f22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013edc:	68f8      	ldr	r0, [r7, #12]
 8013ede:	f7ff fe98 	bl	8013c12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013eea:	e01a      	b.n	8013f22 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	2b03      	cmp	r3, #3
 8013ef6:	d114      	bne.n	8013f22 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013efe:	695b      	ldr	r3, [r3, #20]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d00e      	beq.n	8013f22 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f0a:	695b      	ldr	r3, [r3, #20]
 8013f0c:	7afa      	ldrb	r2, [r7, #11]
 8013f0e:	4611      	mov	r1, r2
 8013f10:	68f8      	ldr	r0, [r7, #12]
 8013f12:	4798      	blx	r3
 8013f14:	4603      	mov	r3, r0
 8013f16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013f18:	7dfb      	ldrb	r3, [r7, #23]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d001      	beq.n	8013f22 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013f1e:	7dfb      	ldrb	r3, [r7, #23]
 8013f20:	e000      	b.n	8013f24 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013f22:	2300      	movs	r3, #0
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3718      	adds	r7, #24
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2201      	movs	r2, #1
 8013f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013f5c:	2303      	movs	r3, #3
 8013f5e:	e02f      	b.n	8013fc0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00f      	beq.n	8013f8a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d009      	beq.n	8013f8a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	6852      	ldr	r2, [r2, #4]
 8013f82:	b2d2      	uxtb	r2, r2
 8013f84:	4611      	mov	r1, r2
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f8a:	2340      	movs	r3, #64	; 0x40
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	2100      	movs	r1, #0
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f001 fa62 	bl	801545a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2240      	movs	r2, #64	; 0x40
 8013fa2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013fa6:	2340      	movs	r3, #64	; 0x40
 8013fa8:	2200      	movs	r2, #0
 8013faa:	2180      	movs	r1, #128	; 0x80
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f001 fa54 	bl	801545a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2240      	movs	r2, #64	; 0x40
 8013fbc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013fbe:	2300      	movs	r3, #0
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3708      	adds	r7, #8
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	460b      	mov	r3, r1
 8013fd2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	78fa      	ldrb	r2, [r7, #3]
 8013fd8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013fda:	2300      	movs	r3, #0
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	370c      	adds	r7, #12
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe6:	4770      	bx	lr

08013fe8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2204      	movs	r2, #4
 8014002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014006:	2300      	movs	r3, #0
}
 8014008:	4618      	mov	r0, r3
 801400a:	370c      	adds	r7, #12
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr

08014014 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b04      	cmp	r3, #4
 8014026:	d106      	bne.n	8014036 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801402e:	b2da      	uxtb	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014036:	2300      	movs	r3, #0
}
 8014038:	4618      	mov	r0, r3
 801403a:	370c      	adds	r7, #12
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr

08014044 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014052:	2b00      	cmp	r3, #0
 8014054:	d101      	bne.n	801405a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014056:	2303      	movs	r3, #3
 8014058:	e012      	b.n	8014080 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014060:	b2db      	uxtb	r3, r3
 8014062:	2b03      	cmp	r3, #3
 8014064:	d10b      	bne.n	801407e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801406c:	69db      	ldr	r3, [r3, #28]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d005      	beq.n	801407e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014078:	69db      	ldr	r3, [r3, #28]
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801407e:	2300      	movs	r3, #0
}
 8014080:	4618      	mov	r0, r3
 8014082:	3708      	adds	r7, #8
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}

08014088 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014088:	b480      	push	{r7}
 801408a:	b087      	sub	sp, #28
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	3301      	adds	r3, #1
 801409e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80140a6:	8a3b      	ldrh	r3, [r7, #16]
 80140a8:	021b      	lsls	r3, r3, #8
 80140aa:	b21a      	sxth	r2, r3
 80140ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140b0:	4313      	orrs	r3, r2
 80140b2:	b21b      	sxth	r3, r3
 80140b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80140b6:	89fb      	ldrh	r3, [r7, #14]
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	371c      	adds	r7, #28
 80140bc:	46bd      	mov	sp, r7
 80140be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c2:	4770      	bx	lr

080140c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140ce:	2300      	movs	r3, #0
 80140d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140da:	2b40      	cmp	r3, #64	; 0x40
 80140dc:	d005      	beq.n	80140ea <USBD_StdDevReq+0x26>
 80140de:	2b40      	cmp	r3, #64	; 0x40
 80140e0:	d853      	bhi.n	801418a <USBD_StdDevReq+0xc6>
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00b      	beq.n	80140fe <USBD_StdDevReq+0x3a>
 80140e6:	2b20      	cmp	r3, #32
 80140e8:	d14f      	bne.n	801418a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	4798      	blx	r3
 80140f8:	4603      	mov	r3, r0
 80140fa:	73fb      	strb	r3, [r7, #15]
      break;
 80140fc:	e04a      	b.n	8014194 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	785b      	ldrb	r3, [r3, #1]
 8014102:	2b09      	cmp	r3, #9
 8014104:	d83b      	bhi.n	801417e <USBD_StdDevReq+0xba>
 8014106:	a201      	add	r2, pc, #4	; (adr r2, 801410c <USBD_StdDevReq+0x48>)
 8014108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801410c:	08014161 	.word	0x08014161
 8014110:	08014175 	.word	0x08014175
 8014114:	0801417f 	.word	0x0801417f
 8014118:	0801416b 	.word	0x0801416b
 801411c:	0801417f 	.word	0x0801417f
 8014120:	0801413f 	.word	0x0801413f
 8014124:	08014135 	.word	0x08014135
 8014128:	0801417f 	.word	0x0801417f
 801412c:	08014157 	.word	0x08014157
 8014130:	08014149 	.word	0x08014149
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014134:	6839      	ldr	r1, [r7, #0]
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 f9de 	bl	80144f8 <USBD_GetDescriptor>
          break;
 801413c:	e024      	b.n	8014188 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801413e:	6839      	ldr	r1, [r7, #0]
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 fb6d 	bl	8014820 <USBD_SetAddress>
          break;
 8014146:	e01f      	b.n	8014188 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014148:	6839      	ldr	r1, [r7, #0]
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 fbac 	bl	80148a8 <USBD_SetConfig>
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]
          break;
 8014154:	e018      	b.n	8014188 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014156:	6839      	ldr	r1, [r7, #0]
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f000 fc4b 	bl	80149f4 <USBD_GetConfig>
          break;
 801415e:	e013      	b.n	8014188 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014160:	6839      	ldr	r1, [r7, #0]
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 fc7c 	bl	8014a60 <USBD_GetStatus>
          break;
 8014168:	e00e      	b.n	8014188 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801416a:	6839      	ldr	r1, [r7, #0]
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f000 fcab 	bl	8014ac8 <USBD_SetFeature>
          break;
 8014172:	e009      	b.n	8014188 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014174:	6839      	ldr	r1, [r7, #0]
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f000 fcba 	bl	8014af0 <USBD_ClrFeature>
          break;
 801417c:	e004      	b.n	8014188 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f000 fd11 	bl	8014ba8 <USBD_CtlError>
          break;
 8014186:	bf00      	nop
      }
      break;
 8014188:	e004      	b.n	8014194 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801418a:	6839      	ldr	r1, [r7, #0]
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 fd0b 	bl	8014ba8 <USBD_CtlError>
      break;
 8014192:	bf00      	nop
  }

  return ret;
 8014194:	7bfb      	ldrb	r3, [r7, #15]
}
 8014196:	4618      	mov	r0, r3
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop

080141a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141aa:	2300      	movs	r3, #0
 80141ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141b6:	2b40      	cmp	r3, #64	; 0x40
 80141b8:	d005      	beq.n	80141c6 <USBD_StdItfReq+0x26>
 80141ba:	2b40      	cmp	r3, #64	; 0x40
 80141bc:	d82f      	bhi.n	801421e <USBD_StdItfReq+0x7e>
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d001      	beq.n	80141c6 <USBD_StdItfReq+0x26>
 80141c2:	2b20      	cmp	r3, #32
 80141c4:	d12b      	bne.n	801421e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	3b01      	subs	r3, #1
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	d81d      	bhi.n	8014210 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	889b      	ldrh	r3, [r3, #4]
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	2b01      	cmp	r3, #1
 80141dc:	d813      	bhi.n	8014206 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141e4:	689b      	ldr	r3, [r3, #8]
 80141e6:	6839      	ldr	r1, [r7, #0]
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	4798      	blx	r3
 80141ec:	4603      	mov	r3, r0
 80141ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	88db      	ldrh	r3, [r3, #6]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d110      	bne.n	801421a <USBD_StdItfReq+0x7a>
 80141f8:	7bfb      	ldrb	r3, [r7, #15]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d10d      	bne.n	801421a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 fd9d 	bl	8014d3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014204:	e009      	b.n	801421a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014206:	6839      	ldr	r1, [r7, #0]
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 fccd 	bl	8014ba8 <USBD_CtlError>
          break;
 801420e:	e004      	b.n	801421a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014210:	6839      	ldr	r1, [r7, #0]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 fcc8 	bl	8014ba8 <USBD_CtlError>
          break;
 8014218:	e000      	b.n	801421c <USBD_StdItfReq+0x7c>
          break;
 801421a:	bf00      	nop
      }
      break;
 801421c:	e004      	b.n	8014228 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801421e:	6839      	ldr	r1, [r7, #0]
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 fcc1 	bl	8014ba8 <USBD_CtlError>
      break;
 8014226:	bf00      	nop
  }

  return ret;
 8014228:	7bfb      	ldrb	r3, [r7, #15]
}
 801422a:	4618      	mov	r0, r3
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}

08014232 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014232:	b580      	push	{r7, lr}
 8014234:	b084      	sub	sp, #16
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
 801423a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801423c:	2300      	movs	r3, #0
 801423e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	889b      	ldrh	r3, [r3, #4]
 8014244:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801424e:	2b40      	cmp	r3, #64	; 0x40
 8014250:	d007      	beq.n	8014262 <USBD_StdEPReq+0x30>
 8014252:	2b40      	cmp	r3, #64	; 0x40
 8014254:	f200 8145 	bhi.w	80144e2 <USBD_StdEPReq+0x2b0>
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00c      	beq.n	8014276 <USBD_StdEPReq+0x44>
 801425c:	2b20      	cmp	r3, #32
 801425e:	f040 8140 	bne.w	80144e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014268:	689b      	ldr	r3, [r3, #8]
 801426a:	6839      	ldr	r1, [r7, #0]
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	4798      	blx	r3
 8014270:	4603      	mov	r3, r0
 8014272:	73fb      	strb	r3, [r7, #15]
      break;
 8014274:	e13a      	b.n	80144ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	785b      	ldrb	r3, [r3, #1]
 801427a:	2b03      	cmp	r3, #3
 801427c:	d007      	beq.n	801428e <USBD_StdEPReq+0x5c>
 801427e:	2b03      	cmp	r3, #3
 8014280:	f300 8129 	bgt.w	80144d6 <USBD_StdEPReq+0x2a4>
 8014284:	2b00      	cmp	r3, #0
 8014286:	d07f      	beq.n	8014388 <USBD_StdEPReq+0x156>
 8014288:	2b01      	cmp	r3, #1
 801428a:	d03c      	beq.n	8014306 <USBD_StdEPReq+0xd4>
 801428c:	e123      	b.n	80144d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014294:	b2db      	uxtb	r3, r3
 8014296:	2b02      	cmp	r3, #2
 8014298:	d002      	beq.n	80142a0 <USBD_StdEPReq+0x6e>
 801429a:	2b03      	cmp	r3, #3
 801429c:	d016      	beq.n	80142cc <USBD_StdEPReq+0x9a>
 801429e:	e02c      	b.n	80142fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142a0:	7bbb      	ldrb	r3, [r7, #14]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00d      	beq.n	80142c2 <USBD_StdEPReq+0x90>
 80142a6:	7bbb      	ldrb	r3, [r7, #14]
 80142a8:	2b80      	cmp	r3, #128	; 0x80
 80142aa:	d00a      	beq.n	80142c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80142ac:	7bbb      	ldrb	r3, [r7, #14]
 80142ae:	4619      	mov	r1, r3
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f001 f917 	bl	80154e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80142b6:	2180      	movs	r1, #128	; 0x80
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f001 f913 	bl	80154e4 <USBD_LL_StallEP>
 80142be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80142c0:	e020      	b.n	8014304 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80142c2:	6839      	ldr	r1, [r7, #0]
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 fc6f 	bl	8014ba8 <USBD_CtlError>
              break;
 80142ca:	e01b      	b.n	8014304 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	885b      	ldrh	r3, [r3, #2]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d10e      	bne.n	80142f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80142d4:	7bbb      	ldrb	r3, [r7, #14]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d00b      	beq.n	80142f2 <USBD_StdEPReq+0xc0>
 80142da:	7bbb      	ldrb	r3, [r7, #14]
 80142dc:	2b80      	cmp	r3, #128	; 0x80
 80142de:	d008      	beq.n	80142f2 <USBD_StdEPReq+0xc0>
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	88db      	ldrh	r3, [r3, #6]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d104      	bne.n	80142f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80142e8:	7bbb      	ldrb	r3, [r7, #14]
 80142ea:	4619      	mov	r1, r3
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f001 f8f9 	bl	80154e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 fd23 	bl	8014d3e <USBD_CtlSendStatus>

              break;
 80142f8:	e004      	b.n	8014304 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80142fa:	6839      	ldr	r1, [r7, #0]
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f000 fc53 	bl	8014ba8 <USBD_CtlError>
              break;
 8014302:	bf00      	nop
          }
          break;
 8014304:	e0ec      	b.n	80144e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801430c:	b2db      	uxtb	r3, r3
 801430e:	2b02      	cmp	r3, #2
 8014310:	d002      	beq.n	8014318 <USBD_StdEPReq+0xe6>
 8014312:	2b03      	cmp	r3, #3
 8014314:	d016      	beq.n	8014344 <USBD_StdEPReq+0x112>
 8014316:	e030      	b.n	801437a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014318:	7bbb      	ldrb	r3, [r7, #14]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00d      	beq.n	801433a <USBD_StdEPReq+0x108>
 801431e:	7bbb      	ldrb	r3, [r7, #14]
 8014320:	2b80      	cmp	r3, #128	; 0x80
 8014322:	d00a      	beq.n	801433a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014324:	7bbb      	ldrb	r3, [r7, #14]
 8014326:	4619      	mov	r1, r3
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f001 f8db 	bl	80154e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801432e:	2180      	movs	r1, #128	; 0x80
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f001 f8d7 	bl	80154e4 <USBD_LL_StallEP>
 8014336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014338:	e025      	b.n	8014386 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801433a:	6839      	ldr	r1, [r7, #0]
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 fc33 	bl	8014ba8 <USBD_CtlError>
              break;
 8014342:	e020      	b.n	8014386 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	885b      	ldrh	r3, [r3, #2]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d11b      	bne.n	8014384 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801434c:	7bbb      	ldrb	r3, [r7, #14]
 801434e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014352:	2b00      	cmp	r3, #0
 8014354:	d004      	beq.n	8014360 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014356:	7bbb      	ldrb	r3, [r7, #14]
 8014358:	4619      	mov	r1, r3
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f001 f8e1 	bl	8015522 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 fcec 	bl	8014d3e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	6839      	ldr	r1, [r7, #0]
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	4798      	blx	r3
 8014374:	4603      	mov	r3, r0
 8014376:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014378:	e004      	b.n	8014384 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801437a:	6839      	ldr	r1, [r7, #0]
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f000 fc13 	bl	8014ba8 <USBD_CtlError>
              break;
 8014382:	e000      	b.n	8014386 <USBD_StdEPReq+0x154>
              break;
 8014384:	bf00      	nop
          }
          break;
 8014386:	e0ab      	b.n	80144e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801438e:	b2db      	uxtb	r3, r3
 8014390:	2b02      	cmp	r3, #2
 8014392:	d002      	beq.n	801439a <USBD_StdEPReq+0x168>
 8014394:	2b03      	cmp	r3, #3
 8014396:	d032      	beq.n	80143fe <USBD_StdEPReq+0x1cc>
 8014398:	e097      	b.n	80144ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801439a:	7bbb      	ldrb	r3, [r7, #14]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d007      	beq.n	80143b0 <USBD_StdEPReq+0x17e>
 80143a0:	7bbb      	ldrb	r3, [r7, #14]
 80143a2:	2b80      	cmp	r3, #128	; 0x80
 80143a4:	d004      	beq.n	80143b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fbfd 	bl	8014ba8 <USBD_CtlError>
                break;
 80143ae:	e091      	b.n	80144d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	da0b      	bge.n	80143d0 <USBD_StdEPReq+0x19e>
 80143b8:	7bbb      	ldrb	r3, [r7, #14]
 80143ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143be:	4613      	mov	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	4413      	add	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	3310      	adds	r3, #16
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	4413      	add	r3, r2
 80143cc:	3304      	adds	r3, #4
 80143ce:	e00b      	b.n	80143e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80143d0:	7bbb      	ldrb	r3, [r7, #14]
 80143d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143d6:	4613      	mov	r3, r2
 80143d8:	009b      	lsls	r3, r3, #2
 80143da:	4413      	add	r3, r2
 80143dc:	009b      	lsls	r3, r3, #2
 80143de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	4413      	add	r3, r2
 80143e6:	3304      	adds	r3, #4
 80143e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	2200      	movs	r2, #0
 80143ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	2202      	movs	r2, #2
 80143f4:	4619      	mov	r1, r3
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 fc47 	bl	8014c8a <USBD_CtlSendData>
              break;
 80143fc:	e06a      	b.n	80144d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80143fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014402:	2b00      	cmp	r3, #0
 8014404:	da11      	bge.n	801442a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014406:	7bbb      	ldrb	r3, [r7, #14]
 8014408:	f003 020f 	and.w	r2, r3, #15
 801440c:	6879      	ldr	r1, [r7, #4]
 801440e:	4613      	mov	r3, r2
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	4413      	add	r3, r2
 8014414:	009b      	lsls	r3, r3, #2
 8014416:	440b      	add	r3, r1
 8014418:	3324      	adds	r3, #36	; 0x24
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d117      	bne.n	8014450 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014420:	6839      	ldr	r1, [r7, #0]
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f000 fbc0 	bl	8014ba8 <USBD_CtlError>
                  break;
 8014428:	e054      	b.n	80144d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801442a:	7bbb      	ldrb	r3, [r7, #14]
 801442c:	f003 020f 	and.w	r2, r3, #15
 8014430:	6879      	ldr	r1, [r7, #4]
 8014432:	4613      	mov	r3, r2
 8014434:	009b      	lsls	r3, r3, #2
 8014436:	4413      	add	r3, r2
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	440b      	add	r3, r1
 801443c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014440:	881b      	ldrh	r3, [r3, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d104      	bne.n	8014450 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014446:	6839      	ldr	r1, [r7, #0]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f000 fbad 	bl	8014ba8 <USBD_CtlError>
                  break;
 801444e:	e041      	b.n	80144d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014454:	2b00      	cmp	r3, #0
 8014456:	da0b      	bge.n	8014470 <USBD_StdEPReq+0x23e>
 8014458:	7bbb      	ldrb	r3, [r7, #14]
 801445a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801445e:	4613      	mov	r3, r2
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	4413      	add	r3, r2
 8014464:	009b      	lsls	r3, r3, #2
 8014466:	3310      	adds	r3, #16
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	4413      	add	r3, r2
 801446c:	3304      	adds	r3, #4
 801446e:	e00b      	b.n	8014488 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014470:	7bbb      	ldrb	r3, [r7, #14]
 8014472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014476:	4613      	mov	r3, r2
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	4413      	add	r3, r2
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	4413      	add	r3, r2
 8014486:	3304      	adds	r3, #4
 8014488:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801448a:	7bbb      	ldrb	r3, [r7, #14]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <USBD_StdEPReq+0x264>
 8014490:	7bbb      	ldrb	r3, [r7, #14]
 8014492:	2b80      	cmp	r3, #128	; 0x80
 8014494:	d103      	bne.n	801449e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	2200      	movs	r2, #0
 801449a:	601a      	str	r2, [r3, #0]
 801449c:	e00e      	b.n	80144bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801449e:	7bbb      	ldrb	r3, [r7, #14]
 80144a0:	4619      	mov	r1, r3
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f001 f85c 	bl	8015560 <USBD_LL_IsStallEP>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d003      	beq.n	80144b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	2201      	movs	r2, #1
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	e002      	b.n	80144bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	2200      	movs	r2, #0
 80144ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	2202      	movs	r2, #2
 80144c0:	4619      	mov	r1, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 fbe1 	bl	8014c8a <USBD_CtlSendData>
              break;
 80144c8:	e004      	b.n	80144d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80144ca:	6839      	ldr	r1, [r7, #0]
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 fb6b 	bl	8014ba8 <USBD_CtlError>
              break;
 80144d2:	bf00      	nop
          }
          break;
 80144d4:	e004      	b.n	80144e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fb65 	bl	8014ba8 <USBD_CtlError>
          break;
 80144de:	bf00      	nop
      }
      break;
 80144e0:	e004      	b.n	80144ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80144e2:	6839      	ldr	r1, [r7, #0]
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f000 fb5f 	bl	8014ba8 <USBD_CtlError>
      break;
 80144ea:	bf00      	nop
  }

  return ret;
 80144ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3710      	adds	r7, #16
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
	...

080144f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014502:	2300      	movs	r3, #0
 8014504:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014506:	2300      	movs	r3, #0
 8014508:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801450a:	2300      	movs	r3, #0
 801450c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	885b      	ldrh	r3, [r3, #2]
 8014512:	0a1b      	lsrs	r3, r3, #8
 8014514:	b29b      	uxth	r3, r3
 8014516:	3b01      	subs	r3, #1
 8014518:	2b0e      	cmp	r3, #14
 801451a:	f200 8152 	bhi.w	80147c2 <USBD_GetDescriptor+0x2ca>
 801451e:	a201      	add	r2, pc, #4	; (adr r2, 8014524 <USBD_GetDescriptor+0x2c>)
 8014520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014524:	08014595 	.word	0x08014595
 8014528:	080145ad 	.word	0x080145ad
 801452c:	080145ed 	.word	0x080145ed
 8014530:	080147c3 	.word	0x080147c3
 8014534:	080147c3 	.word	0x080147c3
 8014538:	08014763 	.word	0x08014763
 801453c:	0801478f 	.word	0x0801478f
 8014540:	080147c3 	.word	0x080147c3
 8014544:	080147c3 	.word	0x080147c3
 8014548:	080147c3 	.word	0x080147c3
 801454c:	080147c3 	.word	0x080147c3
 8014550:	080147c3 	.word	0x080147c3
 8014554:	080147c3 	.word	0x080147c3
 8014558:	080147c3 	.word	0x080147c3
 801455c:	08014561 	.word	0x08014561
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014566:	69db      	ldr	r3, [r3, #28]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00b      	beq.n	8014584 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014572:	69db      	ldr	r3, [r3, #28]
 8014574:	687a      	ldr	r2, [r7, #4]
 8014576:	7c12      	ldrb	r2, [r2, #16]
 8014578:	f107 0108 	add.w	r1, r7, #8
 801457c:	4610      	mov	r0, r2
 801457e:	4798      	blx	r3
 8014580:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014582:	e126      	b.n	80147d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014584:	6839      	ldr	r1, [r7, #0]
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 fb0e 	bl	8014ba8 <USBD_CtlError>
        err++;
 801458c:	7afb      	ldrb	r3, [r7, #11]
 801458e:	3301      	adds	r3, #1
 8014590:	72fb      	strb	r3, [r7, #11]
      break;
 8014592:	e11e      	b.n	80147d2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	7c12      	ldrb	r2, [r2, #16]
 80145a0:	f107 0108 	add.w	r1, r7, #8
 80145a4:	4610      	mov	r0, r2
 80145a6:	4798      	blx	r3
 80145a8:	60f8      	str	r0, [r7, #12]
      break;
 80145aa:	e112      	b.n	80147d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	7c1b      	ldrb	r3, [r3, #16]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d10d      	bne.n	80145d0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145bc:	f107 0208 	add.w	r2, r7, #8
 80145c0:	4610      	mov	r0, r2
 80145c2:	4798      	blx	r3
 80145c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	3301      	adds	r3, #1
 80145ca:	2202      	movs	r2, #2
 80145cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80145ce:	e100      	b.n	80147d2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d8:	f107 0208 	add.w	r2, r7, #8
 80145dc:	4610      	mov	r0, r2
 80145de:	4798      	blx	r3
 80145e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	3301      	adds	r3, #1
 80145e6:	2202      	movs	r2, #2
 80145e8:	701a      	strb	r2, [r3, #0]
      break;
 80145ea:	e0f2      	b.n	80147d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	885b      	ldrh	r3, [r3, #2]
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	2b05      	cmp	r3, #5
 80145f4:	f200 80ac 	bhi.w	8014750 <USBD_GetDescriptor+0x258>
 80145f8:	a201      	add	r2, pc, #4	; (adr r2, 8014600 <USBD_GetDescriptor+0x108>)
 80145fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145fe:	bf00      	nop
 8014600:	08014619 	.word	0x08014619
 8014604:	0801464d 	.word	0x0801464d
 8014608:	08014681 	.word	0x08014681
 801460c:	080146b5 	.word	0x080146b5
 8014610:	080146e9 	.word	0x080146e9
 8014614:	0801471d 	.word	0x0801471d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00b      	beq.n	801463c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	7c12      	ldrb	r2, [r2, #16]
 8014630:	f107 0108 	add.w	r1, r7, #8
 8014634:	4610      	mov	r0, r2
 8014636:	4798      	blx	r3
 8014638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801463a:	e091      	b.n	8014760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801463c:	6839      	ldr	r1, [r7, #0]
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 fab2 	bl	8014ba8 <USBD_CtlError>
            err++;
 8014644:	7afb      	ldrb	r3, [r7, #11]
 8014646:	3301      	adds	r3, #1
 8014648:	72fb      	strb	r3, [r7, #11]
          break;
 801464a:	e089      	b.n	8014760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d00b      	beq.n	8014670 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801465e:	689b      	ldr	r3, [r3, #8]
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	7c12      	ldrb	r2, [r2, #16]
 8014664:	f107 0108 	add.w	r1, r7, #8
 8014668:	4610      	mov	r0, r2
 801466a:	4798      	blx	r3
 801466c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801466e:	e077      	b.n	8014760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 fa98 	bl	8014ba8 <USBD_CtlError>
            err++;
 8014678:	7afb      	ldrb	r3, [r7, #11]
 801467a:	3301      	adds	r3, #1
 801467c:	72fb      	strb	r3, [r7, #11]
          break;
 801467e:	e06f      	b.n	8014760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014686:	68db      	ldr	r3, [r3, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d00b      	beq.n	80146a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	687a      	ldr	r2, [r7, #4]
 8014696:	7c12      	ldrb	r2, [r2, #16]
 8014698:	f107 0108 	add.w	r1, r7, #8
 801469c:	4610      	mov	r0, r2
 801469e:	4798      	blx	r3
 80146a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146a2:	e05d      	b.n	8014760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146a4:	6839      	ldr	r1, [r7, #0]
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f000 fa7e 	bl	8014ba8 <USBD_CtlError>
            err++;
 80146ac:	7afb      	ldrb	r3, [r7, #11]
 80146ae:	3301      	adds	r3, #1
 80146b0:	72fb      	strb	r3, [r7, #11]
          break;
 80146b2:	e055      	b.n	8014760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ba:	691b      	ldr	r3, [r3, #16]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d00b      	beq.n	80146d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146c6:	691b      	ldr	r3, [r3, #16]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	7c12      	ldrb	r2, [r2, #16]
 80146cc:	f107 0108 	add.w	r1, r7, #8
 80146d0:	4610      	mov	r0, r2
 80146d2:	4798      	blx	r3
 80146d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146d6:	e043      	b.n	8014760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146d8:	6839      	ldr	r1, [r7, #0]
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 fa64 	bl	8014ba8 <USBD_CtlError>
            err++;
 80146e0:	7afb      	ldrb	r3, [r7, #11]
 80146e2:	3301      	adds	r3, #1
 80146e4:	72fb      	strb	r3, [r7, #11]
          break;
 80146e6:	e03b      	b.n	8014760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ee:	695b      	ldr	r3, [r3, #20]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00b      	beq.n	801470c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146fa:	695b      	ldr	r3, [r3, #20]
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	7c12      	ldrb	r2, [r2, #16]
 8014700:	f107 0108 	add.w	r1, r7, #8
 8014704:	4610      	mov	r0, r2
 8014706:	4798      	blx	r3
 8014708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801470a:	e029      	b.n	8014760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801470c:	6839      	ldr	r1, [r7, #0]
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f000 fa4a 	bl	8014ba8 <USBD_CtlError>
            err++;
 8014714:	7afb      	ldrb	r3, [r7, #11]
 8014716:	3301      	adds	r3, #1
 8014718:	72fb      	strb	r3, [r7, #11]
          break;
 801471a:	e021      	b.n	8014760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014722:	699b      	ldr	r3, [r3, #24]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d00b      	beq.n	8014740 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801472e:	699b      	ldr	r3, [r3, #24]
 8014730:	687a      	ldr	r2, [r7, #4]
 8014732:	7c12      	ldrb	r2, [r2, #16]
 8014734:	f107 0108 	add.w	r1, r7, #8
 8014738:	4610      	mov	r0, r2
 801473a:	4798      	blx	r3
 801473c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801473e:	e00f      	b.n	8014760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014740:	6839      	ldr	r1, [r7, #0]
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 fa30 	bl	8014ba8 <USBD_CtlError>
            err++;
 8014748:	7afb      	ldrb	r3, [r7, #11]
 801474a:	3301      	adds	r3, #1
 801474c:	72fb      	strb	r3, [r7, #11]
          break;
 801474e:	e007      	b.n	8014760 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014750:	6839      	ldr	r1, [r7, #0]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 fa28 	bl	8014ba8 <USBD_CtlError>
          err++;
 8014758:	7afb      	ldrb	r3, [r7, #11]
 801475a:	3301      	adds	r3, #1
 801475c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801475e:	bf00      	nop
      }
      break;
 8014760:	e037      	b.n	80147d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	7c1b      	ldrb	r3, [r3, #16]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d109      	bne.n	801477e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014772:	f107 0208 	add.w	r2, r7, #8
 8014776:	4610      	mov	r0, r2
 8014778:	4798      	blx	r3
 801477a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801477c:	e029      	b.n	80147d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801477e:	6839      	ldr	r1, [r7, #0]
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 fa11 	bl	8014ba8 <USBD_CtlError>
        err++;
 8014786:	7afb      	ldrb	r3, [r7, #11]
 8014788:	3301      	adds	r3, #1
 801478a:	72fb      	strb	r3, [r7, #11]
      break;
 801478c:	e021      	b.n	80147d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	7c1b      	ldrb	r3, [r3, #16]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d10d      	bne.n	80147b2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801479e:	f107 0208 	add.w	r2, r7, #8
 80147a2:	4610      	mov	r0, r2
 80147a4:	4798      	blx	r3
 80147a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	3301      	adds	r3, #1
 80147ac:	2207      	movs	r2, #7
 80147ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147b0:	e00f      	b.n	80147d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80147b2:	6839      	ldr	r1, [r7, #0]
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 f9f7 	bl	8014ba8 <USBD_CtlError>
        err++;
 80147ba:	7afb      	ldrb	r3, [r7, #11]
 80147bc:	3301      	adds	r3, #1
 80147be:	72fb      	strb	r3, [r7, #11]
      break;
 80147c0:	e007      	b.n	80147d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80147c2:	6839      	ldr	r1, [r7, #0]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 f9ef 	bl	8014ba8 <USBD_CtlError>
      err++;
 80147ca:	7afb      	ldrb	r3, [r7, #11]
 80147cc:	3301      	adds	r3, #1
 80147ce:	72fb      	strb	r3, [r7, #11]
      break;
 80147d0:	bf00      	nop
  }

  if (err != 0U)
 80147d2:	7afb      	ldrb	r3, [r7, #11]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d11e      	bne.n	8014816 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	88db      	ldrh	r3, [r3, #6]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d016      	beq.n	801480e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80147e0:	893b      	ldrh	r3, [r7, #8]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d00e      	beq.n	8014804 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	88da      	ldrh	r2, [r3, #6]
 80147ea:	893b      	ldrh	r3, [r7, #8]
 80147ec:	4293      	cmp	r3, r2
 80147ee:	bf28      	it	cs
 80147f0:	4613      	movcs	r3, r2
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80147f6:	893b      	ldrh	r3, [r7, #8]
 80147f8:	461a      	mov	r2, r3
 80147fa:	68f9      	ldr	r1, [r7, #12]
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 fa44 	bl	8014c8a <USBD_CtlSendData>
 8014802:	e009      	b.n	8014818 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014804:	6839      	ldr	r1, [r7, #0]
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 f9ce 	bl	8014ba8 <USBD_CtlError>
 801480c:	e004      	b.n	8014818 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 fa95 	bl	8014d3e <USBD_CtlSendStatus>
 8014814:	e000      	b.n	8014818 <USBD_GetDescriptor+0x320>
    return;
 8014816:	bf00      	nop
  }
}
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop

08014820 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	889b      	ldrh	r3, [r3, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d131      	bne.n	8014896 <USBD_SetAddress+0x76>
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	88db      	ldrh	r3, [r3, #6]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d12d      	bne.n	8014896 <USBD_SetAddress+0x76>
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	885b      	ldrh	r3, [r3, #2]
 801483e:	2b7f      	cmp	r3, #127	; 0x7f
 8014840:	d829      	bhi.n	8014896 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	885b      	ldrh	r3, [r3, #2]
 8014846:	b2db      	uxtb	r3, r3
 8014848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801484c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014854:	b2db      	uxtb	r3, r3
 8014856:	2b03      	cmp	r3, #3
 8014858:	d104      	bne.n	8014864 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 f9a3 	bl	8014ba8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014862:	e01d      	b.n	80148a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	7bfa      	ldrb	r2, [r7, #15]
 8014868:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801486c:	7bfb      	ldrb	r3, [r7, #15]
 801486e:	4619      	mov	r1, r3
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 fea1 	bl	80155b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f000 fa61 	bl	8014d3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801487c:	7bfb      	ldrb	r3, [r7, #15]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d004      	beq.n	801488c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2202      	movs	r2, #2
 8014886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801488a:	e009      	b.n	80148a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2201      	movs	r2, #1
 8014890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014894:	e004      	b.n	80148a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014896:	6839      	ldr	r1, [r7, #0]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 f985 	bl	8014ba8 <USBD_CtlError>
  }
}
 801489e:	bf00      	nop
 80148a0:	bf00      	nop
 80148a2:	3710      	adds	r7, #16
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148b2:	2300      	movs	r3, #0
 80148b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	885b      	ldrh	r3, [r3, #2]
 80148ba:	b2da      	uxtb	r2, r3
 80148bc:	4b4c      	ldr	r3, [pc, #304]	; (80149f0 <USBD_SetConfig+0x148>)
 80148be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148c0:	4b4b      	ldr	r3, [pc, #300]	; (80149f0 <USBD_SetConfig+0x148>)
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	2b01      	cmp	r3, #1
 80148c6:	d905      	bls.n	80148d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80148c8:	6839      	ldr	r1, [r7, #0]
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 f96c 	bl	8014ba8 <USBD_CtlError>
    return USBD_FAIL;
 80148d0:	2303      	movs	r3, #3
 80148d2:	e088      	b.n	80149e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	2b02      	cmp	r3, #2
 80148de:	d002      	beq.n	80148e6 <USBD_SetConfig+0x3e>
 80148e0:	2b03      	cmp	r3, #3
 80148e2:	d025      	beq.n	8014930 <USBD_SetConfig+0x88>
 80148e4:	e071      	b.n	80149ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80148e6:	4b42      	ldr	r3, [pc, #264]	; (80149f0 <USBD_SetConfig+0x148>)
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d01c      	beq.n	8014928 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80148ee:	4b40      	ldr	r3, [pc, #256]	; (80149f0 <USBD_SetConfig+0x148>)
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	461a      	mov	r2, r3
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80148f8:	4b3d      	ldr	r3, [pc, #244]	; (80149f0 <USBD_SetConfig+0x148>)
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	4619      	mov	r1, r3
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7ff f992 	bl	8013c28 <USBD_SetClassConfig>
 8014904:	4603      	mov	r3, r0
 8014906:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014908:	7bfb      	ldrb	r3, [r7, #15]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d004      	beq.n	8014918 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801490e:	6839      	ldr	r1, [r7, #0]
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f000 f949 	bl	8014ba8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014916:	e065      	b.n	80149e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 fa10 	bl	8014d3e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2203      	movs	r2, #3
 8014922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014926:	e05d      	b.n	80149e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f000 fa08 	bl	8014d3e <USBD_CtlSendStatus>
      break;
 801492e:	e059      	b.n	80149e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014930:	4b2f      	ldr	r3, [pc, #188]	; (80149f0 <USBD_SetConfig+0x148>)
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d112      	bne.n	801495e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2202      	movs	r2, #2
 801493c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014940:	4b2b      	ldr	r3, [pc, #172]	; (80149f0 <USBD_SetConfig+0x148>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	461a      	mov	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801494a:	4b29      	ldr	r3, [pc, #164]	; (80149f0 <USBD_SetConfig+0x148>)
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	4619      	mov	r1, r3
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f7ff f985 	bl	8013c60 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 f9f1 	bl	8014d3e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801495c:	e042      	b.n	80149e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801495e:	4b24      	ldr	r3, [pc, #144]	; (80149f0 <USBD_SetConfig+0x148>)
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	461a      	mov	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	685b      	ldr	r3, [r3, #4]
 8014968:	429a      	cmp	r2, r3
 801496a:	d02a      	beq.n	80149c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	b2db      	uxtb	r3, r3
 8014972:	4619      	mov	r1, r3
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f7ff f973 	bl	8013c60 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801497a:	4b1d      	ldr	r3, [pc, #116]	; (80149f0 <USBD_SetConfig+0x148>)
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	461a      	mov	r2, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014984:	4b1a      	ldr	r3, [pc, #104]	; (80149f0 <USBD_SetConfig+0x148>)
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	4619      	mov	r1, r3
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f7ff f94c 	bl	8013c28 <USBD_SetClassConfig>
 8014990:	4603      	mov	r3, r0
 8014992:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014994:	7bfb      	ldrb	r3, [r7, #15]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d00f      	beq.n	80149ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 f903 	bl	8014ba8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	4619      	mov	r1, r3
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7ff f958 	bl	8013c60 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2202      	movs	r2, #2
 80149b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80149b8:	e014      	b.n	80149e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f000 f9bf 	bl	8014d3e <USBD_CtlSendStatus>
      break;
 80149c0:	e010      	b.n	80149e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f000 f9bb 	bl	8014d3e <USBD_CtlSendStatus>
      break;
 80149c8:	e00c      	b.n	80149e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80149ca:	6839      	ldr	r1, [r7, #0]
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 f8eb 	bl	8014ba8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80149d2:	4b07      	ldr	r3, [pc, #28]	; (80149f0 <USBD_SetConfig+0x148>)
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	4619      	mov	r1, r3
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f7ff f941 	bl	8013c60 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80149de:	2303      	movs	r3, #3
 80149e0:	73fb      	strb	r3, [r7, #15]
      break;
 80149e2:	bf00      	nop
  }

  return ret;
 80149e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3710      	adds	r7, #16
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	200020ac 	.word	0x200020ac

080149f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	88db      	ldrh	r3, [r3, #6]
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	d004      	beq.n	8014a10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a06:	6839      	ldr	r1, [r7, #0]
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f000 f8cd 	bl	8014ba8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a0e:	e023      	b.n	8014a58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a16:	b2db      	uxtb	r3, r3
 8014a18:	2b02      	cmp	r3, #2
 8014a1a:	dc02      	bgt.n	8014a22 <USBD_GetConfig+0x2e>
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	dc03      	bgt.n	8014a28 <USBD_GetConfig+0x34>
 8014a20:	e015      	b.n	8014a4e <USBD_GetConfig+0x5a>
 8014a22:	2b03      	cmp	r3, #3
 8014a24:	d00b      	beq.n	8014a3e <USBD_GetConfig+0x4a>
 8014a26:	e012      	b.n	8014a4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	3308      	adds	r3, #8
 8014a32:	2201      	movs	r2, #1
 8014a34:	4619      	mov	r1, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f000 f927 	bl	8014c8a <USBD_CtlSendData>
        break;
 8014a3c:	e00c      	b.n	8014a58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	3304      	adds	r3, #4
 8014a42:	2201      	movs	r2, #1
 8014a44:	4619      	mov	r1, r3
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 f91f 	bl	8014c8a <USBD_CtlSendData>
        break;
 8014a4c:	e004      	b.n	8014a58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014a4e:	6839      	ldr	r1, [r7, #0]
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f000 f8a9 	bl	8014ba8 <USBD_CtlError>
        break;
 8014a56:	bf00      	nop
}
 8014a58:	bf00      	nop
 8014a5a:	3708      	adds	r7, #8
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b082      	sub	sp, #8
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a70:	b2db      	uxtb	r3, r3
 8014a72:	3b01      	subs	r3, #1
 8014a74:	2b02      	cmp	r3, #2
 8014a76:	d81e      	bhi.n	8014ab6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	88db      	ldrh	r3, [r3, #6]
 8014a7c:	2b02      	cmp	r3, #2
 8014a7e:	d004      	beq.n	8014a8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014a80:	6839      	ldr	r1, [r7, #0]
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 f890 	bl	8014ba8 <USBD_CtlError>
        break;
 8014a88:	e01a      	b.n	8014ac0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2201      	movs	r2, #1
 8014a8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d005      	beq.n	8014aa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	68db      	ldr	r3, [r3, #12]
 8014a9e:	f043 0202 	orr.w	r2, r3, #2
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	330c      	adds	r3, #12
 8014aaa:	2202      	movs	r2, #2
 8014aac:	4619      	mov	r1, r3
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 f8eb 	bl	8014c8a <USBD_CtlSendData>
      break;
 8014ab4:	e004      	b.n	8014ac0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014ab6:	6839      	ldr	r1, [r7, #0]
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f000 f875 	bl	8014ba8 <USBD_CtlError>
      break;
 8014abe:	bf00      	nop
  }
}
 8014ac0:	bf00      	nop
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	885b      	ldrh	r3, [r3, #2]
 8014ad6:	2b01      	cmp	r3, #1
 8014ad8:	d106      	bne.n	8014ae8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2201      	movs	r2, #1
 8014ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 f92b 	bl	8014d3e <USBD_CtlSendStatus>
  }
}
 8014ae8:	bf00      	nop
 8014aea:	3708      	adds	r7, #8
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}

08014af0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	3b01      	subs	r3, #1
 8014b04:	2b02      	cmp	r3, #2
 8014b06:	d80b      	bhi.n	8014b20 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	885b      	ldrh	r3, [r3, #2]
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d10c      	bne.n	8014b2a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f000 f910 	bl	8014d3e <USBD_CtlSendStatus>
      }
      break;
 8014b1e:	e004      	b.n	8014b2a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014b20:	6839      	ldr	r1, [r7, #0]
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 f840 	bl	8014ba8 <USBD_CtlError>
      break;
 8014b28:	e000      	b.n	8014b2c <USBD_ClrFeature+0x3c>
      break;
 8014b2a:	bf00      	nop
  }
}
 8014b2c:	bf00      	nop
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	781a      	ldrb	r2, [r3, #0]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	781a      	ldrb	r2, [r3, #0]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014b5e:	68f8      	ldr	r0, [r7, #12]
 8014b60:	f7ff fa92 	bl	8014088 <SWAPBYTE>
 8014b64:	4603      	mov	r3, r0
 8014b66:	461a      	mov	r2, r3
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	3301      	adds	r3, #1
 8014b76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f7ff fa85 	bl	8014088 <SWAPBYTE>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	461a      	mov	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014b92:	68f8      	ldr	r0, [r7, #12]
 8014b94:	f7ff fa78 	bl	8014088 <SWAPBYTE>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	80da      	strh	r2, [r3, #6]
}
 8014ba0:	bf00      	nop
 8014ba2:	3710      	adds	r7, #16
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014bb2:	2180      	movs	r1, #128	; 0x80
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f000 fc95 	bl	80154e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bba:	2100      	movs	r1, #0
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 fc91 	bl	80154e4 <USBD_LL_StallEP>
}
 8014bc2:	bf00      	nop
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b086      	sub	sp, #24
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	60f8      	str	r0, [r7, #12]
 8014bd2:	60b9      	str	r1, [r7, #8]
 8014bd4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d036      	beq.n	8014c4e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014be4:	6938      	ldr	r0, [r7, #16]
 8014be6:	f000 f836 	bl	8014c56 <USBD_GetLen>
 8014bea:	4603      	mov	r3, r0
 8014bec:	3301      	adds	r3, #1
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014bf8:	7dfb      	ldrb	r3, [r7, #23]
 8014bfa:	68ba      	ldr	r2, [r7, #8]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	7812      	ldrb	r2, [r2, #0]
 8014c02:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c04:	7dfb      	ldrb	r3, [r7, #23]
 8014c06:	3301      	adds	r3, #1
 8014c08:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014c0a:	7dfb      	ldrb	r3, [r7, #23]
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	4413      	add	r3, r2
 8014c10:	2203      	movs	r2, #3
 8014c12:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c14:	7dfb      	ldrb	r3, [r7, #23]
 8014c16:	3301      	adds	r3, #1
 8014c18:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014c1a:	e013      	b.n	8014c44 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014c1c:	7dfb      	ldrb	r3, [r7, #23]
 8014c1e:	68ba      	ldr	r2, [r7, #8]
 8014c20:	4413      	add	r3, r2
 8014c22:	693a      	ldr	r2, [r7, #16]
 8014c24:	7812      	ldrb	r2, [r2, #0]
 8014c26:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	613b      	str	r3, [r7, #16]
    idx++;
 8014c2e:	7dfb      	ldrb	r3, [r7, #23]
 8014c30:	3301      	adds	r3, #1
 8014c32:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014c34:	7dfb      	ldrb	r3, [r7, #23]
 8014c36:	68ba      	ldr	r2, [r7, #8]
 8014c38:	4413      	add	r3, r2
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	701a      	strb	r2, [r3, #0]
    idx++;
 8014c3e:	7dfb      	ldrb	r3, [r7, #23]
 8014c40:	3301      	adds	r3, #1
 8014c42:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d1e7      	bne.n	8014c1c <USBD_GetString+0x52>
 8014c4c:	e000      	b.n	8014c50 <USBD_GetString+0x86>
    return;
 8014c4e:	bf00      	nop
  }
}
 8014c50:	3718      	adds	r7, #24
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}

08014c56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c56:	b480      	push	{r7}
 8014c58:	b085      	sub	sp, #20
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014c66:	e005      	b.n	8014c74 <USBD_GetLen+0x1e>
  {
    len++;
 8014c68:	7bfb      	ldrb	r3, [r7, #15]
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	3301      	adds	r3, #1
 8014c72:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1f5      	bne.n	8014c68 <USBD_GetLen+0x12>
  }

  return len;
 8014c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3714      	adds	r7, #20
 8014c82:	46bd      	mov	sp, r7
 8014c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c88:	4770      	bx	lr

08014c8a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014c8a:	b580      	push	{r7, lr}
 8014c8c:	b084      	sub	sp, #16
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	60f8      	str	r0, [r7, #12]
 8014c92:	60b9      	str	r1, [r7, #8]
 8014c94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2202      	movs	r2, #2
 8014c9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	68ba      	ldr	r2, [r7, #8]
 8014cae:	2100      	movs	r1, #0
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f000 fca0 	bl	80155f6 <USBD_LL_Transmit>

  return USBD_OK;
 8014cb6:	2300      	movs	r3, #0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	68ba      	ldr	r2, [r7, #8]
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	68f8      	ldr	r0, [r7, #12]
 8014cd4:	f000 fc8f 	bl	80155f6 <USBD_LL_Transmit>

  return USBD_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b084      	sub	sp, #16
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	60f8      	str	r0, [r7, #12]
 8014cea:	60b9      	str	r1, [r7, #8]
 8014cec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2203      	movs	r2, #3
 8014cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	68ba      	ldr	r2, [r7, #8]
 8014d0a:	2100      	movs	r1, #0
 8014d0c:	68f8      	ldr	r0, [r7, #12]
 8014d0e:	f000 fc93 	bl	8015638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d12:	2300      	movs	r3, #0
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	68ba      	ldr	r2, [r7, #8]
 8014d2c:	2100      	movs	r1, #0
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f000 fc82 	bl	8015638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d34:	2300      	movs	r3, #0
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3710      	adds	r7, #16
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b082      	sub	sp, #8
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2204      	movs	r2, #4
 8014d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014d4e:	2300      	movs	r3, #0
 8014d50:	2200      	movs	r2, #0
 8014d52:	2100      	movs	r1, #0
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f000 fc4e 	bl	80155f6 <USBD_LL_Transmit>

  return USBD_OK;
 8014d5a:	2300      	movs	r3, #0
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3708      	adds	r7, #8
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b082      	sub	sp, #8
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2205      	movs	r2, #5
 8014d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d74:	2300      	movs	r3, #0
 8014d76:	2200      	movs	r2, #0
 8014d78:	2100      	movs	r1, #0
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f000 fc5c 	bl	8015638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d80:	2300      	movs	r3, #0
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3708      	adds	r7, #8
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
	...

08014d8c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014d90:	2200      	movs	r2, #0
 8014d92:	4912      	ldr	r1, [pc, #72]	; (8014ddc <MX_USB_Device_Init+0x50>)
 8014d94:	4812      	ldr	r0, [pc, #72]	; (8014de0 <MX_USB_Device_Init+0x54>)
 8014d96:	f7fe fed9 	bl	8013b4c <USBD_Init>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d001      	beq.n	8014da4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014da0:	f7ef f88c 	bl	8003ebc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014da4:	490f      	ldr	r1, [pc, #60]	; (8014de4 <MX_USB_Device_Init+0x58>)
 8014da6:	480e      	ldr	r0, [pc, #56]	; (8014de0 <MX_USB_Device_Init+0x54>)
 8014da8:	f7fe ff00 	bl	8013bac <USBD_RegisterClass>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d001      	beq.n	8014db6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014db2:	f7ef f883 	bl	8003ebc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014db6:	490c      	ldr	r1, [pc, #48]	; (8014de8 <MX_USB_Device_Init+0x5c>)
 8014db8:	4809      	ldr	r0, [pc, #36]	; (8014de0 <MX_USB_Device_Init+0x54>)
 8014dba:	f7fe fe21 	bl	8013a00 <USBD_CDC_RegisterInterface>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d001      	beq.n	8014dc8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014dc4:	f7ef f87a 	bl	8003ebc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014dc8:	4805      	ldr	r0, [pc, #20]	; (8014de0 <MX_USB_Device_Init+0x54>)
 8014dca:	f7fe ff16 	bl	8013bfa <USBD_Start>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d001      	beq.n	8014dd8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014dd4:	f7ef f872 	bl	8003ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014dd8:	bf00      	nop
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	2000031c 	.word	0x2000031c
 8014de0:	200020b0 	.word	0x200020b0
 8014de4:	20000204 	.word	0x20000204
 8014de8:	20000308 	.word	0x20000308

08014dec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014df0:	2200      	movs	r2, #0
 8014df2:	4905      	ldr	r1, [pc, #20]	; (8014e08 <CDC_Init_FS+0x1c>)
 8014df4:	4805      	ldr	r0, [pc, #20]	; (8014e0c <CDC_Init_FS+0x20>)
 8014df6:	f7fe fe18 	bl	8013a2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014dfa:	4905      	ldr	r1, [pc, #20]	; (8014e10 <CDC_Init_FS+0x24>)
 8014dfc:	4803      	ldr	r0, [pc, #12]	; (8014e0c <CDC_Init_FS+0x20>)
 8014dfe:	f7fe fe32 	bl	8013a66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014e02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	20002780 	.word	0x20002780
 8014e0c:	200020b0 	.word	0x200020b0
 8014e10:	20002380 	.word	0x20002380

08014e14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014e14:	b480      	push	{r7}
 8014e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014e18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr

08014e24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b083      	sub	sp, #12
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	6039      	str	r1, [r7, #0]
 8014e2e:	71fb      	strb	r3, [r7, #7]
 8014e30:	4613      	mov	r3, r2
 8014e32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014e34:	79fb      	ldrb	r3, [r7, #7]
 8014e36:	2b23      	cmp	r3, #35	; 0x23
 8014e38:	d84a      	bhi.n	8014ed0 <CDC_Control_FS+0xac>
 8014e3a:	a201      	add	r2, pc, #4	; (adr r2, 8014e40 <CDC_Control_FS+0x1c>)
 8014e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e40:	08014ed1 	.word	0x08014ed1
 8014e44:	08014ed1 	.word	0x08014ed1
 8014e48:	08014ed1 	.word	0x08014ed1
 8014e4c:	08014ed1 	.word	0x08014ed1
 8014e50:	08014ed1 	.word	0x08014ed1
 8014e54:	08014ed1 	.word	0x08014ed1
 8014e58:	08014ed1 	.word	0x08014ed1
 8014e5c:	08014ed1 	.word	0x08014ed1
 8014e60:	08014ed1 	.word	0x08014ed1
 8014e64:	08014ed1 	.word	0x08014ed1
 8014e68:	08014ed1 	.word	0x08014ed1
 8014e6c:	08014ed1 	.word	0x08014ed1
 8014e70:	08014ed1 	.word	0x08014ed1
 8014e74:	08014ed1 	.word	0x08014ed1
 8014e78:	08014ed1 	.word	0x08014ed1
 8014e7c:	08014ed1 	.word	0x08014ed1
 8014e80:	08014ed1 	.word	0x08014ed1
 8014e84:	08014ed1 	.word	0x08014ed1
 8014e88:	08014ed1 	.word	0x08014ed1
 8014e8c:	08014ed1 	.word	0x08014ed1
 8014e90:	08014ed1 	.word	0x08014ed1
 8014e94:	08014ed1 	.word	0x08014ed1
 8014e98:	08014ed1 	.word	0x08014ed1
 8014e9c:	08014ed1 	.word	0x08014ed1
 8014ea0:	08014ed1 	.word	0x08014ed1
 8014ea4:	08014ed1 	.word	0x08014ed1
 8014ea8:	08014ed1 	.word	0x08014ed1
 8014eac:	08014ed1 	.word	0x08014ed1
 8014eb0:	08014ed1 	.word	0x08014ed1
 8014eb4:	08014ed1 	.word	0x08014ed1
 8014eb8:	08014ed1 	.word	0x08014ed1
 8014ebc:	08014ed1 	.word	0x08014ed1
 8014ec0:	08014ed1 	.word	0x08014ed1
 8014ec4:	08014ed1 	.word	0x08014ed1
 8014ec8:	08014ed1 	.word	0x08014ed1
 8014ecc:	08014ed1 	.word	0x08014ed1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014ed0:	bf00      	nop
  }

  return (USBD_OK);
 8014ed2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	370c      	adds	r7, #12
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ede:	4770      	bx	lr

08014ee0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014eea:	6879      	ldr	r1, [r7, #4]
 8014eec:	4805      	ldr	r0, [pc, #20]	; (8014f04 <CDC_Receive_FS+0x24>)
 8014eee:	f7fe fdba 	bl	8013a66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014ef2:	4804      	ldr	r0, [pc, #16]	; (8014f04 <CDC_Receive_FS+0x24>)
 8014ef4:	f7fe fe00 	bl	8013af8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014ef8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	200020b0 	.word	0x200020b0

08014f08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	460b      	mov	r3, r1
 8014f12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014f14:	2300      	movs	r3, #0
 8014f16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014f18:	4b0d      	ldr	r3, [pc, #52]	; (8014f50 <CDC_Transmit_FS+0x48>)
 8014f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e00b      	b.n	8014f46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014f2e:	887b      	ldrh	r3, [r7, #2]
 8014f30:	461a      	mov	r2, r3
 8014f32:	6879      	ldr	r1, [r7, #4]
 8014f34:	4806      	ldr	r0, [pc, #24]	; (8014f50 <CDC_Transmit_FS+0x48>)
 8014f36:	f7fe fd78 	bl	8013a2a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014f3a:	4805      	ldr	r0, [pc, #20]	; (8014f50 <CDC_Transmit_FS+0x48>)
 8014f3c:	f7fe fdac 	bl	8013a98 <USBD_CDC_TransmitPacket>
 8014f40:	4603      	mov	r3, r0
 8014f42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3710      	adds	r7, #16
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	200020b0 	.word	0x200020b0

08014f54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b087      	sub	sp, #28
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014f62:	2300      	movs	r3, #0
 8014f64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	371c      	adds	r7, #28
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr
	...

08014f78 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	4603      	mov	r3, r0
 8014f80:	6039      	str	r1, [r7, #0]
 8014f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	2212      	movs	r2, #18
 8014f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014f8a:	4b03      	ldr	r3, [pc, #12]	; (8014f98 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr
 8014f98:	2000033c 	.word	0x2000033c

08014f9c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	6039      	str	r1, [r7, #0]
 8014fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	2204      	movs	r2, #4
 8014fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014fae:	4b03      	ldr	r3, [pc, #12]	; (8014fbc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr
 8014fbc:	20000350 	.word	0x20000350

08014fc0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	6039      	str	r1, [r7, #0]
 8014fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014fcc:	79fb      	ldrb	r3, [r7, #7]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d105      	bne.n	8014fde <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014fd2:	683a      	ldr	r2, [r7, #0]
 8014fd4:	4907      	ldr	r1, [pc, #28]	; (8014ff4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014fd6:	4808      	ldr	r0, [pc, #32]	; (8014ff8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014fd8:	f7ff fdf7 	bl	8014bca <USBD_GetString>
 8014fdc:	e004      	b.n	8014fe8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014fde:	683a      	ldr	r2, [r7, #0]
 8014fe0:	4904      	ldr	r1, [pc, #16]	; (8014ff4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014fe2:	4805      	ldr	r0, [pc, #20]	; (8014ff8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014fe4:	f7ff fdf1 	bl	8014bca <USBD_GetString>
  }
  return USBD_StrDesc;
 8014fe8:	4b02      	ldr	r3, [pc, #8]	; (8014ff4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014fea:	4618      	mov	r0, r3
 8014fec:	3708      	adds	r7, #8
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	20002b80 	.word	0x20002b80
 8014ff8:	080188f4 	.word	0x080188f4

08014ffc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	4603      	mov	r3, r0
 8015004:	6039      	str	r1, [r7, #0]
 8015006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015008:	683a      	ldr	r2, [r7, #0]
 801500a:	4904      	ldr	r1, [pc, #16]	; (801501c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801500c:	4804      	ldr	r0, [pc, #16]	; (8015020 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801500e:	f7ff fddc 	bl	8014bca <USBD_GetString>
  return USBD_StrDesc;
 8015012:	4b02      	ldr	r3, [pc, #8]	; (801501c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015014:	4618      	mov	r0, r3
 8015016:	3708      	adds	r7, #8
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}
 801501c:	20002b80 	.word	0x20002b80
 8015020:	0801890c 	.word	0x0801890c

08015024 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b082      	sub	sp, #8
 8015028:	af00      	add	r7, sp, #0
 801502a:	4603      	mov	r3, r0
 801502c:	6039      	str	r1, [r7, #0]
 801502e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	221a      	movs	r2, #26
 8015034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015036:	f000 f843 	bl	80150c0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801503a:	4b02      	ldr	r3, [pc, #8]	; (8015044 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801503c:	4618      	mov	r0, r3
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	20000354 	.word	0x20000354

08015048 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
 801504e:	4603      	mov	r3, r0
 8015050:	6039      	str	r1, [r7, #0]
 8015052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015054:	79fb      	ldrb	r3, [r7, #7]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d105      	bne.n	8015066 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	4907      	ldr	r1, [pc, #28]	; (801507c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801505e:	4808      	ldr	r0, [pc, #32]	; (8015080 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015060:	f7ff fdb3 	bl	8014bca <USBD_GetString>
 8015064:	e004      	b.n	8015070 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	4904      	ldr	r1, [pc, #16]	; (801507c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801506a:	4805      	ldr	r0, [pc, #20]	; (8015080 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801506c:	f7ff fdad 	bl	8014bca <USBD_GetString>
  }
  return USBD_StrDesc;
 8015070:	4b02      	ldr	r3, [pc, #8]	; (801507c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	20002b80 	.word	0x20002b80
 8015080:	08018920 	.word	0x08018920

08015084 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	4603      	mov	r3, r0
 801508c:	6039      	str	r1, [r7, #0]
 801508e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015090:	79fb      	ldrb	r3, [r7, #7]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d105      	bne.n	80150a2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015096:	683a      	ldr	r2, [r7, #0]
 8015098:	4907      	ldr	r1, [pc, #28]	; (80150b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801509a:	4808      	ldr	r0, [pc, #32]	; (80150bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801509c:	f7ff fd95 	bl	8014bca <USBD_GetString>
 80150a0:	e004      	b.n	80150ac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80150a2:	683a      	ldr	r2, [r7, #0]
 80150a4:	4904      	ldr	r1, [pc, #16]	; (80150b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80150a6:	4805      	ldr	r0, [pc, #20]	; (80150bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80150a8:	f7ff fd8f 	bl	8014bca <USBD_GetString>
  }
  return USBD_StrDesc;
 80150ac:	4b02      	ldr	r3, [pc, #8]	; (80150b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3708      	adds	r7, #8
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	20002b80 	.word	0x20002b80
 80150bc:	0801892c 	.word	0x0801892c

080150c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b084      	sub	sp, #16
 80150c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80150c6:	4b0f      	ldr	r3, [pc, #60]	; (8015104 <Get_SerialNum+0x44>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80150cc:	4b0e      	ldr	r3, [pc, #56]	; (8015108 <Get_SerialNum+0x48>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80150d2:	4b0e      	ldr	r3, [pc, #56]	; (801510c <Get_SerialNum+0x4c>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80150d8:	68fa      	ldr	r2, [r7, #12]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4413      	add	r3, r2
 80150de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d009      	beq.n	80150fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80150e6:	2208      	movs	r2, #8
 80150e8:	4909      	ldr	r1, [pc, #36]	; (8015110 <Get_SerialNum+0x50>)
 80150ea:	68f8      	ldr	r0, [r7, #12]
 80150ec:	f000 f814 	bl	8015118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80150f0:	2204      	movs	r2, #4
 80150f2:	4908      	ldr	r1, [pc, #32]	; (8015114 <Get_SerialNum+0x54>)
 80150f4:	68b8      	ldr	r0, [r7, #8]
 80150f6:	f000 f80f 	bl	8015118 <IntToUnicode>
  }
}
 80150fa:	bf00      	nop
 80150fc:	3710      	adds	r7, #16
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	1fff7590 	.word	0x1fff7590
 8015108:	1fff7594 	.word	0x1fff7594
 801510c:	1fff7598 	.word	0x1fff7598
 8015110:	20000356 	.word	0x20000356
 8015114:	20000366 	.word	0x20000366

08015118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015118:	b480      	push	{r7}
 801511a:	b087      	sub	sp, #28
 801511c:	af00      	add	r7, sp, #0
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	4613      	mov	r3, r2
 8015124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015126:	2300      	movs	r3, #0
 8015128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801512a:	2300      	movs	r3, #0
 801512c:	75fb      	strb	r3, [r7, #23]
 801512e:	e027      	b.n	8015180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	0f1b      	lsrs	r3, r3, #28
 8015134:	2b09      	cmp	r3, #9
 8015136:	d80b      	bhi.n	8015150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	0f1b      	lsrs	r3, r3, #28
 801513c:	b2da      	uxtb	r2, r3
 801513e:	7dfb      	ldrb	r3, [r7, #23]
 8015140:	005b      	lsls	r3, r3, #1
 8015142:	4619      	mov	r1, r3
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	440b      	add	r3, r1
 8015148:	3230      	adds	r2, #48	; 0x30
 801514a:	b2d2      	uxtb	r2, r2
 801514c:	701a      	strb	r2, [r3, #0]
 801514e:	e00a      	b.n	8015166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	0f1b      	lsrs	r3, r3, #28
 8015154:	b2da      	uxtb	r2, r3
 8015156:	7dfb      	ldrb	r3, [r7, #23]
 8015158:	005b      	lsls	r3, r3, #1
 801515a:	4619      	mov	r1, r3
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	440b      	add	r3, r1
 8015160:	3237      	adds	r2, #55	; 0x37
 8015162:	b2d2      	uxtb	r2, r2
 8015164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	011b      	lsls	r3, r3, #4
 801516a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801516c:	7dfb      	ldrb	r3, [r7, #23]
 801516e:	005b      	lsls	r3, r3, #1
 8015170:	3301      	adds	r3, #1
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	4413      	add	r3, r2
 8015176:	2200      	movs	r2, #0
 8015178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801517a:	7dfb      	ldrb	r3, [r7, #23]
 801517c:	3301      	adds	r3, #1
 801517e:	75fb      	strb	r3, [r7, #23]
 8015180:	7dfa      	ldrb	r2, [r7, #23]
 8015182:	79fb      	ldrb	r3, [r7, #7]
 8015184:	429a      	cmp	r2, r3
 8015186:	d3d3      	bcc.n	8015130 <IntToUnicode+0x18>
  }
}
 8015188:	bf00      	nop
 801518a:	bf00      	nop
 801518c:	371c      	adds	r7, #28
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr
	...

08015198 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b094      	sub	sp, #80	; 0x50
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80151a0:	f107 030c 	add.w	r3, r7, #12
 80151a4:	2244      	movs	r2, #68	; 0x44
 80151a6:	2100      	movs	r1, #0
 80151a8:	4618      	mov	r0, r3
 80151aa:	f001 f884 	bl	80162b6 <memset>
  if(pcdHandle->Instance==USB)
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	4a15      	ldr	r2, [pc, #84]	; (8015208 <HAL_PCD_MspInit+0x70>)
 80151b4:	4293      	cmp	r3, r2
 80151b6:	d122      	bne.n	80151fe <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80151b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80151bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80151be:	2300      	movs	r3, #0
 80151c0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80151c2:	f107 030c 	add.w	r3, r7, #12
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7f6 fc1e 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 80151cc:	4603      	mov	r3, r0
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80151d2:	f7ee fe73 	bl	8003ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80151d6:	4b0d      	ldr	r3, [pc, #52]	; (801520c <HAL_PCD_MspInit+0x74>)
 80151d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151da:	4a0c      	ldr	r2, [pc, #48]	; (801520c <HAL_PCD_MspInit+0x74>)
 80151dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80151e0:	6593      	str	r3, [r2, #88]	; 0x58
 80151e2:	4b0a      	ldr	r3, [pc, #40]	; (801520c <HAL_PCD_MspInit+0x74>)
 80151e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80151ea:	60bb      	str	r3, [r7, #8]
 80151ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80151ee:	2200      	movs	r2, #0
 80151f0:	2100      	movs	r1, #0
 80151f2:	2014      	movs	r0, #20
 80151f4:	f7f2 fe65 	bl	8007ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80151f8:	2014      	movs	r0, #20
 80151fa:	f7f2 fe7c 	bl	8007ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80151fe:	bf00      	nop
 8015200:	3750      	adds	r7, #80	; 0x50
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	40005c00 	.word	0x40005c00
 801520c:	40021000 	.word	0x40021000

08015210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015224:	4619      	mov	r1, r3
 8015226:	4610      	mov	r0, r2
 8015228:	f7fe fd32 	bl	8013c90 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801522c:	bf00      	nop
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015246:	78fa      	ldrb	r2, [r7, #3]
 8015248:	6879      	ldr	r1, [r7, #4]
 801524a:	4613      	mov	r3, r2
 801524c:	009b      	lsls	r3, r3, #2
 801524e:	4413      	add	r3, r2
 8015250:	00db      	lsls	r3, r3, #3
 8015252:	440b      	add	r3, r1
 8015254:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015258:	681a      	ldr	r2, [r3, #0]
 801525a:	78fb      	ldrb	r3, [r7, #3]
 801525c:	4619      	mov	r1, r3
 801525e:	f7fe fd6c 	bl	8013d3a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015262:	bf00      	nop
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801526a:	b580      	push	{r7, lr}
 801526c:	b082      	sub	sp, #8
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
 8015272:	460b      	mov	r3, r1
 8015274:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801527c:	78fa      	ldrb	r2, [r7, #3]
 801527e:	6879      	ldr	r1, [r7, #4]
 8015280:	4613      	mov	r3, r2
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	4413      	add	r3, r2
 8015286:	00db      	lsls	r3, r3, #3
 8015288:	440b      	add	r3, r1
 801528a:	3324      	adds	r3, #36	; 0x24
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	78fb      	ldrb	r3, [r7, #3]
 8015290:	4619      	mov	r1, r3
 8015292:	f7fe fdb5 	bl	8013e00 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015296:	bf00      	nop
 8015298:	3708      	adds	r7, #8
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}

0801529e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801529e:	b580      	push	{r7, lr}
 80152a0:	b082      	sub	sp, #8
 80152a2:	af00      	add	r7, sp, #0
 80152a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7fe fec9 	bl	8014044 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80152b2:	bf00      	nop
 80152b4:	3708      	adds	r7, #8
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}

080152ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b084      	sub	sp, #16
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80152c2:	2301      	movs	r3, #1
 80152c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	795b      	ldrb	r3, [r3, #5]
 80152ca:	2b02      	cmp	r3, #2
 80152cc:	d001      	beq.n	80152d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80152ce:	f7ee fdf5 	bl	8003ebc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152d8:	7bfa      	ldrb	r2, [r7, #15]
 80152da:	4611      	mov	r1, r2
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fe fe73 	bl	8013fc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152e8:	4618      	mov	r0, r3
 80152ea:	f7fe fe1f 	bl	8013f2c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80152ee:	bf00      	nop
 80152f0:	3710      	adds	r7, #16
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
	...

080152f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015306:	4618      	mov	r0, r3
 8015308:	f7fe fe6e 	bl	8013fe8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	7a5b      	ldrb	r3, [r3, #9]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d005      	beq.n	8015320 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015314:	4b04      	ldr	r3, [pc, #16]	; (8015328 <HAL_PCD_SuspendCallback+0x30>)
 8015316:	691b      	ldr	r3, [r3, #16]
 8015318:	4a03      	ldr	r2, [pc, #12]	; (8015328 <HAL_PCD_SuspendCallback+0x30>)
 801531a:	f043 0306 	orr.w	r3, r3, #6
 801531e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015320:	bf00      	nop
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	e000ed00 	.word	0xe000ed00

0801532c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	7a5b      	ldrb	r3, [r3, #9]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d007      	beq.n	801534c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801533c:	4b08      	ldr	r3, [pc, #32]	; (8015360 <HAL_PCD_ResumeCallback+0x34>)
 801533e:	691b      	ldr	r3, [r3, #16]
 8015340:	4a07      	ldr	r2, [pc, #28]	; (8015360 <HAL_PCD_ResumeCallback+0x34>)
 8015342:	f023 0306 	bic.w	r3, r3, #6
 8015346:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015348:	f000 f9f8 	bl	801573c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015352:	4618      	mov	r0, r3
 8015354:	f7fe fe5e 	bl	8014014 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015358:	bf00      	nop
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	e000ed00 	.word	0xe000ed00

08015364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801536c:	4a2b      	ldr	r2, [pc, #172]	; (801541c <USBD_LL_Init+0xb8>)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	4a29      	ldr	r2, [pc, #164]	; (801541c <USBD_LL_Init+0xb8>)
 8015378:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801537c:	4b27      	ldr	r3, [pc, #156]	; (801541c <USBD_LL_Init+0xb8>)
 801537e:	4a28      	ldr	r2, [pc, #160]	; (8015420 <USBD_LL_Init+0xbc>)
 8015380:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015382:	4b26      	ldr	r3, [pc, #152]	; (801541c <USBD_LL_Init+0xb8>)
 8015384:	2208      	movs	r2, #8
 8015386:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015388:	4b24      	ldr	r3, [pc, #144]	; (801541c <USBD_LL_Init+0xb8>)
 801538a:	2202      	movs	r2, #2
 801538c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801538e:	4b23      	ldr	r3, [pc, #140]	; (801541c <USBD_LL_Init+0xb8>)
 8015390:	2202      	movs	r2, #2
 8015392:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015394:	4b21      	ldr	r3, [pc, #132]	; (801541c <USBD_LL_Init+0xb8>)
 8015396:	2200      	movs	r2, #0
 8015398:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801539a:	4b20      	ldr	r3, [pc, #128]	; (801541c <USBD_LL_Init+0xb8>)
 801539c:	2200      	movs	r2, #0
 801539e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80153a0:	4b1e      	ldr	r3, [pc, #120]	; (801541c <USBD_LL_Init+0xb8>)
 80153a2:	2200      	movs	r2, #0
 80153a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80153a6:	4b1d      	ldr	r3, [pc, #116]	; (801541c <USBD_LL_Init+0xb8>)
 80153a8:	2200      	movs	r2, #0
 80153aa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80153ac:	481b      	ldr	r0, [pc, #108]	; (801541c <USBD_LL_Init+0xb8>)
 80153ae:	f7f4 f815 	bl	80093dc <HAL_PCD_Init>
 80153b2:	4603      	mov	r3, r0
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d001      	beq.n	80153bc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80153b8:	f7ee fd80 	bl	8003ebc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80153c2:	2318      	movs	r3, #24
 80153c4:	2200      	movs	r2, #0
 80153c6:	2100      	movs	r1, #0
 80153c8:	f7f5 fccf 	bl	800ad6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80153d2:	2358      	movs	r3, #88	; 0x58
 80153d4:	2200      	movs	r2, #0
 80153d6:	2180      	movs	r1, #128	; 0x80
 80153d8:	f7f5 fcc7 	bl	800ad6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80153e2:	23c0      	movs	r3, #192	; 0xc0
 80153e4:	2200      	movs	r2, #0
 80153e6:	2181      	movs	r1, #129	; 0x81
 80153e8:	f7f5 fcbf 	bl	800ad6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80153f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80153f6:	2200      	movs	r2, #0
 80153f8:	2101      	movs	r1, #1
 80153fa:	f7f5 fcb6 	bl	800ad6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015408:	2200      	movs	r2, #0
 801540a:	2182      	movs	r1, #130	; 0x82
 801540c:	f7f5 fcad 	bl	800ad6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3708      	adds	r7, #8
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	20002d80 	.word	0x20002d80
 8015420:	40005c00 	.word	0x40005c00

08015424 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801542c:	2300      	movs	r3, #0
 801542e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015430:	2300      	movs	r3, #0
 8015432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801543a:	4618      	mov	r0, r3
 801543c:	f7f4 f89c 	bl	8009578 <HAL_PCD_Start>
 8015440:	4603      	mov	r3, r0
 8015442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015444:	7bfb      	ldrb	r3, [r7, #15]
 8015446:	4618      	mov	r0, r3
 8015448:	f000 f97e 	bl	8015748 <USBD_Get_USB_Status>
 801544c:	4603      	mov	r3, r0
 801544e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015450:	7bbb      	ldrb	r3, [r7, #14]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3710      	adds	r7, #16
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b084      	sub	sp, #16
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
 8015462:	4608      	mov	r0, r1
 8015464:	4611      	mov	r1, r2
 8015466:	461a      	mov	r2, r3
 8015468:	4603      	mov	r3, r0
 801546a:	70fb      	strb	r3, [r7, #3]
 801546c:	460b      	mov	r3, r1
 801546e:	70bb      	strb	r3, [r7, #2]
 8015470:	4613      	mov	r3, r2
 8015472:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015474:	2300      	movs	r3, #0
 8015476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015478:	2300      	movs	r3, #0
 801547a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015482:	78bb      	ldrb	r3, [r7, #2]
 8015484:	883a      	ldrh	r2, [r7, #0]
 8015486:	78f9      	ldrb	r1, [r7, #3]
 8015488:	f7f4 f9e3 	bl	8009852 <HAL_PCD_EP_Open>
 801548c:	4603      	mov	r3, r0
 801548e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015490:	7bfb      	ldrb	r3, [r7, #15]
 8015492:	4618      	mov	r0, r3
 8015494:	f000 f958 	bl	8015748 <USBD_Get_USB_Status>
 8015498:	4603      	mov	r3, r0
 801549a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801549c:	7bbb      	ldrb	r3, [r7, #14]
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3710      	adds	r7, #16
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b084      	sub	sp, #16
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
 80154ae:	460b      	mov	r3, r1
 80154b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154b2:	2300      	movs	r3, #0
 80154b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154b6:	2300      	movs	r3, #0
 80154b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80154c0:	78fa      	ldrb	r2, [r7, #3]
 80154c2:	4611      	mov	r1, r2
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7f4 fa21 	bl	800990c <HAL_PCD_EP_Close>
 80154ca:	4603      	mov	r3, r0
 80154cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154ce:	7bfb      	ldrb	r3, [r7, #15]
 80154d0:	4618      	mov	r0, r3
 80154d2:	f000 f939 	bl	8015748 <USBD_Get_USB_Status>
 80154d6:	4603      	mov	r3, r0
 80154d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154da:	7bbb      	ldrb	r3, [r7, #14]
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3710      	adds	r7, #16
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b084      	sub	sp, #16
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	460b      	mov	r3, r1
 80154ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154f0:	2300      	movs	r3, #0
 80154f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80154fe:	78fa      	ldrb	r2, [r7, #3]
 8015500:	4611      	mov	r1, r2
 8015502:	4618      	mov	r0, r3
 8015504:	f7f4 faca 	bl	8009a9c <HAL_PCD_EP_SetStall>
 8015508:	4603      	mov	r3, r0
 801550a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801550c:	7bfb      	ldrb	r3, [r7, #15]
 801550e:	4618      	mov	r0, r3
 8015510:	f000 f91a 	bl	8015748 <USBD_Get_USB_Status>
 8015514:	4603      	mov	r3, r0
 8015516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015518:	7bbb      	ldrb	r3, [r7, #14]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015522:	b580      	push	{r7, lr}
 8015524:	b084      	sub	sp, #16
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	460b      	mov	r3, r1
 801552c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801552e:	2300      	movs	r3, #0
 8015530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015532:	2300      	movs	r3, #0
 8015534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801553c:	78fa      	ldrb	r2, [r7, #3]
 801553e:	4611      	mov	r1, r2
 8015540:	4618      	mov	r0, r3
 8015542:	f7f4 fafd 	bl	8009b40 <HAL_PCD_EP_ClrStall>
 8015546:	4603      	mov	r3, r0
 8015548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801554a:	7bfb      	ldrb	r3, [r7, #15]
 801554c:	4618      	mov	r0, r3
 801554e:	f000 f8fb 	bl	8015748 <USBD_Get_USB_Status>
 8015552:	4603      	mov	r3, r0
 8015554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015556:	7bbb      	ldrb	r3, [r7, #14]
}
 8015558:	4618      	mov	r0, r3
 801555a:	3710      	adds	r7, #16
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015560:	b480      	push	{r7}
 8015562:	b085      	sub	sp, #20
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	460b      	mov	r3, r1
 801556a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015572:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015578:	2b00      	cmp	r3, #0
 801557a:	da0b      	bge.n	8015594 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801557c:	78fb      	ldrb	r3, [r7, #3]
 801557e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015582:	68f9      	ldr	r1, [r7, #12]
 8015584:	4613      	mov	r3, r2
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	4413      	add	r3, r2
 801558a:	00db      	lsls	r3, r3, #3
 801558c:	440b      	add	r3, r1
 801558e:	3312      	adds	r3, #18
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	e00b      	b.n	80155ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015594:	78fb      	ldrb	r3, [r7, #3]
 8015596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801559a:	68f9      	ldr	r1, [r7, #12]
 801559c:	4613      	mov	r3, r2
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	4413      	add	r3, r2
 80155a2:	00db      	lsls	r3, r3, #3
 80155a4:	440b      	add	r3, r1
 80155a6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80155aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3714      	adds	r7, #20
 80155b0:	46bd      	mov	sp, r7
 80155b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b6:	4770      	bx	lr

080155b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	460b      	mov	r3, r1
 80155c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155c4:	2300      	movs	r3, #0
 80155c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80155d2:	78fa      	ldrb	r2, [r7, #3]
 80155d4:	4611      	mov	r1, r2
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7f4 f917 	bl	800980a <HAL_PCD_SetAddress>
 80155dc:	4603      	mov	r3, r0
 80155de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155e0:	7bfb      	ldrb	r3, [r7, #15]
 80155e2:	4618      	mov	r0, r3
 80155e4:	f000 f8b0 	bl	8015748 <USBD_Get_USB_Status>
 80155e8:	4603      	mov	r3, r0
 80155ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b086      	sub	sp, #24
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	60f8      	str	r0, [r7, #12]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
 8015602:	460b      	mov	r3, r1
 8015604:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015606:	2300      	movs	r3, #0
 8015608:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801560a:	2300      	movs	r3, #0
 801560c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015614:	7af9      	ldrb	r1, [r7, #11]
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	f7f4 fa08 	bl	8009a2e <HAL_PCD_EP_Transmit>
 801561e:	4603      	mov	r3, r0
 8015620:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015622:	7dfb      	ldrb	r3, [r7, #23]
 8015624:	4618      	mov	r0, r3
 8015626:	f000 f88f 	bl	8015748 <USBD_Get_USB_Status>
 801562a:	4603      	mov	r3, r0
 801562c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801562e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3718      	adds	r7, #24
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b086      	sub	sp, #24
 801563c:	af00      	add	r7, sp, #0
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	607a      	str	r2, [r7, #4]
 8015642:	603b      	str	r3, [r7, #0]
 8015644:	460b      	mov	r3, r1
 8015646:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015648:	2300      	movs	r3, #0
 801564a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801564c:	2300      	movs	r3, #0
 801564e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015656:	7af9      	ldrb	r1, [r7, #11]
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	687a      	ldr	r2, [r7, #4]
 801565c:	f7f4 f99e 	bl	800999c <HAL_PCD_EP_Receive>
 8015660:	4603      	mov	r3, r0
 8015662:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015664:	7dfb      	ldrb	r3, [r7, #23]
 8015666:	4618      	mov	r0, r3
 8015668:	f000 f86e 	bl	8015748 <USBD_Get_USB_Status>
 801566c:	4603      	mov	r3, r0
 801566e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015670:	7dbb      	ldrb	r3, [r7, #22]
}
 8015672:	4618      	mov	r0, r3
 8015674:	3718      	adds	r7, #24
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}

0801567a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801567a:	b580      	push	{r7, lr}
 801567c:	b082      	sub	sp, #8
 801567e:	af00      	add	r7, sp, #0
 8015680:	6078      	str	r0, [r7, #4]
 8015682:	460b      	mov	r3, r1
 8015684:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801568c:	78fa      	ldrb	r2, [r7, #3]
 801568e:	4611      	mov	r1, r2
 8015690:	4618      	mov	r0, r3
 8015692:	f7f4 f9b4 	bl	80099fe <HAL_PCD_EP_GetRxCount>
 8015696:	4603      	mov	r3, r0
}
 8015698:	4618      	mov	r0, r3
 801569a:	3708      	adds	r7, #8
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	460b      	mov	r3, r1
 80156aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80156ac:	78fb      	ldrb	r3, [r7, #3]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d002      	beq.n	80156b8 <HAL_PCDEx_LPM_Callback+0x18>
 80156b2:	2b01      	cmp	r3, #1
 80156b4:	d013      	beq.n	80156de <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80156b6:	e023      	b.n	8015700 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	7a5b      	ldrb	r3, [r3, #9]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d007      	beq.n	80156d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80156c0:	f000 f83c 	bl	801573c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156c4:	4b10      	ldr	r3, [pc, #64]	; (8015708 <HAL_PCDEx_LPM_Callback+0x68>)
 80156c6:	691b      	ldr	r3, [r3, #16]
 80156c8:	4a0f      	ldr	r2, [pc, #60]	; (8015708 <HAL_PCDEx_LPM_Callback+0x68>)
 80156ca:	f023 0306 	bic.w	r3, r3, #6
 80156ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fe fc9c 	bl	8014014 <USBD_LL_Resume>
    break;
 80156dc:	e010      	b.n	8015700 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7fe fc7f 	bl	8013fe8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	7a5b      	ldrb	r3, [r3, #9]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d005      	beq.n	80156fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156f2:	4b05      	ldr	r3, [pc, #20]	; (8015708 <HAL_PCDEx_LPM_Callback+0x68>)
 80156f4:	691b      	ldr	r3, [r3, #16]
 80156f6:	4a04      	ldr	r2, [pc, #16]	; (8015708 <HAL_PCDEx_LPM_Callback+0x68>)
 80156f8:	f043 0306 	orr.w	r3, r3, #6
 80156fc:	6113      	str	r3, [r2, #16]
    break;
 80156fe:	bf00      	nop
}
 8015700:	bf00      	nop
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	e000ed00 	.word	0xe000ed00

0801570c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015714:	4b03      	ldr	r3, [pc, #12]	; (8015724 <USBD_static_malloc+0x18>)
}
 8015716:	4618      	mov	r0, r3
 8015718:	370c      	adds	r7, #12
 801571a:	46bd      	mov	sp, r7
 801571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015720:	4770      	bx	lr
 8015722:	bf00      	nop
 8015724:	2000305c 	.word	0x2000305c

08015728 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015728:	b480      	push	{r7}
 801572a:	b083      	sub	sp, #12
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]

}
 8015730:	bf00      	nop
 8015732:	370c      	adds	r7, #12
 8015734:	46bd      	mov	sp, r7
 8015736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573a:	4770      	bx	lr

0801573c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015740:	f7ed fe48 	bl	80033d4 <SystemClock_Config>
}
 8015744:	bf00      	nop
 8015746:	bd80      	pop	{r7, pc}

08015748 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015748:	b480      	push	{r7}
 801574a:	b085      	sub	sp, #20
 801574c:	af00      	add	r7, sp, #0
 801574e:	4603      	mov	r3, r0
 8015750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015752:	2300      	movs	r3, #0
 8015754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015756:	79fb      	ldrb	r3, [r7, #7]
 8015758:	2b03      	cmp	r3, #3
 801575a:	d817      	bhi.n	801578c <USBD_Get_USB_Status+0x44>
 801575c:	a201      	add	r2, pc, #4	; (adr r2, 8015764 <USBD_Get_USB_Status+0x1c>)
 801575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015762:	bf00      	nop
 8015764:	08015775 	.word	0x08015775
 8015768:	0801577b 	.word	0x0801577b
 801576c:	08015781 	.word	0x08015781
 8015770:	08015787 	.word	0x08015787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	73fb      	strb	r3, [r7, #15]
    break;
 8015778:	e00b      	b.n	8015792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801577a:	2303      	movs	r3, #3
 801577c:	73fb      	strb	r3, [r7, #15]
    break;
 801577e:	e008      	b.n	8015792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015780:	2301      	movs	r3, #1
 8015782:	73fb      	strb	r3, [r7, #15]
    break;
 8015784:	e005      	b.n	8015792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015786:	2303      	movs	r3, #3
 8015788:	73fb      	strb	r3, [r7, #15]
    break;
 801578a:	e002      	b.n	8015792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801578c:	2303      	movs	r3, #3
 801578e:	73fb      	strb	r3, [r7, #15]
    break;
 8015790:	bf00      	nop
  }
  return usb_status;
 8015792:	7bfb      	ldrb	r3, [r7, #15]
}
 8015794:	4618      	mov	r0, r3
 8015796:	3714      	adds	r7, #20
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr

080157a0 <__cvt>:
 80157a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157a4:	ec55 4b10 	vmov	r4, r5, d0
 80157a8:	2d00      	cmp	r5, #0
 80157aa:	460e      	mov	r6, r1
 80157ac:	4619      	mov	r1, r3
 80157ae:	462b      	mov	r3, r5
 80157b0:	bfbb      	ittet	lt
 80157b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80157b6:	461d      	movlt	r5, r3
 80157b8:	2300      	movge	r3, #0
 80157ba:	232d      	movlt	r3, #45	; 0x2d
 80157bc:	700b      	strb	r3, [r1, #0]
 80157be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80157c4:	4691      	mov	r9, r2
 80157c6:	f023 0820 	bic.w	r8, r3, #32
 80157ca:	bfbc      	itt	lt
 80157cc:	4622      	movlt	r2, r4
 80157ce:	4614      	movlt	r4, r2
 80157d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80157d4:	d005      	beq.n	80157e2 <__cvt+0x42>
 80157d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80157da:	d100      	bne.n	80157de <__cvt+0x3e>
 80157dc:	3601      	adds	r6, #1
 80157de:	2102      	movs	r1, #2
 80157e0:	e000      	b.n	80157e4 <__cvt+0x44>
 80157e2:	2103      	movs	r1, #3
 80157e4:	ab03      	add	r3, sp, #12
 80157e6:	9301      	str	r3, [sp, #4]
 80157e8:	ab02      	add	r3, sp, #8
 80157ea:	9300      	str	r3, [sp, #0]
 80157ec:	ec45 4b10 	vmov	d0, r4, r5
 80157f0:	4653      	mov	r3, sl
 80157f2:	4632      	mov	r2, r6
 80157f4:	f000 fe78 	bl	80164e8 <_dtoa_r>
 80157f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80157fc:	4607      	mov	r7, r0
 80157fe:	d102      	bne.n	8015806 <__cvt+0x66>
 8015800:	f019 0f01 	tst.w	r9, #1
 8015804:	d022      	beq.n	801584c <__cvt+0xac>
 8015806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801580a:	eb07 0906 	add.w	r9, r7, r6
 801580e:	d110      	bne.n	8015832 <__cvt+0x92>
 8015810:	783b      	ldrb	r3, [r7, #0]
 8015812:	2b30      	cmp	r3, #48	; 0x30
 8015814:	d10a      	bne.n	801582c <__cvt+0x8c>
 8015816:	2200      	movs	r2, #0
 8015818:	2300      	movs	r3, #0
 801581a:	4620      	mov	r0, r4
 801581c:	4629      	mov	r1, r5
 801581e:	f7eb f97b 	bl	8000b18 <__aeabi_dcmpeq>
 8015822:	b918      	cbnz	r0, 801582c <__cvt+0x8c>
 8015824:	f1c6 0601 	rsb	r6, r6, #1
 8015828:	f8ca 6000 	str.w	r6, [sl]
 801582c:	f8da 3000 	ldr.w	r3, [sl]
 8015830:	4499      	add	r9, r3
 8015832:	2200      	movs	r2, #0
 8015834:	2300      	movs	r3, #0
 8015836:	4620      	mov	r0, r4
 8015838:	4629      	mov	r1, r5
 801583a:	f7eb f96d 	bl	8000b18 <__aeabi_dcmpeq>
 801583e:	b108      	cbz	r0, 8015844 <__cvt+0xa4>
 8015840:	f8cd 900c 	str.w	r9, [sp, #12]
 8015844:	2230      	movs	r2, #48	; 0x30
 8015846:	9b03      	ldr	r3, [sp, #12]
 8015848:	454b      	cmp	r3, r9
 801584a:	d307      	bcc.n	801585c <__cvt+0xbc>
 801584c:	9b03      	ldr	r3, [sp, #12]
 801584e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015850:	1bdb      	subs	r3, r3, r7
 8015852:	4638      	mov	r0, r7
 8015854:	6013      	str	r3, [r2, #0]
 8015856:	b004      	add	sp, #16
 8015858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801585c:	1c59      	adds	r1, r3, #1
 801585e:	9103      	str	r1, [sp, #12]
 8015860:	701a      	strb	r2, [r3, #0]
 8015862:	e7f0      	b.n	8015846 <__cvt+0xa6>

08015864 <__exponent>:
 8015864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015866:	4603      	mov	r3, r0
 8015868:	2900      	cmp	r1, #0
 801586a:	bfb8      	it	lt
 801586c:	4249      	neglt	r1, r1
 801586e:	f803 2b02 	strb.w	r2, [r3], #2
 8015872:	bfb4      	ite	lt
 8015874:	222d      	movlt	r2, #45	; 0x2d
 8015876:	222b      	movge	r2, #43	; 0x2b
 8015878:	2909      	cmp	r1, #9
 801587a:	7042      	strb	r2, [r0, #1]
 801587c:	dd2a      	ble.n	80158d4 <__exponent+0x70>
 801587e:	f10d 0207 	add.w	r2, sp, #7
 8015882:	4617      	mov	r7, r2
 8015884:	260a      	movs	r6, #10
 8015886:	4694      	mov	ip, r2
 8015888:	fb91 f5f6 	sdiv	r5, r1, r6
 801588c:	fb06 1415 	mls	r4, r6, r5, r1
 8015890:	3430      	adds	r4, #48	; 0x30
 8015892:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8015896:	460c      	mov	r4, r1
 8015898:	2c63      	cmp	r4, #99	; 0x63
 801589a:	f102 32ff 	add.w	r2, r2, #4294967295
 801589e:	4629      	mov	r1, r5
 80158a0:	dcf1      	bgt.n	8015886 <__exponent+0x22>
 80158a2:	3130      	adds	r1, #48	; 0x30
 80158a4:	f1ac 0402 	sub.w	r4, ip, #2
 80158a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80158ac:	1c41      	adds	r1, r0, #1
 80158ae:	4622      	mov	r2, r4
 80158b0:	42ba      	cmp	r2, r7
 80158b2:	d30a      	bcc.n	80158ca <__exponent+0x66>
 80158b4:	f10d 0209 	add.w	r2, sp, #9
 80158b8:	eba2 020c 	sub.w	r2, r2, ip
 80158bc:	42bc      	cmp	r4, r7
 80158be:	bf88      	it	hi
 80158c0:	2200      	movhi	r2, #0
 80158c2:	4413      	add	r3, r2
 80158c4:	1a18      	subs	r0, r3, r0
 80158c6:	b003      	add	sp, #12
 80158c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80158ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80158d2:	e7ed      	b.n	80158b0 <__exponent+0x4c>
 80158d4:	2330      	movs	r3, #48	; 0x30
 80158d6:	3130      	adds	r1, #48	; 0x30
 80158d8:	7083      	strb	r3, [r0, #2]
 80158da:	70c1      	strb	r1, [r0, #3]
 80158dc:	1d03      	adds	r3, r0, #4
 80158de:	e7f1      	b.n	80158c4 <__exponent+0x60>

080158e0 <_printf_float>:
 80158e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e4:	ed2d 8b02 	vpush	{d8}
 80158e8:	b08d      	sub	sp, #52	; 0x34
 80158ea:	460c      	mov	r4, r1
 80158ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80158f0:	4616      	mov	r6, r2
 80158f2:	461f      	mov	r7, r3
 80158f4:	4605      	mov	r5, r0
 80158f6:	f000 fce7 	bl	80162c8 <_localeconv_r>
 80158fa:	f8d0 a000 	ldr.w	sl, [r0]
 80158fe:	4650      	mov	r0, sl
 8015900:	f7ea fcde 	bl	80002c0 <strlen>
 8015904:	2300      	movs	r3, #0
 8015906:	930a      	str	r3, [sp, #40]	; 0x28
 8015908:	6823      	ldr	r3, [r4, #0]
 801590a:	9305      	str	r3, [sp, #20]
 801590c:	f8d8 3000 	ldr.w	r3, [r8]
 8015910:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015914:	3307      	adds	r3, #7
 8015916:	f023 0307 	bic.w	r3, r3, #7
 801591a:	f103 0208 	add.w	r2, r3, #8
 801591e:	f8c8 2000 	str.w	r2, [r8]
 8015922:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015926:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801592a:	9307      	str	r3, [sp, #28]
 801592c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015930:	ee08 0a10 	vmov	s16, r0
 8015934:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8015938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801593c:	4b9e      	ldr	r3, [pc, #632]	; (8015bb8 <_printf_float+0x2d8>)
 801593e:	f04f 32ff 	mov.w	r2, #4294967295
 8015942:	f7eb f91b 	bl	8000b7c <__aeabi_dcmpun>
 8015946:	bb88      	cbnz	r0, 80159ac <_printf_float+0xcc>
 8015948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801594c:	4b9a      	ldr	r3, [pc, #616]	; (8015bb8 <_printf_float+0x2d8>)
 801594e:	f04f 32ff 	mov.w	r2, #4294967295
 8015952:	f7eb f8f5 	bl	8000b40 <__aeabi_dcmple>
 8015956:	bb48      	cbnz	r0, 80159ac <_printf_float+0xcc>
 8015958:	2200      	movs	r2, #0
 801595a:	2300      	movs	r3, #0
 801595c:	4640      	mov	r0, r8
 801595e:	4649      	mov	r1, r9
 8015960:	f7eb f8e4 	bl	8000b2c <__aeabi_dcmplt>
 8015964:	b110      	cbz	r0, 801596c <_printf_float+0x8c>
 8015966:	232d      	movs	r3, #45	; 0x2d
 8015968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801596c:	4a93      	ldr	r2, [pc, #588]	; (8015bbc <_printf_float+0x2dc>)
 801596e:	4b94      	ldr	r3, [pc, #592]	; (8015bc0 <_printf_float+0x2e0>)
 8015970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015974:	bf94      	ite	ls
 8015976:	4690      	movls	r8, r2
 8015978:	4698      	movhi	r8, r3
 801597a:	2303      	movs	r3, #3
 801597c:	6123      	str	r3, [r4, #16]
 801597e:	9b05      	ldr	r3, [sp, #20]
 8015980:	f023 0304 	bic.w	r3, r3, #4
 8015984:	6023      	str	r3, [r4, #0]
 8015986:	f04f 0900 	mov.w	r9, #0
 801598a:	9700      	str	r7, [sp, #0]
 801598c:	4633      	mov	r3, r6
 801598e:	aa0b      	add	r2, sp, #44	; 0x2c
 8015990:	4621      	mov	r1, r4
 8015992:	4628      	mov	r0, r5
 8015994:	f000 f9da 	bl	8015d4c <_printf_common>
 8015998:	3001      	adds	r0, #1
 801599a:	f040 8090 	bne.w	8015abe <_printf_float+0x1de>
 801599e:	f04f 30ff 	mov.w	r0, #4294967295
 80159a2:	b00d      	add	sp, #52	; 0x34
 80159a4:	ecbd 8b02 	vpop	{d8}
 80159a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ac:	4642      	mov	r2, r8
 80159ae:	464b      	mov	r3, r9
 80159b0:	4640      	mov	r0, r8
 80159b2:	4649      	mov	r1, r9
 80159b4:	f7eb f8e2 	bl	8000b7c <__aeabi_dcmpun>
 80159b8:	b140      	cbz	r0, 80159cc <_printf_float+0xec>
 80159ba:	464b      	mov	r3, r9
 80159bc:	2b00      	cmp	r3, #0
 80159be:	bfbc      	itt	lt
 80159c0:	232d      	movlt	r3, #45	; 0x2d
 80159c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80159c6:	4a7f      	ldr	r2, [pc, #508]	; (8015bc4 <_printf_float+0x2e4>)
 80159c8:	4b7f      	ldr	r3, [pc, #508]	; (8015bc8 <_printf_float+0x2e8>)
 80159ca:	e7d1      	b.n	8015970 <_printf_float+0x90>
 80159cc:	6863      	ldr	r3, [r4, #4]
 80159ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80159d2:	9206      	str	r2, [sp, #24]
 80159d4:	1c5a      	adds	r2, r3, #1
 80159d6:	d13f      	bne.n	8015a58 <_printf_float+0x178>
 80159d8:	2306      	movs	r3, #6
 80159da:	6063      	str	r3, [r4, #4]
 80159dc:	9b05      	ldr	r3, [sp, #20]
 80159de:	6861      	ldr	r1, [r4, #4]
 80159e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80159e4:	2300      	movs	r3, #0
 80159e6:	9303      	str	r3, [sp, #12]
 80159e8:	ab0a      	add	r3, sp, #40	; 0x28
 80159ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80159ee:	ab09      	add	r3, sp, #36	; 0x24
 80159f0:	ec49 8b10 	vmov	d0, r8, r9
 80159f4:	9300      	str	r3, [sp, #0]
 80159f6:	6022      	str	r2, [r4, #0]
 80159f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80159fc:	4628      	mov	r0, r5
 80159fe:	f7ff fecf 	bl	80157a0 <__cvt>
 8015a02:	9b06      	ldr	r3, [sp, #24]
 8015a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a06:	2b47      	cmp	r3, #71	; 0x47
 8015a08:	4680      	mov	r8, r0
 8015a0a:	d108      	bne.n	8015a1e <_printf_float+0x13e>
 8015a0c:	1cc8      	adds	r0, r1, #3
 8015a0e:	db02      	blt.n	8015a16 <_printf_float+0x136>
 8015a10:	6863      	ldr	r3, [r4, #4]
 8015a12:	4299      	cmp	r1, r3
 8015a14:	dd41      	ble.n	8015a9a <_printf_float+0x1ba>
 8015a16:	f1ab 0302 	sub.w	r3, fp, #2
 8015a1a:	fa5f fb83 	uxtb.w	fp, r3
 8015a1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015a22:	d820      	bhi.n	8015a66 <_printf_float+0x186>
 8015a24:	3901      	subs	r1, #1
 8015a26:	465a      	mov	r2, fp
 8015a28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015a2c:	9109      	str	r1, [sp, #36]	; 0x24
 8015a2e:	f7ff ff19 	bl	8015864 <__exponent>
 8015a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a34:	1813      	adds	r3, r2, r0
 8015a36:	2a01      	cmp	r2, #1
 8015a38:	4681      	mov	r9, r0
 8015a3a:	6123      	str	r3, [r4, #16]
 8015a3c:	dc02      	bgt.n	8015a44 <_printf_float+0x164>
 8015a3e:	6822      	ldr	r2, [r4, #0]
 8015a40:	07d2      	lsls	r2, r2, #31
 8015a42:	d501      	bpl.n	8015a48 <_printf_float+0x168>
 8015a44:	3301      	adds	r3, #1
 8015a46:	6123      	str	r3, [r4, #16]
 8015a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d09c      	beq.n	801598a <_printf_float+0xaa>
 8015a50:	232d      	movs	r3, #45	; 0x2d
 8015a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a56:	e798      	b.n	801598a <_printf_float+0xaa>
 8015a58:	9a06      	ldr	r2, [sp, #24]
 8015a5a:	2a47      	cmp	r2, #71	; 0x47
 8015a5c:	d1be      	bne.n	80159dc <_printf_float+0xfc>
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d1bc      	bne.n	80159dc <_printf_float+0xfc>
 8015a62:	2301      	movs	r3, #1
 8015a64:	e7b9      	b.n	80159da <_printf_float+0xfa>
 8015a66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015a6a:	d118      	bne.n	8015a9e <_printf_float+0x1be>
 8015a6c:	2900      	cmp	r1, #0
 8015a6e:	6863      	ldr	r3, [r4, #4]
 8015a70:	dd0b      	ble.n	8015a8a <_printf_float+0x1aa>
 8015a72:	6121      	str	r1, [r4, #16]
 8015a74:	b913      	cbnz	r3, 8015a7c <_printf_float+0x19c>
 8015a76:	6822      	ldr	r2, [r4, #0]
 8015a78:	07d0      	lsls	r0, r2, #31
 8015a7a:	d502      	bpl.n	8015a82 <_printf_float+0x1a2>
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	440b      	add	r3, r1
 8015a80:	6123      	str	r3, [r4, #16]
 8015a82:	65a1      	str	r1, [r4, #88]	; 0x58
 8015a84:	f04f 0900 	mov.w	r9, #0
 8015a88:	e7de      	b.n	8015a48 <_printf_float+0x168>
 8015a8a:	b913      	cbnz	r3, 8015a92 <_printf_float+0x1b2>
 8015a8c:	6822      	ldr	r2, [r4, #0]
 8015a8e:	07d2      	lsls	r2, r2, #31
 8015a90:	d501      	bpl.n	8015a96 <_printf_float+0x1b6>
 8015a92:	3302      	adds	r3, #2
 8015a94:	e7f4      	b.n	8015a80 <_printf_float+0x1a0>
 8015a96:	2301      	movs	r3, #1
 8015a98:	e7f2      	b.n	8015a80 <_printf_float+0x1a0>
 8015a9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa0:	4299      	cmp	r1, r3
 8015aa2:	db05      	blt.n	8015ab0 <_printf_float+0x1d0>
 8015aa4:	6823      	ldr	r3, [r4, #0]
 8015aa6:	6121      	str	r1, [r4, #16]
 8015aa8:	07d8      	lsls	r0, r3, #31
 8015aaa:	d5ea      	bpl.n	8015a82 <_printf_float+0x1a2>
 8015aac:	1c4b      	adds	r3, r1, #1
 8015aae:	e7e7      	b.n	8015a80 <_printf_float+0x1a0>
 8015ab0:	2900      	cmp	r1, #0
 8015ab2:	bfd4      	ite	le
 8015ab4:	f1c1 0202 	rsble	r2, r1, #2
 8015ab8:	2201      	movgt	r2, #1
 8015aba:	4413      	add	r3, r2
 8015abc:	e7e0      	b.n	8015a80 <_printf_float+0x1a0>
 8015abe:	6823      	ldr	r3, [r4, #0]
 8015ac0:	055a      	lsls	r2, r3, #21
 8015ac2:	d407      	bmi.n	8015ad4 <_printf_float+0x1f4>
 8015ac4:	6923      	ldr	r3, [r4, #16]
 8015ac6:	4642      	mov	r2, r8
 8015ac8:	4631      	mov	r1, r6
 8015aca:	4628      	mov	r0, r5
 8015acc:	47b8      	blx	r7
 8015ace:	3001      	adds	r0, #1
 8015ad0:	d12c      	bne.n	8015b2c <_printf_float+0x24c>
 8015ad2:	e764      	b.n	801599e <_printf_float+0xbe>
 8015ad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015ad8:	f240 80e0 	bls.w	8015c9c <_printf_float+0x3bc>
 8015adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	f7eb f818 	bl	8000b18 <__aeabi_dcmpeq>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d034      	beq.n	8015b56 <_printf_float+0x276>
 8015aec:	4a37      	ldr	r2, [pc, #220]	; (8015bcc <_printf_float+0x2ec>)
 8015aee:	2301      	movs	r3, #1
 8015af0:	4631      	mov	r1, r6
 8015af2:	4628      	mov	r0, r5
 8015af4:	47b8      	blx	r7
 8015af6:	3001      	adds	r0, #1
 8015af8:	f43f af51 	beq.w	801599e <_printf_float+0xbe>
 8015afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b00:	429a      	cmp	r2, r3
 8015b02:	db02      	blt.n	8015b0a <_printf_float+0x22a>
 8015b04:	6823      	ldr	r3, [r4, #0]
 8015b06:	07d8      	lsls	r0, r3, #31
 8015b08:	d510      	bpl.n	8015b2c <_printf_float+0x24c>
 8015b0a:	ee18 3a10 	vmov	r3, s16
 8015b0e:	4652      	mov	r2, sl
 8015b10:	4631      	mov	r1, r6
 8015b12:	4628      	mov	r0, r5
 8015b14:	47b8      	blx	r7
 8015b16:	3001      	adds	r0, #1
 8015b18:	f43f af41 	beq.w	801599e <_printf_float+0xbe>
 8015b1c:	f04f 0800 	mov.w	r8, #0
 8015b20:	f104 091a 	add.w	r9, r4, #26
 8015b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b26:	3b01      	subs	r3, #1
 8015b28:	4543      	cmp	r3, r8
 8015b2a:	dc09      	bgt.n	8015b40 <_printf_float+0x260>
 8015b2c:	6823      	ldr	r3, [r4, #0]
 8015b2e:	079b      	lsls	r3, r3, #30
 8015b30:	f100 8107 	bmi.w	8015d42 <_printf_float+0x462>
 8015b34:	68e0      	ldr	r0, [r4, #12]
 8015b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b38:	4298      	cmp	r0, r3
 8015b3a:	bfb8      	it	lt
 8015b3c:	4618      	movlt	r0, r3
 8015b3e:	e730      	b.n	80159a2 <_printf_float+0xc2>
 8015b40:	2301      	movs	r3, #1
 8015b42:	464a      	mov	r2, r9
 8015b44:	4631      	mov	r1, r6
 8015b46:	4628      	mov	r0, r5
 8015b48:	47b8      	blx	r7
 8015b4a:	3001      	adds	r0, #1
 8015b4c:	f43f af27 	beq.w	801599e <_printf_float+0xbe>
 8015b50:	f108 0801 	add.w	r8, r8, #1
 8015b54:	e7e6      	b.n	8015b24 <_printf_float+0x244>
 8015b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	dc39      	bgt.n	8015bd0 <_printf_float+0x2f0>
 8015b5c:	4a1b      	ldr	r2, [pc, #108]	; (8015bcc <_printf_float+0x2ec>)
 8015b5e:	2301      	movs	r3, #1
 8015b60:	4631      	mov	r1, r6
 8015b62:	4628      	mov	r0, r5
 8015b64:	47b8      	blx	r7
 8015b66:	3001      	adds	r0, #1
 8015b68:	f43f af19 	beq.w	801599e <_printf_float+0xbe>
 8015b6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b70:	4313      	orrs	r3, r2
 8015b72:	d102      	bne.n	8015b7a <_printf_float+0x29a>
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	07d9      	lsls	r1, r3, #31
 8015b78:	d5d8      	bpl.n	8015b2c <_printf_float+0x24c>
 8015b7a:	ee18 3a10 	vmov	r3, s16
 8015b7e:	4652      	mov	r2, sl
 8015b80:	4631      	mov	r1, r6
 8015b82:	4628      	mov	r0, r5
 8015b84:	47b8      	blx	r7
 8015b86:	3001      	adds	r0, #1
 8015b88:	f43f af09 	beq.w	801599e <_printf_float+0xbe>
 8015b8c:	f04f 0900 	mov.w	r9, #0
 8015b90:	f104 0a1a 	add.w	sl, r4, #26
 8015b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b96:	425b      	negs	r3, r3
 8015b98:	454b      	cmp	r3, r9
 8015b9a:	dc01      	bgt.n	8015ba0 <_printf_float+0x2c0>
 8015b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b9e:	e792      	b.n	8015ac6 <_printf_float+0x1e6>
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	4652      	mov	r2, sl
 8015ba4:	4631      	mov	r1, r6
 8015ba6:	4628      	mov	r0, r5
 8015ba8:	47b8      	blx	r7
 8015baa:	3001      	adds	r0, #1
 8015bac:	f43f aef7 	beq.w	801599e <_printf_float+0xbe>
 8015bb0:	f109 0901 	add.w	r9, r9, #1
 8015bb4:	e7ee      	b.n	8015b94 <_printf_float+0x2b4>
 8015bb6:	bf00      	nop
 8015bb8:	7fefffff 	.word	0x7fefffff
 8015bbc:	0801b0f8 	.word	0x0801b0f8
 8015bc0:	0801b0fc 	.word	0x0801b0fc
 8015bc4:	0801b100 	.word	0x0801b100
 8015bc8:	0801b104 	.word	0x0801b104
 8015bcc:	0801b108 	.word	0x0801b108
 8015bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	bfa8      	it	ge
 8015bd8:	461a      	movge	r2, r3
 8015bda:	2a00      	cmp	r2, #0
 8015bdc:	4691      	mov	r9, r2
 8015bde:	dc37      	bgt.n	8015c50 <_printf_float+0x370>
 8015be0:	f04f 0b00 	mov.w	fp, #0
 8015be4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015be8:	f104 021a 	add.w	r2, r4, #26
 8015bec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015bee:	9305      	str	r3, [sp, #20]
 8015bf0:	eba3 0309 	sub.w	r3, r3, r9
 8015bf4:	455b      	cmp	r3, fp
 8015bf6:	dc33      	bgt.n	8015c60 <_printf_float+0x380>
 8015bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	db3b      	blt.n	8015c78 <_printf_float+0x398>
 8015c00:	6823      	ldr	r3, [r4, #0]
 8015c02:	07da      	lsls	r2, r3, #31
 8015c04:	d438      	bmi.n	8015c78 <_printf_float+0x398>
 8015c06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c0a:	eba2 0903 	sub.w	r9, r2, r3
 8015c0e:	9b05      	ldr	r3, [sp, #20]
 8015c10:	1ad2      	subs	r2, r2, r3
 8015c12:	4591      	cmp	r9, r2
 8015c14:	bfa8      	it	ge
 8015c16:	4691      	movge	r9, r2
 8015c18:	f1b9 0f00 	cmp.w	r9, #0
 8015c1c:	dc35      	bgt.n	8015c8a <_printf_float+0x3aa>
 8015c1e:	f04f 0800 	mov.w	r8, #0
 8015c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c26:	f104 0a1a 	add.w	sl, r4, #26
 8015c2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c2e:	1a9b      	subs	r3, r3, r2
 8015c30:	eba3 0309 	sub.w	r3, r3, r9
 8015c34:	4543      	cmp	r3, r8
 8015c36:	f77f af79 	ble.w	8015b2c <_printf_float+0x24c>
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	4652      	mov	r2, sl
 8015c3e:	4631      	mov	r1, r6
 8015c40:	4628      	mov	r0, r5
 8015c42:	47b8      	blx	r7
 8015c44:	3001      	adds	r0, #1
 8015c46:	f43f aeaa 	beq.w	801599e <_printf_float+0xbe>
 8015c4a:	f108 0801 	add.w	r8, r8, #1
 8015c4e:	e7ec      	b.n	8015c2a <_printf_float+0x34a>
 8015c50:	4613      	mov	r3, r2
 8015c52:	4631      	mov	r1, r6
 8015c54:	4642      	mov	r2, r8
 8015c56:	4628      	mov	r0, r5
 8015c58:	47b8      	blx	r7
 8015c5a:	3001      	adds	r0, #1
 8015c5c:	d1c0      	bne.n	8015be0 <_printf_float+0x300>
 8015c5e:	e69e      	b.n	801599e <_printf_float+0xbe>
 8015c60:	2301      	movs	r3, #1
 8015c62:	4631      	mov	r1, r6
 8015c64:	4628      	mov	r0, r5
 8015c66:	9205      	str	r2, [sp, #20]
 8015c68:	47b8      	blx	r7
 8015c6a:	3001      	adds	r0, #1
 8015c6c:	f43f ae97 	beq.w	801599e <_printf_float+0xbe>
 8015c70:	9a05      	ldr	r2, [sp, #20]
 8015c72:	f10b 0b01 	add.w	fp, fp, #1
 8015c76:	e7b9      	b.n	8015bec <_printf_float+0x30c>
 8015c78:	ee18 3a10 	vmov	r3, s16
 8015c7c:	4652      	mov	r2, sl
 8015c7e:	4631      	mov	r1, r6
 8015c80:	4628      	mov	r0, r5
 8015c82:	47b8      	blx	r7
 8015c84:	3001      	adds	r0, #1
 8015c86:	d1be      	bne.n	8015c06 <_printf_float+0x326>
 8015c88:	e689      	b.n	801599e <_printf_float+0xbe>
 8015c8a:	9a05      	ldr	r2, [sp, #20]
 8015c8c:	464b      	mov	r3, r9
 8015c8e:	4442      	add	r2, r8
 8015c90:	4631      	mov	r1, r6
 8015c92:	4628      	mov	r0, r5
 8015c94:	47b8      	blx	r7
 8015c96:	3001      	adds	r0, #1
 8015c98:	d1c1      	bne.n	8015c1e <_printf_float+0x33e>
 8015c9a:	e680      	b.n	801599e <_printf_float+0xbe>
 8015c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c9e:	2a01      	cmp	r2, #1
 8015ca0:	dc01      	bgt.n	8015ca6 <_printf_float+0x3c6>
 8015ca2:	07db      	lsls	r3, r3, #31
 8015ca4:	d53a      	bpl.n	8015d1c <_printf_float+0x43c>
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	4642      	mov	r2, r8
 8015caa:	4631      	mov	r1, r6
 8015cac:	4628      	mov	r0, r5
 8015cae:	47b8      	blx	r7
 8015cb0:	3001      	adds	r0, #1
 8015cb2:	f43f ae74 	beq.w	801599e <_printf_float+0xbe>
 8015cb6:	ee18 3a10 	vmov	r3, s16
 8015cba:	4652      	mov	r2, sl
 8015cbc:	4631      	mov	r1, r6
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	47b8      	blx	r7
 8015cc2:	3001      	adds	r0, #1
 8015cc4:	f43f ae6b 	beq.w	801599e <_printf_float+0xbe>
 8015cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ccc:	2200      	movs	r2, #0
 8015cce:	2300      	movs	r3, #0
 8015cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015cd4:	f7ea ff20 	bl	8000b18 <__aeabi_dcmpeq>
 8015cd8:	b9d8      	cbnz	r0, 8015d12 <_printf_float+0x432>
 8015cda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015cde:	f108 0201 	add.w	r2, r8, #1
 8015ce2:	4631      	mov	r1, r6
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	47b8      	blx	r7
 8015ce8:	3001      	adds	r0, #1
 8015cea:	d10e      	bne.n	8015d0a <_printf_float+0x42a>
 8015cec:	e657      	b.n	801599e <_printf_float+0xbe>
 8015cee:	2301      	movs	r3, #1
 8015cf0:	4652      	mov	r2, sl
 8015cf2:	4631      	mov	r1, r6
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	47b8      	blx	r7
 8015cf8:	3001      	adds	r0, #1
 8015cfa:	f43f ae50 	beq.w	801599e <_printf_float+0xbe>
 8015cfe:	f108 0801 	add.w	r8, r8, #1
 8015d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d04:	3b01      	subs	r3, #1
 8015d06:	4543      	cmp	r3, r8
 8015d08:	dcf1      	bgt.n	8015cee <_printf_float+0x40e>
 8015d0a:	464b      	mov	r3, r9
 8015d0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015d10:	e6da      	b.n	8015ac8 <_printf_float+0x1e8>
 8015d12:	f04f 0800 	mov.w	r8, #0
 8015d16:	f104 0a1a 	add.w	sl, r4, #26
 8015d1a:	e7f2      	b.n	8015d02 <_printf_float+0x422>
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	4642      	mov	r2, r8
 8015d20:	e7df      	b.n	8015ce2 <_printf_float+0x402>
 8015d22:	2301      	movs	r3, #1
 8015d24:	464a      	mov	r2, r9
 8015d26:	4631      	mov	r1, r6
 8015d28:	4628      	mov	r0, r5
 8015d2a:	47b8      	blx	r7
 8015d2c:	3001      	adds	r0, #1
 8015d2e:	f43f ae36 	beq.w	801599e <_printf_float+0xbe>
 8015d32:	f108 0801 	add.w	r8, r8, #1
 8015d36:	68e3      	ldr	r3, [r4, #12]
 8015d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d3a:	1a5b      	subs	r3, r3, r1
 8015d3c:	4543      	cmp	r3, r8
 8015d3e:	dcf0      	bgt.n	8015d22 <_printf_float+0x442>
 8015d40:	e6f8      	b.n	8015b34 <_printf_float+0x254>
 8015d42:	f04f 0800 	mov.w	r8, #0
 8015d46:	f104 0919 	add.w	r9, r4, #25
 8015d4a:	e7f4      	b.n	8015d36 <_printf_float+0x456>

08015d4c <_printf_common>:
 8015d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d50:	4616      	mov	r6, r2
 8015d52:	4699      	mov	r9, r3
 8015d54:	688a      	ldr	r2, [r1, #8]
 8015d56:	690b      	ldr	r3, [r1, #16]
 8015d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	bfb8      	it	lt
 8015d60:	4613      	movlt	r3, r2
 8015d62:	6033      	str	r3, [r6, #0]
 8015d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015d68:	4607      	mov	r7, r0
 8015d6a:	460c      	mov	r4, r1
 8015d6c:	b10a      	cbz	r2, 8015d72 <_printf_common+0x26>
 8015d6e:	3301      	adds	r3, #1
 8015d70:	6033      	str	r3, [r6, #0]
 8015d72:	6823      	ldr	r3, [r4, #0]
 8015d74:	0699      	lsls	r1, r3, #26
 8015d76:	bf42      	ittt	mi
 8015d78:	6833      	ldrmi	r3, [r6, #0]
 8015d7a:	3302      	addmi	r3, #2
 8015d7c:	6033      	strmi	r3, [r6, #0]
 8015d7e:	6825      	ldr	r5, [r4, #0]
 8015d80:	f015 0506 	ands.w	r5, r5, #6
 8015d84:	d106      	bne.n	8015d94 <_printf_common+0x48>
 8015d86:	f104 0a19 	add.w	sl, r4, #25
 8015d8a:	68e3      	ldr	r3, [r4, #12]
 8015d8c:	6832      	ldr	r2, [r6, #0]
 8015d8e:	1a9b      	subs	r3, r3, r2
 8015d90:	42ab      	cmp	r3, r5
 8015d92:	dc26      	bgt.n	8015de2 <_printf_common+0x96>
 8015d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015d98:	1e13      	subs	r3, r2, #0
 8015d9a:	6822      	ldr	r2, [r4, #0]
 8015d9c:	bf18      	it	ne
 8015d9e:	2301      	movne	r3, #1
 8015da0:	0692      	lsls	r2, r2, #26
 8015da2:	d42b      	bmi.n	8015dfc <_printf_common+0xb0>
 8015da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015da8:	4649      	mov	r1, r9
 8015daa:	4638      	mov	r0, r7
 8015dac:	47c0      	blx	r8
 8015dae:	3001      	adds	r0, #1
 8015db0:	d01e      	beq.n	8015df0 <_printf_common+0xa4>
 8015db2:	6823      	ldr	r3, [r4, #0]
 8015db4:	6922      	ldr	r2, [r4, #16]
 8015db6:	f003 0306 	and.w	r3, r3, #6
 8015dba:	2b04      	cmp	r3, #4
 8015dbc:	bf02      	ittt	eq
 8015dbe:	68e5      	ldreq	r5, [r4, #12]
 8015dc0:	6833      	ldreq	r3, [r6, #0]
 8015dc2:	1aed      	subeq	r5, r5, r3
 8015dc4:	68a3      	ldr	r3, [r4, #8]
 8015dc6:	bf0c      	ite	eq
 8015dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015dcc:	2500      	movne	r5, #0
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	bfc4      	itt	gt
 8015dd2:	1a9b      	subgt	r3, r3, r2
 8015dd4:	18ed      	addgt	r5, r5, r3
 8015dd6:	2600      	movs	r6, #0
 8015dd8:	341a      	adds	r4, #26
 8015dda:	42b5      	cmp	r5, r6
 8015ddc:	d11a      	bne.n	8015e14 <_printf_common+0xc8>
 8015dde:	2000      	movs	r0, #0
 8015de0:	e008      	b.n	8015df4 <_printf_common+0xa8>
 8015de2:	2301      	movs	r3, #1
 8015de4:	4652      	mov	r2, sl
 8015de6:	4649      	mov	r1, r9
 8015de8:	4638      	mov	r0, r7
 8015dea:	47c0      	blx	r8
 8015dec:	3001      	adds	r0, #1
 8015dee:	d103      	bne.n	8015df8 <_printf_common+0xac>
 8015df0:	f04f 30ff 	mov.w	r0, #4294967295
 8015df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015df8:	3501      	adds	r5, #1
 8015dfa:	e7c6      	b.n	8015d8a <_printf_common+0x3e>
 8015dfc:	18e1      	adds	r1, r4, r3
 8015dfe:	1c5a      	adds	r2, r3, #1
 8015e00:	2030      	movs	r0, #48	; 0x30
 8015e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e06:	4422      	add	r2, r4
 8015e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e10:	3302      	adds	r3, #2
 8015e12:	e7c7      	b.n	8015da4 <_printf_common+0x58>
 8015e14:	2301      	movs	r3, #1
 8015e16:	4622      	mov	r2, r4
 8015e18:	4649      	mov	r1, r9
 8015e1a:	4638      	mov	r0, r7
 8015e1c:	47c0      	blx	r8
 8015e1e:	3001      	adds	r0, #1
 8015e20:	d0e6      	beq.n	8015df0 <_printf_common+0xa4>
 8015e22:	3601      	adds	r6, #1
 8015e24:	e7d9      	b.n	8015dda <_printf_common+0x8e>
	...

08015e28 <_printf_i>:
 8015e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e2c:	7e0f      	ldrb	r7, [r1, #24]
 8015e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e30:	2f78      	cmp	r7, #120	; 0x78
 8015e32:	4691      	mov	r9, r2
 8015e34:	4680      	mov	r8, r0
 8015e36:	460c      	mov	r4, r1
 8015e38:	469a      	mov	sl, r3
 8015e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015e3e:	d807      	bhi.n	8015e50 <_printf_i+0x28>
 8015e40:	2f62      	cmp	r7, #98	; 0x62
 8015e42:	d80a      	bhi.n	8015e5a <_printf_i+0x32>
 8015e44:	2f00      	cmp	r7, #0
 8015e46:	f000 80d4 	beq.w	8015ff2 <_printf_i+0x1ca>
 8015e4a:	2f58      	cmp	r7, #88	; 0x58
 8015e4c:	f000 80c0 	beq.w	8015fd0 <_printf_i+0x1a8>
 8015e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015e58:	e03a      	b.n	8015ed0 <_printf_i+0xa8>
 8015e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015e5e:	2b15      	cmp	r3, #21
 8015e60:	d8f6      	bhi.n	8015e50 <_printf_i+0x28>
 8015e62:	a101      	add	r1, pc, #4	; (adr r1, 8015e68 <_printf_i+0x40>)
 8015e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e68:	08015ec1 	.word	0x08015ec1
 8015e6c:	08015ed5 	.word	0x08015ed5
 8015e70:	08015e51 	.word	0x08015e51
 8015e74:	08015e51 	.word	0x08015e51
 8015e78:	08015e51 	.word	0x08015e51
 8015e7c:	08015e51 	.word	0x08015e51
 8015e80:	08015ed5 	.word	0x08015ed5
 8015e84:	08015e51 	.word	0x08015e51
 8015e88:	08015e51 	.word	0x08015e51
 8015e8c:	08015e51 	.word	0x08015e51
 8015e90:	08015e51 	.word	0x08015e51
 8015e94:	08015fd9 	.word	0x08015fd9
 8015e98:	08015f01 	.word	0x08015f01
 8015e9c:	08015f93 	.word	0x08015f93
 8015ea0:	08015e51 	.word	0x08015e51
 8015ea4:	08015e51 	.word	0x08015e51
 8015ea8:	08015ffb 	.word	0x08015ffb
 8015eac:	08015e51 	.word	0x08015e51
 8015eb0:	08015f01 	.word	0x08015f01
 8015eb4:	08015e51 	.word	0x08015e51
 8015eb8:	08015e51 	.word	0x08015e51
 8015ebc:	08015f9b 	.word	0x08015f9b
 8015ec0:	682b      	ldr	r3, [r5, #0]
 8015ec2:	1d1a      	adds	r2, r3, #4
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	602a      	str	r2, [r5, #0]
 8015ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	e09f      	b.n	8016014 <_printf_i+0x1ec>
 8015ed4:	6820      	ldr	r0, [r4, #0]
 8015ed6:	682b      	ldr	r3, [r5, #0]
 8015ed8:	0607      	lsls	r7, r0, #24
 8015eda:	f103 0104 	add.w	r1, r3, #4
 8015ede:	6029      	str	r1, [r5, #0]
 8015ee0:	d501      	bpl.n	8015ee6 <_printf_i+0xbe>
 8015ee2:	681e      	ldr	r6, [r3, #0]
 8015ee4:	e003      	b.n	8015eee <_printf_i+0xc6>
 8015ee6:	0646      	lsls	r6, r0, #25
 8015ee8:	d5fb      	bpl.n	8015ee2 <_printf_i+0xba>
 8015eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015eee:	2e00      	cmp	r6, #0
 8015ef0:	da03      	bge.n	8015efa <_printf_i+0xd2>
 8015ef2:	232d      	movs	r3, #45	; 0x2d
 8015ef4:	4276      	negs	r6, r6
 8015ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015efa:	485a      	ldr	r0, [pc, #360]	; (8016064 <_printf_i+0x23c>)
 8015efc:	230a      	movs	r3, #10
 8015efe:	e012      	b.n	8015f26 <_printf_i+0xfe>
 8015f00:	682b      	ldr	r3, [r5, #0]
 8015f02:	6820      	ldr	r0, [r4, #0]
 8015f04:	1d19      	adds	r1, r3, #4
 8015f06:	6029      	str	r1, [r5, #0]
 8015f08:	0605      	lsls	r5, r0, #24
 8015f0a:	d501      	bpl.n	8015f10 <_printf_i+0xe8>
 8015f0c:	681e      	ldr	r6, [r3, #0]
 8015f0e:	e002      	b.n	8015f16 <_printf_i+0xee>
 8015f10:	0641      	lsls	r1, r0, #25
 8015f12:	d5fb      	bpl.n	8015f0c <_printf_i+0xe4>
 8015f14:	881e      	ldrh	r6, [r3, #0]
 8015f16:	4853      	ldr	r0, [pc, #332]	; (8016064 <_printf_i+0x23c>)
 8015f18:	2f6f      	cmp	r7, #111	; 0x6f
 8015f1a:	bf0c      	ite	eq
 8015f1c:	2308      	moveq	r3, #8
 8015f1e:	230a      	movne	r3, #10
 8015f20:	2100      	movs	r1, #0
 8015f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f26:	6865      	ldr	r5, [r4, #4]
 8015f28:	60a5      	str	r5, [r4, #8]
 8015f2a:	2d00      	cmp	r5, #0
 8015f2c:	bfa2      	ittt	ge
 8015f2e:	6821      	ldrge	r1, [r4, #0]
 8015f30:	f021 0104 	bicge.w	r1, r1, #4
 8015f34:	6021      	strge	r1, [r4, #0]
 8015f36:	b90e      	cbnz	r6, 8015f3c <_printf_i+0x114>
 8015f38:	2d00      	cmp	r5, #0
 8015f3a:	d04b      	beq.n	8015fd4 <_printf_i+0x1ac>
 8015f3c:	4615      	mov	r5, r2
 8015f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015f42:	fb03 6711 	mls	r7, r3, r1, r6
 8015f46:	5dc7      	ldrb	r7, [r0, r7]
 8015f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015f4c:	4637      	mov	r7, r6
 8015f4e:	42bb      	cmp	r3, r7
 8015f50:	460e      	mov	r6, r1
 8015f52:	d9f4      	bls.n	8015f3e <_printf_i+0x116>
 8015f54:	2b08      	cmp	r3, #8
 8015f56:	d10b      	bne.n	8015f70 <_printf_i+0x148>
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	07de      	lsls	r6, r3, #31
 8015f5c:	d508      	bpl.n	8015f70 <_printf_i+0x148>
 8015f5e:	6923      	ldr	r3, [r4, #16]
 8015f60:	6861      	ldr	r1, [r4, #4]
 8015f62:	4299      	cmp	r1, r3
 8015f64:	bfde      	ittt	le
 8015f66:	2330      	movle	r3, #48	; 0x30
 8015f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f70:	1b52      	subs	r2, r2, r5
 8015f72:	6122      	str	r2, [r4, #16]
 8015f74:	f8cd a000 	str.w	sl, [sp]
 8015f78:	464b      	mov	r3, r9
 8015f7a:	aa03      	add	r2, sp, #12
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	4640      	mov	r0, r8
 8015f80:	f7ff fee4 	bl	8015d4c <_printf_common>
 8015f84:	3001      	adds	r0, #1
 8015f86:	d14a      	bne.n	801601e <_printf_i+0x1f6>
 8015f88:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8c:	b004      	add	sp, #16
 8015f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f92:	6823      	ldr	r3, [r4, #0]
 8015f94:	f043 0320 	orr.w	r3, r3, #32
 8015f98:	6023      	str	r3, [r4, #0]
 8015f9a:	4833      	ldr	r0, [pc, #204]	; (8016068 <_printf_i+0x240>)
 8015f9c:	2778      	movs	r7, #120	; 0x78
 8015f9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015fa2:	6823      	ldr	r3, [r4, #0]
 8015fa4:	6829      	ldr	r1, [r5, #0]
 8015fa6:	061f      	lsls	r7, r3, #24
 8015fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8015fac:	d402      	bmi.n	8015fb4 <_printf_i+0x18c>
 8015fae:	065f      	lsls	r7, r3, #25
 8015fb0:	bf48      	it	mi
 8015fb2:	b2b6      	uxthmi	r6, r6
 8015fb4:	07df      	lsls	r7, r3, #31
 8015fb6:	bf48      	it	mi
 8015fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8015fbc:	6029      	str	r1, [r5, #0]
 8015fbe:	bf48      	it	mi
 8015fc0:	6023      	strmi	r3, [r4, #0]
 8015fc2:	b91e      	cbnz	r6, 8015fcc <_printf_i+0x1a4>
 8015fc4:	6823      	ldr	r3, [r4, #0]
 8015fc6:	f023 0320 	bic.w	r3, r3, #32
 8015fca:	6023      	str	r3, [r4, #0]
 8015fcc:	2310      	movs	r3, #16
 8015fce:	e7a7      	b.n	8015f20 <_printf_i+0xf8>
 8015fd0:	4824      	ldr	r0, [pc, #144]	; (8016064 <_printf_i+0x23c>)
 8015fd2:	e7e4      	b.n	8015f9e <_printf_i+0x176>
 8015fd4:	4615      	mov	r5, r2
 8015fd6:	e7bd      	b.n	8015f54 <_printf_i+0x12c>
 8015fd8:	682b      	ldr	r3, [r5, #0]
 8015fda:	6826      	ldr	r6, [r4, #0]
 8015fdc:	6961      	ldr	r1, [r4, #20]
 8015fde:	1d18      	adds	r0, r3, #4
 8015fe0:	6028      	str	r0, [r5, #0]
 8015fe2:	0635      	lsls	r5, r6, #24
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	d501      	bpl.n	8015fec <_printf_i+0x1c4>
 8015fe8:	6019      	str	r1, [r3, #0]
 8015fea:	e002      	b.n	8015ff2 <_printf_i+0x1ca>
 8015fec:	0670      	lsls	r0, r6, #25
 8015fee:	d5fb      	bpl.n	8015fe8 <_printf_i+0x1c0>
 8015ff0:	8019      	strh	r1, [r3, #0]
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	6123      	str	r3, [r4, #16]
 8015ff6:	4615      	mov	r5, r2
 8015ff8:	e7bc      	b.n	8015f74 <_printf_i+0x14c>
 8015ffa:	682b      	ldr	r3, [r5, #0]
 8015ffc:	1d1a      	adds	r2, r3, #4
 8015ffe:	602a      	str	r2, [r5, #0]
 8016000:	681d      	ldr	r5, [r3, #0]
 8016002:	6862      	ldr	r2, [r4, #4]
 8016004:	2100      	movs	r1, #0
 8016006:	4628      	mov	r0, r5
 8016008:	f7ea f90a 	bl	8000220 <memchr>
 801600c:	b108      	cbz	r0, 8016012 <_printf_i+0x1ea>
 801600e:	1b40      	subs	r0, r0, r5
 8016010:	6060      	str	r0, [r4, #4]
 8016012:	6863      	ldr	r3, [r4, #4]
 8016014:	6123      	str	r3, [r4, #16]
 8016016:	2300      	movs	r3, #0
 8016018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801601c:	e7aa      	b.n	8015f74 <_printf_i+0x14c>
 801601e:	6923      	ldr	r3, [r4, #16]
 8016020:	462a      	mov	r2, r5
 8016022:	4649      	mov	r1, r9
 8016024:	4640      	mov	r0, r8
 8016026:	47d0      	blx	sl
 8016028:	3001      	adds	r0, #1
 801602a:	d0ad      	beq.n	8015f88 <_printf_i+0x160>
 801602c:	6823      	ldr	r3, [r4, #0]
 801602e:	079b      	lsls	r3, r3, #30
 8016030:	d413      	bmi.n	801605a <_printf_i+0x232>
 8016032:	68e0      	ldr	r0, [r4, #12]
 8016034:	9b03      	ldr	r3, [sp, #12]
 8016036:	4298      	cmp	r0, r3
 8016038:	bfb8      	it	lt
 801603a:	4618      	movlt	r0, r3
 801603c:	e7a6      	b.n	8015f8c <_printf_i+0x164>
 801603e:	2301      	movs	r3, #1
 8016040:	4632      	mov	r2, r6
 8016042:	4649      	mov	r1, r9
 8016044:	4640      	mov	r0, r8
 8016046:	47d0      	blx	sl
 8016048:	3001      	adds	r0, #1
 801604a:	d09d      	beq.n	8015f88 <_printf_i+0x160>
 801604c:	3501      	adds	r5, #1
 801604e:	68e3      	ldr	r3, [r4, #12]
 8016050:	9903      	ldr	r1, [sp, #12]
 8016052:	1a5b      	subs	r3, r3, r1
 8016054:	42ab      	cmp	r3, r5
 8016056:	dcf2      	bgt.n	801603e <_printf_i+0x216>
 8016058:	e7eb      	b.n	8016032 <_printf_i+0x20a>
 801605a:	2500      	movs	r5, #0
 801605c:	f104 0619 	add.w	r6, r4, #25
 8016060:	e7f5      	b.n	801604e <_printf_i+0x226>
 8016062:	bf00      	nop
 8016064:	0801b10a 	.word	0x0801b10a
 8016068:	0801b11b 	.word	0x0801b11b

0801606c <std>:
 801606c:	2300      	movs	r3, #0
 801606e:	b510      	push	{r4, lr}
 8016070:	4604      	mov	r4, r0
 8016072:	e9c0 3300 	strd	r3, r3, [r0]
 8016076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801607a:	6083      	str	r3, [r0, #8]
 801607c:	8181      	strh	r1, [r0, #12]
 801607e:	6643      	str	r3, [r0, #100]	; 0x64
 8016080:	81c2      	strh	r2, [r0, #14]
 8016082:	6183      	str	r3, [r0, #24]
 8016084:	4619      	mov	r1, r3
 8016086:	2208      	movs	r2, #8
 8016088:	305c      	adds	r0, #92	; 0x5c
 801608a:	f000 f914 	bl	80162b6 <memset>
 801608e:	4b0d      	ldr	r3, [pc, #52]	; (80160c4 <std+0x58>)
 8016090:	6263      	str	r3, [r4, #36]	; 0x24
 8016092:	4b0d      	ldr	r3, [pc, #52]	; (80160c8 <std+0x5c>)
 8016094:	62a3      	str	r3, [r4, #40]	; 0x28
 8016096:	4b0d      	ldr	r3, [pc, #52]	; (80160cc <std+0x60>)
 8016098:	62e3      	str	r3, [r4, #44]	; 0x2c
 801609a:	4b0d      	ldr	r3, [pc, #52]	; (80160d0 <std+0x64>)
 801609c:	6323      	str	r3, [r4, #48]	; 0x30
 801609e:	4b0d      	ldr	r3, [pc, #52]	; (80160d4 <std+0x68>)
 80160a0:	6224      	str	r4, [r4, #32]
 80160a2:	429c      	cmp	r4, r3
 80160a4:	d006      	beq.n	80160b4 <std+0x48>
 80160a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80160aa:	4294      	cmp	r4, r2
 80160ac:	d002      	beq.n	80160b4 <std+0x48>
 80160ae:	33d0      	adds	r3, #208	; 0xd0
 80160b0:	429c      	cmp	r4, r3
 80160b2:	d105      	bne.n	80160c0 <std+0x54>
 80160b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80160b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160bc:	f000 b978 	b.w	80163b0 <__retarget_lock_init_recursive>
 80160c0:	bd10      	pop	{r4, pc}
 80160c2:	bf00      	nop
 80160c4:	08016231 	.word	0x08016231
 80160c8:	08016253 	.word	0x08016253
 80160cc:	0801628b 	.word	0x0801628b
 80160d0:	080162af 	.word	0x080162af
 80160d4:	2000327c 	.word	0x2000327c

080160d8 <stdio_exit_handler>:
 80160d8:	4a02      	ldr	r2, [pc, #8]	; (80160e4 <stdio_exit_handler+0xc>)
 80160da:	4903      	ldr	r1, [pc, #12]	; (80160e8 <stdio_exit_handler+0x10>)
 80160dc:	4803      	ldr	r0, [pc, #12]	; (80160ec <stdio_exit_handler+0x14>)
 80160de:	f000 b869 	b.w	80161b4 <_fwalk_sglue>
 80160e2:	bf00      	nop
 80160e4:	20000370 	.word	0x20000370
 80160e8:	08017d81 	.word	0x08017d81
 80160ec:	2000037c 	.word	0x2000037c

080160f0 <cleanup_stdio>:
 80160f0:	6841      	ldr	r1, [r0, #4]
 80160f2:	4b0c      	ldr	r3, [pc, #48]	; (8016124 <cleanup_stdio+0x34>)
 80160f4:	4299      	cmp	r1, r3
 80160f6:	b510      	push	{r4, lr}
 80160f8:	4604      	mov	r4, r0
 80160fa:	d001      	beq.n	8016100 <cleanup_stdio+0x10>
 80160fc:	f001 fe40 	bl	8017d80 <_fflush_r>
 8016100:	68a1      	ldr	r1, [r4, #8]
 8016102:	4b09      	ldr	r3, [pc, #36]	; (8016128 <cleanup_stdio+0x38>)
 8016104:	4299      	cmp	r1, r3
 8016106:	d002      	beq.n	801610e <cleanup_stdio+0x1e>
 8016108:	4620      	mov	r0, r4
 801610a:	f001 fe39 	bl	8017d80 <_fflush_r>
 801610e:	68e1      	ldr	r1, [r4, #12]
 8016110:	4b06      	ldr	r3, [pc, #24]	; (801612c <cleanup_stdio+0x3c>)
 8016112:	4299      	cmp	r1, r3
 8016114:	d004      	beq.n	8016120 <cleanup_stdio+0x30>
 8016116:	4620      	mov	r0, r4
 8016118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801611c:	f001 be30 	b.w	8017d80 <_fflush_r>
 8016120:	bd10      	pop	{r4, pc}
 8016122:	bf00      	nop
 8016124:	2000327c 	.word	0x2000327c
 8016128:	200032e4 	.word	0x200032e4
 801612c:	2000334c 	.word	0x2000334c

08016130 <global_stdio_init.part.0>:
 8016130:	b510      	push	{r4, lr}
 8016132:	4b0b      	ldr	r3, [pc, #44]	; (8016160 <global_stdio_init.part.0+0x30>)
 8016134:	4c0b      	ldr	r4, [pc, #44]	; (8016164 <global_stdio_init.part.0+0x34>)
 8016136:	4a0c      	ldr	r2, [pc, #48]	; (8016168 <global_stdio_init.part.0+0x38>)
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	4620      	mov	r0, r4
 801613c:	2200      	movs	r2, #0
 801613e:	2104      	movs	r1, #4
 8016140:	f7ff ff94 	bl	801606c <std>
 8016144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016148:	2201      	movs	r2, #1
 801614a:	2109      	movs	r1, #9
 801614c:	f7ff ff8e 	bl	801606c <std>
 8016150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016154:	2202      	movs	r2, #2
 8016156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801615a:	2112      	movs	r1, #18
 801615c:	f7ff bf86 	b.w	801606c <std>
 8016160:	200033b4 	.word	0x200033b4
 8016164:	2000327c 	.word	0x2000327c
 8016168:	080160d9 	.word	0x080160d9

0801616c <__sfp_lock_acquire>:
 801616c:	4801      	ldr	r0, [pc, #4]	; (8016174 <__sfp_lock_acquire+0x8>)
 801616e:	f000 b920 	b.w	80163b2 <__retarget_lock_acquire_recursive>
 8016172:	bf00      	nop
 8016174:	200033bd 	.word	0x200033bd

08016178 <__sfp_lock_release>:
 8016178:	4801      	ldr	r0, [pc, #4]	; (8016180 <__sfp_lock_release+0x8>)
 801617a:	f000 b91b 	b.w	80163b4 <__retarget_lock_release_recursive>
 801617e:	bf00      	nop
 8016180:	200033bd 	.word	0x200033bd

08016184 <__sinit>:
 8016184:	b510      	push	{r4, lr}
 8016186:	4604      	mov	r4, r0
 8016188:	f7ff fff0 	bl	801616c <__sfp_lock_acquire>
 801618c:	6a23      	ldr	r3, [r4, #32]
 801618e:	b11b      	cbz	r3, 8016198 <__sinit+0x14>
 8016190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016194:	f7ff bff0 	b.w	8016178 <__sfp_lock_release>
 8016198:	4b04      	ldr	r3, [pc, #16]	; (80161ac <__sinit+0x28>)
 801619a:	6223      	str	r3, [r4, #32]
 801619c:	4b04      	ldr	r3, [pc, #16]	; (80161b0 <__sinit+0x2c>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d1f5      	bne.n	8016190 <__sinit+0xc>
 80161a4:	f7ff ffc4 	bl	8016130 <global_stdio_init.part.0>
 80161a8:	e7f2      	b.n	8016190 <__sinit+0xc>
 80161aa:	bf00      	nop
 80161ac:	080160f1 	.word	0x080160f1
 80161b0:	200033b4 	.word	0x200033b4

080161b4 <_fwalk_sglue>:
 80161b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161b8:	4607      	mov	r7, r0
 80161ba:	4688      	mov	r8, r1
 80161bc:	4614      	mov	r4, r2
 80161be:	2600      	movs	r6, #0
 80161c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80161c4:	f1b9 0901 	subs.w	r9, r9, #1
 80161c8:	d505      	bpl.n	80161d6 <_fwalk_sglue+0x22>
 80161ca:	6824      	ldr	r4, [r4, #0]
 80161cc:	2c00      	cmp	r4, #0
 80161ce:	d1f7      	bne.n	80161c0 <_fwalk_sglue+0xc>
 80161d0:	4630      	mov	r0, r6
 80161d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161d6:	89ab      	ldrh	r3, [r5, #12]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d907      	bls.n	80161ec <_fwalk_sglue+0x38>
 80161dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80161e0:	3301      	adds	r3, #1
 80161e2:	d003      	beq.n	80161ec <_fwalk_sglue+0x38>
 80161e4:	4629      	mov	r1, r5
 80161e6:	4638      	mov	r0, r7
 80161e8:	47c0      	blx	r8
 80161ea:	4306      	orrs	r6, r0
 80161ec:	3568      	adds	r5, #104	; 0x68
 80161ee:	e7e9      	b.n	80161c4 <_fwalk_sglue+0x10>

080161f0 <siprintf>:
 80161f0:	b40e      	push	{r1, r2, r3}
 80161f2:	b500      	push	{lr}
 80161f4:	b09c      	sub	sp, #112	; 0x70
 80161f6:	ab1d      	add	r3, sp, #116	; 0x74
 80161f8:	9002      	str	r0, [sp, #8]
 80161fa:	9006      	str	r0, [sp, #24]
 80161fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016200:	4809      	ldr	r0, [pc, #36]	; (8016228 <siprintf+0x38>)
 8016202:	9107      	str	r1, [sp, #28]
 8016204:	9104      	str	r1, [sp, #16]
 8016206:	4909      	ldr	r1, [pc, #36]	; (801622c <siprintf+0x3c>)
 8016208:	f853 2b04 	ldr.w	r2, [r3], #4
 801620c:	9105      	str	r1, [sp, #20]
 801620e:	6800      	ldr	r0, [r0, #0]
 8016210:	9301      	str	r3, [sp, #4]
 8016212:	a902      	add	r1, sp, #8
 8016214:	f001 fc30 	bl	8017a78 <_svfiprintf_r>
 8016218:	9b02      	ldr	r3, [sp, #8]
 801621a:	2200      	movs	r2, #0
 801621c:	701a      	strb	r2, [r3, #0]
 801621e:	b01c      	add	sp, #112	; 0x70
 8016220:	f85d eb04 	ldr.w	lr, [sp], #4
 8016224:	b003      	add	sp, #12
 8016226:	4770      	bx	lr
 8016228:	200003c8 	.word	0x200003c8
 801622c:	ffff0208 	.word	0xffff0208

08016230 <__sread>:
 8016230:	b510      	push	{r4, lr}
 8016232:	460c      	mov	r4, r1
 8016234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016238:	f000 f86c 	bl	8016314 <_read_r>
 801623c:	2800      	cmp	r0, #0
 801623e:	bfab      	itete	ge
 8016240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016242:	89a3      	ldrhlt	r3, [r4, #12]
 8016244:	181b      	addge	r3, r3, r0
 8016246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801624a:	bfac      	ite	ge
 801624c:	6563      	strge	r3, [r4, #84]	; 0x54
 801624e:	81a3      	strhlt	r3, [r4, #12]
 8016250:	bd10      	pop	{r4, pc}

08016252 <__swrite>:
 8016252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016256:	461f      	mov	r7, r3
 8016258:	898b      	ldrh	r3, [r1, #12]
 801625a:	05db      	lsls	r3, r3, #23
 801625c:	4605      	mov	r5, r0
 801625e:	460c      	mov	r4, r1
 8016260:	4616      	mov	r6, r2
 8016262:	d505      	bpl.n	8016270 <__swrite+0x1e>
 8016264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016268:	2302      	movs	r3, #2
 801626a:	2200      	movs	r2, #0
 801626c:	f000 f840 	bl	80162f0 <_lseek_r>
 8016270:	89a3      	ldrh	r3, [r4, #12]
 8016272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801627a:	81a3      	strh	r3, [r4, #12]
 801627c:	4632      	mov	r2, r6
 801627e:	463b      	mov	r3, r7
 8016280:	4628      	mov	r0, r5
 8016282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016286:	f000 b857 	b.w	8016338 <_write_r>

0801628a <__sseek>:
 801628a:	b510      	push	{r4, lr}
 801628c:	460c      	mov	r4, r1
 801628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016292:	f000 f82d 	bl	80162f0 <_lseek_r>
 8016296:	1c43      	adds	r3, r0, #1
 8016298:	89a3      	ldrh	r3, [r4, #12]
 801629a:	bf15      	itete	ne
 801629c:	6560      	strne	r0, [r4, #84]	; 0x54
 801629e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162a6:	81a3      	strheq	r3, [r4, #12]
 80162a8:	bf18      	it	ne
 80162aa:	81a3      	strhne	r3, [r4, #12]
 80162ac:	bd10      	pop	{r4, pc}

080162ae <__sclose>:
 80162ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162b2:	f000 b80d 	b.w	80162d0 <_close_r>

080162b6 <memset>:
 80162b6:	4402      	add	r2, r0
 80162b8:	4603      	mov	r3, r0
 80162ba:	4293      	cmp	r3, r2
 80162bc:	d100      	bne.n	80162c0 <memset+0xa>
 80162be:	4770      	bx	lr
 80162c0:	f803 1b01 	strb.w	r1, [r3], #1
 80162c4:	e7f9      	b.n	80162ba <memset+0x4>
	...

080162c8 <_localeconv_r>:
 80162c8:	4800      	ldr	r0, [pc, #0]	; (80162cc <_localeconv_r+0x4>)
 80162ca:	4770      	bx	lr
 80162cc:	200004bc 	.word	0x200004bc

080162d0 <_close_r>:
 80162d0:	b538      	push	{r3, r4, r5, lr}
 80162d2:	4d06      	ldr	r5, [pc, #24]	; (80162ec <_close_r+0x1c>)
 80162d4:	2300      	movs	r3, #0
 80162d6:	4604      	mov	r4, r0
 80162d8:	4608      	mov	r0, r1
 80162da:	602b      	str	r3, [r5, #0]
 80162dc:	f7ee ff9f 	bl	800521e <_close>
 80162e0:	1c43      	adds	r3, r0, #1
 80162e2:	d102      	bne.n	80162ea <_close_r+0x1a>
 80162e4:	682b      	ldr	r3, [r5, #0]
 80162e6:	b103      	cbz	r3, 80162ea <_close_r+0x1a>
 80162e8:	6023      	str	r3, [r4, #0]
 80162ea:	bd38      	pop	{r3, r4, r5, pc}
 80162ec:	200033b8 	.word	0x200033b8

080162f0 <_lseek_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	4d07      	ldr	r5, [pc, #28]	; (8016310 <_lseek_r+0x20>)
 80162f4:	4604      	mov	r4, r0
 80162f6:	4608      	mov	r0, r1
 80162f8:	4611      	mov	r1, r2
 80162fa:	2200      	movs	r2, #0
 80162fc:	602a      	str	r2, [r5, #0]
 80162fe:	461a      	mov	r2, r3
 8016300:	f7ee ffb4 	bl	800526c <_lseek>
 8016304:	1c43      	adds	r3, r0, #1
 8016306:	d102      	bne.n	801630e <_lseek_r+0x1e>
 8016308:	682b      	ldr	r3, [r5, #0]
 801630a:	b103      	cbz	r3, 801630e <_lseek_r+0x1e>
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	bd38      	pop	{r3, r4, r5, pc}
 8016310:	200033b8 	.word	0x200033b8

08016314 <_read_r>:
 8016314:	b538      	push	{r3, r4, r5, lr}
 8016316:	4d07      	ldr	r5, [pc, #28]	; (8016334 <_read_r+0x20>)
 8016318:	4604      	mov	r4, r0
 801631a:	4608      	mov	r0, r1
 801631c:	4611      	mov	r1, r2
 801631e:	2200      	movs	r2, #0
 8016320:	602a      	str	r2, [r5, #0]
 8016322:	461a      	mov	r2, r3
 8016324:	f7ee ff42 	bl	80051ac <_read>
 8016328:	1c43      	adds	r3, r0, #1
 801632a:	d102      	bne.n	8016332 <_read_r+0x1e>
 801632c:	682b      	ldr	r3, [r5, #0]
 801632e:	b103      	cbz	r3, 8016332 <_read_r+0x1e>
 8016330:	6023      	str	r3, [r4, #0]
 8016332:	bd38      	pop	{r3, r4, r5, pc}
 8016334:	200033b8 	.word	0x200033b8

08016338 <_write_r>:
 8016338:	b538      	push	{r3, r4, r5, lr}
 801633a:	4d07      	ldr	r5, [pc, #28]	; (8016358 <_write_r+0x20>)
 801633c:	4604      	mov	r4, r0
 801633e:	4608      	mov	r0, r1
 8016340:	4611      	mov	r1, r2
 8016342:	2200      	movs	r2, #0
 8016344:	602a      	str	r2, [r5, #0]
 8016346:	461a      	mov	r2, r3
 8016348:	f7ee ff4d 	bl	80051e6 <_write>
 801634c:	1c43      	adds	r3, r0, #1
 801634e:	d102      	bne.n	8016356 <_write_r+0x1e>
 8016350:	682b      	ldr	r3, [r5, #0]
 8016352:	b103      	cbz	r3, 8016356 <_write_r+0x1e>
 8016354:	6023      	str	r3, [r4, #0]
 8016356:	bd38      	pop	{r3, r4, r5, pc}
 8016358:	200033b8 	.word	0x200033b8

0801635c <__errno>:
 801635c:	4b01      	ldr	r3, [pc, #4]	; (8016364 <__errno+0x8>)
 801635e:	6818      	ldr	r0, [r3, #0]
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop
 8016364:	200003c8 	.word	0x200003c8

08016368 <__libc_init_array>:
 8016368:	b570      	push	{r4, r5, r6, lr}
 801636a:	4d0d      	ldr	r5, [pc, #52]	; (80163a0 <__libc_init_array+0x38>)
 801636c:	4c0d      	ldr	r4, [pc, #52]	; (80163a4 <__libc_init_array+0x3c>)
 801636e:	1b64      	subs	r4, r4, r5
 8016370:	10a4      	asrs	r4, r4, #2
 8016372:	2600      	movs	r6, #0
 8016374:	42a6      	cmp	r6, r4
 8016376:	d109      	bne.n	801638c <__libc_init_array+0x24>
 8016378:	4d0b      	ldr	r5, [pc, #44]	; (80163a8 <__libc_init_array+0x40>)
 801637a:	4c0c      	ldr	r4, [pc, #48]	; (80163ac <__libc_init_array+0x44>)
 801637c:	f002 fa1a 	bl	80187b4 <_init>
 8016380:	1b64      	subs	r4, r4, r5
 8016382:	10a4      	asrs	r4, r4, #2
 8016384:	2600      	movs	r6, #0
 8016386:	42a6      	cmp	r6, r4
 8016388:	d105      	bne.n	8016396 <__libc_init_array+0x2e>
 801638a:	bd70      	pop	{r4, r5, r6, pc}
 801638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016390:	4798      	blx	r3
 8016392:	3601      	adds	r6, #1
 8016394:	e7ee      	b.n	8016374 <__libc_init_array+0xc>
 8016396:	f855 3b04 	ldr.w	r3, [r5], #4
 801639a:	4798      	blx	r3
 801639c:	3601      	adds	r6, #1
 801639e:	e7f2      	b.n	8016386 <__libc_init_array+0x1e>
 80163a0:	0801b488 	.word	0x0801b488
 80163a4:	0801b488 	.word	0x0801b488
 80163a8:	0801b488 	.word	0x0801b488
 80163ac:	0801b48c 	.word	0x0801b48c

080163b0 <__retarget_lock_init_recursive>:
 80163b0:	4770      	bx	lr

080163b2 <__retarget_lock_acquire_recursive>:
 80163b2:	4770      	bx	lr

080163b4 <__retarget_lock_release_recursive>:
 80163b4:	4770      	bx	lr

080163b6 <memcpy>:
 80163b6:	440a      	add	r2, r1
 80163b8:	4291      	cmp	r1, r2
 80163ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80163be:	d100      	bne.n	80163c2 <memcpy+0xc>
 80163c0:	4770      	bx	lr
 80163c2:	b510      	push	{r4, lr}
 80163c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163cc:	4291      	cmp	r1, r2
 80163ce:	d1f9      	bne.n	80163c4 <memcpy+0xe>
 80163d0:	bd10      	pop	{r4, pc}

080163d2 <quorem>:
 80163d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163d6:	6903      	ldr	r3, [r0, #16]
 80163d8:	690c      	ldr	r4, [r1, #16]
 80163da:	42a3      	cmp	r3, r4
 80163dc:	4607      	mov	r7, r0
 80163de:	db7e      	blt.n	80164de <quorem+0x10c>
 80163e0:	3c01      	subs	r4, #1
 80163e2:	f101 0814 	add.w	r8, r1, #20
 80163e6:	f100 0514 	add.w	r5, r0, #20
 80163ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80163ee:	9301      	str	r3, [sp, #4]
 80163f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80163f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80163f8:	3301      	adds	r3, #1
 80163fa:	429a      	cmp	r2, r3
 80163fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016400:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016404:	fbb2 f6f3 	udiv	r6, r2, r3
 8016408:	d331      	bcc.n	801646e <quorem+0x9c>
 801640a:	f04f 0e00 	mov.w	lr, #0
 801640e:	4640      	mov	r0, r8
 8016410:	46ac      	mov	ip, r5
 8016412:	46f2      	mov	sl, lr
 8016414:	f850 2b04 	ldr.w	r2, [r0], #4
 8016418:	b293      	uxth	r3, r2
 801641a:	fb06 e303 	mla	r3, r6, r3, lr
 801641e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016422:	0c1a      	lsrs	r2, r3, #16
 8016424:	b29b      	uxth	r3, r3
 8016426:	ebaa 0303 	sub.w	r3, sl, r3
 801642a:	f8dc a000 	ldr.w	sl, [ip]
 801642e:	fa13 f38a 	uxtah	r3, r3, sl
 8016432:	fb06 220e 	mla	r2, r6, lr, r2
 8016436:	9300      	str	r3, [sp, #0]
 8016438:	9b00      	ldr	r3, [sp, #0]
 801643a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801643e:	b292      	uxth	r2, r2
 8016440:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016448:	f8bd 3000 	ldrh.w	r3, [sp]
 801644c:	4581      	cmp	r9, r0
 801644e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016452:	f84c 3b04 	str.w	r3, [ip], #4
 8016456:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801645a:	d2db      	bcs.n	8016414 <quorem+0x42>
 801645c:	f855 300b 	ldr.w	r3, [r5, fp]
 8016460:	b92b      	cbnz	r3, 801646e <quorem+0x9c>
 8016462:	9b01      	ldr	r3, [sp, #4]
 8016464:	3b04      	subs	r3, #4
 8016466:	429d      	cmp	r5, r3
 8016468:	461a      	mov	r2, r3
 801646a:	d32c      	bcc.n	80164c6 <quorem+0xf4>
 801646c:	613c      	str	r4, [r7, #16]
 801646e:	4638      	mov	r0, r7
 8016470:	f001 f9a8 	bl	80177c4 <__mcmp>
 8016474:	2800      	cmp	r0, #0
 8016476:	db22      	blt.n	80164be <quorem+0xec>
 8016478:	3601      	adds	r6, #1
 801647a:	4629      	mov	r1, r5
 801647c:	2000      	movs	r0, #0
 801647e:	f858 2b04 	ldr.w	r2, [r8], #4
 8016482:	f8d1 c000 	ldr.w	ip, [r1]
 8016486:	b293      	uxth	r3, r2
 8016488:	1ac3      	subs	r3, r0, r3
 801648a:	0c12      	lsrs	r2, r2, #16
 801648c:	fa13 f38c 	uxtah	r3, r3, ip
 8016490:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016498:	b29b      	uxth	r3, r3
 801649a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801649e:	45c1      	cmp	r9, r8
 80164a0:	f841 3b04 	str.w	r3, [r1], #4
 80164a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80164a8:	d2e9      	bcs.n	801647e <quorem+0xac>
 80164aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80164ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80164b2:	b922      	cbnz	r2, 80164be <quorem+0xec>
 80164b4:	3b04      	subs	r3, #4
 80164b6:	429d      	cmp	r5, r3
 80164b8:	461a      	mov	r2, r3
 80164ba:	d30a      	bcc.n	80164d2 <quorem+0x100>
 80164bc:	613c      	str	r4, [r7, #16]
 80164be:	4630      	mov	r0, r6
 80164c0:	b003      	add	sp, #12
 80164c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c6:	6812      	ldr	r2, [r2, #0]
 80164c8:	3b04      	subs	r3, #4
 80164ca:	2a00      	cmp	r2, #0
 80164cc:	d1ce      	bne.n	801646c <quorem+0x9a>
 80164ce:	3c01      	subs	r4, #1
 80164d0:	e7c9      	b.n	8016466 <quorem+0x94>
 80164d2:	6812      	ldr	r2, [r2, #0]
 80164d4:	3b04      	subs	r3, #4
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	d1f0      	bne.n	80164bc <quorem+0xea>
 80164da:	3c01      	subs	r4, #1
 80164dc:	e7eb      	b.n	80164b6 <quorem+0xe4>
 80164de:	2000      	movs	r0, #0
 80164e0:	e7ee      	b.n	80164c0 <quorem+0xee>
 80164e2:	0000      	movs	r0, r0
 80164e4:	0000      	movs	r0, r0
	...

080164e8 <_dtoa_r>:
 80164e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ec:	ed2d 8b04 	vpush	{d8-d9}
 80164f0:	69c5      	ldr	r5, [r0, #28]
 80164f2:	b093      	sub	sp, #76	; 0x4c
 80164f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80164f8:	ec57 6b10 	vmov	r6, r7, d0
 80164fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016500:	9107      	str	r1, [sp, #28]
 8016502:	4604      	mov	r4, r0
 8016504:	920a      	str	r2, [sp, #40]	; 0x28
 8016506:	930d      	str	r3, [sp, #52]	; 0x34
 8016508:	b975      	cbnz	r5, 8016528 <_dtoa_r+0x40>
 801650a:	2010      	movs	r0, #16
 801650c:	f000 fe2a 	bl	8017164 <malloc>
 8016510:	4602      	mov	r2, r0
 8016512:	61e0      	str	r0, [r4, #28]
 8016514:	b920      	cbnz	r0, 8016520 <_dtoa_r+0x38>
 8016516:	4bae      	ldr	r3, [pc, #696]	; (80167d0 <_dtoa_r+0x2e8>)
 8016518:	21ef      	movs	r1, #239	; 0xef
 801651a:	48ae      	ldr	r0, [pc, #696]	; (80167d4 <_dtoa_r+0x2ec>)
 801651c:	f001 fc82 	bl	8017e24 <__assert_func>
 8016520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016524:	6005      	str	r5, [r0, #0]
 8016526:	60c5      	str	r5, [r0, #12]
 8016528:	69e3      	ldr	r3, [r4, #28]
 801652a:	6819      	ldr	r1, [r3, #0]
 801652c:	b151      	cbz	r1, 8016544 <_dtoa_r+0x5c>
 801652e:	685a      	ldr	r2, [r3, #4]
 8016530:	604a      	str	r2, [r1, #4]
 8016532:	2301      	movs	r3, #1
 8016534:	4093      	lsls	r3, r2
 8016536:	608b      	str	r3, [r1, #8]
 8016538:	4620      	mov	r0, r4
 801653a:	f000 ff07 	bl	801734c <_Bfree>
 801653e:	69e3      	ldr	r3, [r4, #28]
 8016540:	2200      	movs	r2, #0
 8016542:	601a      	str	r2, [r3, #0]
 8016544:	1e3b      	subs	r3, r7, #0
 8016546:	bfbb      	ittet	lt
 8016548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801654c:	9303      	strlt	r3, [sp, #12]
 801654e:	2300      	movge	r3, #0
 8016550:	2201      	movlt	r2, #1
 8016552:	bfac      	ite	ge
 8016554:	f8c8 3000 	strge.w	r3, [r8]
 8016558:	f8c8 2000 	strlt.w	r2, [r8]
 801655c:	4b9e      	ldr	r3, [pc, #632]	; (80167d8 <_dtoa_r+0x2f0>)
 801655e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016562:	ea33 0308 	bics.w	r3, r3, r8
 8016566:	d11b      	bne.n	80165a0 <_dtoa_r+0xb8>
 8016568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801656a:	f242 730f 	movw	r3, #9999	; 0x270f
 801656e:	6013      	str	r3, [r2, #0]
 8016570:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016574:	4333      	orrs	r3, r6
 8016576:	f000 8593 	beq.w	80170a0 <_dtoa_r+0xbb8>
 801657a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801657c:	b963      	cbnz	r3, 8016598 <_dtoa_r+0xb0>
 801657e:	4b97      	ldr	r3, [pc, #604]	; (80167dc <_dtoa_r+0x2f4>)
 8016580:	e027      	b.n	80165d2 <_dtoa_r+0xea>
 8016582:	4b97      	ldr	r3, [pc, #604]	; (80167e0 <_dtoa_r+0x2f8>)
 8016584:	9300      	str	r3, [sp, #0]
 8016586:	3308      	adds	r3, #8
 8016588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801658a:	6013      	str	r3, [r2, #0]
 801658c:	9800      	ldr	r0, [sp, #0]
 801658e:	b013      	add	sp, #76	; 0x4c
 8016590:	ecbd 8b04 	vpop	{d8-d9}
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016598:	4b90      	ldr	r3, [pc, #576]	; (80167dc <_dtoa_r+0x2f4>)
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	3303      	adds	r3, #3
 801659e:	e7f3      	b.n	8016588 <_dtoa_r+0xa0>
 80165a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80165a4:	2200      	movs	r2, #0
 80165a6:	ec51 0b17 	vmov	r0, r1, d7
 80165aa:	eeb0 8a47 	vmov.f32	s16, s14
 80165ae:	eef0 8a67 	vmov.f32	s17, s15
 80165b2:	2300      	movs	r3, #0
 80165b4:	f7ea fab0 	bl	8000b18 <__aeabi_dcmpeq>
 80165b8:	4681      	mov	r9, r0
 80165ba:	b160      	cbz	r0, 80165d6 <_dtoa_r+0xee>
 80165bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165be:	2301      	movs	r3, #1
 80165c0:	6013      	str	r3, [r2, #0]
 80165c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	f000 8568 	beq.w	801709a <_dtoa_r+0xbb2>
 80165ca:	4b86      	ldr	r3, [pc, #536]	; (80167e4 <_dtoa_r+0x2fc>)
 80165cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80165ce:	6013      	str	r3, [r2, #0]
 80165d0:	3b01      	subs	r3, #1
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	e7da      	b.n	801658c <_dtoa_r+0xa4>
 80165d6:	aa10      	add	r2, sp, #64	; 0x40
 80165d8:	a911      	add	r1, sp, #68	; 0x44
 80165da:	4620      	mov	r0, r4
 80165dc:	eeb0 0a48 	vmov.f32	s0, s16
 80165e0:	eef0 0a68 	vmov.f32	s1, s17
 80165e4:	f001 f994 	bl	8017910 <__d2b>
 80165e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80165ec:	4682      	mov	sl, r0
 80165ee:	2d00      	cmp	r5, #0
 80165f0:	d07f      	beq.n	80166f2 <_dtoa_r+0x20a>
 80165f2:	ee18 3a90 	vmov	r3, s17
 80165f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80165fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80165fe:	ec51 0b18 	vmov	r0, r1, d8
 8016602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801660a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801660e:	4619      	mov	r1, r3
 8016610:	2200      	movs	r2, #0
 8016612:	4b75      	ldr	r3, [pc, #468]	; (80167e8 <_dtoa_r+0x300>)
 8016614:	f7e9 fe60 	bl	80002d8 <__aeabi_dsub>
 8016618:	a367      	add	r3, pc, #412	; (adr r3, 80167b8 <_dtoa_r+0x2d0>)
 801661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661e:	f7ea f813 	bl	8000648 <__aeabi_dmul>
 8016622:	a367      	add	r3, pc, #412	; (adr r3, 80167c0 <_dtoa_r+0x2d8>)
 8016624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016628:	f7e9 fe58 	bl	80002dc <__adddf3>
 801662c:	4606      	mov	r6, r0
 801662e:	4628      	mov	r0, r5
 8016630:	460f      	mov	r7, r1
 8016632:	f7e9 ff9f 	bl	8000574 <__aeabi_i2d>
 8016636:	a364      	add	r3, pc, #400	; (adr r3, 80167c8 <_dtoa_r+0x2e0>)
 8016638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663c:	f7ea f804 	bl	8000648 <__aeabi_dmul>
 8016640:	4602      	mov	r2, r0
 8016642:	460b      	mov	r3, r1
 8016644:	4630      	mov	r0, r6
 8016646:	4639      	mov	r1, r7
 8016648:	f7e9 fe48 	bl	80002dc <__adddf3>
 801664c:	4606      	mov	r6, r0
 801664e:	460f      	mov	r7, r1
 8016650:	f7ea faaa 	bl	8000ba8 <__aeabi_d2iz>
 8016654:	2200      	movs	r2, #0
 8016656:	4683      	mov	fp, r0
 8016658:	2300      	movs	r3, #0
 801665a:	4630      	mov	r0, r6
 801665c:	4639      	mov	r1, r7
 801665e:	f7ea fa65 	bl	8000b2c <__aeabi_dcmplt>
 8016662:	b148      	cbz	r0, 8016678 <_dtoa_r+0x190>
 8016664:	4658      	mov	r0, fp
 8016666:	f7e9 ff85 	bl	8000574 <__aeabi_i2d>
 801666a:	4632      	mov	r2, r6
 801666c:	463b      	mov	r3, r7
 801666e:	f7ea fa53 	bl	8000b18 <__aeabi_dcmpeq>
 8016672:	b908      	cbnz	r0, 8016678 <_dtoa_r+0x190>
 8016674:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016678:	f1bb 0f16 	cmp.w	fp, #22
 801667c:	d857      	bhi.n	801672e <_dtoa_r+0x246>
 801667e:	4b5b      	ldr	r3, [pc, #364]	; (80167ec <_dtoa_r+0x304>)
 8016680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016688:	ec51 0b18 	vmov	r0, r1, d8
 801668c:	f7ea fa4e 	bl	8000b2c <__aeabi_dcmplt>
 8016690:	2800      	cmp	r0, #0
 8016692:	d04e      	beq.n	8016732 <_dtoa_r+0x24a>
 8016694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016698:	2300      	movs	r3, #0
 801669a:	930c      	str	r3, [sp, #48]	; 0x30
 801669c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801669e:	1b5b      	subs	r3, r3, r5
 80166a0:	1e5a      	subs	r2, r3, #1
 80166a2:	bf45      	ittet	mi
 80166a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80166a8:	9305      	strmi	r3, [sp, #20]
 80166aa:	2300      	movpl	r3, #0
 80166ac:	2300      	movmi	r3, #0
 80166ae:	9206      	str	r2, [sp, #24]
 80166b0:	bf54      	ite	pl
 80166b2:	9305      	strpl	r3, [sp, #20]
 80166b4:	9306      	strmi	r3, [sp, #24]
 80166b6:	f1bb 0f00 	cmp.w	fp, #0
 80166ba:	db3c      	blt.n	8016736 <_dtoa_r+0x24e>
 80166bc:	9b06      	ldr	r3, [sp, #24]
 80166be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80166c2:	445b      	add	r3, fp
 80166c4:	9306      	str	r3, [sp, #24]
 80166c6:	2300      	movs	r3, #0
 80166c8:	9308      	str	r3, [sp, #32]
 80166ca:	9b07      	ldr	r3, [sp, #28]
 80166cc:	2b09      	cmp	r3, #9
 80166ce:	d868      	bhi.n	80167a2 <_dtoa_r+0x2ba>
 80166d0:	2b05      	cmp	r3, #5
 80166d2:	bfc4      	itt	gt
 80166d4:	3b04      	subgt	r3, #4
 80166d6:	9307      	strgt	r3, [sp, #28]
 80166d8:	9b07      	ldr	r3, [sp, #28]
 80166da:	f1a3 0302 	sub.w	r3, r3, #2
 80166de:	bfcc      	ite	gt
 80166e0:	2500      	movgt	r5, #0
 80166e2:	2501      	movle	r5, #1
 80166e4:	2b03      	cmp	r3, #3
 80166e6:	f200 8085 	bhi.w	80167f4 <_dtoa_r+0x30c>
 80166ea:	e8df f003 	tbb	[pc, r3]
 80166ee:	3b2e      	.short	0x3b2e
 80166f0:	5839      	.short	0x5839
 80166f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80166f6:	441d      	add	r5, r3
 80166f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80166fc:	2b20      	cmp	r3, #32
 80166fe:	bfc1      	itttt	gt
 8016700:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016704:	fa08 f803 	lslgt.w	r8, r8, r3
 8016708:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801670c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016710:	bfd6      	itet	le
 8016712:	f1c3 0320 	rsble	r3, r3, #32
 8016716:	ea48 0003 	orrgt.w	r0, r8, r3
 801671a:	fa06 f003 	lslle.w	r0, r6, r3
 801671e:	f7e9 ff19 	bl	8000554 <__aeabi_ui2d>
 8016722:	2201      	movs	r2, #1
 8016724:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016728:	3d01      	subs	r5, #1
 801672a:	920e      	str	r2, [sp, #56]	; 0x38
 801672c:	e76f      	b.n	801660e <_dtoa_r+0x126>
 801672e:	2301      	movs	r3, #1
 8016730:	e7b3      	b.n	801669a <_dtoa_r+0x1b2>
 8016732:	900c      	str	r0, [sp, #48]	; 0x30
 8016734:	e7b2      	b.n	801669c <_dtoa_r+0x1b4>
 8016736:	9b05      	ldr	r3, [sp, #20]
 8016738:	eba3 030b 	sub.w	r3, r3, fp
 801673c:	9305      	str	r3, [sp, #20]
 801673e:	f1cb 0300 	rsb	r3, fp, #0
 8016742:	9308      	str	r3, [sp, #32]
 8016744:	2300      	movs	r3, #0
 8016746:	930b      	str	r3, [sp, #44]	; 0x2c
 8016748:	e7bf      	b.n	80166ca <_dtoa_r+0x1e2>
 801674a:	2300      	movs	r3, #0
 801674c:	9309      	str	r3, [sp, #36]	; 0x24
 801674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016750:	2b00      	cmp	r3, #0
 8016752:	dc52      	bgt.n	80167fa <_dtoa_r+0x312>
 8016754:	2301      	movs	r3, #1
 8016756:	9301      	str	r3, [sp, #4]
 8016758:	9304      	str	r3, [sp, #16]
 801675a:	461a      	mov	r2, r3
 801675c:	920a      	str	r2, [sp, #40]	; 0x28
 801675e:	e00b      	b.n	8016778 <_dtoa_r+0x290>
 8016760:	2301      	movs	r3, #1
 8016762:	e7f3      	b.n	801674c <_dtoa_r+0x264>
 8016764:	2300      	movs	r3, #0
 8016766:	9309      	str	r3, [sp, #36]	; 0x24
 8016768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801676a:	445b      	add	r3, fp
 801676c:	9301      	str	r3, [sp, #4]
 801676e:	3301      	adds	r3, #1
 8016770:	2b01      	cmp	r3, #1
 8016772:	9304      	str	r3, [sp, #16]
 8016774:	bfb8      	it	lt
 8016776:	2301      	movlt	r3, #1
 8016778:	69e0      	ldr	r0, [r4, #28]
 801677a:	2100      	movs	r1, #0
 801677c:	2204      	movs	r2, #4
 801677e:	f102 0614 	add.w	r6, r2, #20
 8016782:	429e      	cmp	r6, r3
 8016784:	d93d      	bls.n	8016802 <_dtoa_r+0x31a>
 8016786:	6041      	str	r1, [r0, #4]
 8016788:	4620      	mov	r0, r4
 801678a:	f000 fd9f 	bl	80172cc <_Balloc>
 801678e:	9000      	str	r0, [sp, #0]
 8016790:	2800      	cmp	r0, #0
 8016792:	d139      	bne.n	8016808 <_dtoa_r+0x320>
 8016794:	4b16      	ldr	r3, [pc, #88]	; (80167f0 <_dtoa_r+0x308>)
 8016796:	4602      	mov	r2, r0
 8016798:	f240 11af 	movw	r1, #431	; 0x1af
 801679c:	e6bd      	b.n	801651a <_dtoa_r+0x32>
 801679e:	2301      	movs	r3, #1
 80167a0:	e7e1      	b.n	8016766 <_dtoa_r+0x27e>
 80167a2:	2501      	movs	r5, #1
 80167a4:	2300      	movs	r3, #0
 80167a6:	9307      	str	r3, [sp, #28]
 80167a8:	9509      	str	r5, [sp, #36]	; 0x24
 80167aa:	f04f 33ff 	mov.w	r3, #4294967295
 80167ae:	9301      	str	r3, [sp, #4]
 80167b0:	9304      	str	r3, [sp, #16]
 80167b2:	2200      	movs	r2, #0
 80167b4:	2312      	movs	r3, #18
 80167b6:	e7d1      	b.n	801675c <_dtoa_r+0x274>
 80167b8:	636f4361 	.word	0x636f4361
 80167bc:	3fd287a7 	.word	0x3fd287a7
 80167c0:	8b60c8b3 	.word	0x8b60c8b3
 80167c4:	3fc68a28 	.word	0x3fc68a28
 80167c8:	509f79fb 	.word	0x509f79fb
 80167cc:	3fd34413 	.word	0x3fd34413
 80167d0:	0801b139 	.word	0x0801b139
 80167d4:	0801b150 	.word	0x0801b150
 80167d8:	7ff00000 	.word	0x7ff00000
 80167dc:	0801b135 	.word	0x0801b135
 80167e0:	0801b12c 	.word	0x0801b12c
 80167e4:	0801b109 	.word	0x0801b109
 80167e8:	3ff80000 	.word	0x3ff80000
 80167ec:	0801b240 	.word	0x0801b240
 80167f0:	0801b1a8 	.word	0x0801b1a8
 80167f4:	2301      	movs	r3, #1
 80167f6:	9309      	str	r3, [sp, #36]	; 0x24
 80167f8:	e7d7      	b.n	80167aa <_dtoa_r+0x2c2>
 80167fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167fc:	9301      	str	r3, [sp, #4]
 80167fe:	9304      	str	r3, [sp, #16]
 8016800:	e7ba      	b.n	8016778 <_dtoa_r+0x290>
 8016802:	3101      	adds	r1, #1
 8016804:	0052      	lsls	r2, r2, #1
 8016806:	e7ba      	b.n	801677e <_dtoa_r+0x296>
 8016808:	69e3      	ldr	r3, [r4, #28]
 801680a:	9a00      	ldr	r2, [sp, #0]
 801680c:	601a      	str	r2, [r3, #0]
 801680e:	9b04      	ldr	r3, [sp, #16]
 8016810:	2b0e      	cmp	r3, #14
 8016812:	f200 80a8 	bhi.w	8016966 <_dtoa_r+0x47e>
 8016816:	2d00      	cmp	r5, #0
 8016818:	f000 80a5 	beq.w	8016966 <_dtoa_r+0x47e>
 801681c:	f1bb 0f00 	cmp.w	fp, #0
 8016820:	dd38      	ble.n	8016894 <_dtoa_r+0x3ac>
 8016822:	4bc0      	ldr	r3, [pc, #768]	; (8016b24 <_dtoa_r+0x63c>)
 8016824:	f00b 020f 	and.w	r2, fp, #15
 8016828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801682c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016830:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016834:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016838:	d019      	beq.n	801686e <_dtoa_r+0x386>
 801683a:	4bbb      	ldr	r3, [pc, #748]	; (8016b28 <_dtoa_r+0x640>)
 801683c:	ec51 0b18 	vmov	r0, r1, d8
 8016840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016844:	f7ea f82a 	bl	800089c <__aeabi_ddiv>
 8016848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801684c:	f008 080f 	and.w	r8, r8, #15
 8016850:	2503      	movs	r5, #3
 8016852:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016b28 <_dtoa_r+0x640>
 8016856:	f1b8 0f00 	cmp.w	r8, #0
 801685a:	d10a      	bne.n	8016872 <_dtoa_r+0x38a>
 801685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016860:	4632      	mov	r2, r6
 8016862:	463b      	mov	r3, r7
 8016864:	f7ea f81a 	bl	800089c <__aeabi_ddiv>
 8016868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801686c:	e02b      	b.n	80168c6 <_dtoa_r+0x3de>
 801686e:	2502      	movs	r5, #2
 8016870:	e7ef      	b.n	8016852 <_dtoa_r+0x36a>
 8016872:	f018 0f01 	tst.w	r8, #1
 8016876:	d008      	beq.n	801688a <_dtoa_r+0x3a2>
 8016878:	4630      	mov	r0, r6
 801687a:	4639      	mov	r1, r7
 801687c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016880:	f7e9 fee2 	bl	8000648 <__aeabi_dmul>
 8016884:	3501      	adds	r5, #1
 8016886:	4606      	mov	r6, r0
 8016888:	460f      	mov	r7, r1
 801688a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801688e:	f109 0908 	add.w	r9, r9, #8
 8016892:	e7e0      	b.n	8016856 <_dtoa_r+0x36e>
 8016894:	f000 809f 	beq.w	80169d6 <_dtoa_r+0x4ee>
 8016898:	f1cb 0600 	rsb	r6, fp, #0
 801689c:	4ba1      	ldr	r3, [pc, #644]	; (8016b24 <_dtoa_r+0x63c>)
 801689e:	4fa2      	ldr	r7, [pc, #648]	; (8016b28 <_dtoa_r+0x640>)
 80168a0:	f006 020f 	and.w	r2, r6, #15
 80168a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80168a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ac:	ec51 0b18 	vmov	r0, r1, d8
 80168b0:	f7e9 feca 	bl	8000648 <__aeabi_dmul>
 80168b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168b8:	1136      	asrs	r6, r6, #4
 80168ba:	2300      	movs	r3, #0
 80168bc:	2502      	movs	r5, #2
 80168be:	2e00      	cmp	r6, #0
 80168c0:	d17e      	bne.n	80169c0 <_dtoa_r+0x4d8>
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d1d0      	bne.n	8016868 <_dtoa_r+0x380>
 80168c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	f000 8084 	beq.w	80169da <_dtoa_r+0x4f2>
 80168d2:	4b96      	ldr	r3, [pc, #600]	; (8016b2c <_dtoa_r+0x644>)
 80168d4:	2200      	movs	r2, #0
 80168d6:	4640      	mov	r0, r8
 80168d8:	4649      	mov	r1, r9
 80168da:	f7ea f927 	bl	8000b2c <__aeabi_dcmplt>
 80168de:	2800      	cmp	r0, #0
 80168e0:	d07b      	beq.n	80169da <_dtoa_r+0x4f2>
 80168e2:	9b04      	ldr	r3, [sp, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d078      	beq.n	80169da <_dtoa_r+0x4f2>
 80168e8:	9b01      	ldr	r3, [sp, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	dd39      	ble.n	8016962 <_dtoa_r+0x47a>
 80168ee:	4b90      	ldr	r3, [pc, #576]	; (8016b30 <_dtoa_r+0x648>)
 80168f0:	2200      	movs	r2, #0
 80168f2:	4640      	mov	r0, r8
 80168f4:	4649      	mov	r1, r9
 80168f6:	f7e9 fea7 	bl	8000648 <__aeabi_dmul>
 80168fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168fe:	9e01      	ldr	r6, [sp, #4]
 8016900:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016904:	3501      	adds	r5, #1
 8016906:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801690a:	4628      	mov	r0, r5
 801690c:	f7e9 fe32 	bl	8000574 <__aeabi_i2d>
 8016910:	4642      	mov	r2, r8
 8016912:	464b      	mov	r3, r9
 8016914:	f7e9 fe98 	bl	8000648 <__aeabi_dmul>
 8016918:	4b86      	ldr	r3, [pc, #536]	; (8016b34 <_dtoa_r+0x64c>)
 801691a:	2200      	movs	r2, #0
 801691c:	f7e9 fcde 	bl	80002dc <__adddf3>
 8016920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016928:	9303      	str	r3, [sp, #12]
 801692a:	2e00      	cmp	r6, #0
 801692c:	d158      	bne.n	80169e0 <_dtoa_r+0x4f8>
 801692e:	4b82      	ldr	r3, [pc, #520]	; (8016b38 <_dtoa_r+0x650>)
 8016930:	2200      	movs	r2, #0
 8016932:	4640      	mov	r0, r8
 8016934:	4649      	mov	r1, r9
 8016936:	f7e9 fccf 	bl	80002d8 <__aeabi_dsub>
 801693a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801693e:	4680      	mov	r8, r0
 8016940:	4689      	mov	r9, r1
 8016942:	f7ea f911 	bl	8000b68 <__aeabi_dcmpgt>
 8016946:	2800      	cmp	r0, #0
 8016948:	f040 8296 	bne.w	8016e78 <_dtoa_r+0x990>
 801694c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016950:	4640      	mov	r0, r8
 8016952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016956:	4649      	mov	r1, r9
 8016958:	f7ea f8e8 	bl	8000b2c <__aeabi_dcmplt>
 801695c:	2800      	cmp	r0, #0
 801695e:	f040 8289 	bne.w	8016e74 <_dtoa_r+0x98c>
 8016962:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016968:	2b00      	cmp	r3, #0
 801696a:	f2c0 814e 	blt.w	8016c0a <_dtoa_r+0x722>
 801696e:	f1bb 0f0e 	cmp.w	fp, #14
 8016972:	f300 814a 	bgt.w	8016c0a <_dtoa_r+0x722>
 8016976:	4b6b      	ldr	r3, [pc, #428]	; (8016b24 <_dtoa_r+0x63c>)
 8016978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801697c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016982:	2b00      	cmp	r3, #0
 8016984:	f280 80dc 	bge.w	8016b40 <_dtoa_r+0x658>
 8016988:	9b04      	ldr	r3, [sp, #16]
 801698a:	2b00      	cmp	r3, #0
 801698c:	f300 80d8 	bgt.w	8016b40 <_dtoa_r+0x658>
 8016990:	f040 826f 	bne.w	8016e72 <_dtoa_r+0x98a>
 8016994:	4b68      	ldr	r3, [pc, #416]	; (8016b38 <_dtoa_r+0x650>)
 8016996:	2200      	movs	r2, #0
 8016998:	4640      	mov	r0, r8
 801699a:	4649      	mov	r1, r9
 801699c:	f7e9 fe54 	bl	8000648 <__aeabi_dmul>
 80169a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80169a4:	f7ea f8d6 	bl	8000b54 <__aeabi_dcmpge>
 80169a8:	9e04      	ldr	r6, [sp, #16]
 80169aa:	4637      	mov	r7, r6
 80169ac:	2800      	cmp	r0, #0
 80169ae:	f040 8245 	bne.w	8016e3c <_dtoa_r+0x954>
 80169b2:	9d00      	ldr	r5, [sp, #0]
 80169b4:	2331      	movs	r3, #49	; 0x31
 80169b6:	f805 3b01 	strb.w	r3, [r5], #1
 80169ba:	f10b 0b01 	add.w	fp, fp, #1
 80169be:	e241      	b.n	8016e44 <_dtoa_r+0x95c>
 80169c0:	07f2      	lsls	r2, r6, #31
 80169c2:	d505      	bpl.n	80169d0 <_dtoa_r+0x4e8>
 80169c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169c8:	f7e9 fe3e 	bl	8000648 <__aeabi_dmul>
 80169cc:	3501      	adds	r5, #1
 80169ce:	2301      	movs	r3, #1
 80169d0:	1076      	asrs	r6, r6, #1
 80169d2:	3708      	adds	r7, #8
 80169d4:	e773      	b.n	80168be <_dtoa_r+0x3d6>
 80169d6:	2502      	movs	r5, #2
 80169d8:	e775      	b.n	80168c6 <_dtoa_r+0x3de>
 80169da:	9e04      	ldr	r6, [sp, #16]
 80169dc:	465f      	mov	r7, fp
 80169de:	e792      	b.n	8016906 <_dtoa_r+0x41e>
 80169e0:	9900      	ldr	r1, [sp, #0]
 80169e2:	4b50      	ldr	r3, [pc, #320]	; (8016b24 <_dtoa_r+0x63c>)
 80169e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80169e8:	4431      	add	r1, r6
 80169ea:	9102      	str	r1, [sp, #8]
 80169ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80169ee:	eeb0 9a47 	vmov.f32	s18, s14
 80169f2:	eef0 9a67 	vmov.f32	s19, s15
 80169f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80169fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80169fe:	2900      	cmp	r1, #0
 8016a00:	d044      	beq.n	8016a8c <_dtoa_r+0x5a4>
 8016a02:	494e      	ldr	r1, [pc, #312]	; (8016b3c <_dtoa_r+0x654>)
 8016a04:	2000      	movs	r0, #0
 8016a06:	f7e9 ff49 	bl	800089c <__aeabi_ddiv>
 8016a0a:	ec53 2b19 	vmov	r2, r3, d9
 8016a0e:	f7e9 fc63 	bl	80002d8 <__aeabi_dsub>
 8016a12:	9d00      	ldr	r5, [sp, #0]
 8016a14:	ec41 0b19 	vmov	d9, r0, r1
 8016a18:	4649      	mov	r1, r9
 8016a1a:	4640      	mov	r0, r8
 8016a1c:	f7ea f8c4 	bl	8000ba8 <__aeabi_d2iz>
 8016a20:	4606      	mov	r6, r0
 8016a22:	f7e9 fda7 	bl	8000574 <__aeabi_i2d>
 8016a26:	4602      	mov	r2, r0
 8016a28:	460b      	mov	r3, r1
 8016a2a:	4640      	mov	r0, r8
 8016a2c:	4649      	mov	r1, r9
 8016a2e:	f7e9 fc53 	bl	80002d8 <__aeabi_dsub>
 8016a32:	3630      	adds	r6, #48	; 0x30
 8016a34:	f805 6b01 	strb.w	r6, [r5], #1
 8016a38:	ec53 2b19 	vmov	r2, r3, d9
 8016a3c:	4680      	mov	r8, r0
 8016a3e:	4689      	mov	r9, r1
 8016a40:	f7ea f874 	bl	8000b2c <__aeabi_dcmplt>
 8016a44:	2800      	cmp	r0, #0
 8016a46:	d164      	bne.n	8016b12 <_dtoa_r+0x62a>
 8016a48:	4642      	mov	r2, r8
 8016a4a:	464b      	mov	r3, r9
 8016a4c:	4937      	ldr	r1, [pc, #220]	; (8016b2c <_dtoa_r+0x644>)
 8016a4e:	2000      	movs	r0, #0
 8016a50:	f7e9 fc42 	bl	80002d8 <__aeabi_dsub>
 8016a54:	ec53 2b19 	vmov	r2, r3, d9
 8016a58:	f7ea f868 	bl	8000b2c <__aeabi_dcmplt>
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	f040 80b6 	bne.w	8016bce <_dtoa_r+0x6e6>
 8016a62:	9b02      	ldr	r3, [sp, #8]
 8016a64:	429d      	cmp	r5, r3
 8016a66:	f43f af7c 	beq.w	8016962 <_dtoa_r+0x47a>
 8016a6a:	4b31      	ldr	r3, [pc, #196]	; (8016b30 <_dtoa_r+0x648>)
 8016a6c:	ec51 0b19 	vmov	r0, r1, d9
 8016a70:	2200      	movs	r2, #0
 8016a72:	f7e9 fde9 	bl	8000648 <__aeabi_dmul>
 8016a76:	4b2e      	ldr	r3, [pc, #184]	; (8016b30 <_dtoa_r+0x648>)
 8016a78:	ec41 0b19 	vmov	d9, r0, r1
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	4640      	mov	r0, r8
 8016a80:	4649      	mov	r1, r9
 8016a82:	f7e9 fde1 	bl	8000648 <__aeabi_dmul>
 8016a86:	4680      	mov	r8, r0
 8016a88:	4689      	mov	r9, r1
 8016a8a:	e7c5      	b.n	8016a18 <_dtoa_r+0x530>
 8016a8c:	ec51 0b17 	vmov	r0, r1, d7
 8016a90:	f7e9 fdda 	bl	8000648 <__aeabi_dmul>
 8016a94:	9b02      	ldr	r3, [sp, #8]
 8016a96:	9d00      	ldr	r5, [sp, #0]
 8016a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a9a:	ec41 0b19 	vmov	d9, r0, r1
 8016a9e:	4649      	mov	r1, r9
 8016aa0:	4640      	mov	r0, r8
 8016aa2:	f7ea f881 	bl	8000ba8 <__aeabi_d2iz>
 8016aa6:	4606      	mov	r6, r0
 8016aa8:	f7e9 fd64 	bl	8000574 <__aeabi_i2d>
 8016aac:	3630      	adds	r6, #48	; 0x30
 8016aae:	4602      	mov	r2, r0
 8016ab0:	460b      	mov	r3, r1
 8016ab2:	4640      	mov	r0, r8
 8016ab4:	4649      	mov	r1, r9
 8016ab6:	f7e9 fc0f 	bl	80002d8 <__aeabi_dsub>
 8016aba:	f805 6b01 	strb.w	r6, [r5], #1
 8016abe:	9b02      	ldr	r3, [sp, #8]
 8016ac0:	429d      	cmp	r5, r3
 8016ac2:	4680      	mov	r8, r0
 8016ac4:	4689      	mov	r9, r1
 8016ac6:	f04f 0200 	mov.w	r2, #0
 8016aca:	d124      	bne.n	8016b16 <_dtoa_r+0x62e>
 8016acc:	4b1b      	ldr	r3, [pc, #108]	; (8016b3c <_dtoa_r+0x654>)
 8016ace:	ec51 0b19 	vmov	r0, r1, d9
 8016ad2:	f7e9 fc03 	bl	80002dc <__adddf3>
 8016ad6:	4602      	mov	r2, r0
 8016ad8:	460b      	mov	r3, r1
 8016ada:	4640      	mov	r0, r8
 8016adc:	4649      	mov	r1, r9
 8016ade:	f7ea f843 	bl	8000b68 <__aeabi_dcmpgt>
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	d173      	bne.n	8016bce <_dtoa_r+0x6e6>
 8016ae6:	ec53 2b19 	vmov	r2, r3, d9
 8016aea:	4914      	ldr	r1, [pc, #80]	; (8016b3c <_dtoa_r+0x654>)
 8016aec:	2000      	movs	r0, #0
 8016aee:	f7e9 fbf3 	bl	80002d8 <__aeabi_dsub>
 8016af2:	4602      	mov	r2, r0
 8016af4:	460b      	mov	r3, r1
 8016af6:	4640      	mov	r0, r8
 8016af8:	4649      	mov	r1, r9
 8016afa:	f7ea f817 	bl	8000b2c <__aeabi_dcmplt>
 8016afe:	2800      	cmp	r0, #0
 8016b00:	f43f af2f 	beq.w	8016962 <_dtoa_r+0x47a>
 8016b04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016b06:	1e6b      	subs	r3, r5, #1
 8016b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016b0e:	2b30      	cmp	r3, #48	; 0x30
 8016b10:	d0f8      	beq.n	8016b04 <_dtoa_r+0x61c>
 8016b12:	46bb      	mov	fp, r7
 8016b14:	e04a      	b.n	8016bac <_dtoa_r+0x6c4>
 8016b16:	4b06      	ldr	r3, [pc, #24]	; (8016b30 <_dtoa_r+0x648>)
 8016b18:	f7e9 fd96 	bl	8000648 <__aeabi_dmul>
 8016b1c:	4680      	mov	r8, r0
 8016b1e:	4689      	mov	r9, r1
 8016b20:	e7bd      	b.n	8016a9e <_dtoa_r+0x5b6>
 8016b22:	bf00      	nop
 8016b24:	0801b240 	.word	0x0801b240
 8016b28:	0801b218 	.word	0x0801b218
 8016b2c:	3ff00000 	.word	0x3ff00000
 8016b30:	40240000 	.word	0x40240000
 8016b34:	401c0000 	.word	0x401c0000
 8016b38:	40140000 	.word	0x40140000
 8016b3c:	3fe00000 	.word	0x3fe00000
 8016b40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016b44:	9d00      	ldr	r5, [sp, #0]
 8016b46:	4642      	mov	r2, r8
 8016b48:	464b      	mov	r3, r9
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	4639      	mov	r1, r7
 8016b4e:	f7e9 fea5 	bl	800089c <__aeabi_ddiv>
 8016b52:	f7ea f829 	bl	8000ba8 <__aeabi_d2iz>
 8016b56:	9001      	str	r0, [sp, #4]
 8016b58:	f7e9 fd0c 	bl	8000574 <__aeabi_i2d>
 8016b5c:	4642      	mov	r2, r8
 8016b5e:	464b      	mov	r3, r9
 8016b60:	f7e9 fd72 	bl	8000648 <__aeabi_dmul>
 8016b64:	4602      	mov	r2, r0
 8016b66:	460b      	mov	r3, r1
 8016b68:	4630      	mov	r0, r6
 8016b6a:	4639      	mov	r1, r7
 8016b6c:	f7e9 fbb4 	bl	80002d8 <__aeabi_dsub>
 8016b70:	9e01      	ldr	r6, [sp, #4]
 8016b72:	9f04      	ldr	r7, [sp, #16]
 8016b74:	3630      	adds	r6, #48	; 0x30
 8016b76:	f805 6b01 	strb.w	r6, [r5], #1
 8016b7a:	9e00      	ldr	r6, [sp, #0]
 8016b7c:	1bae      	subs	r6, r5, r6
 8016b7e:	42b7      	cmp	r7, r6
 8016b80:	4602      	mov	r2, r0
 8016b82:	460b      	mov	r3, r1
 8016b84:	d134      	bne.n	8016bf0 <_dtoa_r+0x708>
 8016b86:	f7e9 fba9 	bl	80002dc <__adddf3>
 8016b8a:	4642      	mov	r2, r8
 8016b8c:	464b      	mov	r3, r9
 8016b8e:	4606      	mov	r6, r0
 8016b90:	460f      	mov	r7, r1
 8016b92:	f7e9 ffe9 	bl	8000b68 <__aeabi_dcmpgt>
 8016b96:	b9c8      	cbnz	r0, 8016bcc <_dtoa_r+0x6e4>
 8016b98:	4642      	mov	r2, r8
 8016b9a:	464b      	mov	r3, r9
 8016b9c:	4630      	mov	r0, r6
 8016b9e:	4639      	mov	r1, r7
 8016ba0:	f7e9 ffba 	bl	8000b18 <__aeabi_dcmpeq>
 8016ba4:	b110      	cbz	r0, 8016bac <_dtoa_r+0x6c4>
 8016ba6:	9b01      	ldr	r3, [sp, #4]
 8016ba8:	07db      	lsls	r3, r3, #31
 8016baa:	d40f      	bmi.n	8016bcc <_dtoa_r+0x6e4>
 8016bac:	4651      	mov	r1, sl
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f000 fbcc 	bl	801734c <_Bfree>
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016bb8:	702b      	strb	r3, [r5, #0]
 8016bba:	f10b 0301 	add.w	r3, fp, #1
 8016bbe:	6013      	str	r3, [r2, #0]
 8016bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	f43f ace2 	beq.w	801658c <_dtoa_r+0xa4>
 8016bc8:	601d      	str	r5, [r3, #0]
 8016bca:	e4df      	b.n	801658c <_dtoa_r+0xa4>
 8016bcc:	465f      	mov	r7, fp
 8016bce:	462b      	mov	r3, r5
 8016bd0:	461d      	mov	r5, r3
 8016bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016bd6:	2a39      	cmp	r2, #57	; 0x39
 8016bd8:	d106      	bne.n	8016be8 <_dtoa_r+0x700>
 8016bda:	9a00      	ldr	r2, [sp, #0]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d1f7      	bne.n	8016bd0 <_dtoa_r+0x6e8>
 8016be0:	9900      	ldr	r1, [sp, #0]
 8016be2:	2230      	movs	r2, #48	; 0x30
 8016be4:	3701      	adds	r7, #1
 8016be6:	700a      	strb	r2, [r1, #0]
 8016be8:	781a      	ldrb	r2, [r3, #0]
 8016bea:	3201      	adds	r2, #1
 8016bec:	701a      	strb	r2, [r3, #0]
 8016bee:	e790      	b.n	8016b12 <_dtoa_r+0x62a>
 8016bf0:	4ba3      	ldr	r3, [pc, #652]	; (8016e80 <_dtoa_r+0x998>)
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	f7e9 fd28 	bl	8000648 <__aeabi_dmul>
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	4606      	mov	r6, r0
 8016bfe:	460f      	mov	r7, r1
 8016c00:	f7e9 ff8a 	bl	8000b18 <__aeabi_dcmpeq>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d09e      	beq.n	8016b46 <_dtoa_r+0x65e>
 8016c08:	e7d0      	b.n	8016bac <_dtoa_r+0x6c4>
 8016c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c0c:	2a00      	cmp	r2, #0
 8016c0e:	f000 80ca 	beq.w	8016da6 <_dtoa_r+0x8be>
 8016c12:	9a07      	ldr	r2, [sp, #28]
 8016c14:	2a01      	cmp	r2, #1
 8016c16:	f300 80ad 	bgt.w	8016d74 <_dtoa_r+0x88c>
 8016c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016c1c:	2a00      	cmp	r2, #0
 8016c1e:	f000 80a5 	beq.w	8016d6c <_dtoa_r+0x884>
 8016c22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016c26:	9e08      	ldr	r6, [sp, #32]
 8016c28:	9d05      	ldr	r5, [sp, #20]
 8016c2a:	9a05      	ldr	r2, [sp, #20]
 8016c2c:	441a      	add	r2, r3
 8016c2e:	9205      	str	r2, [sp, #20]
 8016c30:	9a06      	ldr	r2, [sp, #24]
 8016c32:	2101      	movs	r1, #1
 8016c34:	441a      	add	r2, r3
 8016c36:	4620      	mov	r0, r4
 8016c38:	9206      	str	r2, [sp, #24]
 8016c3a:	f000 fc3d 	bl	80174b8 <__i2b>
 8016c3e:	4607      	mov	r7, r0
 8016c40:	b165      	cbz	r5, 8016c5c <_dtoa_r+0x774>
 8016c42:	9b06      	ldr	r3, [sp, #24]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	dd09      	ble.n	8016c5c <_dtoa_r+0x774>
 8016c48:	42ab      	cmp	r3, r5
 8016c4a:	9a05      	ldr	r2, [sp, #20]
 8016c4c:	bfa8      	it	ge
 8016c4e:	462b      	movge	r3, r5
 8016c50:	1ad2      	subs	r2, r2, r3
 8016c52:	9205      	str	r2, [sp, #20]
 8016c54:	9a06      	ldr	r2, [sp, #24]
 8016c56:	1aed      	subs	r5, r5, r3
 8016c58:	1ad3      	subs	r3, r2, r3
 8016c5a:	9306      	str	r3, [sp, #24]
 8016c5c:	9b08      	ldr	r3, [sp, #32]
 8016c5e:	b1f3      	cbz	r3, 8016c9e <_dtoa_r+0x7b6>
 8016c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f000 80a3 	beq.w	8016dae <_dtoa_r+0x8c6>
 8016c68:	2e00      	cmp	r6, #0
 8016c6a:	dd10      	ble.n	8016c8e <_dtoa_r+0x7a6>
 8016c6c:	4639      	mov	r1, r7
 8016c6e:	4632      	mov	r2, r6
 8016c70:	4620      	mov	r0, r4
 8016c72:	f000 fce1 	bl	8017638 <__pow5mult>
 8016c76:	4652      	mov	r2, sl
 8016c78:	4601      	mov	r1, r0
 8016c7a:	4607      	mov	r7, r0
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f000 fc31 	bl	80174e4 <__multiply>
 8016c82:	4651      	mov	r1, sl
 8016c84:	4680      	mov	r8, r0
 8016c86:	4620      	mov	r0, r4
 8016c88:	f000 fb60 	bl	801734c <_Bfree>
 8016c8c:	46c2      	mov	sl, r8
 8016c8e:	9b08      	ldr	r3, [sp, #32]
 8016c90:	1b9a      	subs	r2, r3, r6
 8016c92:	d004      	beq.n	8016c9e <_dtoa_r+0x7b6>
 8016c94:	4651      	mov	r1, sl
 8016c96:	4620      	mov	r0, r4
 8016c98:	f000 fcce 	bl	8017638 <__pow5mult>
 8016c9c:	4682      	mov	sl, r0
 8016c9e:	2101      	movs	r1, #1
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f000 fc09 	bl	80174b8 <__i2b>
 8016ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	4606      	mov	r6, r0
 8016cac:	f340 8081 	ble.w	8016db2 <_dtoa_r+0x8ca>
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	4601      	mov	r1, r0
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	f000 fcbf 	bl	8017638 <__pow5mult>
 8016cba:	9b07      	ldr	r3, [sp, #28]
 8016cbc:	2b01      	cmp	r3, #1
 8016cbe:	4606      	mov	r6, r0
 8016cc0:	dd7a      	ble.n	8016db8 <_dtoa_r+0x8d0>
 8016cc2:	f04f 0800 	mov.w	r8, #0
 8016cc6:	6933      	ldr	r3, [r6, #16]
 8016cc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016ccc:	6918      	ldr	r0, [r3, #16]
 8016cce:	f000 fba5 	bl	801741c <__hi0bits>
 8016cd2:	f1c0 0020 	rsb	r0, r0, #32
 8016cd6:	9b06      	ldr	r3, [sp, #24]
 8016cd8:	4418      	add	r0, r3
 8016cda:	f010 001f 	ands.w	r0, r0, #31
 8016cde:	f000 8094 	beq.w	8016e0a <_dtoa_r+0x922>
 8016ce2:	f1c0 0320 	rsb	r3, r0, #32
 8016ce6:	2b04      	cmp	r3, #4
 8016ce8:	f340 8085 	ble.w	8016df6 <_dtoa_r+0x90e>
 8016cec:	9b05      	ldr	r3, [sp, #20]
 8016cee:	f1c0 001c 	rsb	r0, r0, #28
 8016cf2:	4403      	add	r3, r0
 8016cf4:	9305      	str	r3, [sp, #20]
 8016cf6:	9b06      	ldr	r3, [sp, #24]
 8016cf8:	4403      	add	r3, r0
 8016cfa:	4405      	add	r5, r0
 8016cfc:	9306      	str	r3, [sp, #24]
 8016cfe:	9b05      	ldr	r3, [sp, #20]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	dd05      	ble.n	8016d10 <_dtoa_r+0x828>
 8016d04:	4651      	mov	r1, sl
 8016d06:	461a      	mov	r2, r3
 8016d08:	4620      	mov	r0, r4
 8016d0a:	f000 fcef 	bl	80176ec <__lshift>
 8016d0e:	4682      	mov	sl, r0
 8016d10:	9b06      	ldr	r3, [sp, #24]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	dd05      	ble.n	8016d22 <_dtoa_r+0x83a>
 8016d16:	4631      	mov	r1, r6
 8016d18:	461a      	mov	r2, r3
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f000 fce6 	bl	80176ec <__lshift>
 8016d20:	4606      	mov	r6, r0
 8016d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d072      	beq.n	8016e0e <_dtoa_r+0x926>
 8016d28:	4631      	mov	r1, r6
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	f000 fd4a 	bl	80177c4 <__mcmp>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	da6c      	bge.n	8016e0e <_dtoa_r+0x926>
 8016d34:	2300      	movs	r3, #0
 8016d36:	4651      	mov	r1, sl
 8016d38:	220a      	movs	r2, #10
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	f000 fb28 	bl	8017390 <__multadd>
 8016d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d46:	4682      	mov	sl, r0
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f000 81b0 	beq.w	80170ae <_dtoa_r+0xbc6>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	4639      	mov	r1, r7
 8016d52:	220a      	movs	r2, #10
 8016d54:	4620      	mov	r0, r4
 8016d56:	f000 fb1b 	bl	8017390 <__multadd>
 8016d5a:	9b01      	ldr	r3, [sp, #4]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	4607      	mov	r7, r0
 8016d60:	f300 8096 	bgt.w	8016e90 <_dtoa_r+0x9a8>
 8016d64:	9b07      	ldr	r3, [sp, #28]
 8016d66:	2b02      	cmp	r3, #2
 8016d68:	dc59      	bgt.n	8016e1e <_dtoa_r+0x936>
 8016d6a:	e091      	b.n	8016e90 <_dtoa_r+0x9a8>
 8016d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016d72:	e758      	b.n	8016c26 <_dtoa_r+0x73e>
 8016d74:	9b04      	ldr	r3, [sp, #16]
 8016d76:	1e5e      	subs	r6, r3, #1
 8016d78:	9b08      	ldr	r3, [sp, #32]
 8016d7a:	42b3      	cmp	r3, r6
 8016d7c:	bfbf      	itttt	lt
 8016d7e:	9b08      	ldrlt	r3, [sp, #32]
 8016d80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016d82:	9608      	strlt	r6, [sp, #32]
 8016d84:	1af3      	sublt	r3, r6, r3
 8016d86:	bfb4      	ite	lt
 8016d88:	18d2      	addlt	r2, r2, r3
 8016d8a:	1b9e      	subge	r6, r3, r6
 8016d8c:	9b04      	ldr	r3, [sp, #16]
 8016d8e:	bfbc      	itt	lt
 8016d90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016d92:	2600      	movlt	r6, #0
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	bfb7      	itett	lt
 8016d98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8016d9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016da0:	1a9d      	sublt	r5, r3, r2
 8016da2:	2300      	movlt	r3, #0
 8016da4:	e741      	b.n	8016c2a <_dtoa_r+0x742>
 8016da6:	9e08      	ldr	r6, [sp, #32]
 8016da8:	9d05      	ldr	r5, [sp, #20]
 8016daa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016dac:	e748      	b.n	8016c40 <_dtoa_r+0x758>
 8016dae:	9a08      	ldr	r2, [sp, #32]
 8016db0:	e770      	b.n	8016c94 <_dtoa_r+0x7ac>
 8016db2:	9b07      	ldr	r3, [sp, #28]
 8016db4:	2b01      	cmp	r3, #1
 8016db6:	dc19      	bgt.n	8016dec <_dtoa_r+0x904>
 8016db8:	9b02      	ldr	r3, [sp, #8]
 8016dba:	b9bb      	cbnz	r3, 8016dec <_dtoa_r+0x904>
 8016dbc:	9b03      	ldr	r3, [sp, #12]
 8016dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016dc2:	b99b      	cbnz	r3, 8016dec <_dtoa_r+0x904>
 8016dc4:	9b03      	ldr	r3, [sp, #12]
 8016dc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016dca:	0d1b      	lsrs	r3, r3, #20
 8016dcc:	051b      	lsls	r3, r3, #20
 8016dce:	b183      	cbz	r3, 8016df2 <_dtoa_r+0x90a>
 8016dd0:	9b05      	ldr	r3, [sp, #20]
 8016dd2:	3301      	adds	r3, #1
 8016dd4:	9305      	str	r3, [sp, #20]
 8016dd6:	9b06      	ldr	r3, [sp, #24]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	9306      	str	r3, [sp, #24]
 8016ddc:	f04f 0801 	mov.w	r8, #1
 8016de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f47f af6f 	bne.w	8016cc6 <_dtoa_r+0x7de>
 8016de8:	2001      	movs	r0, #1
 8016dea:	e774      	b.n	8016cd6 <_dtoa_r+0x7ee>
 8016dec:	f04f 0800 	mov.w	r8, #0
 8016df0:	e7f6      	b.n	8016de0 <_dtoa_r+0x8f8>
 8016df2:	4698      	mov	r8, r3
 8016df4:	e7f4      	b.n	8016de0 <_dtoa_r+0x8f8>
 8016df6:	d082      	beq.n	8016cfe <_dtoa_r+0x816>
 8016df8:	9a05      	ldr	r2, [sp, #20]
 8016dfa:	331c      	adds	r3, #28
 8016dfc:	441a      	add	r2, r3
 8016dfe:	9205      	str	r2, [sp, #20]
 8016e00:	9a06      	ldr	r2, [sp, #24]
 8016e02:	441a      	add	r2, r3
 8016e04:	441d      	add	r5, r3
 8016e06:	9206      	str	r2, [sp, #24]
 8016e08:	e779      	b.n	8016cfe <_dtoa_r+0x816>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	e7f4      	b.n	8016df8 <_dtoa_r+0x910>
 8016e0e:	9b04      	ldr	r3, [sp, #16]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	dc37      	bgt.n	8016e84 <_dtoa_r+0x99c>
 8016e14:	9b07      	ldr	r3, [sp, #28]
 8016e16:	2b02      	cmp	r3, #2
 8016e18:	dd34      	ble.n	8016e84 <_dtoa_r+0x99c>
 8016e1a:	9b04      	ldr	r3, [sp, #16]
 8016e1c:	9301      	str	r3, [sp, #4]
 8016e1e:	9b01      	ldr	r3, [sp, #4]
 8016e20:	b963      	cbnz	r3, 8016e3c <_dtoa_r+0x954>
 8016e22:	4631      	mov	r1, r6
 8016e24:	2205      	movs	r2, #5
 8016e26:	4620      	mov	r0, r4
 8016e28:	f000 fab2 	bl	8017390 <__multadd>
 8016e2c:	4601      	mov	r1, r0
 8016e2e:	4606      	mov	r6, r0
 8016e30:	4650      	mov	r0, sl
 8016e32:	f000 fcc7 	bl	80177c4 <__mcmp>
 8016e36:	2800      	cmp	r0, #0
 8016e38:	f73f adbb 	bgt.w	80169b2 <_dtoa_r+0x4ca>
 8016e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e3e:	9d00      	ldr	r5, [sp, #0]
 8016e40:	ea6f 0b03 	mvn.w	fp, r3
 8016e44:	f04f 0800 	mov.w	r8, #0
 8016e48:	4631      	mov	r1, r6
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	f000 fa7e 	bl	801734c <_Bfree>
 8016e50:	2f00      	cmp	r7, #0
 8016e52:	f43f aeab 	beq.w	8016bac <_dtoa_r+0x6c4>
 8016e56:	f1b8 0f00 	cmp.w	r8, #0
 8016e5a:	d005      	beq.n	8016e68 <_dtoa_r+0x980>
 8016e5c:	45b8      	cmp	r8, r7
 8016e5e:	d003      	beq.n	8016e68 <_dtoa_r+0x980>
 8016e60:	4641      	mov	r1, r8
 8016e62:	4620      	mov	r0, r4
 8016e64:	f000 fa72 	bl	801734c <_Bfree>
 8016e68:	4639      	mov	r1, r7
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	f000 fa6e 	bl	801734c <_Bfree>
 8016e70:	e69c      	b.n	8016bac <_dtoa_r+0x6c4>
 8016e72:	2600      	movs	r6, #0
 8016e74:	4637      	mov	r7, r6
 8016e76:	e7e1      	b.n	8016e3c <_dtoa_r+0x954>
 8016e78:	46bb      	mov	fp, r7
 8016e7a:	4637      	mov	r7, r6
 8016e7c:	e599      	b.n	80169b2 <_dtoa_r+0x4ca>
 8016e7e:	bf00      	nop
 8016e80:	40240000 	.word	0x40240000
 8016e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	f000 80c8 	beq.w	801701c <_dtoa_r+0xb34>
 8016e8c:	9b04      	ldr	r3, [sp, #16]
 8016e8e:	9301      	str	r3, [sp, #4]
 8016e90:	2d00      	cmp	r5, #0
 8016e92:	dd05      	ble.n	8016ea0 <_dtoa_r+0x9b8>
 8016e94:	4639      	mov	r1, r7
 8016e96:	462a      	mov	r2, r5
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f000 fc27 	bl	80176ec <__lshift>
 8016e9e:	4607      	mov	r7, r0
 8016ea0:	f1b8 0f00 	cmp.w	r8, #0
 8016ea4:	d05b      	beq.n	8016f5e <_dtoa_r+0xa76>
 8016ea6:	6879      	ldr	r1, [r7, #4]
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f000 fa0f 	bl	80172cc <_Balloc>
 8016eae:	4605      	mov	r5, r0
 8016eb0:	b928      	cbnz	r0, 8016ebe <_dtoa_r+0x9d6>
 8016eb2:	4b83      	ldr	r3, [pc, #524]	; (80170c0 <_dtoa_r+0xbd8>)
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8016eba:	f7ff bb2e 	b.w	801651a <_dtoa_r+0x32>
 8016ebe:	693a      	ldr	r2, [r7, #16]
 8016ec0:	3202      	adds	r2, #2
 8016ec2:	0092      	lsls	r2, r2, #2
 8016ec4:	f107 010c 	add.w	r1, r7, #12
 8016ec8:	300c      	adds	r0, #12
 8016eca:	f7ff fa74 	bl	80163b6 <memcpy>
 8016ece:	2201      	movs	r2, #1
 8016ed0:	4629      	mov	r1, r5
 8016ed2:	4620      	mov	r0, r4
 8016ed4:	f000 fc0a 	bl	80176ec <__lshift>
 8016ed8:	9b00      	ldr	r3, [sp, #0]
 8016eda:	3301      	adds	r3, #1
 8016edc:	9304      	str	r3, [sp, #16]
 8016ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	9308      	str	r3, [sp, #32]
 8016ee6:	9b02      	ldr	r3, [sp, #8]
 8016ee8:	f003 0301 	and.w	r3, r3, #1
 8016eec:	46b8      	mov	r8, r7
 8016eee:	9306      	str	r3, [sp, #24]
 8016ef0:	4607      	mov	r7, r0
 8016ef2:	9b04      	ldr	r3, [sp, #16]
 8016ef4:	4631      	mov	r1, r6
 8016ef6:	3b01      	subs	r3, #1
 8016ef8:	4650      	mov	r0, sl
 8016efa:	9301      	str	r3, [sp, #4]
 8016efc:	f7ff fa69 	bl	80163d2 <quorem>
 8016f00:	4641      	mov	r1, r8
 8016f02:	9002      	str	r0, [sp, #8]
 8016f04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016f08:	4650      	mov	r0, sl
 8016f0a:	f000 fc5b 	bl	80177c4 <__mcmp>
 8016f0e:	463a      	mov	r2, r7
 8016f10:	9005      	str	r0, [sp, #20]
 8016f12:	4631      	mov	r1, r6
 8016f14:	4620      	mov	r0, r4
 8016f16:	f000 fc71 	bl	80177fc <__mdiff>
 8016f1a:	68c2      	ldr	r2, [r0, #12]
 8016f1c:	4605      	mov	r5, r0
 8016f1e:	bb02      	cbnz	r2, 8016f62 <_dtoa_r+0xa7a>
 8016f20:	4601      	mov	r1, r0
 8016f22:	4650      	mov	r0, sl
 8016f24:	f000 fc4e 	bl	80177c4 <__mcmp>
 8016f28:	4602      	mov	r2, r0
 8016f2a:	4629      	mov	r1, r5
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8016f30:	f000 fa0c 	bl	801734c <_Bfree>
 8016f34:	9b07      	ldr	r3, [sp, #28]
 8016f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f38:	9d04      	ldr	r5, [sp, #16]
 8016f3a:	ea43 0102 	orr.w	r1, r3, r2
 8016f3e:	9b06      	ldr	r3, [sp, #24]
 8016f40:	4319      	orrs	r1, r3
 8016f42:	d110      	bne.n	8016f66 <_dtoa_r+0xa7e>
 8016f44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016f48:	d029      	beq.n	8016f9e <_dtoa_r+0xab6>
 8016f4a:	9b05      	ldr	r3, [sp, #20]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	dd02      	ble.n	8016f56 <_dtoa_r+0xa6e>
 8016f50:	9b02      	ldr	r3, [sp, #8]
 8016f52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016f56:	9b01      	ldr	r3, [sp, #4]
 8016f58:	f883 9000 	strb.w	r9, [r3]
 8016f5c:	e774      	b.n	8016e48 <_dtoa_r+0x960>
 8016f5e:	4638      	mov	r0, r7
 8016f60:	e7ba      	b.n	8016ed8 <_dtoa_r+0x9f0>
 8016f62:	2201      	movs	r2, #1
 8016f64:	e7e1      	b.n	8016f2a <_dtoa_r+0xa42>
 8016f66:	9b05      	ldr	r3, [sp, #20]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	db04      	blt.n	8016f76 <_dtoa_r+0xa8e>
 8016f6c:	9907      	ldr	r1, [sp, #28]
 8016f6e:	430b      	orrs	r3, r1
 8016f70:	9906      	ldr	r1, [sp, #24]
 8016f72:	430b      	orrs	r3, r1
 8016f74:	d120      	bne.n	8016fb8 <_dtoa_r+0xad0>
 8016f76:	2a00      	cmp	r2, #0
 8016f78:	dded      	ble.n	8016f56 <_dtoa_r+0xa6e>
 8016f7a:	4651      	mov	r1, sl
 8016f7c:	2201      	movs	r2, #1
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f000 fbb4 	bl	80176ec <__lshift>
 8016f84:	4631      	mov	r1, r6
 8016f86:	4682      	mov	sl, r0
 8016f88:	f000 fc1c 	bl	80177c4 <__mcmp>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	dc03      	bgt.n	8016f98 <_dtoa_r+0xab0>
 8016f90:	d1e1      	bne.n	8016f56 <_dtoa_r+0xa6e>
 8016f92:	f019 0f01 	tst.w	r9, #1
 8016f96:	d0de      	beq.n	8016f56 <_dtoa_r+0xa6e>
 8016f98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016f9c:	d1d8      	bne.n	8016f50 <_dtoa_r+0xa68>
 8016f9e:	9a01      	ldr	r2, [sp, #4]
 8016fa0:	2339      	movs	r3, #57	; 0x39
 8016fa2:	7013      	strb	r3, [r2, #0]
 8016fa4:	462b      	mov	r3, r5
 8016fa6:	461d      	mov	r5, r3
 8016fa8:	3b01      	subs	r3, #1
 8016faa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016fae:	2a39      	cmp	r2, #57	; 0x39
 8016fb0:	d06c      	beq.n	801708c <_dtoa_r+0xba4>
 8016fb2:	3201      	adds	r2, #1
 8016fb4:	701a      	strb	r2, [r3, #0]
 8016fb6:	e747      	b.n	8016e48 <_dtoa_r+0x960>
 8016fb8:	2a00      	cmp	r2, #0
 8016fba:	dd07      	ble.n	8016fcc <_dtoa_r+0xae4>
 8016fbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016fc0:	d0ed      	beq.n	8016f9e <_dtoa_r+0xab6>
 8016fc2:	9a01      	ldr	r2, [sp, #4]
 8016fc4:	f109 0301 	add.w	r3, r9, #1
 8016fc8:	7013      	strb	r3, [r2, #0]
 8016fca:	e73d      	b.n	8016e48 <_dtoa_r+0x960>
 8016fcc:	9b04      	ldr	r3, [sp, #16]
 8016fce:	9a08      	ldr	r2, [sp, #32]
 8016fd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016fd4:	4293      	cmp	r3, r2
 8016fd6:	d043      	beq.n	8017060 <_dtoa_r+0xb78>
 8016fd8:	4651      	mov	r1, sl
 8016fda:	2300      	movs	r3, #0
 8016fdc:	220a      	movs	r2, #10
 8016fde:	4620      	mov	r0, r4
 8016fe0:	f000 f9d6 	bl	8017390 <__multadd>
 8016fe4:	45b8      	cmp	r8, r7
 8016fe6:	4682      	mov	sl, r0
 8016fe8:	f04f 0300 	mov.w	r3, #0
 8016fec:	f04f 020a 	mov.w	r2, #10
 8016ff0:	4641      	mov	r1, r8
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	d107      	bne.n	8017006 <_dtoa_r+0xb1e>
 8016ff6:	f000 f9cb 	bl	8017390 <__multadd>
 8016ffa:	4680      	mov	r8, r0
 8016ffc:	4607      	mov	r7, r0
 8016ffe:	9b04      	ldr	r3, [sp, #16]
 8017000:	3301      	adds	r3, #1
 8017002:	9304      	str	r3, [sp, #16]
 8017004:	e775      	b.n	8016ef2 <_dtoa_r+0xa0a>
 8017006:	f000 f9c3 	bl	8017390 <__multadd>
 801700a:	4639      	mov	r1, r7
 801700c:	4680      	mov	r8, r0
 801700e:	2300      	movs	r3, #0
 8017010:	220a      	movs	r2, #10
 8017012:	4620      	mov	r0, r4
 8017014:	f000 f9bc 	bl	8017390 <__multadd>
 8017018:	4607      	mov	r7, r0
 801701a:	e7f0      	b.n	8016ffe <_dtoa_r+0xb16>
 801701c:	9b04      	ldr	r3, [sp, #16]
 801701e:	9301      	str	r3, [sp, #4]
 8017020:	9d00      	ldr	r5, [sp, #0]
 8017022:	4631      	mov	r1, r6
 8017024:	4650      	mov	r0, sl
 8017026:	f7ff f9d4 	bl	80163d2 <quorem>
 801702a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801702e:	9b00      	ldr	r3, [sp, #0]
 8017030:	f805 9b01 	strb.w	r9, [r5], #1
 8017034:	1aea      	subs	r2, r5, r3
 8017036:	9b01      	ldr	r3, [sp, #4]
 8017038:	4293      	cmp	r3, r2
 801703a:	dd07      	ble.n	801704c <_dtoa_r+0xb64>
 801703c:	4651      	mov	r1, sl
 801703e:	2300      	movs	r3, #0
 8017040:	220a      	movs	r2, #10
 8017042:	4620      	mov	r0, r4
 8017044:	f000 f9a4 	bl	8017390 <__multadd>
 8017048:	4682      	mov	sl, r0
 801704a:	e7ea      	b.n	8017022 <_dtoa_r+0xb3a>
 801704c:	9b01      	ldr	r3, [sp, #4]
 801704e:	2b00      	cmp	r3, #0
 8017050:	bfc8      	it	gt
 8017052:	461d      	movgt	r5, r3
 8017054:	9b00      	ldr	r3, [sp, #0]
 8017056:	bfd8      	it	le
 8017058:	2501      	movle	r5, #1
 801705a:	441d      	add	r5, r3
 801705c:	f04f 0800 	mov.w	r8, #0
 8017060:	4651      	mov	r1, sl
 8017062:	2201      	movs	r2, #1
 8017064:	4620      	mov	r0, r4
 8017066:	f000 fb41 	bl	80176ec <__lshift>
 801706a:	4631      	mov	r1, r6
 801706c:	4682      	mov	sl, r0
 801706e:	f000 fba9 	bl	80177c4 <__mcmp>
 8017072:	2800      	cmp	r0, #0
 8017074:	dc96      	bgt.n	8016fa4 <_dtoa_r+0xabc>
 8017076:	d102      	bne.n	801707e <_dtoa_r+0xb96>
 8017078:	f019 0f01 	tst.w	r9, #1
 801707c:	d192      	bne.n	8016fa4 <_dtoa_r+0xabc>
 801707e:	462b      	mov	r3, r5
 8017080:	461d      	mov	r5, r3
 8017082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017086:	2a30      	cmp	r2, #48	; 0x30
 8017088:	d0fa      	beq.n	8017080 <_dtoa_r+0xb98>
 801708a:	e6dd      	b.n	8016e48 <_dtoa_r+0x960>
 801708c:	9a00      	ldr	r2, [sp, #0]
 801708e:	429a      	cmp	r2, r3
 8017090:	d189      	bne.n	8016fa6 <_dtoa_r+0xabe>
 8017092:	f10b 0b01 	add.w	fp, fp, #1
 8017096:	2331      	movs	r3, #49	; 0x31
 8017098:	e796      	b.n	8016fc8 <_dtoa_r+0xae0>
 801709a:	4b0a      	ldr	r3, [pc, #40]	; (80170c4 <_dtoa_r+0xbdc>)
 801709c:	f7ff ba99 	b.w	80165d2 <_dtoa_r+0xea>
 80170a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	f47f aa6d 	bne.w	8016582 <_dtoa_r+0x9a>
 80170a8:	4b07      	ldr	r3, [pc, #28]	; (80170c8 <_dtoa_r+0xbe0>)
 80170aa:	f7ff ba92 	b.w	80165d2 <_dtoa_r+0xea>
 80170ae:	9b01      	ldr	r3, [sp, #4]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	dcb5      	bgt.n	8017020 <_dtoa_r+0xb38>
 80170b4:	9b07      	ldr	r3, [sp, #28]
 80170b6:	2b02      	cmp	r3, #2
 80170b8:	f73f aeb1 	bgt.w	8016e1e <_dtoa_r+0x936>
 80170bc:	e7b0      	b.n	8017020 <_dtoa_r+0xb38>
 80170be:	bf00      	nop
 80170c0:	0801b1a8 	.word	0x0801b1a8
 80170c4:	0801b108 	.word	0x0801b108
 80170c8:	0801b12c 	.word	0x0801b12c

080170cc <_free_r>:
 80170cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170ce:	2900      	cmp	r1, #0
 80170d0:	d044      	beq.n	801715c <_free_r+0x90>
 80170d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170d6:	9001      	str	r0, [sp, #4]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	f1a1 0404 	sub.w	r4, r1, #4
 80170de:	bfb8      	it	lt
 80170e0:	18e4      	addlt	r4, r4, r3
 80170e2:	f000 f8e7 	bl	80172b4 <__malloc_lock>
 80170e6:	4a1e      	ldr	r2, [pc, #120]	; (8017160 <_free_r+0x94>)
 80170e8:	9801      	ldr	r0, [sp, #4]
 80170ea:	6813      	ldr	r3, [r2, #0]
 80170ec:	b933      	cbnz	r3, 80170fc <_free_r+0x30>
 80170ee:	6063      	str	r3, [r4, #4]
 80170f0:	6014      	str	r4, [r2, #0]
 80170f2:	b003      	add	sp, #12
 80170f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170f8:	f000 b8e2 	b.w	80172c0 <__malloc_unlock>
 80170fc:	42a3      	cmp	r3, r4
 80170fe:	d908      	bls.n	8017112 <_free_r+0x46>
 8017100:	6825      	ldr	r5, [r4, #0]
 8017102:	1961      	adds	r1, r4, r5
 8017104:	428b      	cmp	r3, r1
 8017106:	bf01      	itttt	eq
 8017108:	6819      	ldreq	r1, [r3, #0]
 801710a:	685b      	ldreq	r3, [r3, #4]
 801710c:	1949      	addeq	r1, r1, r5
 801710e:	6021      	streq	r1, [r4, #0]
 8017110:	e7ed      	b.n	80170ee <_free_r+0x22>
 8017112:	461a      	mov	r2, r3
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	b10b      	cbz	r3, 801711c <_free_r+0x50>
 8017118:	42a3      	cmp	r3, r4
 801711a:	d9fa      	bls.n	8017112 <_free_r+0x46>
 801711c:	6811      	ldr	r1, [r2, #0]
 801711e:	1855      	adds	r5, r2, r1
 8017120:	42a5      	cmp	r5, r4
 8017122:	d10b      	bne.n	801713c <_free_r+0x70>
 8017124:	6824      	ldr	r4, [r4, #0]
 8017126:	4421      	add	r1, r4
 8017128:	1854      	adds	r4, r2, r1
 801712a:	42a3      	cmp	r3, r4
 801712c:	6011      	str	r1, [r2, #0]
 801712e:	d1e0      	bne.n	80170f2 <_free_r+0x26>
 8017130:	681c      	ldr	r4, [r3, #0]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	6053      	str	r3, [r2, #4]
 8017136:	440c      	add	r4, r1
 8017138:	6014      	str	r4, [r2, #0]
 801713a:	e7da      	b.n	80170f2 <_free_r+0x26>
 801713c:	d902      	bls.n	8017144 <_free_r+0x78>
 801713e:	230c      	movs	r3, #12
 8017140:	6003      	str	r3, [r0, #0]
 8017142:	e7d6      	b.n	80170f2 <_free_r+0x26>
 8017144:	6825      	ldr	r5, [r4, #0]
 8017146:	1961      	adds	r1, r4, r5
 8017148:	428b      	cmp	r3, r1
 801714a:	bf04      	itt	eq
 801714c:	6819      	ldreq	r1, [r3, #0]
 801714e:	685b      	ldreq	r3, [r3, #4]
 8017150:	6063      	str	r3, [r4, #4]
 8017152:	bf04      	itt	eq
 8017154:	1949      	addeq	r1, r1, r5
 8017156:	6021      	streq	r1, [r4, #0]
 8017158:	6054      	str	r4, [r2, #4]
 801715a:	e7ca      	b.n	80170f2 <_free_r+0x26>
 801715c:	b003      	add	sp, #12
 801715e:	bd30      	pop	{r4, r5, pc}
 8017160:	200033c0 	.word	0x200033c0

08017164 <malloc>:
 8017164:	4b02      	ldr	r3, [pc, #8]	; (8017170 <malloc+0xc>)
 8017166:	4601      	mov	r1, r0
 8017168:	6818      	ldr	r0, [r3, #0]
 801716a:	f000 b823 	b.w	80171b4 <_malloc_r>
 801716e:	bf00      	nop
 8017170:	200003c8 	.word	0x200003c8

08017174 <sbrk_aligned>:
 8017174:	b570      	push	{r4, r5, r6, lr}
 8017176:	4e0e      	ldr	r6, [pc, #56]	; (80171b0 <sbrk_aligned+0x3c>)
 8017178:	460c      	mov	r4, r1
 801717a:	6831      	ldr	r1, [r6, #0]
 801717c:	4605      	mov	r5, r0
 801717e:	b911      	cbnz	r1, 8017186 <sbrk_aligned+0x12>
 8017180:	f000 fe40 	bl	8017e04 <_sbrk_r>
 8017184:	6030      	str	r0, [r6, #0]
 8017186:	4621      	mov	r1, r4
 8017188:	4628      	mov	r0, r5
 801718a:	f000 fe3b 	bl	8017e04 <_sbrk_r>
 801718e:	1c43      	adds	r3, r0, #1
 8017190:	d00a      	beq.n	80171a8 <sbrk_aligned+0x34>
 8017192:	1cc4      	adds	r4, r0, #3
 8017194:	f024 0403 	bic.w	r4, r4, #3
 8017198:	42a0      	cmp	r0, r4
 801719a:	d007      	beq.n	80171ac <sbrk_aligned+0x38>
 801719c:	1a21      	subs	r1, r4, r0
 801719e:	4628      	mov	r0, r5
 80171a0:	f000 fe30 	bl	8017e04 <_sbrk_r>
 80171a4:	3001      	adds	r0, #1
 80171a6:	d101      	bne.n	80171ac <sbrk_aligned+0x38>
 80171a8:	f04f 34ff 	mov.w	r4, #4294967295
 80171ac:	4620      	mov	r0, r4
 80171ae:	bd70      	pop	{r4, r5, r6, pc}
 80171b0:	200033c4 	.word	0x200033c4

080171b4 <_malloc_r>:
 80171b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171b8:	1ccd      	adds	r5, r1, #3
 80171ba:	f025 0503 	bic.w	r5, r5, #3
 80171be:	3508      	adds	r5, #8
 80171c0:	2d0c      	cmp	r5, #12
 80171c2:	bf38      	it	cc
 80171c4:	250c      	movcc	r5, #12
 80171c6:	2d00      	cmp	r5, #0
 80171c8:	4607      	mov	r7, r0
 80171ca:	db01      	blt.n	80171d0 <_malloc_r+0x1c>
 80171cc:	42a9      	cmp	r1, r5
 80171ce:	d905      	bls.n	80171dc <_malloc_r+0x28>
 80171d0:	230c      	movs	r3, #12
 80171d2:	603b      	str	r3, [r7, #0]
 80171d4:	2600      	movs	r6, #0
 80171d6:	4630      	mov	r0, r6
 80171d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80172b0 <_malloc_r+0xfc>
 80171e0:	f000 f868 	bl	80172b4 <__malloc_lock>
 80171e4:	f8d8 3000 	ldr.w	r3, [r8]
 80171e8:	461c      	mov	r4, r3
 80171ea:	bb5c      	cbnz	r4, 8017244 <_malloc_r+0x90>
 80171ec:	4629      	mov	r1, r5
 80171ee:	4638      	mov	r0, r7
 80171f0:	f7ff ffc0 	bl	8017174 <sbrk_aligned>
 80171f4:	1c43      	adds	r3, r0, #1
 80171f6:	4604      	mov	r4, r0
 80171f8:	d155      	bne.n	80172a6 <_malloc_r+0xf2>
 80171fa:	f8d8 4000 	ldr.w	r4, [r8]
 80171fe:	4626      	mov	r6, r4
 8017200:	2e00      	cmp	r6, #0
 8017202:	d145      	bne.n	8017290 <_malloc_r+0xdc>
 8017204:	2c00      	cmp	r4, #0
 8017206:	d048      	beq.n	801729a <_malloc_r+0xe6>
 8017208:	6823      	ldr	r3, [r4, #0]
 801720a:	4631      	mov	r1, r6
 801720c:	4638      	mov	r0, r7
 801720e:	eb04 0903 	add.w	r9, r4, r3
 8017212:	f000 fdf7 	bl	8017e04 <_sbrk_r>
 8017216:	4581      	cmp	r9, r0
 8017218:	d13f      	bne.n	801729a <_malloc_r+0xe6>
 801721a:	6821      	ldr	r1, [r4, #0]
 801721c:	1a6d      	subs	r5, r5, r1
 801721e:	4629      	mov	r1, r5
 8017220:	4638      	mov	r0, r7
 8017222:	f7ff ffa7 	bl	8017174 <sbrk_aligned>
 8017226:	3001      	adds	r0, #1
 8017228:	d037      	beq.n	801729a <_malloc_r+0xe6>
 801722a:	6823      	ldr	r3, [r4, #0]
 801722c:	442b      	add	r3, r5
 801722e:	6023      	str	r3, [r4, #0]
 8017230:	f8d8 3000 	ldr.w	r3, [r8]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d038      	beq.n	80172aa <_malloc_r+0xf6>
 8017238:	685a      	ldr	r2, [r3, #4]
 801723a:	42a2      	cmp	r2, r4
 801723c:	d12b      	bne.n	8017296 <_malloc_r+0xe2>
 801723e:	2200      	movs	r2, #0
 8017240:	605a      	str	r2, [r3, #4]
 8017242:	e00f      	b.n	8017264 <_malloc_r+0xb0>
 8017244:	6822      	ldr	r2, [r4, #0]
 8017246:	1b52      	subs	r2, r2, r5
 8017248:	d41f      	bmi.n	801728a <_malloc_r+0xd6>
 801724a:	2a0b      	cmp	r2, #11
 801724c:	d917      	bls.n	801727e <_malloc_r+0xca>
 801724e:	1961      	adds	r1, r4, r5
 8017250:	42a3      	cmp	r3, r4
 8017252:	6025      	str	r5, [r4, #0]
 8017254:	bf18      	it	ne
 8017256:	6059      	strne	r1, [r3, #4]
 8017258:	6863      	ldr	r3, [r4, #4]
 801725a:	bf08      	it	eq
 801725c:	f8c8 1000 	streq.w	r1, [r8]
 8017260:	5162      	str	r2, [r4, r5]
 8017262:	604b      	str	r3, [r1, #4]
 8017264:	4638      	mov	r0, r7
 8017266:	f104 060b 	add.w	r6, r4, #11
 801726a:	f000 f829 	bl	80172c0 <__malloc_unlock>
 801726e:	f026 0607 	bic.w	r6, r6, #7
 8017272:	1d23      	adds	r3, r4, #4
 8017274:	1af2      	subs	r2, r6, r3
 8017276:	d0ae      	beq.n	80171d6 <_malloc_r+0x22>
 8017278:	1b9b      	subs	r3, r3, r6
 801727a:	50a3      	str	r3, [r4, r2]
 801727c:	e7ab      	b.n	80171d6 <_malloc_r+0x22>
 801727e:	42a3      	cmp	r3, r4
 8017280:	6862      	ldr	r2, [r4, #4]
 8017282:	d1dd      	bne.n	8017240 <_malloc_r+0x8c>
 8017284:	f8c8 2000 	str.w	r2, [r8]
 8017288:	e7ec      	b.n	8017264 <_malloc_r+0xb0>
 801728a:	4623      	mov	r3, r4
 801728c:	6864      	ldr	r4, [r4, #4]
 801728e:	e7ac      	b.n	80171ea <_malloc_r+0x36>
 8017290:	4634      	mov	r4, r6
 8017292:	6876      	ldr	r6, [r6, #4]
 8017294:	e7b4      	b.n	8017200 <_malloc_r+0x4c>
 8017296:	4613      	mov	r3, r2
 8017298:	e7cc      	b.n	8017234 <_malloc_r+0x80>
 801729a:	230c      	movs	r3, #12
 801729c:	603b      	str	r3, [r7, #0]
 801729e:	4638      	mov	r0, r7
 80172a0:	f000 f80e 	bl	80172c0 <__malloc_unlock>
 80172a4:	e797      	b.n	80171d6 <_malloc_r+0x22>
 80172a6:	6025      	str	r5, [r4, #0]
 80172a8:	e7dc      	b.n	8017264 <_malloc_r+0xb0>
 80172aa:	605b      	str	r3, [r3, #4]
 80172ac:	deff      	udf	#255	; 0xff
 80172ae:	bf00      	nop
 80172b0:	200033c0 	.word	0x200033c0

080172b4 <__malloc_lock>:
 80172b4:	4801      	ldr	r0, [pc, #4]	; (80172bc <__malloc_lock+0x8>)
 80172b6:	f7ff b87c 	b.w	80163b2 <__retarget_lock_acquire_recursive>
 80172ba:	bf00      	nop
 80172bc:	200033bc 	.word	0x200033bc

080172c0 <__malloc_unlock>:
 80172c0:	4801      	ldr	r0, [pc, #4]	; (80172c8 <__malloc_unlock+0x8>)
 80172c2:	f7ff b877 	b.w	80163b4 <__retarget_lock_release_recursive>
 80172c6:	bf00      	nop
 80172c8:	200033bc 	.word	0x200033bc

080172cc <_Balloc>:
 80172cc:	b570      	push	{r4, r5, r6, lr}
 80172ce:	69c6      	ldr	r6, [r0, #28]
 80172d0:	4604      	mov	r4, r0
 80172d2:	460d      	mov	r5, r1
 80172d4:	b976      	cbnz	r6, 80172f4 <_Balloc+0x28>
 80172d6:	2010      	movs	r0, #16
 80172d8:	f7ff ff44 	bl	8017164 <malloc>
 80172dc:	4602      	mov	r2, r0
 80172de:	61e0      	str	r0, [r4, #28]
 80172e0:	b920      	cbnz	r0, 80172ec <_Balloc+0x20>
 80172e2:	4b18      	ldr	r3, [pc, #96]	; (8017344 <_Balloc+0x78>)
 80172e4:	4818      	ldr	r0, [pc, #96]	; (8017348 <_Balloc+0x7c>)
 80172e6:	216b      	movs	r1, #107	; 0x6b
 80172e8:	f000 fd9c 	bl	8017e24 <__assert_func>
 80172ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172f0:	6006      	str	r6, [r0, #0]
 80172f2:	60c6      	str	r6, [r0, #12]
 80172f4:	69e6      	ldr	r6, [r4, #28]
 80172f6:	68f3      	ldr	r3, [r6, #12]
 80172f8:	b183      	cbz	r3, 801731c <_Balloc+0x50>
 80172fa:	69e3      	ldr	r3, [r4, #28]
 80172fc:	68db      	ldr	r3, [r3, #12]
 80172fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017302:	b9b8      	cbnz	r0, 8017334 <_Balloc+0x68>
 8017304:	2101      	movs	r1, #1
 8017306:	fa01 f605 	lsl.w	r6, r1, r5
 801730a:	1d72      	adds	r2, r6, #5
 801730c:	0092      	lsls	r2, r2, #2
 801730e:	4620      	mov	r0, r4
 8017310:	f000 fda6 	bl	8017e60 <_calloc_r>
 8017314:	b160      	cbz	r0, 8017330 <_Balloc+0x64>
 8017316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801731a:	e00e      	b.n	801733a <_Balloc+0x6e>
 801731c:	2221      	movs	r2, #33	; 0x21
 801731e:	2104      	movs	r1, #4
 8017320:	4620      	mov	r0, r4
 8017322:	f000 fd9d 	bl	8017e60 <_calloc_r>
 8017326:	69e3      	ldr	r3, [r4, #28]
 8017328:	60f0      	str	r0, [r6, #12]
 801732a:	68db      	ldr	r3, [r3, #12]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d1e4      	bne.n	80172fa <_Balloc+0x2e>
 8017330:	2000      	movs	r0, #0
 8017332:	bd70      	pop	{r4, r5, r6, pc}
 8017334:	6802      	ldr	r2, [r0, #0]
 8017336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801733a:	2300      	movs	r3, #0
 801733c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017340:	e7f7      	b.n	8017332 <_Balloc+0x66>
 8017342:	bf00      	nop
 8017344:	0801b139 	.word	0x0801b139
 8017348:	0801b1b9 	.word	0x0801b1b9

0801734c <_Bfree>:
 801734c:	b570      	push	{r4, r5, r6, lr}
 801734e:	69c6      	ldr	r6, [r0, #28]
 8017350:	4605      	mov	r5, r0
 8017352:	460c      	mov	r4, r1
 8017354:	b976      	cbnz	r6, 8017374 <_Bfree+0x28>
 8017356:	2010      	movs	r0, #16
 8017358:	f7ff ff04 	bl	8017164 <malloc>
 801735c:	4602      	mov	r2, r0
 801735e:	61e8      	str	r0, [r5, #28]
 8017360:	b920      	cbnz	r0, 801736c <_Bfree+0x20>
 8017362:	4b09      	ldr	r3, [pc, #36]	; (8017388 <_Bfree+0x3c>)
 8017364:	4809      	ldr	r0, [pc, #36]	; (801738c <_Bfree+0x40>)
 8017366:	218f      	movs	r1, #143	; 0x8f
 8017368:	f000 fd5c 	bl	8017e24 <__assert_func>
 801736c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017370:	6006      	str	r6, [r0, #0]
 8017372:	60c6      	str	r6, [r0, #12]
 8017374:	b13c      	cbz	r4, 8017386 <_Bfree+0x3a>
 8017376:	69eb      	ldr	r3, [r5, #28]
 8017378:	6862      	ldr	r2, [r4, #4]
 801737a:	68db      	ldr	r3, [r3, #12]
 801737c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017380:	6021      	str	r1, [r4, #0]
 8017382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017386:	bd70      	pop	{r4, r5, r6, pc}
 8017388:	0801b139 	.word	0x0801b139
 801738c:	0801b1b9 	.word	0x0801b1b9

08017390 <__multadd>:
 8017390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017394:	690d      	ldr	r5, [r1, #16]
 8017396:	4607      	mov	r7, r0
 8017398:	460c      	mov	r4, r1
 801739a:	461e      	mov	r6, r3
 801739c:	f101 0c14 	add.w	ip, r1, #20
 80173a0:	2000      	movs	r0, #0
 80173a2:	f8dc 3000 	ldr.w	r3, [ip]
 80173a6:	b299      	uxth	r1, r3
 80173a8:	fb02 6101 	mla	r1, r2, r1, r6
 80173ac:	0c1e      	lsrs	r6, r3, #16
 80173ae:	0c0b      	lsrs	r3, r1, #16
 80173b0:	fb02 3306 	mla	r3, r2, r6, r3
 80173b4:	b289      	uxth	r1, r1
 80173b6:	3001      	adds	r0, #1
 80173b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80173bc:	4285      	cmp	r5, r0
 80173be:	f84c 1b04 	str.w	r1, [ip], #4
 80173c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80173c6:	dcec      	bgt.n	80173a2 <__multadd+0x12>
 80173c8:	b30e      	cbz	r6, 801740e <__multadd+0x7e>
 80173ca:	68a3      	ldr	r3, [r4, #8]
 80173cc:	42ab      	cmp	r3, r5
 80173ce:	dc19      	bgt.n	8017404 <__multadd+0x74>
 80173d0:	6861      	ldr	r1, [r4, #4]
 80173d2:	4638      	mov	r0, r7
 80173d4:	3101      	adds	r1, #1
 80173d6:	f7ff ff79 	bl	80172cc <_Balloc>
 80173da:	4680      	mov	r8, r0
 80173dc:	b928      	cbnz	r0, 80173ea <__multadd+0x5a>
 80173de:	4602      	mov	r2, r0
 80173e0:	4b0c      	ldr	r3, [pc, #48]	; (8017414 <__multadd+0x84>)
 80173e2:	480d      	ldr	r0, [pc, #52]	; (8017418 <__multadd+0x88>)
 80173e4:	21ba      	movs	r1, #186	; 0xba
 80173e6:	f000 fd1d 	bl	8017e24 <__assert_func>
 80173ea:	6922      	ldr	r2, [r4, #16]
 80173ec:	3202      	adds	r2, #2
 80173ee:	f104 010c 	add.w	r1, r4, #12
 80173f2:	0092      	lsls	r2, r2, #2
 80173f4:	300c      	adds	r0, #12
 80173f6:	f7fe ffde 	bl	80163b6 <memcpy>
 80173fa:	4621      	mov	r1, r4
 80173fc:	4638      	mov	r0, r7
 80173fe:	f7ff ffa5 	bl	801734c <_Bfree>
 8017402:	4644      	mov	r4, r8
 8017404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017408:	3501      	adds	r5, #1
 801740a:	615e      	str	r6, [r3, #20]
 801740c:	6125      	str	r5, [r4, #16]
 801740e:	4620      	mov	r0, r4
 8017410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017414:	0801b1a8 	.word	0x0801b1a8
 8017418:	0801b1b9 	.word	0x0801b1b9

0801741c <__hi0bits>:
 801741c:	0c03      	lsrs	r3, r0, #16
 801741e:	041b      	lsls	r3, r3, #16
 8017420:	b9d3      	cbnz	r3, 8017458 <__hi0bits+0x3c>
 8017422:	0400      	lsls	r0, r0, #16
 8017424:	2310      	movs	r3, #16
 8017426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801742a:	bf04      	itt	eq
 801742c:	0200      	lsleq	r0, r0, #8
 801742e:	3308      	addeq	r3, #8
 8017430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017434:	bf04      	itt	eq
 8017436:	0100      	lsleq	r0, r0, #4
 8017438:	3304      	addeq	r3, #4
 801743a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801743e:	bf04      	itt	eq
 8017440:	0080      	lsleq	r0, r0, #2
 8017442:	3302      	addeq	r3, #2
 8017444:	2800      	cmp	r0, #0
 8017446:	db05      	blt.n	8017454 <__hi0bits+0x38>
 8017448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801744c:	f103 0301 	add.w	r3, r3, #1
 8017450:	bf08      	it	eq
 8017452:	2320      	moveq	r3, #32
 8017454:	4618      	mov	r0, r3
 8017456:	4770      	bx	lr
 8017458:	2300      	movs	r3, #0
 801745a:	e7e4      	b.n	8017426 <__hi0bits+0xa>

0801745c <__lo0bits>:
 801745c:	6803      	ldr	r3, [r0, #0]
 801745e:	f013 0207 	ands.w	r2, r3, #7
 8017462:	d00c      	beq.n	801747e <__lo0bits+0x22>
 8017464:	07d9      	lsls	r1, r3, #31
 8017466:	d422      	bmi.n	80174ae <__lo0bits+0x52>
 8017468:	079a      	lsls	r2, r3, #30
 801746a:	bf49      	itett	mi
 801746c:	085b      	lsrmi	r3, r3, #1
 801746e:	089b      	lsrpl	r3, r3, #2
 8017470:	6003      	strmi	r3, [r0, #0]
 8017472:	2201      	movmi	r2, #1
 8017474:	bf5c      	itt	pl
 8017476:	6003      	strpl	r3, [r0, #0]
 8017478:	2202      	movpl	r2, #2
 801747a:	4610      	mov	r0, r2
 801747c:	4770      	bx	lr
 801747e:	b299      	uxth	r1, r3
 8017480:	b909      	cbnz	r1, 8017486 <__lo0bits+0x2a>
 8017482:	0c1b      	lsrs	r3, r3, #16
 8017484:	2210      	movs	r2, #16
 8017486:	b2d9      	uxtb	r1, r3
 8017488:	b909      	cbnz	r1, 801748e <__lo0bits+0x32>
 801748a:	3208      	adds	r2, #8
 801748c:	0a1b      	lsrs	r3, r3, #8
 801748e:	0719      	lsls	r1, r3, #28
 8017490:	bf04      	itt	eq
 8017492:	091b      	lsreq	r3, r3, #4
 8017494:	3204      	addeq	r2, #4
 8017496:	0799      	lsls	r1, r3, #30
 8017498:	bf04      	itt	eq
 801749a:	089b      	lsreq	r3, r3, #2
 801749c:	3202      	addeq	r2, #2
 801749e:	07d9      	lsls	r1, r3, #31
 80174a0:	d403      	bmi.n	80174aa <__lo0bits+0x4e>
 80174a2:	085b      	lsrs	r3, r3, #1
 80174a4:	f102 0201 	add.w	r2, r2, #1
 80174a8:	d003      	beq.n	80174b2 <__lo0bits+0x56>
 80174aa:	6003      	str	r3, [r0, #0]
 80174ac:	e7e5      	b.n	801747a <__lo0bits+0x1e>
 80174ae:	2200      	movs	r2, #0
 80174b0:	e7e3      	b.n	801747a <__lo0bits+0x1e>
 80174b2:	2220      	movs	r2, #32
 80174b4:	e7e1      	b.n	801747a <__lo0bits+0x1e>
	...

080174b8 <__i2b>:
 80174b8:	b510      	push	{r4, lr}
 80174ba:	460c      	mov	r4, r1
 80174bc:	2101      	movs	r1, #1
 80174be:	f7ff ff05 	bl	80172cc <_Balloc>
 80174c2:	4602      	mov	r2, r0
 80174c4:	b928      	cbnz	r0, 80174d2 <__i2b+0x1a>
 80174c6:	4b05      	ldr	r3, [pc, #20]	; (80174dc <__i2b+0x24>)
 80174c8:	4805      	ldr	r0, [pc, #20]	; (80174e0 <__i2b+0x28>)
 80174ca:	f240 1145 	movw	r1, #325	; 0x145
 80174ce:	f000 fca9 	bl	8017e24 <__assert_func>
 80174d2:	2301      	movs	r3, #1
 80174d4:	6144      	str	r4, [r0, #20]
 80174d6:	6103      	str	r3, [r0, #16]
 80174d8:	bd10      	pop	{r4, pc}
 80174da:	bf00      	nop
 80174dc:	0801b1a8 	.word	0x0801b1a8
 80174e0:	0801b1b9 	.word	0x0801b1b9

080174e4 <__multiply>:
 80174e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e8:	4691      	mov	r9, r2
 80174ea:	690a      	ldr	r2, [r1, #16]
 80174ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80174f0:	429a      	cmp	r2, r3
 80174f2:	bfb8      	it	lt
 80174f4:	460b      	movlt	r3, r1
 80174f6:	460c      	mov	r4, r1
 80174f8:	bfbc      	itt	lt
 80174fa:	464c      	movlt	r4, r9
 80174fc:	4699      	movlt	r9, r3
 80174fe:	6927      	ldr	r7, [r4, #16]
 8017500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017504:	68a3      	ldr	r3, [r4, #8]
 8017506:	6861      	ldr	r1, [r4, #4]
 8017508:	eb07 060a 	add.w	r6, r7, sl
 801750c:	42b3      	cmp	r3, r6
 801750e:	b085      	sub	sp, #20
 8017510:	bfb8      	it	lt
 8017512:	3101      	addlt	r1, #1
 8017514:	f7ff feda 	bl	80172cc <_Balloc>
 8017518:	b930      	cbnz	r0, 8017528 <__multiply+0x44>
 801751a:	4602      	mov	r2, r0
 801751c:	4b44      	ldr	r3, [pc, #272]	; (8017630 <__multiply+0x14c>)
 801751e:	4845      	ldr	r0, [pc, #276]	; (8017634 <__multiply+0x150>)
 8017520:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017524:	f000 fc7e 	bl	8017e24 <__assert_func>
 8017528:	f100 0514 	add.w	r5, r0, #20
 801752c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017530:	462b      	mov	r3, r5
 8017532:	2200      	movs	r2, #0
 8017534:	4543      	cmp	r3, r8
 8017536:	d321      	bcc.n	801757c <__multiply+0x98>
 8017538:	f104 0314 	add.w	r3, r4, #20
 801753c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017540:	f109 0314 	add.w	r3, r9, #20
 8017544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017548:	9202      	str	r2, [sp, #8]
 801754a:	1b3a      	subs	r2, r7, r4
 801754c:	3a15      	subs	r2, #21
 801754e:	f022 0203 	bic.w	r2, r2, #3
 8017552:	3204      	adds	r2, #4
 8017554:	f104 0115 	add.w	r1, r4, #21
 8017558:	428f      	cmp	r7, r1
 801755a:	bf38      	it	cc
 801755c:	2204      	movcc	r2, #4
 801755e:	9201      	str	r2, [sp, #4]
 8017560:	9a02      	ldr	r2, [sp, #8]
 8017562:	9303      	str	r3, [sp, #12]
 8017564:	429a      	cmp	r2, r3
 8017566:	d80c      	bhi.n	8017582 <__multiply+0x9e>
 8017568:	2e00      	cmp	r6, #0
 801756a:	dd03      	ble.n	8017574 <__multiply+0x90>
 801756c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017570:	2b00      	cmp	r3, #0
 8017572:	d05b      	beq.n	801762c <__multiply+0x148>
 8017574:	6106      	str	r6, [r0, #16]
 8017576:	b005      	add	sp, #20
 8017578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801757c:	f843 2b04 	str.w	r2, [r3], #4
 8017580:	e7d8      	b.n	8017534 <__multiply+0x50>
 8017582:	f8b3 a000 	ldrh.w	sl, [r3]
 8017586:	f1ba 0f00 	cmp.w	sl, #0
 801758a:	d024      	beq.n	80175d6 <__multiply+0xf2>
 801758c:	f104 0e14 	add.w	lr, r4, #20
 8017590:	46a9      	mov	r9, r5
 8017592:	f04f 0c00 	mov.w	ip, #0
 8017596:	f85e 2b04 	ldr.w	r2, [lr], #4
 801759a:	f8d9 1000 	ldr.w	r1, [r9]
 801759e:	fa1f fb82 	uxth.w	fp, r2
 80175a2:	b289      	uxth	r1, r1
 80175a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80175a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80175ac:	f8d9 2000 	ldr.w	r2, [r9]
 80175b0:	4461      	add	r1, ip
 80175b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80175b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80175ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80175be:	b289      	uxth	r1, r1
 80175c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80175c4:	4577      	cmp	r7, lr
 80175c6:	f849 1b04 	str.w	r1, [r9], #4
 80175ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80175ce:	d8e2      	bhi.n	8017596 <__multiply+0xb2>
 80175d0:	9a01      	ldr	r2, [sp, #4]
 80175d2:	f845 c002 	str.w	ip, [r5, r2]
 80175d6:	9a03      	ldr	r2, [sp, #12]
 80175d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80175dc:	3304      	adds	r3, #4
 80175de:	f1b9 0f00 	cmp.w	r9, #0
 80175e2:	d021      	beq.n	8017628 <__multiply+0x144>
 80175e4:	6829      	ldr	r1, [r5, #0]
 80175e6:	f104 0c14 	add.w	ip, r4, #20
 80175ea:	46ae      	mov	lr, r5
 80175ec:	f04f 0a00 	mov.w	sl, #0
 80175f0:	f8bc b000 	ldrh.w	fp, [ip]
 80175f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80175f8:	fb09 220b 	mla	r2, r9, fp, r2
 80175fc:	4452      	add	r2, sl
 80175fe:	b289      	uxth	r1, r1
 8017600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017604:	f84e 1b04 	str.w	r1, [lr], #4
 8017608:	f85c 1b04 	ldr.w	r1, [ip], #4
 801760c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017610:	f8be 1000 	ldrh.w	r1, [lr]
 8017614:	fb09 110a 	mla	r1, r9, sl, r1
 8017618:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801761c:	4567      	cmp	r7, ip
 801761e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017622:	d8e5      	bhi.n	80175f0 <__multiply+0x10c>
 8017624:	9a01      	ldr	r2, [sp, #4]
 8017626:	50a9      	str	r1, [r5, r2]
 8017628:	3504      	adds	r5, #4
 801762a:	e799      	b.n	8017560 <__multiply+0x7c>
 801762c:	3e01      	subs	r6, #1
 801762e:	e79b      	b.n	8017568 <__multiply+0x84>
 8017630:	0801b1a8 	.word	0x0801b1a8
 8017634:	0801b1b9 	.word	0x0801b1b9

08017638 <__pow5mult>:
 8017638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801763c:	4615      	mov	r5, r2
 801763e:	f012 0203 	ands.w	r2, r2, #3
 8017642:	4606      	mov	r6, r0
 8017644:	460f      	mov	r7, r1
 8017646:	d007      	beq.n	8017658 <__pow5mult+0x20>
 8017648:	4c25      	ldr	r4, [pc, #148]	; (80176e0 <__pow5mult+0xa8>)
 801764a:	3a01      	subs	r2, #1
 801764c:	2300      	movs	r3, #0
 801764e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017652:	f7ff fe9d 	bl	8017390 <__multadd>
 8017656:	4607      	mov	r7, r0
 8017658:	10ad      	asrs	r5, r5, #2
 801765a:	d03d      	beq.n	80176d8 <__pow5mult+0xa0>
 801765c:	69f4      	ldr	r4, [r6, #28]
 801765e:	b97c      	cbnz	r4, 8017680 <__pow5mult+0x48>
 8017660:	2010      	movs	r0, #16
 8017662:	f7ff fd7f 	bl	8017164 <malloc>
 8017666:	4602      	mov	r2, r0
 8017668:	61f0      	str	r0, [r6, #28]
 801766a:	b928      	cbnz	r0, 8017678 <__pow5mult+0x40>
 801766c:	4b1d      	ldr	r3, [pc, #116]	; (80176e4 <__pow5mult+0xac>)
 801766e:	481e      	ldr	r0, [pc, #120]	; (80176e8 <__pow5mult+0xb0>)
 8017670:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017674:	f000 fbd6 	bl	8017e24 <__assert_func>
 8017678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801767c:	6004      	str	r4, [r0, #0]
 801767e:	60c4      	str	r4, [r0, #12]
 8017680:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017688:	b94c      	cbnz	r4, 801769e <__pow5mult+0x66>
 801768a:	f240 2171 	movw	r1, #625	; 0x271
 801768e:	4630      	mov	r0, r6
 8017690:	f7ff ff12 	bl	80174b8 <__i2b>
 8017694:	2300      	movs	r3, #0
 8017696:	f8c8 0008 	str.w	r0, [r8, #8]
 801769a:	4604      	mov	r4, r0
 801769c:	6003      	str	r3, [r0, #0]
 801769e:	f04f 0900 	mov.w	r9, #0
 80176a2:	07eb      	lsls	r3, r5, #31
 80176a4:	d50a      	bpl.n	80176bc <__pow5mult+0x84>
 80176a6:	4639      	mov	r1, r7
 80176a8:	4622      	mov	r2, r4
 80176aa:	4630      	mov	r0, r6
 80176ac:	f7ff ff1a 	bl	80174e4 <__multiply>
 80176b0:	4639      	mov	r1, r7
 80176b2:	4680      	mov	r8, r0
 80176b4:	4630      	mov	r0, r6
 80176b6:	f7ff fe49 	bl	801734c <_Bfree>
 80176ba:	4647      	mov	r7, r8
 80176bc:	106d      	asrs	r5, r5, #1
 80176be:	d00b      	beq.n	80176d8 <__pow5mult+0xa0>
 80176c0:	6820      	ldr	r0, [r4, #0]
 80176c2:	b938      	cbnz	r0, 80176d4 <__pow5mult+0x9c>
 80176c4:	4622      	mov	r2, r4
 80176c6:	4621      	mov	r1, r4
 80176c8:	4630      	mov	r0, r6
 80176ca:	f7ff ff0b 	bl	80174e4 <__multiply>
 80176ce:	6020      	str	r0, [r4, #0]
 80176d0:	f8c0 9000 	str.w	r9, [r0]
 80176d4:	4604      	mov	r4, r0
 80176d6:	e7e4      	b.n	80176a2 <__pow5mult+0x6a>
 80176d8:	4638      	mov	r0, r7
 80176da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176de:	bf00      	nop
 80176e0:	0801b308 	.word	0x0801b308
 80176e4:	0801b139 	.word	0x0801b139
 80176e8:	0801b1b9 	.word	0x0801b1b9

080176ec <__lshift>:
 80176ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176f0:	460c      	mov	r4, r1
 80176f2:	6849      	ldr	r1, [r1, #4]
 80176f4:	6923      	ldr	r3, [r4, #16]
 80176f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80176fa:	68a3      	ldr	r3, [r4, #8]
 80176fc:	4607      	mov	r7, r0
 80176fe:	4691      	mov	r9, r2
 8017700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017704:	f108 0601 	add.w	r6, r8, #1
 8017708:	42b3      	cmp	r3, r6
 801770a:	db0b      	blt.n	8017724 <__lshift+0x38>
 801770c:	4638      	mov	r0, r7
 801770e:	f7ff fddd 	bl	80172cc <_Balloc>
 8017712:	4605      	mov	r5, r0
 8017714:	b948      	cbnz	r0, 801772a <__lshift+0x3e>
 8017716:	4602      	mov	r2, r0
 8017718:	4b28      	ldr	r3, [pc, #160]	; (80177bc <__lshift+0xd0>)
 801771a:	4829      	ldr	r0, [pc, #164]	; (80177c0 <__lshift+0xd4>)
 801771c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017720:	f000 fb80 	bl	8017e24 <__assert_func>
 8017724:	3101      	adds	r1, #1
 8017726:	005b      	lsls	r3, r3, #1
 8017728:	e7ee      	b.n	8017708 <__lshift+0x1c>
 801772a:	2300      	movs	r3, #0
 801772c:	f100 0114 	add.w	r1, r0, #20
 8017730:	f100 0210 	add.w	r2, r0, #16
 8017734:	4618      	mov	r0, r3
 8017736:	4553      	cmp	r3, sl
 8017738:	db33      	blt.n	80177a2 <__lshift+0xb6>
 801773a:	6920      	ldr	r0, [r4, #16]
 801773c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017740:	f104 0314 	add.w	r3, r4, #20
 8017744:	f019 091f 	ands.w	r9, r9, #31
 8017748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801774c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017750:	d02b      	beq.n	80177aa <__lshift+0xbe>
 8017752:	f1c9 0e20 	rsb	lr, r9, #32
 8017756:	468a      	mov	sl, r1
 8017758:	2200      	movs	r2, #0
 801775a:	6818      	ldr	r0, [r3, #0]
 801775c:	fa00 f009 	lsl.w	r0, r0, r9
 8017760:	4310      	orrs	r0, r2
 8017762:	f84a 0b04 	str.w	r0, [sl], #4
 8017766:	f853 2b04 	ldr.w	r2, [r3], #4
 801776a:	459c      	cmp	ip, r3
 801776c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017770:	d8f3      	bhi.n	801775a <__lshift+0x6e>
 8017772:	ebac 0304 	sub.w	r3, ip, r4
 8017776:	3b15      	subs	r3, #21
 8017778:	f023 0303 	bic.w	r3, r3, #3
 801777c:	3304      	adds	r3, #4
 801777e:	f104 0015 	add.w	r0, r4, #21
 8017782:	4584      	cmp	ip, r0
 8017784:	bf38      	it	cc
 8017786:	2304      	movcc	r3, #4
 8017788:	50ca      	str	r2, [r1, r3]
 801778a:	b10a      	cbz	r2, 8017790 <__lshift+0xa4>
 801778c:	f108 0602 	add.w	r6, r8, #2
 8017790:	3e01      	subs	r6, #1
 8017792:	4638      	mov	r0, r7
 8017794:	612e      	str	r6, [r5, #16]
 8017796:	4621      	mov	r1, r4
 8017798:	f7ff fdd8 	bl	801734c <_Bfree>
 801779c:	4628      	mov	r0, r5
 801779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80177a6:	3301      	adds	r3, #1
 80177a8:	e7c5      	b.n	8017736 <__lshift+0x4a>
 80177aa:	3904      	subs	r1, #4
 80177ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80177b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80177b4:	459c      	cmp	ip, r3
 80177b6:	d8f9      	bhi.n	80177ac <__lshift+0xc0>
 80177b8:	e7ea      	b.n	8017790 <__lshift+0xa4>
 80177ba:	bf00      	nop
 80177bc:	0801b1a8 	.word	0x0801b1a8
 80177c0:	0801b1b9 	.word	0x0801b1b9

080177c4 <__mcmp>:
 80177c4:	b530      	push	{r4, r5, lr}
 80177c6:	6902      	ldr	r2, [r0, #16]
 80177c8:	690c      	ldr	r4, [r1, #16]
 80177ca:	1b12      	subs	r2, r2, r4
 80177cc:	d10e      	bne.n	80177ec <__mcmp+0x28>
 80177ce:	f100 0314 	add.w	r3, r0, #20
 80177d2:	3114      	adds	r1, #20
 80177d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80177d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80177dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80177e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80177e4:	42a5      	cmp	r5, r4
 80177e6:	d003      	beq.n	80177f0 <__mcmp+0x2c>
 80177e8:	d305      	bcc.n	80177f6 <__mcmp+0x32>
 80177ea:	2201      	movs	r2, #1
 80177ec:	4610      	mov	r0, r2
 80177ee:	bd30      	pop	{r4, r5, pc}
 80177f0:	4283      	cmp	r3, r0
 80177f2:	d3f3      	bcc.n	80177dc <__mcmp+0x18>
 80177f4:	e7fa      	b.n	80177ec <__mcmp+0x28>
 80177f6:	f04f 32ff 	mov.w	r2, #4294967295
 80177fa:	e7f7      	b.n	80177ec <__mcmp+0x28>

080177fc <__mdiff>:
 80177fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017800:	460c      	mov	r4, r1
 8017802:	4606      	mov	r6, r0
 8017804:	4611      	mov	r1, r2
 8017806:	4620      	mov	r0, r4
 8017808:	4690      	mov	r8, r2
 801780a:	f7ff ffdb 	bl	80177c4 <__mcmp>
 801780e:	1e05      	subs	r5, r0, #0
 8017810:	d110      	bne.n	8017834 <__mdiff+0x38>
 8017812:	4629      	mov	r1, r5
 8017814:	4630      	mov	r0, r6
 8017816:	f7ff fd59 	bl	80172cc <_Balloc>
 801781a:	b930      	cbnz	r0, 801782a <__mdiff+0x2e>
 801781c:	4b3a      	ldr	r3, [pc, #232]	; (8017908 <__mdiff+0x10c>)
 801781e:	4602      	mov	r2, r0
 8017820:	f240 2137 	movw	r1, #567	; 0x237
 8017824:	4839      	ldr	r0, [pc, #228]	; (801790c <__mdiff+0x110>)
 8017826:	f000 fafd 	bl	8017e24 <__assert_func>
 801782a:	2301      	movs	r3, #1
 801782c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017834:	bfa4      	itt	ge
 8017836:	4643      	movge	r3, r8
 8017838:	46a0      	movge	r8, r4
 801783a:	4630      	mov	r0, r6
 801783c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017840:	bfa6      	itte	ge
 8017842:	461c      	movge	r4, r3
 8017844:	2500      	movge	r5, #0
 8017846:	2501      	movlt	r5, #1
 8017848:	f7ff fd40 	bl	80172cc <_Balloc>
 801784c:	b920      	cbnz	r0, 8017858 <__mdiff+0x5c>
 801784e:	4b2e      	ldr	r3, [pc, #184]	; (8017908 <__mdiff+0x10c>)
 8017850:	4602      	mov	r2, r0
 8017852:	f240 2145 	movw	r1, #581	; 0x245
 8017856:	e7e5      	b.n	8017824 <__mdiff+0x28>
 8017858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801785c:	6926      	ldr	r6, [r4, #16]
 801785e:	60c5      	str	r5, [r0, #12]
 8017860:	f104 0914 	add.w	r9, r4, #20
 8017864:	f108 0514 	add.w	r5, r8, #20
 8017868:	f100 0e14 	add.w	lr, r0, #20
 801786c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017874:	f108 0210 	add.w	r2, r8, #16
 8017878:	46f2      	mov	sl, lr
 801787a:	2100      	movs	r1, #0
 801787c:	f859 3b04 	ldr.w	r3, [r9], #4
 8017880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017884:	fa11 f88b 	uxtah	r8, r1, fp
 8017888:	b299      	uxth	r1, r3
 801788a:	0c1b      	lsrs	r3, r3, #16
 801788c:	eba8 0801 	sub.w	r8, r8, r1
 8017890:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017894:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017898:	fa1f f888 	uxth.w	r8, r8
 801789c:	1419      	asrs	r1, r3, #16
 801789e:	454e      	cmp	r6, r9
 80178a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80178a4:	f84a 3b04 	str.w	r3, [sl], #4
 80178a8:	d8e8      	bhi.n	801787c <__mdiff+0x80>
 80178aa:	1b33      	subs	r3, r6, r4
 80178ac:	3b15      	subs	r3, #21
 80178ae:	f023 0303 	bic.w	r3, r3, #3
 80178b2:	3304      	adds	r3, #4
 80178b4:	3415      	adds	r4, #21
 80178b6:	42a6      	cmp	r6, r4
 80178b8:	bf38      	it	cc
 80178ba:	2304      	movcc	r3, #4
 80178bc:	441d      	add	r5, r3
 80178be:	4473      	add	r3, lr
 80178c0:	469e      	mov	lr, r3
 80178c2:	462e      	mov	r6, r5
 80178c4:	4566      	cmp	r6, ip
 80178c6:	d30e      	bcc.n	80178e6 <__mdiff+0xea>
 80178c8:	f10c 0203 	add.w	r2, ip, #3
 80178cc:	1b52      	subs	r2, r2, r5
 80178ce:	f022 0203 	bic.w	r2, r2, #3
 80178d2:	3d03      	subs	r5, #3
 80178d4:	45ac      	cmp	ip, r5
 80178d6:	bf38      	it	cc
 80178d8:	2200      	movcc	r2, #0
 80178da:	4413      	add	r3, r2
 80178dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80178e0:	b17a      	cbz	r2, 8017902 <__mdiff+0x106>
 80178e2:	6107      	str	r7, [r0, #16]
 80178e4:	e7a4      	b.n	8017830 <__mdiff+0x34>
 80178e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80178ea:	fa11 f288 	uxtah	r2, r1, r8
 80178ee:	1414      	asrs	r4, r2, #16
 80178f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80178f4:	b292      	uxth	r2, r2
 80178f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80178fa:	f84e 2b04 	str.w	r2, [lr], #4
 80178fe:	1421      	asrs	r1, r4, #16
 8017900:	e7e0      	b.n	80178c4 <__mdiff+0xc8>
 8017902:	3f01      	subs	r7, #1
 8017904:	e7ea      	b.n	80178dc <__mdiff+0xe0>
 8017906:	bf00      	nop
 8017908:	0801b1a8 	.word	0x0801b1a8
 801790c:	0801b1b9 	.word	0x0801b1b9

08017910 <__d2b>:
 8017910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017914:	460f      	mov	r7, r1
 8017916:	2101      	movs	r1, #1
 8017918:	ec59 8b10 	vmov	r8, r9, d0
 801791c:	4616      	mov	r6, r2
 801791e:	f7ff fcd5 	bl	80172cc <_Balloc>
 8017922:	4604      	mov	r4, r0
 8017924:	b930      	cbnz	r0, 8017934 <__d2b+0x24>
 8017926:	4602      	mov	r2, r0
 8017928:	4b24      	ldr	r3, [pc, #144]	; (80179bc <__d2b+0xac>)
 801792a:	4825      	ldr	r0, [pc, #148]	; (80179c0 <__d2b+0xb0>)
 801792c:	f240 310f 	movw	r1, #783	; 0x30f
 8017930:	f000 fa78 	bl	8017e24 <__assert_func>
 8017934:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801793c:	bb2d      	cbnz	r5, 801798a <__d2b+0x7a>
 801793e:	9301      	str	r3, [sp, #4]
 8017940:	f1b8 0300 	subs.w	r3, r8, #0
 8017944:	d026      	beq.n	8017994 <__d2b+0x84>
 8017946:	4668      	mov	r0, sp
 8017948:	9300      	str	r3, [sp, #0]
 801794a:	f7ff fd87 	bl	801745c <__lo0bits>
 801794e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017952:	b1e8      	cbz	r0, 8017990 <__d2b+0x80>
 8017954:	f1c0 0320 	rsb	r3, r0, #32
 8017958:	fa02 f303 	lsl.w	r3, r2, r3
 801795c:	430b      	orrs	r3, r1
 801795e:	40c2      	lsrs	r2, r0
 8017960:	6163      	str	r3, [r4, #20]
 8017962:	9201      	str	r2, [sp, #4]
 8017964:	9b01      	ldr	r3, [sp, #4]
 8017966:	61a3      	str	r3, [r4, #24]
 8017968:	2b00      	cmp	r3, #0
 801796a:	bf14      	ite	ne
 801796c:	2202      	movne	r2, #2
 801796e:	2201      	moveq	r2, #1
 8017970:	6122      	str	r2, [r4, #16]
 8017972:	b1bd      	cbz	r5, 80179a4 <__d2b+0x94>
 8017974:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017978:	4405      	add	r5, r0
 801797a:	603d      	str	r5, [r7, #0]
 801797c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017980:	6030      	str	r0, [r6, #0]
 8017982:	4620      	mov	r0, r4
 8017984:	b003      	add	sp, #12
 8017986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801798a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801798e:	e7d6      	b.n	801793e <__d2b+0x2e>
 8017990:	6161      	str	r1, [r4, #20]
 8017992:	e7e7      	b.n	8017964 <__d2b+0x54>
 8017994:	a801      	add	r0, sp, #4
 8017996:	f7ff fd61 	bl	801745c <__lo0bits>
 801799a:	9b01      	ldr	r3, [sp, #4]
 801799c:	6163      	str	r3, [r4, #20]
 801799e:	3020      	adds	r0, #32
 80179a0:	2201      	movs	r2, #1
 80179a2:	e7e5      	b.n	8017970 <__d2b+0x60>
 80179a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80179a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80179ac:	6038      	str	r0, [r7, #0]
 80179ae:	6918      	ldr	r0, [r3, #16]
 80179b0:	f7ff fd34 	bl	801741c <__hi0bits>
 80179b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80179b8:	e7e2      	b.n	8017980 <__d2b+0x70>
 80179ba:	bf00      	nop
 80179bc:	0801b1a8 	.word	0x0801b1a8
 80179c0:	0801b1b9 	.word	0x0801b1b9

080179c4 <__ssputs_r>:
 80179c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179c8:	688e      	ldr	r6, [r1, #8]
 80179ca:	461f      	mov	r7, r3
 80179cc:	42be      	cmp	r6, r7
 80179ce:	680b      	ldr	r3, [r1, #0]
 80179d0:	4682      	mov	sl, r0
 80179d2:	460c      	mov	r4, r1
 80179d4:	4690      	mov	r8, r2
 80179d6:	d82c      	bhi.n	8017a32 <__ssputs_r+0x6e>
 80179d8:	898a      	ldrh	r2, [r1, #12]
 80179da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80179de:	d026      	beq.n	8017a2e <__ssputs_r+0x6a>
 80179e0:	6965      	ldr	r5, [r4, #20]
 80179e2:	6909      	ldr	r1, [r1, #16]
 80179e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179e8:	eba3 0901 	sub.w	r9, r3, r1
 80179ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179f0:	1c7b      	adds	r3, r7, #1
 80179f2:	444b      	add	r3, r9
 80179f4:	106d      	asrs	r5, r5, #1
 80179f6:	429d      	cmp	r5, r3
 80179f8:	bf38      	it	cc
 80179fa:	461d      	movcc	r5, r3
 80179fc:	0553      	lsls	r3, r2, #21
 80179fe:	d527      	bpl.n	8017a50 <__ssputs_r+0x8c>
 8017a00:	4629      	mov	r1, r5
 8017a02:	f7ff fbd7 	bl	80171b4 <_malloc_r>
 8017a06:	4606      	mov	r6, r0
 8017a08:	b360      	cbz	r0, 8017a64 <__ssputs_r+0xa0>
 8017a0a:	6921      	ldr	r1, [r4, #16]
 8017a0c:	464a      	mov	r2, r9
 8017a0e:	f7fe fcd2 	bl	80163b6 <memcpy>
 8017a12:	89a3      	ldrh	r3, [r4, #12]
 8017a14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a1c:	81a3      	strh	r3, [r4, #12]
 8017a1e:	6126      	str	r6, [r4, #16]
 8017a20:	6165      	str	r5, [r4, #20]
 8017a22:	444e      	add	r6, r9
 8017a24:	eba5 0509 	sub.w	r5, r5, r9
 8017a28:	6026      	str	r6, [r4, #0]
 8017a2a:	60a5      	str	r5, [r4, #8]
 8017a2c:	463e      	mov	r6, r7
 8017a2e:	42be      	cmp	r6, r7
 8017a30:	d900      	bls.n	8017a34 <__ssputs_r+0x70>
 8017a32:	463e      	mov	r6, r7
 8017a34:	6820      	ldr	r0, [r4, #0]
 8017a36:	4632      	mov	r2, r6
 8017a38:	4641      	mov	r1, r8
 8017a3a:	f000 f9c9 	bl	8017dd0 <memmove>
 8017a3e:	68a3      	ldr	r3, [r4, #8]
 8017a40:	1b9b      	subs	r3, r3, r6
 8017a42:	60a3      	str	r3, [r4, #8]
 8017a44:	6823      	ldr	r3, [r4, #0]
 8017a46:	4433      	add	r3, r6
 8017a48:	6023      	str	r3, [r4, #0]
 8017a4a:	2000      	movs	r0, #0
 8017a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a50:	462a      	mov	r2, r5
 8017a52:	f000 fa2d 	bl	8017eb0 <_realloc_r>
 8017a56:	4606      	mov	r6, r0
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	d1e0      	bne.n	8017a1e <__ssputs_r+0x5a>
 8017a5c:	6921      	ldr	r1, [r4, #16]
 8017a5e:	4650      	mov	r0, sl
 8017a60:	f7ff fb34 	bl	80170cc <_free_r>
 8017a64:	230c      	movs	r3, #12
 8017a66:	f8ca 3000 	str.w	r3, [sl]
 8017a6a:	89a3      	ldrh	r3, [r4, #12]
 8017a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a70:	81a3      	strh	r3, [r4, #12]
 8017a72:	f04f 30ff 	mov.w	r0, #4294967295
 8017a76:	e7e9      	b.n	8017a4c <__ssputs_r+0x88>

08017a78 <_svfiprintf_r>:
 8017a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a7c:	4698      	mov	r8, r3
 8017a7e:	898b      	ldrh	r3, [r1, #12]
 8017a80:	061b      	lsls	r3, r3, #24
 8017a82:	b09d      	sub	sp, #116	; 0x74
 8017a84:	4607      	mov	r7, r0
 8017a86:	460d      	mov	r5, r1
 8017a88:	4614      	mov	r4, r2
 8017a8a:	d50e      	bpl.n	8017aaa <_svfiprintf_r+0x32>
 8017a8c:	690b      	ldr	r3, [r1, #16]
 8017a8e:	b963      	cbnz	r3, 8017aaa <_svfiprintf_r+0x32>
 8017a90:	2140      	movs	r1, #64	; 0x40
 8017a92:	f7ff fb8f 	bl	80171b4 <_malloc_r>
 8017a96:	6028      	str	r0, [r5, #0]
 8017a98:	6128      	str	r0, [r5, #16]
 8017a9a:	b920      	cbnz	r0, 8017aa6 <_svfiprintf_r+0x2e>
 8017a9c:	230c      	movs	r3, #12
 8017a9e:	603b      	str	r3, [r7, #0]
 8017aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa4:	e0d0      	b.n	8017c48 <_svfiprintf_r+0x1d0>
 8017aa6:	2340      	movs	r3, #64	; 0x40
 8017aa8:	616b      	str	r3, [r5, #20]
 8017aaa:	2300      	movs	r3, #0
 8017aac:	9309      	str	r3, [sp, #36]	; 0x24
 8017aae:	2320      	movs	r3, #32
 8017ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ab8:	2330      	movs	r3, #48	; 0x30
 8017aba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017c60 <_svfiprintf_r+0x1e8>
 8017abe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ac2:	f04f 0901 	mov.w	r9, #1
 8017ac6:	4623      	mov	r3, r4
 8017ac8:	469a      	mov	sl, r3
 8017aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ace:	b10a      	cbz	r2, 8017ad4 <_svfiprintf_r+0x5c>
 8017ad0:	2a25      	cmp	r2, #37	; 0x25
 8017ad2:	d1f9      	bne.n	8017ac8 <_svfiprintf_r+0x50>
 8017ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8017ad8:	d00b      	beq.n	8017af2 <_svfiprintf_r+0x7a>
 8017ada:	465b      	mov	r3, fp
 8017adc:	4622      	mov	r2, r4
 8017ade:	4629      	mov	r1, r5
 8017ae0:	4638      	mov	r0, r7
 8017ae2:	f7ff ff6f 	bl	80179c4 <__ssputs_r>
 8017ae6:	3001      	adds	r0, #1
 8017ae8:	f000 80a9 	beq.w	8017c3e <_svfiprintf_r+0x1c6>
 8017aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017aee:	445a      	add	r2, fp
 8017af0:	9209      	str	r2, [sp, #36]	; 0x24
 8017af2:	f89a 3000 	ldrb.w	r3, [sl]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	f000 80a1 	beq.w	8017c3e <_svfiprintf_r+0x1c6>
 8017afc:	2300      	movs	r3, #0
 8017afe:	f04f 32ff 	mov.w	r2, #4294967295
 8017b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b06:	f10a 0a01 	add.w	sl, sl, #1
 8017b0a:	9304      	str	r3, [sp, #16]
 8017b0c:	9307      	str	r3, [sp, #28]
 8017b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b12:	931a      	str	r3, [sp, #104]	; 0x68
 8017b14:	4654      	mov	r4, sl
 8017b16:	2205      	movs	r2, #5
 8017b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b1c:	4850      	ldr	r0, [pc, #320]	; (8017c60 <_svfiprintf_r+0x1e8>)
 8017b1e:	f7e8 fb7f 	bl	8000220 <memchr>
 8017b22:	9a04      	ldr	r2, [sp, #16]
 8017b24:	b9d8      	cbnz	r0, 8017b5e <_svfiprintf_r+0xe6>
 8017b26:	06d0      	lsls	r0, r2, #27
 8017b28:	bf44      	itt	mi
 8017b2a:	2320      	movmi	r3, #32
 8017b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b30:	0711      	lsls	r1, r2, #28
 8017b32:	bf44      	itt	mi
 8017b34:	232b      	movmi	r3, #43	; 0x2b
 8017b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8017b40:	d015      	beq.n	8017b6e <_svfiprintf_r+0xf6>
 8017b42:	9a07      	ldr	r2, [sp, #28]
 8017b44:	4654      	mov	r4, sl
 8017b46:	2000      	movs	r0, #0
 8017b48:	f04f 0c0a 	mov.w	ip, #10
 8017b4c:	4621      	mov	r1, r4
 8017b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b52:	3b30      	subs	r3, #48	; 0x30
 8017b54:	2b09      	cmp	r3, #9
 8017b56:	d94d      	bls.n	8017bf4 <_svfiprintf_r+0x17c>
 8017b58:	b1b0      	cbz	r0, 8017b88 <_svfiprintf_r+0x110>
 8017b5a:	9207      	str	r2, [sp, #28]
 8017b5c:	e014      	b.n	8017b88 <_svfiprintf_r+0x110>
 8017b5e:	eba0 0308 	sub.w	r3, r0, r8
 8017b62:	fa09 f303 	lsl.w	r3, r9, r3
 8017b66:	4313      	orrs	r3, r2
 8017b68:	9304      	str	r3, [sp, #16]
 8017b6a:	46a2      	mov	sl, r4
 8017b6c:	e7d2      	b.n	8017b14 <_svfiprintf_r+0x9c>
 8017b6e:	9b03      	ldr	r3, [sp, #12]
 8017b70:	1d19      	adds	r1, r3, #4
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	9103      	str	r1, [sp, #12]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	bfbb      	ittet	lt
 8017b7a:	425b      	neglt	r3, r3
 8017b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8017b80:	9307      	strge	r3, [sp, #28]
 8017b82:	9307      	strlt	r3, [sp, #28]
 8017b84:	bfb8      	it	lt
 8017b86:	9204      	strlt	r2, [sp, #16]
 8017b88:	7823      	ldrb	r3, [r4, #0]
 8017b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8017b8c:	d10c      	bne.n	8017ba8 <_svfiprintf_r+0x130>
 8017b8e:	7863      	ldrb	r3, [r4, #1]
 8017b90:	2b2a      	cmp	r3, #42	; 0x2a
 8017b92:	d134      	bne.n	8017bfe <_svfiprintf_r+0x186>
 8017b94:	9b03      	ldr	r3, [sp, #12]
 8017b96:	1d1a      	adds	r2, r3, #4
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	9203      	str	r2, [sp, #12]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	bfb8      	it	lt
 8017ba0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ba4:	3402      	adds	r4, #2
 8017ba6:	9305      	str	r3, [sp, #20]
 8017ba8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017c70 <_svfiprintf_r+0x1f8>
 8017bac:	7821      	ldrb	r1, [r4, #0]
 8017bae:	2203      	movs	r2, #3
 8017bb0:	4650      	mov	r0, sl
 8017bb2:	f7e8 fb35 	bl	8000220 <memchr>
 8017bb6:	b138      	cbz	r0, 8017bc8 <_svfiprintf_r+0x150>
 8017bb8:	9b04      	ldr	r3, [sp, #16]
 8017bba:	eba0 000a 	sub.w	r0, r0, sl
 8017bbe:	2240      	movs	r2, #64	; 0x40
 8017bc0:	4082      	lsls	r2, r0
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	3401      	adds	r4, #1
 8017bc6:	9304      	str	r3, [sp, #16]
 8017bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bcc:	4825      	ldr	r0, [pc, #148]	; (8017c64 <_svfiprintf_r+0x1ec>)
 8017bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bd2:	2206      	movs	r2, #6
 8017bd4:	f7e8 fb24 	bl	8000220 <memchr>
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	d038      	beq.n	8017c4e <_svfiprintf_r+0x1d6>
 8017bdc:	4b22      	ldr	r3, [pc, #136]	; (8017c68 <_svfiprintf_r+0x1f0>)
 8017bde:	bb1b      	cbnz	r3, 8017c28 <_svfiprintf_r+0x1b0>
 8017be0:	9b03      	ldr	r3, [sp, #12]
 8017be2:	3307      	adds	r3, #7
 8017be4:	f023 0307 	bic.w	r3, r3, #7
 8017be8:	3308      	adds	r3, #8
 8017bea:	9303      	str	r3, [sp, #12]
 8017bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bee:	4433      	add	r3, r6
 8017bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8017bf2:	e768      	b.n	8017ac6 <_svfiprintf_r+0x4e>
 8017bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bf8:	460c      	mov	r4, r1
 8017bfa:	2001      	movs	r0, #1
 8017bfc:	e7a6      	b.n	8017b4c <_svfiprintf_r+0xd4>
 8017bfe:	2300      	movs	r3, #0
 8017c00:	3401      	adds	r4, #1
 8017c02:	9305      	str	r3, [sp, #20]
 8017c04:	4619      	mov	r1, r3
 8017c06:	f04f 0c0a 	mov.w	ip, #10
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c10:	3a30      	subs	r2, #48	; 0x30
 8017c12:	2a09      	cmp	r2, #9
 8017c14:	d903      	bls.n	8017c1e <_svfiprintf_r+0x1a6>
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d0c6      	beq.n	8017ba8 <_svfiprintf_r+0x130>
 8017c1a:	9105      	str	r1, [sp, #20]
 8017c1c:	e7c4      	b.n	8017ba8 <_svfiprintf_r+0x130>
 8017c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c22:	4604      	mov	r4, r0
 8017c24:	2301      	movs	r3, #1
 8017c26:	e7f0      	b.n	8017c0a <_svfiprintf_r+0x192>
 8017c28:	ab03      	add	r3, sp, #12
 8017c2a:	9300      	str	r3, [sp, #0]
 8017c2c:	462a      	mov	r2, r5
 8017c2e:	4b0f      	ldr	r3, [pc, #60]	; (8017c6c <_svfiprintf_r+0x1f4>)
 8017c30:	a904      	add	r1, sp, #16
 8017c32:	4638      	mov	r0, r7
 8017c34:	f7fd fe54 	bl	80158e0 <_printf_float>
 8017c38:	1c42      	adds	r2, r0, #1
 8017c3a:	4606      	mov	r6, r0
 8017c3c:	d1d6      	bne.n	8017bec <_svfiprintf_r+0x174>
 8017c3e:	89ab      	ldrh	r3, [r5, #12]
 8017c40:	065b      	lsls	r3, r3, #25
 8017c42:	f53f af2d 	bmi.w	8017aa0 <_svfiprintf_r+0x28>
 8017c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c48:	b01d      	add	sp, #116	; 0x74
 8017c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4e:	ab03      	add	r3, sp, #12
 8017c50:	9300      	str	r3, [sp, #0]
 8017c52:	462a      	mov	r2, r5
 8017c54:	4b05      	ldr	r3, [pc, #20]	; (8017c6c <_svfiprintf_r+0x1f4>)
 8017c56:	a904      	add	r1, sp, #16
 8017c58:	4638      	mov	r0, r7
 8017c5a:	f7fe f8e5 	bl	8015e28 <_printf_i>
 8017c5e:	e7eb      	b.n	8017c38 <_svfiprintf_r+0x1c0>
 8017c60:	0801b314 	.word	0x0801b314
 8017c64:	0801b31e 	.word	0x0801b31e
 8017c68:	080158e1 	.word	0x080158e1
 8017c6c:	080179c5 	.word	0x080179c5
 8017c70:	0801b31a 	.word	0x0801b31a

08017c74 <__sflush_r>:
 8017c74:	898a      	ldrh	r2, [r1, #12]
 8017c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c7a:	4605      	mov	r5, r0
 8017c7c:	0710      	lsls	r0, r2, #28
 8017c7e:	460c      	mov	r4, r1
 8017c80:	d458      	bmi.n	8017d34 <__sflush_r+0xc0>
 8017c82:	684b      	ldr	r3, [r1, #4]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	dc05      	bgt.n	8017c94 <__sflush_r+0x20>
 8017c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	dc02      	bgt.n	8017c94 <__sflush_r+0x20>
 8017c8e:	2000      	movs	r0, #0
 8017c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017c96:	2e00      	cmp	r6, #0
 8017c98:	d0f9      	beq.n	8017c8e <__sflush_r+0x1a>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ca0:	682f      	ldr	r7, [r5, #0]
 8017ca2:	6a21      	ldr	r1, [r4, #32]
 8017ca4:	602b      	str	r3, [r5, #0]
 8017ca6:	d032      	beq.n	8017d0e <__sflush_r+0x9a>
 8017ca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017caa:	89a3      	ldrh	r3, [r4, #12]
 8017cac:	075a      	lsls	r2, r3, #29
 8017cae:	d505      	bpl.n	8017cbc <__sflush_r+0x48>
 8017cb0:	6863      	ldr	r3, [r4, #4]
 8017cb2:	1ac0      	subs	r0, r0, r3
 8017cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017cb6:	b10b      	cbz	r3, 8017cbc <__sflush_r+0x48>
 8017cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017cba:	1ac0      	subs	r0, r0, r3
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	4602      	mov	r2, r0
 8017cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017cc2:	6a21      	ldr	r1, [r4, #32]
 8017cc4:	4628      	mov	r0, r5
 8017cc6:	47b0      	blx	r6
 8017cc8:	1c43      	adds	r3, r0, #1
 8017cca:	89a3      	ldrh	r3, [r4, #12]
 8017ccc:	d106      	bne.n	8017cdc <__sflush_r+0x68>
 8017cce:	6829      	ldr	r1, [r5, #0]
 8017cd0:	291d      	cmp	r1, #29
 8017cd2:	d82b      	bhi.n	8017d2c <__sflush_r+0xb8>
 8017cd4:	4a29      	ldr	r2, [pc, #164]	; (8017d7c <__sflush_r+0x108>)
 8017cd6:	410a      	asrs	r2, r1
 8017cd8:	07d6      	lsls	r6, r2, #31
 8017cda:	d427      	bmi.n	8017d2c <__sflush_r+0xb8>
 8017cdc:	2200      	movs	r2, #0
 8017cde:	6062      	str	r2, [r4, #4]
 8017ce0:	04d9      	lsls	r1, r3, #19
 8017ce2:	6922      	ldr	r2, [r4, #16]
 8017ce4:	6022      	str	r2, [r4, #0]
 8017ce6:	d504      	bpl.n	8017cf2 <__sflush_r+0x7e>
 8017ce8:	1c42      	adds	r2, r0, #1
 8017cea:	d101      	bne.n	8017cf0 <__sflush_r+0x7c>
 8017cec:	682b      	ldr	r3, [r5, #0]
 8017cee:	b903      	cbnz	r3, 8017cf2 <__sflush_r+0x7e>
 8017cf0:	6560      	str	r0, [r4, #84]	; 0x54
 8017cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017cf4:	602f      	str	r7, [r5, #0]
 8017cf6:	2900      	cmp	r1, #0
 8017cf8:	d0c9      	beq.n	8017c8e <__sflush_r+0x1a>
 8017cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017cfe:	4299      	cmp	r1, r3
 8017d00:	d002      	beq.n	8017d08 <__sflush_r+0x94>
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7ff f9e2 	bl	80170cc <_free_r>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	6360      	str	r0, [r4, #52]	; 0x34
 8017d0c:	e7c0      	b.n	8017c90 <__sflush_r+0x1c>
 8017d0e:	2301      	movs	r3, #1
 8017d10:	4628      	mov	r0, r5
 8017d12:	47b0      	blx	r6
 8017d14:	1c41      	adds	r1, r0, #1
 8017d16:	d1c8      	bne.n	8017caa <__sflush_r+0x36>
 8017d18:	682b      	ldr	r3, [r5, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d0c5      	beq.n	8017caa <__sflush_r+0x36>
 8017d1e:	2b1d      	cmp	r3, #29
 8017d20:	d001      	beq.n	8017d26 <__sflush_r+0xb2>
 8017d22:	2b16      	cmp	r3, #22
 8017d24:	d101      	bne.n	8017d2a <__sflush_r+0xb6>
 8017d26:	602f      	str	r7, [r5, #0]
 8017d28:	e7b1      	b.n	8017c8e <__sflush_r+0x1a>
 8017d2a:	89a3      	ldrh	r3, [r4, #12]
 8017d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d30:	81a3      	strh	r3, [r4, #12]
 8017d32:	e7ad      	b.n	8017c90 <__sflush_r+0x1c>
 8017d34:	690f      	ldr	r7, [r1, #16]
 8017d36:	2f00      	cmp	r7, #0
 8017d38:	d0a9      	beq.n	8017c8e <__sflush_r+0x1a>
 8017d3a:	0793      	lsls	r3, r2, #30
 8017d3c:	680e      	ldr	r6, [r1, #0]
 8017d3e:	bf08      	it	eq
 8017d40:	694b      	ldreq	r3, [r1, #20]
 8017d42:	600f      	str	r7, [r1, #0]
 8017d44:	bf18      	it	ne
 8017d46:	2300      	movne	r3, #0
 8017d48:	eba6 0807 	sub.w	r8, r6, r7
 8017d4c:	608b      	str	r3, [r1, #8]
 8017d4e:	f1b8 0f00 	cmp.w	r8, #0
 8017d52:	dd9c      	ble.n	8017c8e <__sflush_r+0x1a>
 8017d54:	6a21      	ldr	r1, [r4, #32]
 8017d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017d58:	4643      	mov	r3, r8
 8017d5a:	463a      	mov	r2, r7
 8017d5c:	4628      	mov	r0, r5
 8017d5e:	47b0      	blx	r6
 8017d60:	2800      	cmp	r0, #0
 8017d62:	dc06      	bgt.n	8017d72 <__sflush_r+0xfe>
 8017d64:	89a3      	ldrh	r3, [r4, #12]
 8017d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d6a:	81a3      	strh	r3, [r4, #12]
 8017d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d70:	e78e      	b.n	8017c90 <__sflush_r+0x1c>
 8017d72:	4407      	add	r7, r0
 8017d74:	eba8 0800 	sub.w	r8, r8, r0
 8017d78:	e7e9      	b.n	8017d4e <__sflush_r+0xda>
 8017d7a:	bf00      	nop
 8017d7c:	dfbffffe 	.word	0xdfbffffe

08017d80 <_fflush_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	690b      	ldr	r3, [r1, #16]
 8017d84:	4605      	mov	r5, r0
 8017d86:	460c      	mov	r4, r1
 8017d88:	b913      	cbnz	r3, 8017d90 <_fflush_r+0x10>
 8017d8a:	2500      	movs	r5, #0
 8017d8c:	4628      	mov	r0, r5
 8017d8e:	bd38      	pop	{r3, r4, r5, pc}
 8017d90:	b118      	cbz	r0, 8017d9a <_fflush_r+0x1a>
 8017d92:	6a03      	ldr	r3, [r0, #32]
 8017d94:	b90b      	cbnz	r3, 8017d9a <_fflush_r+0x1a>
 8017d96:	f7fe f9f5 	bl	8016184 <__sinit>
 8017d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d0f3      	beq.n	8017d8a <_fflush_r+0xa>
 8017da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017da4:	07d0      	lsls	r0, r2, #31
 8017da6:	d404      	bmi.n	8017db2 <_fflush_r+0x32>
 8017da8:	0599      	lsls	r1, r3, #22
 8017daa:	d402      	bmi.n	8017db2 <_fflush_r+0x32>
 8017dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017dae:	f7fe fb00 	bl	80163b2 <__retarget_lock_acquire_recursive>
 8017db2:	4628      	mov	r0, r5
 8017db4:	4621      	mov	r1, r4
 8017db6:	f7ff ff5d 	bl	8017c74 <__sflush_r>
 8017dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017dbc:	07da      	lsls	r2, r3, #31
 8017dbe:	4605      	mov	r5, r0
 8017dc0:	d4e4      	bmi.n	8017d8c <_fflush_r+0xc>
 8017dc2:	89a3      	ldrh	r3, [r4, #12]
 8017dc4:	059b      	lsls	r3, r3, #22
 8017dc6:	d4e1      	bmi.n	8017d8c <_fflush_r+0xc>
 8017dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017dca:	f7fe faf3 	bl	80163b4 <__retarget_lock_release_recursive>
 8017dce:	e7dd      	b.n	8017d8c <_fflush_r+0xc>

08017dd0 <memmove>:
 8017dd0:	4288      	cmp	r0, r1
 8017dd2:	b510      	push	{r4, lr}
 8017dd4:	eb01 0402 	add.w	r4, r1, r2
 8017dd8:	d902      	bls.n	8017de0 <memmove+0x10>
 8017dda:	4284      	cmp	r4, r0
 8017ddc:	4623      	mov	r3, r4
 8017dde:	d807      	bhi.n	8017df0 <memmove+0x20>
 8017de0:	1e43      	subs	r3, r0, #1
 8017de2:	42a1      	cmp	r1, r4
 8017de4:	d008      	beq.n	8017df8 <memmove+0x28>
 8017de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017dee:	e7f8      	b.n	8017de2 <memmove+0x12>
 8017df0:	4402      	add	r2, r0
 8017df2:	4601      	mov	r1, r0
 8017df4:	428a      	cmp	r2, r1
 8017df6:	d100      	bne.n	8017dfa <memmove+0x2a>
 8017df8:	bd10      	pop	{r4, pc}
 8017dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e02:	e7f7      	b.n	8017df4 <memmove+0x24>

08017e04 <_sbrk_r>:
 8017e04:	b538      	push	{r3, r4, r5, lr}
 8017e06:	4d06      	ldr	r5, [pc, #24]	; (8017e20 <_sbrk_r+0x1c>)
 8017e08:	2300      	movs	r3, #0
 8017e0a:	4604      	mov	r4, r0
 8017e0c:	4608      	mov	r0, r1
 8017e0e:	602b      	str	r3, [r5, #0]
 8017e10:	f7ed fa3a 	bl	8005288 <_sbrk>
 8017e14:	1c43      	adds	r3, r0, #1
 8017e16:	d102      	bne.n	8017e1e <_sbrk_r+0x1a>
 8017e18:	682b      	ldr	r3, [r5, #0]
 8017e1a:	b103      	cbz	r3, 8017e1e <_sbrk_r+0x1a>
 8017e1c:	6023      	str	r3, [r4, #0]
 8017e1e:	bd38      	pop	{r3, r4, r5, pc}
 8017e20:	200033b8 	.word	0x200033b8

08017e24 <__assert_func>:
 8017e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e26:	4614      	mov	r4, r2
 8017e28:	461a      	mov	r2, r3
 8017e2a:	4b09      	ldr	r3, [pc, #36]	; (8017e50 <__assert_func+0x2c>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	4605      	mov	r5, r0
 8017e30:	68d8      	ldr	r0, [r3, #12]
 8017e32:	b14c      	cbz	r4, 8017e48 <__assert_func+0x24>
 8017e34:	4b07      	ldr	r3, [pc, #28]	; (8017e54 <__assert_func+0x30>)
 8017e36:	9100      	str	r1, [sp, #0]
 8017e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017e3c:	4906      	ldr	r1, [pc, #24]	; (8017e58 <__assert_func+0x34>)
 8017e3e:	462b      	mov	r3, r5
 8017e40:	f000 f872 	bl	8017f28 <fiprintf>
 8017e44:	f000 f882 	bl	8017f4c <abort>
 8017e48:	4b04      	ldr	r3, [pc, #16]	; (8017e5c <__assert_func+0x38>)
 8017e4a:	461c      	mov	r4, r3
 8017e4c:	e7f3      	b.n	8017e36 <__assert_func+0x12>
 8017e4e:	bf00      	nop
 8017e50:	200003c8 	.word	0x200003c8
 8017e54:	0801b32f 	.word	0x0801b32f
 8017e58:	0801b33c 	.word	0x0801b33c
 8017e5c:	0801b36a 	.word	0x0801b36a

08017e60 <_calloc_r>:
 8017e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e62:	fba1 2402 	umull	r2, r4, r1, r2
 8017e66:	b94c      	cbnz	r4, 8017e7c <_calloc_r+0x1c>
 8017e68:	4611      	mov	r1, r2
 8017e6a:	9201      	str	r2, [sp, #4]
 8017e6c:	f7ff f9a2 	bl	80171b4 <_malloc_r>
 8017e70:	9a01      	ldr	r2, [sp, #4]
 8017e72:	4605      	mov	r5, r0
 8017e74:	b930      	cbnz	r0, 8017e84 <_calloc_r+0x24>
 8017e76:	4628      	mov	r0, r5
 8017e78:	b003      	add	sp, #12
 8017e7a:	bd30      	pop	{r4, r5, pc}
 8017e7c:	220c      	movs	r2, #12
 8017e7e:	6002      	str	r2, [r0, #0]
 8017e80:	2500      	movs	r5, #0
 8017e82:	e7f8      	b.n	8017e76 <_calloc_r+0x16>
 8017e84:	4621      	mov	r1, r4
 8017e86:	f7fe fa16 	bl	80162b6 <memset>
 8017e8a:	e7f4      	b.n	8017e76 <_calloc_r+0x16>

08017e8c <__ascii_mbtowc>:
 8017e8c:	b082      	sub	sp, #8
 8017e8e:	b901      	cbnz	r1, 8017e92 <__ascii_mbtowc+0x6>
 8017e90:	a901      	add	r1, sp, #4
 8017e92:	b142      	cbz	r2, 8017ea6 <__ascii_mbtowc+0x1a>
 8017e94:	b14b      	cbz	r3, 8017eaa <__ascii_mbtowc+0x1e>
 8017e96:	7813      	ldrb	r3, [r2, #0]
 8017e98:	600b      	str	r3, [r1, #0]
 8017e9a:	7812      	ldrb	r2, [r2, #0]
 8017e9c:	1e10      	subs	r0, r2, #0
 8017e9e:	bf18      	it	ne
 8017ea0:	2001      	movne	r0, #1
 8017ea2:	b002      	add	sp, #8
 8017ea4:	4770      	bx	lr
 8017ea6:	4610      	mov	r0, r2
 8017ea8:	e7fb      	b.n	8017ea2 <__ascii_mbtowc+0x16>
 8017eaa:	f06f 0001 	mvn.w	r0, #1
 8017eae:	e7f8      	b.n	8017ea2 <__ascii_mbtowc+0x16>

08017eb0 <_realloc_r>:
 8017eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eb4:	4680      	mov	r8, r0
 8017eb6:	4614      	mov	r4, r2
 8017eb8:	460e      	mov	r6, r1
 8017eba:	b921      	cbnz	r1, 8017ec6 <_realloc_r+0x16>
 8017ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec0:	4611      	mov	r1, r2
 8017ec2:	f7ff b977 	b.w	80171b4 <_malloc_r>
 8017ec6:	b92a      	cbnz	r2, 8017ed4 <_realloc_r+0x24>
 8017ec8:	f7ff f900 	bl	80170cc <_free_r>
 8017ecc:	4625      	mov	r5, r4
 8017ece:	4628      	mov	r0, r5
 8017ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed4:	f000 f841 	bl	8017f5a <_malloc_usable_size_r>
 8017ed8:	4284      	cmp	r4, r0
 8017eda:	4607      	mov	r7, r0
 8017edc:	d802      	bhi.n	8017ee4 <_realloc_r+0x34>
 8017ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017ee2:	d812      	bhi.n	8017f0a <_realloc_r+0x5a>
 8017ee4:	4621      	mov	r1, r4
 8017ee6:	4640      	mov	r0, r8
 8017ee8:	f7ff f964 	bl	80171b4 <_malloc_r>
 8017eec:	4605      	mov	r5, r0
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	d0ed      	beq.n	8017ece <_realloc_r+0x1e>
 8017ef2:	42bc      	cmp	r4, r7
 8017ef4:	4622      	mov	r2, r4
 8017ef6:	4631      	mov	r1, r6
 8017ef8:	bf28      	it	cs
 8017efa:	463a      	movcs	r2, r7
 8017efc:	f7fe fa5b 	bl	80163b6 <memcpy>
 8017f00:	4631      	mov	r1, r6
 8017f02:	4640      	mov	r0, r8
 8017f04:	f7ff f8e2 	bl	80170cc <_free_r>
 8017f08:	e7e1      	b.n	8017ece <_realloc_r+0x1e>
 8017f0a:	4635      	mov	r5, r6
 8017f0c:	e7df      	b.n	8017ece <_realloc_r+0x1e>

08017f0e <__ascii_wctomb>:
 8017f0e:	b149      	cbz	r1, 8017f24 <__ascii_wctomb+0x16>
 8017f10:	2aff      	cmp	r2, #255	; 0xff
 8017f12:	bf85      	ittet	hi
 8017f14:	238a      	movhi	r3, #138	; 0x8a
 8017f16:	6003      	strhi	r3, [r0, #0]
 8017f18:	700a      	strbls	r2, [r1, #0]
 8017f1a:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f1e:	bf98      	it	ls
 8017f20:	2001      	movls	r0, #1
 8017f22:	4770      	bx	lr
 8017f24:	4608      	mov	r0, r1
 8017f26:	4770      	bx	lr

08017f28 <fiprintf>:
 8017f28:	b40e      	push	{r1, r2, r3}
 8017f2a:	b503      	push	{r0, r1, lr}
 8017f2c:	4601      	mov	r1, r0
 8017f2e:	ab03      	add	r3, sp, #12
 8017f30:	4805      	ldr	r0, [pc, #20]	; (8017f48 <fiprintf+0x20>)
 8017f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f36:	6800      	ldr	r0, [r0, #0]
 8017f38:	9301      	str	r3, [sp, #4]
 8017f3a:	f000 f83f 	bl	8017fbc <_vfiprintf_r>
 8017f3e:	b002      	add	sp, #8
 8017f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f44:	b003      	add	sp, #12
 8017f46:	4770      	bx	lr
 8017f48:	200003c8 	.word	0x200003c8

08017f4c <abort>:
 8017f4c:	b508      	push	{r3, lr}
 8017f4e:	2006      	movs	r0, #6
 8017f50:	f000 fa0c 	bl	801836c <raise>
 8017f54:	2001      	movs	r0, #1
 8017f56:	f7ed f91f 	bl	8005198 <_exit>

08017f5a <_malloc_usable_size_r>:
 8017f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f5e:	1f18      	subs	r0, r3, #4
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	bfbc      	itt	lt
 8017f64:	580b      	ldrlt	r3, [r1, r0]
 8017f66:	18c0      	addlt	r0, r0, r3
 8017f68:	4770      	bx	lr

08017f6a <__sfputc_r>:
 8017f6a:	6893      	ldr	r3, [r2, #8]
 8017f6c:	3b01      	subs	r3, #1
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	b410      	push	{r4}
 8017f72:	6093      	str	r3, [r2, #8]
 8017f74:	da08      	bge.n	8017f88 <__sfputc_r+0x1e>
 8017f76:	6994      	ldr	r4, [r2, #24]
 8017f78:	42a3      	cmp	r3, r4
 8017f7a:	db01      	blt.n	8017f80 <__sfputc_r+0x16>
 8017f7c:	290a      	cmp	r1, #10
 8017f7e:	d103      	bne.n	8017f88 <__sfputc_r+0x1e>
 8017f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f84:	f000 b934 	b.w	80181f0 <__swbuf_r>
 8017f88:	6813      	ldr	r3, [r2, #0]
 8017f8a:	1c58      	adds	r0, r3, #1
 8017f8c:	6010      	str	r0, [r2, #0]
 8017f8e:	7019      	strb	r1, [r3, #0]
 8017f90:	4608      	mov	r0, r1
 8017f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f96:	4770      	bx	lr

08017f98 <__sfputs_r>:
 8017f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	460f      	mov	r7, r1
 8017f9e:	4614      	mov	r4, r2
 8017fa0:	18d5      	adds	r5, r2, r3
 8017fa2:	42ac      	cmp	r4, r5
 8017fa4:	d101      	bne.n	8017faa <__sfputs_r+0x12>
 8017fa6:	2000      	movs	r0, #0
 8017fa8:	e007      	b.n	8017fba <__sfputs_r+0x22>
 8017faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fae:	463a      	mov	r2, r7
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f7ff ffda 	bl	8017f6a <__sfputc_r>
 8017fb6:	1c43      	adds	r3, r0, #1
 8017fb8:	d1f3      	bne.n	8017fa2 <__sfputs_r+0xa>
 8017fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017fbc <_vfiprintf_r>:
 8017fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fc0:	460d      	mov	r5, r1
 8017fc2:	b09d      	sub	sp, #116	; 0x74
 8017fc4:	4614      	mov	r4, r2
 8017fc6:	4698      	mov	r8, r3
 8017fc8:	4606      	mov	r6, r0
 8017fca:	b118      	cbz	r0, 8017fd4 <_vfiprintf_r+0x18>
 8017fcc:	6a03      	ldr	r3, [r0, #32]
 8017fce:	b90b      	cbnz	r3, 8017fd4 <_vfiprintf_r+0x18>
 8017fd0:	f7fe f8d8 	bl	8016184 <__sinit>
 8017fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017fd6:	07d9      	lsls	r1, r3, #31
 8017fd8:	d405      	bmi.n	8017fe6 <_vfiprintf_r+0x2a>
 8017fda:	89ab      	ldrh	r3, [r5, #12]
 8017fdc:	059a      	lsls	r2, r3, #22
 8017fde:	d402      	bmi.n	8017fe6 <_vfiprintf_r+0x2a>
 8017fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017fe2:	f7fe f9e6 	bl	80163b2 <__retarget_lock_acquire_recursive>
 8017fe6:	89ab      	ldrh	r3, [r5, #12]
 8017fe8:	071b      	lsls	r3, r3, #28
 8017fea:	d501      	bpl.n	8017ff0 <_vfiprintf_r+0x34>
 8017fec:	692b      	ldr	r3, [r5, #16]
 8017fee:	b99b      	cbnz	r3, 8018018 <_vfiprintf_r+0x5c>
 8017ff0:	4629      	mov	r1, r5
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	f000 f93a 	bl	801826c <__swsetup_r>
 8017ff8:	b170      	cbz	r0, 8018018 <_vfiprintf_r+0x5c>
 8017ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ffc:	07dc      	lsls	r4, r3, #31
 8017ffe:	d504      	bpl.n	801800a <_vfiprintf_r+0x4e>
 8018000:	f04f 30ff 	mov.w	r0, #4294967295
 8018004:	b01d      	add	sp, #116	; 0x74
 8018006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801800a:	89ab      	ldrh	r3, [r5, #12]
 801800c:	0598      	lsls	r0, r3, #22
 801800e:	d4f7      	bmi.n	8018000 <_vfiprintf_r+0x44>
 8018010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018012:	f7fe f9cf 	bl	80163b4 <__retarget_lock_release_recursive>
 8018016:	e7f3      	b.n	8018000 <_vfiprintf_r+0x44>
 8018018:	2300      	movs	r3, #0
 801801a:	9309      	str	r3, [sp, #36]	; 0x24
 801801c:	2320      	movs	r3, #32
 801801e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018022:	f8cd 800c 	str.w	r8, [sp, #12]
 8018026:	2330      	movs	r3, #48	; 0x30
 8018028:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80181dc <_vfiprintf_r+0x220>
 801802c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018030:	f04f 0901 	mov.w	r9, #1
 8018034:	4623      	mov	r3, r4
 8018036:	469a      	mov	sl, r3
 8018038:	f813 2b01 	ldrb.w	r2, [r3], #1
 801803c:	b10a      	cbz	r2, 8018042 <_vfiprintf_r+0x86>
 801803e:	2a25      	cmp	r2, #37	; 0x25
 8018040:	d1f9      	bne.n	8018036 <_vfiprintf_r+0x7a>
 8018042:	ebba 0b04 	subs.w	fp, sl, r4
 8018046:	d00b      	beq.n	8018060 <_vfiprintf_r+0xa4>
 8018048:	465b      	mov	r3, fp
 801804a:	4622      	mov	r2, r4
 801804c:	4629      	mov	r1, r5
 801804e:	4630      	mov	r0, r6
 8018050:	f7ff ffa2 	bl	8017f98 <__sfputs_r>
 8018054:	3001      	adds	r0, #1
 8018056:	f000 80a9 	beq.w	80181ac <_vfiprintf_r+0x1f0>
 801805a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801805c:	445a      	add	r2, fp
 801805e:	9209      	str	r2, [sp, #36]	; 0x24
 8018060:	f89a 3000 	ldrb.w	r3, [sl]
 8018064:	2b00      	cmp	r3, #0
 8018066:	f000 80a1 	beq.w	80181ac <_vfiprintf_r+0x1f0>
 801806a:	2300      	movs	r3, #0
 801806c:	f04f 32ff 	mov.w	r2, #4294967295
 8018070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018074:	f10a 0a01 	add.w	sl, sl, #1
 8018078:	9304      	str	r3, [sp, #16]
 801807a:	9307      	str	r3, [sp, #28]
 801807c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018080:	931a      	str	r3, [sp, #104]	; 0x68
 8018082:	4654      	mov	r4, sl
 8018084:	2205      	movs	r2, #5
 8018086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801808a:	4854      	ldr	r0, [pc, #336]	; (80181dc <_vfiprintf_r+0x220>)
 801808c:	f7e8 f8c8 	bl	8000220 <memchr>
 8018090:	9a04      	ldr	r2, [sp, #16]
 8018092:	b9d8      	cbnz	r0, 80180cc <_vfiprintf_r+0x110>
 8018094:	06d1      	lsls	r1, r2, #27
 8018096:	bf44      	itt	mi
 8018098:	2320      	movmi	r3, #32
 801809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801809e:	0713      	lsls	r3, r2, #28
 80180a0:	bf44      	itt	mi
 80180a2:	232b      	movmi	r3, #43	; 0x2b
 80180a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180a8:	f89a 3000 	ldrb.w	r3, [sl]
 80180ac:	2b2a      	cmp	r3, #42	; 0x2a
 80180ae:	d015      	beq.n	80180dc <_vfiprintf_r+0x120>
 80180b0:	9a07      	ldr	r2, [sp, #28]
 80180b2:	4654      	mov	r4, sl
 80180b4:	2000      	movs	r0, #0
 80180b6:	f04f 0c0a 	mov.w	ip, #10
 80180ba:	4621      	mov	r1, r4
 80180bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180c0:	3b30      	subs	r3, #48	; 0x30
 80180c2:	2b09      	cmp	r3, #9
 80180c4:	d94d      	bls.n	8018162 <_vfiprintf_r+0x1a6>
 80180c6:	b1b0      	cbz	r0, 80180f6 <_vfiprintf_r+0x13a>
 80180c8:	9207      	str	r2, [sp, #28]
 80180ca:	e014      	b.n	80180f6 <_vfiprintf_r+0x13a>
 80180cc:	eba0 0308 	sub.w	r3, r0, r8
 80180d0:	fa09 f303 	lsl.w	r3, r9, r3
 80180d4:	4313      	orrs	r3, r2
 80180d6:	9304      	str	r3, [sp, #16]
 80180d8:	46a2      	mov	sl, r4
 80180da:	e7d2      	b.n	8018082 <_vfiprintf_r+0xc6>
 80180dc:	9b03      	ldr	r3, [sp, #12]
 80180de:	1d19      	adds	r1, r3, #4
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	9103      	str	r1, [sp, #12]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	bfbb      	ittet	lt
 80180e8:	425b      	neglt	r3, r3
 80180ea:	f042 0202 	orrlt.w	r2, r2, #2
 80180ee:	9307      	strge	r3, [sp, #28]
 80180f0:	9307      	strlt	r3, [sp, #28]
 80180f2:	bfb8      	it	lt
 80180f4:	9204      	strlt	r2, [sp, #16]
 80180f6:	7823      	ldrb	r3, [r4, #0]
 80180f8:	2b2e      	cmp	r3, #46	; 0x2e
 80180fa:	d10c      	bne.n	8018116 <_vfiprintf_r+0x15a>
 80180fc:	7863      	ldrb	r3, [r4, #1]
 80180fe:	2b2a      	cmp	r3, #42	; 0x2a
 8018100:	d134      	bne.n	801816c <_vfiprintf_r+0x1b0>
 8018102:	9b03      	ldr	r3, [sp, #12]
 8018104:	1d1a      	adds	r2, r3, #4
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	9203      	str	r2, [sp, #12]
 801810a:	2b00      	cmp	r3, #0
 801810c:	bfb8      	it	lt
 801810e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018112:	3402      	adds	r4, #2
 8018114:	9305      	str	r3, [sp, #20]
 8018116:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80181ec <_vfiprintf_r+0x230>
 801811a:	7821      	ldrb	r1, [r4, #0]
 801811c:	2203      	movs	r2, #3
 801811e:	4650      	mov	r0, sl
 8018120:	f7e8 f87e 	bl	8000220 <memchr>
 8018124:	b138      	cbz	r0, 8018136 <_vfiprintf_r+0x17a>
 8018126:	9b04      	ldr	r3, [sp, #16]
 8018128:	eba0 000a 	sub.w	r0, r0, sl
 801812c:	2240      	movs	r2, #64	; 0x40
 801812e:	4082      	lsls	r2, r0
 8018130:	4313      	orrs	r3, r2
 8018132:	3401      	adds	r4, #1
 8018134:	9304      	str	r3, [sp, #16]
 8018136:	f814 1b01 	ldrb.w	r1, [r4], #1
 801813a:	4829      	ldr	r0, [pc, #164]	; (80181e0 <_vfiprintf_r+0x224>)
 801813c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018140:	2206      	movs	r2, #6
 8018142:	f7e8 f86d 	bl	8000220 <memchr>
 8018146:	2800      	cmp	r0, #0
 8018148:	d03f      	beq.n	80181ca <_vfiprintf_r+0x20e>
 801814a:	4b26      	ldr	r3, [pc, #152]	; (80181e4 <_vfiprintf_r+0x228>)
 801814c:	bb1b      	cbnz	r3, 8018196 <_vfiprintf_r+0x1da>
 801814e:	9b03      	ldr	r3, [sp, #12]
 8018150:	3307      	adds	r3, #7
 8018152:	f023 0307 	bic.w	r3, r3, #7
 8018156:	3308      	adds	r3, #8
 8018158:	9303      	str	r3, [sp, #12]
 801815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801815c:	443b      	add	r3, r7
 801815e:	9309      	str	r3, [sp, #36]	; 0x24
 8018160:	e768      	b.n	8018034 <_vfiprintf_r+0x78>
 8018162:	fb0c 3202 	mla	r2, ip, r2, r3
 8018166:	460c      	mov	r4, r1
 8018168:	2001      	movs	r0, #1
 801816a:	e7a6      	b.n	80180ba <_vfiprintf_r+0xfe>
 801816c:	2300      	movs	r3, #0
 801816e:	3401      	adds	r4, #1
 8018170:	9305      	str	r3, [sp, #20]
 8018172:	4619      	mov	r1, r3
 8018174:	f04f 0c0a 	mov.w	ip, #10
 8018178:	4620      	mov	r0, r4
 801817a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801817e:	3a30      	subs	r2, #48	; 0x30
 8018180:	2a09      	cmp	r2, #9
 8018182:	d903      	bls.n	801818c <_vfiprintf_r+0x1d0>
 8018184:	2b00      	cmp	r3, #0
 8018186:	d0c6      	beq.n	8018116 <_vfiprintf_r+0x15a>
 8018188:	9105      	str	r1, [sp, #20]
 801818a:	e7c4      	b.n	8018116 <_vfiprintf_r+0x15a>
 801818c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018190:	4604      	mov	r4, r0
 8018192:	2301      	movs	r3, #1
 8018194:	e7f0      	b.n	8018178 <_vfiprintf_r+0x1bc>
 8018196:	ab03      	add	r3, sp, #12
 8018198:	9300      	str	r3, [sp, #0]
 801819a:	462a      	mov	r2, r5
 801819c:	4b12      	ldr	r3, [pc, #72]	; (80181e8 <_vfiprintf_r+0x22c>)
 801819e:	a904      	add	r1, sp, #16
 80181a0:	4630      	mov	r0, r6
 80181a2:	f7fd fb9d 	bl	80158e0 <_printf_float>
 80181a6:	4607      	mov	r7, r0
 80181a8:	1c78      	adds	r0, r7, #1
 80181aa:	d1d6      	bne.n	801815a <_vfiprintf_r+0x19e>
 80181ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80181ae:	07d9      	lsls	r1, r3, #31
 80181b0:	d405      	bmi.n	80181be <_vfiprintf_r+0x202>
 80181b2:	89ab      	ldrh	r3, [r5, #12]
 80181b4:	059a      	lsls	r2, r3, #22
 80181b6:	d402      	bmi.n	80181be <_vfiprintf_r+0x202>
 80181b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80181ba:	f7fe f8fb 	bl	80163b4 <__retarget_lock_release_recursive>
 80181be:	89ab      	ldrh	r3, [r5, #12]
 80181c0:	065b      	lsls	r3, r3, #25
 80181c2:	f53f af1d 	bmi.w	8018000 <_vfiprintf_r+0x44>
 80181c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181c8:	e71c      	b.n	8018004 <_vfiprintf_r+0x48>
 80181ca:	ab03      	add	r3, sp, #12
 80181cc:	9300      	str	r3, [sp, #0]
 80181ce:	462a      	mov	r2, r5
 80181d0:	4b05      	ldr	r3, [pc, #20]	; (80181e8 <_vfiprintf_r+0x22c>)
 80181d2:	a904      	add	r1, sp, #16
 80181d4:	4630      	mov	r0, r6
 80181d6:	f7fd fe27 	bl	8015e28 <_printf_i>
 80181da:	e7e4      	b.n	80181a6 <_vfiprintf_r+0x1ea>
 80181dc:	0801b314 	.word	0x0801b314
 80181e0:	0801b31e 	.word	0x0801b31e
 80181e4:	080158e1 	.word	0x080158e1
 80181e8:	08017f99 	.word	0x08017f99
 80181ec:	0801b31a 	.word	0x0801b31a

080181f0 <__swbuf_r>:
 80181f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181f2:	460e      	mov	r6, r1
 80181f4:	4614      	mov	r4, r2
 80181f6:	4605      	mov	r5, r0
 80181f8:	b118      	cbz	r0, 8018202 <__swbuf_r+0x12>
 80181fa:	6a03      	ldr	r3, [r0, #32]
 80181fc:	b90b      	cbnz	r3, 8018202 <__swbuf_r+0x12>
 80181fe:	f7fd ffc1 	bl	8016184 <__sinit>
 8018202:	69a3      	ldr	r3, [r4, #24]
 8018204:	60a3      	str	r3, [r4, #8]
 8018206:	89a3      	ldrh	r3, [r4, #12]
 8018208:	071a      	lsls	r2, r3, #28
 801820a:	d525      	bpl.n	8018258 <__swbuf_r+0x68>
 801820c:	6923      	ldr	r3, [r4, #16]
 801820e:	b31b      	cbz	r3, 8018258 <__swbuf_r+0x68>
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	6922      	ldr	r2, [r4, #16]
 8018214:	1a98      	subs	r0, r3, r2
 8018216:	6963      	ldr	r3, [r4, #20]
 8018218:	b2f6      	uxtb	r6, r6
 801821a:	4283      	cmp	r3, r0
 801821c:	4637      	mov	r7, r6
 801821e:	dc04      	bgt.n	801822a <__swbuf_r+0x3a>
 8018220:	4621      	mov	r1, r4
 8018222:	4628      	mov	r0, r5
 8018224:	f7ff fdac 	bl	8017d80 <_fflush_r>
 8018228:	b9e0      	cbnz	r0, 8018264 <__swbuf_r+0x74>
 801822a:	68a3      	ldr	r3, [r4, #8]
 801822c:	3b01      	subs	r3, #1
 801822e:	60a3      	str	r3, [r4, #8]
 8018230:	6823      	ldr	r3, [r4, #0]
 8018232:	1c5a      	adds	r2, r3, #1
 8018234:	6022      	str	r2, [r4, #0]
 8018236:	701e      	strb	r6, [r3, #0]
 8018238:	6962      	ldr	r2, [r4, #20]
 801823a:	1c43      	adds	r3, r0, #1
 801823c:	429a      	cmp	r2, r3
 801823e:	d004      	beq.n	801824a <__swbuf_r+0x5a>
 8018240:	89a3      	ldrh	r3, [r4, #12]
 8018242:	07db      	lsls	r3, r3, #31
 8018244:	d506      	bpl.n	8018254 <__swbuf_r+0x64>
 8018246:	2e0a      	cmp	r6, #10
 8018248:	d104      	bne.n	8018254 <__swbuf_r+0x64>
 801824a:	4621      	mov	r1, r4
 801824c:	4628      	mov	r0, r5
 801824e:	f7ff fd97 	bl	8017d80 <_fflush_r>
 8018252:	b938      	cbnz	r0, 8018264 <__swbuf_r+0x74>
 8018254:	4638      	mov	r0, r7
 8018256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018258:	4621      	mov	r1, r4
 801825a:	4628      	mov	r0, r5
 801825c:	f000 f806 	bl	801826c <__swsetup_r>
 8018260:	2800      	cmp	r0, #0
 8018262:	d0d5      	beq.n	8018210 <__swbuf_r+0x20>
 8018264:	f04f 37ff 	mov.w	r7, #4294967295
 8018268:	e7f4      	b.n	8018254 <__swbuf_r+0x64>
	...

0801826c <__swsetup_r>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4b2a      	ldr	r3, [pc, #168]	; (8018318 <__swsetup_r+0xac>)
 8018270:	4605      	mov	r5, r0
 8018272:	6818      	ldr	r0, [r3, #0]
 8018274:	460c      	mov	r4, r1
 8018276:	b118      	cbz	r0, 8018280 <__swsetup_r+0x14>
 8018278:	6a03      	ldr	r3, [r0, #32]
 801827a:	b90b      	cbnz	r3, 8018280 <__swsetup_r+0x14>
 801827c:	f7fd ff82 	bl	8016184 <__sinit>
 8018280:	89a3      	ldrh	r3, [r4, #12]
 8018282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018286:	0718      	lsls	r0, r3, #28
 8018288:	d422      	bmi.n	80182d0 <__swsetup_r+0x64>
 801828a:	06d9      	lsls	r1, r3, #27
 801828c:	d407      	bmi.n	801829e <__swsetup_r+0x32>
 801828e:	2309      	movs	r3, #9
 8018290:	602b      	str	r3, [r5, #0]
 8018292:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018296:	81a3      	strh	r3, [r4, #12]
 8018298:	f04f 30ff 	mov.w	r0, #4294967295
 801829c:	e034      	b.n	8018308 <__swsetup_r+0x9c>
 801829e:	0758      	lsls	r0, r3, #29
 80182a0:	d512      	bpl.n	80182c8 <__swsetup_r+0x5c>
 80182a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182a4:	b141      	cbz	r1, 80182b8 <__swsetup_r+0x4c>
 80182a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182aa:	4299      	cmp	r1, r3
 80182ac:	d002      	beq.n	80182b4 <__swsetup_r+0x48>
 80182ae:	4628      	mov	r0, r5
 80182b0:	f7fe ff0c 	bl	80170cc <_free_r>
 80182b4:	2300      	movs	r3, #0
 80182b6:	6363      	str	r3, [r4, #52]	; 0x34
 80182b8:	89a3      	ldrh	r3, [r4, #12]
 80182ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80182be:	81a3      	strh	r3, [r4, #12]
 80182c0:	2300      	movs	r3, #0
 80182c2:	6063      	str	r3, [r4, #4]
 80182c4:	6923      	ldr	r3, [r4, #16]
 80182c6:	6023      	str	r3, [r4, #0]
 80182c8:	89a3      	ldrh	r3, [r4, #12]
 80182ca:	f043 0308 	orr.w	r3, r3, #8
 80182ce:	81a3      	strh	r3, [r4, #12]
 80182d0:	6923      	ldr	r3, [r4, #16]
 80182d2:	b94b      	cbnz	r3, 80182e8 <__swsetup_r+0x7c>
 80182d4:	89a3      	ldrh	r3, [r4, #12]
 80182d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182de:	d003      	beq.n	80182e8 <__swsetup_r+0x7c>
 80182e0:	4621      	mov	r1, r4
 80182e2:	4628      	mov	r0, r5
 80182e4:	f000 f884 	bl	80183f0 <__smakebuf_r>
 80182e8:	89a0      	ldrh	r0, [r4, #12]
 80182ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182ee:	f010 0301 	ands.w	r3, r0, #1
 80182f2:	d00a      	beq.n	801830a <__swsetup_r+0x9e>
 80182f4:	2300      	movs	r3, #0
 80182f6:	60a3      	str	r3, [r4, #8]
 80182f8:	6963      	ldr	r3, [r4, #20]
 80182fa:	425b      	negs	r3, r3
 80182fc:	61a3      	str	r3, [r4, #24]
 80182fe:	6923      	ldr	r3, [r4, #16]
 8018300:	b943      	cbnz	r3, 8018314 <__swsetup_r+0xa8>
 8018302:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018306:	d1c4      	bne.n	8018292 <__swsetup_r+0x26>
 8018308:	bd38      	pop	{r3, r4, r5, pc}
 801830a:	0781      	lsls	r1, r0, #30
 801830c:	bf58      	it	pl
 801830e:	6963      	ldrpl	r3, [r4, #20]
 8018310:	60a3      	str	r3, [r4, #8]
 8018312:	e7f4      	b.n	80182fe <__swsetup_r+0x92>
 8018314:	2000      	movs	r0, #0
 8018316:	e7f7      	b.n	8018308 <__swsetup_r+0x9c>
 8018318:	200003c8 	.word	0x200003c8

0801831c <_raise_r>:
 801831c:	291f      	cmp	r1, #31
 801831e:	b538      	push	{r3, r4, r5, lr}
 8018320:	4604      	mov	r4, r0
 8018322:	460d      	mov	r5, r1
 8018324:	d904      	bls.n	8018330 <_raise_r+0x14>
 8018326:	2316      	movs	r3, #22
 8018328:	6003      	str	r3, [r0, #0]
 801832a:	f04f 30ff 	mov.w	r0, #4294967295
 801832e:	bd38      	pop	{r3, r4, r5, pc}
 8018330:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018332:	b112      	cbz	r2, 801833a <_raise_r+0x1e>
 8018334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018338:	b94b      	cbnz	r3, 801834e <_raise_r+0x32>
 801833a:	4620      	mov	r0, r4
 801833c:	f000 f830 	bl	80183a0 <_getpid_r>
 8018340:	462a      	mov	r2, r5
 8018342:	4601      	mov	r1, r0
 8018344:	4620      	mov	r0, r4
 8018346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801834a:	f000 b817 	b.w	801837c <_kill_r>
 801834e:	2b01      	cmp	r3, #1
 8018350:	d00a      	beq.n	8018368 <_raise_r+0x4c>
 8018352:	1c59      	adds	r1, r3, #1
 8018354:	d103      	bne.n	801835e <_raise_r+0x42>
 8018356:	2316      	movs	r3, #22
 8018358:	6003      	str	r3, [r0, #0]
 801835a:	2001      	movs	r0, #1
 801835c:	e7e7      	b.n	801832e <_raise_r+0x12>
 801835e:	2400      	movs	r4, #0
 8018360:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018364:	4628      	mov	r0, r5
 8018366:	4798      	blx	r3
 8018368:	2000      	movs	r0, #0
 801836a:	e7e0      	b.n	801832e <_raise_r+0x12>

0801836c <raise>:
 801836c:	4b02      	ldr	r3, [pc, #8]	; (8018378 <raise+0xc>)
 801836e:	4601      	mov	r1, r0
 8018370:	6818      	ldr	r0, [r3, #0]
 8018372:	f7ff bfd3 	b.w	801831c <_raise_r>
 8018376:	bf00      	nop
 8018378:	200003c8 	.word	0x200003c8

0801837c <_kill_r>:
 801837c:	b538      	push	{r3, r4, r5, lr}
 801837e:	4d07      	ldr	r5, [pc, #28]	; (801839c <_kill_r+0x20>)
 8018380:	2300      	movs	r3, #0
 8018382:	4604      	mov	r4, r0
 8018384:	4608      	mov	r0, r1
 8018386:	4611      	mov	r1, r2
 8018388:	602b      	str	r3, [r5, #0]
 801838a:	f7ec fef5 	bl	8005178 <_kill>
 801838e:	1c43      	adds	r3, r0, #1
 8018390:	d102      	bne.n	8018398 <_kill_r+0x1c>
 8018392:	682b      	ldr	r3, [r5, #0]
 8018394:	b103      	cbz	r3, 8018398 <_kill_r+0x1c>
 8018396:	6023      	str	r3, [r4, #0]
 8018398:	bd38      	pop	{r3, r4, r5, pc}
 801839a:	bf00      	nop
 801839c:	200033b8 	.word	0x200033b8

080183a0 <_getpid_r>:
 80183a0:	f7ec bee2 	b.w	8005168 <_getpid>

080183a4 <__swhatbuf_r>:
 80183a4:	b570      	push	{r4, r5, r6, lr}
 80183a6:	460c      	mov	r4, r1
 80183a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ac:	2900      	cmp	r1, #0
 80183ae:	b096      	sub	sp, #88	; 0x58
 80183b0:	4615      	mov	r5, r2
 80183b2:	461e      	mov	r6, r3
 80183b4:	da0d      	bge.n	80183d2 <__swhatbuf_r+0x2e>
 80183b6:	89a3      	ldrh	r3, [r4, #12]
 80183b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80183bc:	f04f 0100 	mov.w	r1, #0
 80183c0:	bf0c      	ite	eq
 80183c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80183c6:	2340      	movne	r3, #64	; 0x40
 80183c8:	2000      	movs	r0, #0
 80183ca:	6031      	str	r1, [r6, #0]
 80183cc:	602b      	str	r3, [r5, #0]
 80183ce:	b016      	add	sp, #88	; 0x58
 80183d0:	bd70      	pop	{r4, r5, r6, pc}
 80183d2:	466a      	mov	r2, sp
 80183d4:	f000 f848 	bl	8018468 <_fstat_r>
 80183d8:	2800      	cmp	r0, #0
 80183da:	dbec      	blt.n	80183b6 <__swhatbuf_r+0x12>
 80183dc:	9901      	ldr	r1, [sp, #4]
 80183de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80183e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80183e6:	4259      	negs	r1, r3
 80183e8:	4159      	adcs	r1, r3
 80183ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183ee:	e7eb      	b.n	80183c8 <__swhatbuf_r+0x24>

080183f0 <__smakebuf_r>:
 80183f0:	898b      	ldrh	r3, [r1, #12]
 80183f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183f4:	079d      	lsls	r5, r3, #30
 80183f6:	4606      	mov	r6, r0
 80183f8:	460c      	mov	r4, r1
 80183fa:	d507      	bpl.n	801840c <__smakebuf_r+0x1c>
 80183fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018400:	6023      	str	r3, [r4, #0]
 8018402:	6123      	str	r3, [r4, #16]
 8018404:	2301      	movs	r3, #1
 8018406:	6163      	str	r3, [r4, #20]
 8018408:	b002      	add	sp, #8
 801840a:	bd70      	pop	{r4, r5, r6, pc}
 801840c:	ab01      	add	r3, sp, #4
 801840e:	466a      	mov	r2, sp
 8018410:	f7ff ffc8 	bl	80183a4 <__swhatbuf_r>
 8018414:	9900      	ldr	r1, [sp, #0]
 8018416:	4605      	mov	r5, r0
 8018418:	4630      	mov	r0, r6
 801841a:	f7fe fecb 	bl	80171b4 <_malloc_r>
 801841e:	b948      	cbnz	r0, 8018434 <__smakebuf_r+0x44>
 8018420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018424:	059a      	lsls	r2, r3, #22
 8018426:	d4ef      	bmi.n	8018408 <__smakebuf_r+0x18>
 8018428:	f023 0303 	bic.w	r3, r3, #3
 801842c:	f043 0302 	orr.w	r3, r3, #2
 8018430:	81a3      	strh	r3, [r4, #12]
 8018432:	e7e3      	b.n	80183fc <__smakebuf_r+0xc>
 8018434:	89a3      	ldrh	r3, [r4, #12]
 8018436:	6020      	str	r0, [r4, #0]
 8018438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801843c:	81a3      	strh	r3, [r4, #12]
 801843e:	9b00      	ldr	r3, [sp, #0]
 8018440:	6163      	str	r3, [r4, #20]
 8018442:	9b01      	ldr	r3, [sp, #4]
 8018444:	6120      	str	r0, [r4, #16]
 8018446:	b15b      	cbz	r3, 8018460 <__smakebuf_r+0x70>
 8018448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801844c:	4630      	mov	r0, r6
 801844e:	f000 f81d 	bl	801848c <_isatty_r>
 8018452:	b128      	cbz	r0, 8018460 <__smakebuf_r+0x70>
 8018454:	89a3      	ldrh	r3, [r4, #12]
 8018456:	f023 0303 	bic.w	r3, r3, #3
 801845a:	f043 0301 	orr.w	r3, r3, #1
 801845e:	81a3      	strh	r3, [r4, #12]
 8018460:	89a3      	ldrh	r3, [r4, #12]
 8018462:	431d      	orrs	r5, r3
 8018464:	81a5      	strh	r5, [r4, #12]
 8018466:	e7cf      	b.n	8018408 <__smakebuf_r+0x18>

08018468 <_fstat_r>:
 8018468:	b538      	push	{r3, r4, r5, lr}
 801846a:	4d07      	ldr	r5, [pc, #28]	; (8018488 <_fstat_r+0x20>)
 801846c:	2300      	movs	r3, #0
 801846e:	4604      	mov	r4, r0
 8018470:	4608      	mov	r0, r1
 8018472:	4611      	mov	r1, r2
 8018474:	602b      	str	r3, [r5, #0]
 8018476:	f7ec fede 	bl	8005236 <_fstat>
 801847a:	1c43      	adds	r3, r0, #1
 801847c:	d102      	bne.n	8018484 <_fstat_r+0x1c>
 801847e:	682b      	ldr	r3, [r5, #0]
 8018480:	b103      	cbz	r3, 8018484 <_fstat_r+0x1c>
 8018482:	6023      	str	r3, [r4, #0]
 8018484:	bd38      	pop	{r3, r4, r5, pc}
 8018486:	bf00      	nop
 8018488:	200033b8 	.word	0x200033b8

0801848c <_isatty_r>:
 801848c:	b538      	push	{r3, r4, r5, lr}
 801848e:	4d06      	ldr	r5, [pc, #24]	; (80184a8 <_isatty_r+0x1c>)
 8018490:	2300      	movs	r3, #0
 8018492:	4604      	mov	r4, r0
 8018494:	4608      	mov	r0, r1
 8018496:	602b      	str	r3, [r5, #0]
 8018498:	f7ec fedd 	bl	8005256 <_isatty>
 801849c:	1c43      	adds	r3, r0, #1
 801849e:	d102      	bne.n	80184a6 <_isatty_r+0x1a>
 80184a0:	682b      	ldr	r3, [r5, #0]
 80184a2:	b103      	cbz	r3, 80184a6 <_isatty_r+0x1a>
 80184a4:	6023      	str	r3, [r4, #0]
 80184a6:	bd38      	pop	{r3, r4, r5, pc}
 80184a8:	200033b8 	.word	0x200033b8

080184ac <fmod>:
 80184ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ae:	ed2d 8b02 	vpush	{d8}
 80184b2:	ec57 6b10 	vmov	r6, r7, d0
 80184b6:	ec55 4b11 	vmov	r4, r5, d1
 80184ba:	f000 f86d 	bl	8018598 <__ieee754_fmod>
 80184be:	4622      	mov	r2, r4
 80184c0:	462b      	mov	r3, r5
 80184c2:	4630      	mov	r0, r6
 80184c4:	4639      	mov	r1, r7
 80184c6:	eeb0 8a40 	vmov.f32	s16, s0
 80184ca:	eef0 8a60 	vmov.f32	s17, s1
 80184ce:	f7e8 fb55 	bl	8000b7c <__aeabi_dcmpun>
 80184d2:	b990      	cbnz	r0, 80184fa <fmod+0x4e>
 80184d4:	2200      	movs	r2, #0
 80184d6:	2300      	movs	r3, #0
 80184d8:	4620      	mov	r0, r4
 80184da:	4629      	mov	r1, r5
 80184dc:	f7e8 fb1c 	bl	8000b18 <__aeabi_dcmpeq>
 80184e0:	b158      	cbz	r0, 80184fa <fmod+0x4e>
 80184e2:	f7fd ff3b 	bl	801635c <__errno>
 80184e6:	2321      	movs	r3, #33	; 0x21
 80184e8:	6003      	str	r3, [r0, #0]
 80184ea:	2200      	movs	r2, #0
 80184ec:	2300      	movs	r3, #0
 80184ee:	4610      	mov	r0, r2
 80184f0:	4619      	mov	r1, r3
 80184f2:	f7e8 f9d3 	bl	800089c <__aeabi_ddiv>
 80184f6:	ec41 0b18 	vmov	d8, r0, r1
 80184fa:	eeb0 0a48 	vmov.f32	s0, s16
 80184fe:	eef0 0a68 	vmov.f32	s1, s17
 8018502:	ecbd 8b02 	vpop	{d8}
 8018506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018508 <round>:
 8018508:	ec53 2b10 	vmov	r2, r3, d0
 801850c:	b570      	push	{r4, r5, r6, lr}
 801850e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8018512:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8018516:	2813      	cmp	r0, #19
 8018518:	ee10 5a10 	vmov	r5, s0
 801851c:	4619      	mov	r1, r3
 801851e:	dc18      	bgt.n	8018552 <round+0x4a>
 8018520:	2800      	cmp	r0, #0
 8018522:	da09      	bge.n	8018538 <round+0x30>
 8018524:	3001      	adds	r0, #1
 8018526:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801852a:	d103      	bne.n	8018534 <round+0x2c>
 801852c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018530:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018534:	2300      	movs	r3, #0
 8018536:	e02a      	b.n	801858e <round+0x86>
 8018538:	4c16      	ldr	r4, [pc, #88]	; (8018594 <round+0x8c>)
 801853a:	4104      	asrs	r4, r0
 801853c:	ea03 0604 	and.w	r6, r3, r4
 8018540:	4316      	orrs	r6, r2
 8018542:	d011      	beq.n	8018568 <round+0x60>
 8018544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018548:	4103      	asrs	r3, r0
 801854a:	440b      	add	r3, r1
 801854c:	ea23 0104 	bic.w	r1, r3, r4
 8018550:	e7f0      	b.n	8018534 <round+0x2c>
 8018552:	2833      	cmp	r0, #51	; 0x33
 8018554:	dd0b      	ble.n	801856e <round+0x66>
 8018556:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801855a:	d105      	bne.n	8018568 <round+0x60>
 801855c:	ee10 0a10 	vmov	r0, s0
 8018560:	f7e7 febc 	bl	80002dc <__adddf3>
 8018564:	4602      	mov	r2, r0
 8018566:	460b      	mov	r3, r1
 8018568:	ec43 2b10 	vmov	d0, r2, r3
 801856c:	bd70      	pop	{r4, r5, r6, pc}
 801856e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8018572:	f04f 34ff 	mov.w	r4, #4294967295
 8018576:	40f4      	lsrs	r4, r6
 8018578:	4214      	tst	r4, r2
 801857a:	d0f5      	beq.n	8018568 <round+0x60>
 801857c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8018580:	2301      	movs	r3, #1
 8018582:	4083      	lsls	r3, r0
 8018584:	195b      	adds	r3, r3, r5
 8018586:	bf28      	it	cs
 8018588:	3101      	addcs	r1, #1
 801858a:	ea23 0304 	bic.w	r3, r3, r4
 801858e:	461a      	mov	r2, r3
 8018590:	460b      	mov	r3, r1
 8018592:	e7e9      	b.n	8018568 <round+0x60>
 8018594:	000fffff 	.word	0x000fffff

08018598 <__ieee754_fmod>:
 8018598:	ec53 2b11 	vmov	r2, r3, d1
 801859c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80185a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185a4:	ea5c 0402 	orrs.w	r4, ip, r2
 80185a8:	ec51 0b10 	vmov	r0, r1, d0
 80185ac:	ee11 7a10 	vmov	r7, s2
 80185b0:	ee11 ea10 	vmov	lr, s2
 80185b4:	461e      	mov	r6, r3
 80185b6:	d00c      	beq.n	80185d2 <__ieee754_fmod+0x3a>
 80185b8:	4c78      	ldr	r4, [pc, #480]	; (801879c <__ieee754_fmod+0x204>)
 80185ba:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80185be:	45a0      	cmp	r8, r4
 80185c0:	4689      	mov	r9, r1
 80185c2:	dc06      	bgt.n	80185d2 <__ieee754_fmod+0x3a>
 80185c4:	4254      	negs	r4, r2
 80185c6:	4d76      	ldr	r5, [pc, #472]	; (80187a0 <__ieee754_fmod+0x208>)
 80185c8:	4314      	orrs	r4, r2
 80185ca:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80185ce:	42ac      	cmp	r4, r5
 80185d0:	d909      	bls.n	80185e6 <__ieee754_fmod+0x4e>
 80185d2:	f7e8 f839 	bl	8000648 <__aeabi_dmul>
 80185d6:	4602      	mov	r2, r0
 80185d8:	460b      	mov	r3, r1
 80185da:	f7e8 f95f 	bl	800089c <__aeabi_ddiv>
 80185de:	ec41 0b10 	vmov	d0, r0, r1
 80185e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185e6:	45e0      	cmp	r8, ip
 80185e8:	ee10 aa10 	vmov	sl, s0
 80185ec:	ee10 4a10 	vmov	r4, s0
 80185f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80185f4:	dc09      	bgt.n	801860a <__ieee754_fmod+0x72>
 80185f6:	dbf2      	blt.n	80185de <__ieee754_fmod+0x46>
 80185f8:	4290      	cmp	r0, r2
 80185fa:	d3f0      	bcc.n	80185de <__ieee754_fmod+0x46>
 80185fc:	d105      	bne.n	801860a <__ieee754_fmod+0x72>
 80185fe:	4b69      	ldr	r3, [pc, #420]	; (80187a4 <__ieee754_fmod+0x20c>)
 8018600:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8018604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018608:	e7e9      	b.n	80185de <__ieee754_fmod+0x46>
 801860a:	4a65      	ldr	r2, [pc, #404]	; (80187a0 <__ieee754_fmod+0x208>)
 801860c:	ea19 0f02 	tst.w	r9, r2
 8018610:	d148      	bne.n	80186a4 <__ieee754_fmod+0x10c>
 8018612:	f1b8 0f00 	cmp.w	r8, #0
 8018616:	d13d      	bne.n	8018694 <__ieee754_fmod+0xfc>
 8018618:	4963      	ldr	r1, [pc, #396]	; (80187a8 <__ieee754_fmod+0x210>)
 801861a:	4653      	mov	r3, sl
 801861c:	2b00      	cmp	r3, #0
 801861e:	dc36      	bgt.n	801868e <__ieee754_fmod+0xf6>
 8018620:	4216      	tst	r6, r2
 8018622:	d14f      	bne.n	80186c4 <__ieee754_fmod+0x12c>
 8018624:	f1bc 0f00 	cmp.w	ip, #0
 8018628:	d144      	bne.n	80186b4 <__ieee754_fmod+0x11c>
 801862a:	4a5f      	ldr	r2, [pc, #380]	; (80187a8 <__ieee754_fmod+0x210>)
 801862c:	463b      	mov	r3, r7
 801862e:	2b00      	cmp	r3, #0
 8018630:	dc3d      	bgt.n	80186ae <__ieee754_fmod+0x116>
 8018632:	485e      	ldr	r0, [pc, #376]	; (80187ac <__ieee754_fmod+0x214>)
 8018634:	4281      	cmp	r1, r0
 8018636:	db4a      	blt.n	80186ce <__ieee754_fmod+0x136>
 8018638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801863c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018640:	485a      	ldr	r0, [pc, #360]	; (80187ac <__ieee754_fmod+0x214>)
 8018642:	4282      	cmp	r2, r0
 8018644:	db57      	blt.n	80186f6 <__ieee754_fmod+0x15e>
 8018646:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801864a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801864e:	1a89      	subs	r1, r1, r2
 8018650:	1b98      	subs	r0, r3, r6
 8018652:	eba4 070e 	sub.w	r7, r4, lr
 8018656:	2900      	cmp	r1, #0
 8018658:	d162      	bne.n	8018720 <__ieee754_fmod+0x188>
 801865a:	4574      	cmp	r4, lr
 801865c:	bf38      	it	cc
 801865e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018662:	2800      	cmp	r0, #0
 8018664:	bfa4      	itt	ge
 8018666:	463c      	movge	r4, r7
 8018668:	4603      	movge	r3, r0
 801866a:	ea53 0104 	orrs.w	r1, r3, r4
 801866e:	d0c6      	beq.n	80185fe <__ieee754_fmod+0x66>
 8018670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018674:	db69      	blt.n	801874a <__ieee754_fmod+0x1b2>
 8018676:	494d      	ldr	r1, [pc, #308]	; (80187ac <__ieee754_fmod+0x214>)
 8018678:	428a      	cmp	r2, r1
 801867a:	db6c      	blt.n	8018756 <__ieee754_fmod+0x1be>
 801867c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018680:	432b      	orrs	r3, r5
 8018682:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8018686:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801868a:	4620      	mov	r0, r4
 801868c:	e7a7      	b.n	80185de <__ieee754_fmod+0x46>
 801868e:	3901      	subs	r1, #1
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	e7c3      	b.n	801861c <__ieee754_fmod+0x84>
 8018694:	4945      	ldr	r1, [pc, #276]	; (80187ac <__ieee754_fmod+0x214>)
 8018696:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801869a:	2b00      	cmp	r3, #0
 801869c:	ddc0      	ble.n	8018620 <__ieee754_fmod+0x88>
 801869e:	3901      	subs	r1, #1
 80186a0:	005b      	lsls	r3, r3, #1
 80186a2:	e7fa      	b.n	801869a <__ieee754_fmod+0x102>
 80186a4:	ea4f 5128 	mov.w	r1, r8, asr #20
 80186a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80186ac:	e7b8      	b.n	8018620 <__ieee754_fmod+0x88>
 80186ae:	3a01      	subs	r2, #1
 80186b0:	005b      	lsls	r3, r3, #1
 80186b2:	e7bc      	b.n	801862e <__ieee754_fmod+0x96>
 80186b4:	4a3d      	ldr	r2, [pc, #244]	; (80187ac <__ieee754_fmod+0x214>)
 80186b6:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	ddb9      	ble.n	8018632 <__ieee754_fmod+0x9a>
 80186be:	3a01      	subs	r2, #1
 80186c0:	005b      	lsls	r3, r3, #1
 80186c2:	e7fa      	b.n	80186ba <__ieee754_fmod+0x122>
 80186c4:	ea4f 522c 	mov.w	r2, ip, asr #20
 80186c8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80186cc:	e7b1      	b.n	8018632 <__ieee754_fmod+0x9a>
 80186ce:	1a40      	subs	r0, r0, r1
 80186d0:	281f      	cmp	r0, #31
 80186d2:	dc0a      	bgt.n	80186ea <__ieee754_fmod+0x152>
 80186d4:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80186d8:	fa08 f800 	lsl.w	r8, r8, r0
 80186dc:	fa2a f303 	lsr.w	r3, sl, r3
 80186e0:	ea43 0308 	orr.w	r3, r3, r8
 80186e4:	fa0a f400 	lsl.w	r4, sl, r0
 80186e8:	e7aa      	b.n	8018640 <__ieee754_fmod+0xa8>
 80186ea:	4b31      	ldr	r3, [pc, #196]	; (80187b0 <__ieee754_fmod+0x218>)
 80186ec:	1a5b      	subs	r3, r3, r1
 80186ee:	fa0a f303 	lsl.w	r3, sl, r3
 80186f2:	2400      	movs	r4, #0
 80186f4:	e7a4      	b.n	8018640 <__ieee754_fmod+0xa8>
 80186f6:	1a80      	subs	r0, r0, r2
 80186f8:	281f      	cmp	r0, #31
 80186fa:	dc0a      	bgt.n	8018712 <__ieee754_fmod+0x17a>
 80186fc:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8018700:	fa0c fc00 	lsl.w	ip, ip, r0
 8018704:	fa27 f606 	lsr.w	r6, r7, r6
 8018708:	ea46 060c 	orr.w	r6, r6, ip
 801870c:	fa07 fe00 	lsl.w	lr, r7, r0
 8018710:	e79d      	b.n	801864e <__ieee754_fmod+0xb6>
 8018712:	4e27      	ldr	r6, [pc, #156]	; (80187b0 <__ieee754_fmod+0x218>)
 8018714:	1ab6      	subs	r6, r6, r2
 8018716:	fa07 f606 	lsl.w	r6, r7, r6
 801871a:	f04f 0e00 	mov.w	lr, #0
 801871e:	e796      	b.n	801864e <__ieee754_fmod+0xb6>
 8018720:	4574      	cmp	r4, lr
 8018722:	bf38      	it	cc
 8018724:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018728:	2800      	cmp	r0, #0
 801872a:	da05      	bge.n	8018738 <__ieee754_fmod+0x1a0>
 801872c:	0fe0      	lsrs	r0, r4, #31
 801872e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018732:	0064      	lsls	r4, r4, #1
 8018734:	3901      	subs	r1, #1
 8018736:	e78b      	b.n	8018650 <__ieee754_fmod+0xb8>
 8018738:	ea50 0307 	orrs.w	r3, r0, r7
 801873c:	f43f af5f 	beq.w	80185fe <__ieee754_fmod+0x66>
 8018740:	0ffb      	lsrs	r3, r7, #31
 8018742:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8018746:	007c      	lsls	r4, r7, #1
 8018748:	e7f4      	b.n	8018734 <__ieee754_fmod+0x19c>
 801874a:	0fe1      	lsrs	r1, r4, #31
 801874c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018750:	0064      	lsls	r4, r4, #1
 8018752:	3a01      	subs	r2, #1
 8018754:	e78c      	b.n	8018670 <__ieee754_fmod+0xd8>
 8018756:	1a89      	subs	r1, r1, r2
 8018758:	2914      	cmp	r1, #20
 801875a:	dc0a      	bgt.n	8018772 <__ieee754_fmod+0x1da>
 801875c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018760:	fa03 f202 	lsl.w	r2, r3, r2
 8018764:	40cc      	lsrs	r4, r1
 8018766:	4322      	orrs	r2, r4
 8018768:	410b      	asrs	r3, r1
 801876a:	ea43 0105 	orr.w	r1, r3, r5
 801876e:	4610      	mov	r0, r2
 8018770:	e735      	b.n	80185de <__ieee754_fmod+0x46>
 8018772:	291f      	cmp	r1, #31
 8018774:	dc07      	bgt.n	8018786 <__ieee754_fmod+0x1ee>
 8018776:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801877a:	40cc      	lsrs	r4, r1
 801877c:	fa03 f202 	lsl.w	r2, r3, r2
 8018780:	4322      	orrs	r2, r4
 8018782:	462b      	mov	r3, r5
 8018784:	e7f1      	b.n	801876a <__ieee754_fmod+0x1d2>
 8018786:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801878a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801878e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8018792:	32e2      	adds	r2, #226	; 0xe2
 8018794:	fa43 f202 	asr.w	r2, r3, r2
 8018798:	e7f3      	b.n	8018782 <__ieee754_fmod+0x1ea>
 801879a:	bf00      	nop
 801879c:	7fefffff 	.word	0x7fefffff
 80187a0:	7ff00000 	.word	0x7ff00000
 80187a4:	0801b470 	.word	0x0801b470
 80187a8:	fffffbed 	.word	0xfffffbed
 80187ac:	fffffc02 	.word	0xfffffc02
 80187b0:	fffffbe2 	.word	0xfffffbe2

080187b4 <_init>:
 80187b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b6:	bf00      	nop
 80187b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187ba:	bc08      	pop	{r3}
 80187bc:	469e      	mov	lr, r3
 80187be:	4770      	bx	lr

080187c0 <_fini>:
 80187c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187c2:	bf00      	nop
 80187c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187c6:	bc08      	pop	{r3}
 80187c8:	469e      	mov	lr, r3
 80187ca:	4770      	bx	lr
