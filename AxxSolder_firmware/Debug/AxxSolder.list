
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023ad0  080175e8  080175e8  000275e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803b0b8  0803b0b8  000504c8  2**0
                  CONTENTS
  4 .ARM          00000000  0803b0b8  0803b0b8  000504c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803b0b8  0803b0b8  000504c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803b0b8  0803b0b8  0004b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803b0bc  0803b0bc  0004b0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c8  20000000  0803b0c0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504c8  2**0
                  CONTENTS
 10 .bss          00002954  200004c8  200004c8  000504c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002e1c  20002e1c  000504c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000504f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023fa8  00000000  00000000  0005053b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005956  00000000  00000000  000744e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020c8  00000000  00000000  00079e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018e4  00000000  00000000  0007bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025fdc  00000000  00000000  0007d7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ce8e  00000000  00000000  000a37c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc140  00000000  00000000  000d0656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009e40  00000000  00000000  0019c798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  001a65d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c8 	.word	0x200004c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080175d0 	.word	0x080175d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004cc 	.word	0x200004cc
 80001cc:	080175d0 	.word	0x080175d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000c96:	0adb      	lsrs	r3, r3, #11
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 0307 	bic.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	490f      	ldr	r1, [pc, #60]	; (8000d18 <FlashCheckCRC+0x74>)
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <FlashCheckCRC+0x78>)
 8000cdc:	f005 ffee 	bl	8006cbc <HAL_CRC_Calculate>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000cf2:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8000cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	bf08      	it	eq
 8000d02:	4290      	cmpeq	r0, r2
 8000d04:	d101      	bne.n	8000d0a <FlashCheckCRC+0x66>
	{
		return true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <FlashCheckCRC+0x68>
	}
	return false;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	0801e800 	.word	0x0801e800
 8000d1c:	2000170c 	.word	0x2000170c

08000d20 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	int i = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <FlashReadToBuf+0x88>)
 8000d2c:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 8000d2e:	f7ff ffb9 	bl	8000ca4 <FlashCheckCRC>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d031      	beq.n	8000d9c <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d38:	e025      	b.n	8000d86 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1d39      	adds	r1, r7, #4
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e013      	b.n	8000d74 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	4413      	add	r3, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <FlashReadToBuf+0x8c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d208      	bcs.n	8000d6e <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	1d39      	adds	r1, r7, #4
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	440a      	add	r2, r1
 8000d68:	7811      	ldrb	r1, [r2, #0]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <FlashReadToBuf+0x90>)
 8000d6c:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	dde8      	ble.n	8000d4c <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3308      	adds	r3, #8
 8000d84:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <FlashReadToBuf+0x8c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d203      	bcs.n	8000d98 <FlashReadToBuf+0x78>
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <FlashReadToBuf+0x94>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d3d0      	bcc.n	8000d3a <FlashReadToBuf+0x1a>
		}
		return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <FlashReadToBuf+0x7e>
	}
	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	0801e800 	.word	0x0801e800
 8000dac:	20000000 	.word	0x20000000
 8000db0:	200004e8 	.word	0x200004e8
 8000db4:	0801ffff 	.word	0x0801ffff

08000db8 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 8000db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	b08d      	sub	sp, #52	; 0x34
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <FlashWrite+0x178>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 8000dd8:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <FlashWrite+0x17c>)
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8000df0:	f7ff ff96 	bl	8000d20 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8000df4:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <FlashWrite+0x180>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	461c      	mov	r4, r3
 8000dfa:	4616      	mov	r6, r2
 8000dfc:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000e00:	4635      	mov	r5, r6
 8000e02:	4623      	mov	r3, r4
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	6859      	ldr	r1, [r3, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0e:	3410      	adds	r4, #16
 8000e10:	3610      	adds	r6, #16
 8000e12:	4564      	cmp	r4, ip
 8000e14:	d1f4      	bne.n	8000e00 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <FlashWrite+0x184>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4946      	ldr	r1, [pc, #280]	; (8000f38 <FlashWrite+0x180>)
 8000e1e:	4848      	ldr	r0, [pc, #288]	; (8000f40 <FlashWrite+0x188>)
 8000e20:	f005 ff4c 	bl	8006cbc <HAL_CRC_Calculate>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2200      	movs	r2, #0
 8000e28:	4698      	mov	r8, r3
 8000e2a:	4691      	mov	r9, r2
 8000e2c:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 8000e30:	f006 fb16 	bl	8007460 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8000e34:	4843      	ldr	r0, [pc, #268]	; (8000f44 <FlashWrite+0x18c>)
 8000e36:	f7ff ff27 	bl	8000c88 <GetPage>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	483d      	ldr	r0, [pc, #244]	; (8000f34 <FlashWrite+0x17c>)
 8000e3e:	f7ff ff23 	bl	8000c88 <GetPage>
 8000e42:	4603      	mov	r3, r0
 8000e44:	1ae3      	subs	r3, r4, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <FlashWrite+0x190>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = GetPage(FLASH_USER_START_ADDR);
 8000e50:	4838      	ldr	r0, [pc, #224]	; (8000f34 <FlashWrite+0x17c>)
 8000e52:	f7ff ff19 	bl	8000c88 <GetPage>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a3b      	ldr	r2, [pc, #236]	; (8000f48 <FlashWrite+0x190>)
 8000e5a:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages = NbOfPages;
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <FlashWrite+0x190>)
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <FlashWrite+0x190>)
 8000e6a:	f006 fbbd 	bl	80075e8 <HAL_FLASHEx_Erase>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d152      	bne.n	8000f1a <FlashWrite+0x162>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8000e74:	e04b      	b.n	8000f0e <FlashWrite+0x156>
		{
			for (int j = 0; j < 8; j++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	e01b      	b.n	8000eb4 <FlashWrite+0xfc>
			{
				if (j + i < bufLength)
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	4413      	add	r3, r2
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <FlashWrite+0x184>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d20a      	bcs.n	8000ea2 <FlashWrite+0xea>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8000e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	441a      	add	r2, r3
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	440b      	add	r3, r1
 8000e9a:	4927      	ldr	r1, [pc, #156]	; (8000f38 <FlashWrite+0x180>)
 8000e9c:	5c8a      	ldrb	r2, [r1, r2]
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e005      	b.n	8000eae <FlashWrite+0xf6>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f107 0208 	add.w	r2, r7, #8
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	dde0      	ble.n	8000e7c <FlashWrite+0xc4>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 8000eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <FlashWrite+0x184>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d20f      	bcs.n	8000ee4 <FlashWrite+0x12c>
 8000ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f006 fa58 	bl	8007380 <HAL_FLASH_Program>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <FlashWrite+0x12c>
			{
				Address = Address + 8;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	3308      	adds	r3, #8
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	3308      	adds	r3, #8
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ee2:	e014      	b.n	8000f0e <FlashWrite+0x156>
			}
			else if (i >= bufLength)
 8000ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <FlashWrite+0x184>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d314      	bcc.n	8000f18 <FlashWrite+0x160>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8000eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f006 fa43 	bl	8007380 <HAL_FLASH_Program>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <FlashWrite+0x156>
				{
					HAL_FLASH_Lock();
 8000f00:	f006 fad4 	bl	80074ac <HAL_FLASH_Lock>
					flashWriting = 0;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <FlashWrite+0x178>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
					return true;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00b      	b.n	8000f26 <FlashWrite+0x16e>
		while (Address < FLASH_USER_END_ADDR)
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <FlashWrite+0x18c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d3af      	bcc.n	8000e76 <FlashWrite+0xbe>
 8000f16:	e000      	b.n	8000f1a <FlashWrite+0x162>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 8000f18:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000f1a:	f006 fac7 	bl	80074ac <HAL_FLASH_Lock>

	flashWriting = 0;
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <FlashWrite+0x178>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	return false;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3734      	adds	r7, #52	; 0x34
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f30:	200004e4 	.word	0x200004e4
 8000f34:	0801e800 	.word	0x0801e800
 8000f38:	200004e8 	.word	0x200004e8
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	2000170c 	.word	0x2000170c
 8000f44:	0801ffff 	.word	0x0801ffff
 8000f48:	20000518 	.word	0x20000518

08000f4c <clamp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

double clamp(double d, double min, double max) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f56:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f5a:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8000f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f66:	f7ff fdb9 	bl	8000adc <__aeabi_dcmplt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <clamp+0x2a>
 8000f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f74:	e001      	b.n	8000f7a <clamp+0x2e>
 8000f76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8000f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f86:	f7ff fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <clamp+0x4a>
 8000f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f94:	e001      	b.n	8000f9a <clamp+0x4e>
 8000f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f9a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa2:	eef0 0a67 	vmov.f32	s1, s15
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	/*if(color ==C_BLACK){
		color = 0b0010100100000101;
	}*/

	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	02db      	lsls	r3, r3, #11
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	b29b      	uxth	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <get_mean_ADC_reading>:
	return ADC_filter_mean/adc_buffer_len;
}


/* Returns the average ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <get_mean_ADC_reading+0x70>)
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
	for(uint8_t n=index;n<adc_buffer_len;n=n+1){
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <get_mean_ADC_reading+0x74>)
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e013      	b.n	800101a <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <get_mean_ADC_reading+0x70>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <get_mean_ADC_reading+0x70>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=index;n<adc_buffer_len;n=n+1){
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3e7      	bcc.n	8000ff2 <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <get_mean_ADC_reading+0x70>)
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001032:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001036:	eef0 7a66 	vmov.f32	s15, s13
}
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	2000058c 	.word	0x2000058c
 800104c:	0801424b 	.word	0x0801424b

08001050 <get_bus_voltage>:

void get_bus_voltage(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC_BUF_VIN, ADC_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION; /* Moving average filter */
 8001054:	2132      	movs	r1, #50	; 0x32
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <get_bus_voltage+0x50>)
 8001058:	f7ff ffbe 	bl	8000fd8 <get_mean_ADC_reading>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	490f      	ldr	r1, [pc, #60]	; (80010a4 <get_bus_voltage+0x54>)
 8001066:	ee17 0a90 	vmov	r0, s15
 800106a:	f002 f983 	bl	8003374 <Moving_Average_Compute>
 800106e:	ec51 0b10 	vmov	r0, r1, d0
 8001072:	a309      	add	r3, pc, #36	; (adr r3, 8001098 <get_bus_voltage+0x48>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fabe 	bl	80005f8 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fdb0 	bl	8000be8 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <get_bus_voltage+0x58>)
 800108c:	6113      	str	r3, [r2, #16]
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	2e062cfe 	.word	0x2e062cfe
 800109c:	3f7e5d97 	.word	0x3f7e5d97
 80010a0:	20000590 	.word	0x20000590
 80010a4:	20000978 	.word	0x20000978
 80010a8:	20000028 	.word	0x20000028
 80010ac:	00000000 	.word	0x00000000

080010b0 <get_actual_temperature>:

void get_actual_temperature(){
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(100, &actual_temperature_filter_struct); /* Moving average filter */
 80010b6:	4980      	ldr	r1, [pc, #512]	; (80012b8 <get_actual_temperature+0x208>)
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f002 f95b 	bl	8003374 <Moving_Average_Compute>
 80010be:	ec53 2b10 	vmov	r2, r3, d0
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd8f 	bl	8000be8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	607b      	str	r3, [r7, #4]
	if(handle == T210){
 80010ce:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <get_actual_temperature+0x20c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d14e      	bne.n	8001174 <get_actual_temperature+0xc4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001260 <get_actual_temperature+0x1b0>
 80010e4:	ec43 2b10 	vmov	d0, r2, r3
 80010e8:	f015 f9e4 	bl	80164b4 <pow>
 80010ec:	ec51 0b10 	vmov	r0, r1, d0
 80010f0:	a35d      	add	r3, pc, #372	; (adr r3, 8001268 <get_actual_temperature+0x1b8>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001270 <get_actual_temperature+0x1c0>
 8001110:	ec43 2b10 	vmov	d0, r2, r3
 8001114:	f015 f9ce 	bl	80164b4 <pow>
 8001118:	ec51 0b10 	vmov	r0, r1, d0
 800111c:	a356      	add	r3, pc, #344	; (adr r3, 8001278 <get_actual_temperature+0x1c8>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa69 	bl	80005f8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f8ad 	bl	800028c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4614      	mov	r4, r2
 8001138:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a34f      	add	r3, pc, #316	; (adr r3, 8001280 <get_actual_temperature+0x1d0>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff f89b 	bl	800028c <__adddf3>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a34a      	add	r3, pc, #296	; (adr r3, 8001288 <get_actual_temperature+0x1d8>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff f892 	bl	800028c <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800116c:	4954      	ldr	r1, [pc, #336]	; (80012c0 <get_actual_temperature+0x210>)
 800116e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001172:	e051      	b.n	8001218 <get_actual_temperature+0x168>
	}
	else if(handle == T245){
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <get_actual_temperature+0x20c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d14d      	bne.n	8001218 <get_actual_temperature+0x168>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff f9e3 	bl	8000548 <__aeabi_f2d>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001260 <get_actual_temperature+0x1b0>
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f015 f991 	bl	80164b4 <pow>
 8001192:	ec51 0b10 	vmov	r0, r1, d0
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <get_actual_temperature+0x1e0>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001270 <get_actual_temperature+0x1c0>
 80011b6:	ec43 2b10 	vmov	d0, r2, r3
 80011ba:	f015 f97b 	bl	80164b4 <pow>
 80011be:	ec51 0b10 	vmov	r0, r1, d0
 80011c2:	a335      	add	r3, pc, #212	; (adr r3, 8001298 <get_actual_temperature+0x1e8>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f85a 	bl	800028c <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4614      	mov	r4, r2
 80011de:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	a32e      	add	r3, pc, #184	; (adr r3, 80012a0 <get_actual_temperature+0x1f0>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	a328      	add	r3, pc, #160	; (adr r3, 80012a8 <get_actual_temperature+0x1f8>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f83f 	bl	800028c <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 8001212:	492b      	ldr	r1, [pc, #172]	; (80012c0 <get_actual_temperature+0x210>)
 8001214:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.actual_temperature = sensor_values.actual_temperature + flash_values.temperature_offset; // Add temperature offset value
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <get_actual_temperature+0x210>)
 800121a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <get_actual_temperature+0x214>)
 8001220:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001224:	f7ff f832 	bl	800028c <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4924      	ldr	r1, [pc, #144]	; (80012c0 <get_actual_temperature+0x210>)
 800122e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if(sensor_values.actual_temperature > 999){
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <get_actual_temperature+0x210>)
 8001234:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001238:	a31d      	add	r3, pc, #116	; (adr r3, 80012b0 <get_actual_temperature+0x200>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d100      	bne.n	800124a <get_actual_temperature+0x19a>
		sensor_values.actual_temperature = 999;
	}
}
 8001248:	e005      	b.n	8001256 <get_actual_temperature+0x1a6>
		sensor_values.actual_temperature = 999;
 800124a:	491d      	ldr	r1, [pc, #116]	; (80012c0 <get_actual_temperature+0x210>)
 800124c:	a318      	add	r3, pc, #96	; (adr r3, 80012b0 <get_actual_temperature+0x200>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
 800125e:	bf00      	nop
 8001260:	00000000 	.word	0x00000000
 8001264:	40080000 	.word	0x40080000
 8001268:	e6c91459 	.word	0xe6c91459
 800126c:	be3d333c 	.word	0xbe3d333c
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	77c4dab0 	.word	0x77c4dab0
 800127c:	bed98561 	.word	0xbed98561
 8001280:	0aa653bc 	.word	0x0aa653bc
 8001284:	3fd1585a 	.word	0x3fd1585a
 8001288:	d797deed 	.word	0xd797deed
 800128c:	40396624 	.word	0x40396624
 8001290:	b4effad8 	.word	0xb4effad8
 8001294:	3e21f933 	.word	0x3e21f933
 8001298:	c7e1dac1 	.word	0xc7e1dac1
 800129c:	bee97525 	.word	0xbee97525
 80012a0:	8d8ee863 	.word	0x8d8ee863
 80012a4:	3fbe16b0 	.word	0x3fbe16b0
 80012a8:	7373b751 	.word	0x7373b751
 80012ac:	40390d47 	.word	0x40390d47
 80012b0:	00000000 	.word	0x00000000
 80012b4:	408f3800 	.word	0x408f3800
 80012b8:	2000064c 	.word	0x2000064c
 80012bc:	20000524 	.word	0x20000524
 80012c0:	20000028 	.word	0x20000028
 80012c4:	20000600 	.word	0x20000600

080012c8 <debugPrint>:

void debugPrint(char _out[]){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS((uint8_t *) _out, strlen(_out));
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	0000      	movs	r0, r0
	...

080012e0 <update_display>:

void update_display(){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 80012e6:	2228      	movs	r2, #40	; 0x28
 80012e8:	2100      	movs	r1, #0
 80012ea:	48ac      	ldr	r0, [pc, #688]	; (800159c <update_display+0x2bc>)
 80012ec:	f012 ffaf 	bl	801424e <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 80012f0:	4bab      	ldr	r3, [pc, #684]	; (80015a0 <update_display+0x2c0>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	49ab      	ldr	r1, [pc, #684]	; (80015a4 <update_display+0x2c4>)
 80012f8:	48a8      	ldr	r0, [pc, #672]	; (800159c <update_display+0x2bc>)
 80012fa:	f012 ff43 	bl	8014184 <siprintf>
	if(sensor_values.set_temperature<100){
 80012fe:	4ba8      	ldr	r3, [pc, #672]	; (80015a0 <update_display+0x2c0>)
 8001300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4ba7      	ldr	r3, [pc, #668]	; (80015a8 <update_display+0x2c8>)
 800130a:	f7ff fbe7 	bl	8000adc <__aeabi_dcmplt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <update_display+0x40>
		buffer[2] = 32;
 8001314:	4ba1      	ldr	r3, [pc, #644]	; (800159c <update_display+0x2bc>)
 8001316:	2220      	movs	r2, #32
 8001318:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 800131a:	4ba0      	ldr	r3, [pc, #640]	; (800159c <update_display+0x2bc>)
 800131c:	2220      	movs	r2, #32
 800131e:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_49X57, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 8001320:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001324:	f7ff fe42 	bl	8000fac <RGB_to_BRG>
 8001328:	4603      	mov	r3, r0
 800132a:	461c      	mov	r4, r3
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe3d 	bl	8000fac <RGB_to_BRG>
 8001332:	4603      	mov	r3, r0
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	9400      	str	r4, [sp, #0]
 8001338:	4b9c      	ldr	r3, [pc, #624]	; (80015ac <update_display+0x2cc>)
 800133a:	4a98      	ldr	r2, [pc, #608]	; (800159c <update_display+0x2bc>)
 800133c:	214b      	movs	r1, #75	; 0x4b
 800133e:	200a      	movs	r0, #10
 8001340:	f003 fbee 	bl	8004b20 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8001344:	2228      	movs	r2, #40	; 0x28
 8001346:	2100      	movs	r1, #0
 8001348:	4894      	ldr	r0, [pc, #592]	; (800159c <update_display+0x2bc>)
 800134a:	f012 ff80 	bl	801424e <memset>
	sprintf(buffer, "%.1f V", sensor_values.bus_voltage);
 800134e:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <update_display+0x2c0>)
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4994      	ldr	r1, [pc, #592]	; (80015b0 <update_display+0x2d0>)
 800135e:	488f      	ldr	r0, [pc, #572]	; (800159c <update_display+0x2bc>)
 8001360:	f012 ff10 	bl	8014184 <siprintf>
	LCD_PutStr(100, 260, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001364:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001368:	f7ff fe20 	bl	8000fac <RGB_to_BRG>
 800136c:	4603      	mov	r3, r0
 800136e:	461c      	mov	r4, r3
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fe1b 	bl	8000fac <RGB_to_BRG>
 8001376:	4603      	mov	r3, r0
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	9400      	str	r4, [sp, #0]
 800137c:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <update_display+0x2d4>)
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <update_display+0x2bc>)
 8001380:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001384:	2064      	movs	r0, #100	; 0x64
 8001386:	f003 fbcb 	bl	8004b20 <LCD_PutStr>


	if(handle == T210){
 800138a:	4b8b      	ldr	r3, [pc, #556]	; (80015b8 <update_display+0x2d8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d112      	bne.n	80013b8 <update_display+0xd8>
		LCD_PutStr(100, 220, "T210", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001392:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001396:	f7ff fe09 	bl	8000fac <RGB_to_BRG>
 800139a:	4603      	mov	r3, r0
 800139c:	461c      	mov	r4, r3
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fe04 	bl	8000fac <RGB_to_BRG>
 80013a4:	4603      	mov	r3, r0
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	9400      	str	r4, [sp, #0]
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <update_display+0x2d4>)
 80013ac:	4a83      	ldr	r2, [pc, #524]	; (80015bc <update_display+0x2dc>)
 80013ae:	21dc      	movs	r1, #220	; 0xdc
 80013b0:	2064      	movs	r0, #100	; 0x64
 80013b2:	f003 fbb5 	bl	8004b20 <LCD_PutStr>
 80013b6:	e015      	b.n	80013e4 <update_display+0x104>
	}
	else if(handle == T245){
 80013b8:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <update_display+0x2d8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d111      	bne.n	80013e4 <update_display+0x104>
		LCD_PutStr(100, 240, "T245", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80013c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013c4:	f7ff fdf2 	bl	8000fac <RGB_to_BRG>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461c      	mov	r4, r3
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fded 	bl	8000fac <RGB_to_BRG>
 80013d2:	4603      	mov	r3, r0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	9400      	str	r4, [sp, #0]
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <update_display+0x2d4>)
 80013da:	4a79      	ldr	r2, [pc, #484]	; (80015c0 <update_display+0x2e0>)
 80013dc:	21f0      	movs	r1, #240	; 0xf0
 80013de:	2064      	movs	r0, #100	; 0x64
 80013e0:	f003 fb9e 	bl	8004b20 <LCD_PutStr>
	}


	if(active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED){
 80013e4:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <update_display+0x2e4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d007      	beq.n	80013fc <update_display+0x11c>
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <update_display+0x2e4>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d003      	beq.n	80013fc <update_display+0x11c>
 80013f4:	4b73      	ldr	r3, [pc, #460]	; (80015c4 <update_display+0x2e4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d148      	bne.n	800148e <update_display+0x1ae>
		LCD_PutStr(214, 65, "Z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80013fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001400:	f7ff fdd4 	bl	8000fac <RGB_to_BRG>
 8001404:	4603      	mov	r3, r0
 8001406:	461c      	mov	r4, r3
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fdcf 	bl	8000fac <RGB_to_BRG>
 800140e:	4603      	mov	r3, r0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	9400      	str	r4, [sp, #0]
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <update_display+0x2e8>)
 8001416:	4a6d      	ldr	r2, [pc, #436]	; (80015cc <update_display+0x2ec>)
 8001418:	2141      	movs	r1, #65	; 0x41
 800141a:	20d6      	movs	r0, #214	; 0xd6
 800141c:	f003 fb80 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 121, "z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001420:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001424:	f7ff fdc2 	bl	8000fac <RGB_to_BRG>
 8001428:	4603      	mov	r3, r0
 800142a:	461c      	mov	r4, r3
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fdbd 	bl	8000fac <RGB_to_BRG>
 8001432:	4603      	mov	r3, r0
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	9400      	str	r4, [sp, #0]
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <update_display+0x2e8>)
 800143a:	4a65      	ldr	r2, [pc, #404]	; (80015d0 <update_display+0x2f0>)
 800143c:	2179      	movs	r1, #121	; 0x79
 800143e:	20d6      	movs	r0, #214	; 0xd6
 8001440:	f003 fb6e 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 177, "Z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001444:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001448:	f7ff fdb0 	bl	8000fac <RGB_to_BRG>
 800144c:	4603      	mov	r3, r0
 800144e:	461c      	mov	r4, r3
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fdab 	bl	8000fac <RGB_to_BRG>
 8001456:	4603      	mov	r3, r0
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	9400      	str	r4, [sp, #0]
 800145c:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <update_display+0x2e8>)
 800145e:	4a5b      	ldr	r2, [pc, #364]	; (80015cc <update_display+0x2ec>)
 8001460:	21b1      	movs	r1, #177	; 0xb1
 8001462:	20d6      	movs	r0, #214	; 0xd6
 8001464:	f003 fb5c 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 233, "z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001468:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800146c:	f7ff fd9e 	bl	8000fac <RGB_to_BRG>
 8001470:	4603      	mov	r3, r0
 8001472:	461c      	mov	r4, r3
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fd99 	bl	8000fac <RGB_to_BRG>
 800147a:	4603      	mov	r3, r0
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	9400      	str	r4, [sp, #0]
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <update_display+0x2e8>)
 8001482:	4a53      	ldr	r2, [pc, #332]	; (80015d0 <update_display+0x2f0>)
 8001484:	21e9      	movs	r1, #233	; 0xe9
 8001486:	20d6      	movs	r0, #214	; 0xd6
 8001488:	f003 fb4a 	bl	8004b20 <LCD_PutStr>
 800148c:	e111      	b.n	80016b2 <update_display+0x3d2>
	}
	else if(active_state == STANDBY){
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <update_display+0x2e4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	f040 80ac 	bne.w	80015f0 <update_display+0x310>
		LCD_PutStr(214, 65, "S", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001498:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800149c:	f7ff fd86 	bl	8000fac <RGB_to_BRG>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461c      	mov	r4, r3
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fd81 	bl	8000fac <RGB_to_BRG>
 80014aa:	4603      	mov	r3, r0
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9400      	str	r4, [sp, #0]
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <update_display+0x2e8>)
 80014b2:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <update_display+0x2f4>)
 80014b4:	2141      	movs	r1, #65	; 0x41
 80014b6:	20d6      	movs	r0, #214	; 0xd6
 80014b8:	f003 fb32 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 121, "T", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80014bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014c0:	f7ff fd74 	bl	8000fac <RGB_to_BRG>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461c      	mov	r4, r3
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fd6f 	bl	8000fac <RGB_to_BRG>
 80014ce:	4603      	mov	r3, r0
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	9400      	str	r4, [sp, #0]
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <update_display+0x2e8>)
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <update_display+0x2f8>)
 80014d8:	2179      	movs	r1, #121	; 0x79
 80014da:	20d6      	movs	r0, #214	; 0xd6
 80014dc:	f003 fb20 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 177, "A", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80014e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014e4:	f7ff fd62 	bl	8000fac <RGB_to_BRG>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461c      	mov	r4, r3
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fd5d 	bl	8000fac <RGB_to_BRG>
 80014f2:	4603      	mov	r3, r0
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	9400      	str	r4, [sp, #0]
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <update_display+0x2e8>)
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <update_display+0x2fc>)
 80014fc:	21b1      	movs	r1, #177	; 0xb1
 80014fe:	20d6      	movs	r0, #214	; 0xd6
 8001500:	f003 fb0e 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 233, "N", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001504:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001508:	f7ff fd50 	bl	8000fac <RGB_to_BRG>
 800150c:	4603      	mov	r3, r0
 800150e:	461c      	mov	r4, r3
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fd4b 	bl	8000fac <RGB_to_BRG>
 8001516:	4603      	mov	r3, r0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	9400      	str	r4, [sp, #0]
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <update_display+0x2e8>)
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <update_display+0x300>)
 8001520:	21e9      	movs	r1, #233	; 0xe9
 8001522:	20d6      	movs	r0, #214	; 0xd6
 8001524:	f003 fafc 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 289, "D", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001528:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800152c:	f7ff fd3e 	bl	8000fac <RGB_to_BRG>
 8001530:	4603      	mov	r3, r0
 8001532:	461c      	mov	r4, r3
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fd39 	bl	8000fac <RGB_to_BRG>
 800153a:	4603      	mov	r3, r0
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	9400      	str	r4, [sp, #0]
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <update_display+0x2e8>)
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <update_display+0x304>)
 8001544:	f240 1121 	movw	r1, #289	; 0x121
 8001548:	20d6      	movs	r0, #214	; 0xd6
 800154a:	f003 fae9 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 253, "B", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800154e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001552:	f7ff fd2b 	bl	8000fac <RGB_to_BRG>
 8001556:	4603      	mov	r3, r0
 8001558:	461c      	mov	r4, r3
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fd26 	bl	8000fac <RGB_to_BRG>
 8001560:	4603      	mov	r3, r0
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9400      	str	r4, [sp, #0]
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <update_display+0x2e8>)
 8001568:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <update_display+0x308>)
 800156a:	21fd      	movs	r1, #253	; 0xfd
 800156c:	20d6      	movs	r0, #214	; 0xd6
 800156e:	f003 fad7 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(214, 279, "Y", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001572:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001576:	f7ff fd19 	bl	8000fac <RGB_to_BRG>
 800157a:	4603      	mov	r3, r0
 800157c:	461c      	mov	r4, r3
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fd14 	bl	8000fac <RGB_to_BRG>
 8001584:	4603      	mov	r3, r0
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <update_display+0x2e8>)
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <update_display+0x30c>)
 800158e:	f240 1117 	movw	r1, #279	; 0x117
 8001592:	20d6      	movs	r0, #214	; 0xd6
 8001594:	f003 fac4 	bl	8004b20 <LCD_PutStr>
 8001598:	e08b      	b.n	80016b2 <update_display+0x3d2>
 800159a:	bf00      	nop
 800159c:	20000560 	.word	0x20000560
 80015a0:	20000028 	.word	0x20000028
 80015a4:	080175e8 	.word	0x080175e8
 80015a8:	40590000 	.word	0x40590000
 80015ac:	080283f8 	.word	0x080283f8
 80015b0:	080175ec 	.word	0x080175ec
 80015b4:	080177c0 	.word	0x080177c0
 80015b8:	20000524 	.word	0x20000524
 80015bc:	080175f4 	.word	0x080175f4
 80015c0:	080175fc 	.word	0x080175fc
 80015c4:	20000018 	.word	0x20000018
 80015c8:	08019348 	.word	0x08019348
 80015cc:	08017604 	.word	0x08017604
 80015d0:	08017608 	.word	0x08017608
 80015d4:	0801760c 	.word	0x0801760c
 80015d8:	08017610 	.word	0x08017610
 80015dc:	08017614 	.word	0x08017614
 80015e0:	08017618 	.word	0x08017618
 80015e4:	0801761c 	.word	0x0801761c
 80015e8:	08017620 	.word	0x08017620
 80015ec:	08017624 	.word	0x08017624
	}
	else{
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*262, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <update_display+0x478>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b58      	ldr	r3, [pc, #352]	; (800175c <update_display+0x47c>)
 80015fc:	f7ff f926 	bl	800084c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	a34f      	add	r3, pc, #316	; (adr r3, 8001748 <update_display+0x468>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	a14e      	add	r1, pc, #312	; (adr r1, 8001750 <update_display+0x470>)
 8001618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800161c:	f7fe fe34 	bl	8000288 <__aeabi_dsub>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fa96 	bl	8000b58 <__aeabi_d2iz>
 800162c:	4603      	mov	r3, r0
 800162e:	b21c      	sxth	r4, r3
 8001630:	f248 607e 	movw	r0, #34430	; 0x867e
 8001634:	f7ff fcba 	bl	8000fac <RGB_to_BRG>
 8001638:	4603      	mov	r3, r0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	f240 131f 	movw	r3, #287	; 0x11f
 8001640:	22e6      	movs	r2, #230	; 0xe6
 8001642:	4621      	mov	r1, r4
 8001644:	20d2      	movs	r0, #210	; 0xd2
 8001646:	f00e fa7b 	bl	800fb40 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*262-1, RGB_to_BRG(C_BLACK));
 800164a:	4b43      	ldr	r3, [pc, #268]	; (8001758 <update_display+0x478>)
 800164c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b41      	ldr	r3, [pc, #260]	; (800175c <update_display+0x47c>)
 8001656:	f7ff f8f9 	bl	800084c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a339      	add	r3, pc, #228	; (adr r3, 8001748 <update_display+0x468>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffc6 	bl	80005f8 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	a137      	add	r1, pc, #220	; (adr r1, 8001750 <update_display+0x470>)
 8001672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001676:	f7fe fe07 	bl	8000288 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <update_display+0x480>)
 8001688:	f7fe fdfe 	bl	8000288 <__aeabi_dsub>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa60 	bl	8000b58 <__aeabi_d2iz>
 8001698:	4603      	mov	r3, r0
 800169a:	b21c      	sxth	r4, r3
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fc85 	bl	8000fac <RGB_to_BRG>
 80016a2:	4603      	mov	r3, r0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4623      	mov	r3, r4
 80016a8:	22e6      	movs	r2, #230	; 0xe6
 80016aa:	2137      	movs	r1, #55	; 0x37
 80016ac:	20d2      	movs	r0, #210	; 0xd2
 80016ae:	f00e fa47 	bl	800fb40 <UG_FillFrame>
	}


	if(ADC_buffer_current == 0){
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <update_display+0x484>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d112      	bne.n	80016e0 <update_display+0x400>
	  	LCD_PutStr(10, 185, "---", FONT_arial_49X57, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80016ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016be:	f7ff fc75 	bl	8000fac <RGB_to_BRG>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461c      	mov	r4, r3
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fc70 	bl	8000fac <RGB_to_BRG>
 80016cc:	4603      	mov	r3, r0
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9400      	str	r4, [sp, #0]
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <update_display+0x488>)
 80016d4:	4a25      	ldr	r2, [pc, #148]	; (800176c <update_display+0x48c>)
 80016d6:	21b9      	movs	r1, #185	; 0xb9
 80016d8:	200a      	movs	r0, #10
 80016da:	f003 fa21 	bl	8004b20 <LCD_PutStr>
			buffer[2] = 32;
			buffer[3] = 32;
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_49X57, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
	}
}
 80016de:	e02e      	b.n	800173e <update_display+0x45e>
		memset(&buffer, '\0', sizeof(buffer));
 80016e0:	2228      	movs	r2, #40	; 0x28
 80016e2:	2100      	movs	r1, #0
 80016e4:	4822      	ldr	r0, [pc, #136]	; (8001770 <update_display+0x490>)
 80016e6:	f012 fdb2 	bl	801424e <memset>
		sprintf(buffer, "%.f", sensor_values.actual_temperature);
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <update_display+0x494>)
 80016ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016f0:	4921      	ldr	r1, [pc, #132]	; (8001778 <update_display+0x498>)
 80016f2:	481f      	ldr	r0, [pc, #124]	; (8001770 <update_display+0x490>)
 80016f4:	f012 fd46 	bl	8014184 <siprintf>
		if(sensor_values.actual_temperature < 100){
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <update_display+0x494>)
 80016fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <update_display+0x49c>)
 8001704:	f7ff f9ea 	bl	8000adc <__aeabi_dcmplt>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <update_display+0x43a>
			buffer[2] = 32;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <update_display+0x490>)
 8001710:	2220      	movs	r2, #32
 8001712:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <update_display+0x490>)
 8001716:	2220      	movs	r2, #32
 8001718:	70da      	strb	r2, [r3, #3]
	  	LCD_PutStr(10, 165, buffer, FONT_arial_49X57, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 800171a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800171e:	f7ff fc45 	bl	8000fac <RGB_to_BRG>
 8001722:	4603      	mov	r3, r0
 8001724:	461c      	mov	r4, r3
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fc40 	bl	8000fac <RGB_to_BRG>
 800172c:	4603      	mov	r3, r0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9400      	str	r4, [sp, #0]
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <update_display+0x488>)
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <update_display+0x490>)
 8001736:	21a5      	movs	r1, #165	; 0xa5
 8001738:	200a      	movs	r0, #10
 800173a:	f003 f9f1 	bl	8004b20 <LCD_PutStr>
}
 800173e:	bf00      	nop
 8001740:	3704      	adds	r7, #4
 8001742:	46bd      	mov	sp, r7
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	bf00      	nop
 8001748:	00000000 	.word	0x00000000
 800174c:	40706000 	.word	0x40706000
 8001750:	00000000 	.word	0x00000000
 8001754:	4071f000 	.word	0x4071f000
 8001758:	20000630 	.word	0x20000630
 800175c:	40790000 	.word	0x40790000
 8001760:	3ff00000 	.word	0x3ff00000
 8001764:	2000001a 	.word	0x2000001a
 8001768:	080283f8 	.word	0x080283f8
 800176c:	08017628 	.word	0x08017628
 8001770:	20000560 	.word	0x20000560
 8001774:	20000028 	.word	0x20000028
 8001778:	080175e8 	.word	0x080175e8
 800177c:	40590000 	.word	0x40590000

08001780 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001780:	b598      	push	{r3, r4, r7, lr}
 8001782:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8001784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feba 	bl	8000504 <__aeabi_ui2d>
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <get_set_temperature+0x64>)
 8001792:	ed93 7b00 	vldr	d7, [r3]
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <get_set_temperature+0x68>)
 8001798:	ed93 6b00 	vldr	d6, [r3]
 800179c:	eeb0 2a46 	vmov.f32	s4, s12
 80017a0:	eef0 2a66 	vmov.f32	s5, s13
 80017a4:	eeb0 1a47 	vmov.f32	s2, s14
 80017a8:	eef0 1a67 	vmov.f32	s3, s15
 80017ac:	ec41 0b10 	vmov	d0, r0, r1
 80017b0:	f7ff fbcc 	bl	8000f4c <clamp>
 80017b4:	ec53 2b10 	vmov	r2, r3, d0
 80017b8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9f2 	bl	8000ba8 <__aeabi_d2uiz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = TIM2->CNT;
 80017c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe98 	bl	8000504 <__aeabi_ui2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <get_set_temperature+0x6c>)
 80017da:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017de:	bf00      	nop
 80017e0:	bd98      	pop	{r3, r4, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000020 	.word	0x20000020
 80017e8:	200005f8 	.word	0x200005f8
 80017ec:	20000028 	.word	0x20000028

080017f0 <beep>:

/* Beep the buzzer */
void beep(){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <beep+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2232      	movs	r2, #50	; 0x32
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Start_IT(&htim6);
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <beep+0x1c>)
 80017fe:	f00a f883 	bl	800b908 <HAL_TIM_Base_Start_IT>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000182c 	.word	0x2000182c
 800180c:	20001910 	.word	0x20001910

08001810 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <check_emergency_shutdown+0xd0>)
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <check_emergency_shutdown+0x20>
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <check_emergency_shutdown+0xd4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8001826:	f003 fa7d 	bl	8004d24 <HAL_GetTick>
 800182a:	4603      	mov	r3, r0
 800182c:	4a2e      	ldr	r2, [pc, #184]	; (80018e8 <check_emergency_shutdown+0xd8>)
 800182e:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <check_emergency_shutdown+0xd0>)
 8001832:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f7ff f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <check_emergency_shutdown+0x82>
 8001848:	f003 fa6c 	bl	8004d24 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <check_emergency_shutdown+0xd8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe55 	bl	8000504 <__aeabi_ui2d>
 800185a:	4604      	mov	r4, r0
 800185c:	460d      	mov	r5, r1
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <check_emergency_shutdown+0xdc>)
 8001860:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001864:	a31a      	add	r3, pc, #104	; (adr r3, 80018d0 <check_emergency_shutdown+0xc0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7ff f945 	bl	8000b04 <__aeabi_dcmpge>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <check_emergency_shutdown+0x82>
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <check_emergency_shutdown+0xd4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d104      	bne.n	8001892 <check_emergency_shutdown+0x82>
		active_state = EMERGENCY_SLEEP;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <check_emergency_shutdown+0xd4>)
 800188a:	2203      	movs	r2, #3
 800188c:	701a      	strb	r2, [r3, #0]
		beep();
 800188e:	f7ff ffaf 	bl	80017f0 <beep>
	}
	sensor_values.previous_state = active_state;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <check_emergency_shutdown+0xd4>)
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <check_emergency_shutdown+0xd0>)
 8001898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <check_emergency_shutdown+0xd0>)
 800189e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018a2:	a30d      	add	r3, pc, #52	; (adr r3, 80018d8 <check_emergency_shutdown+0xc8>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7ff f936 	bl	8000b18 <__aeabi_dcmpgt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <check_emergency_shutdown+0xa4>
		active_state = EMERGENCY_SLEEP;
		beep();
	}
}
 80018b2:	e008      	b.n	80018c6 <check_emergency_shutdown+0xb6>
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <check_emergency_shutdown+0xd4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d104      	bne.n	80018c6 <check_emergency_shutdown+0xb6>
		active_state = EMERGENCY_SLEEP;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <check_emergency_shutdown+0xd4>)
 80018be:	2203      	movs	r2, #3
 80018c0:	701a      	strb	r2, [r3, #0]
		beep();
 80018c2:	f7ff ff95 	bl	80017f0 <beep>
}
 80018c6:	bf00      	nop
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40ed4c00 	.word	0x40ed4c00
 80018d8:	00000000 	.word	0x00000000
 80018dc:	407db000 	.word	0x407db000
 80018e0:	20000028 	.word	0x20000028
 80018e4:	20000018 	.word	0x20000018
 80018e8:	20000538 	.word	0x20000538
 80018ec:	20000600 	.word	0x20000600

080018f0 <get_enc_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_enc_button_status(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	uint8_t button_status;
	if(HAL_GPIO_ReadPin (GPIOB, SW_2_Pin) == 1){
 80018f6:	2120      	movs	r1, #32
 80018f8:	482b      	ldr	r0, [pc, #172]	; (80019a8 <get_enc_button_status+0xb8>)
 80018fa:	f006 f893 	bl	8007a24 <HAL_GPIO_ReadPin>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d102      	bne.n	800190a <get_enc_button_status+0x1a>
		button_status = 1;
 8001904:	2301      	movs	r3, #1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	e001      	b.n	800190e <get_enc_button_status+0x1e>
	}
	else{
		button_status = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.enc_button_status = Moving_Average_Compute(button_status, &enc_button_sense_filterStruct); /* Moving average filter */
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4926      	ldr	r1, [pc, #152]	; (80019ac <get_enc_button_status+0xbc>)
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fd2e 	bl	8003374 <Moving_Average_Compute>
 8001918:	eeb0 7a40 	vmov.f32	s14, s0
 800191c:	eef0 7a60 	vmov.f32	s15, s1
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <get_enc_button_status+0xc0>)
 8001922:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* If encoder button is pressed */
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <get_enc_button_status+0xc0>)
 8001928:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800192c:	a31c      	add	r3, pc, #112	; (adr r3, 80019a0 <get_enc_button_status+0xb0>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7ff f8f1 	bl	8000b18 <__aeabi_dcmpgt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d100      	bne.n	800193e <get_enc_button_status+0x4e>
		else if (active_state == EMERGENCY_SLEEP){
			active_state = RUN;
		}
		previous_millis_heating_halted_update = HAL_GetTick();
	}
}
 800193c:	e02b      	b.n	8001996 <get_enc_button_status+0xa6>
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 800193e:	f003 f9f1 	bl	8004d24 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <get_enc_button_status+0xc4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1ad2      	subs	r2, r2, r3
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <get_enc_button_status+0xc8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d321      	bcc.n	8001996 <get_enc_button_status+0xa6>
		beep();
 8001952:	f7ff ff4d 	bl	80017f0 <beep>
		if ((active_state == RUN) || (active_state == STANDBY)){
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <get_enc_button_status+0xcc>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <get_enc_button_status+0x76>
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <get_enc_button_status+0xcc>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d103      	bne.n	800196e <get_enc_button_status+0x7e>
			active_state = HALTED;
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <get_enc_button_status+0xcc>)
 8001968:	2204      	movs	r2, #4
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e00e      	b.n	800198c <get_enc_button_status+0x9c>
		else if (active_state == HALTED){
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <get_enc_button_status+0xcc>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d103      	bne.n	800197e <get_enc_button_status+0x8e>
			active_state = RUN;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <get_enc_button_status+0xcc>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e006      	b.n	800198c <get_enc_button_status+0x9c>
		else if (active_state == EMERGENCY_SLEEP){
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <get_enc_button_status+0xcc>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d102      	bne.n	800198c <get_enc_button_status+0x9c>
			active_state = RUN;
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <get_enc_button_status+0xcc>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
		previous_millis_heating_halted_update = HAL_GetTick();
 800198c:	f003 f9ca 	bl	8004d24 <HAL_GetTick>
 8001990:	4603      	mov	r3, r0
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <get_enc_button_status+0xc4>)
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	9999999a 	.word	0x9999999a
 80019a4:	3fe99999 	.word	0x3fe99999
 80019a8:	48000400 	.word	0x48000400
 80019ac:	200012fc 	.word	0x200012fc
 80019b0:	20000028 	.word	0x20000028
 80019b4:	20000534 	.word	0x20000534
 80019b8:	20000010 	.word	0x20000010
 80019bc:	20000018 	.word	0x20000018

080019c0 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80019c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f006 f829 	bl	8007a24 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <get_stand_status+0x1e>
		stand_status = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	e001      	b.n	80019e2 <get_stand_status+0x22>
	}
	else{
		stand_status = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4938      	ldr	r1, [pc, #224]	; (8001ac8 <get_stand_status+0x108>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 fcc4 	bl	8003374 <Moving_Average_Compute>
 80019ec:	eeb0 7a40 	vmov.f32	s14, s0
 80019f0:	eef0 7a60 	vmov.f32	s15, s1
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <get_stand_status+0x10c>)
 80019f6:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <get_stand_status+0x10c>)
 80019fc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <get_stand_status+0x110>)
 8001a06:	f7ff f887 	bl	8000b18 <__aeabi_dcmpgt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d039      	beq.n	8001a84 <get_stand_status+0xc4>
		if(active_state == RUN){
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <get_stand_status+0x114>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <get_stand_status+0x68>
			active_state = STANDBY;
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <get_stand_status+0x114>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
			previous_standby_millis = HAL_GetTick();
 8001a1e:	f003 f981 	bl	8004d24 <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <get_stand_status+0x118>)
 8001a26:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8001a28:	f003 f97c 	bl	8004d24 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <get_stand_status+0x118>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd65 	bl	8000504 <__aeabi_ui2d>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <get_stand_status+0x11c>)
 8001a40:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a44:	a31e      	add	r3, pc, #120	; (adr r3, 8001ac0 <get_stand_status+0x100>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fdd5 	bl	80005f8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7ff f855 	bl	8000b04 <__aeabi_dcmpge>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <get_stand_status+0xae>
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <get_stand_status+0x114>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d102      	bne.n	8001a6e <get_stand_status+0xae>
			active_state = SLEEP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <get_stand_status+0x114>)
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <get_stand_status+0x114>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d003      	beq.n	8001a7e <get_stand_status+0xbe>
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <get_stand_status+0x114>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d102      	bne.n	8001a84 <get_stand_status+0xc4>
			active_state = SLEEP;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <get_stand_status+0x114>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <get_stand_status+0x10c>)
 8001a86:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <get_stand_status+0x110>)
 8001a90:	f7ff f824 	bl	8000adc <__aeabi_dcmplt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d100      	bne.n	8001a9c <get_stand_status+0xdc>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			active_state = RUN;
		}
	}
}
 8001a9a:	e00a      	b.n	8001ab2 <get_stand_status+0xf2>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <get_stand_status+0x114>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d003      	beq.n	8001aac <get_stand_status+0xec>
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <get_stand_status+0x114>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <get_stand_status+0xf2>
			active_state = RUN;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <get_stand_status+0x114>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40ed4c00 	.word	0x40ed4c00
 8001ac8:	20000ca4 	.word	0x20000ca4
 8001acc:	20000028 	.word	0x20000028
 8001ad0:	3fe00000 	.word	0x3fe00000
 8001ad4:	20000018 	.word	0x20000018
 8001ad8:	2000053c 	.word	0x2000053c
 8001adc:	20000600 	.word	0x20000600

08001ae0 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 8001ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aea:	483f      	ldr	r0, [pc, #252]	; (8001be8 <get_handle_type+0x108>)
 8001aec:	f005 ff9a 	bl	8007a24 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <get_handle_type+0x1c>
		handle_status = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	e001      	b.n	8001b00 <get_handle_type+0x20>
	}
	else{
		handle_status = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	493a      	ldr	r1, [pc, #232]	; (8001bec <get_handle_type+0x10c>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fc35 	bl	8003374 <Moving_Average_Compute>
 8001b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0e:	eef0 7a60 	vmov.f32	s15, s1
 8001b12:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <get_handle_type+0x110>)
 8001b14:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <get_handle_type+0x110>)
 8001b1a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <get_handle_type+0x114>)
 8001b24:	f7fe fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01e      	beq.n	8001b6c <get_handle_type+0x8c>
		handle = T210;
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <get_handle_type+0x118>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <get_handle_type+0x11c>)
 8001b36:	4a32      	ldr	r2, [pc, #200]	; (8001c00 <get_handle_type+0x120>)
 8001b38:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //450 deg C
 8001b3a:	4932      	ldr	r1, [pc, #200]	; (8001c04 <get_handle_type+0x124>)
 8001b3c:	a328      	add	r3, pc, #160	; (adr r3, 8001be0 <get_handle_type+0x100>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 10;
 8001b46:	4930      	ldr	r1, [pc, #192]	; (8001c08 <get_handle_type+0x128>)
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <get_handle_type+0x12c>)
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001b52:	492f      	ldr	r1, [pc, #188]	; (8001c10 <get_handle_type+0x130>)
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <get_handle_type+0x134>)
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8001b5e:	492e      	ldr	r1, [pc, #184]	; (8001c18 <get_handle_type+0x138>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <get_handle_type+0x13c>)
 8001b66:	e9c1 2300 	strd	r2, r3, [r1]
 8001b6a:	e01d      	b.n	8001ba8 <get_handle_type+0xc8>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <get_handle_type+0x118>)
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <get_handle_type+0x11c>)
 8001b74:	4a2a      	ldr	r2, [pc, #168]	; (8001c20 <get_handle_type+0x140>)
 8001b76:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //430 deg C
 8001b78:	4922      	ldr	r1, [pc, #136]	; (8001c04 <get_handle_type+0x124>)
 8001b7a:	a319      	add	r3, pc, #100	; (adr r3, 8001be0 <get_handle_type+0x100>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 15;
 8001b84:	4920      	ldr	r1, [pc, #128]	; (8001c08 <get_handle_type+0x128>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <get_handle_type+0x144>)
 8001b8c:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001b90:	491f      	ldr	r1, [pc, #124]	; (8001c10 <get_handle_type+0x130>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <get_handle_type+0x134>)
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8001b9c:	491e      	ldr	r1, [pc, #120]	; (8001c18 <get_handle_type+0x138>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <get_handle_type+0x114>)
 8001ba4:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <get_handle_type+0x128>)
 8001baa:	ed93 7b00 	vldr	d7, [r3]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <get_handle_type+0x130>)
 8001bb0:	ed93 6b00 	vldr	d6, [r3]
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <get_handle_type+0x138>)
 8001bb6:	ed93 5b00 	vldr	d5, [r3]
 8001bba:	eeb0 2a45 	vmov.f32	s4, s10
 8001bbe:	eef0 2a65 	vmov.f32	s5, s11
 8001bc2:	eeb0 1a46 	vmov.f32	s2, s12
 8001bc6:	eef0 1a66 	vmov.f32	s3, s13
 8001bca:	eeb0 0a47 	vmov.f32	s0, s14
 8001bce:	eef0 0a67 	vmov.f32	s1, s15
 8001bd2:	4815      	ldr	r0, [pc, #84]	; (8001c28 <get_handle_type+0x148>)
 8001bd4:	f001 fea7 	bl	8003926 <PID_SetTunings>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	00000000 	.word	0x00000000
 8001be4:	407c2000 	.word	0x407c2000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	20000fd0 	.word	0x20000fd0
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	3fe00000 	.word	0x3fe00000
 8001bf8:	20000524 	.word	0x20000524
 8001bfc:	20000588 	.word	0x20000588
 8001c00:	42700000 	.word	0x42700000
 8001c04:	200005f8 	.word	0x200005f8
 8001c08:	20000548 	.word	0x20000548
 8001c0c:	40240000 	.word	0x40240000
 8001c10:	20000550 	.word	0x20000550
 8001c14:	403e0000 	.word	0x403e0000
 8001c18:	20000558 	.word	0x20000558
 8001c1c:	3fd00000 	.word	0x3fd00000
 8001c20:	42f00000 	.word	0x42f00000
 8001c24:	402e0000 	.word	0x402e0000
 8001c28:	200019a8 	.word	0x200019a8

08001c2c <HAL_TIM_IC_CaptureCallback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7f1b      	ldrb	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d003      	beq.n	8001c44 <HAL_TIM_IC_CaptureCallback+0x18>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7f1b      	ldrb	r3, [r3, #28]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d101      	bne.n	8001c48 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8001c44:	f7ff fdd4 	bl	80017f0 <beep>
	}
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, dutycycle);
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <set_heater_duty+0x20>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	88fa      	ldrh	r2, [r7, #6]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200018c4 	.word	0x200018c4

08001c74 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim4) && (current_measurement_requested == 1) )
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d112      	bne.n	8001caa <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10e      	bne.n	8001caa <HAL_TIM_PWM_PulseFinishedCallback+0x36>
  {
	  HAL_TIM_Base_Start_IT(&htim16);
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8001c8e:	f009 fe3b 	bl	800b908 <HAL_TIM_Base_Start_IT>
	  set_heater_duty(duty_cycle); //Set duty cycle back to calculated
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff84 	bl	8000ba8 <__aeabi_d2uiz>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ffd3 	bl	8001c50 <set_heater_duty>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200018c4 	.word	0x200018c4
 8001cb8:	20000648 	.word	0x20000648
 8001cbc:	2000195c 	.word	0x2000195c
 8001cc0:	20000640 	.word	0x20000640

08001cc4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 ){
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d10b      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_TIM_Base_Stop_IT(&htim16);
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cd6:	f009 fe81 	bl	800b9dc <HAL_TIM_Base_Stop_IT>
	  //HAL_ADC_Start_IT(&hadc2);
	  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001cdc:	f004 f80e 	bl	8005cfc <HAL_ADCEx_InjectedStart_IT>
	  HAL_GPIO_WritePin(GPIOA, USR_1_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f005 feb4 	bl	8007a54 <HAL_GPIO_WritePin>
  }
  if (htim == &htim6){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d106      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x3e>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_Base_Stop_IT(&htim6);
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001cfe:	f009 fe6d 	bl	800b9dc <HAL_TIM_Base_Stop_IT>

  }
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000195c 	.word	0x2000195c
 8001d10:	20001628 	.word	0x20001628
 8001d14:	20001910 	.word	0x20001910
 8001d18:	2000182c 	.word	0x2000182c

08001d1c <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	if(current_measurement_requested == 1){
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d110      	bne.n	8001d4e <HAL_ADCEx_InjectedConvCpltCallback+0x32>
		HAL_GPIO_WritePin(GPIOA, USR_1_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f005 fe8e 	bl	8007a54 <HAL_GPIO_WritePin>
		ADC_buffer_current = HAL_ADCEx_InjectedGetValue(&hadc1,1);
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 8001d3c:	f004 f8ea 	bl	8005f14 <HAL_ADCEx_InjectedGetValue>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 8001d46:	801a      	strh	r2, [r3, #0]
		current_measurement_requested = 0;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000648 	.word	0x20000648
 8001d5c:	20001628 	.word	0x20001628
 8001d60:	2000001a 	.word	0x2000001a
 8001d64:	00000000 	.word	0x00000000

08001d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d6c:	ed2d 8b06 	vpush	{d8-d10}
 8001d70:	b09b      	sub	sp, #108	; 0x6c
 8001d72:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d74:	f002 ff7c 	bl	8004c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d78:	f000 fe70 	bl	8002a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7c:	f001 fa3e 	bl	80031fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001d80:	f001 fa0a 	bl	8003198 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d84:	f000 fed2 	bl	8002b2c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001d88:	f000 ff40 	bl	8002c0c <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d8c:	f000 ffd0 	bl	8002d30 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d90:	f001 f80e 	bl	8002db0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d94:	f001 f84a 	bl	8002e2c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d98:	f001 f8f4 	bl	8002f84 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d9c:	f001 f946 	bl	800302c <MX_TIM4_Init>
  MX_CRC_Init();
 8001da0:	f000 ffa4 	bl	8002cec <MX_CRC_Init>
  MX_TIM16_Init();
 8001da4:	f001 f9d2 	bl	800314c <MX_TIM16_Init>
  MX_TIM6_Init();
 8001da8:	f001 f99a 	bl	80030e0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001dac:	f011 f81e 	bl	8012dec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8001db0:	f002 fef4 	bl	8004b9c <LCD_init>

	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001db4:	213c      	movs	r1, #60	; 0x3c
 8001db6:	4850      	ldr	r0, [pc, #320]	; (8001ef8 <main+0x190>)
 8001db8:	f00a f888 	bl	800becc <HAL_TIM_Encoder_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	484f      	ldr	r0, [pc, #316]	; (8001efc <main+0x194>)
 8001dc0:	f009 fe92 	bl	800bae8 <HAL_TIM_PWM_Start_IT>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	484e      	ldr	r0, [pc, #312]	; (8001f00 <main+0x198>)
 8001dc8:	f00b f866 	bl	800ce98 <HAL_TIMEx_PWMN_Start>
	

		HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	484d      	ldr	r0, [pc, #308]	; (8001f04 <main+0x19c>)
 8001dd0:	f003 ff22 	bl	8005c18 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc3, (uint16_t*)ADC_BUF_VIN, ADC_BUF_VIN_LEN);	//Start ADC DMA
 8001dd4:	2232      	movs	r2, #50	; 0x32
 8001dd6:	494c      	ldr	r1, [pc, #304]	; (8001f08 <main+0x1a0>)
 8001dd8:	484a      	ldr	r0, [pc, #296]	; (8001f04 <main+0x19c>)
 8001dda:	f003 fb1b 	bl	8005414 <HAL_ADC_Start_DMA>

        HAL_ADC_Start_IT(&hadc1);        //Start ADC DMA
 8001dde:	484b      	ldr	r0, [pc, #300]	; (8001f0c <main+0x1a4>)
 8001de0:	f003 f9d8 	bl	8005194 <HAL_ADC_Start_IT>

		Moving_Average_Init(&actual_temperature_filter_struct,5);
 8001de4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001de8:	4849      	ldr	r0, [pc, #292]	; (8001f10 <main+0x1a8>)
 8001dea:	f001 fa92 	bl	8003312 <Moving_Average_Init>
		Moving_Average_Init(&input_voltage_filterStruct,50);
 8001dee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001f14 <main+0x1ac>
 8001df2:	4849      	ldr	r0, [pc, #292]	; (8001f18 <main+0x1b0>)
 8001df4:	f001 fa8d 	bl	8003312 <Moving_Average_Init>
		Moving_Average_Init(&stand_sense_filterStruct,50);
 8001df8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001f14 <main+0x1ac>
 8001dfc:	4847      	ldr	r0, [pc, #284]	; (8001f1c <main+0x1b4>)
 8001dfe:	f001 fa88 	bl	8003312 <Moving_Average_Init>
		Moving_Average_Init(&handle_sense_filterStruct,50);
 8001e02:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8001f14 <main+0x1ac>
 8001e06:	4846      	ldr	r0, [pc, #280]	; (8001f20 <main+0x1b8>)
 8001e08:	f001 fa83 	bl	8003312 <Moving_Average_Init>
		Moving_Average_Init(&enc_button_sense_filterStruct,10);
 8001e0c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001e10:	4844      	ldr	r0, [pc, #272]	; (8001f24 <main+0x1bc>)
 8001e12:	f001 fa7e 	bl	8003312 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	/* Init and fill filter structures with initial values */
  		set_heater_duty(0);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff ff1a 	bl	8001c50 <set_heater_duty>
  		for (int i = 0; i<200;i++){
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e20:	e00c      	b.n	8001e3c <main+0xd4>
  			get_bus_voltage();
 8001e22:	f7ff f915 	bl	8001050 <get_bus_voltage>
  			get_actual_temperature();
 8001e26:	f7ff f943 	bl	80010b0 <get_actual_temperature>
  			get_handle_type();
 8001e2a:	f7ff fe59 	bl	8001ae0 <get_handle_type>
  			get_stand_status();
 8001e2e:	f7ff fdc7 	bl	80019c0 <get_stand_status>
  			get_enc_button_status();
 8001e32:	f7ff fd5d 	bl	80018f0 <get_enc_button_status>
  		for (int i = 0; i<200;i++){
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	3301      	adds	r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	2bc7      	cmp	r3, #199	; 0xc7
 8001e40:	ddef      	ble.n	8001e22 <main+0xba>
  		}

  		uint16_t menu_length = 8;
 8001e42:	2308      	movs	r3, #8
 8001e44:	82fb      	strh	r3, [r7, #22]
  	    	FlashWrite(&default_flash_values);
  		}
  	    FlashRead(&flash_values);
*/
  		/* Set startup state */
  		active_state = SLEEP;
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <main+0x1c0>)
 8001e48:	2202      	movs	r2, #2
 8001e4a:	701a      	strb	r2, [r3, #0]

  		/* Initiate OLED display */
  		TIM2->CNT = 1000;
 8001e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  		uint16_t menu_cursor_position = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	85fb      	strh	r3, [r7, #46]	; 0x2e
  		uint16_t old_menu_cursor_position = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  		uint16_t menue_start = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	84fb      	strh	r3, [r7, #38]	; 0x26
  		uint16_t menue_level = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	84bb      	strh	r3, [r7, #36]	; 0x24
  		uint16_t menu_active = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	847b      	strh	r3, [r7, #34]	; 0x22
  		float old_value = 0;
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]

  		/* If button is pressed during startup - Show SETTINGS and allow to release button. */
  		if (HAL_GPIO_ReadPin (GPIOB, SW_2_Pin) == 1){
 8001e70:	2120      	movs	r1, #32
 8001e72:	482e      	ldr	r0, [pc, #184]	; (8001f2c <main+0x1c4>)
 8001e74:	f005 fdd6 	bl	8007a24 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 828a 	bne.w	8002394 <main+0x62c>
  			LCD_PutStr(50, 5, "SETTINGS", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e84:	f7ff f892 	bl	8000fac <RGB_to_BRG>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461c      	mov	r4, r3
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f88d 	bl	8000fac <RGB_to_BRG>
 8001e92:	4603      	mov	r3, r0
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	9400      	str	r4, [sp, #0]
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <main+0x1c8>)
 8001e9a:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <main+0x1cc>)
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	2032      	movs	r0, #50	; 0x32
 8001ea0:	f002 fe3e 	bl	8004b20 <LCD_PutStr>
  			LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_WHITE));
 8001ea4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ea8:	f7ff f880 	bl	8000fac <RGB_to_BRG>
 8001eac:	4603      	mov	r3, r0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2328      	movs	r3, #40	; 0x28
 8001eb2:	22f0      	movs	r2, #240	; 0xf0
 8001eb4:	2128      	movs	r1, #40	; 0x28
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f002 fdf4 	bl	8004aa4 <LCD_DrawLine>
  			LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_WHITE));
 8001ebc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ec0:	f7ff f874 	bl	8000fac <RGB_to_BRG>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2329      	movs	r3, #41	; 0x29
 8001eca:	22f0      	movs	r2, #240	; 0xf0
 8001ecc:	2129      	movs	r1, #41	; 0x29
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f002 fde8 	bl	8004aa4 <LCD_DrawLine>
  			LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_WHITE));
 8001ed4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ed8:	f7ff f868 	bl	8000fac <RGB_to_BRG>
 8001edc:	4603      	mov	r3, r0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	232a      	movs	r3, #42	; 0x2a
 8001ee2:	22f0      	movs	r2, #240	; 0xf0
 8001ee4:	212a      	movs	r1, #42	; 0x2a
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f002 fddc 	bl	8004aa4 <LCD_DrawLine>

  			HAL_Delay(1000);
 8001eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef0:	f002 ff24 	bl	8004d3c <HAL_Delay>
  			while(menu_active == 1){
 8001ef4:	e24a      	b.n	800238c <main+0x624>
 8001ef6:	bf00      	nop
 8001ef8:	20001878 	.word	0x20001878
 8001efc:	200018c4 	.word	0x200018c4
 8001f00:	2000182c 	.word	0x2000182c
 8001f04:	20001678 	.word	0x20001678
 8001f08:	20000590 	.word	0x20000590
 8001f0c:	20001628 	.word	0x20001628
 8001f10:	2000064c 	.word	0x2000064c
 8001f14:	42480000 	.word	0x42480000
 8001f18:	20000978 	.word	0x20000978
 8001f1c:	20000ca4 	.word	0x20000ca4
 8001f20:	20000fd0 	.word	0x20000fd0
 8001f24:	200012fc 	.word	0x200012fc
 8001f28:	20000018 	.word	0x20000018
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	08021b40 	.word	0x08021b40
 8001f34:	0801762c 	.word	0x0801762c
  				if(menue_level == 0){
 8001f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d111      	bne.n	8001f62 <main+0x1fa>
  					if(TIM2->CNT < 1000)
 8001f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f48:	d204      	bcs.n	8001f54 <main+0x1ec>
  					{
  						TIM2->CNT = 1000;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
  					}
  					menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	85fb      	strh	r3, [r7, #46]	; 0x2e
  				}
  				if (menue_level == 1){
 8001f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 808e 	bne.w	8002086 <main+0x31e>
  					((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001f6a:	69f8      	ldr	r0, [r7, #28]
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fac2 	bl	8000504 <__aeabi_ui2d>
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4bac      	ldr	r3, [pc, #688]	; (8002238 <main+0x4d0>)
 8001f86:	f7fe f97f 	bl	8000288 <__aeabi_dsub>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe29 	bl	8000be8 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fad5 	bl	8000548 <__aeabi_f2d>
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa6:	f7fe fc51 	bl	800084c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe f96b 	bl	800028c <__adddf3>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4690      	mov	r8, r2
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	ee17 0a90 	vmov	r0, s15
 8001fcc:	f7fe fabc 	bl	8000548 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001fd6:	00c9      	lsls	r1, r1, #3
 8001fd8:	4898      	ldr	r0, [pc, #608]	; (800223c <main+0x4d4>)
 8001fda:	180c      	adds	r4, r1, r0
 8001fdc:	4640      	mov	r0, r8
 8001fde:	4649      	mov	r1, r9
 8001fe0:	f7fe f952 	bl	8000288 <__aeabi_dsub>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	e9c4 2300 	strd	r2, r3, [r4]
  					if (menu_cursor_position == 5){
 8001fec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d12c      	bne.n	800204c <main+0x2e4>
  						((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001ff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4a91      	ldr	r2, [pc, #580]	; (800223c <main+0x4d4>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fda9 	bl	8000b58 <__aeabi_d2iz>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	bfb8      	it	lt
 800200c:	425b      	neglt	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa88 	bl	8000524 <__aeabi_i2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	ed9f 1b85 	vldr	d1, [pc, #532]	; 8002230 <main+0x4c8>
 800201c:	ec43 2b10 	vmov	d0, r2, r3
 8002020:	f014 fa1a 	bl	8016458 <fmod>
 8002024:	eeb0 7a40 	vmov.f32	s14, s0
 8002028:	eef0 7a60 	vmov.f32	s15, s1
 800202c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4a82      	ldr	r2, [pc, #520]	; (800223c <main+0x4d4>)
 8002032:	189c      	adds	r4, r3, r2
 8002034:	eeb0 0a47 	vmov.f32	s0, s14
 8002038:	eef0 0a67 	vmov.f32	s1, s15
 800203c:	f014 fab6 	bl	80165ac <round>
 8002040:	eeb0 7a40 	vmov.f32	s14, s0
 8002044:	eef0 7a60 	vmov.f32	s15, s1
 8002048:	ed84 7b00 	vstr	d7, [r4]
  					}
  					if(menu_cursor_position != 1){
 800204c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800204e:	2b01      	cmp	r3, #1
 8002050:	d019      	beq.n	8002086 <main+0x31e>
  						((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8002052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4a79      	ldr	r2, [pc, #484]	; (800223c <main+0x4d4>)
 8002058:	4413      	add	r3, r2
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fd79 	bl	8000b58 <__aeabi_d2iz>
 8002066:	4603      	mov	r3, r0
 8002068:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800206c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002070:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4971      	ldr	r1, [pc, #452]	; (800223c <main+0x4d4>)
 8002076:	185c      	adds	r4, r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	f7fe fa53 	bl	8000524 <__aeabi_i2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	e9c4 2300 	strd	r2, r3, [r4]
  					}
  				}

  				if(menu_cursor_position > menu_length){
 8002086:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	429a      	cmp	r2, r3
 800208c:	d908      	bls.n	80020a0 <main+0x338>
  								menu_cursor_position = menu_length;
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	85fb      	strh	r3, [r7, #46]	; 0x2e
  								TIM2->CNT = 1000 + menu_length*2;
 8002092:	8afb      	ldrh	r3, [r7, #22]
 8002094:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002098:	005a      	lsls	r2, r3, #1
 800209a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
  				}

  				if(menu_cursor_position >= menu_length-(menu_length-5)){
 80020a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d902      	bls.n	80020ac <main+0x344>
  					menue_start = menu_cursor_position-5;
 80020a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020a8:	3b05      	subs	r3, #5
 80020aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  				}


  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 80020ac:	2110      	movs	r1, #16
 80020ae:	4864      	ldr	r0, [pc, #400]	; (8002240 <main+0x4d8>)
 80020b0:	f005 fcb8 	bl	8007a24 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d129      	bne.n	800210e <main+0x3a6>
 80020ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020bc:	8afb      	ldrh	r3, [r7, #22]
 80020be:	3b02      	subs	r3, #2
 80020c0:	429a      	cmp	r2, r3
 80020c2:	da24      	bge.n	800210e <main+0x3a6>
  					if(menue_level == 0){
 80020c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <main+0x37e>
  						old_value = ((double*)&flash_values)[menu_cursor_position];
 80020ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <main+0x4d4>)
 80020d0:	4413      	add	r3, r2
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fd85 	bl	8000be8 <__aeabi_d2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	61fb      	str	r3, [r7, #28]
  						old_menu_cursor_position = menu_cursor_position;
 80020e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  					}
  					if(menue_level == 1){
 80020e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <main+0x392>
  						TIM2->CNT = old_menu_cursor_position*2 + 1000;
 80020ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020f2:	005a      	lsls	r2, r3, #1
 80020f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
  					}

  					menue_level = abs(menue_level-1);
 80020fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020fc:	3b01      	subs	r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bfb8      	it	lt
 8002102:	425b      	neglt	r3, r3
 8002104:	84bb      	strh	r3, [r7, #36]	; 0x24
  					HAL_Delay(200);
 8002106:	20c8      	movs	r0, #200	; 0xc8
 8002108:	f002 fe18 	bl	8004d3c <HAL_Delay>
 800210c:	e037      	b.n	800217e <main+0x416>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length)){
 800210e:	2110      	movs	r1, #16
 8002110:	484b      	ldr	r0, [pc, #300]	; (8002240 <main+0x4d8>)
 8002112:	f005 fc87 	bl	8007a24 <HAL_GPIO_ReadPin>
 8002116:	4603      	mov	r3, r0
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <main+0x3c2>
 800211c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800211e:	8afb      	ldrh	r3, [r7, #22]
 8002120:	429a      	cmp	r2, r3
 8002122:	d102      	bne.n	800212a <main+0x3c2>
  					menu_active = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	847b      	strh	r3, [r7, #34]	; 0x22
 8002128:	e029      	b.n	800217e <main+0x416>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 800212a:	2110      	movs	r1, #16
 800212c:	4844      	ldr	r0, [pc, #272]	; (8002240 <main+0x4d8>)
 800212e:	f005 fc79 	bl	8007a24 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10a      	bne.n	800214e <main+0x3e6>
 8002138:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800213a:	8afb      	ldrh	r3, [r7, #22]
 800213c:	3b01      	subs	r3, #1
 800213e:	429a      	cmp	r2, r3
 8002140:	d105      	bne.n	800214e <main+0x3e6>
  					menu_active = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	847b      	strh	r3, [r7, #34]	; 0x22
  					FlashWrite(&flash_values);
 8002146:	483d      	ldr	r0, [pc, #244]	; (800223c <main+0x4d4>)
 8002148:	f7fe fe36 	bl	8000db8 <FlashWrite>
 800214c:	e017      	b.n	800217e <main+0x416>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 800214e:	2110      	movs	r1, #16
 8002150:	483b      	ldr	r0, [pc, #236]	; (8002240 <main+0x4d8>)
 8002152:	f005 fc67 	bl	8007a24 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b01      	cmp	r3, #1
 800215a:	d110      	bne.n	800217e <main+0x416>
 800215c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	3b02      	subs	r3, #2
 8002162:	429a      	cmp	r2, r3
 8002164:	d10b      	bne.n	800217e <main+0x416>
  					flash_values = default_flash_values;
 8002166:	4a35      	ldr	r2, [pc, #212]	; (800223c <main+0x4d4>)
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <main+0x4dc>)
 800216a:	4614      	mov	r4, r2
 800216c:	461d      	mov	r5, r3
 800216e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002176:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800217a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				}

  	  			LCD_PutStr(0, 300, "Version:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800217e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002182:	f7fe ff13 	bl	8000fac <RGB_to_BRG>
 8002186:	4603      	mov	r3, r0
 8002188:	461c      	mov	r4, r3
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe ff0e 	bl	8000fac <RGB_to_BRG>
 8002190:	4603      	mov	r3, r0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	9400      	str	r4, [sp, #0]
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <main+0x4e0>)
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <main+0x4e4>)
 800219a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800219e:	2000      	movs	r0, #0
 80021a0:	f002 fcbe 	bl	8004b20 <LCD_PutStr>
  	  			LCD_PutStr(150, 300, version, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021a8:	f7fe ff00 	bl	8000fac <RGB_to_BRG>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461c      	mov	r4, r3
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe fefb 	bl	8000fac <RGB_to_BRG>
 80021b6:	4603      	mov	r3, r0
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	9400      	str	r4, [sp, #0]
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <main+0x4e0>)
 80021be:	4a24      	ldr	r2, [pc, #144]	; (8002250 <main+0x4e8>)
 80021c0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80021c4:	2096      	movs	r0, #150	; 0x96
 80021c6:	f002 fcab 	bl	8004b20 <LCD_PutStr>

  				for(int i = menue_start;i<menue_start+6;i++){
 80021ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e0d7      	b.n	8002380 <main+0x618>

  					if((i == menu_cursor_position) && (menue_level == 0)){
 80021d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d141      	bne.n	800225c <main+0x4f4>
 80021d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d13e      	bne.n	800225c <main+0x4f4>
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 80021de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	0091      	lsls	r1, r2, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	460b      	mov	r3, r1
 80021f4:	4413      	add	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	332d      	adds	r3, #45	; 0x2d
 80021fa:	b29c      	uxth	r4, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <main+0x4ec>)
 8002208:	189d      	adds	r5, r3, r2
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fece 	bl	8000fac <RGB_to_BRG>
 8002210:	4603      	mov	r3, r0
 8002212:	461e      	mov	r6, r3
 8002214:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002218:	f7fe fec8 	bl	8000fac <RGB_to_BRG>
 800221c:	4603      	mov	r3, r0
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	9600      	str	r6, [sp, #0]
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <main+0x4f0>)
 8002224:	462a      	mov	r2, r5
 8002226:	4621      	mov	r1, r4
 8002228:	2005      	movs	r0, #5
 800222a:	f002 fc79 	bl	8004b20 <LCD_PutStr>
 800222e:	e03d      	b.n	80022ac <main+0x544>
 8002230:	00000000 	.word	0x00000000
 8002234:	40000000 	.word	0x40000000
 8002238:	408f4000 	.word	0x408f4000
 800223c:	20000600 	.word	0x20000600
 8002240:	48000400 	.word	0x48000400
 8002244:	20000068 	.word	0x20000068
 8002248:	080177c0 	.word	0x080177c0
 800224c:	08017638 	.word	0x08017638
 8002250:	08017644 	.word	0x08017644
 8002254:	20000098 	.word	0x20000098
 8002258:	08019348 	.word	0x08019348

  					}
  					else{
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800225c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4413      	add	r3, r2
 800226a:	461a      	mov	r2, r3
 800226c:	0091      	lsls	r1, r2, #2
 800226e:	461a      	mov	r2, r3
 8002270:	460b      	mov	r3, r1
 8002272:	4413      	add	r3, r2
 8002274:	b29b      	uxth	r3, r3
 8002276:	332d      	adds	r3, #45	; 0x2d
 8002278:	b29c      	uxth	r4, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4a28      	ldr	r2, [pc, #160]	; (8002328 <main+0x5c0>)
 8002286:	189d      	adds	r5, r3, r2
 8002288:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800228c:	f7fe fe8e 	bl	8000fac <RGB_to_BRG>
 8002290:	4603      	mov	r3, r0
 8002292:	461e      	mov	r6, r3
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fe89 	bl	8000fac <RGB_to_BRG>
 800229a:	4603      	mov	r3, r0
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	9600      	str	r6, [sp, #0]
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <main+0x5c4>)
 80022a2:	462a      	mov	r2, r5
 80022a4:	4621      	mov	r1, r4
 80022a6:	2005      	movs	r0, #5
 80022a8:	f002 fc3a 	bl	8004b20 <LCD_PutStr>
  					}

  					char str[20];
  				  	memset(&str, '\0', sizeof(str));
 80022ac:	463b      	mov	r3, r7
 80022ae:	2214      	movs	r2, #20
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f011 ffcb 	bl	801424e <memset>
  					sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <main+0x5c8>)
 80022be:	4413      	add	r3, r2
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	4638      	mov	r0, r7
 80022c6:	491b      	ldr	r1, [pc, #108]	; (8002334 <main+0x5cc>)
 80022c8:	f011 ff5c 	bl	8014184 <siprintf>
  					if(i <= menu_length-3){
 80022cc:	8afb      	ldrh	r3, [r7, #22]
 80022ce:	3b02      	subs	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	da51      	bge.n	800237a <main+0x612>
  						if((i == menu_cursor_position) && (menue_level == 1)){
 80022d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d12c      	bne.n	8002338 <main+0x5d0>
 80022de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d129      	bne.n	8002338 <main+0x5d0>
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 80022e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	461a      	mov	r2, r3
 80022f4:	0091      	lsls	r1, r2, #2
 80022f6:	461a      	mov	r2, r3
 80022f8:	460b      	mov	r3, r1
 80022fa:	4413      	add	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	332d      	adds	r3, #45	; 0x2d
 8002300:	b29c      	uxth	r4, r3
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe fe52 	bl	8000fac <RGB_to_BRG>
 8002308:	4603      	mov	r3, r0
 800230a:	461d      	mov	r5, r3
 800230c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002310:	f7fe fe4c 	bl	8000fac <RGB_to_BRG>
 8002314:	4603      	mov	r3, r0
 8002316:	463a      	mov	r2, r7
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	9500      	str	r5, [sp, #0]
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <main+0x5c4>)
 800231e:	4621      	mov	r1, r4
 8002320:	20c8      	movs	r0, #200	; 0xc8
 8002322:	f002 fbfd 	bl	8004b20 <LCD_PutStr>
 8002326:	e028      	b.n	800237a <main+0x612>
 8002328:	20000098 	.word	0x20000098
 800232c:	08019348 	.word	0x08019348
 8002330:	20000600 	.word	0x20000600
 8002334:	0801764c 	.word	0x0801764c

  						}
  						else{
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4413      	add	r3, r2
 8002346:	461a      	mov	r2, r3
 8002348:	0091      	lsls	r1, r2, #2
 800234a:	461a      	mov	r2, r3
 800234c:	460b      	mov	r3, r1
 800234e:	4413      	add	r3, r2
 8002350:	b29b      	uxth	r3, r3
 8002352:	332d      	adds	r3, #45	; 0x2d
 8002354:	b29c      	uxth	r4, r3
 8002356:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800235a:	f7fe fe27 	bl	8000fac <RGB_to_BRG>
 800235e:	4603      	mov	r3, r0
 8002360:	461d      	mov	r5, r3
 8002362:	2000      	movs	r0, #0
 8002364:	f7fe fe22 	bl	8000fac <RGB_to_BRG>
 8002368:	4603      	mov	r3, r0
 800236a:	463a      	mov	r2, r7
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	9500      	str	r5, [sp, #0]
 8002370:	4bd7      	ldr	r3, [pc, #860]	; (80026d0 <main+0x968>)
 8002372:	4621      	mov	r1, r4
 8002374:	20c8      	movs	r0, #200	; 0xc8
 8002376:	f002 fbd3 	bl	8004b20 <LCD_PutStr>
  				for(int i = menue_start;i<menue_start+6;i++){
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3301      	adds	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002382:	3305      	adds	r3, #5
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	429a      	cmp	r2, r3
 8002388:	f77f af22 	ble.w	80021d0 <main+0x468>
  			while(menu_active == 1){
 800238c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800238e:	2b01      	cmp	r3, #1
 8002390:	f43f add2 	beq.w	8001f38 <main+0x1d0>
  				}
  			}
  		}

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8002394:	4bcf      	ldr	r3, [pc, #828]	; (80026d4 <main+0x96c>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fc01 	bl	8000ba8 <__aeabi_d2uiz>
 80023a6:	4603      	mov	r3, r0
 80023a8:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.actual_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80023aa:	4bcb      	ldr	r3, [pc, #812]	; (80026d8 <main+0x970>)
 80023ac:	ed93 7b00 	vldr	d7, [r3]
 80023b0:	4bca      	ldr	r3, [pc, #808]	; (80026dc <main+0x974>)
 80023b2:	ed93 6b00 	vldr	d6, [r3]
 80023b6:	4bca      	ldr	r3, [pc, #808]	; (80026e0 <main+0x978>)
 80023b8:	ed93 5b00 	vldr	d5, [r3]
 80023bc:	2300      	movs	r3, #0
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2301      	movs	r3, #1
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	eeb0 2a45 	vmov.f32	s4, s10
 80023c8:	eef0 2a65 	vmov.f32	s5, s11
 80023cc:	eeb0 1a46 	vmov.f32	s2, s12
 80023d0:	eef0 1a66 	vmov.f32	s3, s13
 80023d4:	eeb0 0a47 	vmov.f32	s0, s14
 80023d8:	eef0 0a67 	vmov.f32	s1, s15
 80023dc:	4bc1      	ldr	r3, [pc, #772]	; (80026e4 <main+0x97c>)
 80023de:	4ac2      	ldr	r2, [pc, #776]	; (80026e8 <main+0x980>)
 80023e0:	49c2      	ldr	r1, [pc, #776]	; (80026ec <main+0x984>)
 80023e2:	48c3      	ldr	r0, [pc, #780]	; (80026f0 <main+0x988>)
 80023e4:	f001 f860 	bl	80034a8 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80023e8:	2101      	movs	r1, #1
 80023ea:	48c1      	ldr	r0, [pc, #772]	; (80026f0 <main+0x988>)
 80023ec:	f001 f9ef 	bl	80037ce <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); //Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80023f0:	4bc0      	ldr	r3, [pc, #768]	; (80026f4 <main+0x98c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	48bd      	ldr	r0, [pc, #756]	; (80026f0 <main+0x988>)
 80023fa:	f001 fb97 	bl	8003b2c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 	// Set max and min output limit
 80023fe:	ed9f 1bac 	vldr	d1, [pc, #688]	; 80026b0 <main+0x948>
 8002402:	ed9f 0bad 	vldr	d0, [pc, #692]	; 80026b8 <main+0x950>
 8002406:	48ba      	ldr	r0, [pc, #744]	; (80026f0 <main+0x988>)
 8002408:	f001 f9ff 	bl	800380a <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 		// Set max and min I limit
 800240c:	ed9f 1bac 	vldr	d1, [pc, #688]	; 80026c0 <main+0x958>
 8002410:	ed9f 0bad 	vldr	d0, [pc, #692]	; 80026c8 <main+0x960>
 8002414:	48b6      	ldr	r0, [pc, #728]	; (80026f0 <main+0x988>)
 8002416:	f001 fa66 	bl	80038e6 <PID_SetILimits>


		UG_FillScreen(RGB_to_BRG(C_BLACK));
 800241a:	2000      	movs	r0, #0
 800241c:	f7fe fdc6 	bl	8000fac <RGB_to_BRG>
 8002420:	4603      	mov	r3, r0
 8002422:	4618      	mov	r0, r3
 8002424:	f00d fb68 	bl	800faf8 <UG_FillScreen>

		LCD_PutStr(55, 5, "AxxSolder", FONT_arial_29X35, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002428:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800242c:	f7fe fdbe 	bl	8000fac <RGB_to_BRG>
 8002430:	4603      	mov	r3, r0
 8002432:	461c      	mov	r4, r3
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fdb9 	bl	8000fac <RGB_to_BRG>
 800243a:	4603      	mov	r3, r0
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	9400      	str	r4, [sp, #0]
 8002440:	4bad      	ldr	r3, [pc, #692]	; (80026f8 <main+0x990>)
 8002442:	4aae      	ldr	r2, [pc, #696]	; (80026fc <main+0x994>)
 8002444:	2105      	movs	r1, #5
 8002446:	2037      	movs	r0, #55	; 0x37
 8002448:	f002 fb6a 	bl	8004b20 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 800244c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002450:	f7fe fdac 	bl	8000fac <RGB_to_BRG>
 8002454:	4603      	mov	r3, r0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2328      	movs	r3, #40	; 0x28
 800245a:	22f0      	movs	r2, #240	; 0xf0
 800245c:	2128      	movs	r1, #40	; 0x28
 800245e:	2000      	movs	r0, #0
 8002460:	f002 fb20 	bl	8004aa4 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002464:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002468:	f7fe fda0 	bl	8000fac <RGB_to_BRG>
 800246c:	4603      	mov	r3, r0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2329      	movs	r3, #41	; 0x29
 8002472:	22f0      	movs	r2, #240	; 0xf0
 8002474:	2129      	movs	r1, #41	; 0x29
 8002476:	2000      	movs	r0, #0
 8002478:	f002 fb14 	bl	8004aa4 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 800247c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002480:	f7fe fd94 	bl	8000fac <RGB_to_BRG>
 8002484:	4603      	mov	r3, r0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	232a      	movs	r3, #42	; 0x2a
 800248a:	22f0      	movs	r2, #240	; 0xf0
 800248c:	212a      	movs	r1, #42	; 0x2a
 800248e:	2000      	movs	r0, #0
 8002490:	f002 fb08 	bl	8004aa4 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_25X28, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002494:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002498:	f7fe fd88 	bl	8000fac <RGB_to_BRG>
 800249c:	4603      	mov	r3, r0
 800249e:	461c      	mov	r4, r3
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fd83 	bl	8000fac <RGB_to_BRG>
 80024a6:	4603      	mov	r3, r0
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	9400      	str	r4, [sp, #0]
 80024ac:	4b94      	ldr	r3, [pc, #592]	; (8002700 <main+0x998>)
 80024ae:	4a95      	ldr	r2, [pc, #596]	; (8002704 <main+0x99c>)
 80024b0:	2132      	movs	r1, #50	; 0x32
 80024b2:	200a      	movs	r0, #10
 80024b4:	f002 fb34 	bl	8004b20 <LCD_PutStr>
		UG_DrawCircle(105, 90, 4, RGB_to_BRG(C_GREEN));
 80024b8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80024bc:	f7fe fd76 	bl	8000fac <RGB_to_BRG>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2204      	movs	r2, #4
 80024c4:	215a      	movs	r1, #90	; 0x5a
 80024c6:	2069      	movs	r0, #105	; 0x69
 80024c8:	f00d fbf4 	bl	800fcb4 <UG_DrawCircle>
		UG_DrawCircle(105, 90, 3, RGB_to_BRG(C_GREEN));
 80024cc:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80024d0:	f7fe fd6c 	bl	8000fac <RGB_to_BRG>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2203      	movs	r2, #3
 80024d8:	215a      	movs	r1, #90	; 0x5a
 80024da:	2069      	movs	r0, #105	; 0x69
 80024dc:	f00d fbea 	bl	800fcb4 <UG_DrawCircle>
		LCD_PutStr(115, 75, "C", FONT_arial_49X57, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 80024e0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80024e4:	f7fe fd62 	bl	8000fac <RGB_to_BRG>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461c      	mov	r4, r3
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fd5d 	bl	8000fac <RGB_to_BRG>
 80024f2:	4603      	mov	r3, r0
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9400      	str	r4, [sp, #0]
 80024f8:	4b83      	ldr	r3, [pc, #524]	; (8002708 <main+0x9a0>)
 80024fa:	4a84      	ldr	r2, [pc, #528]	; (800270c <main+0x9a4>)
 80024fc:	214b      	movs	r1, #75	; 0x4b
 80024fe:	2073      	movs	r0, #115	; 0x73
 8002500:	f002 fb0e 	bl	8004b20 <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_25X28, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002504:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002508:	f7fe fd50 	bl	8000fac <RGB_to_BRG>
 800250c:	4603      	mov	r3, r0
 800250e:	461c      	mov	r4, r3
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe fd4b 	bl	8000fac <RGB_to_BRG>
 8002516:	4603      	mov	r3, r0
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	9400      	str	r4, [sp, #0]
 800251c:	4b78      	ldr	r3, [pc, #480]	; (8002700 <main+0x998>)
 800251e:	4a7c      	ldr	r2, [pc, #496]	; (8002710 <main+0x9a8>)
 8002520:	218c      	movs	r1, #140	; 0x8c
 8002522:	200a      	movs	r0, #10
 8002524:	f002 fafc 	bl	8004b20 <LCD_PutStr>
		UG_DrawCircle(105, 185, 4, RGB_to_BRG(C_GREEN));
 8002528:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800252c:	f7fe fd3e 	bl	8000fac <RGB_to_BRG>
 8002530:	4603      	mov	r3, r0
 8002532:	2204      	movs	r2, #4
 8002534:	21b9      	movs	r1, #185	; 0xb9
 8002536:	2069      	movs	r0, #105	; 0x69
 8002538:	f00d fbbc 	bl	800fcb4 <UG_DrawCircle>
		UG_DrawCircle(105, 185, 3, RGB_to_BRG(C_GREEN));
 800253c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002540:	f7fe fd34 	bl	8000fac <RGB_to_BRG>
 8002544:	4603      	mov	r3, r0
 8002546:	2203      	movs	r2, #3
 8002548:	21b9      	movs	r1, #185	; 0xb9
 800254a:	2069      	movs	r0, #105	; 0x69
 800254c:	f00d fbb2 	bl	800fcb4 <UG_DrawCircle>
		LCD_PutStr(115, 170, "C", FONT_arial_49X57, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 8002550:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002554:	f7fe fd2a 	bl	8000fac <RGB_to_BRG>
 8002558:	4603      	mov	r3, r0
 800255a:	461c      	mov	r4, r3
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fd25 	bl	8000fac <RGB_to_BRG>
 8002562:	4603      	mov	r3, r0
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	9400      	str	r4, [sp, #0]
 8002568:	4b67      	ldr	r3, [pc, #412]	; (8002708 <main+0x9a0>)
 800256a:	4a68      	ldr	r2, [pc, #416]	; (800270c <main+0x9a4>)
 800256c:	21aa      	movs	r1, #170	; 0xaa
 800256e:	2073      	movs	r0, #115	; 0x73
 8002570:	f002 fad6 	bl	8004b20 <LCD_PutStr>

		UG_DrawFrame(3, 136, 165, 225, RGB_to_BRG(C_GREEN));
 8002574:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002578:	f7fe fd18 	bl	8000fac <RGB_to_BRG>
 800257c:	4603      	mov	r3, r0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	23e1      	movs	r3, #225	; 0xe1
 8002582:	22a5      	movs	r2, #165	; 0xa5
 8002584:	2188      	movs	r1, #136	; 0x88
 8002586:	2003      	movs	r0, #3
 8002588:	f00d fb4c 	bl	800fc24 <UG_DrawFrame>
		UG_DrawFrame(2, 135, 166, 226, RGB_to_BRG(C_GREEN));
 800258c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002590:	f7fe fd0c 	bl	8000fac <RGB_to_BRG>
 8002594:	4603      	mov	r3, r0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	23e2      	movs	r3, #226	; 0xe2
 800259a:	22a6      	movs	r2, #166	; 0xa6
 800259c:	2187      	movs	r1, #135	; 0x87
 800259e:	2002      	movs	r0, #2
 80025a0:	f00d fb40 	bl	800fc24 <UG_DrawFrame>


		LCD_PutStr(2, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025a8:	f7fe fd00 	bl	8000fac <RGB_to_BRG>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461c      	mov	r4, r3
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fcfb 	bl	8000fac <RGB_to_BRG>
 80025b6:	4603      	mov	r3, r0
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9400      	str	r4, [sp, #0]
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <main+0x9ac>)
 80025be:	4a56      	ldr	r2, [pc, #344]	; (8002718 <main+0x9b0>)
 80025c0:	21eb      	movs	r1, #235	; 0xeb
 80025c2:	2002      	movs	r0, #2
 80025c4:	f002 faac 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025cc:	f7fe fcee 	bl	8000fac <RGB_to_BRG>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461c      	mov	r4, r3
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe fce9 	bl	8000fac <RGB_to_BRG>
 80025da:	4603      	mov	r3, r0
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	9400      	str	r4, [sp, #0]
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <main+0x9ac>)
 80025e2:	4a4e      	ldr	r2, [pc, #312]	; (800271c <main+0x9b4>)
 80025e4:	21ff      	movs	r1, #255	; 0xff
 80025e6:	2002      	movs	r0, #2
 80025e8:	f002 fa9a 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(2, 275, "PCB temp:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025f0:	f7fe fcdc 	bl	8000fac <RGB_to_BRG>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461c      	mov	r4, r3
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fcd7 	bl	8000fac <RGB_to_BRG>
 80025fe:	4603      	mov	r3, r0
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	9400      	str	r4, [sp, #0]
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <main+0x9ac>)
 8002606:	4a46      	ldr	r2, [pc, #280]	; (8002720 <main+0x9b8>)
 8002608:	f240 1113 	movw	r1, #275	; 0x113
 800260c:	2002      	movs	r0, #2
 800260e:	f002 fa87 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(125, 275, "POWER ->", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002612:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002616:	f7fe fcc9 	bl	8000fac <RGB_to_BRG>
 800261a:	4603      	mov	r3, r0
 800261c:	461c      	mov	r4, r3
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fcc4 	bl	8000fac <RGB_to_BRG>
 8002624:	4603      	mov	r3, r0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <main+0x9ac>)
 800262c:	4a3d      	ldr	r2, [pc, #244]	; (8002724 <main+0x9bc>)
 800262e:	f240 1113 	movw	r1, #275	; 0x113
 8002632:	207d      	movs	r0, #125	; 0x7d
 8002634:	f002 fa74 	bl	8004b20 <LCD_PutStr>

		UG_DrawLine(2, 298, 240, 298, RGB_to_BRG(C_YELLOW));
 8002638:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800263c:	f7fe fcb6 	bl	8000fac <RGB_to_BRG>
 8002640:	4603      	mov	r3, r0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8002648:	22f0      	movs	r2, #240	; 0xf0
 800264a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800264e:	2002      	movs	r0, #2
 8002650:	f00d fc16 	bl	800fe80 <UG_DrawLine>
		LCD_PutStr(2, 300, "PRESETS    ", FONT_arial_16X18, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002654:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002658:	f7fe fca8 	bl	8000fac <RGB_to_BRG>
 800265c:	4603      	mov	r3, r0
 800265e:	461c      	mov	r4, r3
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fca3 	bl	8000fac <RGB_to_BRG>
 8002666:	4603      	mov	r3, r0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	9400      	str	r4, [sp, #0]
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <main+0x9ac>)
 800266e:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <main+0x9c0>)
 8002670:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002674:	2002      	movs	r0, #2
 8002676:	f002 fa53 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(165, 300, "280", FONT_arial_16X18, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 800267a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800267e:	f7fe fc95 	bl	8000fac <RGB_to_BRG>
 8002682:	4603      	mov	r3, r0
 8002684:	461c      	mov	r4, r3
 8002686:	2000      	movs	r0, #0
 8002688:	f7fe fc90 	bl	8000fac <RGB_to_BRG>
 800268c:	4603      	mov	r3, r0
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	9400      	str	r4, [sp, #0]
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <main+0x9ac>)
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <main+0x9c4>)
 8002696:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800269a:	20a5      	movs	r0, #165	; 0xa5
 800269c:	f002 fa40 	bl	8004b20 <LCD_PutStr>
		LCD_PutStr(205, 300, "330", FONT_arial_16X18, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80026a0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80026a4:	f7fe fc82 	bl	8000fac <RGB_to_BRG>
 80026a8:	4603      	mov	r3, r0
 80026aa:	e041      	b.n	8002730 <main+0x9c8>
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40790000 	.word	0x40790000
	...
 80026c4:	4072c000 	.word	0x4072c000
 80026c8:	00000000 	.word	0x00000000
 80026cc:	c072c000 	.word	0xc072c000
 80026d0:	08019348 	.word	0x08019348
 80026d4:	20000600 	.word	0x20000600
 80026d8:	20000548 	.word	0x20000548
 80026dc:	20000550 	.word	0x20000550
 80026e0:	20000558 	.word	0x20000558
 80026e4:	20000638 	.word	0x20000638
 80026e8:	20000630 	.word	0x20000630
 80026ec:	20000030 	.word	0x20000030
 80026f0:	200019a8 	.word	0x200019a8
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	08021b40 	.word	0x08021b40
 80026fc:	08017654 	.word	0x08017654
 8002700:	0801c750 	.word	0x0801c750
 8002704:	08017660 	.word	0x08017660
 8002708:	080283f8 	.word	0x080283f8
 800270c:	0801766c 	.word	0x0801766c
 8002710:	08017670 	.word	0x08017670
 8002714:	080177c0 	.word	0x080177c0
 8002718:	0801767c 	.word	0x0801767c
 800271c:	0801768c 	.word	0x0801768c
 8002720:	0801769c 	.word	0x0801769c
 8002724:	080176a8 	.word	0x080176a8
 8002728:	080176b4 	.word	0x080176b4
 800272c:	080176c0 	.word	0x080176c0
 8002730:	461c      	mov	r4, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fc3a 	bl	8000fac <RGB_to_BRG>
 8002738:	4603      	mov	r3, r0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	4bb2      	ldr	r3, [pc, #712]	; (8002a08 <main+0xca0>)
 8002740:	4ab2      	ldr	r2, [pc, #712]	; (8002a0c <main+0xca4>)
 8002742:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002746:	20cd      	movs	r0, #205	; 0xcd
 8002748:	f002 f9ea 	bl	8004b20 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 800274c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002750:	f7fe fc2c 	bl	8000fac <RGB_to_BRG>
 8002754:	4603      	mov	r3, r0
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f240 1321 	movw	r3, #289	; 0x121
 800275c:	22e8      	movs	r2, #232	; 0xe8
 800275e:	2135      	movs	r1, #53	; 0x35
 8002760:	20d0      	movs	r0, #208	; 0xd0
 8002762:	f00d fa5f 	bl	800fc24 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002766:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800276a:	f7fe fc1f 	bl	8000fac <RGB_to_BRG>
 800276e:	4603      	mov	r3, r0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002776:	22e7      	movs	r2, #231	; 0xe7
 8002778:	2136      	movs	r1, #54	; 0x36
 800277a:	20d1      	movs	r0, #209	; 0xd1
 800277c:	f00d fa52 	bl	800fc24 <UG_DrawFrame>
		UG_FillFrame(180, 180, 200, 200, RGB_to_BRG(C_YELLOW));
		UG_FillFrame(180, 200, 200, 220, RGB_to_BRG(C_DARK_GREEN));
		UG_FillFrame(180, 220, 200, 240, RGB_to_BRG(C_LIGHT_SKY_BLUE));
*/
  		/* Start-up beep */
  		beep();
 8002780:	f7ff f836 	bl	80017f0 <beep>
  		HAL_Delay(200);
 8002784:	20c8      	movs	r0, #200	; 0xc8
 8002786:	f002 fad9 	bl	8004d3c <HAL_Delay>
  		beep();
 800278a:	f7ff f831 	bl	80017f0 <beep>
  		HAL_Delay(200);
 800278e:	20c8      	movs	r0, #200	; 0xc8
 8002790:	f002 fad4 	bl	8004d3c <HAL_Delay>
  		beep();
 8002794:	f7ff f82c 	bl	80017f0 <beep>


  		while (1){

  			check_emergency_shutdown();
 8002798:	f7ff f83a 	bl	8001810 <check_emergency_shutdown>

  			if(HAL_GetTick() - previous_sensor_PID_update >= interval_sensor_update){
 800279c:	f002 fac2 	bl	8004d24 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b9b      	ldr	r3, [pc, #620]	; (8002a10 <main+0xca8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	4b9a      	ldr	r3, [pc, #616]	; (8002a14 <main+0xcac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d30e      	bcc.n	80027ce <main+0xa66>
  				get_stand_status();
 80027b0:	f7ff f906 	bl	80019c0 <get_stand_status>
  				get_bus_voltage();
 80027b4:	f7fe fc4c 	bl	8001050 <get_bus_voltage>
  				get_handle_type();
 80027b8:	f7ff f992 	bl	8001ae0 <get_handle_type>
  				get_enc_button_status();
 80027bc:	f7ff f898 	bl	80018f0 <get_enc_button_status>
  				get_set_temperature();
 80027c0:	f7fe ffde 	bl	8001780 <get_set_temperature>
  				previous_sensor_PID_update = HAL_GetTick();
 80027c4:	f002 faae 	bl	8004d24 <HAL_GetTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4a91      	ldr	r2, [pc, #580]	; (8002a10 <main+0xca8>)
 80027cc:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 80027ce:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <main+0xcb0>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d832      	bhi.n	800283c <main+0xad4>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <main+0xa74>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	08002801 	.word	0x08002801
 80027e0:	0800280f 	.word	0x0800280f
 80027e4:	0800281d 	.word	0x0800281d
 80027e8:	080027f1 	.word	0x080027f1
 80027ec:	0800282d 	.word	0x0800282d
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 80027f0:	498a      	ldr	r1, [pc, #552]	; (8002a1c <main+0xcb4>)
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80027fe:	e01d      	b.n	800283c <main+0xad4>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8002800:	4b87      	ldr	r3, [pc, #540]	; (8002a20 <main+0xcb8>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	4985      	ldr	r1, [pc, #532]	; (8002a1c <main+0xcb4>)
 8002808:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800280c:	e016      	b.n	800283c <main+0xad4>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <main+0xcbc>)
 8002810:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002814:	4981      	ldr	r1, [pc, #516]	; (8002a1c <main+0xcb4>)
 8002816:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800281a:	e00f      	b.n	800283c <main+0xad4>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 800281c:	497f      	ldr	r1, [pc, #508]	; (8002a1c <main+0xcb4>)
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800282a:	e007      	b.n	800283c <main+0xad4>
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 800282c:	497b      	ldr	r1, [pc, #492]	; (8002a1c <main+0xcb4>)
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800283a:	bf00      	nop
  				}
  			}

  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 800283c:	f002 fa72 	bl	8004d24 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <main+0xcc0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <main+0xcc4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d34e      	bcc.n	80028ee <main+0xb86>
  				set_heater_duty(0);
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff f9fd 	bl	8001c50 <set_heater_duty>
  				HAL_Delay(5); // Wait to let the thermocouple voltage stabilize before taking measurement
 8002856:	2005      	movs	r0, #5
 8002858:	f002 fa70 	bl	8004d3c <HAL_Delay>
  				get_actual_temperature();
 800285c:	f7fe fc28 	bl	80010b0 <get_actual_temperature>

  				/* Compute PID and set duty cycle */
  				PID_Compute(&TPID);
 8002860:	4873      	ldr	r0, [pc, #460]	; (8002a30 <main+0xcc8>)
 8002862:	f000 fe6d 	bl	8003540 <PID_Compute>
  				duty_cycle = PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002866:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <main+0xccc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe6c 	bl	8000548 <__aeabi_f2d>
 8002870:	a35f      	add	r3, pc, #380	; (adr r3, 80029f0 <main+0xc88>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd febf 	bl	80005f8 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4614      	mov	r4, r2
 8002880:	461d      	mov	r5, r3
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <main+0xcb8>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe5e 	bl	8000548 <__aeabi_f2d>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd ffda 	bl	800084c <__aeabi_ddiv>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <main+0xcd0>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd fea7 	bl	80005f8 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4963      	ldr	r1, [pc, #396]	; (8002a3c <main+0xcd4>)
 80028b0:	e9c1 2300 	strd	r2, r3, [r1]
  				set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <main+0xcd4>)
 80028b6:	ed93 7b00 	vldr	d7, [r3]
 80028ba:	ed9f 2b4f 	vldr	d2, [pc, #316]	; 80029f8 <main+0xc90>
 80028be:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002a00 <main+0xc98>
 80028c2:	eeb0 0a47 	vmov.f32	s0, s14
 80028c6:	eef0 0a67 	vmov.f32	s1, s15
 80028ca:	f7fe fb3f 	bl	8000f4c <clamp>
 80028ce:	ec53 2b10 	vmov	r2, r3, d0
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f7fe f967 	bl	8000ba8 <__aeabi_d2uiz>
 80028da:	4603      	mov	r3, r0
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f9b6 	bl	8001c50 <set_heater_duty>

  				previous_PID_update = HAL_GetTick();
 80028e4:	f002 fa1e 	bl	8004d24 <HAL_GetTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a4f      	ldr	r2, [pc, #316]	; (8002a28 <main+0xcc0>)
 80028ec:	6013      	str	r3, [r2, #0]
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 80028ee:	f002 fa19 	bl	8004d24 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <main+0xcd8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <main+0xcdc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d362      	bcc.n	80029c8 <main+0xc60>
  				memset(&buffer, '\0', sizeof(buffer));
 8002902:	2228      	movs	r2, #40	; 0x28
 8002904:	2100      	movs	r1, #0
 8002906:	4850      	ldr	r0, [pc, #320]	; (8002a48 <main+0xce0>)
 8002908:	f011 fca1 	bl	801424e <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800290c:	4b44      	ldr	r3, [pc, #272]	; (8002a20 <main+0xcb8>)
 800290e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <main+0xcb8>)
 8002914:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <main+0xcd0>)
 800291a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <main+0xce4>)
 8002924:	f7fd ff92 	bl	800084c <__aeabi_ddiv>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.actual_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002930:	483f      	ldr	r0, [pc, #252]	; (8002a30 <main+0xcc8>)
 8002932:	f001 f93f 	bl	8003bb4 <PID_GetPpart>
 8002936:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <main+0xce4>)
 8002940:	f7fd ff84 	bl	800084c <__aeabi_ddiv>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 800294c:	4838      	ldr	r0, [pc, #224]	; (8002a30 <main+0xcc8>)
 800294e:	f001 f943 	bl	8003bd8 <PID_GetIpart>
 8002952:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <main+0xce4>)
 800295c:	f7fd ff76 	bl	800084c <__aeabi_ddiv>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002968:	4831      	ldr	r0, [pc, #196]	; (8002a30 <main+0xcc8>)
 800296a:	f001 f947 	bl	8003bfc <PID_GetDpart>
 800296e:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <main+0xce4>)
 8002978:	f7fd ff68 	bl	800084c <__aeabi_ddiv>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4690      	mov	r8, r2
 8002982:	4699      	mov	r9, r3
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <main+0xcb8>)
 8002986:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <main+0xcb8>)
 800298c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002990:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002994:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002998:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800299c:	ed8d 8b06 	vstr	d8, [sp, #24]
 80029a0:	ed8d ab04 	vstr	d10, [sp, #16]
 80029a4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80029a8:	e9cd 4500 	strd	r4, r5, [sp]
 80029ac:	4652      	mov	r2, sl
 80029ae:	465b      	mov	r3, fp
 80029b0:	4927      	ldr	r1, [pc, #156]	; (8002a50 <main+0xce8>)
 80029b2:	4825      	ldr	r0, [pc, #148]	; (8002a48 <main+0xce0>)
 80029b4:	f011 fbe6 	bl	8014184 <siprintf>
  						sensor_values.in_stand, sensor_values.enc_button_status);
  				debugPrint(buffer);
 80029b8:	4823      	ldr	r0, [pc, #140]	; (8002a48 <main+0xce0>)
 80029ba:	f7fe fc85 	bl	80012c8 <debugPrint>
  				previous_millis_debug = HAL_GetTick();
 80029be:	f002 f9b1 	bl	8004d24 <HAL_GetTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <main+0xcd8>)
 80029c6:	6013      	str	r3, [r2, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
  				}
  			}

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 80029c8:	f002 f9ac 	bl	8004d24 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <main+0xcec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	1ad2      	subs	r2, r2, r3
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <main+0xcf0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f4ff aedd 	bcc.w	8002798 <main+0xa30>
  				update_display();
 80029de:	f7fe fc7f 	bl	80012e0 <update_display>
  				previous_millis_display = HAL_GetTick();
 80029e2:	f002 f99f 	bl	8004d24 <HAL_GetTick>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <main+0xcec>)
 80029ea:	6013      	str	r3, [r2, #0]
  			check_emergency_shutdown();
 80029ec:	e6d4      	b.n	8002798 <main+0xa30>
 80029ee:	bf00      	nop
 80029f0:	eb851eb8 	.word	0xeb851eb8
 80029f4:	3fbeb851 	.word	0x3fbeb851
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40790000 	.word	0x40790000
	...
 8002a08:	080177c0 	.word	0x080177c0
 8002a0c:	080176c4 	.word	0x080176c4
 8002a10:	20000540 	.word	0x20000540
 8002a14:	20000014 	.word	0x20000014
 8002a18:	20000018 	.word	0x20000018
 8002a1c:	20000638 	.word	0x20000638
 8002a20:	20000028 	.word	0x20000028
 8002a24:	20000600 	.word	0x20000600
 8002a28:	20000530 	.word	0x20000530
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	200019a8 	.word	0x200019a8
 8002a34:	20000588 	.word	0x20000588
 8002a38:	20000630 	.word	0x20000630
 8002a3c:	20000640 	.word	0x20000640
 8002a40:	2000052c 	.word	0x2000052c
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000560 	.word	0x20000560
 8002a4c:	40240000 	.word	0x40240000
 8002a50:	080176c8 	.word	0x080176c8
 8002a54:	20000528 	.word	0x20000528
 8002a58:	20000004 	.word	0x20000004

08002a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b09e      	sub	sp, #120	; 0x78
 8002a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a66:	2228      	movs	r2, #40	; 0x28
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f011 fbef 	bl	801424e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a80:	463b      	mov	r3, r7
 8002a82:	223c      	movs	r2, #60	; 0x3c
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f011 fbe1 	bl	801424e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8002a96:	2303      	movs	r3, #3
 8002a98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aaa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002aac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ab0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f006 fde4 	bl	8009684 <HAL_RCC_OscConfig>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002ac2:	f000 fc21 	bl	8003308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac6:	230f      	movs	r3, #15
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aca:	2302      	movs	r3, #2
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f007 fe0c 	bl	800a700 <HAL_RCC_ClockConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002aee:	f000 fc0b 	bl	8003308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <SystemClock_Config+0xcc>)
 8002af4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b0e:	463b      	mov	r3, r7
 8002b10:	4618      	mov	r0, r3
 8002b12:	f007 ffdd 	bl	800aad0 <HAL_RCCEx_PeriphCLKConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b1c:	f000 fbf4 	bl	8003308 <Error_Handler>
  }
}
 8002b20:	bf00      	nop
 8002b22:	3778      	adds	r7, #120	; 0x78
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	000211a0 	.word	0x000211a0

08002b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b98:	2204      	movs	r2, #4
 8002b9a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ba8:	4817      	ldr	r0, [pc, #92]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002baa:	f002 f913 	bl	8004dd4 <HAL_ADC_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002bb4:	f000 fba8 	bl	8003308 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4811      	ldr	r0, [pc, #68]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002bc4:	f003 fce2 	bl	800658c <HAL_ADCEx_MultiModeConfigChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002bce:	f000 fb9b 	bl	8003308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_ADC1_Init+0xdc>)
 8002bf0:	f003 f9e2 	bl	8005fb8 <HAL_ADC_ConfigChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002bfa:	f000 fb85 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20001628 	.word	0x20001628

08002c0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
 8002c2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c30:	4a2d      	ldr	r2, [pc, #180]	; (8002ce8 <MX_ADC3_Init+0xdc>)
 8002c32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c40:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c60:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c76:	2204      	movs	r2, #4
 8002c78:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002c86:	4817      	ldr	r0, [pc, #92]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002c88:	f002 f8a4 	bl	8004dd4 <HAL_ADC_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8002c92:	f000 fb39 	bl	8003308 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8002c9a:	f107 031c 	add.w	r3, r7, #28
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4810      	ldr	r0, [pc, #64]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002ca2:	f003 fc73 	bl	800658c <HAL_ADCEx_MultiModeConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8002cac:	f000 fb2c 	bl	8003308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_ADC3_Init+0xd8>)
 8002cce:	f003 f973 	bl	8005fb8 <HAL_ADC_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8002cd8:	f000 fb16 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002cdc:	bf00      	nop
 8002cde:	3728      	adds	r7, #40	; 0x28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20001678 	.word	0x20001678
 8002ce8:	50000400 	.word	0x50000400

08002cec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <MX_CRC_Init+0x40>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <MX_CRC_Init+0x3c>)
 8002d16:	f003 ff6d 	bl	8006bf4 <HAL_CRC_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002d20:	f000 faf2 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	2000170c 	.word	0x2000170c
 8002d2c:	40023000 	.word	0x40023000

08002d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <MX_I2C1_Init+0x78>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d6a:	480e      	ldr	r0, [pc, #56]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d6c:	f004 fe8a 	bl	8007a84 <HAL_I2C_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d76:	f000 fac7 	bl	8003308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4809      	ldr	r0, [pc, #36]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d7e:	f004 ff10 	bl	8007ba2 <HAL_I2CEx_ConfigAnalogFilter>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d88:	f000 fabe 	bl	8003308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <MX_I2C1_Init+0x74>)
 8002d90:	f004 ff52 	bl	8007c38 <HAL_I2CEx_ConfigDigitalFilter>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d9a:	f000 fab5 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20001730 	.word	0x20001730
 8002da8:	40005400 	.word	0x40005400
 8002dac:	2000090e 	.word	0x2000090e

08002db0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <MX_SPI1_Init+0x78>)
 8002db8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dc8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002de6:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002de8:	2208      	movs	r2, #8
 8002dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002e00:	2207      	movs	r2, #7
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <MX_SPI1_Init+0x74>)
 8002e12:	f008 f80d 	bl	800ae30 <HAL_SPI_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002e1c:	f000 fa74 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20001784 	.word	0x20001784
 8002e28:	40013000 	.word	0x40013000

08002e2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b09a      	sub	sp, #104	; 0x68
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	222c      	movs	r2, #44	; 0x2c
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f011 f9f1 	bl	801424e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e6e:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <MX_TIM1_Init+0x154>)
 8002e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e74:	f240 1267 	movw	r2, #359	; 0x167
 8002e78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002e80:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e82:	2264      	movs	r2, #100	; 0x64
 8002e84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e98:	4838      	ldr	r0, [pc, #224]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002e9a:	f008 fcdd 	bl	800b858 <HAL_TIM_Base_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ea4:	f000 fa30 	bl	8003308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4831      	ldr	r0, [pc, #196]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002eb6:	f009 faeb 	bl	800c490 <HAL_TIM_ConfigClockSource>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002ec0:	f000 fa22 	bl	8003308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ec4:	482d      	ldr	r0, [pc, #180]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002ec6:	f008 fdb8 	bl	800ba3a <HAL_TIM_PWM_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002ed0:	f000 fa1a 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4825      	ldr	r0, [pc, #148]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002ee8:	f00a f88a 	bl	800d000 <HAL_TIMEx_MasterConfigSynchronization>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002ef2:	f000 fa09 	bl	8003308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef6:	2360      	movs	r3, #96	; 0x60
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002efe:	2300      	movs	r3, #0
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f02:	2300      	movs	r3, #0
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4818      	ldr	r0, [pc, #96]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002f1c:	f009 f9a4 	bl	800c268 <HAL_TIM_PWM_ConfigChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002f26:	f000 f9ef 	bl	8003308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4807      	ldr	r0, [pc, #28]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002f60:	f00a f8ce 	bl	800d100 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002f6a:	f000 f9cd 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f6e:	4803      	ldr	r0, [pc, #12]	; (8002f7c <MX_TIM1_Init+0x150>)
 8002f70:	f001 f8c6 	bl	8004100 <HAL_TIM_MspPostInit>

}
 8002f74:	bf00      	nop
 8002f76:	3768      	adds	r7, #104	; 0x68
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000182c 	.word	0x2000182c
 8002f80:	40012c00 	.word	0x40012c00

08002f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f011 f95b 	bl	801424e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002fda:	230a      	movs	r3, #10
 8002fdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002fea:	230a      	movs	r3, #10
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <MX_TIM2_Init+0xa4>)
 8002ff6:	f008 fec3 	bl	800bd80 <HAL_TIM_Encoder_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003000:	f000 f982 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	; (8003028 <MX_TIM2_Init+0xa4>)
 8003012:	f009 fff5 	bl	800d000 <HAL_TIMEx_MasterConfigSynchronization>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800301c:	f000 f974 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3730      	adds	r7, #48	; 0x30
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20001878 	.word	0x20001878

0800302c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800303e:	463b      	mov	r3, r7
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
 800304c:	615a      	str	r2, [r3, #20]
 800304e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <MX_TIM4_Init+0xac>)
 8003052:	4a22      	ldr	r2, [pc, #136]	; (80030dc <MX_TIM4_Init+0xb0>)
 8003054:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <MX_TIM4_Init+0xac>)
 8003058:	2208      	movs	r2, #8
 800305a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305c:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <MX_TIM4_Init+0xac>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <MX_TIM4_Init+0xac>)
 8003064:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003068:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <MX_TIM4_Init+0xac>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <MX_TIM4_Init+0xac>)
 8003072:	2200      	movs	r2, #0
 8003074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003076:	4818      	ldr	r0, [pc, #96]	; (80030d8 <MX_TIM4_Init+0xac>)
 8003078:	f008 fcdf 	bl	800ba3a <HAL_TIM_PWM_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003082:	f000 f941 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	4619      	mov	r1, r3
 8003094:	4810      	ldr	r0, [pc, #64]	; (80030d8 <MX_TIM4_Init+0xac>)
 8003096:	f009 ffb3 	bl	800d000 <HAL_TIMEx_MasterConfigSynchronization>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80030a0:	f000 f932 	bl	8003308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a4:	2360      	movs	r3, #96	; 0x60
 80030a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b4:	463b      	mov	r3, r7
 80030b6:	2204      	movs	r2, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4807      	ldr	r0, [pc, #28]	; (80030d8 <MX_TIM4_Init+0xac>)
 80030bc:	f009 f8d4 	bl	800c268 <HAL_TIM_PWM_ConfigChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80030c6:	f000 f91f 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <MX_TIM4_Init+0xac>)
 80030cc:	f001 f818 	bl	8004100 <HAL_TIM_MspPostInit>

}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	; 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200018c4 	.word	0x200018c4
 80030dc:	40000800 	.word	0x40000800

080030e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <MX_TIM6_Init+0x64>)
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <MX_TIM6_Init+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <MX_TIM6_Init+0x64>)
 80030f8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80030fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <MX_TIM6_Init+0x64>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <MX_TIM6_Init+0x64>)
 8003106:	2204      	movs	r2, #4
 8003108:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <MX_TIM6_Init+0x64>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003110:	480c      	ldr	r0, [pc, #48]	; (8003144 <MX_TIM6_Init+0x64>)
 8003112:	f008 fba1 	bl	800b858 <HAL_TIM_Base_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800311c:	f000 f8f4 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4805      	ldr	r0, [pc, #20]	; (8003144 <MX_TIM6_Init+0x64>)
 800312e:	f009 ff67 	bl	800d000 <HAL_TIMEx_MasterConfigSynchronization>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003138:	f000 f8e6 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20001910 	.word	0x20001910
 8003148:	40001000 	.word	0x40001000

0800314c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_TIM16_Init+0x44>)
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <MX_TIM16_Init+0x48>)
 8003154:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <MX_TIM16_Init+0x44>)
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <MX_TIM16_Init+0x44>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <MX_TIM16_Init+0x44>)
 8003164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003168:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <MX_TIM16_Init+0x44>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <MX_TIM16_Init+0x44>)
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <MX_TIM16_Init+0x44>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <MX_TIM16_Init+0x44>)
 800317e:	f008 fb6b 	bl	800b858 <HAL_TIM_Base_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003188:	f000 f8be 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	2000195c 	.word	0x2000195c
 8003194:	40014400 	.word	0x40014400

08003198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <MX_DMA_Init+0x60>)
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <MX_DMA_Init+0x60>)
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6153      	str	r3, [r2, #20]
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <MX_DMA_Init+0x60>)
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <MX_DMA_Init+0x60>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <MX_DMA_Init+0x60>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6153      	str	r3, [r2, #20]
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <MX_DMA_Init+0x60>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	200d      	movs	r0, #13
 80031d4:	f003 fcd7 	bl	8006b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80031d8:	200d      	movs	r0, #13
 80031da:	f003 fcf0 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	203c      	movs	r0, #60	; 0x3c
 80031e4:	f003 fccf 	bl	8006b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80031e8:	203c      	movs	r0, #60	; 0x3c
 80031ea:	f003 fce8 	bl	8006bbe <HAL_NVIC_EnableIRQ>

}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <MX_GPIO_Init+0x104>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <MX_GPIO_Init+0x104>)
 8003218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800321c:	6153      	str	r3, [r2, #20]
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <MX_GPIO_Init+0x104>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800322a:	4b35      	ldr	r3, [pc, #212]	; (8003300 <MX_GPIO_Init+0x104>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4a34      	ldr	r2, [pc, #208]	; (8003300 <MX_GPIO_Init+0x104>)
 8003230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003234:	6153      	str	r3, [r2, #20]
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <MX_GPIO_Init+0x104>)
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <MX_GPIO_Init+0x104>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <MX_GPIO_Init+0x104>)
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	6153      	str	r3, [r2, #20]
 800324e:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <MX_GPIO_Init+0x104>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <MX_GPIO_Init+0x104>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4a28      	ldr	r2, [pc, #160]	; (8003300 <MX_GPIO_Init+0x104>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6153      	str	r3, [r2, #20]
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <MX_GPIO_Init+0x104>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_1_Pin|SPI1_DC_Pin|SPI1_RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003272:	2200      	movs	r2, #0
 8003274:	2159      	movs	r1, #89	; 0x59
 8003276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327a:	f004 fbeb 	bl	8007a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800327e:	2200      	movs	r2, #0
 8003280:	2101      	movs	r1, #1
 8003282:	4820      	ldr	r0, [pc, #128]	; (8003304 <MX_GPIO_Init+0x108>)
 8003284:	f004 fbe6 	bl	8007a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_1_Pin SPI1_DC_Pin SPI1_RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin|SPI1_DC_Pin|SPI1_RST_Pin|SPI1_CS_Pin;
 8003288:	2359      	movs	r3, #89	; 0x59
 800328a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328c:	2301      	movs	r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4619      	mov	r1, r3
 800329e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a2:	f004 fa45 	bl	8007730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80032a6:	2301      	movs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	4811      	ldr	r0, [pc, #68]	; (8003304 <MX_GPIO_Init+0x108>)
 80032be:	f004 fa37 	bl	8007730 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBIT_0_Pin VBIT_1_Pin VBIT_2_Pin VBIT_3_Pin
                           STAND_INP_Pin HANDLE_INP_2_Pin HANDLE_INP_1_Pin SW_1_Pin
                           SW_2_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = VBIT_0_Pin|VBIT_1_Pin|VBIT_2_Pin|VBIT_3_Pin
 80032c2:	f64d 4376 	movw	r3, #56438	; 0xdc76
 80032c6:	617b      	str	r3, [r7, #20]
                          |STAND_INP_Pin|HANDLE_INP_2_Pin|HANDLE_INP_1_Pin|SW_1_Pin
                          |SW_2_Pin|SW_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4619      	mov	r1, r3
 80032d6:	480b      	ldr	r0, [pc, #44]	; (8003304 <MX_GPIO_Init+0x108>)
 80032d8:	f004 fa2a 	bl	8007730 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_2_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin;
 80032dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_2_GPIO_Port, &GPIO_InitStruct);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f4:	f004 fa1c 	bl	8007730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	48000400 	.word	0x48000400

08003308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003310:	e7fe      	b.n	8003310 <Error_Handler+0x8>

08003312 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e008      	b.n	800334c <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3301      	adds	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	d4e9      	bmi.n	800333a <Moving_Average_Init+0x28>
	}
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	441a      	add	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800339a:	6839      	ldr	r1, [r7, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	1ad2      	subs	r2, r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	d507      	bpl.n	80033f0 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 80033ee:	e003      	b.n	80033f8 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003410:	ee16 0a90 	vmov	r0, s13
 8003414:	f7fd f898 	bl	8000548 <__aeabi_f2d>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003420:	eeb0 0a47 	vmov.f32	s0, s14
 8003424:	eef0 0a67 	vmov.f32	s1, s15
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800345e:	f7fd fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003474:	e011      	b.n	800349a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003482:	f7fd fb2b 	bl	8000adc <__aeabi_dcmplt>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d100      	bne.n	800348e <PID_Init+0x60>
}
 800348c:	e005      	b.n	800349a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	0000      	movs	r0, r0
 80034a4:	0000      	movs	r0, r0
	...

080034a8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24
 80034b0:	6239      	str	r1, [r7, #32]
 80034b2:	61fa      	str	r2, [r7, #28]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	ed87 0b04 	vstr	d0, [r7, #16]
 80034ba:	ed87 1b02 	vstr	d1, [r7, #8]
 80034be:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	2200      	movs	r2, #0
 80034d8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80034da:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003530 <PID+0x88>
 80034de:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003538 <PID+0x90>
 80034e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034e4:	f000 f991 	bl	800380a <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2264      	movs	r2, #100	; 0x64
 80034ec:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80034ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034f2:	4619      	mov	r1, r3
 80034f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f6:	f000 fad9 	bl	8003aac <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80034fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80034fe:	4619      	mov	r1, r3
 8003500:	ed97 2b00 	vldr	d2, [r7]
 8003504:	ed97 1b02 	vldr	d1, [r7, #8]
 8003508:	ed97 0b04 	vldr	d0, [r7, #16]
 800350c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800350e:	f000 fa25 	bl	800395c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003512:	f001 fc07 	bl	8004d24 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	1ad2      	subs	r2, r2, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	605a      	str	r2, [r3, #4]

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	f3af 8000 	nop.w
 8003530:	00000000 	.word	0x00000000
 8003534:	406fe000 	.word	0x406fe000
	...

08003540 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b08c      	sub	sp, #48	; 0x30
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	785b      	ldrb	r3, [r3, #1]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <PID_Compute+0x16>
	{
		return _FALSE;
 8003552:	2300      	movs	r3, #0
 8003554:	e136      	b.n	80037c4 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003556:	f001 fbe5 	bl	8004d24 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	6a3a      	ldr	r2, [r7, #32]
 800356c:	429a      	cmp	r2, r3
 800356e:	d204      	bcs.n	800357a <PID_Compute+0x3a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8124 	beq.w	80037c2 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800358e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003592:	f7fc fe79 	bl	8000288 <__aeabi_dsub>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80035a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035a8:	f7fc fe6e 	bl	8000288 <__aeabi_dsub>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80035c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035c4:	f7fd f818 	bl	80005f8 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4650      	mov	r0, sl
 80035ce:	4659      	mov	r1, fp
 80035d0:	f7fc fe5c 	bl	800028c <__adddf3>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80035ea:	f7fd fa95 	bl	8000b18 <__aeabi_dcmpgt>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003600:	e010      	b.n	8003624 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800360e:	f7fd fa65 	bl	8000adc <__aeabi_dcmplt>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d114      	bne.n	8003662 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003648:	f7fc ffd6 	bl	80005f8 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4650      	mov	r0, sl
 8003652:	4659      	mov	r1, fp
 8003654:	f7fc fe18 	bl	8000288 <__aeabi_dsub>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800366e:	f7fd fa53 	bl	8000b18 <__aeabi_dcmpgt>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003684:	e010      	b.n	80036a8 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003692:	f7fd fa23 	bl	8000adc <__aeabi_dcmplt>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80036ae:	4690      	mov	r8, r2
 80036b0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80036b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fc ff9c 	bl	80005f8 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80036d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036dc:	f7fc ff8c 	bl	80005f8 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80036ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036f2:	f7fc ff81 	bl	80005f8 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003700:	e005      	b.n	800370e <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800371a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800371e:	f7fc ff6b 	bl	80005f8 <__aeabi_dmul>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4640      	mov	r0, r8
 8003728:	4649      	mov	r1, r9
 800372a:	f7fc fdad 	bl	8000288 <__aeabi_dsub>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003736:	f7fc fda9 	bl	800028c <__adddf3>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003748:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800374c:	f7fd f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800375c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003760:	e00e      	b.n	8003780 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003768:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800376c:	f7fd f9b6 	bl	8000adc <__aeabi_dcmplt>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800377c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003786:	4614      	mov	r4, r2
 8003788:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800378c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003790:	4620      	mov	r0, r4
 8003792:	4629      	mov	r1, r5
 8003794:	f7fc ff30 	bl	80005f8 <__aeabi_dmul>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80037a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037aa:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 80037c2:	2300      	movs	r3, #0
	}

}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3730      	adds	r7, #48	; 0x30
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037ce <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <PID_SetMode+0x2e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fe19 	bl	800342e <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	705a      	strb	r2, [r3, #1]

}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	6178      	str	r0, [r7, #20]
 8003812:	ed87 0b02 	vstr	d0, [r7, #8]
 8003816:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800381a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800381e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003822:	f7fd f96f 	bl	8000b04 <__aeabi_dcmpge>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d158      	bne.n	80038de <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003832:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800383c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	785b      	ldrb	r3, [r3, #1]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d04b      	beq.n	80038e0 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003856:	f7fd f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800386a:	e9c1 2300 	strd	r2, r3, [r1]
 800386e:	e012      	b.n	8003896 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800387e:	f7fd f92d 	bl	8000adc <__aeabi_dcmplt>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003892:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80038a2:	f7fd f939 	bl	8000b18 <__aeabi_dcmpgt>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80038b8:	e012      	b.n	80038e0 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80038c6:	f7fd f909 	bl	8000adc <__aeabi_dcmplt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80038d6:	6979      	ldr	r1, [r7, #20]
 80038d8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80038dc:	e000      	b.n	80038e0 <PID_SetOutputLimits+0xd6>
		return;
 80038de:	bf00      	nop
		}
		else { }

	}

}
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6178      	str	r0, [r7, #20]
 80038ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80038f2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80038f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038fe:	f7fd f901 	bl	8000b04 <__aeabi_dcmpge>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003918:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800391c:	e000      	b.n	8003920 <PID_SetILimits+0x3a>
		return;
 800391e:	bf00      	nop
}
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
 800392c:	61f8      	str	r0, [r7, #28]
 800392e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003932:	ed87 1b02 	vstr	d1, [r7, #8]
 8003936:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	4619      	mov	r1, r3
 8003940:	ed97 2b00 	vldr	d2, [r7]
 8003944:	ed97 1b02 	vldr	d1, [r7, #8]
 8003948:	ed97 0b04 	vldr	d0, [r7, #16]
 800394c:	69f8      	ldr	r0, [r7, #28]
 800394e:	f000 f805 	bl	800395c <PID_SetTunings2>
}
 8003952:	bf00      	nop
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	61f8      	str	r0, [r7, #28]
 8003964:	ed87 0b04 	vstr	d0, [r7, #16]
 8003968:	ed87 1b02 	vstr	d1, [r7, #8]
 800396c:	ed87 2b00 	vstr	d2, [r7]
 8003970:	460b      	mov	r3, r1
 8003972:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003980:	f7fd f8ac 	bl	8000adc <__aeabi_dcmplt>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 8089 	bne.w	8003a9e <PID_SetTunings2+0x142>
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003998:	f7fd f8a0 	bl	8000adc <__aeabi_dcmplt>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d17d      	bne.n	8003a9e <PID_SetTunings2+0x142>
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039ae:	f7fd f895 	bl	8000adc <__aeabi_dcmplt>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d172      	bne.n	8003a9e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	7efa      	ldrb	r2, [r7, #27]
 80039bc:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80039be:	7efb      	ldrb	r3, [r7, #27]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80039d0:	69f9      	ldr	r1, [r7, #28]
 80039d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80039da:	69f9      	ldr	r1, [r7, #28]
 80039dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80039e4:	69f9      	ldr	r1, [r7, #28]
 80039e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ea:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fd86 	bl	8000504 <__aeabi_ui2d>
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <PID_SetTunings2+0x14c>)
 80039fe:	f7fc ff25 	bl	800084c <__aeabi_ddiv>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8003a0a:	69f9      	ldr	r1, [r7, #28]
 8003a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a10:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003a14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a1c:	f7fc fdec 	bl	80005f8 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a32:	f7fc ff0b 	bl	800084c <__aeabi_ddiv>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	78db      	ldrb	r3, [r3, #3]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d12b      	bne.n	8003aa0 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	f7fc fc17 	bl	8000288 <__aeabi_dsub>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	69f9      	ldr	r1, [r7, #28]
 8003a60:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	f7fc fc09 	bl	8000288 <__aeabi_dsub>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	69f9      	ldr	r1, [r7, #28]
 8003a7c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	f7fc fbfb 	bl	8000288 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	69f9      	ldr	r1, [r7, #28]
 8003a98:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003a9c:	e000      	b.n	8003aa0 <PID_SetTunings2+0x144>
		return;
 8003a9e:	bf00      	nop

	}

}
 8003aa0:	3728      	adds	r7, #40	; 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	408f4000 	.word	0x408f4000

08003aac <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02e      	beq.n	8003b1e <PID_SetControllerDirection+0x72>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	78db      	ldrb	r3, [r3, #3]
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d029      	beq.n	8003b1e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	f7fc fbd6 	bl	8000288 <__aeabi_dsub>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	f7fc fbc8 	bl	8000288 <__aeabi_dsub>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003b08:	f04f 0000 	mov.w	r0, #0
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	f7fc fbba 	bl	8000288 <__aeabi_dsub>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	70da      	strb	r2, [r3, #3]

}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	dd01      	ble.n	8003b42 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	dd2e      	ble.n	8003bac <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003b4e:	68b8      	ldr	r0, [r7, #8]
 8003b50:	f7fc fce8 	bl	8000524 <__aeabi_i2d>
 8003b54:	4604      	mov	r4, r0
 8003b56:	460d      	mov	r5, r1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fcd1 	bl	8000504 <__aeabi_ui2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc fe6f 	bl	800084c <__aeabi_ddiv>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003b7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b80:	f7fc fd3a 	bl	80005f8 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003b94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b98:	f7fc fe58 	bl	800084c <__aeabi_ddiv>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]

	}

}
 8003bac:	bf00      	nop
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bdb0      	pop	{r4, r5, r7, pc}

08003bb4 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003bc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8003bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8003bca:	eef0 0a67 	vmov.f32	s1, s15
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003be6:	ec43 2b17 	vmov	d7, r2, r3
}
 8003bea:	eeb0 0a47 	vmov.f32	s0, s14
 8003bee:	eef0 0a67 	vmov.f32	s1, s15
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003c0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003c12:	eef0 0a67 	vmov.f32	s1, s15
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_MspInit+0x44>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <HAL_MspInit+0x44>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6193      	str	r3, [r2, #24]
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_MspInit+0x44>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_MspInit+0x44>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <HAL_MspInit+0x44>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	61d3      	str	r3, [r2, #28]
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_MspInit+0x44>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c88:	d12d      	bne.n	8003ce6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003c8a:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6153      	str	r3, [r2, #20]
 8003c96:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca2:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cac:	6153      	str	r3, [r2, #20]
 8003cae:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|TC_Pin;
 8003cba:	2306      	movs	r3, #6
 8003cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd0:	f003 fd2e 	bl	8007730 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2012      	movs	r0, #18
 8003cda:	f002 ff54 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003cde:	2012      	movs	r0, #18
 8003ce0:	f002 ff6d 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003ce4:	e051      	b.n	8003d8a <HAL_ADC_MspInit+0x122>
  else if(hadc->Instance==ADC3)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <HAL_ADC_MspInit+0x130>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d14c      	bne.n	8003d8a <HAL_ADC_MspInit+0x122>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cfa:	6153      	str	r3, [r2, #20]
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d08:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d12:	6153      	str	r3, [r2, #20]
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_ADC_MspInit+0x12c>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_INP_Pin;
 8003d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d26:	2303      	movs	r3, #3
 8003d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(V_INP_GPIO_Port, &GPIO_InitStruct);
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	4619      	mov	r1, r3
 8003d34:	4819      	ldr	r0, [pc, #100]	; (8003d9c <HAL_ADC_MspInit+0x134>)
 8003d36:	f003 fcfb 	bl	8007730 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_ADC_MspInit+0x13c>)
 8003d3e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d58:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d60:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d64:	2220      	movs	r2, #32
 8003d66:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003d6e:	480c      	ldr	r0, [pc, #48]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d70:	f003 f946 	bl	8007000 <HAL_DMA_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_ADC_MspInit+0x116>
      Error_Handler();
 8003d7a:	f7ff fac5 	bl	8003308 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <HAL_ADC_MspInit+0x138>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003d8a:	bf00      	nop
 8003d8c:	3730      	adds	r7, #48	; 0x30
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	50000400 	.word	0x50000400
 8003d9c:	48000400 	.word	0x48000400
 8003da0:	200016c8 	.word	0x200016c8
 8003da4:	40020458 	.word	0x40020458

08003da8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_CRC_MspInit+0x38>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10b      	bne.n	8003dd2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_CRC_MspInit+0x3c>)
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_CRC_MspInit+0x3c>)
 8003dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc4:	6153      	str	r3, [r2, #20]
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_CRC_MspInit+0x3c>)
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40023000 	.word	0x40023000
 8003de4:	40021000 	.word	0x40021000

08003de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_I2C_MspInit+0x7c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d128      	bne.n	8003e5c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_I2C_MspInit+0x80>)
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_I2C_MspInit+0x80>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e14:	6153      	str	r3, [r2, #20]
 8003e16:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_I2C_MspInit+0x80>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e28:	2312      	movs	r3, #18
 8003e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e30:	2303      	movs	r3, #3
 8003e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e34:	2304      	movs	r3, #4
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	480b      	ldr	r0, [pc, #44]	; (8003e6c <HAL_I2C_MspInit+0x84>)
 8003e40:	f003 fc76 	bl	8007730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_I2C_MspInit+0x80>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <HAL_I2C_MspInit+0x80>)
 8003e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e4e:	61d3      	str	r3, [r2, #28]
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_I2C_MspInit+0x80>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e5c:	bf00      	nop
 8003e5e:	3728      	adds	r7, #40	; 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40005400 	.word	0x40005400
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	48000400 	.word	0x48000400

08003e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <HAL_SPI_MspInit+0xc8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d14e      	bne.n	8003f30 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_SPI_MspInit+0xcc>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <HAL_SPI_MspInit+0xcc>)
 8003e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e9c:	6193      	str	r3, [r2, #24]
 8003e9e:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_SPI_MspInit+0xcc>)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_SPI_MspInit+0xcc>)
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_SPI_MspInit+0xcc>)
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	6153      	str	r3, [r2, #20]
 8003eb6:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <HAL_SPI_MspInit+0xcc>)
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003ec2:	23a0      	movs	r3, #160	; 0xa0
 8003ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	4619      	mov	r1, r3
 8003edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee0:	f003 fc26 	bl	8007730 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003ee4:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <HAL_SPI_MspInit+0xd4>)
 8003ee8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003eec:	2210      	movs	r2, #16
 8003eee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003f14:	480a      	ldr	r0, [pc, #40]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003f16:	f003 f873 	bl	8007000 <HAL_DMA_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8003f20:	f7ff f9f2 	bl	8003308 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
 8003f2a:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <HAL_SPI_MspInit+0xd0>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f30:	bf00      	nop
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40013000 	.word	0x40013000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	200017e8 	.word	0x200017e8
 8003f44:	40020030 	.word	0x40020030

08003f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10c      	bne.n	8003f74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f64:	6193      	str	r3, [r2, #24]
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003f72:	e02a      	b.n	8003fca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <HAL_TIM_Base_MspInit+0x94>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d114      	bne.n	8003fa8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003f84:	f043 0310 	orr.w	r3, r3, #16
 8003f88:	61d3      	str	r3, [r2, #28]
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2036      	movs	r0, #54	; 0x36
 8003f9c:	f002 fdf3 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fa0:	2036      	movs	r0, #54	; 0x36
 8003fa2:	f002 fe0c 	bl	8006bbe <HAL_NVIC_EnableIRQ>
}
 8003fa6:	e010      	b.n	8003fca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <HAL_TIM_Base_MspInit+0x98>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10b      	bne.n	8003fca <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	6193      	str	r3, [r2, #24]
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_TIM_Base_MspInit+0x90>)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40001000 	.word	0x40001000
 8003fe0:	40014400 	.word	0x40014400

08003fe4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d14d      	bne.n	80040a2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004006:	4b29      	ldr	r3, [pc, #164]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a28      	ldr	r2, [pc, #160]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004028:	6153      	str	r3, [r2, #20]
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 800403c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004040:	6153      	str	r3, [r2, #20]
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin;
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004060:	2301      	movs	r3, #1
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4619      	mov	r1, r3
 800406a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800406e:	f003 fb5f 	bl	8007730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_A_Pin;
 8004072:	2308      	movs	r3, #8
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004082:	2301      	movs	r3, #1
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	4808      	ldr	r0, [pc, #32]	; (80040b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800408e:	f003 fb4f 	bl	8007730 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	201c      	movs	r0, #28
 8004098:	f002 fd75 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800409c:	201c      	movs	r0, #28
 800409e:	f002 fd8e 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040a2:	bf00      	nop
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	48000400 	.word	0x48000400

080040b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <HAL_TIM_PWM_MspInit+0x44>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d113      	bne.n	80040ee <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_TIM_PWM_MspInit+0x48>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <HAL_TIM_PWM_MspInit+0x48>)
 80040cc:	f043 0304 	orr.w	r3, r3, #4
 80040d0:	61d3      	str	r3, [r2, #28]
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_TIM_PWM_MspInit+0x48>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80040de:	2200      	movs	r2, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	201e      	movs	r0, #30
 80040e4:	f002 fd4f 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80040e8:	201e      	movs	r0, #30
 80040ea:	f002 fd68 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40021000 	.word	0x40021000

08004100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <HAL_TIM_MspPostInit+0xa8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d11d      	bne.n	800415e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_TIM_MspPostInit+0xac>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4a21      	ldr	r2, [pc, #132]	; (80041ac <HAL_TIM_MspPostInit+0xac>)
 8004128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800412c:	6153      	str	r3, [r2, #20]
 800412e:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <HAL_TIM_MspPostInit+0xac>)
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800413a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800413e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800414c:	2304      	movs	r3, #4
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	4619      	mov	r1, r3
 8004156:	4816      	ldr	r0, [pc, #88]	; (80041b0 <HAL_TIM_MspPostInit+0xb0>)
 8004158:	f003 faea 	bl	8007730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800415c:	e020      	b.n	80041a0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <HAL_TIM_MspPostInit+0xb4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d11b      	bne.n	80041a0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <HAL_TIM_MspPostInit+0xac>)
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_TIM_MspPostInit+0xac>)
 800416e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004172:	6153      	str	r3, [r2, #20]
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_TIM_MspPostInit+0xac>)
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418c:	2300      	movs	r3, #0
 800418e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004190:	2302      	movs	r3, #2
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	4807      	ldr	r0, [pc, #28]	; (80041b8 <HAL_TIM_MspPostInit+0xb8>)
 800419c:	f003 fac8 	bl	8007730 <HAL_GPIO_Init>
}
 80041a0:	bf00      	nop
 80041a2:	3728      	adds	r7, #40	; 0x28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	48000800 	.word	0x48000800
 80041b4:	40000800 	.word	0x40000800
 80041b8:	48000400 	.word	0x48000400

080041bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041c0:	e7fe      	b.n	80041c0 <NMI_Handler+0x4>

080041c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <HardFault_Handler+0x4>

080041c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <MemManage_Handler+0x4>

080041ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <BusFault_Handler+0x4>

080041d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <UsageFault_Handler+0x4>

080041da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004208:	f000 fd78 	bl	8004cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <DMA1_Channel3_IRQHandler+0x10>)
 8004216:	f002 ff99 	bl	800714c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200017e8 	.word	0x200017e8

08004224 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <ADC1_2_IRQHandler+0x10>)
 800422a:	f001 fa0f 	bl	800564c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20001628 	.word	0x20001628

08004238 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800423e:	f003 fe3f 	bl	8007ec0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200027c4 	.word	0x200027c4

0800424c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004250:	4802      	ldr	r0, [pc, #8]	; (800425c <TIM2_IRQHandler+0x10>)
 8004252:	f007 fee9 	bl	800c028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20001878 	.word	0x20001878

08004260 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <TIM4_IRQHandler+0x10>)
 8004266:	f007 fedf 	bl	800c028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200018c4 	.word	0x200018c4

08004274 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <TIM6_DAC_IRQHandler+0x10>)
 800427a:	f007 fed5 	bl	800c028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20001910 	.word	0x20001910

08004288 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <DMA2_Channel5_IRQHandler+0x10>)
 800428e:	f002 ff5d 	bl	800714c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200016c8 	.word	0x200016c8

0800429c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return 1;
 80042a0:	2301      	movs	r3, #1
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_kill>:

int _kill(int pid, int sig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042b6:	f010 f829 	bl	801430c <__errno>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2216      	movs	r2, #22
 80042be:	601a      	str	r2, [r3, #0]
  return -1;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_exit>:

void _exit (int status)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ffe7 	bl	80042ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80042de:	e7fe      	b.n	80042de <_exit+0x12>

080042e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e00a      	b.n	8004308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042f2:	f3af 8000 	nop.w
 80042f6:	4601      	mov	r1, r0
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	60ba      	str	r2, [r7, #8]
 80042fe:	b2ca      	uxtb	r2, r1
 8004300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	dbf0      	blt.n	80042f2 <_read+0x12>
  }

  return len;
 8004310:	687b      	ldr	r3, [r7, #4]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e009      	b.n	8004340 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	60ba      	str	r2, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3301      	adds	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	dbf1      	blt.n	800432c <_write+0x12>
  }
  return len;
 8004348:	687b      	ldr	r3, [r7, #4]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <_close>:

int _close(int file)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800437a:	605a      	str	r2, [r3, #4]
  return 0;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_isatty>:

int _isatty(int file)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004392:	2301      	movs	r3, #1
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <_sbrk+0x5c>)
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <_sbrk+0x60>)
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <_sbrk+0x64>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <_sbrk+0x64>)
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <_sbrk+0x68>)
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <_sbrk+0x64>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d207      	bcs.n	80043fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043ec:	f00f ff8e 	bl	801430c <__errno>
 80043f0:	4603      	mov	r3, r0
 80043f2:	220c      	movs	r2, #12
 80043f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e009      	b.n	8004410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <_sbrk+0x64>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <_sbrk+0x64>)
 800440c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	2000a000 	.word	0x2000a000
 800441c:	00000400 	.word	0x00000400
 8004420:	20001a40 	.word	0x20001a40
 8004424:	20002e20 	.word	0x20002e20

08004428 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <SystemInit+0x20>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <SystemInit+0x20>)
 8004434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800444c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004484 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004450:	f7ff ffea 	bl	8004428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <LoopForever+0x6>)
  ldr r1, =_edata
 8004456:	490d      	ldr	r1, [pc, #52]	; (800448c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004458:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <LoopForever+0xe>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800445c:	e002      	b.n	8004464 <LoopCopyDataInit>

0800445e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004462:	3304      	adds	r3, #4

08004464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004468:	d3f9      	bcc.n	800445e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800446c:	4c0a      	ldr	r4, [pc, #40]	; (8004498 <LoopForever+0x16>)
  movs r3, #0
 800446e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004470:	e001      	b.n	8004476 <LoopFillZerobss>

08004472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004474:	3204      	adds	r2, #4

08004476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004478:	d3fb      	bcc.n	8004472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800447a:	f00f ff4d 	bl	8014318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800447e:	f7fd fc73 	bl	8001d68 <main>

08004482 <LoopForever>:

LoopForever:
    b LoopForever
 8004482:	e7fe      	b.n	8004482 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004484:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800448c:	200004c8 	.word	0x200004c8
  ldr r2, =_sidata
 8004490:	0803b0c0 	.word	0x0803b0c0
  ldr r2, =_sbss
 8004494:	200004c8 	.word	0x200004c8
  ldr r4, =_ebss
 8004498:	20002e1c 	.word	0x20002e1c

0800449c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800449c:	e7fe      	b.n	800449c <ADC3_IRQHandler>
	...

080044a0 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <setSPI_Size+0x54>)
 80044ac:	f993 3000 	ldrsb.w	r3, [r3]
 80044b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d017      	beq.n	80044e8 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <setSPI_Size+0x58>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <setSPI_Size+0x58>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c6:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <setSPI_Size+0x54>)
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d104      	bne.n	80044e0 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <setSPI_Size+0x58>)
 80044d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80044dc:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80044de:	e003      	b.n	80044e8 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <setSPI_Size+0x58>)
 80044e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044e6:	60da      	str	r2, [r3, #12]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000164 	.word	0x20000164
 80044f8:	20001784 	.word	0x20001784

080044fc <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	460a      	mov	r2, r1
 8004506:	71fb      	strb	r3, [r7, #7]
 8004508:	4613      	mov	r3, r2
 800450a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800450c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ffc5 	bl	80044a0 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8004516:	4b3c      	ldr	r3, [pc, #240]	; (8004608 <setDMAMemMode+0x10c>)
 8004518:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800451c:	461a      	mov	r2, r3
 800451e:	79bb      	ldrb	r3, [r7, #6]
 8004520:	429a      	cmp	r2, r3
 8004522:	d106      	bne.n	8004532 <setDMAMemMode+0x36>
 8004524:	4b38      	ldr	r3, [pc, #224]	; (8004608 <setDMAMemMode+0x10c>)
 8004526:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800452a:	461a      	mov	r2, r3
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	429a      	cmp	r2, r3
 8004530:	d066      	beq.n	8004600 <setDMAMemMode+0x104>
    config.dma_sz =size;
 8004532:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004536:	4b34      	ldr	r3, [pc, #208]	; (8004608 <setDMAMemMode+0x10c>)
 8004538:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800453a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800453e:	4b32      	ldr	r3, [pc, #200]	; (8004608 <setDMAMemMode+0x10c>)
 8004540:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8004542:	4b32      	ldr	r3, [pc, #200]	; (800460c <setDMAMemMode+0x110>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b30      	ldr	r3, [pc, #192]	; (800460c <setDMAMemMode+0x110>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8004556:	bf00      	nop
 8004558:	4b2c      	ldr	r3, [pc, #176]	; (800460c <setDMAMemMode+0x110>)
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f7      	bne.n	8004558 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10e      	bne.n	800458c <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800456e:	4b27      	ldr	r3, [pc, #156]	; (800460c <setDMAMemMode+0x110>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	60da      	str	r2, [r3, #12]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8004576:	4b25      	ldr	r3, [pc, #148]	; (800460c <setDMAMemMode+0x110>)
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <setDMAMemMode+0x110>)
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e00d      	b.n	80045a8 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <setDMAMemMode+0x110>)
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	2200      	movs	r2, #0
 8004592:	60da      	str	r2, [r3, #12]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8004594:	4b1d      	ldr	r3, [pc, #116]	; (800460c <setDMAMemMode+0x110>)
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <setDMAMemMode+0x110>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a6:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80045a8:	79bb      	ldrb	r3, [r7, #6]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d116      	bne.n	80045dc <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045ae:	4b17      	ldr	r3, [pc, #92]	; (800460c <setDMAMemMode+0x110>)
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b6:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <setDMAMemMode+0x110>)
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c0:	615a      	str	r2, [r3, #20]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <setDMAMemMode+0x110>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <setDMAMemMode+0x110>)
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80045d8:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 80045da:	e011      	b.n	8004600 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <setDMAMemMode+0x110>)
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	2200      	movs	r2, #0
 80045e2:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <setDMAMemMode+0x110>)
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <setDMAMemMode+0x110>)
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <setDMAMemMode+0x110>)
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000164 	.word	0x20000164
 800460c:	20001784 	.word	0x20001784

08004610 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 800461c:	2000      	movs	r0, #0
 800461e:	f7ff ff3f 	bl	80044a0 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_RESET);
 8004622:	2200      	movs	r2, #0
 8004624:	2108      	movs	r1, #8
 8004626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800462a:	f003 fa13 	bl	8007a54 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 800462e:	2200      	movs	r2, #0
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004636:	f003 fa0d 	bl	8007a54 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	2201      	movs	r2, #1
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	480f      	ldr	r0, [pc, #60]	; (8004680 <LCD_WriteCommand+0x70>)
 8004644:	f006 fc9f 	bl	800af86 <HAL_SPI_Transmit>
  if(argc){
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 800464e:	2201      	movs	r2, #1
 8004650:	2108      	movs	r1, #8
 8004652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004656:	f003 f9fd 	bl	8007a54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	1c59      	adds	r1, r3, #1
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	b29a      	uxth	r2, r3
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	4806      	ldr	r0, [pc, #24]	; (8004680 <LCD_WriteCommand+0x70>)
 8004668:	f006 fc8d 	bl	800af86 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 800466c:	2201      	movs	r2, #1
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004674:	f003 f9ee 	bl	8007a54 <HAL_GPIO_WritePin>
#endif
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20001784 	.word	0x20001784

08004684 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 800468e:	2201      	movs	r2, #1
 8004690:	2108      	movs	r1, #8
 8004692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004696:	f003 f9dd 	bl	8007a54 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 800469a:	2200      	movs	r2, #0
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046a2:	f003 f9d7 	bl	8007a54 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80046a6:	e049      	b.n	800473c <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ae:	4293      	cmp	r3, r2
 80046b0:	bf28      	it	cs
 80046b2:	4613      	movcs	r3, r2
 80046b4:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d924      	bls.n	8004706 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	461a      	mov	r2, r3
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4825      	ldr	r0, [pc, #148]	; (8004758 <LCD_WriteData+0xd4>)
 80046c4:	f006 fdd4 	bl	800b270 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 80046c8:	bf00      	nop
 80046ca:	4b23      	ldr	r3, [pc, #140]	; (8004758 <LCD_WriteData+0xd4>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	4618      	mov	r0, r3
 80046d0:	f002 fddf 	bl	8007292 <HAL_DMA_GetState>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d1f7      	bne.n	80046ca <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <LCD_WriteData+0xd8>)
 80046dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d127      	bne.n	8004734 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <LCD_WriteData+0xd8>)
 80046e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d104      	bne.n	80046f8 <LCD_WriteData+0x74>
          buff += chunk_size;
 80046ee:	89fb      	ldrh	r3, [r7, #14]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	e01d      	b.n	8004734 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	e016      	b.n	8004734 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8004706:	89fa      	ldrh	r2, [r7, #14]
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4812      	ldr	r0, [pc, #72]	; (8004758 <LCD_WriteData+0xd4>)
 8004710:	f006 fc39 	bl	800af86 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <LCD_WriteData+0xd8>)
 8004716:	f993 3000 	ldrsb.w	r3, [r3]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d104      	bne.n	8004728 <LCD_WriteData+0xa4>
        buff += chunk_size;
 800471e:	89fb      	ldrh	r3, [r7, #14]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4413      	add	r3, r2
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e005      	b.n	8004734 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	461a      	mov	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8004734:	89fb      	ldrh	r3, [r7, #14]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1b2      	bne.n	80046a8 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 8004742:	2201      	movs	r2, #1
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800474a:	f003 f983 	bl	8007a54 <HAL_GPIO_WritePin>
#endif
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20001784 	.word	0x20001784
 800475c:	20000164 	.word	0x20000164

08004760 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b08b      	sub	sp, #44	; 0x2c
 8004764:	af00      	add	r7, sp, #0
 8004766:	4604      	mov	r4, r0
 8004768:	4608      	mov	r0, r1
 800476a:	4611      	mov	r1, r2
 800476c:	461a      	mov	r2, r3
 800476e:	4623      	mov	r3, r4
 8004770:	80fb      	strh	r3, [r7, #6]
 8004772:	4603      	mov	r3, r0
 8004774:	80bb      	strh	r3, [r7, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	807b      	strh	r3, [r7, #2]
 800477a:	4613      	mov	r3, r2
 800477c:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8004786:	88bb      	ldrh	r3, [r7, #4]
 8004788:	847b      	strh	r3, [r7, #34]	; 0x22
 800478a:	883b      	ldrh	r3, [r7, #0]
 800478c:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800478e:	232a      	movs	r3, #42	; 0x2a
 8004790:	763b      	strb	r3, [r7, #24]
 8004792:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004796:	121b      	asrs	r3, r3, #8
 8004798:	b21b      	sxth	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	767b      	strb	r3, [r7, #25]
 800479e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	76bb      	strb	r3, [r7, #26]
 80047a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80047a8:	121b      	asrs	r3, r3, #8
 80047aa:	b21b      	sxth	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	76fb      	strb	r3, [r7, #27]
 80047b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80047b6:	f107 0318 	add.w	r3, r7, #24
 80047ba:	2104      	movs	r1, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff27 	bl	8004610 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80047c2:	232b      	movs	r3, #43	; 0x2b
 80047c4:	743b      	strb	r3, [r7, #16]
 80047c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80047ca:	121b      	asrs	r3, r3, #8
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	747b      	strb	r3, [r7, #17]
 80047d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	74bb      	strb	r3, [r7, #18]
 80047d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80047dc:	121b      	asrs	r3, r3, #8
 80047de:	b21b      	sxth	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	74fb      	strb	r3, [r7, #19]
 80047e4:	8c3b      	ldrh	r3, [r7, #32]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80047ea:	f107 0310 	add.w	r3, r7, #16
 80047ee:	2104      	movs	r1, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff0d 	bl	8004610 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80047f6:	232c      	movs	r3, #44	; 0x2c
 80047f8:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80047fa:	f107 030c 	add.w	r3, r7, #12
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff05 	bl	8004610 <LCD_WriteCommand>
  }
}
 8004806:	bf00      	nop
 8004808:	372c      	adds	r7, #44	; 0x2c
 800480a:	46bd      	mov	sp, r7
 800480c:	bd90      	pop	{r4, r7, pc}
	...

08004810 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	80fb      	strh	r3, [r7, #6]
 800481a:	460b      	mov	r3, r1
 800481c:	80bb      	strh	r3, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8004822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db39      	blt.n	800489e <LCD_DrawPixel+0x8e>
 800482a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800482e:	2bef      	cmp	r3, #239	; 0xef
 8004830:	dc35      	bgt.n	800489e <LCD_DrawPixel+0x8e>
 8004832:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db31      	blt.n	800489e <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800483a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800483e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004842:	da2c      	bge.n	800489e <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8004844:	887b      	ldrh	r3, [r7, #2]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	b2db      	uxtb	r3, r3
 800484c:	733b      	strb	r3, [r7, #12]
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8004854:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004858:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800485c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004860:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004864:	f7ff ff7c 	bl	8004760 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 8004868:	2201      	movs	r2, #1
 800486a:	2108      	movs	r1, #8
 800486c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004870:	f003 f8f0 	bl	8007a54 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800487c:	f003 f8ea 	bl	8007a54 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8004880:	f107 010c 	add.w	r1, r7, #12
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	2202      	movs	r2, #2
 800488a:	4807      	ldr	r0, [pc, #28]	; (80048a8 <LCD_DrawPixel+0x98>)
 800488c:	f006 fb7b 	bl	800af86 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 8004890:	2201      	movs	r2, #1
 8004892:	2140      	movs	r1, #64	; 0x40
 8004894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004898:	f003 f8dc 	bl	8007a54 <HAL_GPIO_WritePin>
 800489c:	e000      	b.n	80048a0 <LCD_DrawPixel+0x90>
    return;
 800489e:	bf00      	nop
#endif
}
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20001784 	.word	0x20001784

080048ac <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b094      	sub	sp, #80	; 0x50
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d905      	bls.n	80048ca <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 80048be:	1cbb      	adds	r3, r7, #2
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fede 	bl	8004684 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80048c8:	e026      	b.n	8004918 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80048ca:	2300      	movs	r3, #0
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ce:	e009      	b.n	80048e4 <LCD_FillPixels+0x38>
      fill[t]=color;
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	3350      	adds	r3, #80	; 0x50
 80048d8:	443b      	add	r3, r7
 80048da:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	3301      	adds	r3, #1
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	bf28      	it	cs
 80048ea:	2320      	movcs	r3, #32
 80048ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3ee      	bcc.n	80048d0 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 80048f2:	e00e      	b.n	8004912 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	bf28      	it	cs
 80048fa:	2320      	movcs	r3, #32
 80048fc:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff febd 	bl	8004684 <LCD_WriteData>
      pixels-=sz;
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ed      	bne.n	80048f4 <LCD_FillPixels+0x48>
}
 8004918:	bf00      	nop
 800491a:	3750      	adds	r7, #80	; 0x50
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4604      	mov	r4, r0
 8004928:	4608      	mov	r0, r1
 800492a:	4611      	mov	r1, r2
 800492c:	461a      	mov	r2, r3
 800492e:	4623      	mov	r3, r4
 8004930:	80fb      	strh	r3, [r7, #6]
 8004932:	4603      	mov	r3, r0
 8004934:	80bb      	strh	r3, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	807b      	strh	r3, [r7, #2]
 800493a:	4613      	mov	r3, r2
 800493c:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800493e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d105      	bne.n	8004954 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8004948:	2100      	movs	r1, #0
 800494a:	2001      	movs	r0, #1
 800494c:	f7ff fdd6 	bl	80044fc <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	e014      	b.n	800497e <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8004954:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004958:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800495c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004960:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004964:	f7ff fefc 	bl	8004760 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8004968:	2101      	movs	r1, #1
 800496a:	2000      	movs	r0, #0
 800496c:	f7ff fdc6 	bl	80044fc <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 8004970:	2201      	movs	r2, #1
 8004972:	2108      	movs	r1, #8
 8004974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004978:	f003 f86c 	bl	8007a54 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 800497c:	4b02      	ldr	r3, [pc, #8]	; (8004988 <LCD_FillArea+0x68>)
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
 8004986:	bf00      	nop
 8004988:	080048ad 	.word	0x080048ad

0800498c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	4604      	mov	r4, r0
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4623      	mov	r3, r4
 800499c:	80fb      	strh	r3, [r7, #6]
 800499e:	4603      	mov	r3, r0
 80049a0:	80bb      	strh	r3, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	807b      	strh	r3, [r7, #2]
 80049a6:	4613      	mov	r3, r2
 80049a8:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80049aa:	887a      	ldrh	r2, [r7, #2]
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	4619      	mov	r1, r3
 80049b4:	883a      	ldrh	r2, [r7, #0]
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80049c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80049c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80049ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80049d2:	f7ff fec5 	bl	8004760 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80049d6:	2101      	movs	r1, #1
 80049d8:	2000      	movs	r0, #0
 80049da:	f7ff fd8f 	bl	80044fc <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80049de:	8c3b      	ldrh	r3, [r7, #32]
 80049e0:	4619      	mov	r1, r3
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff62 	bl	80048ac <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 80049e8:	2100      	movs	r1, #0
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7ff fd86 	bl	80044fc <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}

080049fa <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80049fa:	b590      	push	{r4, r7, lr}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	603a      	str	r2, [r7, #0]
 8004a04:	80fb      	strh	r3, [r7, #6]
 8004a06:	460b      	mov	r3, r1
 8004a08:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	889b      	ldrh	r3, [r3, #4]
 8004a0e:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	88db      	ldrh	r3, [r3, #6]
 8004a14:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2bef      	cmp	r3, #239	; 0xef
 8004a1a:	d839      	bhi.n	8004a90 <LCD_DrawImage+0x96>
 8004a1c:	88bb      	ldrh	r3, [r7, #4]
 8004a1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a22:	d235      	bcs.n	8004a90 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	4413      	add	r3, r2
 8004a2a:	2bf0      	cmp	r3, #240	; 0xf0
 8004a2c:	dc32      	bgt.n	8004a94 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8004a2e:	88ba      	ldrh	r2, [r7, #4]
 8004a30:	89bb      	ldrh	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a38:	dc2e      	bgt.n	8004a98 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	7a1b      	ldrb	r3, [r3, #8]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d12c      	bne.n	8004a9c <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8004a42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004a46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	89fb      	ldrh	r3, [r7, #14]
 8004a4e:	4413      	add	r3, r2
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b21c      	sxth	r4, r3
 8004a58:	88ba      	ldrh	r2, [r7, #4]
 8004a5a:	89bb      	ldrh	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	b21b      	sxth	r3, r3
 8004a66:	4622      	mov	r2, r4
 8004a68:	f7ff fe7a 	bl	8004760 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f7ff fd44 	bl	80044fc <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	89fb      	ldrh	r3, [r7, #14]
 8004a7a:	89ba      	ldrh	r2, [r7, #12]
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7ff fdff 	bl	8004684 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004a86:	2100      	movs	r1, #0
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f7ff fd37 	bl	80044fc <setDMAMemMode>
 8004a8e:	e006      	b.n	8004a9e <LCD_DrawImage+0xa4>
    return;
 8004a90:	bf00      	nop
 8004a92:	e004      	b.n	8004a9e <LCD_DrawImage+0xa4>
    return;
 8004a94:	bf00      	nop
 8004a96:	e002      	b.n	8004a9e <LCD_DrawImage+0xa4>
    return;
 8004a98:	bf00      	nop
 8004a9a:	e000      	b.n	8004a9e <LCD_DrawImage+0xa4>
    return;
 8004a9c:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd90      	pop	{r4, r7, pc}

08004aa4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	80fb      	strh	r3, [r7, #6]
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80bb      	strh	r3, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	807b      	strh	r3, [r7, #2]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d10a      	bne.n	8004ae0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8004aca:	88ba      	ldrh	r2, [r7, #4]
 8004acc:	883b      	ldrh	r3, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d918      	bls.n	8004b04 <LCD_DrawLine+0x60>
 8004ad2:	88bb      	ldrh	r3, [r7, #4]
 8004ad4:	81bb      	strh	r3, [r7, #12]
 8004ad6:	883b      	ldrh	r3, [r7, #0]
 8004ad8:	80bb      	strh	r3, [r7, #4]
 8004ada:	89bb      	ldrh	r3, [r7, #12]
 8004adc:	803b      	strh	r3, [r7, #0]
 8004ade:	e011      	b.n	8004b04 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8004ae0:	88ba      	ldrh	r2, [r7, #4]
 8004ae2:	883b      	ldrh	r3, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d10a      	bne.n	8004afe <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d909      	bls.n	8004b04 <LCD_DrawLine+0x60>
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	81fb      	strh	r3, [r7, #14]
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	80fb      	strh	r3, [r7, #6]
 8004af8:	89fb      	ldrh	r3, [r7, #14]
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	e002      	b.n	8004b04 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295
 8004b02:	e009      	b.n	8004b18 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8004b04:	883c      	ldrh	r4, [r7, #0]
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	88b9      	ldrh	r1, [r7, #4]
 8004b0a:	88f8      	ldrh	r0, [r7, #6]
 8004b0c:	8c3b      	ldrh	r3, [r7, #32]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4623      	mov	r3, r4
 8004b12:	f7ff ff3b 	bl	800498c <LCD_Fill>
  return UG_RESULT_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd90      	pop	{r4, r7, pc}

08004b20 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60ba      	str	r2, [r7, #8]
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	81fb      	strh	r3, [r7, #14]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f00a ffd0 	bl	800fad8 <UG_FontSelect>
  UG_SetForecolor(color);
 8004b38:	8b3b      	ldrh	r3, [r7, #24]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f00b fb18 	bl	8010170 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8004b40:	8bbb      	ldrh	r3, [r7, #28]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f00b fb26 	bl	8010194 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8004b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b4c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00b fa74 	bl	8010040 <UG_PutString>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <LCD_setPower+0x14>
 8004b70:	2329      	movs	r3, #41	; 0x29
 8004b72:	e000      	b.n	8004b76 <LCD_setPower+0x16>
 8004b74:	2328      	movs	r3, #40	; 0x28
 8004b76:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fd46 	bl	8004610 <LCD_WriteCommand>
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <LCD_Update>:

static void LCD_Update(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004b90:	2100      	movs	r1, #0
 8004b92:	2001      	movs	r0, #1
 8004b94:	f7ff fcb2 	bl	80044fc <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8004b98:	bf00      	nop
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2140      	movs	r1, #64	; 0x40
 8004ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004baa:	f002 ff53 	bl	8007a54 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin, GPIO_PIN_RESET);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2110      	movs	r1, #16
 8004bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bb6:	f002 ff4d 	bl	8007a54 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004bba:	2001      	movs	r0, #1
 8004bbc:	f000 f8be 	bl	8004d3c <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin, GPIO_PIN_SET);
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2110      	movs	r1, #16
 8004bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bc8:	f002 ff44 	bl	8007a54 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8004bcc:	20c8      	movs	r0, #200	; 0xc8
 8004bce:	f000 f8b5 	bl	8004d3c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8004bd2:	4920      	ldr	r1, [pc, #128]	; (8004c54 <LCD_init+0xb8>)
 8004bd4:	4820      	ldr	r0, [pc, #128]	; (8004c58 <LCD_init+0xbc>)
 8004bd6:	f00a fee5 	bl	800f9a4 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8004bda:	4920      	ldr	r1, [pc, #128]	; (8004c5c <LCD_init+0xc0>)
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f00c fb6f 	bl	80112c0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8004be2:	491f      	ldr	r1, [pc, #124]	; (8004c60 <LCD_init+0xc4>)
 8004be4:	2001      	movs	r0, #1
 8004be6:	f00c fb6b 	bl	80112c0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8004bea:	491e      	ldr	r1, [pc, #120]	; (8004c64 <LCD_init+0xc8>)
 8004bec:	2002      	movs	r0, #2
 8004bee:	f00c fb67 	bl	80112c0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8004bf2:	491d      	ldr	r1, [pc, #116]	; (8004c68 <LCD_init+0xcc>)
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	f00c fb63 	bl	80112c0 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f00b fadc 	bl	80101b8 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8004c00:	2000      	movs	r0, #0
 8004c02:	f00b faed 	bl	80101e0 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8004c06:	2300      	movs	r3, #0
 8004c08:	80fb      	strh	r3, [r7, #6]
 8004c0a:	e013      	b.n	8004c34 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <LCD_init+0xd0>)
 8004c12:	441a      	add	r2, r3
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	4915      	ldr	r1, [pc, #84]	; (8004c6c <LCD_init+0xd0>)
 8004c18:	5ccb      	ldrb	r3, [r1, r3]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7ff fcf7 	bl	8004610 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <LCD_init+0xd0>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3302      	adds	r3, #2
 8004c32:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	2b4b      	cmp	r3, #75	; 0x4b
 8004c38:	d9e8      	bls.n	8004c0c <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f00a ff5c 	bl	800faf8 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8004c40:	2001      	movs	r0, #1
 8004c42:	f7ff ff8d 	bl	8004b60 <LCD_setPower>
  UG_Update();
 8004c46:	f00c fb5d 	bl	8011304 <UG_Update>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000168 	.word	0x20000168
 8004c58:	20001a44 	.word	0x20001a44
 8004c5c:	08004aa5 	.word	0x08004aa5
 8004c60:	0800498d 	.word	0x0800498d
 8004c64:	08004921 	.word	0x08004921
 8004c68:	080049fb 	.word	0x080049fb
 8004c6c:	08017754 	.word	0x08017754

08004c70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_Init+0x28>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <HAL_Init+0x28>)
 8004c7a:	f043 0310 	orr.w	r3, r3, #16
 8004c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c80:	2003      	movs	r0, #3
 8004c82:	f001 ff75 	bl	8006b70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c86:	200f      	movs	r0, #15
 8004c88:	f000 f808 	bl	8004c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c8c:	f7fe ffc8 	bl	8003c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40022000 	.word	0x40022000

08004c9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_InitTick+0x54>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <HAL_InitTick+0x58>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 ff8d 	bl	8006bda <HAL_SYSTICK_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00e      	b.n	8004ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b0f      	cmp	r3, #15
 8004cce:	d80a      	bhi.n	8004ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f001 ff55 	bl	8006b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cdc:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <HAL_InitTick+0x5c>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e000      	b.n	8004ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000160 	.word	0x20000160
 8004cf4:	20000178 	.word	0x20000178
 8004cf8:	20000174 	.word	0x20000174

08004cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_IncTick+0x20>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_IncTick+0x24>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <HAL_IncTick+0x24>)
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000178 	.word	0x20000178
 8004d20:	20001ab8 	.word	0x20001ab8

08004d24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return uwTick;  
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <HAL_GetTick+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20001ab8 	.word	0x20001ab8

08004d3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d44:	f7ff ffee 	bl	8004d24 <HAL_GetTick>
 8004d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d005      	beq.n	8004d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <HAL_Delay+0x44>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004d62:	bf00      	nop
 8004d64:	f7ff ffde 	bl	8004d24 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d8f7      	bhi.n	8004d64 <HAL_Delay+0x28>
  {
  }
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000178 	.word	0x20000178

08004d84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b09a      	sub	sp, #104	; 0x68
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e1c9      	b.n	8005188 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d176      	bne.n	8004ef4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d152      	bne.n	8004eb4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fe ff1d 	bl	8003c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d13b      	bne.n	8004eb4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 fd61 	bl	8006904 <ADC_Disable>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d12f      	bne.n	8004eb4 <HAL_ADC_Init+0xe0>
 8004e54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d12b      	bne.n	8004eb4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e64:	f023 0302 	bic.w	r3, r3, #2
 8004e68:	f043 0202 	orr.w	r2, r3, #2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e7e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e8e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e90:	4b86      	ldr	r3, [pc, #536]	; (80050ac <HAL_ADC_Init+0x2d8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a86      	ldr	r2, [pc, #536]	; (80050b0 <HAL_ADC_Init+0x2dc>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0c9a      	lsrs	r2, r3, #18
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ea6:	e002      	b.n	8004eae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f9      	bne.n	8004ea8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed0:	d110      	bne.n	8004ef4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f023 0312 	bic.w	r3, r3, #18
 8004eda:	f043 0210 	orr.w	r2, r3, #16
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 8136 	bne.w	800516e <HAL_ADC_Init+0x39a>
 8004f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 8131 	bne.w	800516e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8129 	bne.w	800516e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f24:	f043 0202 	orr.w	r2, r3, #2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f34:	d004      	beq.n	8004f40 <HAL_ADC_Init+0x16c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5e      	ldr	r2, [pc, #376]	; (80050b4 <HAL_ADC_Init+0x2e0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_Init+0x170>
 8004f40:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_ADC_Init+0x2e4>)
 8004f42:	e000      	b.n	8004f46 <HAL_ADC_Init+0x172>
 8004f44:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <HAL_ADC_Init+0x2e8>)
 8004f46:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f50:	d102      	bne.n	8004f58 <HAL_ADC_Init+0x184>
 8004f52:	4b58      	ldr	r3, [pc, #352]	; (80050b4 <HAL_ADC_Init+0x2e0>)
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e01a      	b.n	8004f8e <HAL_ADC_Init+0x1ba>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a55      	ldr	r2, [pc, #340]	; (80050b4 <HAL_ADC_Init+0x2e0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d103      	bne.n	8004f6a <HAL_ADC_Init+0x196>
 8004f62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e011      	b.n	8004f8e <HAL_ADC_Init+0x1ba>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_ADC_Init+0x2ec>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d102      	bne.n	8004f7a <HAL_ADC_Init+0x1a6>
 8004f74:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_ADC_Init+0x2f0>)
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e009      	b.n	8004f8e <HAL_ADC_Init+0x1ba>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a51      	ldr	r2, [pc, #324]	; (80050c4 <HAL_ADC_Init+0x2f0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d102      	bne.n	8004f8a <HAL_ADC_Init+0x1b6>
 8004f84:	4b4e      	ldr	r3, [pc, #312]	; (80050c0 <HAL_ADC_Init+0x2ec>)
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e001      	b.n	8004f8e <HAL_ADC_Init+0x1ba>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d108      	bne.n	8004fae <HAL_ADC_Init+0x1da>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_ADC_Init+0x1da>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <HAL_ADC_Init+0x1dc>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11c      	bne.n	8004fee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_ADC_Init+0x202>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_ADC_Init+0x202>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_Init+0x204>
 8004fd6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	7e5b      	ldrb	r3, [r3, #25]
 8004ff2:	035b      	lsls	r3, r3, #13
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ff8:	2a01      	cmp	r2, #1
 8004ffa:	d002      	beq.n	8005002 <HAL_ADC_Init+0x22e>
 8004ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005000:	e000      	b.n	8005004 <HAL_ADC_Init+0x230>
 8005002:	2200      	movs	r2, #0
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005014:	4313      	orrs	r3, r2
 8005016:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11b      	bne.n	800505a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	7e5b      	ldrb	r3, [r3, #25]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	3b01      	subs	r3, #1
 8005030:	045a      	lsls	r2, r3, #17
 8005032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005034:	4313      	orrs	r3, r2
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	663b      	str	r3, [r7, #96]	; 0x60
 800503c:	e00d      	b.n	800505a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	2b01      	cmp	r3, #1
 8005060:	d03a      	beq.n	80050d8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <HAL_ADC_Init+0x2ec>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_ADC_Init+0x2a2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a14      	ldr	r2, [pc, #80]	; (80050c4 <HAL_ADC_Init+0x2f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d128      	bne.n	80050c8 <HAL_ADC_Init+0x2f4>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800507e:	d012      	beq.n	80050a6 <HAL_ADC_Init+0x2d2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005088:	d00a      	beq.n	80050a0 <HAL_ADC_Init+0x2cc>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005092:	d002      	beq.n	800509a <HAL_ADC_Init+0x2c6>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	e018      	b.n	80050cc <HAL_ADC_Init+0x2f8>
 800509a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800509e:	e015      	b.n	80050cc <HAL_ADC_Init+0x2f8>
 80050a0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80050a4:	e012      	b.n	80050cc <HAL_ADC_Init+0x2f8>
 80050a6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80050aa:	e00f      	b.n	80050cc <HAL_ADC_Init+0x2f8>
 80050ac:	20000160 	.word	0x20000160
 80050b0:	431bde83 	.word	0x431bde83
 80050b4:	50000100 	.word	0x50000100
 80050b8:	50000300 	.word	0x50000300
 80050bc:	50000700 	.word	0x50000700
 80050c0:	50000400 	.word	0x50000400
 80050c4:	50000500 	.word	0x50000500
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050d0:	4313      	orrs	r3, r2
 80050d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050d4:	4313      	orrs	r3, r2
 80050d6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d114      	bne.n	8005110 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7e1b      	ldrb	r3, [r3, #24]
 80050fe:	039a      	lsls	r2, r3, #14
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4313      	orrs	r3, r2
 800510a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800510c:	4313      	orrs	r3, r2
 800510e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_ADC_Init+0x3bc>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005120:	430b      	orrs	r3, r1
 8005122:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10c      	bne.n	8005146 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f023 010f 	bic.w	r1, r3, #15
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
 8005144:	e007      	b.n	8005156 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 020f 	bic.w	r2, r2, #15
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f023 0303 	bic.w	r3, r3, #3
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
 800516c:	e00a      	b.n	8005184 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f023 0312 	bic.w	r3, r3, #18
 8005176:	f043 0210 	orr.w	r2, r3, #16
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800517e:	2301      	movs	r3, #1
 8005180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005188:	4618      	mov	r0, r3
 800518a:	3768      	adds	r7, #104	; 0x68
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	fff0c007 	.word	0xfff0c007

08005194 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f040 8123 	bne.w	80053f6 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_ADC_Start_IT+0x2a>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e11e      	b.n	80053fc <HAL_ADC_Start_IT+0x268>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 fb38 	bl	800683c <ADC_Enable>
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 810a 	bne.w	80053ec <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f4:	d004      	beq.n	8005200 <HAL_ADC_Start_IT+0x6c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a82      	ldr	r2, [pc, #520]	; (8005404 <HAL_ADC_Start_IT+0x270>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d106      	bne.n	800520e <HAL_ADC_Start_IT+0x7a>
 8005200:	4b81      	ldr	r3, [pc, #516]	; (8005408 <HAL_ADC_Start_IT+0x274>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <HAL_ADC_Start_IT+0x9a>
 800520c:	e005      	b.n	800521a <HAL_ADC_Start_IT+0x86>
 800520e:	4b7f      	ldr	r3, [pc, #508]	; (800540c <HAL_ADC_Start_IT+0x278>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_ADC_Start_IT+0x9a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005222:	d004      	beq.n	800522e <HAL_ADC_Start_IT+0x9a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a79      	ldr	r2, [pc, #484]	; (8005410 <HAL_ADC_Start_IT+0x27c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d115      	bne.n	800525a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d036      	beq.n	80052b6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005250:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005258:	e02d      	b.n	80052b6 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800526e:	d004      	beq.n	800527a <HAL_ADC_Start_IT+0xe6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a63      	ldr	r2, [pc, #396]	; (8005404 <HAL_ADC_Start_IT+0x270>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10a      	bne.n	8005290 <HAL_ADC_Start_IT+0xfc>
 800527a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e008      	b.n	80052a2 <HAL_ADC_Start_IT+0x10e>
 8005290:	4b5f      	ldr	r3, [pc, #380]	; (8005410 <HAL_ADC_Start_IT+0x27c>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c2:	d106      	bne.n	80052d2 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	f023 0206 	bic.w	r2, r3, #6
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44
 80052d0:	e002      	b.n	80052d8 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	221c      	movs	r2, #28
 80052e6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d110      	bne.n	8005312 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0204 	bic.w	r2, r2, #4
 80052fe:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	605a      	str	r2, [r3, #4]
          break;
 8005310:	e008      	b.n	8005324 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 020c 	orr.w	r2, r2, #12
 8005320:	605a      	str	r2, [r3, #4]
          break;
 8005322:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	2b01      	cmp	r3, #1
 800532a:	d107      	bne.n	800533c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0210 	bic.w	r2, r2, #16
 800533a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005344:	d004      	beq.n	8005350 <HAL_ADC_Start_IT+0x1bc>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2e      	ldr	r2, [pc, #184]	; (8005404 <HAL_ADC_Start_IT+0x270>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d106      	bne.n	800535e <HAL_ADC_Start_IT+0x1ca>
 8005350:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <HAL_ADC_Start_IT+0x274>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03e      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 800535c:	e005      	b.n	800536a <HAL_ADC_Start_IT+0x1d6>
 800535e:	4b2b      	ldr	r3, [pc, #172]	; (800540c <HAL_ADC_Start_IT+0x278>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2b00      	cmp	r3, #0
 8005368:	d037      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005372:	d004      	beq.n	800537e <HAL_ADC_Start_IT+0x1ea>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a22      	ldr	r2, [pc, #136]	; (8005404 <HAL_ADC_Start_IT+0x270>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d106      	bne.n	800538c <HAL_ADC_Start_IT+0x1f8>
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <HAL_ADC_Start_IT+0x274>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2b05      	cmp	r3, #5
 8005388:	d027      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 800538a:	e005      	b.n	8005398 <HAL_ADC_Start_IT+0x204>
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <HAL_ADC_Start_IT+0x278>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2b05      	cmp	r3, #5
 8005396:	d020      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a0:	d004      	beq.n	80053ac <HAL_ADC_Start_IT+0x218>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_ADC_Start_IT+0x270>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d106      	bne.n	80053ba <HAL_ADC_Start_IT+0x226>
 80053ac:	4b16      	ldr	r3, [pc, #88]	; (8005408 <HAL_ADC_Start_IT+0x274>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	d010      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 80053b8:	e005      	b.n	80053c6 <HAL_ADC_Start_IT+0x232>
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <HAL_ADC_Start_IT+0x278>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d009      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ce:	d004      	beq.n	80053da <HAL_ADC_Start_IT+0x246>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <HAL_ADC_Start_IT+0x27c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10f      	bne.n	80053fa <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0204 	orr.w	r2, r2, #4
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	e006      	b.n	80053fa <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053f4:	e001      	b.n	80053fa <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
 80053f8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	50000100 	.word	0x50000100
 8005408:	50000300 	.word	0x50000300
 800540c:	50000700 	.word	0x50000700
 8005410:	50000400 	.word	0x50000400

08005414 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 80f7 	bne.w	8005622 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_ADC_Start_DMA+0x2e>
 800543e:	2302      	movs	r3, #2
 8005440:	e0f2      	b.n	8005628 <HAL_ADC_Start_DMA+0x214>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005452:	d004      	beq.n	800545e <HAL_ADC_Start_DMA+0x4a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a75      	ldr	r2, [pc, #468]	; (8005630 <HAL_ADC_Start_DMA+0x21c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d109      	bne.n	8005472 <HAL_ADC_Start_DMA+0x5e>
 800545e:	4b75      	ldr	r3, [pc, #468]	; (8005634 <HAL_ADC_Start_DMA+0x220>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e008      	b.n	8005484 <HAL_ADC_Start_DMA+0x70>
 8005472:	4b71      	ldr	r3, [pc, #452]	; (8005638 <HAL_ADC_Start_DMA+0x224>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80c5 	beq.w	8005614 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 f9d6 	bl	800683c <ADC_Enable>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80b7 	bne.w	800560a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b8:	d004      	beq.n	80054c4 <HAL_ADC_Start_DMA+0xb0>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5c      	ldr	r2, [pc, #368]	; (8005630 <HAL_ADC_Start_DMA+0x21c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d106      	bne.n	80054d2 <HAL_ADC_Start_DMA+0xbe>
 80054c4:	4b5b      	ldr	r3, [pc, #364]	; (8005634 <HAL_ADC_Start_DMA+0x220>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <HAL_ADC_Start_DMA+0xde>
 80054d0:	e005      	b.n	80054de <HAL_ADC_Start_DMA+0xca>
 80054d2:	4b59      	ldr	r3, [pc, #356]	; (8005638 <HAL_ADC_Start_DMA+0x224>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_ADC_Start_DMA+0xde>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e6:	d004      	beq.n	80054f2 <HAL_ADC_Start_DMA+0xde>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a53      	ldr	r2, [pc, #332]	; (800563c <HAL_ADC_Start_DMA+0x228>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d115      	bne.n	800551e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d036      	beq.n	800557a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005514:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800551c:	e02d      	b.n	800557a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005532:	d004      	beq.n	800553e <HAL_ADC_Start_DMA+0x12a>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3d      	ldr	r2, [pc, #244]	; (8005630 <HAL_ADC_Start_DMA+0x21c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d10a      	bne.n	8005554 <HAL_ADC_Start_DMA+0x140>
 800553e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e008      	b.n	8005566 <HAL_ADC_Start_DMA+0x152>
 8005554:	4b39      	ldr	r3, [pc, #228]	; (800563c <HAL_ADC_Start_DMA+0x228>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d106      	bne.n	8005596 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	f023 0206 	bic.w	r2, r3, #6
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	645a      	str	r2, [r3, #68]	; 0x44
 8005594:	e002      	b.n	800559c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	4a25      	ldr	r2, [pc, #148]	; (8005640 <HAL_ADC_Start_DMA+0x22c>)
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	4a24      	ldr	r2, [pc, #144]	; (8005644 <HAL_ADC_Start_DMA+0x230>)
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	4a23      	ldr	r2, [pc, #140]	; (8005648 <HAL_ADC_Start_DMA+0x234>)
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	221c      	movs	r2, #28
 80055c2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0210 	orr.w	r2, r2, #16
 80055d2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	4619      	mov	r1, r3
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f001 fd4b 	bl	800708e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0204 	orr.w	r2, r2, #4
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	e00d      	b.n	8005626 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005612:	e008      	b.n	8005626 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005620:	e001      	b.n	8005626 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005622:	2302      	movs	r3, #2
 8005624:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	50000100 	.word	0x50000100
 8005634:	50000300 	.word	0x50000300
 8005638:	50000700 	.word	0x50000700
 800563c:	50000400 	.word	0x50000400
 8005640:	08006771 	.word	0x08006771
 8005644:	080067eb 	.word	0x080067eb
 8005648:	08006807 	.word	0x08006807

0800564c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <HAL_ADC_IRQHandler+0x38>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80bc 	beq.w	8005808 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80b6 	beq.w	8005808 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056bc:	d004      	beq.n	80056c8 <HAL_ADC_IRQHandler+0x7c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a90      	ldr	r2, [pc, #576]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d106      	bne.n	80056d6 <HAL_ADC_IRQHandler+0x8a>
 80056c8:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <HAL_ADC_IRQHandler+0x2bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d03e      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 80056d4:	e005      	b.n	80056e2 <HAL_ADC_IRQHandler+0x96>
 80056d6:	4b8d      	ldr	r3, [pc, #564]	; (800590c <HAL_ADC_IRQHandler+0x2c0>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d037      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ea:	d004      	beq.n	80056f6 <HAL_ADC_IRQHandler+0xaa>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a84      	ldr	r2, [pc, #528]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d106      	bne.n	8005704 <HAL_ADC_IRQHandler+0xb8>
 80056f6:	4b84      	ldr	r3, [pc, #528]	; (8005908 <HAL_ADC_IRQHandler+0x2bc>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d027      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 8005702:	e005      	b.n	8005710 <HAL_ADC_IRQHandler+0xc4>
 8005704:	4b81      	ldr	r3, [pc, #516]	; (800590c <HAL_ADC_IRQHandler+0x2c0>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2b05      	cmp	r3, #5
 800570e:	d020      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005718:	d004      	beq.n	8005724 <HAL_ADC_IRQHandler+0xd8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a79      	ldr	r2, [pc, #484]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d106      	bne.n	8005732 <HAL_ADC_IRQHandler+0xe6>
 8005724:	4b78      	ldr	r3, [pc, #480]	; (8005908 <HAL_ADC_IRQHandler+0x2bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2b09      	cmp	r3, #9
 800572e:	d010      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 8005730:	e005      	b.n	800573e <HAL_ADC_IRQHandler+0xf2>
 8005732:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_ADC_IRQHandler+0x2c0>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	2b09      	cmp	r3, #9
 800573c:	d009      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005746:	d004      	beq.n	8005752 <HAL_ADC_IRQHandler+0x106>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a70      	ldr	r2, [pc, #448]	; (8005910 <HAL_ADC_IRQHandler+0x2c4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d104      	bne.n	800575c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	e00f      	b.n	800577c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005764:	d004      	beq.n	8005770 <HAL_ADC_IRQHandler+0x124>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a66      	ldr	r2, [pc, #408]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d102      	bne.n	8005776 <HAL_ADC_IRQHandler+0x12a>
 8005770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005774:	e000      	b.n	8005778 <HAL_ADC_IRQHandler+0x12c>
 8005776:	4b66      	ldr	r3, [pc, #408]	; (8005910 <HAL_ADC_IRQHandler+0x2c4>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005786:	2b00      	cmp	r3, #0
 8005788:	d137      	bne.n	80057fa <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005790:	2b00      	cmp	r3, #0
 8005792:	d132      	bne.n	80057fa <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02d      	beq.n	80057fa <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d11a      	bne.n	80057e2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 020c 	bic.w	r2, r2, #12
 80057ba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d112      	bne.n	80057fa <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
 80057e0:	e00b      	b.n	80057fa <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fac2 	bl	8004d84 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	220c      	movs	r2, #12
 8005806:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <HAL_ADC_IRQHandler+0x1d0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8138 	beq.w	8005a98 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8132 	beq.w	8005a98 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005848:	d004      	beq.n	8005854 <HAL_ADC_IRQHandler+0x208>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d106      	bne.n	8005862 <HAL_ADC_IRQHandler+0x216>
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <HAL_ADC_IRQHandler+0x2bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2b00      	cmp	r3, #0
 800585e:	d03e      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 8005860:	e005      	b.n	800586e <HAL_ADC_IRQHandler+0x222>
 8005862:	4b2a      	ldr	r3, [pc, #168]	; (800590c <HAL_ADC_IRQHandler+0x2c0>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2b00      	cmp	r3, #0
 800586c:	d037      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005876:	d004      	beq.n	8005882 <HAL_ADC_IRQHandler+0x236>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a21      	ldr	r2, [pc, #132]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d106      	bne.n	8005890 <HAL_ADC_IRQHandler+0x244>
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_ADC_IRQHandler+0x2bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	2b05      	cmp	r3, #5
 800588c:	d027      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 800588e:	e005      	b.n	800589c <HAL_ADC_IRQHandler+0x250>
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_ADC_IRQHandler+0x2c0>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2b05      	cmp	r3, #5
 800589a:	d020      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a4:	d004      	beq.n	80058b0 <HAL_ADC_IRQHandler+0x264>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d106      	bne.n	80058be <HAL_ADC_IRQHandler+0x272>
 80058b0:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_ADC_IRQHandler+0x2bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d010      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 80058bc:	e005      	b.n	80058ca <HAL_ADC_IRQHandler+0x27e>
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <HAL_ADC_IRQHandler+0x2c0>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d009      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058d2:	d004      	beq.n	80058de <HAL_ADC_IRQHandler+0x292>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a0d      	ldr	r2, [pc, #52]	; (8005910 <HAL_ADC_IRQHandler+0x2c4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d104      	bne.n	80058e8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e018      	b.n	800591a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f0:	d004      	beq.n	80058fc <HAL_ADC_IRQHandler+0x2b0>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a03      	ldr	r2, [pc, #12]	; (8005904 <HAL_ADC_IRQHandler+0x2b8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d10b      	bne.n	8005914 <HAL_ADC_IRQHandler+0x2c8>
 80058fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005900:	e009      	b.n	8005916 <HAL_ADC_IRQHandler+0x2ca>
 8005902:	bf00      	nop
 8005904:	50000100 	.word	0x50000100
 8005908:	50000300 	.word	0x50000300
 800590c:	50000700 	.word	0x50000700
 8005910:	50000400 	.word	0x50000400
 8005914:	4b92      	ldr	r3, [pc, #584]	; (8005b60 <HAL_ADC_IRQHandler+0x514>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 80b0 	bne.w	8005a8a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 80a3 	bne.w	8005a8a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 809d 	bne.w	8005a8a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8097 	beq.w	8005a8a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005964:	d004      	beq.n	8005970 <HAL_ADC_IRQHandler+0x324>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a7e      	ldr	r2, [pc, #504]	; (8005b64 <HAL_ADC_IRQHandler+0x518>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d106      	bne.n	800597e <HAL_ADC_IRQHandler+0x332>
 8005970:	4b7d      	ldr	r3, [pc, #500]	; (8005b68 <HAL_ADC_IRQHandler+0x51c>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2b00      	cmp	r3, #0
 800597a:	d03e      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 800597c:	e005      	b.n	800598a <HAL_ADC_IRQHandler+0x33e>
 800597e:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <HAL_ADC_IRQHandler+0x520>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2b00      	cmp	r3, #0
 8005988:	d037      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005992:	d004      	beq.n	800599e <HAL_ADC_IRQHandler+0x352>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a72      	ldr	r2, [pc, #456]	; (8005b64 <HAL_ADC_IRQHandler+0x518>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d106      	bne.n	80059ac <HAL_ADC_IRQHandler+0x360>
 800599e:	4b72      	ldr	r3, [pc, #456]	; (8005b68 <HAL_ADC_IRQHandler+0x51c>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d027      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 80059aa:	e005      	b.n	80059b8 <HAL_ADC_IRQHandler+0x36c>
 80059ac:	4b6f      	ldr	r3, [pc, #444]	; (8005b6c <HAL_ADC_IRQHandler+0x520>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d020      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059c0:	d004      	beq.n	80059cc <HAL_ADC_IRQHandler+0x380>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a67      	ldr	r2, [pc, #412]	; (8005b64 <HAL_ADC_IRQHandler+0x518>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d106      	bne.n	80059da <HAL_ADC_IRQHandler+0x38e>
 80059cc:	4b66      	ldr	r3, [pc, #408]	; (8005b68 <HAL_ADC_IRQHandler+0x51c>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d010      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 80059d8:	e005      	b.n	80059e6 <HAL_ADC_IRQHandler+0x39a>
 80059da:	4b64      	ldr	r3, [pc, #400]	; (8005b6c <HAL_ADC_IRQHandler+0x520>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	d009      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ee:	d004      	beq.n	80059fa <HAL_ADC_IRQHandler+0x3ae>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5a      	ldr	r2, [pc, #360]	; (8005b60 <HAL_ADC_IRQHandler+0x514>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d104      	bne.n	8005a04 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e00f      	b.n	8005a24 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a0c:	d004      	beq.n	8005a18 <HAL_ADC_IRQHandler+0x3cc>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a54      	ldr	r2, [pc, #336]	; (8005b64 <HAL_ADC_IRQHandler+0x518>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d102      	bne.n	8005a1e <HAL_ADC_IRQHandler+0x3d2>
 8005a18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a1c:	e000      	b.n	8005a20 <HAL_ADC_IRQHandler+0x3d4>
 8005a1e:	4b50      	ldr	r3, [pc, #320]	; (8005b60 <HAL_ADC_IRQHandler+0x514>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d12d      	bne.n	8005a8a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d11a      	bne.n	8005a72 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a4a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d112      	bne.n	8005a8a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a70:	e00b      	b.n	8005a8a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0210 	orr.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc f946 	bl	8001d1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2260      	movs	r2, #96	; 0x60
 8005a96:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d011      	beq.n	8005ac6 <HAL_ADC_IRQHandler+0x47a>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff f977 	bl	8004dac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d012      	beq.n	8005af6 <HAL_ADC_IRQHandler+0x4aa>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa51 	bl	8005f8e <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_ADC_IRQHandler+0x4da>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa43 	bl	8005fa2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b24:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d04f      	beq.n	8005bd0 <HAL_ADC_IRQHandler+0x584>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d04a      	beq.n	8005bd0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d102      	bne.n	8005b48 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	e02d      	b.n	8005ba4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b50:	d004      	beq.n	8005b5c <HAL_ADC_IRQHandler+0x510>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <HAL_ADC_IRQHandler+0x518>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d109      	bne.n	8005b70 <HAL_ADC_IRQHandler+0x524>
 8005b5c:	4b02      	ldr	r3, [pc, #8]	; (8005b68 <HAL_ADC_IRQHandler+0x51c>)
 8005b5e:	e008      	b.n	8005b72 <HAL_ADC_IRQHandler+0x526>
 8005b60:	50000400 	.word	0x50000400
 8005b64:	50000100 	.word	0x50000100
 8005b68:	50000300 	.word	0x50000300
 8005b6c:	50000700 	.word	0x50000700
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <HAL_ADC_IRQHandler+0x5c8>)
 8005b72:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e007      	b.n	8005ba4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	f043 0202 	orr.w	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff f8fc 	bl	8004dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d018      	beq.n	8005c0c <HAL_ADC_IRQHandler+0x5c0>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d013      	beq.n	8005c0c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf4:	f043 0208 	orr.w	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c04:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f9b7 	bl	8005f7a <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8005c0c:	bf00      	nop
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	50000700 	.word	0x50000700

08005c18 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_ADCEx_Calibration_Start+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e05f      	b.n	8005cf4 <HAL_ADCEx_Calibration_Start+0xdc>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fe61 	bl	8006904 <ADC_Disable>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d14e      	bne.n	8005cea <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005c60:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c76:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c86:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8005c88:	f7ff f84c 	bl	8004d24 <HAL_GetTick>
 8005c8c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005c8e:	e01c      	b.n	8005cca <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005c90:	f7ff f848 	bl	8004d24 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b0a      	cmp	r3, #10
 8005c9c:	d915      	bls.n	8005cca <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d10d      	bne.n	8005cca <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f023 0312 	bic.w	r3, r3, #18
 8005cb6:	f043 0210 	orr.w	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e014      	b.n	8005cf4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd8:	d0da      	beq.n	8005c90 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	f043 0201 	orr.w	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 80ee 	bne.w	8005ef4 <HAL_ADCEx_InjectedStart_IT+0x1f8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_ADCEx_InjectedStart_IT+0x2a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e0e9      	b.n	8005efa <HAL_ADCEx_InjectedStart_IT+0x1fe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd84 	bl	800683c <ADC_Enable>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 80d5 	bne.w	8005eea <HAL_ADCEx_InjectedStart_IT+0x1ee>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                        HAL_ADC_STATE_INJ_BUSY);
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d5c:	d004      	beq.n	8005d68 <HAL_ADCEx_InjectedStart_IT+0x6c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a68      	ldr	r2, [pc, #416]	; (8005f04 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d106      	bne.n	8005d76 <HAL_ADCEx_InjectedStart_IT+0x7a>
 8005d68:	4b67      	ldr	r3, [pc, #412]	; (8005f08 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d010      	beq.n	8005d96 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8005d74:	e005      	b.n	8005d82 <HAL_ADCEx_InjectedStart_IT+0x86>
 8005d76:	4b65      	ldr	r3, [pc, #404]	; (8005f0c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d8a:	d004      	beq.n	8005d96 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a5f      	ldr	r2, [pc, #380]	; (8005f10 <HAL_ADCEx_InjectedStart_IT+0x214>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d106      	bne.n	8005da4 <HAL_ADCEx_InjectedStart_IT+0xa8>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
 8005da2:	e005      	b.n	8005db0 <HAL_ADCEx_InjectedStart_IT+0xb4>
      }
      else
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <HAL_ADCEx_InjectedStart_IT+0xc6>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2260      	movs	r2, #96	; 0x60
 8005dd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC Injected context queue overflow interrupt if this feature */
      /* is enabled.                                                          */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_ADCEx_InjectedStart_IT+0xf4>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dee:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d110      	bne.n	8005e1a <HAL_ADCEx_InjectedStart_IT+0x11e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0220 	bic.w	r2, r2, #32
 8005e06:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e16:	605a      	str	r2, [r3, #4]
          break;
 8005e18:	e008      	b.n	8005e2c <HAL_ADCEx_InjectedStart_IT+0x130>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005e28:	605a      	str	r2, [r3, #4]
          break;
 8005e2a:	bf00      	nop
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d15e      	bne.n	8005ef8 <HAL_ADCEx_InjectedStart_IT+0x1fc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e42:	d004      	beq.n	8005e4e <HAL_ADCEx_InjectedStart_IT+0x152>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2e      	ldr	r2, [pc, #184]	; (8005f04 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d106      	bne.n	8005e5c <HAL_ADCEx_InjectedStart_IT+0x160>
 8005e4e:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d03e      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005e5a:	e005      	b.n	8005e68 <HAL_ADCEx_InjectedStart_IT+0x16c>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d037      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e70:	d004      	beq.n	8005e7c <HAL_ADCEx_InjectedStart_IT+0x180>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d106      	bne.n	8005e8a <HAL_ADCEx_InjectedStart_IT+0x18e>
 8005e7c:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	2b06      	cmp	r3, #6
 8005e86:	d027      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005e88:	e005      	b.n	8005e96 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8005e8a:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d020      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e9e:	d004      	beq.n	8005eaa <HAL_ADCEx_InjectedStart_IT+0x1ae>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d106      	bne.n	8005eb8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
 8005eaa:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b07      	cmp	r3, #7
 8005eb4:	d010      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005eb6:	e005      	b.n	8005ec4 <HAL_ADCEx_InjectedStart_IT+0x1c8>
 8005eb8:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	2b07      	cmp	r3, #7
 8005ec2:	d009      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ecc:	d004      	beq.n	8005ed8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <HAL_ADCEx_InjectedStart_IT+0x214>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d10f      	bne.n	8005ef8 <HAL_ADCEx_InjectedStart_IT+0x1fc>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	e006      	b.n	8005ef8 <HAL_ADCEx_InjectedStart_IT+0x1fc>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ef2:	e001      	b.n	8005ef8 <HAL_ADCEx_InjectedStart_IT+0x1fc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	50000100 	.word	0x50000100
 8005f08:	50000300 	.word	0x50000300
 8005f0c:	50000700 	.word	0x50000700
 8005f10:	50000400 	.word	0x50000400

08005f14 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d009      	beq.n	8005f3c <HAL_ADCEx_InjectedGetValue+0x28>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d818      	bhi.n	8005f60 <HAL_ADCEx_InjectedGetValue+0x4c>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d00f      	beq.n	8005f54 <HAL_ADCEx_InjectedGetValue+0x40>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d006      	beq.n	8005f48 <HAL_ADCEx_InjectedGetValue+0x34>
 8005f3a:	e011      	b.n	8005f60 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f44:	60fb      	str	r3, [r7, #12]
      break;
 8005f46:	e011      	b.n	8005f6c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	60fb      	str	r3, [r7, #12]
      break;
 8005f52:	e00b      	b.n	8005f6c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5c:	60fb      	str	r3, [r7, #12]
      break;
 8005f5e:	e005      	b.n	8005f6c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f68:	60fb      	str	r3, [r7, #12]
      break;
 8005f6a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
	...

08005fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b09b      	sub	sp, #108	; 0x6c
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_ADC_ConfigChannel+0x22>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e2c8      	b.n	800656c <HAL_ADC_ConfigChannel+0x5b4>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 82ac 	bne.w	800654a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d81c      	bhi.n	8006034 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	461a      	mov	r2, r3
 800600e:	231f      	movs	r3, #31
 8006010:	4093      	lsls	r3, r2
 8006012:	43db      	mvns	r3, r3
 8006014:	4019      	ands	r1, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	fa00 f203 	lsl.w	r2, r0, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
 8006032:	e063      	b.n	80060fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b09      	cmp	r3, #9
 800603a:	d81e      	bhi.n	800607a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4413      	add	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	3b1e      	subs	r3, #30
 8006050:	221f      	movs	r2, #31
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	4019      	ands	r1, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	3b1e      	subs	r3, #30
 800606c:	fa00 f203 	lsl.w	r2, r0, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
 8006078:	e040      	b.n	80060fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b0e      	cmp	r3, #14
 8006080:	d81e      	bhi.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	4413      	add	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	3b3c      	subs	r3, #60	; 0x3c
 8006096:	221f      	movs	r2, #31
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	4019      	ands	r1, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	4413      	add	r3, r2
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	3b3c      	subs	r3, #60	; 0x3c
 80060b2:	fa00 f203 	lsl.w	r2, r0, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
 80060be:	e01d      	b.n	80060fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	3b5a      	subs	r3, #90	; 0x5a
 80060d4:	221f      	movs	r2, #31
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	4019      	ands	r1, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	3b5a      	subs	r3, #90	; 0x5a
 80060f0:	fa00 f203 	lsl.w	r2, r0, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 80e5 	bne.w	80062d6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b09      	cmp	r3, #9
 8006112:	d91c      	bls.n	800614e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6999      	ldr	r1, [r3, #24]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	4413      	add	r3, r2
 8006124:	3b1e      	subs	r3, #30
 8006126:	2207      	movs	r2, #7
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	4019      	ands	r1, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6898      	ldr	r0, [r3, #8]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	3b1e      	subs	r3, #30
 8006140:	fa00 f203 	lsl.w	r2, r0, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	619a      	str	r2, [r3, #24]
 800614c:	e019      	b.n	8006182 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6959      	ldr	r1, [r3, #20]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	4413      	add	r3, r2
 800615e:	2207      	movs	r2, #7
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	4019      	ands	r1, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6898      	ldr	r0, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	fa00 f203 	lsl.w	r2, r0, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	08db      	lsrs	r3, r3, #3
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	3b01      	subs	r3, #1
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d84f      	bhi.n	8006244 <HAL_ADC_ConfigChannel+0x28c>
 80061a4:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <HAL_ADC_ConfigChannel+0x1f4>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	080061df 	.word	0x080061df
 80061b4:	08006201 	.word	0x08006201
 80061b8:	08006223 	.word	0x08006223
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80061c2:	4b99      	ldr	r3, [pc, #612]	; (8006428 <HAL_ADC_ConfigChannel+0x470>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	0691      	lsls	r1, r2, #26
 80061cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061ce:	430a      	orrs	r2, r1
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80061dc:	e07b      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80061e4:	4b90      	ldr	r3, [pc, #576]	; (8006428 <HAL_ADC_ConfigChannel+0x470>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	0691      	lsls	r1, r2, #26
 80061ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061f0:	430a      	orrs	r2, r1
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80061fc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80061fe:	e06a      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006206:	4b88      	ldr	r3, [pc, #544]	; (8006428 <HAL_ADC_ConfigChannel+0x470>)
 8006208:	4013      	ands	r3, r2
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	0691      	lsls	r1, r2, #26
 8006210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006212:	430a      	orrs	r2, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800621e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006220:	e059      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006228:	4b7f      	ldr	r3, [pc, #508]	; (8006428 <HAL_ADC_ConfigChannel+0x470>)
 800622a:	4013      	ands	r3, r2
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	0691      	lsls	r1, r2, #26
 8006232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006234:	430a      	orrs	r2, r1
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006240:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006242:	e048      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	069b      	lsls	r3, r3, #26
 8006254:	429a      	cmp	r2, r3
 8006256:	d107      	bne.n	8006268 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006266:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	069b      	lsls	r3, r3, #26
 8006278:	429a      	cmp	r2, r3
 800627a:	d107      	bne.n	800628c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800628a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	069b      	lsls	r3, r3, #26
 800629c:	429a      	cmp	r2, r3
 800629e:	d107      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062ae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	069b      	lsls	r3, r3, #26
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d107      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80062d4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d108      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x33e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x33e>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x340>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 8131 	bne.w	8006560 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d00f      	beq.n	8006326 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2201      	movs	r2, #1
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	43da      	mvns	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	400a      	ands	r2, r1
 8006320:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006324:	e049      	b.n	80063ba <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2201      	movs	r2, #1
 8006334:	409a      	lsls	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b09      	cmp	r3, #9
 8006346:	d91c      	bls.n	8006382 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6999      	ldr	r1, [r3, #24]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	3b1b      	subs	r3, #27
 800635a:	2207      	movs	r2, #7
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	4019      	ands	r1, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6898      	ldr	r0, [r3, #8]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4413      	add	r3, r2
 8006372:	3b1b      	subs	r3, #27
 8006374:	fa00 f203 	lsl.w	r2, r0, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	619a      	str	r2, [r3, #24]
 8006380:	e01b      	b.n	80063ba <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6959      	ldr	r1, [r3, #20]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	4613      	mov	r3, r2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4413      	add	r3, r2
 8006394:	2207      	movs	r2, #7
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	4019      	ands	r1, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6898      	ldr	r0, [r3, #8]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	fa00 f203 	lsl.w	r2, r0, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063c2:	d004      	beq.n	80063ce <HAL_ADC_ConfigChannel+0x416>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <HAL_ADC_ConfigChannel+0x474>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x41a>
 80063ce:	4b18      	ldr	r3, [pc, #96]	; (8006430 <HAL_ADC_ConfigChannel+0x478>)
 80063d0:	e000      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x41c>
 80063d2:	4b18      	ldr	r3, [pc, #96]	; (8006434 <HAL_ADC_ConfigChannel+0x47c>)
 80063d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d105      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80063de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d015      	beq.n	8006416 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80063ee:	2b11      	cmp	r3, #17
 80063f0:	d105      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80063f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006402:	2b12      	cmp	r3, #18
 8006404:	f040 80ac 	bne.w	8006560 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006410:	2b00      	cmp	r3, #0
 8006412:	f040 80a5 	bne.w	8006560 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800641e:	d10b      	bne.n	8006438 <HAL_ADC_ConfigChannel+0x480>
 8006420:	4b02      	ldr	r3, [pc, #8]	; (800642c <HAL_ADC_ConfigChannel+0x474>)
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e023      	b.n	800646e <HAL_ADC_ConfigChannel+0x4b6>
 8006426:	bf00      	nop
 8006428:	83fff000 	.word	0x83fff000
 800642c:	50000100 	.word	0x50000100
 8006430:	50000300 	.word	0x50000300
 8006434:	50000700 	.word	0x50000700
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4e      	ldr	r2, [pc, #312]	; (8006578 <HAL_ADC_ConfigChannel+0x5c0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d103      	bne.n	800644a <HAL_ADC_ConfigChannel+0x492>
 8006442:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e011      	b.n	800646e <HAL_ADC_ConfigChannel+0x4b6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4b      	ldr	r2, [pc, #300]	; (800657c <HAL_ADC_ConfigChannel+0x5c4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d102      	bne.n	800645a <HAL_ADC_ConfigChannel+0x4a2>
 8006454:	4b4a      	ldr	r3, [pc, #296]	; (8006580 <HAL_ADC_ConfigChannel+0x5c8>)
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e009      	b.n	800646e <HAL_ADC_ConfigChannel+0x4b6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a48      	ldr	r2, [pc, #288]	; (8006580 <HAL_ADC_ConfigChannel+0x5c8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d102      	bne.n	800646a <HAL_ADC_ConfigChannel+0x4b2>
 8006464:	4b45      	ldr	r3, [pc, #276]	; (800657c <HAL_ADC_ConfigChannel+0x5c4>)
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e001      	b.n	800646e <HAL_ADC_ConfigChannel+0x4b6>
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d108      	bne.n	800648e <HAL_ADC_ConfigChannel+0x4d6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x4d6>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <HAL_ADC_ConfigChannel+0x4d8>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d150      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006494:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d107      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x4fe>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x4fe>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x500>
 80064b6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d13c      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b10      	cmp	r3, #16
 80064c2:	d11d      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x548>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064cc:	d118      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80064ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064da:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <HAL_ADC_ConfigChannel+0x5cc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <HAL_ADC_ConfigChannel+0x5d0>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	0c9a      	lsrs	r2, r3, #18
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80064f0:	e002      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f9      	bne.n	80064f2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80064fe:	e02e      	b.n	800655e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b11      	cmp	r3, #17
 8006506:	d10b      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x568>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006510:	d106      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800651a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800651c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800651e:	e01e      	b.n	800655e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b12      	cmp	r3, #18
 8006526:	d11a      	bne.n	800655e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006532:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006534:	e013      	b.n	800655e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006548:	e00a      	b.n	8006560 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f043 0220 	orr.w	r2, r3, #32
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800655c:	e000      	b.n	8006560 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800655e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006568:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800656c:	4618      	mov	r0, r3
 800656e:	376c      	adds	r7, #108	; 0x6c
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	50000100 	.word	0x50000100
 800657c:	50000400 	.word	0x50000400
 8006580:	50000500 	.word	0x50000500
 8006584:	20000160 	.word	0x20000160
 8006588:	431bde83 	.word	0x431bde83

0800658c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800658c:	b480      	push	{r7}
 800658e:	b099      	sub	sp, #100	; 0x64
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a4:	d102      	bne.n	80065ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80065a6:	4b6d      	ldr	r3, [pc, #436]	; (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	e01a      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a6a      	ldr	r2, [pc, #424]	; (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d103      	bne.n	80065be <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80065b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	e011      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a67      	ldr	r2, [pc, #412]	; (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d102      	bne.n	80065ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80065c8:	4b66      	ldr	r3, [pc, #408]	; (8006764 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	e009      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a64      	ldr	r2, [pc, #400]	; (8006764 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d102      	bne.n	80065de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80065d8:	4b61      	ldr	r3, [pc, #388]	; (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	e001      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0b0      	b.n	800674e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e0a9      	b.n	800674e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 808d 	bne.w	800672c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 8086 	bne.w	800672c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006628:	d004      	beq.n	8006634 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a4b      	ldr	r2, [pc, #300]	; (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006634:	4b4c      	ldr	r3, [pc, #304]	; (8006768 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006636:	e000      	b.n	800663a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006638:	4b4c      	ldr	r3, [pc, #304]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800663a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d040      	beq.n	80066c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6859      	ldr	r1, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006656:	035b      	lsls	r3, r3, #13
 8006658:	430b      	orrs	r3, r1
 800665a:	431a      	orrs	r2, r3
 800665c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800665e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b01      	cmp	r3, #1
 800666c:	d108      	bne.n	8006680 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d15c      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80066a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d14b      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80066a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80066b0:	f023 030f 	bic.w	r3, r3, #15
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	6811      	ldr	r1, [r2, #0]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	6892      	ldr	r2, [r2, #8]
 80066bc:	430a      	orrs	r2, r1
 80066be:	431a      	orrs	r2, r3
 80066c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80066c4:	e03c      	b.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80066c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d108      	bne.n	80066f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d123      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006714:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006716:	2b00      	cmp	r3, #0
 8006718:	d112      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800671a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006722:	f023 030f 	bic.w	r3, r3, #15
 8006726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006728:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800672a:	e009      	b.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800673e:	e000      	b.n	8006742 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006740:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800674a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800674e:	4618      	mov	r0, r3
 8006750:	3764      	adds	r7, #100	; 0x64
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	50000100 	.word	0x50000100
 8006760:	50000400 	.word	0x50000400
 8006764:	50000500 	.word	0x50000500
 8006768:	50000300 	.word	0x50000300
 800676c:	50000700 	.word	0x50000700

08006770 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006786:	2b00      	cmp	r3, #0
 8006788:	d126      	bne.n	80067d8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d115      	bne.n	80067d0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d111      	bne.n	80067d0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f043 0201 	orr.w	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7fe fad7 	bl	8004d84 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80067d6:	e004      	b.n	80067e2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7fe facd 	bl	8004d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006824:	f043 0204 	orr.w	r2, r3, #4
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7fe fac7 	bl	8004dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b01      	cmp	r3, #1
 8006854:	d108      	bne.n	8006868 <ADC_Enable+0x2c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <ADC_Enable+0x2c>
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <ADC_Enable+0x2e>
 8006868:	2300      	movs	r3, #0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d143      	bne.n	80068f6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	4b22      	ldr	r3, [pc, #136]	; (8006900 <ADC_Enable+0xc4>)
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00d      	beq.n	8006898 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	f043 0210 	orr.w	r2, r3, #16
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	f043 0201 	orr.w	r2, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e02f      	b.n	80068f8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80068a8:	f7fe fa3c 	bl	8004d24 <HAL_GetTick>
 80068ac:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80068ae:	e01b      	b.n	80068e8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068b0:	f7fe fa38 	bl	8004d24 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d914      	bls.n	80068e8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d00d      	beq.n	80068e8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f043 0210 	orr.w	r2, r3, #16
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068dc:	f043 0201 	orr.w	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e007      	b.n	80068f8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d1dc      	bne.n	80068b0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	8000003f 	.word	0x8000003f

08006904 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d108      	bne.n	8006930 <ADC_Disable+0x2c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <ADC_Disable+0x2c>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <ADC_Disable+0x2e>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d047      	beq.n	80069c6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 030d 	and.w	r3, r3, #13
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10f      	bne.n	8006964 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0202 	orr.w	r2, r2, #2
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2203      	movs	r2, #3
 800695a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800695c:	f7fe f9e2 	bl	8004d24 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006962:	e029      	b.n	80069b8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	f043 0210 	orr.w	r2, r3, #16
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f043 0201 	orr.w	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e023      	b.n	80069c8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006980:	f7fe f9d0 	bl	8004d24 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d914      	bls.n	80069b8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b01      	cmp	r3, #1
 800699a:	d10d      	bne.n	80069b8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	f043 0210 	orr.w	r2, r3, #16
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ac:	f043 0201 	orr.w	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e007      	b.n	80069c8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d0dc      	beq.n	8006980 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <__NVIC_SetPriorityGrouping+0x44>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069ec:	4013      	ands	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a02:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <__NVIC_SetPriorityGrouping+0x44>)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	60d3      	str	r3, [r2, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <__NVIC_GetPriorityGrouping+0x18>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	f003 0307 	and.w	r3, r3, #7
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	db0b      	blt.n	8006a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	f003 021f 	and.w	r2, r3, #31
 8006a4c:	4907      	ldr	r1, [pc, #28]	; (8006a6c <__NVIC_EnableIRQ+0x38>)
 8006a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2001      	movs	r0, #1
 8006a56:	fa00 f202 	lsl.w	r2, r0, r2
 8006a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	e000e100 	.word	0xe000e100

08006a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	db0a      	blt.n	8006a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	490c      	ldr	r1, [pc, #48]	; (8006abc <__NVIC_SetPriority+0x4c>)
 8006a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8e:	0112      	lsls	r2, r2, #4
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	440b      	add	r3, r1
 8006a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a98:	e00a      	b.n	8006ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	4908      	ldr	r1, [pc, #32]	; (8006ac0 <__NVIC_SetPriority+0x50>)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	0112      	lsls	r2, r2, #4
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	440b      	add	r3, r1
 8006aae:	761a      	strb	r2, [r3, #24]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	e000e100 	.word	0xe000e100
 8006ac0:	e000ed00 	.word	0xe000ed00

08006ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f1c3 0307 	rsb	r3, r3, #7
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	bf28      	it	cs
 8006ae2:	2304      	movcs	r3, #4
 8006ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d902      	bls.n	8006af4 <NVIC_EncodePriority+0x30>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3b03      	subs	r3, #3
 8006af2:	e000      	b.n	8006af6 <NVIC_EncodePriority+0x32>
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43da      	mvns	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	401a      	ands	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	43d9      	mvns	r1, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b1c:	4313      	orrs	r3, r2
         );
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3724      	adds	r7, #36	; 0x24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b3c:	d301      	bcc.n	8006b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e00f      	b.n	8006b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <SysTick_Config+0x40>)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b4a:	210f      	movs	r1, #15
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	f7ff ff8e 	bl	8006a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <SysTick_Config+0x40>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b5a:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <SysTick_Config+0x40>)
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	e000e010 	.word	0xe000e010

08006b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff ff29 	bl	80069d0 <__NVIC_SetPriorityGrouping>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b98:	f7ff ff3e 	bl	8006a18 <__NVIC_GetPriorityGrouping>
 8006b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	6978      	ldr	r0, [r7, #20]
 8006ba4:	f7ff ff8e 	bl	8006ac4 <NVIC_EncodePriority>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff5d 	bl	8006a70 <__NVIC_SetPriority>
}
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ff31 	bl	8006a34 <__NVIC_EnableIRQ>
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff ffa2 	bl	8006b2c <SysTick_Config>
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e054      	b.n	8006cb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7f5b      	ldrb	r3, [r3, #29]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fd f8c6 	bl	8003da8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	791b      	ldrb	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10c      	bne.n	8006c44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a22      	ldr	r2, [pc, #136]	; (8006cb8 <HAL_CRC_Init+0xc4>)
 8006c30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0218 	bic.w	r2, r2, #24
 8006c40:	609a      	str	r2, [r3, #8]
 8006c42:	e00c      	b.n	8006c5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f948 	bl	8006ee4 <HAL_CRCEx_Polynomial_Set>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e028      	b.n	8006cb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	795b      	ldrb	r3, [r3, #5]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6e:	611a      	str	r2, [r3, #16]
 8006c70:	e004      	b.n	8006c7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6912      	ldr	r2, [r2, #16]
 8006c7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	04c11db7 	.word	0x04c11db7

08006cbc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0201 	orr.w	r2, r2, #1
 8006ce0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d006      	beq.n	8006cf8 <HAL_CRC_Calculate+0x3c>
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d829      	bhi.n	8006d42 <HAL_CRC_Calculate+0x86>
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d019      	beq.n	8006d26 <HAL_CRC_Calculate+0x6a>
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d01e      	beq.n	8006d34 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006cf6:	e024      	b.n	8006d42 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e00a      	b.n	8006d14 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	441a      	add	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	3301      	adds	r3, #1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d3f0      	bcc.n	8006cfe <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	613b      	str	r3, [r7, #16]
      break;
 8006d24:	e00e      	b.n	8006d44 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f812 	bl	8006d54 <CRC_Handle_8>
 8006d30:	6138      	str	r0, [r7, #16]
      break;
 8006d32:	e007      	b.n	8006d44 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f899 	bl	8006e70 <CRC_Handle_16>
 8006d3e:	6138      	str	r0, [r7, #16]
      break;
 8006d40:	e000      	b.n	8006d44 <HAL_CRC_Calculate+0x88>
      break;
 8006d42:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006d4a:	693b      	ldr	r3, [r7, #16]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e023      	b.n	8006dae <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	3301      	adds	r3, #1
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	440b      	add	r3, r1
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006d80:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	3302      	adds	r3, #2
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	440b      	add	r3, r1
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006d90:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	3303      	adds	r3, #3
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	440b      	add	r3, r1
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006da4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d3d6      	bcc.n	8006d66 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d107      	bne.n	8006ddc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	6812      	ldr	r2, [r2, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d116      	bne.n	8006e14 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	b21a      	sxth	r2, r3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	3301      	adds	r3, #1
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	440b      	add	r3, r1
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b21b      	sxth	r3, r3
 8006e02:	4313      	orrs	r3, r2
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	8b7a      	ldrh	r2, [r7, #26]
 8006e12:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d11f      	bne.n	8006e5e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	4413      	add	r3, r2
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	b21a      	sxth	r2, r3
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	3301      	adds	r3, #1
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	440b      	add	r3, r1
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	b21b      	sxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	8b7a      	ldrh	r2, [r7, #26]
 8006e4a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	3302      	adds	r3, #2
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	4413      	add	r3, r2
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3724      	adds	r7, #36	; 0x24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e013      	b.n	8006eaa <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	041a      	lsls	r2, r3, #16
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	3302      	adds	r3, #2
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	440b      	add	r3, r1
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d3e6      	bcc.n	8006e82 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4413      	add	r3, r2
 8006ecc:	881a      	ldrh	r2, [r3, #0]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006ef4:	231f      	movs	r3, #31
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
 8006f06:	e063      	b.n	8006fd0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006f08:	bf00      	nop
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1e5a      	subs	r2, r3, #1
 8006f0e:	613a      	str	r2, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <HAL_CRCEx_Polynomial_Set+0x44>
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b18      	cmp	r3, #24
 8006f2c:	d846      	bhi.n	8006fbc <HAL_CRCEx_Polynomial_Set+0xd8>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006fc3 	.word	0x08006fc3
 8006f38:	08006fbd 	.word	0x08006fbd
 8006f3c:	08006fbd 	.word	0x08006fbd
 8006f40:	08006fbd 	.word	0x08006fbd
 8006f44:	08006fbd 	.word	0x08006fbd
 8006f48:	08006fbd 	.word	0x08006fbd
 8006f4c:	08006fbd 	.word	0x08006fbd
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	08006fb1 	.word	0x08006fb1
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	08006fbd 	.word	0x08006fbd
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006fbd 	.word	0x08006fbd
 8006f70:	08006fbd 	.word	0x08006fbd
 8006f74:	08006fa5 	.word	0x08006fa5
 8006f78:	08006fbd 	.word	0x08006fbd
 8006f7c:	08006fbd 	.word	0x08006fbd
 8006f80:	08006fbd 	.word	0x08006fbd
 8006f84:	08006fbd 	.word	0x08006fbd
 8006f88:	08006fbd 	.word	0x08006fbd
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08006fbd 	.word	0x08006fbd
 8006f94:	08006f99 	.word	0x08006f99
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	2b06      	cmp	r3, #6
 8006f9c:	d913      	bls.n	8006fc6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006fa2:	e010      	b.n	8006fc6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b07      	cmp	r3, #7
 8006fa8:	d90f      	bls.n	8006fca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006fae:	e00c      	b.n	8006fca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d90b      	bls.n	8006fce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006fba:	e008      	b.n	8006fce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8006fc0:	e006      	b.n	8006fd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006fce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10d      	bne.n	8006ff2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f023 0118 	bic.w	r1, r3, #24
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e037      	b.n	8007086 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800702c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007030:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800703a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f94d 	bl	8007308 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}  
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	607a      	str	r2, [r7, #4]
 800709a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_DMA_Start_IT+0x20>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e04a      	b.n	8007144 <HAL_DMA_Start_IT+0xb6>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d13a      	bne.n	8007136 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0201 	bic.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f8e1 	bl	80072ac <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 020e 	orr.w	r2, r2, #14
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e00f      	b.n	8007124 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 020a 	orr.w	r2, r2, #10
 8007112:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0204 	bic.w	r2, r2, #4
 8007122:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e005      	b.n	8007142 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800713e:	2302      	movs	r3, #2
 8007140:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8007142:	7dfb      	ldrb	r3, [r7, #23]
} 
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	2204      	movs	r2, #4
 800716a:	409a      	lsls	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d024      	beq.n	80071be <HAL_DMA_IRQHandler+0x72>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01f      	beq.n	80071be <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d107      	bne.n	800719c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0204 	bic.w	r2, r2, #4
 800719a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a4:	2104      	movs	r1, #4
 80071a6:	fa01 f202 	lsl.w	r2, r1, r2
 80071aa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d06a      	beq.n	800728a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80071bc:	e065      	b.n	800728a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	2202      	movs	r2, #2
 80071c4:	409a      	lsls	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02c      	beq.n	8007228 <HAL_DMA_IRQHandler+0xdc>
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d027      	beq.n	8007228 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 020a 	bic.w	r2, r2, #10
 80071f4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	2102      	movs	r1, #2
 8007208:	fa01 f202 	lsl.w	r2, r1, r2
 800720c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d035      	beq.n	800728a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8007226:	e030      	b.n	800728a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	2208      	movs	r2, #8
 800722e:	409a      	lsls	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4013      	ands	r3, r2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d028      	beq.n	800728a <HAL_DMA_IRQHandler+0x13e>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d023      	beq.n	800728a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 020e 	bic.w	r2, r2, #14
 8007250:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	2101      	movs	r1, #1
 800725c:	fa01 f202 	lsl.w	r2, r1, r2
 8007260:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
    }
  }
}  
 8007288:	e7ff      	b.n	800728a <HAL_DMA_IRQHandler+0x13e>
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c2:	2101      	movs	r1, #1
 80072c4:	fa01 f202 	lsl.w	r2, r1, r2
 80072c8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d108      	bne.n	80072ec <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80072ea:	e007      	b.n	80072fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	4b14      	ldr	r3, [pc, #80]	; (8007368 <DMA_CalcBaseAndBitshift+0x60>)
 8007318:	429a      	cmp	r2, r3
 800731a:	d80f      	bhi.n	800733c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	4b12      	ldr	r3, [pc, #72]	; (800736c <DMA_CalcBaseAndBitshift+0x64>)
 8007324:	4413      	add	r3, r2
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <DMA_CalcBaseAndBitshift+0x68>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	009a      	lsls	r2, r3, #2
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a0f      	ldr	r2, [pc, #60]	; (8007374 <DMA_CalcBaseAndBitshift+0x6c>)
 8007338:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800733a:	e00e      	b.n	800735a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <DMA_CalcBaseAndBitshift+0x70>)
 8007344:	4413      	add	r3, r2
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <DMA_CalcBaseAndBitshift+0x68>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	091b      	lsrs	r3, r3, #4
 800734e:	009a      	lsls	r2, r3, #2
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <DMA_CalcBaseAndBitshift+0x74>)
 8007358:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40020407 	.word	0x40020407
 800736c:	bffdfff8 	.word	0xbffdfff8
 8007370:	cccccccd 	.word	0xcccccccd
 8007374:	40020000 	.word	0x40020000
 8007378:	bffdfbf8 	.word	0xbffdfbf8
 800737c:	40020400 	.word	0x40020400

08007380 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800739a:	4b2f      	ldr	r3, [pc, #188]	; (8007458 <HAL_FLASH_Program+0xd8>)
 800739c:	7e1b      	ldrb	r3, [r3, #24]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_FLASH_Program+0x26>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e054      	b.n	8007450 <HAL_FLASH_Program+0xd0>
 80073a6:	4b2c      	ldr	r3, [pc, #176]	; (8007458 <HAL_FLASH_Program+0xd8>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80073ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073b0:	f000 f8a8 	bl	8007504 <FLASH_WaitForLastOperation>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d144      	bne.n	8007448 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d102      	bne.n	80073ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80073c4:	2301      	movs	r3, #1
 80073c6:	757b      	strb	r3, [r7, #21]
 80073c8:	e007      	b.n	80073da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d102      	bne.n	80073d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80073d0:	2302      	movs	r3, #2
 80073d2:	757b      	strb	r3, [r7, #21]
 80073d4:	e001      	b.n	80073da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80073d6:	2304      	movs	r3, #4
 80073d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80073da:	2300      	movs	r3, #0
 80073dc:	75bb      	strb	r3, [r7, #22]
 80073de:	e02d      	b.n	800743c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80073e0:	7dbb      	ldrb	r3, [r7, #22]
 80073e2:	005a      	lsls	r2, r3, #1
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	eb02 0c03 	add.w	ip, r2, r3
 80073ea:	7dbb      	ldrb	r3, [r7, #22]
 80073ec:	0119      	lsls	r1, r3, #4
 80073ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f2:	f1c1 0620 	rsb	r6, r1, #32
 80073f6:	f1a1 0020 	sub.w	r0, r1, #32
 80073fa:	fa22 f401 	lsr.w	r4, r2, r1
 80073fe:	fa03 f606 	lsl.w	r6, r3, r6
 8007402:	4334      	orrs	r4, r6
 8007404:	fa23 f000 	lsr.w	r0, r3, r0
 8007408:	4304      	orrs	r4, r0
 800740a:	fa23 f501 	lsr.w	r5, r3, r1
 800740e:	b2a3      	uxth	r3, r4
 8007410:	4619      	mov	r1, r3
 8007412:	4660      	mov	r0, ip
 8007414:	f000 f85a 	bl	80074cc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007418:	f24c 3050 	movw	r0, #50000	; 0xc350
 800741c:	f000 f872 	bl	8007504 <FLASH_WaitForLastOperation>
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <HAL_FLASH_Program+0xdc>)
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	4a0c      	ldr	r2, [pc, #48]	; (800745c <HAL_FLASH_Program+0xdc>)
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8007436:	7dbb      	ldrb	r3, [r7, #22]
 8007438:	3301      	adds	r3, #1
 800743a:	75bb      	strb	r3, [r7, #22]
 800743c:	7dba      	ldrb	r2, [r7, #22]
 800743e:	7d7b      	ldrb	r3, [r7, #21]
 8007440:	429a      	cmp	r2, r3
 8007442:	d3cd      	bcc.n	80073e0 <HAL_FLASH_Program+0x60>
 8007444:	e000      	b.n	8007448 <HAL_FLASH_Program+0xc8>
      {
        break;
 8007446:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007448:	4b03      	ldr	r3, [pc, #12]	; (8007458 <HAL_FLASH_Program+0xd8>)
 800744a:	2200      	movs	r2, #0
 800744c:	761a      	strb	r2, [r3, #24]

  return status;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007458:	20001ac0 	.word	0x20001ac0
 800745c:	40022000 	.word	0x40022000

08007460 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <HAL_FLASH_Unlock+0x40>)
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00d      	beq.n	8007492 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <HAL_FLASH_Unlock+0x40>)
 8007478:	4a0a      	ldr	r2, [pc, #40]	; (80074a4 <HAL_FLASH_Unlock+0x44>)
 800747a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_FLASH_Unlock+0x40>)
 800747e:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <HAL_FLASH_Unlock+0x48>)
 8007480:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <HAL_FLASH_Unlock+0x40>)
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007492:	79fb      	ldrb	r3, [r7, #7]
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40022000 	.word	0x40022000
 80074a4:	45670123 	.word	0x45670123
 80074a8:	cdef89ab 	.word	0xcdef89ab

080074ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <HAL_FLASH_Lock+0x1c>)
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	4a04      	ldr	r2, [pc, #16]	; (80074c8 <HAL_FLASH_Lock+0x1c>)
 80074b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40022000 	.word	0x40022000

080074cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80074d8:	4b08      	ldr	r3, [pc, #32]	; (80074fc <FLASH_Program_HalfWord+0x30>)
 80074da:	2200      	movs	r2, #0
 80074dc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <FLASH_Program_HalfWord+0x34>)
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	4a07      	ldr	r2, [pc, #28]	; (8007500 <FLASH_Program_HalfWord+0x34>)
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	887a      	ldrh	r2, [r7, #2]
 80074ee:	801a      	strh	r2, [r3, #0]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20001ac0 	.word	0x20001ac0
 8007500:	40022000 	.word	0x40022000

08007504 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800750c:	f7fd fc0a 	bl	8004d24 <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007512:	e010      	b.n	8007536 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d00c      	beq.n	8007536 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <FLASH_WaitForLastOperation+0x2e>
 8007522:	f7fd fbff 	bl	8004d24 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	429a      	cmp	r2, r3
 8007530:	d201      	bcs.n	8007536 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e01f      	b.n	8007576 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <FLASH_WaitForLastOperation+0x7c>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d0e8      	beq.n	8007514 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <FLASH_WaitForLastOperation+0x7c>)
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b20      	cmp	r3, #32
 800754c:	d102      	bne.n	8007554 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <FLASH_WaitForLastOperation+0x7c>)
 8007550:	2220      	movs	r2, #32
 8007552:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <FLASH_WaitForLastOperation+0x7c>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b10      	cmp	r3, #16
 800755e:	d005      	beq.n	800756c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <FLASH_WaitForLastOperation+0x7c>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007568:	2b04      	cmp	r3, #4
 800756a:	d103      	bne.n	8007574 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800756c:	f000 f80a 	bl	8007584 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e000      	b.n	8007576 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40022000 	.word	0x40022000

08007584 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800758e:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <FLASH_SetErrorCode+0x5c>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2b10      	cmp	r3, #16
 8007598:	d109      	bne.n	80075ae <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <FLASH_SetErrorCode+0x60>)
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f043 0302 	orr.w	r3, r3, #2
 80075a2:	4a10      	ldr	r2, [pc, #64]	; (80075e4 <FLASH_SetErrorCode+0x60>)
 80075a4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f043 0310 	orr.w	r3, r3, #16
 80075ac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <FLASH_SetErrorCode+0x5c>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d109      	bne.n	80075ce <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80075ba:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <FLASH_SetErrorCode+0x60>)
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <FLASH_SetErrorCode+0x60>)
 80075c4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f043 0304 	orr.w	r3, r3, #4
 80075cc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80075ce:	4a04      	ldr	r2, [pc, #16]	; (80075e0 <FLASH_SetErrorCode+0x5c>)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60d3      	str	r3, [r2, #12]
}  
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	40022000 	.word	0x40022000
 80075e4:	20001ac0 	.word	0x20001ac0

080075e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80075fa:	4b2e      	ldr	r3, [pc, #184]	; (80076b4 <HAL_FLASHEx_Erase+0xcc>)
 80075fc:	7e1b      	ldrb	r3, [r3, #24]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <HAL_FLASHEx_Erase+0x1e>
 8007602:	2302      	movs	r3, #2
 8007604:	e052      	b.n	80076ac <HAL_FLASHEx_Erase+0xc4>
 8007606:	4b2b      	ldr	r3, [pc, #172]	; (80076b4 <HAL_FLASHEx_Erase+0xcc>)
 8007608:	2201      	movs	r2, #1
 800760a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d115      	bne.n	8007640 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007618:	f7ff ff74 	bl	8007504 <FLASH_WaitForLastOperation>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d140      	bne.n	80076a4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8007622:	f000 f84b 	bl	80076bc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007626:	f24c 3050 	movw	r0, #50000	; 0xc350
 800762a:	f7ff ff6b 	bl	8007504 <FLASH_WaitForLastOperation>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007632:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <HAL_FLASHEx_Erase+0xd0>)
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <HAL_FLASHEx_Erase+0xd0>)
 8007638:	f023 0304 	bic.w	r3, r3, #4
 800763c:	6113      	str	r3, [r2, #16]
 800763e:	e031      	b.n	80076a4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007640:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007644:	f7ff ff5e 	bl	8007504 <FLASH_WaitForLastOperation>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d12a      	bne.n	80076a4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f04f 32ff 	mov.w	r2, #4294967295
 8007654:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	e019      	b.n	8007692 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800765e:	68b8      	ldr	r0, [r7, #8]
 8007660:	f000 f846 	bl	80076f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007664:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007668:	f7ff ff4c 	bl	8007504 <FLASH_WaitForLastOperation>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <HAL_FLASHEx_Erase+0xd0>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <HAL_FLASHEx_Erase+0xd0>)
 8007676:	f023 0302 	bic.w	r3, r3, #2
 800767a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	601a      	str	r2, [r3, #0]
            break;
 8007688:	e00c      	b.n	80076a4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	02da      	lsls	r2, r3, #11
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	4413      	add	r3, r2
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d3dc      	bcc.n	800765e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <HAL_FLASHEx_Erase+0xcc>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	761a      	strb	r2, [r3, #24]

  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20001ac0 	.word	0x20001ac0
 80076b8:	40022000 	.word	0x40022000

080076bc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <FLASH_MassErase+0x2c>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <FLASH_MassErase+0x30>)
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	4a08      	ldr	r2, [pc, #32]	; (80076ec <FLASH_MassErase+0x30>)
 80076cc:	f043 0304 	orr.w	r3, r3, #4
 80076d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <FLASH_MassErase+0x30>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	4a05      	ldr	r2, [pc, #20]	; (80076ec <FLASH_MassErase+0x30>)
 80076d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076dc:	6113      	str	r3, [r2, #16]
}
 80076de:	bf00      	nop
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	20001ac0 	.word	0x20001ac0
 80076ec:	40022000 	.word	0x40022000

080076f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076f8:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <FLASH_PageErase+0x38>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80076fe:	4b0b      	ldr	r3, [pc, #44]	; (800772c <FLASH_PageErase+0x3c>)
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <FLASH_PageErase+0x3c>)
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800770a:	4a08      	ldr	r2, [pc, #32]	; (800772c <FLASH_PageErase+0x3c>)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <FLASH_PageErase+0x3c>)
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	4a05      	ldr	r2, [pc, #20]	; (800772c <FLASH_PageErase+0x3c>)
 8007716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771a:	6113      	str	r3, [r2, #16]
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	20001ac0 	.word	0x20001ac0
 800772c:	40022000 	.word	0x40022000

08007730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800773e:	e154      	b.n	80079ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	2101      	movs	r1, #1
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	fa01 f303 	lsl.w	r3, r1, r3
 800774c:	4013      	ands	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8146 	beq.w	80079e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d005      	beq.n	8007770 <HAL_GPIO_Init+0x40>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d130      	bne.n	80077d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	2203      	movs	r2, #3
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	43db      	mvns	r3, r3
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4013      	ands	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077a6:	2201      	movs	r2, #1
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43db      	mvns	r3, r3
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4013      	ands	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	f003 0201 	and.w	r2, r3, #1
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d017      	beq.n	800780e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	2203      	movs	r2, #3
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43db      	mvns	r3, r3
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4013      	ands	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d123      	bne.n	8007862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	08da      	lsrs	r2, r3, #3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3208      	adds	r2, #8
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	220f      	movs	r2, #15
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4013      	ands	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	691a      	ldr	r2, [r3, #16]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	08da      	lsrs	r2, r3, #3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3208      	adds	r2, #8
 800785c:	6939      	ldr	r1, [r7, #16]
 800785e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	2203      	movs	r2, #3
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	43db      	mvns	r3, r3
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4013      	ands	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f003 0203 	and.w	r2, r3, #3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80a0 	beq.w	80079e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078a4:	4b58      	ldr	r3, [pc, #352]	; (8007a08 <HAL_GPIO_Init+0x2d8>)
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	4a57      	ldr	r2, [pc, #348]	; (8007a08 <HAL_GPIO_Init+0x2d8>)
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	6193      	str	r3, [r2, #24]
 80078b0:	4b55      	ldr	r3, [pc, #340]	; (8007a08 <HAL_GPIO_Init+0x2d8>)
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80078bc:	4a53      	ldr	r2, [pc, #332]	; (8007a0c <HAL_GPIO_Init+0x2dc>)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	3302      	adds	r3, #2
 80078c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	220f      	movs	r2, #15
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	43db      	mvns	r3, r3
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4013      	ands	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80078e6:	d019      	beq.n	800791c <HAL_GPIO_Init+0x1ec>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a49      	ldr	r2, [pc, #292]	; (8007a10 <HAL_GPIO_Init+0x2e0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_GPIO_Init+0x1e8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a48      	ldr	r2, [pc, #288]	; (8007a14 <HAL_GPIO_Init+0x2e4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00d      	beq.n	8007914 <HAL_GPIO_Init+0x1e4>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a47      	ldr	r2, [pc, #284]	; (8007a18 <HAL_GPIO_Init+0x2e8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <HAL_GPIO_Init+0x1e0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a46      	ldr	r2, [pc, #280]	; (8007a1c <HAL_GPIO_Init+0x2ec>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d101      	bne.n	800790c <HAL_GPIO_Init+0x1dc>
 8007908:	2304      	movs	r3, #4
 800790a:	e008      	b.n	800791e <HAL_GPIO_Init+0x1ee>
 800790c:	2305      	movs	r3, #5
 800790e:	e006      	b.n	800791e <HAL_GPIO_Init+0x1ee>
 8007910:	2303      	movs	r3, #3
 8007912:	e004      	b.n	800791e <HAL_GPIO_Init+0x1ee>
 8007914:	2302      	movs	r3, #2
 8007916:	e002      	b.n	800791e <HAL_GPIO_Init+0x1ee>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <HAL_GPIO_Init+0x1ee>
 800791c:	2300      	movs	r3, #0
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	f002 0203 	and.w	r2, r2, #3
 8007924:	0092      	lsls	r2, r2, #2
 8007926:	4093      	lsls	r3, r2
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800792e:	4937      	ldr	r1, [pc, #220]	; (8007a0c <HAL_GPIO_Init+0x2dc>)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	3302      	adds	r3, #2
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800793c:	4b38      	ldr	r3, [pc, #224]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	43db      	mvns	r3, r3
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4013      	ands	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007960:	4a2f      	ldr	r2, [pc, #188]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	43db      	mvns	r3, r3
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4013      	ands	r3, r2
 8007974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800798a:	4a25      	ldr	r2, [pc, #148]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007990:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	43db      	mvns	r3, r3
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4013      	ands	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80079b4:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079ba:	4b19      	ldr	r3, [pc, #100]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	43db      	mvns	r3, r3
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4013      	ands	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80079de:	4a10      	ldr	r2, [pc, #64]	; (8007a20 <HAL_GPIO_Init+0x2f0>)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3301      	adds	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f47f aea3 	bne.w	8007740 <HAL_GPIO_Init+0x10>
  }
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	48000400 	.word	0x48000400
 8007a14:	48000800 	.word	0x48000800
 8007a18:	48000c00 	.word	0x48000c00
 8007a1c:	48001000 	.word	0x48001000
 8007a20:	40010400 	.word	0x40010400

08007a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	887b      	ldrh	r3, [r7, #2]
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	e001      	b.n	8007a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	807b      	strh	r3, [r7, #2]
 8007a60:	4613      	mov	r3, r2
 8007a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a64:	787b      	ldrb	r3, [r7, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a6a:	887a      	ldrh	r2, [r7, #2]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a70:	e002      	b.n	8007a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a72:	887a      	ldrh	r2, [r7, #2]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e081      	b.n	8007b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fc f99c 	bl	8003de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2224      	movs	r2, #36	; 0x24
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d107      	bne.n	8007afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007afa:	609a      	str	r2, [r3, #8]
 8007afc:	e006      	b.n	8007b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d104      	bne.n	8007b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691a      	ldr	r2, [r3, #16]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69d9      	ldr	r1, [r3, #28]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d138      	bne.n	8007c2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e032      	b.n	8007c2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2224      	movs	r2, #36	; 0x24
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0201 	bic.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bf4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0201 	orr.w	r2, r2, #1
 8007c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e000      	b.n	8007c2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d139      	bne.n	8007cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d101      	bne.n	8007c5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e033      	b.n	8007cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2224      	movs	r2, #36	; 0x24
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0201 	bic.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd2:	b08b      	sub	sp, #44	; 0x2c
 8007cd4:	af06      	add	r7, sp, #24
 8007cd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e0c4      	b.n	8007e6c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f00b fa46 	bl	8013188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2203      	movs	r2, #3
 8007d00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f005 fad1 	bl	800d2b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
 8007d12:	e040      	b.n	8007d96 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	440b      	add	r3, r1
 8007d24:	3301      	adds	r3, #1
 8007d26:	2201      	movs	r2, #1
 8007d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	440b      	add	r3, r1
 8007d3a:	7bfa      	ldrb	r2, [r7, #15]
 8007d3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	440b      	add	r3, r1
 8007d4e:	3303      	adds	r3, #3
 8007d50:	2200      	movs	r2, #0
 8007d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d54:	7bfa      	ldrb	r2, [r7, #15]
 8007d56:	6879      	ldr	r1, [r7, #4]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	440b      	add	r3, r1
 8007d62:	3338      	adds	r3, #56	; 0x38
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	440b      	add	r3, r1
 8007d76:	333c      	adds	r3, #60	; 0x3c
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d7c:	7bfa      	ldrb	r2, [r7, #15]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	440b      	add	r3, r1
 8007d8a:	3340      	adds	r3, #64	; 0x40
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	3301      	adds	r3, #1
 8007d94:	73fb      	strb	r3, [r7, #15]
 8007d96:	7bfa      	ldrb	r2, [r7, #15]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d3b9      	bcc.n	8007d14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
 8007da4:	e044      	b.n	8007e30 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007da6:	7bfa      	ldrb	r2, [r7, #15]
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	440b      	add	r3, r1
 8007db4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007db8:	2200      	movs	r2, #0
 8007dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007dbc:	7bfa      	ldrb	r2, [r7, #15]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	440b      	add	r3, r1
 8007dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007dce:	7bfa      	ldrb	r2, [r7, #15]
 8007dd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007dd2:	7bfa      	ldrb	r2, [r7, #15]
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	440b      	add	r3, r1
 8007de0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007de8:	7bfa      	ldrb	r2, [r7, #15]
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	440b      	add	r3, r1
 8007df6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007dfe:	7bfa      	ldrb	r2, [r7, #15]
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e14:	7bfa      	ldrb	r2, [r7, #15]
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	440b      	add	r3, r1
 8007e22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
 8007e30:	7bfa      	ldrb	r2, [r7, #15]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3b5      	bcc.n	8007da6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	687e      	ldr	r6, [r7, #4]
 8007e42:	466d      	mov	r5, sp
 8007e44:	f106 0410 	add.w	r4, r6, #16
 8007e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	1d33      	adds	r3, r6, #4
 8007e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e54:	6838      	ldr	r0, [r7, #0]
 8007e56:	f005 fa46 	bl	800d2e6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d101      	bne.n	8007e8a <HAL_PCD_Start+0x16>
 8007e86:	2302      	movs	r3, #2
 8007e88:	e016      	b.n	8007eb8 <HAL_PCD_Start+0x44>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f005 f9f3 	bl	800d282 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f00b fc10 	bl	80136c4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f007 fcb2 	bl	800f812 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f007 fcab 	bl	800f828 <USB_ReadInterrupts>
 8007ed2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fab2 	bl	8008448 <PCD_EP_ISR_Handler>

    return;
 8007ee4:	e0bd      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d013      	beq.n	8007f18 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f02:	b292      	uxth	r2, r2
 8007f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f00b f9de 	bl	80132ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f8a9 	bl	8008068 <HAL_PCD_SetAddress>

    return;
 8007f16:	e0a4      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00c      	beq.n	8007f3c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f34:	b292      	uxth	r2, r2
 8007f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007f3a:	e092      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007f5e:	e080      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d027      	beq.n	8007fba <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0204 	bic.w	r2, r2, #4
 8007f7c:	b292      	uxth	r2, r2
 8007f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0208 	bic.w	r2, r2, #8
 8007f94:	b292      	uxth	r2, r2
 8007f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f00b f9ce 	bl	801333c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fb2:	b292      	uxth	r2, r2
 8007fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007fb8:	e053      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d027      	beq.n	8008014 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0208 	orr.w	r2, r2, #8
 8007fd6:	b292      	uxth	r2, r2
 8007fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fee:	b292      	uxth	r2, r2
 8007ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0204 	orr.w	r2, r2, #4
 8008006:	b292      	uxth	r2, r2
 8008008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f00b f97b 	bl	8013308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008012:	e026      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00f      	beq.n	800803e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008030:	b292      	uxth	r2, r2
 8008032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f00b f939 	bl	80132ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800803c:	e011      	b.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00c      	beq.n	8008062 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800805a:	b292      	uxth	r2, r2
 800805c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008060:	bf00      	nop
  }
}
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_PCD_SetAddress+0x1a>
 800807e:	2302      	movs	r3, #2
 8008080:	e013      	b.n	80080aa <HAL_PCD_SetAddress+0x42>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f007 fba5 	bl	800f7ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	4608      	mov	r0, r1
 80080bc:	4611      	mov	r1, r2
 80080be:	461a      	mov	r2, r3
 80080c0:	4603      	mov	r3, r0
 80080c2:	70fb      	strb	r3, [r7, #3]
 80080c4:	460b      	mov	r3, r1
 80080c6:	803b      	strh	r3, [r7, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80080d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da0e      	bge.n	80080f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	705a      	strb	r2, [r3, #1]
 80080f4:	e00e      	b.n	8008114 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	f003 0207 	and.w	r2, r3, #7
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	b2da      	uxtb	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008120:	883a      	ldrh	r2, [r7, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	78ba      	ldrb	r2, [r7, #2]
 800812a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800812c:	78bb      	ldrb	r3, [r7, #2]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d102      	bne.n	8008138 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_PCD_EP_Open+0x94>
 8008142:	2302      	movs	r3, #2
 8008144:	e00e      	b.n	8008164 <HAL_PCD_EP_Open+0xb2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	4618      	mov	r0, r3
 8008156:	f005 f8e7 	bl	800d328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8008162:	7afb      	ldrb	r3, [r7, #11]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da0e      	bge.n	800819e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4413      	add	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	705a      	strb	r2, [r3, #1]
 800819c:	e00e      	b.n	80081bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 0207 	and.w	r2, r3, #7
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_PCD_EP_Close+0x6a>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e00e      	b.n	80081f4 <HAL_PCD_EP_Close+0x88>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68f9      	ldr	r1, [r7, #12]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f005 fc63 	bl	800dab0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]
 8008208:	460b      	mov	r3, r1
 800820a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	f003 0207 	and.w	r2, r3, #7
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4413      	add	r3, r2
 8008222:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2200      	movs	r2, #0
 8008234:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2200      	movs	r2, #0
 800823a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	b2da      	uxtb	r2, r3
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6979      	ldr	r1, [r7, #20]
 800824e:	4618      	mov	r0, r3
 8008250:	f005 fe1b 	bl	800de8a <USB_EPStartXfer>

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	f003 0207 	and.w	r2, r3, #7
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	440b      	add	r3, r1
 800827c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008280:	681b      	ldr	r3, [r3, #0]
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	460b      	mov	r3, r1
 800829c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2200      	movs	r2, #0
 80082d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2201      	movs	r2, #1
 80082d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6979      	ldr	r1, [r7, #20]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f005 fdcc 	bl	800de8a <USB_EPStartXfer>

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	f003 0207 	and.w	r2, r3, #7
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d901      	bls.n	800831a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e03e      	b.n	8008398 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800831a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800831e:	2b00      	cmp	r3, #0
 8008320:	da0e      	bge.n	8008340 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	4413      	add	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	705a      	strb	r2, [r3, #1]
 800833e:	e00c      	b.n	800835a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	b2da      	uxtb	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_PCD_EP_SetStall+0x7e>
 8008376:	2302      	movs	r3, #2
 8008378:	e00e      	b.n	8008398 <HAL_PCD_EP_SetStall+0x9c>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	4618      	mov	r0, r3
 800838a:	f007 f92f 	bl	800f5ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	f003 020f 	and.w	r2, r3, #15
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d901      	bls.n	80083be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e040      	b.n	8008440 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da0e      	bge.n	80083e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	705a      	strb	r2, [r3, #1]
 80083e2:	e00e      	b.n	8008402 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	f003 0207 	and.w	r2, r3, #7
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_PCD_EP_ClrStall+0x82>
 800841e:	2302      	movs	r3, #2
 8008420:	e00e      	b.n	8008440 <HAL_PCD_EP_ClrStall+0xa0>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	4618      	mov	r0, r3
 8008432:	f007 f92c 	bl	800f68e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b096      	sub	sp, #88	; 0x58
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008450:	e3bf      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800845a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800845e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800846c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 8179 	bne.w	8008768 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	d152      	bne.n	8008528 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800848e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008492:	81fb      	strh	r3, [r7, #14]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	89fb      	ldrh	r3, [r7, #14]
 800849a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3328      	adds	r3, #40	; 0x28
 80084aa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	3302      	adds	r3, #2
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80084d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80084d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	441a      	add	r2, r3
 80084e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80084e6:	2100      	movs	r1, #0
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f00a fec6 	bl	801327a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 836b 	beq.w	8008bd2 <PCD_EP_ISR_Handler+0x78a>
 80084fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	f040 8366 	bne.w	8008bd2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008512:	b2da      	uxtb	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	b292      	uxth	r2, r2
 800851a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008526:	e354      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800852e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800853a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800853e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008542:	2b00      	cmp	r3, #0
 8008544:	d034      	beq.n	80085b0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800854e:	b29b      	uxth	r3, r3
 8008550:	461a      	mov	r2, r3
 8008552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4413      	add	r3, r2
 800855a:	3306      	adds	r3, #6
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6812      	ldr	r2, [r2, #0]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800856e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008570:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800857c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800857e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008582:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008584:	b29b      	uxth	r3, r3
 8008586:	f007 f9a5 	bl	800f8d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29a      	uxth	r2, r3
 8008592:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008596:	4013      	ands	r3, r2
 8008598:	823b      	strh	r3, [r7, #16]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	8a3a      	ldrh	r2, [r7, #16]
 80085a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085a4:	b292      	uxth	r2, r2
 80085a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f00a fe39 	bl	8013220 <HAL_PCD_SetupStageCallback>
 80085ae:	e310      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80085b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f280 830c 	bge.w	8008bd2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80085c6:	4013      	ands	r3, r2
 80085c8:	83fb      	strh	r3, [r7, #30]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	8bfa      	ldrh	r2, [r7, #30]
 80085d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085d4:	b292      	uxth	r2, r2
 80085d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	4413      	add	r3, r2
 80085ec:	3306      	adds	r3, #6
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008602:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d019      	beq.n	8008640 <PCD_EP_ISR_Handler+0x1f8>
 800860c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d015      	beq.n	8008640 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861a:	6959      	ldr	r1, [r3, #20]
 800861c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008622:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008624:	b29b      	uxth	r3, r3
 8008626:	f007 f955 	bl	800f8d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800862a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800862c:	695a      	ldr	r2, [r3, #20]
 800862e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	441a      	add	r2, r3
 8008634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008636:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008638:	2100      	movs	r1, #0
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f00a fe02 	bl	8013244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800864a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800864e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 82bd 	bne.w	8008bd2 <PCD_EP_ISR_Handler+0x78a>
 8008658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800865c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008664:	f000 82b5 	beq.w	8008bd2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008676:	b29b      	uxth	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	4413      	add	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008692:	b29a      	uxth	r2, r3
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b3e      	cmp	r3, #62	; 0x3e
 800869e:	d91d      	bls.n	80086dc <PCD_EP_ISR_Handler+0x294>
 80086a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	647b      	str	r3, [r7, #68]	; 0x44
 80086a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 031f 	and.w	r3, r3, #31
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <PCD_EP_ISR_Handler+0x272>
 80086b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b6:	3b01      	subs	r3, #1
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b29a      	uxth	r2, r3
 80086c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	029b      	lsls	r3, r3, #10
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	801a      	strh	r2, [r3, #0]
 80086da:	e026      	b.n	800872a <PCD_EP_ISR_Handler+0x2e2>
 80086dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <PCD_EP_ISR_Handler+0x2b2>
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	801a      	strh	r2, [r3, #0]
 80086f8:	e017      	b.n	800872a <PCD_EP_ISR_Handler+0x2e2>
 80086fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	647b      	str	r3, [r7, #68]	; 0x44
 8008702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <PCD_EP_ISR_Handler+0x2cc>
 800870e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008710:	3301      	adds	r3, #1
 8008712:	647b      	str	r3, [r7, #68]	; 0x44
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29a      	uxth	r2, r3
 800871a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871c:	b29b      	uxth	r3, r3
 800871e:	029b      	lsls	r3, r3, #10
 8008720:	b29b      	uxth	r3, r3
 8008722:	4313      	orrs	r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873a:	827b      	strh	r3, [r7, #18]
 800873c:	8a7b      	ldrh	r3, [r7, #18]
 800873e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008742:	827b      	strh	r3, [r7, #18]
 8008744:	8a7b      	ldrh	r3, [r7, #18]
 8008746:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800874a:	827b      	strh	r3, [r7, #18]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	8a7b      	ldrh	r3, [r7, #18]
 8008752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800875a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008762:	b29b      	uxth	r3, r3
 8008764:	8013      	strh	r3, [r2, #0]
 8008766:	e234      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800877c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008780:	2b00      	cmp	r3, #0
 8008782:	f280 80fc 	bge.w	800897e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29a      	uxth	r2, r3
 8008798:	f640 738f 	movw	r3, #3983	; 0xf8f
 800879c:	4013      	ands	r3, r2
 800879e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80087b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087b8:	b292      	uxth	r2, r2
 80087ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80087bc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80087d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d4:	7b1b      	ldrb	r3, [r3, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d125      	bne.n	8008826 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4413      	add	r3, r2
 80087ee:	3306      	adds	r3, #6
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008802:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8008806:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 8092 	beq.w	8008934 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008816:	6959      	ldr	r1, [r3, #20]
 8008818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881a:	88da      	ldrh	r2, [r3, #6]
 800881c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008820:	f007 f858 	bl	800f8d4 <USB_ReadPMA>
 8008824:	e086      	b.n	8008934 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008828:	78db      	ldrb	r3, [r3, #3]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d10a      	bne.n	8008844 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800882e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008832:	461a      	mov	r2, r3
 8008834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f9d9 	bl	8008bee <HAL_PCD_EP_DB_Receive>
 800883c:	4603      	mov	r3, r0
 800883e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8008842:	e077      	b.n	8008934 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008880:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d024      	beq.n	80088ec <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	4413      	add	r3, r2
 80088b6:	3302      	adds	r3, #2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6812      	ldr	r2, [r2, #0]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80088ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d02e      	beq.n	8008934 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088dc:	6959      	ldr	r1, [r3, #20]
 80088de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e0:	891a      	ldrh	r2, [r3, #8]
 80088e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80088e6:	f006 fff5 	bl	800f8d4 <USB_ReadPMA>
 80088ea:	e023      	b.n	8008934 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	4413      	add	r3, r2
 8008900:	3306      	adds	r3, #6
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008914:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008918:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008926:	6959      	ldr	r1, [r3, #20]
 8008928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800892a:	895a      	ldrh	r2, [r3, #10]
 800892c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008930:	f006 ffd0 	bl	800f8d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800893c:	441a      	add	r2, r3
 800893e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008940:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800894a:	441a      	add	r2, r3
 800894c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800894e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <PCD_EP_ISR_Handler+0x51c>
 8008958:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800895c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	429a      	cmp	r2, r3
 8008962:	d206      	bcs.n	8008972 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f00a fc6a 	bl	8013244 <HAL_PCD_DataOutStageCallback>
 8008970:	e005      	b.n	800897e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008978:	4618      	mov	r0, r3
 800897a:	f005 fa86 	bl	800de8a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800897e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 8123 	beq.w	8008bd2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800898c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	441a      	add	r2, r3
 80089cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80089d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d8:	b29b      	uxth	r3, r3
 80089da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80089dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089de:	78db      	ldrb	r3, [r3, #3]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	f040 80a2 	bne.w	8008b2a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80089e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e8:	2200      	movs	r2, #0
 80089ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80089ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ee:	7b1b      	ldrb	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8093 	beq.w	8008b1c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80089f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d046      	beq.n	8008a90 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d126      	bne.n	8008a58 <PCD_EP_ISR_Handler+0x610>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	4413      	add	r3, r2
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
 8008a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	011a      	lsls	r2, r3, #4
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a30:	623b      	str	r3, [r7, #32]
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	801a      	strh	r2, [r3, #0]
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	e061      	b.n	8008b1c <PCD_EP_ISR_Handler+0x6d4>
 8008a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d15d      	bne.n	8008b1c <PCD_EP_ISR_Handler+0x6d4>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	4413      	add	r3, r2
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	011a      	lsls	r2, r3, #4
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	4413      	add	r3, r2
 8008a82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	e045      	b.n	8008b1c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d126      	bne.n	8008aec <PCD_EP_ISR_Handler+0x6a4>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	4413      	add	r3, r2
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	011a      	lsls	r2, r3, #4
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abe:	4413      	add	r3, r2
 8008ac0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	801a      	strh	r2, [r3, #0]
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	801a      	strh	r2, [r3, #0]
 8008aea:	e017      	b.n	8008b1c <PCD_EP_ISR_Handler+0x6d4>
 8008aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d113      	bne.n	8008b1c <PCD_EP_ISR_Handler+0x6d4>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	4413      	add	r3, r2
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	011a      	lsls	r2, r3, #4
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0e:	4413      	add	r3, r2
 8008b10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	2200      	movs	r2, #0
 8008b1a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f00a fba9 	bl	801327a <HAL_PCD_DataInStageCallback>
 8008b28:	e053      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d146      	bne.n	8008bc4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	4413      	add	r3, r2
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6812      	ldr	r2, [r2, #0]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d907      	bls.n	8008b7e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8008b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b76:	1ad2      	subs	r2, r2, r3
 8008b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7a:	619a      	str	r2, [r3, #24]
 8008b7c:	e002      	b.n	8008b84 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8008b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b80:	2200      	movs	r2, #0
 8008b82:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f00a fb71 	bl	801327a <HAL_PCD_DataInStageCallback>
 8008b98:	e01b      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ba2:	441a      	add	r2, r3
 8008ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008baa:	69da      	ldr	r2, [r3, #28]
 8008bac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008bb0:	441a      	add	r2, r3
 8008bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f005 f964 	bl	800de8a <USB_EPStartXfer>
 8008bc2:	e006      	b.n	8008bd2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008bc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f91b 	bl	8008e08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	b21b      	sxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f6ff ac37 	blt.w	8008452 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3758      	adds	r7, #88	; 0x58
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b088      	sub	sp, #32
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d07e      	beq.n	8008d04 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	4413      	add	r3, r2
 8008c1a:	3302      	adds	r3, #2
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	8b7b      	ldrh	r3, [r7, #26]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d306      	bcc.n	8008c48 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	8b7b      	ldrh	r3, [r7, #26]
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	619a      	str	r2, [r3, #24]
 8008c46:	e002      	b.n	8008c4e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d123      	bne.n	8008c9e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c70:	833b      	strh	r3, [r7, #24]
 8008c72:	8b3b      	ldrh	r3, [r7, #24]
 8008c74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c78:	833b      	strh	r3, [r7, #24]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	8b3b      	ldrh	r3, [r7, #24]
 8008c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01f      	beq.n	8008ce8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	82fb      	strh	r3, [r7, #22]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	441a      	add	r2, r3
 8008cd2:	8afb      	ldrh	r3, [r7, #22]
 8008cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008ce8:	8b7b      	ldrh	r3, [r7, #26]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8087 	beq.w	8008dfe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6959      	ldr	r1, [r3, #20]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	891a      	ldrh	r2, [r3, #8]
 8008cfc:	8b7b      	ldrh	r3, [r7, #26]
 8008cfe:	f006 fde9 	bl	800f8d4 <USB_ReadPMA>
 8008d02:	e07c      	b.n	8008dfe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	4413      	add	r3, r2
 8008d18:	3306      	adds	r3, #6
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	8b7b      	ldrh	r3, [r7, #26]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d306      	bcc.n	8008d46 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	699a      	ldr	r2, [r3, #24]
 8008d3c:	8b7b      	ldrh	r3, [r7, #26]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	619a      	str	r2, [r3, #24]
 8008d44:	e002      	b.n	8008d4c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d123      	bne.n	8008d9c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6e:	83fb      	strh	r3, [r7, #30]
 8008d70:	8bfb      	ldrh	r3, [r7, #30]
 8008d72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d76:	83fb      	strh	r3, [r7, #30]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	441a      	add	r2, r3
 8008d86:	8bfb      	ldrh	r3, [r7, #30]
 8008d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d11f      	bne.n	8008de6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	83bb      	strh	r3, [r7, #28]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	441a      	add	r2, r3
 8008dd0:	8bbb      	ldrh	r3, [r7, #28]
 8008dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008de6:	8b7b      	ldrh	r3, [r7, #26]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d008      	beq.n	8008dfe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6959      	ldr	r1, [r3, #20]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	895a      	ldrh	r2, [r3, #10]
 8008df8:	8b7b      	ldrh	r3, [r7, #26]
 8008dfa:	f006 fd6b 	bl	800f8d4 <USB_ReadPMA>
    }
  }

  return count;
 8008dfe:	8b7b      	ldrh	r3, [r7, #26]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b0a4      	sub	sp, #144	; 0x90
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 81dd 	beq.w	80091dc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	00db      	lsls	r3, r3, #3
 8008e34:	4413      	add	r3, r2
 8008e36:	3302      	adds	r3, #2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e4a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	699a      	ldr	r2, [r3, #24]
 8008e52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d907      	bls.n	8008e6a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	699a      	ldr	r2, [r3, #24]
 8008e5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008e62:	1ad2      	subs	r2, r2, r3
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	619a      	str	r2, [r3, #24]
 8008e68:	e002      	b.n	8008e70 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 80b9 	bne.w	8008fec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d126      	bne.n	8008ed0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	4413      	add	r3, r2
 8008e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	011a      	lsls	r2, r3, #4
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	801a      	strh	r2, [r3, #0]
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	801a      	strh	r2, [r3, #0]
 8008ece:	e01a      	b.n	8008f06 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	785b      	ldrb	r3, [r3, #1]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d116      	bne.n	8008f06 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eec:	4413      	add	r3, r2
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	011a      	lsls	r2, r3, #4
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	4413      	add	r3, r2
 8008efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	2200      	movs	r2, #0
 8008f04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d126      	bne.n	8008f62 <HAL_PCD_EP_DB_Transmit+0x15a>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	61fb      	str	r3, [r7, #28]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	011a      	lsls	r2, r3, #4
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4413      	add	r3, r2
 8008f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	801a      	strh	r2, [r3, #0]
 8008f60:	e017      	b.n	8008f92 <HAL_PCD_EP_DB_Transmit+0x18a>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d113      	bne.n	8008f92 <HAL_PCD_EP_DB_Transmit+0x18a>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	461a      	mov	r2, r3
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	4413      	add	r3, r2
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	011a      	lsls	r2, r3, #4
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	4413      	add	r3, r2
 8008f86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f8a:	623b      	str	r3, [r7, #32]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	4619      	mov	r1, r3
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f00a f96e 	bl	801327a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 82fc 	beq.w	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc4:	82fb      	strh	r3, [r7, #22]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	441a      	add	r2, r3
 8008fd4:	8afb      	ldrh	r3, [r7, #22]
 8008fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	8013      	strh	r3, [r2, #0]
 8008fea:	e2da      	b.n	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008fec:	88fb      	ldrh	r3, [r7, #6]
 8008fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d021      	beq.n	800903a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009010:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	441a      	add	r2, r3
 8009022:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800902a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800902e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009036:	b29b      	uxth	r3, r3
 8009038:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009040:	2b01      	cmp	r3, #1
 8009042:	f040 82ae 	bne.w	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	695a      	ldr	r2, [r3, #20]
 800904a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800904e:	441a      	add	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800905c:	441a      	add	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6a1a      	ldr	r2, [r3, #32]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	429a      	cmp	r2, r3
 800906c:	d30b      	bcc.n	8009086 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6a1a      	ldr	r2, [r3, #32]
 800907a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	621a      	str	r2, [r3, #32]
 8009084:	e017      	b.n	80090b6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d108      	bne.n	80090a0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800908e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800909e:	e00a      	b.n	80090b6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d165      	bne.n	800918a <HAL_PCD_EP_DB_Transmit+0x382>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d2:	4413      	add	r3, r2
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	011a      	lsls	r2, r3, #4
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	4413      	add	r3, r2
 80090e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	801a      	strh	r2, [r3, #0]
 80090f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090fa:	2b3e      	cmp	r3, #62	; 0x3e
 80090fc:	d91d      	bls.n	800913a <HAL_PCD_EP_DB_Transmit+0x332>
 80090fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009102:	095b      	lsrs	r3, r3, #5
 8009104:	64bb      	str	r3, [r7, #72]	; 0x48
 8009106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <HAL_PCD_EP_DB_Transmit+0x310>
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	3b01      	subs	r3, #1
 8009116:	64bb      	str	r3, [r7, #72]	; 0x48
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29a      	uxth	r2, r3
 800911e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009120:	b29b      	uxth	r3, r3
 8009122:	029b      	lsls	r3, r3, #10
 8009124:	b29b      	uxth	r3, r3
 8009126:	4313      	orrs	r3, r2
 8009128:	b29b      	uxth	r3, r3
 800912a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009132:	b29a      	uxth	r2, r3
 8009134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	e044      	b.n	80091c4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800913a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <HAL_PCD_EP_DB_Transmit+0x350>
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009150:	b29a      	uxth	r2, r3
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e035      	b.n	80091c4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8009158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <HAL_PCD_EP_DB_Transmit+0x36a>
 800916c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916e:	3301      	adds	r3, #1
 8009170:	64bb      	str	r3, [r7, #72]	; 0x48
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	b29a      	uxth	r2, r3
 8009178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800917a:	b29b      	uxth	r3, r3
 800917c:	029b      	lsls	r3, r3, #10
 800917e:	b29b      	uxth	r3, r3
 8009180:	4313      	orrs	r3, r2
 8009182:	b29a      	uxth	r2, r3
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	801a      	strh	r2, [r3, #0]
 8009188:	e01c      	b.n	80091c4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d118      	bne.n	80091c4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	647b      	str	r3, [r7, #68]	; 0x44
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a6:	4413      	add	r3, r2
 80091a8:	647b      	str	r3, [r7, #68]	; 0x44
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	011a      	lsls	r2, r3, #4
 80091b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b2:	4413      	add	r3, r2
 80091b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091b8:	643b      	str	r3, [r7, #64]	; 0x40
 80091ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091be:	b29a      	uxth	r2, r3
 80091c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6959      	ldr	r1, [r3, #20]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	891a      	ldrh	r2, [r3, #8]
 80091d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f006 fb37 	bl	800f848 <USB_WritePMA>
 80091da:	e1e2      	b.n	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	3306      	adds	r3, #6
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009204:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009210:	429a      	cmp	r2, r3
 8009212:	d307      	bcc.n	8009224 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800921c:	1ad2      	subs	r2, r2, r3
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	619a      	str	r2, [r3, #24]
 8009222:	e002      	b.n	800922a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2200      	movs	r2, #0
 8009228:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 80c0 	bne.w	80093b4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d126      	bne.n	800928a <HAL_PCD_EP_DB_Transmit+0x482>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009250:	4413      	add	r3, r2
 8009252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	011a      	lsls	r2, r3, #4
 800925a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800925c:	4413      	add	r3, r2
 800925e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009262:	67bb      	str	r3, [r7, #120]	; 0x78
 8009264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800926e:	b29a      	uxth	r2, r3
 8009270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800927e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009282:	b29a      	uxth	r2, r3
 8009284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e01a      	b.n	80092c0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d116      	bne.n	80092c0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	667b      	str	r3, [r7, #100]	; 0x64
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a6:	4413      	add	r3, r2
 80092a8:	667b      	str	r3, [r7, #100]	; 0x64
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	011a      	lsls	r2, r3, #4
 80092b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b2:	4413      	add	r3, r2
 80092b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092b8:	663b      	str	r3, [r7, #96]	; 0x60
 80092ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092bc:	2200      	movs	r2, #0
 80092be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	677b      	str	r3, [r7, #116]	; 0x74
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d12b      	bne.n	8009326 <HAL_PCD_EP_DB_Transmit+0x51e>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092dc:	b29b      	uxth	r3, r3
 80092de:	461a      	mov	r2, r3
 80092e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e2:	4413      	add	r3, r2
 80092e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	011a      	lsls	r2, r3, #4
 80092ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ee:	4413      	add	r3, r2
 80092f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009304:	b29a      	uxth	r2, r3
 8009306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	b29b      	uxth	r3, r3
 8009314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800931c:	b29a      	uxth	r2, r3
 800931e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009322:	801a      	strh	r2, [r3, #0]
 8009324:	e017      	b.n	8009356 <HAL_PCD_EP_DB_Transmit+0x54e>
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d113      	bne.n	8009356 <HAL_PCD_EP_DB_Transmit+0x54e>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800933c:	4413      	add	r3, r2
 800933e:	677b      	str	r3, [r7, #116]	; 0x74
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	011a      	lsls	r2, r3, #4
 8009346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009348:	4413      	add	r3, r2
 800934a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800934e:	673b      	str	r3, [r7, #112]	; 0x70
 8009350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009352:	2200      	movs	r2, #0
 8009354:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	4619      	mov	r1, r3
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f009 ff8c 	bl	801327a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009362:	88fb      	ldrh	r3, [r7, #6]
 8009364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 811a 	bne.w	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009388:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	461a      	mov	r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	441a      	add	r2, r3
 800939a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800939e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	8013      	strh	r3, [r2, #0]
 80093b2:	e0f6      	b.n	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d121      	bne.n	8009402 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	441a      	add	r2, r3
 80093ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80093ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009408:	2b01      	cmp	r3, #1
 800940a:	f040 80ca 	bne.w	80095a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009416:	441a      	add	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009424:	441a      	add	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6a1a      	ldr	r2, [r3, #32]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	429a      	cmp	r2, r3
 8009434:	d30b      	bcc.n	800944e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	621a      	str	r2, [r3, #32]
 800944c:	e017      	b.n	800947e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d108      	bne.n	8009468 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8009456:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800945a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009466:	e00a      	b.n	800947e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	657b      	str	r3, [r7, #84]	; 0x54
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d165      	bne.n	8009558 <HAL_PCD_EP_DB_Transmit+0x750>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800949a:	b29b      	uxth	r3, r3
 800949c:	461a      	mov	r2, r3
 800949e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094a0:	4413      	add	r3, r2
 80094a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	011a      	lsls	r2, r3, #4
 80094aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094ac:	4413      	add	r3, r2
 80094ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80094b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094be:	b29a      	uxth	r2, r3
 80094c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094c2:	801a      	strh	r2, [r3, #0]
 80094c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094c8:	2b3e      	cmp	r3, #62	; 0x3e
 80094ca:	d91d      	bls.n	8009508 <HAL_PCD_EP_DB_Transmit+0x700>
 80094cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80094d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094d8:	f003 031f 	and.w	r3, r3, #31
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80094e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094e2:	3b01      	subs	r3, #1
 80094e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80094e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	029b      	lsls	r3, r3, #10
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009500:	b29a      	uxth	r2, r3
 8009502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009504:	801a      	strh	r2, [r3, #0]
 8009506:	e041      	b.n	800958c <HAL_PCD_EP_DB_Transmit+0x784>
 8009508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <HAL_PCD_EP_DB_Transmit+0x71e>
 8009510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800951a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951e:	b29a      	uxth	r2, r3
 8009520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009522:	801a      	strh	r2, [r3, #0]
 8009524:	e032      	b.n	800958c <HAL_PCD_EP_DB_Transmit+0x784>
 8009526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800952a:	085b      	lsrs	r3, r3, #1
 800952c:	66bb      	str	r3, [r7, #104]	; 0x68
 800952e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_PCD_EP_DB_Transmit+0x738>
 800953a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800953c:	3301      	adds	r3, #1
 800953e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29a      	uxth	r2, r3
 8009546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009548:	b29b      	uxth	r3, r3
 800954a:	029b      	lsls	r3, r3, #10
 800954c:	b29b      	uxth	r3, r3
 800954e:	4313      	orrs	r3, r2
 8009550:	b29a      	uxth	r2, r3
 8009552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009554:	801a      	strh	r2, [r3, #0]
 8009556:	e019      	b.n	800958c <HAL_PCD_EP_DB_Transmit+0x784>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d115      	bne.n	800958c <HAL_PCD_EP_DB_Transmit+0x784>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009568:	b29b      	uxth	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800956e:	4413      	add	r3, r2
 8009570:	657b      	str	r3, [r7, #84]	; 0x54
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	011a      	lsls	r2, r3, #4
 8009578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800957a:	4413      	add	r3, r2
 800957c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009580:	653b      	str	r3, [r7, #80]	; 0x50
 8009582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009586:	b29a      	uxth	r2, r3
 8009588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800958a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	6959      	ldr	r1, [r3, #20]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	895a      	ldrh	r2, [r3, #10]
 8009598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800959c:	b29b      	uxth	r3, r3
 800959e:	f006 f953 	bl	800f848 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095bc:	82bb      	strh	r3, [r7, #20]
 80095be:	8abb      	ldrh	r3, [r7, #20]
 80095c0:	f083 0310 	eor.w	r3, r3, #16
 80095c4:	82bb      	strh	r3, [r7, #20]
 80095c6:	8abb      	ldrh	r3, [r7, #20]
 80095c8:	f083 0320 	eor.w	r3, r3, #32
 80095cc:	82bb      	strh	r3, [r7, #20]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	441a      	add	r2, r3
 80095dc:	8abb      	ldrh	r3, [r7, #20]
 80095de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3790      	adds	r7, #144	; 0x90
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	607b      	str	r3, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	817b      	strh	r3, [r7, #10]
 800960a:	4613      	mov	r3, r2
 800960c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800960e:	897b      	ldrh	r3, [r7, #10]
 8009610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00b      	beq.n	8009632 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800961a:	897b      	ldrh	r3, [r7, #10]
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e009      	b.n	8009646 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009632:	897a      	ldrh	r2, [r7, #10]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009646:	893b      	ldrh	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d107      	bne.n	800965c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2200      	movs	r2, #0
 8009650:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	b29a      	uxth	r2, r3
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	80da      	strh	r2, [r3, #6]
 800965a:	e00b      	b.n	8009674 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2201      	movs	r2, #1
 8009660:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	b29a      	uxth	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	b29a      	uxth	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
	...

08009684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800968a:	af00      	add	r7, sp, #0
 800968c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009694:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800969a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f001 b823 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 817d 	beq.w	80099ba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80096c0:	4bbc      	ldr	r3, [pc, #752]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 030c 	and.w	r3, r3, #12
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d00c      	beq.n	80096e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80096cc:	4bb9      	ldr	r3, [pc, #740]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f003 030c 	and.w	r3, r3, #12
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d15c      	bne.n	8009792 <HAL_RCC_OscConfig+0x10e>
 80096d8:	4bb6      	ldr	r3, [pc, #728]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e4:	d155      	bne.n	8009792 <HAL_RCC_OscConfig+0x10e>
 80096e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80096f2:	fa93 f3a3 	rbit	r3, r3
 80096f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80096fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096fe:	fab3 f383 	clz	r3, r3
 8009702:	b2db      	uxtb	r3, r3
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b01      	cmp	r3, #1
 8009710:	d102      	bne.n	8009718 <HAL_RCC_OscConfig+0x94>
 8009712:	4ba8      	ldr	r3, [pc, #672]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	e015      	b.n	8009744 <HAL_RCC_OscConfig+0xc0>
 8009718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800971c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009720:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8009724:	fa93 f3a3 	rbit	r3, r3
 8009728:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800972c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009730:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8009734:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8009738:	fa93 f3a3 	rbit	r3, r3
 800973c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8009740:	4b9c      	ldr	r3, [pc, #624]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009748:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800974c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8009750:	fa92 f2a2 	rbit	r2, r2
 8009754:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8009758:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800975c:	fab2 f282 	clz	r2, r2
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	f042 0220 	orr.w	r2, r2, #32
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	f002 021f 	and.w	r2, r2, #31
 800976c:	2101      	movs	r1, #1
 800976e:	fa01 f202 	lsl.w	r2, r1, r2
 8009772:	4013      	ands	r3, r2
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 811f 	beq.w	80099b8 <HAL_RCC_OscConfig+0x334>
 800977a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800977e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f040 8116 	bne.w	80099b8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	f000 bfaf 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097a2:	d106      	bne.n	80097b2 <HAL_RCC_OscConfig+0x12e>
 80097a4:	4b83      	ldr	r3, [pc, #524]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a82      	ldr	r2, [pc, #520]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e036      	b.n	8009820 <HAL_RCC_OscConfig+0x19c>
 80097b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10c      	bne.n	80097dc <HAL_RCC_OscConfig+0x158>
 80097c2:	4b7c      	ldr	r3, [pc, #496]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a7b      	ldr	r2, [pc, #492]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	4b79      	ldr	r3, [pc, #484]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a78      	ldr	r2, [pc, #480]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	e021      	b.n	8009820 <HAL_RCC_OscConfig+0x19c>
 80097dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097ec:	d10c      	bne.n	8009808 <HAL_RCC_OscConfig+0x184>
 80097ee:	4b71      	ldr	r3, [pc, #452]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a70      	ldr	r2, [pc, #448]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	4b6e      	ldr	r3, [pc, #440]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a6d      	ldr	r2, [pc, #436]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	e00b      	b.n	8009820 <HAL_RCC_OscConfig+0x19c>
 8009808:	4b6a      	ldr	r3, [pc, #424]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a69      	ldr	r2, [pc, #420]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 800980e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	4b67      	ldr	r3, [pc, #412]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a66      	ldr	r2, [pc, #408]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 800981a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800981e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009820:	4b64      	ldr	r3, [pc, #400]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	f023 020f 	bic.w	r2, r3, #15
 8009828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800982c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	495f      	ldr	r1, [pc, #380]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009836:	4313      	orrs	r3, r2
 8009838:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800983a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800983e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d059      	beq.n	80098fe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800984a:	f7fb fa6b 	bl	8004d24 <HAL_GetTick>
 800984e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009852:	e00a      	b.n	800986a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009854:	f7fb fa66 	bl	8004d24 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	2b64      	cmp	r3, #100	; 0x64
 8009862:	d902      	bls.n	800986a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	f000 bf43 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800986a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800986e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009872:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8009876:	fa93 f3a3 	rbit	r3, r3
 800987a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800987e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009882:	fab3 f383 	clz	r3, r3
 8009886:	b2db      	uxtb	r3, r3
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f043 0301 	orr.w	r3, r3, #1
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b01      	cmp	r3, #1
 8009894:	d102      	bne.n	800989c <HAL_RCC_OscConfig+0x218>
 8009896:	4b47      	ldr	r3, [pc, #284]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	e015      	b.n	80098c8 <HAL_RCC_OscConfig+0x244>
 800989c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80098a8:	fa93 f3a3 	rbit	r3, r3
 80098ac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80098b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80098b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80098bc:	fa93 f3a3 	rbit	r3, r3
 80098c0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80098c4:	4b3b      	ldr	r3, [pc, #236]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80098cc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80098d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80098d4:	fa92 f2a2 	rbit	r2, r2
 80098d8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80098dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80098e0:	fab2 f282 	clz	r2, r2
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	f042 0220 	orr.w	r2, r2, #32
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	f002 021f 	and.w	r2, r2, #31
 80098f0:	2101      	movs	r1, #1
 80098f2:	fa01 f202 	lsl.w	r2, r1, r2
 80098f6:	4013      	ands	r3, r2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0ab      	beq.n	8009854 <HAL_RCC_OscConfig+0x1d0>
 80098fc:	e05d      	b.n	80099ba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098fe:	f7fb fa11 	bl	8004d24 <HAL_GetTick>
 8009902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009906:	e00a      	b.n	800991e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009908:	f7fb fa0c 	bl	8004d24 <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b64      	cmp	r3, #100	; 0x64
 8009916:	d902      	bls.n	800991e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	f000 bee9 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800991e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009922:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009926:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800992a:	fa93 f3a3 	rbit	r3, r3
 800992e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8009932:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009936:	fab3 f383 	clz	r3, r3
 800993a:	b2db      	uxtb	r3, r3
 800993c:	095b      	lsrs	r3, r3, #5
 800993e:	b2db      	uxtb	r3, r3
 8009940:	f043 0301 	orr.w	r3, r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b01      	cmp	r3, #1
 8009948:	d102      	bne.n	8009950 <HAL_RCC_OscConfig+0x2cc>
 800994a:	4b1a      	ldr	r3, [pc, #104]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	e015      	b.n	800997c <HAL_RCC_OscConfig+0x2f8>
 8009950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009954:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009958:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800995c:	fa93 f3a3 	rbit	r3, r3
 8009960:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009968:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800996c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009970:	fa93 f3a3 	rbit	r3, r3
 8009974:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009978:	4b0e      	ldr	r3, [pc, #56]	; (80099b4 <HAL_RCC_OscConfig+0x330>)
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009980:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8009984:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009988:	fa92 f2a2 	rbit	r2, r2
 800998c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8009990:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009994:	fab2 f282 	clz	r2, r2
 8009998:	b2d2      	uxtb	r2, r2
 800999a:	f042 0220 	orr.w	r2, r2, #32
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	f002 021f 	and.w	r2, r2, #31
 80099a4:	2101      	movs	r1, #1
 80099a6:	fa01 f202 	lsl.w	r2, r1, r2
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1ab      	bne.n	8009908 <HAL_RCC_OscConfig+0x284>
 80099b0:	e003      	b.n	80099ba <HAL_RCC_OscConfig+0x336>
 80099b2:	bf00      	nop
 80099b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 817d 	beq.w	8009cca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80099d0:	4ba6      	ldr	r3, [pc, #664]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f003 030c 	and.w	r3, r3, #12
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80099dc:	4ba3      	ldr	r3, [pc, #652]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f003 030c 	and.w	r3, r3, #12
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d172      	bne.n	8009ace <HAL_RCC_OscConfig+0x44a>
 80099e8:	4ba0      	ldr	r3, [pc, #640]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d16c      	bne.n	8009ace <HAL_RCC_OscConfig+0x44a>
 80099f4:	2302      	movs	r3, #2
 80099f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80099fe:	fa93 f3a3 	rbit	r3, r3
 8009a02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8009a06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a0a:	fab3 f383 	clz	r3, r3
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	095b      	lsrs	r3, r3, #5
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f043 0301 	orr.w	r3, r3, #1
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d102      	bne.n	8009a24 <HAL_RCC_OscConfig+0x3a0>
 8009a1e:	4b93      	ldr	r3, [pc, #588]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	e013      	b.n	8009a4c <HAL_RCC_OscConfig+0x3c8>
 8009a24:	2302      	movs	r3, #2
 8009a26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8009a2e:	fa93 f3a3 	rbit	r3, r3
 8009a32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009a36:	2302      	movs	r3, #2
 8009a38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009a3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009a40:	fa93 f3a3 	rbit	r3, r3
 8009a44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009a48:	4b88      	ldr	r3, [pc, #544]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8009a52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009a56:	fa92 f2a2 	rbit	r2, r2
 8009a5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8009a5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009a62:	fab2 f282 	clz	r2, r2
 8009a66:	b2d2      	uxtb	r2, r2
 8009a68:	f042 0220 	orr.w	r2, r2, #32
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	f002 021f 	and.w	r2, r2, #31
 8009a72:	2101      	movs	r1, #1
 8009a74:	fa01 f202 	lsl.w	r2, r1, r2
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00a      	beq.n	8009a94 <HAL_RCC_OscConfig+0x410>
 8009a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d002      	beq.n	8009a94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f000 be2e 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a94:	4b75      	ldr	r3, [pc, #468]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	21f8      	movs	r1, #248	; 0xf8
 8009aaa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8009ab2:	fa91 f1a1 	rbit	r1, r1
 8009ab6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8009aba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8009abe:	fab1 f181 	clz	r1, r1
 8009ac2:	b2c9      	uxtb	r1, r1
 8009ac4:	408b      	lsls	r3, r1
 8009ac6:	4969      	ldr	r1, [pc, #420]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009acc:	e0fd      	b.n	8009cca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 8088 	beq.w	8009bf0 <HAL_RCC_OscConfig+0x56c>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009aea:	fa93 f3a3 	rbit	r3, r3
 8009aee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8009af2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009af6:	fab3 f383 	clz	r3, r3
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	461a      	mov	r2, r3
 8009b08:	2301      	movs	r3, #1
 8009b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b0c:	f7fb f90a 	bl	8004d24 <HAL_GetTick>
 8009b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b14:	e00a      	b.n	8009b2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b16:	f7fb f905 	bl	8004d24 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d902      	bls.n	8009b2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	f000 bde2 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8009b36:	fa93 f3a3 	rbit	r3, r3
 8009b3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8009b3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b42:	fab3 f383 	clz	r3, r3
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	095b      	lsrs	r3, r3, #5
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f043 0301 	orr.w	r3, r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d102      	bne.n	8009b5c <HAL_RCC_OscConfig+0x4d8>
 8009b56:	4b45      	ldr	r3, [pc, #276]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	e013      	b.n	8009b84 <HAL_RCC_OscConfig+0x500>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009b66:	fa93 f3a3 	rbit	r3, r3
 8009b6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009b6e:	2302      	movs	r3, #2
 8009b70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009b74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b78:	fa93 f3a3 	rbit	r3, r3
 8009b7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009b80:	4b3a      	ldr	r3, [pc, #232]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2202      	movs	r2, #2
 8009b86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8009b8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009b8e:	fa92 f2a2 	rbit	r2, r2
 8009b92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8009b96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009b9a:	fab2 f282 	clz	r2, r2
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	f042 0220 	orr.w	r2, r2, #32
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	f002 021f 	and.w	r2, r2, #31
 8009baa:	2101      	movs	r1, #1
 8009bac:	fa01 f202 	lsl.w	r2, r1, r2
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0af      	beq.n	8009b16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bb6:	4b2d      	ldr	r3, [pc, #180]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	21f8      	movs	r1, #248	; 0xf8
 8009bcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009bd4:	fa91 f1a1 	rbit	r1, r1
 8009bd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009bdc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009be0:	fab1 f181 	clz	r1, r1
 8009be4:	b2c9      	uxtb	r1, r1
 8009be6:	408b      	lsls	r3, r1
 8009be8:	4920      	ldr	r1, [pc, #128]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	600b      	str	r3, [r1, #0]
 8009bee:	e06c      	b.n	8009cca <HAL_RCC_OscConfig+0x646>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bf6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bfa:	fa93 f3a3 	rbit	r3, r3
 8009bfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8009c02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c06:	fab3 f383 	clz	r3, r3
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	461a      	mov	r2, r3
 8009c18:	2300      	movs	r3, #0
 8009c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c1c:	f7fb f882 	bl	8004d24 <HAL_GetTick>
 8009c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c24:	e00a      	b.n	8009c3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c26:	f7fb f87d 	bl	8004d24 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d902      	bls.n	8009c3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	f000 bd5a 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c46:	fa93 f3a3 	rbit	r3, r3
 8009c4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8009c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c52:	fab3 f383 	clz	r3, r3
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d104      	bne.n	8009c70 <HAL_RCC_OscConfig+0x5ec>
 8009c66:	4b01      	ldr	r3, [pc, #4]	; (8009c6c <HAL_RCC_OscConfig+0x5e8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	e015      	b.n	8009c98 <HAL_RCC_OscConfig+0x614>
 8009c6c:	40021000 	.word	0x40021000
 8009c70:	2302      	movs	r3, #2
 8009c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c7a:	fa93 f3a3 	rbit	r3, r3
 8009c7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009c82:	2302      	movs	r3, #2
 8009c84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009c88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009c8c:	fa93 f3a3 	rbit	r3, r3
 8009c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009c94:	4bc8      	ldr	r3, [pc, #800]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009c9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009ca2:	fa92 f2a2 	rbit	r2, r2
 8009ca6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009caa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009cae:	fab2 f282 	clz	r2, r2
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	f042 0220 	orr.w	r2, r2, #32
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	f002 021f 	and.w	r2, r2, #31
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1ad      	bne.n	8009c26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8110 	beq.w	8009f00 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d079      	beq.n	8009de4 <HAL_RCC_OscConfig+0x760>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009cfa:	fa93 f3a3 	rbit	r3, r3
 8009cfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8009d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d06:	fab3 f383 	clz	r3, r3
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4bab      	ldr	r3, [pc, #684]	; (8009fbc <HAL_RCC_OscConfig+0x938>)
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	461a      	mov	r2, r3
 8009d16:	2301      	movs	r3, #1
 8009d18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d1a:	f7fb f803 	bl	8004d24 <HAL_GetTick>
 8009d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d22:	e00a      	b.n	8009d3a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d24:	f7fa fffe 	bl	8004d24 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d902      	bls.n	8009d3a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	f000 bcdb 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d44:	fa93 f3a3 	rbit	r3, r3
 8009d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009d54:	2202      	movs	r2, #2
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	fa93 f2a3 	rbit	r2, r3
 8009d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d78:	2202      	movs	r2, #2
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	fa93 f2a3 	rbit	r2, r3
 8009d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009d92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d94:	4b88      	ldr	r3, [pc, #544]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009da0:	2102      	movs	r1, #2
 8009da2:	6019      	str	r1, [r3, #0]
 8009da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009da8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	fa93 f1a3 	rbit	r1, r3
 8009db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009dba:	6019      	str	r1, [r3, #0]
  return result;
 8009dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	fab3 f383 	clz	r3, r3
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	4013      	ands	r3, r2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0a0      	beq.n	8009d24 <HAL_RCC_OscConfig+0x6a0>
 8009de2:	e08d      	b.n	8009f00 <HAL_RCC_OscConfig+0x87c>
 8009de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009de8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009dec:	2201      	movs	r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009df4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	fa93 f2a3 	rbit	r2, r3
 8009dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009e06:	601a      	str	r2, [r3, #0]
  return result;
 8009e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009e10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e12:	fab3 f383 	clz	r3, r3
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4b68      	ldr	r3, [pc, #416]	; (8009fbc <HAL_RCC_OscConfig+0x938>)
 8009e1c:	4413      	add	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	461a      	mov	r2, r3
 8009e22:	2300      	movs	r3, #0
 8009e24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e26:	f7fa ff7d 	bl	8004d24 <HAL_GetTick>
 8009e2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e2e:	e00a      	b.n	8009e46 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e30:	f7fa ff78 	bl	8004d24 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d902      	bls.n	8009e46 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	f000 bc55 	b.w	800a6f0 <HAL_RCC_OscConfig+0x106c>
 8009e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009e4e:	2202      	movs	r2, #2
 8009e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	fa93 f2a3 	rbit	r2, r3
 8009e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009e72:	2202      	movs	r2, #2
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	fa93 f2a3 	rbit	r2, r3
 8009e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e96:	2202      	movs	r2, #2
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	fa93 f2a3 	rbit	r2, r3
 8009ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009eb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb2:	4b41      	ldr	r3, [pc, #260]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009ebe:	2102      	movs	r1, #2
 8009ec0:	6019      	str	r1, [r3, #0]
 8009ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ec6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	fa93 f1a3 	rbit	r1, r3
 8009ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ed4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009ed8:	6019      	str	r1, [r3, #0]
  return result;
 8009eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ede:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	fab3 f383 	clz	r3, r3
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	f003 031f 	and.w	r3, r3, #31
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d197      	bne.n	8009e30 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 81a1 	beq.w	800a258 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f16:	2300      	movs	r3, #0
 8009f18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f1c:	4b26      	ldr	r3, [pc, #152]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d116      	bne.n	8009f56 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f28:	4b23      	ldr	r3, [pc, #140]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	4a22      	ldr	r2, [pc, #136]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f32:	61d3      	str	r3, [r2, #28]
 8009f34:	4b20      	ldr	r3, [pc, #128]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f40:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f4a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009f4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009f50:	2301      	movs	r3, #1
 8009f52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f56:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <HAL_RCC_OscConfig+0x93c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d11a      	bne.n	8009f98 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f62:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <HAL_RCC_OscConfig+0x93c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a16      	ldr	r2, [pc, #88]	; (8009fc0 <HAL_RCC_OscConfig+0x93c>)
 8009f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f6e:	f7fa fed9 	bl	8004d24 <HAL_GetTick>
 8009f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f76:	e009      	b.n	8009f8c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f78:	f7fa fed4 	bl	8004d24 <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b64      	cmp	r3, #100	; 0x64
 8009f86:	d901      	bls.n	8009f8c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e3b1      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f8c:	4b0c      	ldr	r3, [pc, #48]	; (8009fc0 <HAL_RCC_OscConfig+0x93c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0ef      	beq.n	8009f78 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d10d      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x940>
 8009fa8:	4b03      	ldr	r3, [pc, #12]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	4a02      	ldr	r2, [pc, #8]	; (8009fb8 <HAL_RCC_OscConfig+0x934>)
 8009fae:	f043 0301 	orr.w	r3, r3, #1
 8009fb2:	6213      	str	r3, [r2, #32]
 8009fb4:	e03c      	b.n	800a030 <HAL_RCC_OscConfig+0x9ac>
 8009fb6:	bf00      	nop
 8009fb8:	40021000 	.word	0x40021000
 8009fbc:	10908120 	.word	0x10908120
 8009fc0:	40007000 	.word	0x40007000
 8009fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10c      	bne.n	8009fee <HAL_RCC_OscConfig+0x96a>
 8009fd4:	4bc1      	ldr	r3, [pc, #772]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	4ac0      	ldr	r2, [pc, #768]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 8009fda:	f023 0301 	bic.w	r3, r3, #1
 8009fde:	6213      	str	r3, [r2, #32]
 8009fe0:	4bbe      	ldr	r3, [pc, #760]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	4abd      	ldr	r2, [pc, #756]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 8009fe6:	f023 0304 	bic.w	r3, r3, #4
 8009fea:	6213      	str	r3, [r2, #32]
 8009fec:	e020      	b.n	800a030 <HAL_RCC_OscConfig+0x9ac>
 8009fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	d10c      	bne.n	800a018 <HAL_RCC_OscConfig+0x994>
 8009ffe:	4bb7      	ldr	r3, [pc, #732]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	4ab6      	ldr	r2, [pc, #728]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a004:	f043 0304 	orr.w	r3, r3, #4
 800a008:	6213      	str	r3, [r2, #32]
 800a00a:	4bb4      	ldr	r3, [pc, #720]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	4ab3      	ldr	r2, [pc, #716]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	6213      	str	r3, [r2, #32]
 800a016:	e00b      	b.n	800a030 <HAL_RCC_OscConfig+0x9ac>
 800a018:	4bb0      	ldr	r3, [pc, #704]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	4aaf      	ldr	r2, [pc, #700]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a01e:	f023 0301 	bic.w	r3, r3, #1
 800a022:	6213      	str	r3, [r2, #32]
 800a024:	4bad      	ldr	r3, [pc, #692]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	4aac      	ldr	r2, [pc, #688]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a02a:	f023 0304 	bic.w	r3, r3, #4
 800a02e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 8081 	beq.w	800a144 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a042:	f7fa fe6f 	bl	8004d24 <HAL_GetTick>
 800a046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a04a:	e00b      	b.n	800a064 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a04c:	f7fa fe6a 	bl	8004d24 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d901      	bls.n	800a064 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e345      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800a064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a068:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a06c:	2202      	movs	r2, #2
 800a06e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a074:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	fa93 f2a3 	rbit	r2, r3
 800a07e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a082:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a08c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a090:	2202      	movs	r2, #2
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a098:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	fa93 f2a3 	rbit	r2, r3
 800a0a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a0aa:	601a      	str	r2, [r3, #0]
  return result;
 800a0ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a0b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0b6:	fab3 f383 	clz	r3, r3
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	095b      	lsrs	r3, r3, #5
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f043 0302 	orr.w	r3, r3, #2
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d102      	bne.n	800a0d0 <HAL_RCC_OscConfig+0xa4c>
 800a0ca:	4b84      	ldr	r3, [pc, #528]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	e013      	b.n	800a0f8 <HAL_RCC_OscConfig+0xa74>
 800a0d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800a0d8:	2202      	movs	r2, #2
 800a0da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	fa93 f2a3 	rbit	r2, r3
 800a0ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	4b79      	ldr	r3, [pc, #484]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a0fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800a100:	2102      	movs	r1, #2
 800a102:	6011      	str	r1, [r2, #0]
 800a104:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a108:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	fa92 f1a2 	rbit	r1, r2
 800a112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a116:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800a11a:	6011      	str	r1, [r2, #0]
  return result;
 800a11c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a120:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	fab2 f282 	clz	r2, r2
 800a12a:	b2d2      	uxtb	r2, r2
 800a12c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	f002 021f 	and.w	r2, r2, #31
 800a136:	2101      	movs	r1, #1
 800a138:	fa01 f202 	lsl.w	r2, r1, r2
 800a13c:	4013      	ands	r3, r2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d084      	beq.n	800a04c <HAL_RCC_OscConfig+0x9c8>
 800a142:	e07f      	b.n	800a244 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a144:	f7fa fdee 	bl	8004d24 <HAL_GetTick>
 800a148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a14c:	e00b      	b.n	800a166 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a14e:	f7fa fde9 	bl	8004d24 <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15e:	4293      	cmp	r3, r2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e2c4      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800a166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a16a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800a16e:	2202      	movs	r2, #2
 800a170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a176:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	fa93 f2a3 	rbit	r2, r3
 800a180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a184:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a18e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800a192:	2202      	movs	r2, #2
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a19a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	fa93 f2a3 	rbit	r2, r3
 800a1a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800a1ac:	601a      	str	r2, [r3, #0]
  return result;
 800a1ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800a1b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1b8:	fab3 f383 	clz	r3, r3
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f043 0302 	orr.w	r3, r3, #2
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d102      	bne.n	800a1d2 <HAL_RCC_OscConfig+0xb4e>
 800a1cc:	4b43      	ldr	r3, [pc, #268]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	e013      	b.n	800a1fa <HAL_RCC_OscConfig+0xb76>
 800a1d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a1da:	2202      	movs	r2, #2
 800a1dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	fa93 f2a3 	rbit	r2, r3
 800a1ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	4b39      	ldr	r3, [pc, #228]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a1fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800a202:	2102      	movs	r1, #2
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a20a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	fa92 f1a2 	rbit	r1, r2
 800a214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a218:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800a21c:	6011      	str	r1, [r2, #0]
  return result;
 800a21e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a222:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	fab2 f282 	clz	r2, r2
 800a22c:	b2d2      	uxtb	r2, r2
 800a22e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a232:	b2d2      	uxtb	r2, r2
 800a234:	f002 021f 	and.w	r2, r2, #31
 800a238:	2101      	movs	r1, #1
 800a23a:	fa01 f202 	lsl.w	r2, r1, r2
 800a23e:	4013      	ands	r3, r2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d184      	bne.n	800a14e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a244:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d105      	bne.n	800a258 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a24c:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	4a22      	ldr	r2, [pc, #136]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a256:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a25c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8242 	beq.w	800a6ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a26a:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <HAL_RCC_OscConfig+0xc58>)
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f003 030c 	and.w	r3, r3, #12
 800a272:	2b08      	cmp	r3, #8
 800a274:	f000 8213 	beq.w	800a69e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a27c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	2b02      	cmp	r3, #2
 800a286:	f040 8162 	bne.w	800a54e <HAL_RCC_OscConfig+0xeca>
 800a28a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a28e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800a292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a29c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	fa93 f2a3 	rbit	r2, r3
 800a2a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a2ae:	601a      	str	r2, [r3, #0]
  return result;
 800a2b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a2b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2ba:	fab3 f383 	clz	r3, r3
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a2c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2d0:	f7fa fd28 	bl	8004d24 <HAL_GetTick>
 800a2d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a2d8:	e00c      	b.n	800a2f4 <HAL_RCC_OscConfig+0xc70>
 800a2da:	bf00      	nop
 800a2dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2e0:	f7fa fd20 	bl	8004d24 <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d901      	bls.n	800a2f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e1fd      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800a2f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a2fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a306:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	fa93 f2a3 	rbit	r2, r3
 800a310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a314:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800a318:	601a      	str	r2, [r3, #0]
  return result;
 800a31a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a31e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800a322:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a324:	fab3 f383 	clz	r3, r3
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f043 0301 	orr.w	r3, r3, #1
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b01      	cmp	r3, #1
 800a336:	d102      	bne.n	800a33e <HAL_RCC_OscConfig+0xcba>
 800a338:	4bb0      	ldr	r3, [pc, #704]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	e027      	b.n	800a38e <HAL_RCC_OscConfig+0xd0a>
 800a33e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a342:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800a346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a34a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a34c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a350:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	fa93 f2a3 	rbit	r2, r3
 800a35a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a35e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a368:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a36c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a376:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	fa93 f2a3 	rbit	r2, r3
 800a380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a384:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	4b9c      	ldr	r3, [pc, #624]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a392:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800a396:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a39a:	6011      	str	r1, [r2, #0]
 800a39c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a3a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	fa92 f1a2 	rbit	r1, r2
 800a3aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a3ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800a3b2:	6011      	str	r1, [r2, #0]
  return result;
 800a3b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a3b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	fab2 f282 	clz	r2, r2
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	f042 0220 	orr.w	r2, r2, #32
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	f002 021f 	and.w	r2, r2, #31
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	fa01 f202 	lsl.w	r2, r1, r2
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d182      	bne.n	800a2e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3da:	4b88      	ldr	r3, [pc, #544]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a3e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a3e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a3ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a3f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	497f      	ldr	r1, [pc, #508]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	604b      	str	r3, [r1, #4]
 800a402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a406:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800a40a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a40e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a414:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	fa93 f2a3 	rbit	r2, r3
 800a41e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a422:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a426:	601a      	str	r2, [r3, #0]
  return result;
 800a428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a42c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a430:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a432:	fab3 f383 	clz	r3, r3
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a43c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	461a      	mov	r2, r3
 800a444:	2301      	movs	r3, #1
 800a446:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a448:	f7fa fc6c 	bl	8004d24 <HAL_GetTick>
 800a44c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a450:	e009      	b.n	800a466 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a452:	f7fa fc67 	bl	8004d24 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d901      	bls.n	800a466 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e144      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800a466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a46a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a46e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a478:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	fa93 f2a3 	rbit	r2, r3
 800a482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a486:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a48a:	601a      	str	r2, [r3, #0]
  return result;
 800a48c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a490:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a494:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a496:	fab3 f383 	clz	r3, r3
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	095b      	lsrs	r3, r3, #5
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d102      	bne.n	800a4b0 <HAL_RCC_OscConfig+0xe2c>
 800a4aa:	4b54      	ldr	r3, [pc, #336]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	e027      	b.n	800a500 <HAL_RCC_OscConfig+0xe7c>
 800a4b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a4b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a4bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	fa93 f2a3 	rbit	r2, r3
 800a4cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a4de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	fa93 f2a3 	rbit	r2, r3
 800a4f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	4b3f      	ldr	r3, [pc, #252]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a504:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800a508:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a512:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800a516:	6812      	ldr	r2, [r2, #0]
 800a518:	fa92 f1a2 	rbit	r1, r2
 800a51c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a520:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800a524:	6011      	str	r1, [r2, #0]
  return result;
 800a526:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a52a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800a52e:	6812      	ldr	r2, [r2, #0]
 800a530:	fab2 f282 	clz	r2, r2
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	f042 0220 	orr.w	r2, r2, #32
 800a53a:	b2d2      	uxtb	r2, r2
 800a53c:	f002 021f 	and.w	r2, r2, #31
 800a540:	2101      	movs	r1, #1
 800a542:	fa01 f202 	lsl.w	r2, r1, r2
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d082      	beq.n	800a452 <HAL_RCC_OscConfig+0xdce>
 800a54c:	e0cf      	b.n	800a6ee <HAL_RCC_OscConfig+0x106a>
 800a54e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a552:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a55a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a55c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a560:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	fa93 f2a3 	rbit	r2, r3
 800a56a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a56e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a572:	601a      	str	r2, [r3, #0]
  return result;
 800a574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a578:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a57c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a57e:	fab3 f383 	clz	r3, r3
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a588:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	461a      	mov	r2, r3
 800a590:	2300      	movs	r3, #0
 800a592:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a594:	f7fa fbc6 	bl	8004d24 <HAL_GetTick>
 800a598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a59c:	e009      	b.n	800a5b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a59e:	f7fa fbc1 	bl	8004d24 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e09e      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
 800a5b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a5b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a5ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a5be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a5c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	fa93 f2a3 	rbit	r2, r3
 800a5ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a5d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a5d6:	601a      	str	r2, [r3, #0]
  return result;
 800a5d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a5dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a5e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5e2:	fab3 f383 	clz	r3, r3
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	095b      	lsrs	r3, r3, #5
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f043 0301 	orr.w	r3, r3, #1
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d104      	bne.n	800a600 <HAL_RCC_OscConfig+0xf7c>
 800a5f6:	4b01      	ldr	r3, [pc, #4]	; (800a5fc <HAL_RCC_OscConfig+0xf78>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	e029      	b.n	800a650 <HAL_RCC_OscConfig+0xfcc>
 800a5fc:	40021000 	.word	0x40021000
 800a600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a604:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a60c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a60e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a612:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	fa93 f2a3 	rbit	r2, r3
 800a61c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a620:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a62a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a62e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a638:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	fa93 f2a3 	rbit	r2, r3
 800a642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a646:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	4b2b      	ldr	r3, [pc, #172]	; (800a6fc <HAL_RCC_OscConfig+0x1078>)
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a654:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a658:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a65c:	6011      	str	r1, [r2, #0]
 800a65e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a662:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	fa92 f1a2 	rbit	r1, r2
 800a66c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a670:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a674:	6011      	str	r1, [r2, #0]
  return result;
 800a676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a67a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	fab2 f282 	clz	r2, r2
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	f042 0220 	orr.w	r2, r2, #32
 800a68a:	b2d2      	uxtb	r2, r2
 800a68c:	f002 021f 	and.w	r2, r2, #31
 800a690:	2101      	movs	r1, #1
 800a692:	fa01 f202 	lsl.w	r2, r1, r2
 800a696:	4013      	ands	r3, r2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d180      	bne.n	800a59e <HAL_RCC_OscConfig+0xf1a>
 800a69c:	e027      	b.n	800a6ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a69e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a6a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e01e      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a6b2:	4b12      	ldr	r3, [pc, #72]	; (800a6fc <HAL_RCC_OscConfig+0x1078>)
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a6ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a6be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a6c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a6c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d10b      	bne.n	800a6ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a6d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a6d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a6da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a6de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d001      	beq.n	800a6ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	40021000 	.word	0x40021000

0800a700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b09e      	sub	sp, #120	; 0x78
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e162      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a718:	4b90      	ldr	r3, [pc, #576]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d910      	bls.n	800a748 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a726:	4b8d      	ldr	r3, [pc, #564]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f023 0207 	bic.w	r2, r3, #7
 800a72e:	498b      	ldr	r1, [pc, #556]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	4313      	orrs	r3, r2
 800a734:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a736:	4b89      	ldr	r3, [pc, #548]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d001      	beq.n	800a748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e14a      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d008      	beq.n	800a766 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a754:	4b82      	ldr	r3, [pc, #520]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	497f      	ldr	r1, [pc, #508]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a762:	4313      	orrs	r3, r2
 800a764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 80dc 	beq.w	800a92c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d13c      	bne.n	800a7f6 <HAL_RCC_ClockConfig+0xf6>
 800a77c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a780:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a784:	fa93 f3a3 	rbit	r3, r3
 800a788:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800a78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a78c:	fab3 f383 	clz	r3, r3
 800a790:	b2db      	uxtb	r3, r3
 800a792:	095b      	lsrs	r3, r3, #5
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d102      	bne.n	800a7a6 <HAL_RCC_ClockConfig+0xa6>
 800a7a0:	4b6f      	ldr	r3, [pc, #444]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	e00f      	b.n	800a7c6 <HAL_RCC_ClockConfig+0xc6>
 800a7a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7ae:	fa93 f3a3 	rbit	r3, r3
 800a7b2:	667b      	str	r3, [r7, #100]	; 0x64
 800a7b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a7ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7bc:	fa93 f3a3 	rbit	r3, r3
 800a7c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7c2:	4b67      	ldr	r3, [pc, #412]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a7ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800a7cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7ce:	fa92 f2a2 	rbit	r2, r2
 800a7d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a7d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7d6:	fab2 f282 	clz	r2, r2
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	f042 0220 	orr.w	r2, r2, #32
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	f002 021f 	and.w	r2, r2, #31
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	fa01 f202 	lsl.w	r2, r1, r2
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d17b      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e0f3      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d13c      	bne.n	800a878 <HAL_RCC_ClockConfig+0x178>
 800a7fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a802:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a806:	fa93 f3a3 	rbit	r3, r3
 800a80a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a80e:	fab3 f383 	clz	r3, r3
 800a812:	b2db      	uxtb	r3, r3
 800a814:	095b      	lsrs	r3, r3, #5
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f043 0301 	orr.w	r3, r3, #1
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d102      	bne.n	800a828 <HAL_RCC_ClockConfig+0x128>
 800a822:	4b4f      	ldr	r3, [pc, #316]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	e00f      	b.n	800a848 <HAL_RCC_ClockConfig+0x148>
 800a828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a82c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a830:	fa93 f3a3 	rbit	r3, r3
 800a834:	647b      	str	r3, [r7, #68]	; 0x44
 800a836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a83a:	643b      	str	r3, [r7, #64]	; 0x40
 800a83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a83e:	fa93 f3a3 	rbit	r3, r3
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a844:	4b46      	ldr	r3, [pc, #280]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a84c:	63ba      	str	r2, [r7, #56]	; 0x38
 800a84e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a850:	fa92 f2a2 	rbit	r2, r2
 800a854:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a858:	fab2 f282 	clz	r2, r2
 800a85c:	b2d2      	uxtb	r2, r2
 800a85e:	f042 0220 	orr.w	r2, r2, #32
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	f002 021f 	and.w	r2, r2, #31
 800a868:	2101      	movs	r1, #1
 800a86a:	fa01 f202 	lsl.w	r2, r1, r2
 800a86e:	4013      	ands	r3, r2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d13a      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e0b2      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
 800a878:	2302      	movs	r3, #2
 800a87a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	fa93 f3a3 	rbit	r3, r3
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a886:	fab3 f383 	clz	r3, r3
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	095b      	lsrs	r3, r3, #5
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f043 0301 	orr.w	r3, r3, #1
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b01      	cmp	r3, #1
 800a898:	d102      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x1a0>
 800a89a:	4b31      	ldr	r3, [pc, #196]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	e00d      	b.n	800a8bc <HAL_RCC_ClockConfig+0x1bc>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	fa93 f3a3 	rbit	r3, r3
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	623b      	str	r3, [r7, #32]
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	fa93 f3a3 	rbit	r3, r3
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	4b29      	ldr	r3, [pc, #164]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2202      	movs	r2, #2
 800a8be:	61ba      	str	r2, [r7, #24]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	fa92 f2a2 	rbit	r2, r2
 800a8c6:	617a      	str	r2, [r7, #20]
  return result;
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	fab2 f282 	clz	r2, r2
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	f042 0220 	orr.w	r2, r2, #32
 800a8d4:	b2d2      	uxtb	r2, r2
 800a8d6:	f002 021f 	and.w	r2, r2, #31
 800a8da:	2101      	movs	r1, #1
 800a8dc:	fa01 f202 	lsl.w	r2, r1, r2
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e079      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a8ea:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f023 0203 	bic.w	r2, r3, #3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	491a      	ldr	r1, [pc, #104]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a8fc:	f7fa fa12 	bl	8004d24 <HAL_GetTick>
 800a900:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a902:	e00a      	b.n	800a91a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a904:	f7fa fa0e 	bl	8004d24 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a912:	4293      	cmp	r3, r2
 800a914:	d901      	bls.n	800a91a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e061      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a91a:	4b11      	ldr	r3, [pc, #68]	; (800a960 <HAL_RCC_ClockConfig+0x260>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f003 020c 	and.w	r2, r3, #12
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	429a      	cmp	r2, r3
 800a92a:	d1eb      	bne.n	800a904 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a92c:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0307 	and.w	r3, r3, #7
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d214      	bcs.n	800a964 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a93a:	4b08      	ldr	r3, [pc, #32]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f023 0207 	bic.w	r2, r3, #7
 800a942:	4906      	ldr	r1, [pc, #24]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	4313      	orrs	r3, r2
 800a948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a94a:	4b04      	ldr	r3, [pc, #16]	; (800a95c <HAL_RCC_ClockConfig+0x25c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0307 	and.w	r3, r3, #7
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d005      	beq.n	800a964 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e040      	b.n	800a9de <HAL_RCC_ClockConfig+0x2de>
 800a95c:	40022000 	.word	0x40022000
 800a960:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d008      	beq.n	800a982 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a970:	4b1d      	ldr	r3, [pc, #116]	; (800a9e8 <HAL_RCC_ClockConfig+0x2e8>)
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	491a      	ldr	r1, [pc, #104]	; (800a9e8 <HAL_RCC_ClockConfig+0x2e8>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0308 	and.w	r3, r3, #8
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a98e:	4b16      	ldr	r3, [pc, #88]	; (800a9e8 <HAL_RCC_ClockConfig+0x2e8>)
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4912      	ldr	r1, [pc, #72]	; (800a9e8 <HAL_RCC_ClockConfig+0x2e8>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a9a2:	f000 f829 	bl	800a9f8 <HAL_RCC_GetSysClockFreq>
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	4b0f      	ldr	r3, [pc, #60]	; (800a9e8 <HAL_RCC_ClockConfig+0x2e8>)
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9b0:	22f0      	movs	r2, #240	; 0xf0
 800a9b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	fa92 f2a2 	rbit	r2, r2
 800a9ba:	60fa      	str	r2, [r7, #12]
  return result;
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	fab2 f282 	clz	r2, r2
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	40d3      	lsrs	r3, r2
 800a9c6:	4a09      	ldr	r2, [pc, #36]	; (800a9ec <HAL_RCC_ClockConfig+0x2ec>)
 800a9c8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ca:	fa21 f303 	lsr.w	r3, r1, r3
 800a9ce:	4a08      	ldr	r2, [pc, #32]	; (800a9f0 <HAL_RCC_ClockConfig+0x2f0>)
 800a9d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <HAL_RCC_ClockConfig+0x2f4>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fa f960 	bl	8004c9c <HAL_InitTick>
  
  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3778      	adds	r7, #120	; 0x78
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40021000 	.word	0x40021000
 800a9ec:	08017744 	.word	0x08017744
 800a9f0:	20000160 	.word	0x20000160
 800a9f4:	20000174 	.word	0x20000174

0800a9f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b08b      	sub	sp, #44	; 0x2c
 800a9fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	2300      	movs	r3, #0
 800aa04:	61bb      	str	r3, [r7, #24]
 800aa06:	2300      	movs	r3, #0
 800aa08:	627b      	str	r3, [r7, #36]	; 0x24
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800aa12:	4b29      	ldr	r3, [pc, #164]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	f003 030c 	and.w	r3, r3, #12
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d002      	beq.n	800aa28 <HAL_RCC_GetSysClockFreq+0x30>
 800aa22:	2b08      	cmp	r3, #8
 800aa24:	d003      	beq.n	800aa2e <HAL_RCC_GetSysClockFreq+0x36>
 800aa26:	e03c      	b.n	800aaa2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aa28:	4b24      	ldr	r3, [pc, #144]	; (800aabc <HAL_RCC_GetSysClockFreq+0xc4>)
 800aa2a:	623b      	str	r3, [r7, #32]
      break;
 800aa2c:	e03c      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800aa34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800aa38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	fa92 f2a2 	rbit	r2, r2
 800aa40:	607a      	str	r2, [r7, #4]
  return result;
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	fab2 f282 	clz	r2, r2
 800aa48:	b2d2      	uxtb	r2, r2
 800aa4a:	40d3      	lsrs	r3, r2
 800aa4c:	4a1c      	ldr	r2, [pc, #112]	; (800aac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800aa4e:	5cd3      	ldrb	r3, [r2, r3]
 800aa50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800aa52:	4b19      	ldr	r3, [pc, #100]	; (800aab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	f003 030f 	and.w	r3, r3, #15
 800aa5a:	220f      	movs	r2, #15
 800aa5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	fa92 f2a2 	rbit	r2, r2
 800aa64:	60fa      	str	r2, [r7, #12]
  return result;
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	fab2 f282 	clz	r2, r2
 800aa6c:	b2d2      	uxtb	r2, r2
 800aa6e:	40d3      	lsrs	r3, r2
 800aa70:	4a14      	ldr	r2, [pc, #80]	; (800aac4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800aa72:	5cd3      	ldrb	r3, [r2, r3]
 800aa74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d008      	beq.n	800aa92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800aa80:	4a0e      	ldr	r2, [pc, #56]	; (800aabc <HAL_RCC_GetSysClockFreq+0xc4>)
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	fb02 f303 	mul.w	r3, r2, r3
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa90:	e004      	b.n	800aa9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	4a0c      	ldr	r2, [pc, #48]	; (800aac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
 800aa9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	623b      	str	r3, [r7, #32]
      break;
 800aaa0:	e002      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aaa2:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <HAL_RCC_GetSysClockFreq+0xd4>)
 800aaa4:	623b      	str	r3, [r7, #32]
      break;
 800aaa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	372c      	adds	r7, #44	; 0x2c
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	40021000 	.word	0x40021000
 800aabc:	01e84800 	.word	0x01e84800
 800aac0:	080177a0 	.word	0x080177a0
 800aac4:	080177b0 	.word	0x080177b0
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	007a1200 	.word	0x007a1200

0800aad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b092      	sub	sp, #72	; 0x48
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aad8:	2300      	movs	r3, #0
 800aada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800aae0:	2300      	movs	r3, #0
 800aae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 80d4 	beq.w	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaf4:	4b4e      	ldr	r3, [pc, #312]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aaf6:	69db      	ldr	r3, [r3, #28]
 800aaf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10e      	bne.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab00:	4b4b      	ldr	r3, [pc, #300]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	4a4a      	ldr	r2, [pc, #296]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab0a:	61d3      	str	r3, [r2, #28]
 800ab0c:	4b48      	ldr	r3, [pc, #288]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab14:	60bb      	str	r3, [r7, #8]
 800ab16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab1e:	4b45      	ldr	r3, [pc, #276]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d118      	bne.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab2a:	4b42      	ldr	r3, [pc, #264]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a41      	ldr	r2, [pc, #260]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab36:	f7fa f8f5 	bl	8004d24 <HAL_GetTick>
 800ab3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab3c:	e008      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab3e:	f7fa f8f1 	bl	8004d24 <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	2b64      	cmp	r3, #100	; 0x64
 800ab4a:	d901      	bls.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e169      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab50:	4b38      	ldr	r3, [pc, #224]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0f0      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab5c:	4b34      	ldr	r3, [pc, #208]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8084 	beq.w	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d07c      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab7c:	4b2c      	ldr	r3, [pc, #176]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	fa93 f3a3 	rbit	r3, r3
 800ab92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab96:	fab3 f383 	clz	r3, r3
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4b26      	ldr	r3, [pc, #152]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	461a      	mov	r2, r3
 800aba6:	2301      	movs	r3, #1
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800abae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb2:	fa93 f3a3 	rbit	r3, r3
 800abb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800abba:	fab3 f383 	clz	r3, r3
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	461a      	mov	r2, r3
 800abc2:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	461a      	mov	r2, r3
 800abca:	2300      	movs	r3, #0
 800abcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800abce:	4a18      	ldr	r2, [pc, #96]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800abd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d04b      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abde:	f7fa f8a1 	bl	8004d24 <HAL_GetTick>
 800abe2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abe4:	e00a      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abe6:	f7fa f89d 	bl	8004d24 <HAL_GetTick>
 800abea:	4602      	mov	r2, r0
 800abec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d901      	bls.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e113      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800abfc:	2302      	movs	r3, #2
 800abfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	fa93 f3a3 	rbit	r3, r3
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24
 800ac08:	2302      	movs	r3, #2
 800ac0a:	623b      	str	r3, [r7, #32]
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	fa93 f3a3 	rbit	r3, r3
 800ac12:	61fb      	str	r3, [r7, #28]
  return result;
 800ac14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac16:	fab3 f383 	clz	r3, r3
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	095b      	lsrs	r3, r3, #5
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d108      	bne.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800ac2a:	4b01      	ldr	r3, [pc, #4]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	e00d      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800ac30:	40021000 	.word	0x40021000
 800ac34:	40007000 	.word	0x40007000
 800ac38:	10908100 	.word	0x10908100
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	fa93 f3a3 	rbit	r3, r3
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	4b78      	ldr	r3, [pc, #480]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	613a      	str	r2, [r7, #16]
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	fa92 f2a2 	rbit	r2, r2
 800ac56:	60fa      	str	r2, [r7, #12]
  return result;
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	fab2 f282 	clz	r2, r2
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac64:	b2d2      	uxtb	r2, r2
 800ac66:	f002 021f 	and.w	r2, r2, #31
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	fa01 f202 	lsl.w	r2, r1, r2
 800ac70:	4013      	ands	r3, r2
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0b7      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800ac76:	4b6d      	ldr	r3, [pc, #436]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	496a      	ldr	r1, [pc, #424]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ac88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d105      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac90:	4b66      	ldr	r3, [pc, #408]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	4a65      	ldr	r2, [pc, #404]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d008      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aca8:	4b60      	ldr	r3, [pc, #384]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	f023 0203 	bic.w	r2, r3, #3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	495d      	ldr	r1, [pc, #372]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d008      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800acc6:	4b59      	ldr	r3, [pc, #356]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	4956      	ldr	r1, [pc, #344]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d008      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ace4:	4b51      	ldr	r3, [pc, #324]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ace6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	494e      	ldr	r1, [pc, #312]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acf2:	4313      	orrs	r3, r2
 800acf4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0320 	and.w	r3, r3, #32
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d008      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad02:	4b4a      	ldr	r3, [pc, #296]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad06:	f023 0210 	bic.w	r2, r3, #16
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	4947      	ldr	r1, [pc, #284]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d008      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800ad20:	4b42      	ldr	r3, [pc, #264]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	493f      	ldr	r1, [pc, #252]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d008      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad3e:	4b3b      	ldr	r3, [pc, #236]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f023 0220 	bic.w	r2, r3, #32
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	4938      	ldr	r1, [pc, #224]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0308 	and.w	r3, r3, #8
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d008      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad5c:	4b33      	ldr	r3, [pc, #204]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	4930      	ldr	r1, [pc, #192]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0310 	and.w	r3, r3, #16
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d008      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad7a:	4b2c      	ldr	r3, [pc, #176]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	4929      	ldr	r1, [pc, #164]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d008      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ad98:	4b24      	ldr	r3, [pc, #144]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	4921      	ldr	r1, [pc, #132]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d008      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800adb6:	4b1d      	ldr	r3, [pc, #116]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800adb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	491a      	ldr	r1, [pc, #104]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add0:	2b00      	cmp	r3, #0
 800add2:	d008      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800add4:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	4912      	ldr	r1, [pc, #72]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d008      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800adf2:	4b0e      	ldr	r3, [pc, #56]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800adf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfe:	490b      	ldr	r1, [pc, #44]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ae00:	4313      	orrs	r3, r2
 800ae02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d008      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800ae10:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ae12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1c:	4903      	ldr	r1, [pc, #12]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3748      	adds	r7, #72	; 0x48
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	40021000 	.word	0x40021000

0800ae30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e09d      	b.n	800af7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d108      	bne.n	800ae5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae52:	d009      	beq.n	800ae68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	61da      	str	r2, [r3, #28]
 800ae5a:	e005      	b.n	800ae68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7f8 fff4 	bl	8003e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aea8:	d902      	bls.n	800aeb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	e002      	b.n	800aeb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aeb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aeb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aebe:	d007      	beq.n	800aed0 <HAL_SPI_Init+0xa0>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aec8:	d002      	beq.n	800aed0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aee0:	431a      	orrs	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	431a      	orrs	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aefe:	431a      	orrs	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af08:	431a      	orrs	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af12:	ea42 0103 	orr.w	r1, r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	0c1b      	lsrs	r3, r3, #16
 800af2c:	f003 0204 	and.w	r2, r3, #4
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	f003 0310 	and.w	r3, r3, #16
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	f003 0308 	and.w	r3, r3, #8
 800af42:	431a      	orrs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800af4c:	ea42 0103 	orr.w	r1, r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69da      	ldr	r2, [r3, #28]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b088      	sub	sp, #32
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	603b      	str	r3, [r7, #0]
 800af92:	4613      	mov	r3, r2
 800af94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d101      	bne.n	800afa8 <HAL_SPI_Transmit+0x22>
 800afa4:	2302      	movs	r3, #2
 800afa6:	e15f      	b.n	800b268 <HAL_SPI_Transmit+0x2e2>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afb0:	f7f9 feb8 	bl	8004d24 <HAL_GetTick>
 800afb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800afb6:	88fb      	ldrh	r3, [r7, #6]
 800afb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d002      	beq.n	800afcc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800afc6:	2302      	movs	r3, #2
 800afc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afca:	e148      	b.n	800b25e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <HAL_SPI_Transmit+0x52>
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afdc:	e13f      	b.n	800b25e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2203      	movs	r2, #3
 800afe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	88fa      	ldrh	r2, [r7, #6]
 800aff6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	88fa      	ldrh	r2, [r7, #6]
 800affc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b028:	d10f      	bne.n	800b04a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b054:	2b40      	cmp	r3, #64	; 0x40
 800b056:	d007      	beq.n	800b068 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b070:	d94f      	bls.n	800b112 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <HAL_SPI_Transmit+0xfa>
 800b07a:	8afb      	ldrh	r3, [r7, #22]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d142      	bne.n	800b106 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	881a      	ldrh	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b090:	1c9a      	adds	r2, r3, #2
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b0a4:	e02f      	b.n	800b106 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d112      	bne.n	800b0da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	881a      	ldrh	r2, [r3, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	1c9a      	adds	r2, r3, #2
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0d8:	e015      	b.n	800b106 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0da:	f7f9 fe23 	bl	8004d24 <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d803      	bhi.n	800b0f2 <HAL_SPI_Transmit+0x16c>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d102      	bne.n	800b0f8 <HAL_SPI_Transmit+0x172>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d106      	bne.n	800b106 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b104:	e0ab      	b.n	800b25e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1ca      	bne.n	800b0a6 <HAL_SPI_Transmit+0x120>
 800b110:	e080      	b.n	800b214 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <HAL_SPI_Transmit+0x19a>
 800b11a:	8afb      	ldrh	r3, [r7, #22]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d174      	bne.n	800b20a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b01      	cmp	r3, #1
 800b128:	d912      	bls.n	800b150 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12e:	881a      	ldrh	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	1c9a      	adds	r2, r3, #2
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b144:	b29b      	uxth	r3, r3
 800b146:	3b02      	subs	r3, #2
 800b148:	b29a      	uxth	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b14e:	e05c      	b.n	800b20a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	330c      	adds	r3, #12
 800b15a:	7812      	ldrb	r2, [r2, #0]
 800b15c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	3b01      	subs	r3, #1
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b176:	e048      	b.n	800b20a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b02      	cmp	r3, #2
 800b184:	d12b      	bne.n	800b1de <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d912      	bls.n	800b1b6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b194:	881a      	ldrh	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a0:	1c9a      	adds	r2, r3, #2
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	3b02      	subs	r3, #2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1b4:	e029      	b.n	800b20a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	330c      	adds	r3, #12
 800b1c0:	7812      	ldrb	r2, [r2, #0]
 800b1c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1dc:	e015      	b.n	800b20a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1de:	f7f9 fda1 	bl	8004d24 <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d803      	bhi.n	800b1f6 <HAL_SPI_Transmit+0x270>
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f4:	d102      	bne.n	800b1fc <HAL_SPI_Transmit+0x276>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b208:	e029      	b.n	800b25e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b20e:	b29b      	uxth	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1b1      	bne.n	800b178 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 fad7 	bl	800b7cc <SPI_EndRxTxTransaction>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2220      	movs	r2, #32
 800b228:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b232:	2300      	movs	r3, #0
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	613b      	str	r3, [r7, #16]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	613b      	str	r3, [r7, #16]
 800b246:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	77fb      	strb	r3, [r7, #31]
 800b254:	e003      	b.n	800b25e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b266:	7ffb      	ldrb	r3, [r7, #31]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4613      	mov	r3, r2
 800b27c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d101      	bne.n	800b290 <HAL_SPI_Transmit_DMA+0x20>
 800b28c:	2302      	movs	r3, #2
 800b28e:	e0d4      	b.n	800b43a <HAL_SPI_Transmit_DMA+0x1ca>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d002      	beq.n	800b2aa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b2a8:	e0c2      	b.n	800b430 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <HAL_SPI_Transmit_DMA+0x46>
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b2ba:	e0b9      	b.n	800b430 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2203      	movs	r2, #3
 800b2c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	88fa      	ldrh	r2, [r7, #6]
 800b2da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b306:	d10f      	bne.n	800b328 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b316:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b326:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32c:	4a45      	ldr	r2, [pc, #276]	; (800b444 <HAL_SPI_Transmit_DMA+0x1d4>)
 800b32e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b334:	4a44      	ldr	r2, [pc, #272]	; (800b448 <HAL_SPI_Transmit_DMA+0x1d8>)
 800b336:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33c:	4a43      	ldr	r2, [pc, #268]	; (800b44c <HAL_SPI_Transmit_DMA+0x1dc>)
 800b33e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b344:	2200      	movs	r2, #0
 800b346:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b356:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b360:	d82d      	bhi.n	800b3be <HAL_SPI_Transmit_DMA+0x14e>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b36c:	d127      	bne.n	800b3be <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b372:	b29b      	uxth	r3, r3
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10f      	bne.n	800b39c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b38a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b390:	b29b      	uxth	r3, r3
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b39a:	e010      	b.n	800b3be <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3aa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	085b      	lsrs	r3, r3, #1
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	330c      	adds	r3, #12
 800b3ce:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b3d6:	f7fb fe5a 	bl	800708e <HAL_DMA_Start_IT>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d008      	beq.n	800b3f2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3e4:	f043 0210 	orr.w	r2, r3, #16
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	75fb      	strb	r3, [r7, #23]

    goto error;
 800b3f0:	e01e      	b.n	800b430 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	d007      	beq.n	800b410 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b40e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f042 0220 	orr.w	r2, r2, #32
 800b41e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f042 0202 	orr.w	r2, r2, #2
 800b42e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	0800b533 	.word	0x0800b533
 800b448:	0800b48d 	.word	0x0800b48d
 800b44c:	0800b54f 	.word	0x0800b54f

0800b450 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b49a:	f7f9 fc43 	bl	8004d24 <HAL_GetTick>
 800b49e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0320 	and.w	r3, r3, #32
 800b4aa:	2b20      	cmp	r3, #32
 800b4ac:	d03b      	beq.n	800b526 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f022 0220 	bic.w	r2, r2, #32
 800b4bc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0202 	bic.w	r2, r2, #2
 800b4cc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	2164      	movs	r1, #100	; 0x64
 800b4d2:	6978      	ldr	r0, [r7, #20]
 800b4d4:	f000 f97a 	bl	800b7cc <SPI_EndRxTxTransaction>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d005      	beq.n	800b4ea <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4e2:	f043 0220 	orr.w	r2, r3, #32
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2200      	movs	r2, #0
 800b50c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f7ff ffaa 	bl	800b478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b524:	e002      	b.n	800b52c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b526:	6978      	ldr	r0, [r7, #20]
 800b528:	f7ff ff92 	bl	800b450 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f7ff ff8f 	bl	800b464 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f022 0203 	bic.w	r2, r2, #3
 800b56a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b570:	f043 0210 	orr.w	r2, r3, #16
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f7ff ff79 	bl	800b478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	4613      	mov	r3, r2
 800b59e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b5a0:	f7f9 fbc0 	bl	8004d24 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	1a9b      	subs	r3, r3, r2
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b5b0:	f7f9 fbb8 	bl	8004d24 <HAL_GetTick>
 800b5b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b5b6:	4b39      	ldr	r3, [pc, #228]	; (800b69c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	015b      	lsls	r3, r3, #5
 800b5bc:	0d1b      	lsrs	r3, r3, #20
 800b5be:	69fa      	ldr	r2, [r7, #28]
 800b5c0:	fb02 f303 	mul.w	r3, r2, r3
 800b5c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5c6:	e054      	b.n	800b672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	d050      	beq.n	800b672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b5d0:	f7f9 fba8 	bl	8004d24 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	69fa      	ldr	r2, [r7, #28]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d902      	bls.n	800b5e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d13d      	bne.n	800b662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b5f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5fe:	d111      	bne.n	800b624 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b608:	d004      	beq.n	800b614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b612:	d107      	bne.n	800b624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b62c:	d10f      	bne.n	800b64e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b64c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e017      	b.n	800b692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b668:	2300      	movs	r3, #0
 800b66a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	3b01      	subs	r3, #1
 800b670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	689a      	ldr	r2, [r3, #8]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	4013      	ands	r3, r2
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	429a      	cmp	r2, r3
 800b680:	bf0c      	ite	eq
 800b682:	2301      	moveq	r3, #1
 800b684:	2300      	movne	r3, #0
 800b686:	b2db      	uxtb	r3, r3
 800b688:	461a      	mov	r2, r3
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d19b      	bne.n	800b5c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3720      	adds	r7, #32
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	20000160 	.word	0x20000160

0800b6a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	; 0x28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b6b2:	f7f9 fb37 	bl	8004d24 <HAL_GetTick>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	4413      	add	r3, r2
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b6c2:	f7f9 fb2f 	bl	8004d24 <HAL_GetTick>
 800b6c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	330c      	adds	r3, #12
 800b6ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b6d0:	4b3d      	ldr	r3, [pc, #244]	; (800b7c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	00da      	lsls	r2, r3, #3
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	0d1b      	lsrs	r3, r3, #20
 800b6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
 800b6e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b6e8:	e060      	b.n	800b7ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b6f0:	d107      	bne.n	800b702 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d104      	bne.n	800b702 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b700:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b708:	d050      	beq.n	800b7ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b70a:	f7f9 fb0b 	bl	8004d24 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	429a      	cmp	r2, r3
 800b718:	d902      	bls.n	800b720 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d13d      	bne.n	800b79c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b72e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b738:	d111      	bne.n	800b75e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b742:	d004      	beq.n	800b74e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b74c:	d107      	bne.n	800b75e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b75c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b766:	d10f      	bne.n	800b788 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e010      	b.n	800b7be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	689a      	ldr	r2, [r3, #8]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d196      	bne.n	800b6ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3728      	adds	r7, #40	; 0x28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20000160 	.word	0x20000160

0800b7cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af02      	add	r7, sp, #8
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff ff5b 	bl	800b6a0 <SPI_WaitFifoStateUntilTimeout>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7f4:	f043 0220 	orr.w	r2, r3, #32
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e027      	b.n	800b850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2200      	movs	r2, #0
 800b808:	2180      	movs	r1, #128	; 0x80
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff fec0 	bl	800b590 <SPI_WaitFlagStateUntilTimeout>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d007      	beq.n	800b826 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b81a:	f043 0220 	orr.w	r2, r3, #32
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e014      	b.n	800b850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7ff ff34 	bl	800b6a0 <SPI_WaitFifoStateUntilTimeout>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d007      	beq.n	800b84e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b842:	f043 0220 	orr.w	r2, r3, #32
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	e000      	b.n	800b850 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e049      	b.n	800b8fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7f8 fb62 	bl	8003f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3304      	adds	r3, #4
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f000 fed8 	bl	800c64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b916:	b2db      	uxtb	r3, r3
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d001      	beq.n	800b920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e04a      	b.n	800b9b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a21      	ldr	r2, [pc, #132]	; (800b9c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d018      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0x6c>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94a:	d013      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0x6c>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a1d      	ldr	r2, [pc, #116]	; (800b9c8 <HAL_TIM_Base_Start_IT+0xc0>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00e      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0x6c>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a1c      	ldr	r2, [pc, #112]	; (800b9cc <HAL_TIM_Base_Start_IT+0xc4>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d009      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0x6c>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a1a      	ldr	r2, [pc, #104]	; (800b9d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d004      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0x6c>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a19      	ldr	r2, [pc, #100]	; (800b9d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d115      	bne.n	800b9a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	4b17      	ldr	r3, [pc, #92]	; (800b9d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b06      	cmp	r3, #6
 800b984:	d015      	beq.n	800b9b2 <HAL_TIM_Base_Start_IT+0xaa>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b98c:	d011      	beq.n	800b9b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f042 0201 	orr.w	r2, r2, #1
 800b99c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b99e:	e008      	b.n	800b9b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f042 0201 	orr.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	e000      	b.n	800b9b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	40012c00 	.word	0x40012c00
 800b9c8:	40000400 	.word	0x40000400
 800b9cc:	40000800 	.word	0x40000800
 800b9d0:	40013400 	.word	0x40013400
 800b9d4:	40014000 	.word	0x40014000
 800b9d8:	00010007 	.word	0x00010007

0800b9dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f022 0201 	bic.w	r2, r2, #1
 800b9f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6a1a      	ldr	r2, [r3, #32]
 800b9fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b9fe:	4013      	ands	r3, r2
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10f      	bne.n	800ba24 <HAL_TIM_Base_Stop_IT+0x48>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6a1a      	ldr	r2, [r3, #32]
 800ba0a:	f240 4344 	movw	r3, #1092	; 0x444
 800ba0e:	4013      	ands	r3, r2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d107      	bne.n	800ba24 <HAL_TIM_Base_Stop_IT+0x48>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f022 0201 	bic.w	r2, r2, #1
 800ba22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e049      	b.n	800bae0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d106      	bne.n	800ba66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7f8 fb27 	bl	80040b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2202      	movs	r2, #2
 800ba6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f000 fde7 	bl	800c64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d109      	bne.n	800bb10 <HAL_TIM_PWM_Start_IT+0x28>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	bf14      	ite	ne
 800bb08:	2301      	movne	r3, #1
 800bb0a:	2300      	moveq	r3, #0
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	e03c      	b.n	800bb8a <HAL_TIM_PWM_Start_IT+0xa2>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	d109      	bne.n	800bb2a <HAL_TIM_PWM_Start_IT+0x42>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	bf14      	ite	ne
 800bb22:	2301      	movne	r3, #1
 800bb24:	2300      	moveq	r3, #0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	e02f      	b.n	800bb8a <HAL_TIM_PWM_Start_IT+0xa2>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d109      	bne.n	800bb44 <HAL_TIM_PWM_Start_IT+0x5c>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	bf14      	ite	ne
 800bb3c:	2301      	movne	r3, #1
 800bb3e:	2300      	moveq	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	e022      	b.n	800bb8a <HAL_TIM_PWM_Start_IT+0xa2>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b0c      	cmp	r3, #12
 800bb48:	d109      	bne.n	800bb5e <HAL_TIM_PWM_Start_IT+0x76>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	bf14      	ite	ne
 800bb56:	2301      	movne	r3, #1
 800bb58:	2300      	moveq	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	e015      	b.n	800bb8a <HAL_TIM_PWM_Start_IT+0xa2>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b10      	cmp	r3, #16
 800bb62:	d109      	bne.n	800bb78 <HAL_TIM_PWM_Start_IT+0x90>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	bf14      	ite	ne
 800bb70:	2301      	movne	r3, #1
 800bb72:	2300      	moveq	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	e008      	b.n	800bb8a <HAL_TIM_PWM_Start_IT+0xa2>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	bf14      	ite	ne
 800bb84:	2301      	movne	r3, #1
 800bb86:	2300      	moveq	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e0e2      	b.n	800bd58 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d104      	bne.n	800bba2 <HAL_TIM_PWM_Start_IT+0xba>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bba0:	e023      	b.n	800bbea <HAL_TIM_PWM_Start_IT+0x102>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	d104      	bne.n	800bbb2 <HAL_TIM_PWM_Start_IT+0xca>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbb0:	e01b      	b.n	800bbea <HAL_TIM_PWM_Start_IT+0x102>
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	d104      	bne.n	800bbc2 <HAL_TIM_PWM_Start_IT+0xda>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbc0:	e013      	b.n	800bbea <HAL_TIM_PWM_Start_IT+0x102>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b0c      	cmp	r3, #12
 800bbc6:	d104      	bne.n	800bbd2 <HAL_TIM_PWM_Start_IT+0xea>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2202      	movs	r2, #2
 800bbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbd0:	e00b      	b.n	800bbea <HAL_TIM_PWM_Start_IT+0x102>
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b10      	cmp	r3, #16
 800bbd6:	d104      	bne.n	800bbe2 <HAL_TIM_PWM_Start_IT+0xfa>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbe0:	e003      	b.n	800bbea <HAL_TIM_PWM_Start_IT+0x102>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b0c      	cmp	r3, #12
 800bbee:	d841      	bhi.n	800bc74 <HAL_TIM_PWM_Start_IT+0x18c>
 800bbf0:	a201      	add	r2, pc, #4	; (adr r2, 800bbf8 <HAL_TIM_PWM_Start_IT+0x110>)
 800bbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf6:	bf00      	nop
 800bbf8:	0800bc2d 	.word	0x0800bc2d
 800bbfc:	0800bc75 	.word	0x0800bc75
 800bc00:	0800bc75 	.word	0x0800bc75
 800bc04:	0800bc75 	.word	0x0800bc75
 800bc08:	0800bc3f 	.word	0x0800bc3f
 800bc0c:	0800bc75 	.word	0x0800bc75
 800bc10:	0800bc75 	.word	0x0800bc75
 800bc14:	0800bc75 	.word	0x0800bc75
 800bc18:	0800bc51 	.word	0x0800bc51
 800bc1c:	0800bc75 	.word	0x0800bc75
 800bc20:	0800bc75 	.word	0x0800bc75
 800bc24:	0800bc75 	.word	0x0800bc75
 800bc28:	0800bc63 	.word	0x0800bc63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68da      	ldr	r2, [r3, #12]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f042 0202 	orr.w	r2, r2, #2
 800bc3a:	60da      	str	r2, [r3, #12]
      break;
 800bc3c:	e01d      	b.n	800bc7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f042 0204 	orr.w	r2, r2, #4
 800bc4c:	60da      	str	r2, [r3, #12]
      break;
 800bc4e:	e014      	b.n	800bc7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68da      	ldr	r2, [r3, #12]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f042 0208 	orr.w	r2, r2, #8
 800bc5e:	60da      	str	r2, [r3, #12]
      break;
 800bc60:	e00b      	b.n	800bc7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68da      	ldr	r2, [r3, #12]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f042 0210 	orr.w	r2, r2, #16
 800bc70:	60da      	str	r2, [r3, #12]
      break;
 800bc72:	e002      	b.n	800bc7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]
      break;
 800bc78:	bf00      	nop
  }

  if (status == HAL_OK)
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d16a      	bne.n	800bd56 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2201      	movs	r2, #1
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 f8df 	bl	800ce4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a33      	ldr	r2, [pc, #204]	; (800bd60 <HAL_TIM_PWM_Start_IT+0x278>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d013      	beq.n	800bcc0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a31      	ldr	r2, [pc, #196]	; (800bd64 <HAL_TIM_PWM_Start_IT+0x27c>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d00e      	beq.n	800bcc0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a30      	ldr	r2, [pc, #192]	; (800bd68 <HAL_TIM_PWM_Start_IT+0x280>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d009      	beq.n	800bcc0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a2e      	ldr	r2, [pc, #184]	; (800bd6c <HAL_TIM_PWM_Start_IT+0x284>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d004      	beq.n	800bcc0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a2d      	ldr	r2, [pc, #180]	; (800bd70 <HAL_TIM_PWM_Start_IT+0x288>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d101      	bne.n	800bcc4 <HAL_TIM_PWM_Start_IT+0x1dc>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e000      	b.n	800bcc6 <HAL_TIM_PWM_Start_IT+0x1de>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d007      	beq.n	800bcda <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a20      	ldr	r2, [pc, #128]	; (800bd60 <HAL_TIM_PWM_Start_IT+0x278>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d018      	beq.n	800bd16 <HAL_TIM_PWM_Start_IT+0x22e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcec:	d013      	beq.n	800bd16 <HAL_TIM_PWM_Start_IT+0x22e>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a20      	ldr	r2, [pc, #128]	; (800bd74 <HAL_TIM_PWM_Start_IT+0x28c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d00e      	beq.n	800bd16 <HAL_TIM_PWM_Start_IT+0x22e>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a1e      	ldr	r2, [pc, #120]	; (800bd78 <HAL_TIM_PWM_Start_IT+0x290>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d009      	beq.n	800bd16 <HAL_TIM_PWM_Start_IT+0x22e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a17      	ldr	r2, [pc, #92]	; (800bd64 <HAL_TIM_PWM_Start_IT+0x27c>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d004      	beq.n	800bd16 <HAL_TIM_PWM_Start_IT+0x22e>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a15      	ldr	r2, [pc, #84]	; (800bd68 <HAL_TIM_PWM_Start_IT+0x280>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d115      	bne.n	800bd42 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	689a      	ldr	r2, [r3, #8]
 800bd1c:	4b17      	ldr	r3, [pc, #92]	; (800bd7c <HAL_TIM_PWM_Start_IT+0x294>)
 800bd1e:	4013      	ands	r3, r2
 800bd20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b06      	cmp	r3, #6
 800bd26:	d015      	beq.n	800bd54 <HAL_TIM_PWM_Start_IT+0x26c>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd2e:	d011      	beq.n	800bd54 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f042 0201 	orr.w	r2, r2, #1
 800bd3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd40:	e008      	b.n	800bd54 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f042 0201 	orr.w	r2, r2, #1
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	e000      	b.n	800bd56 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd54:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	40012c00 	.word	0x40012c00
 800bd64:	40013400 	.word	0x40013400
 800bd68:	40014000 	.word	0x40014000
 800bd6c:	40014400 	.word	0x40014400
 800bd70:	40014800 	.word	0x40014800
 800bd74:	40000400 	.word	0x40000400
 800bd78:	40000800 	.word	0x40000800
 800bd7c:	00010007 	.word	0x00010007

0800bd80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e097      	b.n	800bec4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7f8 f91b 	bl	8003fe4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6812      	ldr	r2, [r2, #0]
 800bdc0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800bdc4:	f023 0307 	bic.w	r3, r3, #7
 800bdc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f000 fc39 	bl	800c64c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be02:	f023 0303 	bic.w	r3, r3, #3
 800be06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	021b      	lsls	r3, r3, #8
 800be12:	4313      	orrs	r3, r2
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4313      	orrs	r3, r2
 800be18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800be20:	f023 030c 	bic.w	r3, r3, #12
 800be24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	68da      	ldr	r2, [r3, #12]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	021b      	lsls	r3, r3, #8
 800be3c:	4313      	orrs	r3, r2
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	4313      	orrs	r3, r2
 800be42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	011a      	lsls	r2, r3, #4
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	031b      	lsls	r3, r3, #12
 800be50:	4313      	orrs	r3, r2
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4313      	orrs	r3, r2
 800be56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800be66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	011b      	lsls	r3, r3, #4
 800be72:	4313      	orrs	r3, r2
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	4313      	orrs	r3, r2
 800be78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3718      	adds	r7, #24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bedc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bee4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d110      	bne.n	800bf1e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800befc:	7bfb      	ldrb	r3, [r7, #15]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d102      	bne.n	800bf08 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf02:	7b7b      	ldrb	r3, [r7, #13]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d001      	beq.n	800bf0c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e089      	b.n	800c020 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf1c:	e031      	b.n	800bf82 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	d110      	bne.n	800bf46 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d102      	bne.n	800bf30 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf2a:	7b3b      	ldrb	r3, [r7, #12]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d001      	beq.n	800bf34 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e075      	b.n	800c020 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf44:	e01d      	b.n	800bf82 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d108      	bne.n	800bf5e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d105      	bne.n	800bf5e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf52:	7b7b      	ldrb	r3, [r7, #13]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d102      	bne.n	800bf5e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf58:	7b3b      	ldrb	r3, [r7, #12]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d001      	beq.n	800bf62 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e05e      	b.n	800c020 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2202      	movs	r2, #2
 800bf66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2202      	movs	r2, #2
 800bf76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <HAL_TIM_Encoder_Start_IT+0xc4>
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d010      	beq.n	800bfb0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800bf8e:	e01f      	b.n	800bfd0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2201      	movs	r2, #1
 800bf96:	2100      	movs	r1, #0
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 ff57 	bl	800ce4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f042 0202 	orr.w	r2, r2, #2
 800bfac:	60da      	str	r2, [r3, #12]
      break;
 800bfae:	e02e      	b.n	800c00e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	2104      	movs	r1, #4
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 ff47 	bl	800ce4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f042 0204 	orr.w	r2, r2, #4
 800bfcc:	60da      	str	r2, [r3, #12]
      break;
 800bfce:	e01e      	b.n	800c00e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 ff37 	bl	800ce4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	2104      	movs	r1, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 ff30 	bl	800ce4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f042 0202 	orr.w	r2, r2, #2
 800bffa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68da      	ldr	r2, [r3, #12]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0204 	orr.w	r2, r2, #4
 800c00a:	60da      	str	r2, [r3, #12]
      break;
 800c00c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f042 0201 	orr.w	r2, r2, #1
 800c01c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	f003 0302 	and.w	r3, r3, #2
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d122      	bne.n	800c084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d11b      	bne.n	800c084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f06f 0202 	mvn.w	r2, #2
 800c054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2201      	movs	r2, #1
 800c05a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7f5 fdde 	bl	8001c2c <HAL_TIM_IC_CaptureCallback>
 800c070:	e005      	b.n	800c07e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fad5 	bl	800c622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7f5 fdfb 	bl	8001c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	f003 0304 	and.w	r3, r3, #4
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d122      	bne.n	800c0d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d11b      	bne.n	800c0d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f06f 0204 	mvn.w	r2, #4
 800c0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7f5 fdb4 	bl	8001c2c <HAL_TIM_IC_CaptureCallback>
 800c0c4:	e005      	b.n	800c0d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 faab 	bl	800c622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7f5 fdd1 	bl	8001c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b08      	cmp	r3, #8
 800c0e4:	d122      	bne.n	800c12c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	f003 0308 	and.w	r3, r3, #8
 800c0f0:	2b08      	cmp	r3, #8
 800c0f2:	d11b      	bne.n	800c12c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f06f 0208 	mvn.w	r2, #8
 800c0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2204      	movs	r2, #4
 800c102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	f003 0303 	and.w	r3, r3, #3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7f5 fd8a 	bl	8001c2c <HAL_TIM_IC_CaptureCallback>
 800c118:	e005      	b.n	800c126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa81 	bl	800c622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7f5 fda7 	bl	8001c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f003 0310 	and.w	r3, r3, #16
 800c136:	2b10      	cmp	r3, #16
 800c138:	d122      	bne.n	800c180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f003 0310 	and.w	r3, r3, #16
 800c144:	2b10      	cmp	r3, #16
 800c146:	d11b      	bne.n	800c180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f06f 0210 	mvn.w	r2, #16
 800c150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2208      	movs	r2, #8
 800c156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7f5 fd60 	bl	8001c2c <HAL_TIM_IC_CaptureCallback>
 800c16c:	e005      	b.n	800c17a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fa57 	bl	800c622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7f5 fd7d 	bl	8001c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d10e      	bne.n	800c1ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d107      	bne.n	800c1ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f06f 0201 	mvn.w	r2, #1
 800c1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7f5 fd8c 	bl	8001cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b6:	2b80      	cmp	r3, #128	; 0x80
 800c1b8:	d10e      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c4:	2b80      	cmp	r3, #128	; 0x80
 800c1c6:	d107      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f001 f81c 	bl	800d210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1e6:	d10e      	bne.n	800c206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1f2:	2b80      	cmp	r3, #128	; 0x80
 800c1f4:	d107      	bne.n	800c206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 f80f 	bl	800d224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c210:	2b40      	cmp	r3, #64	; 0x40
 800c212:	d10e      	bne.n	800c232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c21e:	2b40      	cmp	r3, #64	; 0x40
 800c220:	d107      	bne.n	800c232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fa02 	bl	800c636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	f003 0320 	and.w	r3, r3, #32
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	d10e      	bne.n	800c25e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	f003 0320 	and.w	r3, r3, #32
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	d107      	bne.n	800c25e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f06f 0220 	mvn.w	r2, #32
 800c256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 ffcf 	bl	800d1fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c25e:	bf00      	nop
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d101      	bne.n	800c286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c282:	2302      	movs	r3, #2
 800c284:	e0ff      	b.n	800c486 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b14      	cmp	r3, #20
 800c292:	f200 80f0 	bhi.w	800c476 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2f1 	.word	0x0800c2f1
 800c2a0:	0800c477 	.word	0x0800c477
 800c2a4:	0800c477 	.word	0x0800c477
 800c2a8:	0800c477 	.word	0x0800c477
 800c2ac:	0800c331 	.word	0x0800c331
 800c2b0:	0800c477 	.word	0x0800c477
 800c2b4:	0800c477 	.word	0x0800c477
 800c2b8:	0800c477 	.word	0x0800c477
 800c2bc:	0800c373 	.word	0x0800c373
 800c2c0:	0800c477 	.word	0x0800c477
 800c2c4:	0800c477 	.word	0x0800c477
 800c2c8:	0800c477 	.word	0x0800c477
 800c2cc:	0800c3b3 	.word	0x0800c3b3
 800c2d0:	0800c477 	.word	0x0800c477
 800c2d4:	0800c477 	.word	0x0800c477
 800c2d8:	0800c477 	.word	0x0800c477
 800c2dc:	0800c3f5 	.word	0x0800c3f5
 800c2e0:	0800c477 	.word	0x0800c477
 800c2e4:	0800c477 	.word	0x0800c477
 800c2e8:	0800c477 	.word	0x0800c477
 800c2ec:	0800c435 	.word	0x0800c435
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68b9      	ldr	r1, [r7, #8]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 fa38 	bl	800c76c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	699a      	ldr	r2, [r3, #24]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0208 	orr.w	r2, r2, #8
 800c30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	699a      	ldr	r2, [r3, #24]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f022 0204 	bic.w	r2, r2, #4
 800c31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6999      	ldr	r1, [r3, #24]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	691a      	ldr	r2, [r3, #16]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	619a      	str	r2, [r3, #24]
      break;
 800c32e:	e0a5      	b.n	800c47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68b9      	ldr	r1, [r7, #8]
 800c336:	4618      	mov	r0, r3
 800c338:	f000 faa8 	bl	800c88c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	699a      	ldr	r2, [r3, #24]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c34a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	699a      	ldr	r2, [r3, #24]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c35a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6999      	ldr	r1, [r3, #24]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	021a      	lsls	r2, r3, #8
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	430a      	orrs	r2, r1
 800c36e:	619a      	str	r2, [r3, #24]
      break;
 800c370:	e084      	b.n	800c47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fb11 	bl	800c9a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69da      	ldr	r2, [r3, #28]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f042 0208 	orr.w	r2, r2, #8
 800c38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	69da      	ldr	r2, [r3, #28]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f022 0204 	bic.w	r2, r2, #4
 800c39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	69d9      	ldr	r1, [r3, #28]
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	61da      	str	r2, [r3, #28]
      break;
 800c3b0:	e064      	b.n	800c47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fb79 	bl	800cab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	69da      	ldr	r2, [r3, #28]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	69da      	ldr	r2, [r3, #28]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	69d9      	ldr	r1, [r3, #28]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	021a      	lsls	r2, r3, #8
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	430a      	orrs	r2, r1
 800c3f0:	61da      	str	r2, [r3, #28]
      break;
 800c3f2:	e043      	b.n	800c47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fbc2 	bl	800cb84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0208 	orr.w	r2, r2, #8
 800c40e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f022 0204 	bic.w	r2, r2, #4
 800c41e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	691a      	ldr	r2, [r3, #16]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	430a      	orrs	r2, r1
 800c430:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c432:	e023      	b.n	800c47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68b9      	ldr	r1, [r7, #8]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f000 fc06 	bl	800cc4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c44e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c45e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	021a      	lsls	r2, r3, #8
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c474:	e002      	b.n	800c47c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	75fb      	strb	r3, [r7, #23]
      break;
 800c47a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c484:	7dfb      	ldrb	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop

0800c490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d101      	bne.n	800c4ac <HAL_TIM_ConfigClockSource+0x1c>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e0b6      	b.n	800c61a <HAL_TIM_ConfigClockSource+0x18a>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c4ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4e8:	d03e      	beq.n	800c568 <HAL_TIM_ConfigClockSource+0xd8>
 800c4ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4ee:	f200 8087 	bhi.w	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4f6:	f000 8086 	beq.w	800c606 <HAL_TIM_ConfigClockSource+0x176>
 800c4fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4fe:	d87f      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c500:	2b70      	cmp	r3, #112	; 0x70
 800c502:	d01a      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0xaa>
 800c504:	2b70      	cmp	r3, #112	; 0x70
 800c506:	d87b      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c508:	2b60      	cmp	r3, #96	; 0x60
 800c50a:	d050      	beq.n	800c5ae <HAL_TIM_ConfigClockSource+0x11e>
 800c50c:	2b60      	cmp	r3, #96	; 0x60
 800c50e:	d877      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c510:	2b50      	cmp	r3, #80	; 0x50
 800c512:	d03c      	beq.n	800c58e <HAL_TIM_ConfigClockSource+0xfe>
 800c514:	2b50      	cmp	r3, #80	; 0x50
 800c516:	d873      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c518:	2b40      	cmp	r3, #64	; 0x40
 800c51a:	d058      	beq.n	800c5ce <HAL_TIM_ConfigClockSource+0x13e>
 800c51c:	2b40      	cmp	r3, #64	; 0x40
 800c51e:	d86f      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c520:	2b30      	cmp	r3, #48	; 0x30
 800c522:	d064      	beq.n	800c5ee <HAL_TIM_ConfigClockSource+0x15e>
 800c524:	2b30      	cmp	r3, #48	; 0x30
 800c526:	d86b      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c528:	2b20      	cmp	r3, #32
 800c52a:	d060      	beq.n	800c5ee <HAL_TIM_ConfigClockSource+0x15e>
 800c52c:	2b20      	cmp	r3, #32
 800c52e:	d867      	bhi.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
 800c530:	2b00      	cmp	r3, #0
 800c532:	d05c      	beq.n	800c5ee <HAL_TIM_ConfigClockSource+0x15e>
 800c534:	2b10      	cmp	r3, #16
 800c536:	d05a      	beq.n	800c5ee <HAL_TIM_ConfigClockSource+0x15e>
 800c538:	e062      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c54a:	f000 fc5f 	bl	800ce0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c55c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	609a      	str	r2, [r3, #8]
      break;
 800c566:	e04f      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c578:	f000 fc48 	bl	800ce0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689a      	ldr	r2, [r3, #8]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c58a:	609a      	str	r2, [r3, #8]
      break;
 800c58c:	e03c      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c59a:	461a      	mov	r2, r3
 800c59c:	f000 fbbc 	bl	800cd18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2150      	movs	r1, #80	; 0x50
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 fc15 	bl	800cdd6 <TIM_ITRx_SetConfig>
      break;
 800c5ac:	e02c      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f000 fbdb 	bl	800cd76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2160      	movs	r1, #96	; 0x60
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fc05 	bl	800cdd6 <TIM_ITRx_SetConfig>
      break;
 800c5cc:	e01c      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f000 fb9c 	bl	800cd18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2140      	movs	r1, #64	; 0x40
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 fbf5 	bl	800cdd6 <TIM_ITRx_SetConfig>
      break;
 800c5ec:	e00c      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f000 fbec 	bl	800cdd6 <TIM_ITRx_SetConfig>
      break;
 800c5fe:	e003      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	73fb      	strb	r3, [r7, #15]
      break;
 800c604:	e000      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c618:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c62a:	bf00      	nop
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
	...

0800c64c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a3c      	ldr	r2, [pc, #240]	; (800c750 <TIM_Base_SetConfig+0x104>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d00f      	beq.n	800c684 <TIM_Base_SetConfig+0x38>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66a:	d00b      	beq.n	800c684 <TIM_Base_SetConfig+0x38>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a39      	ldr	r2, [pc, #228]	; (800c754 <TIM_Base_SetConfig+0x108>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d007      	beq.n	800c684 <TIM_Base_SetConfig+0x38>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a38      	ldr	r2, [pc, #224]	; (800c758 <TIM_Base_SetConfig+0x10c>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d003      	beq.n	800c684 <TIM_Base_SetConfig+0x38>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a37      	ldr	r2, [pc, #220]	; (800c75c <TIM_Base_SetConfig+0x110>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d108      	bne.n	800c696 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	4313      	orrs	r3, r2
 800c694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a2d      	ldr	r2, [pc, #180]	; (800c750 <TIM_Base_SetConfig+0x104>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d01b      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6a4:	d017      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a2a      	ldr	r2, [pc, #168]	; (800c754 <TIM_Base_SetConfig+0x108>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d013      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a29      	ldr	r2, [pc, #164]	; (800c758 <TIM_Base_SetConfig+0x10c>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00f      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a28      	ldr	r2, [pc, #160]	; (800c75c <TIM_Base_SetConfig+0x110>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d00b      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a27      	ldr	r2, [pc, #156]	; (800c760 <TIM_Base_SetConfig+0x114>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d007      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a26      	ldr	r2, [pc, #152]	; (800c764 <TIM_Base_SetConfig+0x118>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d003      	beq.n	800c6d6 <TIM_Base_SetConfig+0x8a>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a25      	ldr	r2, [pc, #148]	; (800c768 <TIM_Base_SetConfig+0x11c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d108      	bne.n	800c6e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a10      	ldr	r2, [pc, #64]	; (800c750 <TIM_Base_SetConfig+0x104>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d00f      	beq.n	800c734 <TIM_Base_SetConfig+0xe8>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a11      	ldr	r2, [pc, #68]	; (800c75c <TIM_Base_SetConfig+0x110>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d00b      	beq.n	800c734 <TIM_Base_SetConfig+0xe8>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a10      	ldr	r2, [pc, #64]	; (800c760 <TIM_Base_SetConfig+0x114>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d007      	beq.n	800c734 <TIM_Base_SetConfig+0xe8>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a0f      	ldr	r2, [pc, #60]	; (800c764 <TIM_Base_SetConfig+0x118>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d003      	beq.n	800c734 <TIM_Base_SetConfig+0xe8>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a0e      	ldr	r2, [pc, #56]	; (800c768 <TIM_Base_SetConfig+0x11c>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d103      	bne.n	800c73c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	615a      	str	r2, [r3, #20]
}
 800c742:	bf00      	nop
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	40012c00 	.word	0x40012c00
 800c754:	40000400 	.word	0x40000400
 800c758:	40000800 	.word	0x40000800
 800c75c:	40013400 	.word	0x40013400
 800c760:	40014000 	.word	0x40014000
 800c764:	40014400 	.word	0x40014400
 800c768:	40014800 	.word	0x40014800

0800c76c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	f023 0201 	bic.w	r2, r3, #1
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0303 	bic.w	r3, r3, #3
 800c7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f023 0302 	bic.w	r3, r3, #2
 800c7b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a2c      	ldr	r2, [pc, #176]	; (800c878 <TIM_OC1_SetConfig+0x10c>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d00f      	beq.n	800c7ec <TIM_OC1_SetConfig+0x80>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a2b      	ldr	r2, [pc, #172]	; (800c87c <TIM_OC1_SetConfig+0x110>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d00b      	beq.n	800c7ec <TIM_OC1_SetConfig+0x80>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a2a      	ldr	r2, [pc, #168]	; (800c880 <TIM_OC1_SetConfig+0x114>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d007      	beq.n	800c7ec <TIM_OC1_SetConfig+0x80>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a29      	ldr	r2, [pc, #164]	; (800c884 <TIM_OC1_SetConfig+0x118>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d003      	beq.n	800c7ec <TIM_OC1_SetConfig+0x80>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4a28      	ldr	r2, [pc, #160]	; (800c888 <TIM_OC1_SetConfig+0x11c>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d10c      	bne.n	800c806 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f023 0308 	bic.w	r3, r3, #8
 800c7f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	f023 0304 	bic.w	r3, r3, #4
 800c804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a1b      	ldr	r2, [pc, #108]	; (800c878 <TIM_OC1_SetConfig+0x10c>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d00f      	beq.n	800c82e <TIM_OC1_SetConfig+0xc2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a1a      	ldr	r2, [pc, #104]	; (800c87c <TIM_OC1_SetConfig+0x110>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d00b      	beq.n	800c82e <TIM_OC1_SetConfig+0xc2>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a19      	ldr	r2, [pc, #100]	; (800c880 <TIM_OC1_SetConfig+0x114>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d007      	beq.n	800c82e <TIM_OC1_SetConfig+0xc2>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a18      	ldr	r2, [pc, #96]	; (800c884 <TIM_OC1_SetConfig+0x118>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d003      	beq.n	800c82e <TIM_OC1_SetConfig+0xc2>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a17      	ldr	r2, [pc, #92]	; (800c888 <TIM_OC1_SetConfig+0x11c>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d111      	bne.n	800c852 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c83c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	4313      	orrs	r3, r2
 800c846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	4313      	orrs	r3, r2
 800c850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	697a      	ldr	r2, [r7, #20]
 800c86a:	621a      	str	r2, [r3, #32]
}
 800c86c:	bf00      	nop
 800c86e:	371c      	adds	r7, #28
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	40012c00 	.word	0x40012c00
 800c87c:	40013400 	.word	0x40013400
 800c880:	40014000 	.word	0x40014000
 800c884:	40014400 	.word	0x40014400
 800c888:	40014800 	.word	0x40014800

0800c88c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	f023 0210 	bic.w	r2, r3, #16
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f023 0320 	bic.w	r3, r3, #32
 800c8da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a28      	ldr	r2, [pc, #160]	; (800c98c <TIM_OC2_SetConfig+0x100>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d003      	beq.n	800c8f8 <TIM_OC2_SetConfig+0x6c>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a27      	ldr	r2, [pc, #156]	; (800c990 <TIM_OC2_SetConfig+0x104>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d10d      	bne.n	800c914 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	4313      	orrs	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a1d      	ldr	r2, [pc, #116]	; (800c98c <TIM_OC2_SetConfig+0x100>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d00f      	beq.n	800c93c <TIM_OC2_SetConfig+0xb0>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a1c      	ldr	r2, [pc, #112]	; (800c990 <TIM_OC2_SetConfig+0x104>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d00b      	beq.n	800c93c <TIM_OC2_SetConfig+0xb0>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a1b      	ldr	r2, [pc, #108]	; (800c994 <TIM_OC2_SetConfig+0x108>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d007      	beq.n	800c93c <TIM_OC2_SetConfig+0xb0>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a1a      	ldr	r2, [pc, #104]	; (800c998 <TIM_OC2_SetConfig+0x10c>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d003      	beq.n	800c93c <TIM_OC2_SetConfig+0xb0>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a19      	ldr	r2, [pc, #100]	; (800c99c <TIM_OC2_SetConfig+0x110>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d113      	bne.n	800c964 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c942:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c94a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	695b      	ldr	r3, [r3, #20]
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	4313      	orrs	r3, r2
 800c956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	4313      	orrs	r3, r2
 800c962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	697a      	ldr	r2, [r7, #20]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	40012c00 	.word	0x40012c00
 800c990:	40013400 	.word	0x40013400
 800c994:	40014000 	.word	0x40014000
 800c998:	40014400 	.word	0x40014400
 800c99c:	40014800 	.word	0x40014800

0800c9a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b087      	sub	sp, #28
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a27      	ldr	r2, [pc, #156]	; (800ca9c <TIM_OC3_SetConfig+0xfc>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d003      	beq.n	800ca0a <TIM_OC3_SetConfig+0x6a>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a26      	ldr	r2, [pc, #152]	; (800caa0 <TIM_OC3_SetConfig+0x100>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d10d      	bne.n	800ca26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	021b      	lsls	r3, r3, #8
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca24:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a1c      	ldr	r2, [pc, #112]	; (800ca9c <TIM_OC3_SetConfig+0xfc>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d00f      	beq.n	800ca4e <TIM_OC3_SetConfig+0xae>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a1b      	ldr	r2, [pc, #108]	; (800caa0 <TIM_OC3_SetConfig+0x100>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00b      	beq.n	800ca4e <TIM_OC3_SetConfig+0xae>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a1a      	ldr	r2, [pc, #104]	; (800caa4 <TIM_OC3_SetConfig+0x104>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d007      	beq.n	800ca4e <TIM_OC3_SetConfig+0xae>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a19      	ldr	r2, [pc, #100]	; (800caa8 <TIM_OC3_SetConfig+0x108>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d003      	beq.n	800ca4e <TIM_OC3_SetConfig+0xae>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a18      	ldr	r2, [pc, #96]	; (800caac <TIM_OC3_SetConfig+0x10c>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d113      	bne.n	800ca76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	011b      	lsls	r3, r3, #4
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	011b      	lsls	r3, r3, #4
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	693a      	ldr	r2, [r7, #16]
 800ca7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	621a      	str	r2, [r3, #32]
}
 800ca90:	bf00      	nop
 800ca92:	371c      	adds	r7, #28
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	40012c00 	.word	0x40012c00
 800caa0:	40013400 	.word	0x40013400
 800caa4:	40014000 	.word	0x40014000
 800caa8:	40014400 	.word	0x40014400
 800caac:	40014800 	.word	0x40014800

0800cab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	021b      	lsls	r3, r3, #8
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cafe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	031b      	lsls	r3, r3, #12
 800cb06:	693a      	ldr	r2, [r7, #16]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a18      	ldr	r2, [pc, #96]	; (800cb70 <TIM_OC4_SetConfig+0xc0>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d00f      	beq.n	800cb34 <TIM_OC4_SetConfig+0x84>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a17      	ldr	r2, [pc, #92]	; (800cb74 <TIM_OC4_SetConfig+0xc4>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d00b      	beq.n	800cb34 <TIM_OC4_SetConfig+0x84>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a16      	ldr	r2, [pc, #88]	; (800cb78 <TIM_OC4_SetConfig+0xc8>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d007      	beq.n	800cb34 <TIM_OC4_SetConfig+0x84>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <TIM_OC4_SetConfig+0xcc>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d003      	beq.n	800cb34 <TIM_OC4_SetConfig+0x84>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a14      	ldr	r2, [pc, #80]	; (800cb80 <TIM_OC4_SetConfig+0xd0>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d109      	bne.n	800cb48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	695b      	ldr	r3, [r3, #20]
 800cb40:	019b      	lsls	r3, r3, #6
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	697a      	ldr	r2, [r7, #20]
 800cb4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	621a      	str	r2, [r3, #32]
}
 800cb62:	bf00      	nop
 800cb64:	371c      	adds	r7, #28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	40012c00 	.word	0x40012c00
 800cb74:	40013400 	.word	0x40013400
 800cb78:	40014000 	.word	0x40014000
 800cb7c:	40014400 	.word	0x40014400
 800cb80:	40014800 	.word	0x40014800

0800cb84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cbc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a17      	ldr	r2, [pc, #92]	; (800cc38 <TIM_OC5_SetConfig+0xb4>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d00f      	beq.n	800cbfe <TIM_OC5_SetConfig+0x7a>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a16      	ldr	r2, [pc, #88]	; (800cc3c <TIM_OC5_SetConfig+0xb8>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d00b      	beq.n	800cbfe <TIM_OC5_SetConfig+0x7a>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a15      	ldr	r2, [pc, #84]	; (800cc40 <TIM_OC5_SetConfig+0xbc>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d007      	beq.n	800cbfe <TIM_OC5_SetConfig+0x7a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4a14      	ldr	r2, [pc, #80]	; (800cc44 <TIM_OC5_SetConfig+0xc0>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d003      	beq.n	800cbfe <TIM_OC5_SetConfig+0x7a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a13      	ldr	r2, [pc, #76]	; (800cc48 <TIM_OC5_SetConfig+0xc4>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d109      	bne.n	800cc12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	021b      	lsls	r3, r3, #8
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	693a      	ldr	r2, [r7, #16]
 800cc2a:	621a      	str	r2, [r3, #32]
}
 800cc2c:	bf00      	nop
 800cc2e:	371c      	adds	r7, #28
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	40012c00 	.word	0x40012c00
 800cc3c:	40013400 	.word	0x40013400
 800cc40:	40014000 	.word	0x40014000
 800cc44:	40014400 	.word	0x40014400
 800cc48:	40014800 	.word	0x40014800

0800cc4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	021b      	lsls	r3, r3, #8
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	051b      	lsls	r3, r3, #20
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a18      	ldr	r2, [pc, #96]	; (800cd04 <TIM_OC6_SetConfig+0xb8>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d00f      	beq.n	800ccc8 <TIM_OC6_SetConfig+0x7c>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <TIM_OC6_SetConfig+0xbc>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d00b      	beq.n	800ccc8 <TIM_OC6_SetConfig+0x7c>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a16      	ldr	r2, [pc, #88]	; (800cd0c <TIM_OC6_SetConfig+0xc0>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d007      	beq.n	800ccc8 <TIM_OC6_SetConfig+0x7c>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a15      	ldr	r2, [pc, #84]	; (800cd10 <TIM_OC6_SetConfig+0xc4>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d003      	beq.n	800ccc8 <TIM_OC6_SetConfig+0x7c>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a14      	ldr	r2, [pc, #80]	; (800cd14 <TIM_OC6_SetConfig+0xc8>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d109      	bne.n	800ccdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	029b      	lsls	r3, r3, #10
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	693a      	ldr	r2, [r7, #16]
 800ccf4:	621a      	str	r2, [r3, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	40012c00 	.word	0x40012c00
 800cd08:	40013400 	.word	0x40013400
 800cd0c:	40014000 	.word	0x40014000
 800cd10:	40014400 	.word	0x40014400
 800cd14:	40014800 	.word	0x40014800

0800cd18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6a1b      	ldr	r3, [r3, #32]
 800cd28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	f023 0201 	bic.w	r2, r3, #1
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f023 030a 	bic.w	r3, r3, #10
 800cd54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	621a      	str	r2, [r3, #32]
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b087      	sub	sp, #28
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	60f8      	str	r0, [r7, #12]
 800cd7e:	60b9      	str	r1, [r7, #8]
 800cd80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	f023 0210 	bic.w	r2, r3, #16
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cda0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	031b      	lsls	r3, r3, #12
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cdb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	011b      	lsls	r3, r3, #4
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	621a      	str	r2, [r3, #32]
}
 800cdca:	bf00      	nop
 800cdcc:	371c      	adds	r7, #28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b085      	sub	sp, #20
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	f043 0307 	orr.w	r3, r3, #7
 800cdf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	609a      	str	r2, [r3, #8]
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
 800ce18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	021a      	lsls	r2, r3, #8
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	697a      	ldr	r2, [r7, #20]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	609a      	str	r2, [r3, #8]
}
 800ce40:	bf00      	nop
 800ce42:	371c      	adds	r7, #28
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b087      	sub	sp, #28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f003 031f 	and.w	r3, r3, #31
 800ce5e:	2201      	movs	r2, #1
 800ce60:	fa02 f303 	lsl.w	r3, r2, r3
 800ce64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6a1a      	ldr	r2, [r3, #32]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	43db      	mvns	r3, r3
 800ce6e:	401a      	ands	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a1a      	ldr	r2, [r3, #32]
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	f003 031f 	and.w	r3, r3, #31
 800ce7e:	6879      	ldr	r1, [r7, #4]
 800ce80:	fa01 f303 	lsl.w	r3, r1, r3
 800ce84:	431a      	orrs	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	621a      	str	r2, [r3, #32]
}
 800ce8a:	bf00      	nop
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
	...

0800ce98 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d109      	bne.n	800cebc <HAL_TIMEx_PWMN_Start+0x24>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	bf14      	ite	ne
 800ceb4:	2301      	movne	r3, #1
 800ceb6:	2300      	moveq	r3, #0
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	e022      	b.n	800cf02 <HAL_TIMEx_PWMN_Start+0x6a>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d109      	bne.n	800ced6 <HAL_TIMEx_PWMN_Start+0x3e>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	bf14      	ite	ne
 800cece:	2301      	movne	r3, #1
 800ced0:	2300      	moveq	r3, #0
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	e015      	b.n	800cf02 <HAL_TIMEx_PWMN_Start+0x6a>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b08      	cmp	r3, #8
 800ceda:	d109      	bne.n	800cef0 <HAL_TIMEx_PWMN_Start+0x58>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	bf14      	ite	ne
 800cee8:	2301      	movne	r3, #1
 800ceea:	2300      	moveq	r3, #0
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	e008      	b.n	800cf02 <HAL_TIMEx_PWMN_Start+0x6a>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	bf14      	ite	ne
 800cefc:	2301      	movne	r3, #1
 800cefe:	2300      	moveq	r3, #0
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e069      	b.n	800cfde <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d104      	bne.n	800cf1a <HAL_TIMEx_PWMN_Start+0x82>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2202      	movs	r2, #2
 800cf14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf18:	e013      	b.n	800cf42 <HAL_TIMEx_PWMN_Start+0xaa>
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b04      	cmp	r3, #4
 800cf1e:	d104      	bne.n	800cf2a <HAL_TIMEx_PWMN_Start+0x92>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2202      	movs	r2, #2
 800cf24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf28:	e00b      	b.n	800cf42 <HAL_TIMEx_PWMN_Start+0xaa>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b08      	cmp	r3, #8
 800cf2e:	d104      	bne.n	800cf3a <HAL_TIMEx_PWMN_Start+0xa2>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2202      	movs	r2, #2
 800cf34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf38:	e003      	b.n	800cf42 <HAL_TIMEx_PWMN_Start+0xaa>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2204      	movs	r2, #4
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 f974 	bl	800d238 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a20      	ldr	r2, [pc, #128]	; (800cfe8 <HAL_TIMEx_PWMN_Start+0x150>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d018      	beq.n	800cf9c <HAL_TIMEx_PWMN_Start+0x104>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf72:	d013      	beq.n	800cf9c <HAL_TIMEx_PWMN_Start+0x104>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a1c      	ldr	r2, [pc, #112]	; (800cfec <HAL_TIMEx_PWMN_Start+0x154>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d00e      	beq.n	800cf9c <HAL_TIMEx_PWMN_Start+0x104>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a1b      	ldr	r2, [pc, #108]	; (800cff0 <HAL_TIMEx_PWMN_Start+0x158>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d009      	beq.n	800cf9c <HAL_TIMEx_PWMN_Start+0x104>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a19      	ldr	r2, [pc, #100]	; (800cff4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d004      	beq.n	800cf9c <HAL_TIMEx_PWMN_Start+0x104>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a18      	ldr	r2, [pc, #96]	; (800cff8 <HAL_TIMEx_PWMN_Start+0x160>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d115      	bne.n	800cfc8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	689a      	ldr	r2, [r3, #8]
 800cfa2:	4b16      	ldr	r3, [pc, #88]	; (800cffc <HAL_TIMEx_PWMN_Start+0x164>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b06      	cmp	r3, #6
 800cfac:	d015      	beq.n	800cfda <HAL_TIMEx_PWMN_Start+0x142>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfb4:	d011      	beq.n	800cfda <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f042 0201 	orr.w	r2, r2, #1
 800cfc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfc6:	e008      	b.n	800cfda <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0201 	orr.w	r2, r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	e000      	b.n	800cfdc <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	40012c00 	.word	0x40012c00
 800cfec:	40000400 	.word	0x40000400
 800cff0:	40000800 	.word	0x40000800
 800cff4:	40013400 	.word	0x40013400
 800cff8:	40014000 	.word	0x40014000
 800cffc:	00010007 	.word	0x00010007

0800d000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d010:	2b01      	cmp	r3, #1
 800d012:	d101      	bne.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d014:	2302      	movs	r3, #2
 800d016:	e063      	b.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a2b      	ldr	r2, [pc, #172]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d004      	beq.n	800d04c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a2a      	ldr	r2, [pc, #168]	; (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d108      	bne.n	800d05e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a1b      	ldr	r2, [pc, #108]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d018      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d08a:	d013      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a18      	ldr	r2, [pc, #96]	; (800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d00e      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a17      	ldr	r2, [pc, #92]	; (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d009      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d004      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a13      	ldr	r2, [pc, #76]	; (800d0fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d10c      	bne.n	800d0ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	40012c00 	.word	0x40012c00
 800d0f0:	40013400 	.word	0x40013400
 800d0f4:	40000400 	.word	0x40000400
 800d0f8:	40000800 	.word	0x40000800
 800d0fc:	40014000 	.word	0x40014000

0800d100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d114:	2b01      	cmp	r3, #1
 800d116:	d101      	bne.n	800d11c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d118:	2302      	movs	r3, #2
 800d11a:	e065      	b.n	800d1e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	4313      	orrs	r3, r2
 800d130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4313      	orrs	r3, r2
 800d15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	4313      	orrs	r3, r2
 800d168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	4313      	orrs	r3, r2
 800d176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d182:	4313      	orrs	r3, r2
 800d184:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	041b      	lsls	r3, r3, #16
 800d192:	4313      	orrs	r3, r2
 800d194:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a16      	ldr	r2, [pc, #88]	; (800d1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d004      	beq.n	800d1aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a14      	ldr	r2, [pc, #80]	; (800d1f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d115      	bne.n	800d1d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b4:	051b      	lsls	r3, r3, #20
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	69db      	ldr	r3, [r3, #28]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	40012c00 	.word	0x40012c00
 800d1f8:	40013400 	.word	0x40013400

0800d1fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d238:	b480      	push	{r7}
 800d23a:	b087      	sub	sp, #28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	f003 031f 	and.w	r3, r3, #31
 800d24a:	2204      	movs	r2, #4
 800d24c:	fa02 f303 	lsl.w	r3, r2, r3
 800d250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6a1a      	ldr	r2, [r3, #32]
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	43db      	mvns	r3, r3
 800d25a:	401a      	ands	r2, r3
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a1a      	ldr	r2, [r3, #32]
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	f003 031f 	and.w	r3, r3, #31
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	fa01 f303 	lsl.w	r3, r1, r3
 800d270:	431a      	orrs	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	621a      	str	r2, [r3, #32]
}
 800d276:	bf00      	nop
 800d278:	371c      	adds	r7, #28
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d282:	b480      	push	{r7}
 800d284:	b085      	sub	sp, #20
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d292:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800d296:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d2b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800d2bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	f107 0014 	add.w	r0, r7, #20
 800d2f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	b004      	add	sp, #16
 800d326:	4770      	bx	lr

0800d328 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d328:	b480      	push	{r7}
 800d32a:	b09d      	sub	sp, #116	; 0x74
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	b29b      	uxth	r3, r3
 800d346:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d34e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	78db      	ldrb	r3, [r3, #3]
 800d356:	2b03      	cmp	r3, #3
 800d358:	d81f      	bhi.n	800d39a <USB_ActivateEndpoint+0x72>
 800d35a:	a201      	add	r2, pc, #4	; (adr r2, 800d360 <USB_ActivateEndpoint+0x38>)
 800d35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d360:	0800d371 	.word	0x0800d371
 800d364:	0800d38d 	.word	0x0800d38d
 800d368:	0800d3a3 	.word	0x0800d3a3
 800d36c:	0800d37f 	.word	0x0800d37f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d370:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d378:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d37c:	e012      	b.n	800d3a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d37e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d382:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d386:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d38a:	e00b      	b.n	800d3a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d38c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d394:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d398:	e004      	b.n	800d3a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d3a0:	e000      	b.n	800d3a4 <USB_ActivateEndpoint+0x7c>
      break;
 800d3a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	441a      	add	r2, r3
 800d3ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d3b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4413      	add	r3, r2
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	b21b      	sxth	r3, r3
 800d3d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3de:	b21a      	sxth	r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	b21b      	sxth	r3, r3
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	b21b      	sxth	r3, r3
 800d3ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	441a      	add	r2, r3
 800d3f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d3fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	7b1b      	ldrb	r3, [r3, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f040 8178 	bne.w	800d70a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	785b      	ldrb	r3, [r3, #1]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 8084 	beq.w	800d52c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	61bb      	str	r3, [r7, #24]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d42e:	b29b      	uxth	r3, r3
 800d430:	461a      	mov	r2, r3
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	4413      	add	r3, r2
 800d436:	61bb      	str	r3, [r7, #24]
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	011a      	lsls	r2, r3, #4
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	4413      	add	r3, r2
 800d442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	88db      	ldrh	r3, [r3, #6]
 800d44c:	085b      	lsrs	r3, r3, #1
 800d44e:	b29b      	uxth	r3, r3
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	b29a      	uxth	r2, r3
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	881b      	ldrh	r3, [r3, #0]
 800d464:	827b      	strh	r3, [r7, #18]
 800d466:	8a7b      	ldrh	r3, [r7, #18]
 800d468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d01b      	beq.n	800d4a8 <USB_ActivateEndpoint+0x180>
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d486:	823b      	strh	r3, [r7, #16]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	441a      	add	r2, r3
 800d492:	8a3b      	ldrh	r3, [r7, #16]
 800d494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d49c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	78db      	ldrb	r3, [r3, #3]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d020      	beq.n	800d4f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4c6:	81bb      	strh	r3, [r7, #12]
 800d4c8:	89bb      	ldrh	r3, [r7, #12]
 800d4ca:	f083 0320 	eor.w	r3, r3, #32
 800d4ce:	81bb      	strh	r3, [r7, #12]
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	441a      	add	r2, r3
 800d4da:	89bb      	ldrh	r3, [r7, #12]
 800d4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	8013      	strh	r3, [r2, #0]
 800d4f0:	e2d5      	b.n	800da9e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d508:	81fb      	strh	r3, [r7, #14]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	441a      	add	r2, r3
 800d514:	89fb      	ldrh	r3, [r7, #14]
 800d516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d51a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d51e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d526:	b29b      	uxth	r3, r3
 800d528:	8013      	strh	r3, [r2, #0]
 800d52a:	e2b8      	b.n	800da9e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	633b      	str	r3, [r7, #48]	; 0x30
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d536:	b29b      	uxth	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	4413      	add	r3, r2
 800d53e:	633b      	str	r3, [r7, #48]	; 0x30
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	011a      	lsls	r2, r3, #4
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	4413      	add	r3, r2
 800d54a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	88db      	ldrh	r3, [r3, #6]
 800d554:	085b      	lsrs	r3, r3, #1
 800d556:	b29b      	uxth	r3, r3
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	62bb      	str	r3, [r7, #40]	; 0x28
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	461a      	mov	r2, r3
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	4413      	add	r3, r2
 800d572:	62bb      	str	r3, [r7, #40]	; 0x28
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	011a      	lsls	r2, r3, #4
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	4413      	add	r3, r2
 800d57e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d582:	627b      	str	r3, [r7, #36]	; 0x24
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	881b      	ldrh	r3, [r3, #0]
 800d588:	b29b      	uxth	r3, r3
 800d58a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d58e:	b29a      	uxth	r2, r3
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	801a      	strh	r2, [r3, #0]
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	691b      	ldr	r3, [r3, #16]
 800d598:	2b3e      	cmp	r3, #62	; 0x3e
 800d59a:	d91d      	bls.n	800d5d8 <USB_ActivateEndpoint+0x2b0>
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	095b      	lsrs	r3, r3, #5
 800d5a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	f003 031f 	and.w	r3, r3, #31
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d102      	bne.n	800d5b6 <USB_ActivateEndpoint+0x28e>
 800d5b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	881b      	ldrh	r3, [r3, #0]
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	029b      	lsls	r3, r3, #10
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	801a      	strh	r2, [r3, #0]
 800d5d6:	e026      	b.n	800d626 <USB_ActivateEndpoint+0x2fe>
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10a      	bne.n	800d5f6 <USB_ActivateEndpoint+0x2ce>
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	801a      	strh	r2, [r3, #0]
 800d5f4:	e017      	b.n	800d626 <USB_ActivateEndpoint+0x2fe>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	085b      	lsrs	r3, r3, #1
 800d5fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	f003 0301 	and.w	r3, r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <USB_ActivateEndpoint+0x2e8>
 800d60a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d60c:	3301      	adds	r3, #1
 800d60e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	881b      	ldrh	r3, [r3, #0]
 800d614:	b29a      	uxth	r2, r3
 800d616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d618:	b29b      	uxth	r3, r3
 800d61a:	029b      	lsls	r3, r3, #10
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	4313      	orrs	r3, r2
 800d620:	b29a      	uxth	r2, r3
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	847b      	strh	r3, [r7, #34]	; 0x22
 800d634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d01b      	beq.n	800d676 <USB_ActivateEndpoint+0x34e>
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d654:	843b      	strh	r3, [r7, #32]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	441a      	add	r2, r3
 800d660:	8c3b      	ldrh	r3, [r7, #32]
 800d662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d66a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d672:	b29b      	uxth	r3, r3
 800d674:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d124      	bne.n	800d6c8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d694:	83bb      	strh	r3, [r7, #28]
 800d696:	8bbb      	ldrh	r3, [r7, #28]
 800d698:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d69c:	83bb      	strh	r3, [r7, #28]
 800d69e:	8bbb      	ldrh	r3, [r7, #28]
 800d6a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d6a4:	83bb      	strh	r3, [r7, #28]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	441a      	add	r2, r3
 800d6b0:	8bbb      	ldrh	r3, [r7, #28]
 800d6b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	8013      	strh	r3, [r2, #0]
 800d6c6:	e1ea      	b.n	800da9e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6de:	83fb      	strh	r3, [r7, #30]
 800d6e0:	8bfb      	ldrh	r3, [r7, #30]
 800d6e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d6e6:	83fb      	strh	r3, [r7, #30]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	441a      	add	r2, r3
 800d6f2:	8bfb      	ldrh	r3, [r7, #30]
 800d6f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d704:	b29b      	uxth	r3, r3
 800d706:	8013      	strh	r3, [r2, #0]
 800d708:	e1c9      	b.n	800da9e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	78db      	ldrb	r3, [r3, #3]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d11e      	bne.n	800d750 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d728:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	441a      	add	r2, r3
 800d736:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d73a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d73e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d742:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	8013      	strh	r3, [r2, #0]
 800d74e:	e01d      	b.n	800d78c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d766:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	441a      	add	r2, r3
 800d774:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d77c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d788:	b29b      	uxth	r3, r3
 800d78a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d796:	b29b      	uxth	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d79c:	4413      	add	r3, r2
 800d79e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	011a      	lsls	r2, r3, #4
 800d7a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	891b      	ldrh	r3, [r3, #8]
 800d7b4:	085b      	lsrs	r3, r3, #1
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7be:	801a      	strh	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	657b      	str	r3, [r7, #84]	; 0x54
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7d0:	4413      	add	r3, r2
 800d7d2:	657b      	str	r3, [r7, #84]	; 0x54
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	011a      	lsls	r2, r3, #4
 800d7da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7dc:	4413      	add	r3, r2
 800d7de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d7e2:	653b      	str	r3, [r7, #80]	; 0x50
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	895b      	ldrh	r3, [r3, #10]
 800d7e8:	085b      	lsrs	r3, r3, #1
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	785b      	ldrb	r3, [r3, #1]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f040 8093 	bne.w	800d924 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d80e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d01b      	beq.n	800d852 <USB_ActivateEndpoint+0x52a>
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	b29b      	uxth	r3, r3
 800d828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d830:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	441a      	add	r2, r3
 800d83c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d83e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d84e:	b29b      	uxth	r3, r3
 800d850:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d860:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	d01b      	beq.n	800d8a2 <USB_ActivateEndpoint+0x57a>
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	b29b      	uxth	r3, r3
 800d878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d880:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	441a      	add	r2, r3
 800d88c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d89a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8b8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d8ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d8bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d8c0:	873b      	strh	r3, [r7, #56]	; 0x38
 800d8c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d8c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d8c8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	441a      	add	r2, r3
 800d8d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d8d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d900:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	441a      	add	r2, r3
 800d90c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d90e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d91e:	b29b      	uxth	r3, r3
 800d920:	8013      	strh	r3, [r2, #0]
 800d922:	e0bc      	b.n	800da9e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d01d      	beq.n	800d97c <USB_ActivateEndpoint+0x654>
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	4413      	add	r3, r2
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d956:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	441a      	add	r2, r3
 800d964:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d96c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d978:	b29b      	uxth	r3, r3
 800d97a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d98c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d994:	2b00      	cmp	r3, #0
 800d996:	d01d      	beq.n	800d9d4 <USB_ActivateEndpoint+0x6ac>
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	441a      	add	r2, r3
 800d9bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d9c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	78db      	ldrb	r3, [r3, #3]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d024      	beq.n	800da26 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	881b      	ldrh	r3, [r3, #0]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d9f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d9fa:	f083 0320 	eor.w	r3, r3, #32
 800d9fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	441a      	add	r2, r3
 800da0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800da10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da20:	b29b      	uxth	r3, r3
 800da22:	8013      	strh	r3, [r2, #0]
 800da24:	e01d      	b.n	800da62 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	b29b      	uxth	r3, r3
 800da34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	441a      	add	r2, r3
 800da4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da5e:	b29b      	uxth	r3, r3
 800da60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	441a      	add	r2, r3
 800da86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800da9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3774      	adds	r7, #116	; 0x74
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop

0800dab0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b08d      	sub	sp, #52	; 0x34
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	7b1b      	ldrb	r3, [r3, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f040 808e 	bne.w	800dbe0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	785b      	ldrb	r3, [r3, #1]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d044      	beq.n	800db56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	81bb      	strh	r3, [r7, #12]
 800dada:	89bb      	ldrh	r3, [r7, #12]
 800dadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d01b      	beq.n	800db1c <USB_DeactivateEndpoint+0x6c>
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	4413      	add	r3, r2
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dafa:	817b      	strh	r3, [r7, #10]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	441a      	add	r2, r3
 800db06:	897b      	ldrh	r3, [r7, #10]
 800db08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800db18:	b29b      	uxth	r3, r3
 800db1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db32:	813b      	strh	r3, [r7, #8]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	441a      	add	r2, r3
 800db3e:	893b      	ldrh	r3, [r7, #8]
 800db40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db50:	b29b      	uxth	r3, r3
 800db52:	8013      	strh	r3, [r2, #0]
 800db54:	e192      	b.n	800de7c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	827b      	strh	r3, [r7, #18]
 800db64:	8a7b      	ldrh	r3, [r7, #18]
 800db66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d01b      	beq.n	800dba6 <USB_DeactivateEndpoint+0xf6>
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db84:	823b      	strh	r3, [r7, #16]
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	441a      	add	r2, r3
 800db90:	8a3b      	ldrh	r3, [r7, #16]
 800db92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbbc:	81fb      	strh	r3, [r7, #14]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	441a      	add	r2, r3
 800dbc8:	89fb      	ldrh	r3, [r7, #14]
 800dbca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	8013      	strh	r3, [r2, #0]
 800dbde:	e14d      	b.n	800de7c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f040 80a5 	bne.w	800dd34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	843b      	strh	r3, [r7, #32]
 800dbf8:	8c3b      	ldrh	r3, [r7, #32]
 800dbfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d01b      	beq.n	800dc3a <USB_DeactivateEndpoint+0x18a>
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4413      	add	r3, r2
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc18:	83fb      	strh	r3, [r7, #30]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	441a      	add	r2, r3
 800dc24:	8bfb      	ldrh	r3, [r7, #30]
 800dc26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	83bb      	strh	r3, [r7, #28]
 800dc48:	8bbb      	ldrh	r3, [r7, #28]
 800dc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d01b      	beq.n	800dc8a <USB_DeactivateEndpoint+0x1da>
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc68:	837b      	strh	r3, [r7, #26]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	441a      	add	r2, r3
 800dc74:	8b7b      	ldrh	r3, [r7, #26]
 800dc76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dca0:	833b      	strh	r3, [r7, #24]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	441a      	add	r2, r3
 800dcac:	8b3b      	ldrh	r3, [r7, #24]
 800dcae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcd8:	82fb      	strh	r3, [r7, #22]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	441a      	add	r2, r3
 800dce4:	8afb      	ldrh	r3, [r7, #22]
 800dce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd10:	82bb      	strh	r3, [r7, #20]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	441a      	add	r2, r3
 800dd1c:	8abb      	ldrh	r3, [r7, #20]
 800dd1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	8013      	strh	r3, [r2, #0]
 800dd32:	e0a3      	b.n	800de7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	881b      	ldrh	r3, [r3, #0]
 800dd40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dd42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d01b      	beq.n	800dd84 <USB_DeactivateEndpoint+0x2d4>
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	441a      	add	r2, r3
 800dd6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dd92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01b      	beq.n	800ddd4 <USB_DeactivateEndpoint+0x324>
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	881b      	ldrh	r3, [r3, #0]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddb2:	853b      	strh	r3, [r7, #40]	; 0x28
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	441a      	add	r2, r3
 800ddbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ddc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddea:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	441a      	add	r2, r3
 800ddf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ddf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de08:	b29b      	uxth	r3, r3
 800de0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	441a      	add	r2, r3
 800de2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de40:	b29b      	uxth	r3, r3
 800de42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4413      	add	r3, r2
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	b29b      	uxth	r3, r3
 800de52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de5a:	847b      	strh	r3, [r7, #34]	; 0x22
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	441a      	add	r2, r3
 800de66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de78:	b29b      	uxth	r3, r3
 800de7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3734      	adds	r7, #52	; 0x34
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b0c2      	sub	sp, #264	; 0x108
 800de8e:	af00      	add	r7, sp, #0
 800de90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de98:	6018      	str	r0, [r3, #0]
 800de9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dea2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	785b      	ldrb	r3, [r3, #1]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	f040 86b7 	bne.w	800ec24 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800deb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	699a      	ldr	r2, [r3, #24]
 800dec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d908      	bls.n	800dee4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ded2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ded6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800dee2:	e007      	b.n	800def4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800dee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800def4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	7b1b      	ldrb	r3, [r3, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d13a      	bne.n	800df7a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800df04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6959      	ldr	r1, [r3, #20]
 800df10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	88da      	ldrh	r2, [r3, #6]
 800df1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df20:	b29b      	uxth	r3, r3
 800df22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800df26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800df2a:	6800      	ldr	r0, [r0, #0]
 800df2c:	f001 fc8c 	bl	800f848 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800df30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	613b      	str	r3, [r7, #16]
 800df3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	461a      	mov	r2, r3
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	4413      	add	r3, r2
 800df52:	613b      	str	r3, [r7, #16]
 800df54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	011a      	lsls	r2, r3, #4
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	4413      	add	r3, r2
 800df66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df70:	b29a      	uxth	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	801a      	strh	r2, [r3, #0]
 800df76:	f000 be1f 	b.w	800ebb8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800df7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	78db      	ldrb	r3, [r3, #3]
 800df86:	2b02      	cmp	r3, #2
 800df88:	f040 8462 	bne.w	800e850 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800df8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	6a1a      	ldr	r2, [r3, #32]
 800df98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	f240 83df 	bls.w	800e768 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4413      	add	r3, r2
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dfd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	441a      	add	r2, r3
 800dfee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dffa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800dffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e002:	b29b      	uxth	r3, r3
 800e004:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6a1a      	ldr	r2, [r3, #32]
 800e012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e016:	1ad2      	subs	r2, r2, r3
 800e018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e046:	2b00      	cmp	r3, #0
 800e048:	f000 81c7 	beq.w	800e3da <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	633b      	str	r3, [r7, #48]	; 0x30
 800e058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	785b      	ldrb	r3, [r3, #1]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d177      	bne.n	800e158 <USB_EPStartXfer+0x2ce>
 800e068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e06c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	62bb      	str	r3, [r7, #40]	; 0x28
 800e074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e082:	b29b      	uxth	r3, r3
 800e084:	461a      	mov	r2, r3
 800e086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e088:	4413      	add	r3, r2
 800e08a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	011a      	lsls	r2, r3, #4
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	4413      	add	r3, r2
 800e09e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e0a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	801a      	strh	r2, [r3, #0]
 800e0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0b8:	2b3e      	cmp	r3, #62	; 0x3e
 800e0ba:	d921      	bls.n	800e100 <USB_EPStartXfer+0x276>
 800e0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0c0:	095b      	lsrs	r3, r3, #5
 800e0c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ca:	f003 031f 	and.w	r3, r3, #31
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d104      	bne.n	800e0dc <USB_EPStartXfer+0x252>
 800e0d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	029b      	lsls	r3, r3, #10
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	801a      	strh	r2, [r3, #0]
 800e0fe:	e050      	b.n	800e1a2 <USB_EPStartXfer+0x318>
 800e100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10a      	bne.n	800e11e <USB_EPStartXfer+0x294>
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e116:	b29a      	uxth	r2, r3
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11a:	801a      	strh	r2, [r3, #0]
 800e11c:	e041      	b.n	800e1a2 <USB_EPStartXfer+0x318>
 800e11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e122:	085b      	lsrs	r3, r3, #1
 800e124:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	2b00      	cmp	r3, #0
 800e132:	d004      	beq.n	800e13e <USB_EPStartXfer+0x2b4>
 800e134:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e138:	3301      	adds	r3, #1
 800e13a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	b29a      	uxth	r2, r3
 800e144:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e148:	b29b      	uxth	r3, r3
 800e14a:	029b      	lsls	r3, r3, #10
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4313      	orrs	r3, r2
 800e150:	b29a      	uxth	r2, r3
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	801a      	strh	r2, [r3, #0]
 800e156:	e024      	b.n	800e1a2 <USB_EPStartXfer+0x318>
 800e158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e15c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	785b      	ldrb	r3, [r3, #1]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d11c      	bne.n	800e1a2 <USB_EPStartXfer+0x318>
 800e168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e16c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e176:	b29b      	uxth	r3, r3
 800e178:	461a      	mov	r2, r3
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	4413      	add	r3, r2
 800e17e:	633b      	str	r3, [r7, #48]	; 0x30
 800e180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	011a      	lsls	r2, r3, #4
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	4413      	add	r3, r2
 800e192:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e196:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	895b      	ldrh	r3, [r3, #10]
 800e1ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6959      	ldr	r1, [r3, #20]
 800e1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e1c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e1cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e1d0:	6800      	ldr	r0, [r0, #0]
 800e1d2:	f001 fb39 	bl	800f848 <USB_WritePMA>
            ep->xfer_buff += len;
 800e1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	695a      	ldr	r2, [r3, #20]
 800e1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1e6:	441a      	add	r2, r3
 800e1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6a1a      	ldr	r2, [r3, #32]
 800e200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	691b      	ldr	r3, [r3, #16]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d90f      	bls.n	800e230 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	6a1a      	ldr	r2, [r3, #32]
 800e21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e220:	1ad2      	subs	r2, r2, r3
 800e222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	621a      	str	r2, [r3, #32]
 800e22e:	e00e      	b.n	800e24e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	6a1b      	ldr	r3, [r3, #32]
 800e23c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2200      	movs	r2, #0
 800e24c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	785b      	ldrb	r3, [r3, #1]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d177      	bne.n	800e34e <USB_EPStartXfer+0x4c4>
 800e25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	61bb      	str	r3, [r7, #24]
 800e26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e26e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e278:	b29b      	uxth	r3, r3
 800e27a:	461a      	mov	r2, r3
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	4413      	add	r3, r2
 800e280:	61bb      	str	r3, [r7, #24]
 800e282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	011a      	lsls	r2, r3, #4
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	4413      	add	r3, r2
 800e294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e298:	617b      	str	r3, [r7, #20]
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	801a      	strh	r2, [r3, #0]
 800e2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2ae:	2b3e      	cmp	r3, #62	; 0x3e
 800e2b0:	d921      	bls.n	800e2f6 <USB_EPStartXfer+0x46c>
 800e2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2b6:	095b      	lsrs	r3, r3, #5
 800e2b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2c0:	f003 031f 	and.w	r3, r3, #31
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d104      	bne.n	800e2d2 <USB_EPStartXfer+0x448>
 800e2c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	029b      	lsls	r3, r3, #10
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	801a      	strh	r2, [r3, #0]
 800e2f4:	e056      	b.n	800e3a4 <USB_EPStartXfer+0x51a>
 800e2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10a      	bne.n	800e314 <USB_EPStartXfer+0x48a>
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	b29b      	uxth	r3, r3
 800e304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	801a      	strh	r2, [r3, #0]
 800e312:	e047      	b.n	800e3a4 <USB_EPStartXfer+0x51a>
 800e314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e318:	085b      	lsrs	r3, r3, #1
 800e31a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	2b00      	cmp	r3, #0
 800e328:	d004      	beq.n	800e334 <USB_EPStartXfer+0x4aa>
 800e32a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e32e:	3301      	adds	r3, #1
 800e330:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	b29a      	uxth	r2, r3
 800e33a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e33e:	b29b      	uxth	r3, r3
 800e340:	029b      	lsls	r3, r3, #10
 800e342:	b29b      	uxth	r3, r3
 800e344:	4313      	orrs	r3, r2
 800e346:	b29a      	uxth	r2, r3
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	801a      	strh	r2, [r3, #0]
 800e34c:	e02a      	b.n	800e3a4 <USB_EPStartXfer+0x51a>
 800e34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	785b      	ldrb	r3, [r3, #1]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d122      	bne.n	800e3a4 <USB_EPStartXfer+0x51a>
 800e35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	623b      	str	r3, [r7, #32]
 800e36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e36e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e378:	b29b      	uxth	r3, r3
 800e37a:	461a      	mov	r2, r3
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	4413      	add	r3, r2
 800e380:	623b      	str	r3, [r7, #32]
 800e382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	011a      	lsls	r2, r3, #4
 800e390:	6a3b      	ldr	r3, [r7, #32]
 800e392:	4413      	add	r3, r2
 800e394:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e398:	61fb      	str	r3, [r7, #28]
 800e39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	891b      	ldrh	r3, [r3, #8]
 800e3b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	6959      	ldr	r1, [r3, #20]
 800e3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e3ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e3ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e3d2:	6800      	ldr	r0, [r0, #0]
 800e3d4:	f001 fa38 	bl	800f848 <USB_WritePMA>
 800e3d8:	e3ee      	b.n	800ebb8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	785b      	ldrb	r3, [r3, #1]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d177      	bne.n	800e4da <USB_EPStartXfer+0x650>
 800e3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e404:	b29b      	uxth	r3, r3
 800e406:	461a      	mov	r2, r3
 800e408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e40a:	4413      	add	r3, r2
 800e40c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	011a      	lsls	r2, r3, #4
 800e41c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e41e:	4413      	add	r3, r2
 800e420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e424:	647b      	str	r3, [r7, #68]	; 0x44
 800e426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e430:	b29a      	uxth	r2, r3
 800e432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e434:	801a      	strh	r2, [r3, #0]
 800e436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e43a:	2b3e      	cmp	r3, #62	; 0x3e
 800e43c:	d921      	bls.n	800e482 <USB_EPStartXfer+0x5f8>
 800e43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e442:	095b      	lsrs	r3, r3, #5
 800e444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e44c:	f003 031f 	and.w	r3, r3, #31
 800e450:	2b00      	cmp	r3, #0
 800e452:	d104      	bne.n	800e45e <USB_EPStartXfer+0x5d4>
 800e454:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e458:	3b01      	subs	r3, #1
 800e45a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	b29a      	uxth	r2, r3
 800e464:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e468:	b29b      	uxth	r3, r3
 800e46a:	029b      	lsls	r3, r3, #10
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	4313      	orrs	r3, r2
 800e470:	b29b      	uxth	r3, r3
 800e472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e47e:	801a      	strh	r2, [r3, #0]
 800e480:	e056      	b.n	800e530 <USB_EPStartXfer+0x6a6>
 800e482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e486:	2b00      	cmp	r3, #0
 800e488:	d10a      	bne.n	800e4a0 <USB_EPStartXfer+0x616>
 800e48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e48c:	881b      	ldrh	r3, [r3, #0]
 800e48e:	b29b      	uxth	r3, r3
 800e490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e498:	b29a      	uxth	r2, r3
 800e49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e49c:	801a      	strh	r2, [r3, #0]
 800e49e:	e047      	b.n	800e530 <USB_EPStartXfer+0x6a6>
 800e4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4a4:	085b      	lsrs	r3, r3, #1
 800e4a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4ae:	f003 0301 	and.w	r3, r3, #1
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d004      	beq.n	800e4c0 <USB_EPStartXfer+0x636>
 800e4b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	029b      	lsls	r3, r3, #10
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4d6:	801a      	strh	r2, [r3, #0]
 800e4d8:	e02a      	b.n	800e530 <USB_EPStartXfer+0x6a6>
 800e4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	785b      	ldrb	r3, [r3, #1]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d122      	bne.n	800e530 <USB_EPStartXfer+0x6a6>
 800e4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e504:	b29b      	uxth	r3, r3
 800e506:	461a      	mov	r2, r3
 800e508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e50a:	4413      	add	r3, r2
 800e50c:	653b      	str	r3, [r7, #80]	; 0x50
 800e50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	011a      	lsls	r2, r3, #4
 800e51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51e:	4413      	add	r3, r2
 800e520:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e524:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e52a:	b29a      	uxth	r2, r3
 800e52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e52e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	891b      	ldrh	r3, [r3, #8]
 800e53c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6959      	ldr	r1, [r3, #20]
 800e54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e550:	b29b      	uxth	r3, r3
 800e552:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e556:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e55a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e55e:	6800      	ldr	r0, [r0, #0]
 800e560:	f001 f972 	bl	800f848 <USB_WritePMA>
            ep->xfer_buff += len;
 800e564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	695a      	ldr	r2, [r3, #20]
 800e570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e574:	441a      	add	r2, r3
 800e576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	6a1a      	ldr	r2, [r3, #32]
 800e58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d90f      	bls.n	800e5be <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6a1a      	ldr	r2, [r3, #32]
 800e5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	621a      	str	r2, [r3, #32]
 800e5bc:	e00e      	b.n	800e5dc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	643b      	str	r3, [r7, #64]	; 0x40
 800e5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d177      	bne.n	800e6e8 <USB_EPStartXfer+0x85e>
 800e5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	63bb      	str	r3, [r7, #56]	; 0x38
 800e604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e612:	b29b      	uxth	r3, r3
 800e614:	461a      	mov	r2, r3
 800e616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e618:	4413      	add	r3, r2
 800e61a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	011a      	lsls	r2, r3, #4
 800e62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62c:	4413      	add	r3, r2
 800e62e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e632:	637b      	str	r3, [r7, #52]	; 0x34
 800e634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e63e:	b29a      	uxth	r2, r3
 800e640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e642:	801a      	strh	r2, [r3, #0]
 800e644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e648:	2b3e      	cmp	r3, #62	; 0x3e
 800e64a:	d921      	bls.n	800e690 <USB_EPStartXfer+0x806>
 800e64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e650:	095b      	lsrs	r3, r3, #5
 800e652:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e65a:	f003 031f 	and.w	r3, r3, #31
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d104      	bne.n	800e66c <USB_EPStartXfer+0x7e2>
 800e662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e666:	3b01      	subs	r3, #1
 800e668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	b29a      	uxth	r2, r3
 800e672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e676:	b29b      	uxth	r3, r3
 800e678:	029b      	lsls	r3, r3, #10
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	4313      	orrs	r3, r2
 800e67e:	b29b      	uxth	r3, r3
 800e680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e688:	b29a      	uxth	r2, r3
 800e68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68c:	801a      	strh	r2, [r3, #0]
 800e68e:	e050      	b.n	800e732 <USB_EPStartXfer+0x8a8>
 800e690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10a      	bne.n	800e6ae <USB_EPStartXfer+0x824>
 800e698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6aa:	801a      	strh	r2, [r3, #0]
 800e6ac:	e041      	b.n	800e732 <USB_EPStartXfer+0x8a8>
 800e6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6b2:	085b      	lsrs	r3, r3, #1
 800e6b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6bc:	f003 0301 	and.w	r3, r3, #1
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d004      	beq.n	800e6ce <USB_EPStartXfer+0x844>
 800e6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	029b      	lsls	r3, r3, #10
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e4:	801a      	strh	r2, [r3, #0]
 800e6e6:	e024      	b.n	800e732 <USB_EPStartXfer+0x8a8>
 800e6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	785b      	ldrb	r3, [r3, #1]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d11c      	bne.n	800e732 <USB_EPStartXfer+0x8a8>
 800e6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e706:	b29b      	uxth	r3, r3
 800e708:	461a      	mov	r2, r3
 800e70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e70c:	4413      	add	r3, r2
 800e70e:	643b      	str	r3, [r7, #64]	; 0x40
 800e710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	011a      	lsls	r2, r3, #4
 800e71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e720:	4413      	add	r3, r2
 800e722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	895b      	ldrh	r3, [r3, #10]
 800e73e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	6959      	ldr	r1, [r3, #20]
 800e74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e752:	b29b      	uxth	r3, r3
 800e754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e758:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e75c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e760:	6800      	ldr	r0, [r0, #0]
 800e762:	f001 f871 	bl	800f848 <USB_WritePMA>
 800e766:	e227      	b.n	800ebb8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	6a1b      	ldr	r3, [r3, #32]
 800e774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e77c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4413      	add	r3, r2
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	b29b      	uxth	r3, r3
 800e796:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e79e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	441a      	add	r2, r3
 800e7bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e7c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f4:	4413      	add	r3, r2
 800e7f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	011a      	lsls	r2, r3, #4
 800e806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e808:	4413      	add	r3, r2
 800e80a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e80e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e814:	b29a      	uxth	r2, r3
 800e816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e818:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	891b      	ldrh	r3, [r3, #8]
 800e826:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6959      	ldr	r1, [r3, #20]
 800e836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e840:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e844:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e848:	6800      	ldr	r0, [r0, #0]
 800e84a:	f000 fffd 	bl	800f848 <USB_WritePMA>
 800e84e:	e1b3      	b.n	800ebb8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	6a1a      	ldr	r2, [r3, #32]
 800e85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e860:	1ad2      	subs	r2, r2, r3
 800e862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e87c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e890:	2b00      	cmp	r3, #0
 800e892:	f000 80c6 	beq.w	800ea22 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	673b      	str	r3, [r7, #112]	; 0x70
 800e8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	785b      	ldrb	r3, [r3, #1]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d177      	bne.n	800e9a2 <USB_EPStartXfer+0xb18>
 800e8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8d2:	4413      	add	r3, r2
 800e8d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	011a      	lsls	r2, r3, #4
 800e8e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e8ec:	667b      	str	r3, [r7, #100]	; 0x64
 800e8ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8fc:	801a      	strh	r2, [r3, #0]
 800e8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e902:	2b3e      	cmp	r3, #62	; 0x3e
 800e904:	d921      	bls.n	800e94a <USB_EPStartXfer+0xac0>
 800e906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e90a:	095b      	lsrs	r3, r3, #5
 800e90c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e914:	f003 031f 	and.w	r3, r3, #31
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <USB_EPStartXfer+0xa9c>
 800e91c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e920:	3b01      	subs	r3, #1
 800e922:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e928:	881b      	ldrh	r3, [r3, #0]
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e930:	b29b      	uxth	r3, r3
 800e932:	029b      	lsls	r3, r3, #10
 800e934:	b29b      	uxth	r3, r3
 800e936:	4313      	orrs	r3, r2
 800e938:	b29b      	uxth	r3, r3
 800e93a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e93e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e942:	b29a      	uxth	r2, r3
 800e944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e946:	801a      	strh	r2, [r3, #0]
 800e948:	e050      	b.n	800e9ec <USB_EPStartXfer+0xb62>
 800e94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10a      	bne.n	800e968 <USB_EPStartXfer+0xade>
 800e952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	b29b      	uxth	r3, r3
 800e958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e95c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e960:	b29a      	uxth	r2, r3
 800e962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e964:	801a      	strh	r2, [r3, #0]
 800e966:	e041      	b.n	800e9ec <USB_EPStartXfer+0xb62>
 800e968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e96c:	085b      	lsrs	r3, r3, #1
 800e96e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d004      	beq.n	800e988 <USB_EPStartXfer+0xafe>
 800e97e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e982:	3301      	adds	r3, #1
 800e984:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e98a:	881b      	ldrh	r3, [r3, #0]
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e992:	b29b      	uxth	r3, r3
 800e994:	029b      	lsls	r3, r3, #10
 800e996:	b29b      	uxth	r3, r3
 800e998:	4313      	orrs	r3, r2
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e99e:	801a      	strh	r2, [r3, #0]
 800e9a0:	e024      	b.n	800e9ec <USB_EPStartXfer+0xb62>
 800e9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	785b      	ldrb	r3, [r3, #1]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d11c      	bne.n	800e9ec <USB_EPStartXfer+0xb62>
 800e9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9c6:	4413      	add	r3, r2
 800e9c8:	673b      	str	r3, [r7, #112]	; 0x70
 800e9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	011a      	lsls	r2, r3, #4
 800e9d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9da:	4413      	add	r3, r2
 800e9dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e9e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	895b      	ldrh	r3, [r3, #10]
 800e9f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6959      	ldr	r1, [r3, #20]
 800ea08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ea12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ea16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ea1a:	6800      	ldr	r0, [r0, #0]
 800ea1c:	f000 ff14 	bl	800f848 <USB_WritePMA>
 800ea20:	e0ca      	b.n	800ebb8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ea22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	785b      	ldrb	r3, [r3, #1]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d177      	bne.n	800eb22 <USB_EPStartXfer+0xc98>
 800ea32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ea52:	4413      	add	r3, r2
 800ea54:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	011a      	lsls	r2, r3, #4
 800ea64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ea66:	4413      	add	r3, r2
 800ea68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ea6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea7c:	801a      	strh	r2, [r3, #0]
 800ea7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea82:	2b3e      	cmp	r3, #62	; 0x3e
 800ea84:	d921      	bls.n	800eaca <USB_EPStartXfer+0xc40>
 800ea86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea8a:	095b      	lsrs	r3, r3, #5
 800ea8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ea90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea94:	f003 031f 	and.w	r3, r3, #31
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d104      	bne.n	800eaa6 <USB_EPStartXfer+0xc1c>
 800ea9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eaa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaa8:	881b      	ldrh	r3, [r3, #0]
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	029b      	lsls	r3, r3, #10
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	4313      	orrs	r3, r2
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eabe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eac6:	801a      	strh	r2, [r3, #0]
 800eac8:	e05c      	b.n	800eb84 <USB_EPStartXfer+0xcfa>
 800eaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10a      	bne.n	800eae8 <USB_EPStartXfer+0xc5e>
 800ead2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead4:	881b      	ldrh	r3, [r3, #0]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eadc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eae4:	801a      	strh	r2, [r3, #0]
 800eae6:	e04d      	b.n	800eb84 <USB_EPStartXfer+0xcfa>
 800eae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaec:	085b      	lsrs	r3, r3, #1
 800eaee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d004      	beq.n	800eb08 <USB_EPStartXfer+0xc7e>
 800eafe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb02:	3301      	adds	r3, #1
 800eb04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eb08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb0a:	881b      	ldrh	r3, [r3, #0]
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	029b      	lsls	r3, r3, #10
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb1e:	801a      	strh	r2, [r3, #0]
 800eb20:	e030      	b.n	800eb84 <USB_EPStartXfer+0xcfa>
 800eb22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	785b      	ldrb	r3, [r3, #1]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d128      	bne.n	800eb84 <USB_EPStartXfer+0xcfa>
 800eb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	461a      	mov	r2, r3
 800eb52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb56:	4413      	add	r3, r2
 800eb58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	011a      	lsls	r2, r3, #4
 800eb6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb6e:	4413      	add	r3, r2
 800eb70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eb74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	891b      	ldrh	r3, [r3, #8]
 800eb90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6959      	ldr	r1, [r3, #20]
 800eba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ebaa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ebae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ebb2:	6800      	ldr	r0, [r0, #0]
 800ebb4:	f000 fe48 	bl	800f848 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ebb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	4413      	add	r3, r2
 800ebd2:	881b      	ldrh	r3, [r3, #0]
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebde:	817b      	strh	r3, [r7, #10]
 800ebe0:	897b      	ldrh	r3, [r7, #10]
 800ebe2:	f083 0310 	eor.w	r3, r3, #16
 800ebe6:	817b      	strh	r3, [r7, #10]
 800ebe8:	897b      	ldrh	r3, [r7, #10]
 800ebea:	f083 0320 	eor.w	r3, r3, #32
 800ebee:	817b      	strh	r3, [r7, #10]
 800ebf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	441a      	add	r2, r3
 800ec0a:	897b      	ldrh	r3, [r7, #10]
 800ec0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	8013      	strh	r3, [r2, #0]
 800ec20:	f000 bcde 	b.w	800f5e0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ec24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	7b1b      	ldrb	r3, [r3, #12]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f040 80bb 	bne.w	800edac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ec36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	699a      	ldr	r2, [r3, #24]
 800ec42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d917      	bls.n	800ec82 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ec52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ec62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	699a      	ldr	r2, [r3, #24]
 800ec6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec72:	1ad2      	subs	r2, r2, r3
 800ec74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	619a      	str	r2, [r3, #24]
 800ec80:	e00e      	b.n	800eca0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ec82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ec92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800eca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ecae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecc4:	4413      	add	r3, r2
 800ecc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ecca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	011a      	lsls	r2, r3, #4
 800ecd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecdc:	4413      	add	r3, r2
 800ecde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ece2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ece6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecea:	881b      	ldrh	r3, [r3, #0]
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecf8:	801a      	strh	r2, [r3, #0]
 800ecfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecfe:	2b3e      	cmp	r3, #62	; 0x3e
 800ed00:	d924      	bls.n	800ed4c <USB_EPStartXfer+0xec2>
 800ed02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed06:	095b      	lsrs	r3, r3, #5
 800ed08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed10:	f003 031f 	and.w	r3, r3, #31
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d104      	bne.n	800ed22 <USB_EPStartXfer+0xe98>
 800ed18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	029b      	lsls	r3, r3, #10
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	4313      	orrs	r3, r2
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed46:	801a      	strh	r2, [r3, #0]
 800ed48:	f000 bc10 	b.w	800f56c <USB_EPStartXfer+0x16e2>
 800ed4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10c      	bne.n	800ed6e <USB_EPStartXfer+0xee4>
 800ed54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed58:	881b      	ldrh	r3, [r3, #0]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed6a:	801a      	strh	r2, [r3, #0]
 800ed6c:	e3fe      	b.n	800f56c <USB_EPStartXfer+0x16e2>
 800ed6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed72:	085b      	lsrs	r3, r3, #1
 800ed74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed7c:	f003 0301 	and.w	r3, r3, #1
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d004      	beq.n	800ed8e <USB_EPStartXfer+0xf04>
 800ed84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed88:	3301      	adds	r3, #1
 800ed8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed92:	881b      	ldrh	r3, [r3, #0]
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	029b      	lsls	r3, r3, #10
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4313      	orrs	r3, r2
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eda8:	801a      	strh	r2, [r3, #0]
 800edaa:	e3df      	b.n	800f56c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800edac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	78db      	ldrb	r3, [r3, #3]
 800edb8:	2b02      	cmp	r3, #2
 800edba:	f040 8218 	bne.w	800f1ee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800edbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	785b      	ldrb	r3, [r3, #1]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f040 809d 	bne.w	800ef0a <USB_EPStartXfer+0x1080>
 800edd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800edde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ede2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edec:	b29b      	uxth	r3, r3
 800edee:	461a      	mov	r2, r3
 800edf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800edf4:	4413      	add	r3, r2
 800edf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800edfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	011a      	lsls	r2, r3, #4
 800ee08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ee12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ee16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee28:	801a      	strh	r2, [r3, #0]
 800ee2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	2b3e      	cmp	r3, #62	; 0x3e
 800ee38:	d92b      	bls.n	800ee92 <USB_EPStartXfer+0x1008>
 800ee3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	691b      	ldr	r3, [r3, #16]
 800ee46:	095b      	lsrs	r3, r3, #5
 800ee48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	f003 031f 	and.w	r3, r3, #31
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d104      	bne.n	800ee6a <USB_EPStartXfer+0xfe0>
 800ee60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee64:	3b01      	subs	r3, #1
 800ee66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	029b      	lsls	r3, r3, #10
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee8e:	801a      	strh	r2, [r3, #0]
 800ee90:	e070      	b.n	800ef74 <USB_EPStartXfer+0x10ea>
 800ee92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10c      	bne.n	800eebc <USB_EPStartXfer+0x1032>
 800eea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eea6:	881b      	ldrh	r3, [r3, #0]
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eeae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eeb8:	801a      	strh	r2, [r3, #0]
 800eeba:	e05b      	b.n	800ef74 <USB_EPStartXfer+0x10ea>
 800eebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	085b      	lsrs	r3, r3, #1
 800eeca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d004      	beq.n	800eeec <USB_EPStartXfer+0x1062>
 800eee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eee6:	3301      	adds	r3, #1
 800eee8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eeec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	029b      	lsls	r3, r3, #10
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4313      	orrs	r3, r2
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ef06:	801a      	strh	r2, [r3, #0]
 800ef08:	e034      	b.n	800ef74 <USB_EPStartXfer+0x10ea>
 800ef0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	785b      	ldrb	r3, [r3, #1]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d12c      	bne.n	800ef74 <USB_EPStartXfer+0x10ea>
 800ef1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ef28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	461a      	mov	r2, r3
 800ef3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ef3e:	4413      	add	r3, r2
 800ef40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ef44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	011a      	lsls	r2, r3, #4
 800ef52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ef56:	4413      	add	r3, r2
 800ef58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ef60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ef72:	801a      	strh	r2, [r3, #0]
 800ef74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ef82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	785b      	ldrb	r3, [r3, #1]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 809d 	bne.w	800f0ce <USB_EPStartXfer+0x1244>
 800ef94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800efa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	461a      	mov	r2, r3
 800efb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800efb8:	4413      	add	r3, r2
 800efba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800efbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	011a      	lsls	r2, r3, #4
 800efcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800efd0:	4413      	add	r3, r2
 800efd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800efd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800efda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efe6:	b29a      	uxth	r2, r3
 800efe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efec:	801a      	strh	r2, [r3, #0]
 800efee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	2b3e      	cmp	r3, #62	; 0x3e
 800effc:	d92b      	bls.n	800f056 <USB_EPStartXfer+0x11cc>
 800effe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	095b      	lsrs	r3, r3, #5
 800f00c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	f003 031f 	and.w	r3, r3, #31
 800f020:	2b00      	cmp	r3, #0
 800f022:	d104      	bne.n	800f02e <USB_EPStartXfer+0x11a4>
 800f024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f028:	3b01      	subs	r3, #1
 800f02a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f02e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	b29a      	uxth	r2, r3
 800f036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	029b      	lsls	r3, r3, #10
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4313      	orrs	r3, r2
 800f042:	b29b      	uxth	r3, r3
 800f044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f052:	801a      	strh	r2, [r3, #0]
 800f054:	e069      	b.n	800f12a <USB_EPStartXfer+0x12a0>
 800f056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10c      	bne.n	800f080 <USB_EPStartXfer+0x11f6>
 800f066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f076:	b29a      	uxth	r2, r3
 800f078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f07c:	801a      	strh	r2, [r3, #0]
 800f07e:	e054      	b.n	800f12a <USB_EPStartXfer+0x12a0>
 800f080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	085b      	lsrs	r3, r3, #1
 800f08e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d004      	beq.n	800f0b0 <USB_EPStartXfer+0x1226>
 800f0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f0b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	029b      	lsls	r3, r3, #10
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f0ca:	801a      	strh	r2, [r3, #0]
 800f0cc:	e02d      	b.n	800f12a <USB_EPStartXfer+0x12a0>
 800f0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	785b      	ldrb	r3, [r3, #1]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d125      	bne.n	800f12a <USB_EPStartXfer+0x12a0>
 800f0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f0f4:	4413      	add	r3, r2
 800f0f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	011a      	lsls	r2, r3, #4
 800f108:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f10c:	4413      	add	r3, r2
 800f10e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	b29a      	uxth	r2, r3
 800f124:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f128:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f12e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	69db      	ldr	r3, [r3, #28]
 800f136:	2b00      	cmp	r3, #0
 800f138:	f000 8218 	beq.w	800f56c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f15c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d005      	beq.n	800f174 <USB_EPStartXfer+0x12ea>
 800f168:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10d      	bne.n	800f190 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f174:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f040 81f5 	bne.w	800f56c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f182:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f040 81ee 	bne.w	800f56c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	4413      	add	r3, r2
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	441a      	add	r2, r3
 800f1d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f1d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	8013      	strh	r3, [r2, #0]
 800f1ec:	e1be      	b.n	800f56c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	78db      	ldrb	r3, [r3, #3]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	f040 81b4 	bne.w	800f568 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	699a      	ldr	r2, [r3, #24]
 800f20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d917      	bls.n	800f24c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	699a      	ldr	r2, [r3, #24]
 800f238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f23c:	1ad2      	subs	r2, r2, r3
 800f23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	619a      	str	r2, [r3, #24]
 800f24a:	e00e      	b.n	800f26a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2200      	movs	r2, #0
 800f268:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	785b      	ldrb	r3, [r3, #1]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f040 8085 	bne.w	800f386 <USB_EPStartXfer+0x14fc>
 800f27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f298:	b29b      	uxth	r3, r3
 800f29a:	461a      	mov	r2, r3
 800f29c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	011a      	lsls	r2, r3, #4
 800f2b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f2b8:	4413      	add	r3, r2
 800f2ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f2be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f2c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2d4:	801a      	strh	r2, [r3, #0]
 800f2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2da:	2b3e      	cmp	r3, #62	; 0x3e
 800f2dc:	d923      	bls.n	800f326 <USB_EPStartXfer+0x149c>
 800f2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2e2:	095b      	lsrs	r3, r3, #5
 800f2e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2ec:	f003 031f 	and.w	r3, r3, #31
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d104      	bne.n	800f2fe <USB_EPStartXfer+0x1474>
 800f2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f2fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	b29a      	uxth	r2, r3
 800f306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	029b      	lsls	r3, r3, #10
 800f30e:	b29b      	uxth	r3, r3
 800f310:	4313      	orrs	r3, r2
 800f312:	b29b      	uxth	r3, r3
 800f314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f322:	801a      	strh	r2, [r3, #0]
 800f324:	e060      	b.n	800f3e8 <USB_EPStartXfer+0x155e>
 800f326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10c      	bne.n	800f348 <USB_EPStartXfer+0x14be>
 800f32e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f332:	881b      	ldrh	r3, [r3, #0]
 800f334:	b29b      	uxth	r3, r3
 800f336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f33e:	b29a      	uxth	r2, r3
 800f340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f344:	801a      	strh	r2, [r3, #0]
 800f346:	e04f      	b.n	800f3e8 <USB_EPStartXfer+0x155e>
 800f348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f34c:	085b      	lsrs	r3, r3, #1
 800f34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d004      	beq.n	800f368 <USB_EPStartXfer+0x14de>
 800f35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f362:	3301      	adds	r3, #1
 800f364:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	b29a      	uxth	r2, r3
 800f370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f374:	b29b      	uxth	r3, r3
 800f376:	029b      	lsls	r3, r3, #10
 800f378:	b29b      	uxth	r3, r3
 800f37a:	4313      	orrs	r3, r2
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f382:	801a      	strh	r2, [r3, #0]
 800f384:	e030      	b.n	800f3e8 <USB_EPStartXfer+0x155e>
 800f386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	785b      	ldrb	r3, [r3, #1]
 800f392:	2b01      	cmp	r3, #1
 800f394:	d128      	bne.n	800f3e8 <USB_EPStartXfer+0x155e>
 800f396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f39a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f3ba:	4413      	add	r3, r2
 800f3bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	011a      	lsls	r2, r3, #4
 800f3ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f3d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f3e6:	801a      	strh	r2, [r3, #0]
 800f3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	785b      	ldrb	r3, [r3, #1]
 800f402:	2b00      	cmp	r3, #0
 800f404:	f040 8085 	bne.w	800f512 <USB_EPStartXfer+0x1688>
 800f408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f40c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f424:	b29b      	uxth	r3, r3
 800f426:	461a      	mov	r2, r3
 800f428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f42c:	4413      	add	r3, r2
 800f42e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	011a      	lsls	r2, r3, #4
 800f440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f444:	4413      	add	r3, r2
 800f446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f44a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f44e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	b29b      	uxth	r3, r3
 800f456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f460:	801a      	strh	r2, [r3, #0]
 800f462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f466:	2b3e      	cmp	r3, #62	; 0x3e
 800f468:	d923      	bls.n	800f4b2 <USB_EPStartXfer+0x1628>
 800f46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f46e:	095b      	lsrs	r3, r3, #5
 800f470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f478:	f003 031f 	and.w	r3, r3, #31
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d104      	bne.n	800f48a <USB_EPStartXfer+0x1600>
 800f480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f484:	3b01      	subs	r3, #1
 800f486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f48a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	b29a      	uxth	r2, r3
 800f492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f496:	b29b      	uxth	r3, r3
 800f498:	029b      	lsls	r3, r3, #10
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	4313      	orrs	r3, r2
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4ae:	801a      	strh	r2, [r3, #0]
 800f4b0:	e05c      	b.n	800f56c <USB_EPStartXfer+0x16e2>
 800f4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10c      	bne.n	800f4d4 <USB_EPStartXfer+0x164a>
 800f4ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4d0:	801a      	strh	r2, [r3, #0]
 800f4d2:	e04b      	b.n	800f56c <USB_EPStartXfer+0x16e2>
 800f4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4d8:	085b      	lsrs	r3, r3, #1
 800f4da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4e2:	f003 0301 	and.w	r3, r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d004      	beq.n	800f4f4 <USB_EPStartXfer+0x166a>
 800f4ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f4f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f500:	b29b      	uxth	r3, r3
 800f502:	029b      	lsls	r3, r3, #10
 800f504:	b29b      	uxth	r3, r3
 800f506:	4313      	orrs	r3, r2
 800f508:	b29a      	uxth	r2, r3
 800f50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f50e:	801a      	strh	r2, [r3, #0]
 800f510:	e02c      	b.n	800f56c <USB_EPStartXfer+0x16e2>
 800f512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	785b      	ldrb	r3, [r3, #1]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d124      	bne.n	800f56c <USB_EPStartXfer+0x16e2>
 800f522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f530:	b29b      	uxth	r3, r3
 800f532:	461a      	mov	r2, r3
 800f534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f538:	4413      	add	r3, r2
 800f53a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	011a      	lsls	r2, r3, #4
 800f54c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f550:	4413      	add	r3, r2
 800f552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f55e:	b29a      	uxth	r2, r3
 800f560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f564:	801a      	strh	r2, [r3, #0]
 800f566:	e001      	b.n	800f56c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f568:	2301      	movs	r3, #1
 800f56a:	e03a      	b.n	800f5e2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	b29b      	uxth	r3, r3
 800f58a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f592:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f596:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f59a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f59e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f5a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f5a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f5aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	441a      	add	r2, r3
 800f5c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f5cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	785b      	ldrb	r3, [r3, #1]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d020      	beq.n	800f640 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f614:	81bb      	strh	r3, [r7, #12]
 800f616:	89bb      	ldrh	r3, [r7, #12]
 800f618:	f083 0310 	eor.w	r3, r3, #16
 800f61c:	81bb      	strh	r3, [r7, #12]
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	441a      	add	r2, r3
 800f628:	89bb      	ldrh	r3, [r7, #12]
 800f62a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f62e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	8013      	strh	r3, [r2, #0]
 800f63e:	e01f      	b.n	800f680 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	4413      	add	r3, r2
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f656:	81fb      	strh	r3, [r7, #14]
 800f658:	89fb      	ldrh	r3, [r7, #14]
 800f65a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f65e:	81fb      	strh	r3, [r7, #14]
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	441a      	add	r2, r3
 800f66a:	89fb      	ldrh	r3, [r7, #14]
 800f66c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f68e:	b480      	push	{r7}
 800f690:	b087      	sub	sp, #28
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	7b1b      	ldrb	r3, [r3, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f040 809d 	bne.w	800f7dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	785b      	ldrb	r3, [r3, #1]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d04c      	beq.n	800f744 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	4413      	add	r3, r2
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	823b      	strh	r3, [r7, #16]
 800f6b8:	8a3b      	ldrh	r3, [r7, #16]
 800f6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d01b      	beq.n	800f6fa <USB_EPClearStall+0x6c>
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	4413      	add	r3, r2
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6d8:	81fb      	strh	r3, [r7, #14]
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	441a      	add	r2, r3
 800f6e4:	89fb      	ldrh	r3, [r7, #14]
 800f6e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	78db      	ldrb	r3, [r3, #3]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d06c      	beq.n	800f7dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4413      	add	r3, r2
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f718:	81bb      	strh	r3, [r7, #12]
 800f71a:	89bb      	ldrh	r3, [r7, #12]
 800f71c:	f083 0320 	eor.w	r3, r3, #32
 800f720:	81bb      	strh	r3, [r7, #12]
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	441a      	add	r2, r3
 800f72c:	89bb      	ldrh	r3, [r7, #12]
 800f72e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f73a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f73e:	b29b      	uxth	r3, r3
 800f740:	8013      	strh	r3, [r2, #0]
 800f742:	e04b      	b.n	800f7dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4413      	add	r3, r2
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	82fb      	strh	r3, [r7, #22]
 800f752:	8afb      	ldrh	r3, [r7, #22]
 800f754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d01b      	beq.n	800f794 <USB_EPClearStall+0x106>
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	4413      	add	r3, r2
 800f766:	881b      	ldrh	r3, [r3, #0]
 800f768:	b29b      	uxth	r3, r3
 800f76a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f772:	82bb      	strh	r3, [r7, #20]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	441a      	add	r2, r3
 800f77e:	8abb      	ldrh	r3, [r7, #20]
 800f780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f790:	b29b      	uxth	r3, r3
 800f792:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7aa:	827b      	strh	r3, [r7, #18]
 800f7ac:	8a7b      	ldrh	r3, [r7, #18]
 800f7ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f7b2:	827b      	strh	r3, [r7, #18]
 800f7b4:	8a7b      	ldrh	r3, [r7, #18]
 800f7b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f7ba:	827b      	strh	r3, [r7, #18]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	441a      	add	r2, r3
 800f7c6:	8a7b      	ldrh	r3, [r7, #18]
 800f7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	371c      	adds	r7, #28
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b083      	sub	sp, #12
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f7f6:	78fb      	ldrb	r3, [r7, #3]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d103      	bne.n	800f804 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2280      	movs	r2, #128	; 0x80
 800f800:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f836:	b29b      	uxth	r3, r3
 800f838:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f83a:	68fb      	ldr	r3, [r7, #12]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3714      	adds	r7, #20
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f848:	b480      	push	{r7}
 800f84a:	b08b      	sub	sp, #44	; 0x2c
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	4611      	mov	r1, r2
 800f854:	461a      	mov	r2, r3
 800f856:	460b      	mov	r3, r1
 800f858:	80fb      	strh	r3, [r7, #6]
 800f85a:	4613      	mov	r3, r2
 800f85c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f85e:	88bb      	ldrh	r3, [r7, #4]
 800f860:	3301      	adds	r3, #1
 800f862:	085b      	lsrs	r3, r3, #1
 800f864:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f86e:	88fb      	ldrh	r3, [r7, #6]
 800f870:	005a      	lsls	r2, r3, #1
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	4413      	add	r3, r2
 800f876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f87a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	627b      	str	r3, [r7, #36]	; 0x24
 800f880:	e01e      	b.n	800f8c0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	3301      	adds	r3, #1
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	021b      	lsls	r3, r3, #8
 800f890:	b21a      	sxth	r2, r3
 800f892:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f896:	4313      	orrs	r3, r2
 800f898:	b21b      	sxth	r3, r3
 800f89a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f89c:	6a3b      	ldr	r3, [r7, #32]
 800f89e:	8a7a      	ldrh	r2, [r7, #18]
 800f8a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f8a2:	6a3b      	ldr	r3, [r7, #32]
 800f8a4:	3302      	adds	r3, #2
 800f8a6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	3302      	adds	r3, #2
 800f8ac:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	627b      	str	r3, [r7, #36]	; 0x24
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1dd      	bne.n	800f882 <USB_WritePMA+0x3a>
  }
}
 800f8c6:	bf00      	nop
 800f8c8:	bf00      	nop
 800f8ca:	372c      	adds	r7, #44	; 0x2c
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b08b      	sub	sp, #44	; 0x2c
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	4611      	mov	r1, r2
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	80fb      	strh	r3, [r7, #6]
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f8ea:	88bb      	ldrh	r3, [r7, #4]
 800f8ec:	085b      	lsrs	r3, r3, #1
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f8fa:	88fb      	ldrh	r3, [r7, #6]
 800f8fc:	005a      	lsls	r2, r3, #1
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	4413      	add	r3, r2
 800f902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f906:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	627b      	str	r3, [r7, #36]	; 0x24
 800f90c:	e01b      	b.n	800f946 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	b29b      	uxth	r3, r3
 800f914:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f916:	6a3b      	ldr	r3, [r7, #32]
 800f918:	3302      	adds	r3, #2
 800f91a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	3301      	adds	r3, #1
 800f928:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	0a1b      	lsrs	r3, r3, #8
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	3301      	adds	r3, #1
 800f938:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	3302      	adds	r3, #2
 800f93e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	3b01      	subs	r3, #1
 800f944:	627b      	str	r3, [r7, #36]	; 0x24
 800f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1e0      	bne.n	800f90e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f94c:	88bb      	ldrh	r3, [r7, #4]
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	b29b      	uxth	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	d007      	beq.n	800f968 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800f958:	6a3b      	ldr	r3, [r7, #32]
 800f95a:	881b      	ldrh	r3, [r3, #0]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	b2da      	uxtb	r2, r3
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	701a      	strb	r2, [r3, #0]
  }
}
 800f968:	bf00      	nop
 800f96a:	372c      	adds	r7, #44	; 0x2c
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	607a      	str	r2, [r7, #4]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800f986:	89fb      	ldrh	r3, [r7, #14]
 800f988:	021b      	lsls	r3, r3, #8
 800f98a:	b21a      	sxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	b21b      	sxth	r3, r3
 800f992:	4313      	orrs	r3, r2
 800f994:	b21b      	sxth	r3, r3
 800f996:	b29b      	uxth	r3, r3
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3714      	adds	r7, #20
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2204      	movs	r2, #4
 800f9b8:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2204      	movs	r2, #4
 800f9be:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	3b01      	subs	r3, #1
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	b21a      	sxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	b21a      	sxth	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800fa6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800fa92:	2300      	movs	r3, #0
 800fa94:	73fb      	strb	r3, [r7, #15]
 800fa96:	e010      	b.n	800faba <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	330a      	adds	r3, #10
 800fa9e:	00db      	lsls	r3, r3, #3
 800faa0:	4413      	add	r3, r2
 800faa2:	2200      	movs	r2, #0
 800faa4:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800faa6:	7bfb      	ldrb	r3, [r7, #15]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	330a      	adds	r3, #10
 800faac:	00db      	lsls	r3, r3, #3
 800faae:	4413      	add	r3, r2
 800fab0:	2200      	movs	r2, #0
 800fab2:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
 800fab6:	3301      	adds	r3, #1
 800fab8:	73fb      	strb	r3, [r7, #15]
 800faba:	7bfb      	ldrb	r3, [r7, #15]
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	d9eb      	bls.n	800fa98 <UG_Init+0xf4>
   }

   gui = g;
 800fac0:	4a04      	ldr	r2, [pc, #16]	; (800fad4 <UG_Init+0x130>)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6013      	str	r3, [r2, #0]
   return 1;
 800fac6:	2301      	movs	r3, #1
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr
 800fad4:	20001ae0 	.word	0x20001ae0

0800fad8 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800fae0:	4b04      	ldr	r3, [pc, #16]	; (800faf4 <UG_FontSelect+0x1c>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fae8:	bf00      	nop
 800faea:	370c      	adds	r7, #12
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr
 800faf4:	20001ae0 	.word	0x20001ae0

0800faf8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af02      	add	r7, sp, #8
 800fafe:	4603      	mov	r3, r0
 800fb00:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800fb02:	4b0e      	ldr	r3, [pc, #56]	; (800fb3c <UG_FillScreen+0x44>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	b21a      	sxth	r2, r3
 800fb14:	4b09      	ldr	r3, [pc, #36]	; (800fb3c <UG_FillScreen+0x44>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	b219      	sxth	r1, r3
 800fb26:	88fb      	ldrh	r3, [r7, #6]
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	2000      	movs	r0, #0
 800fb30:	f000 f806 	bl	800fb40 <UG_FillFrame>
}
 800fb34:	bf00      	nop
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	20001ae0 	.word	0x20001ae0

0800fb40 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fb40:	b5b0      	push	{r4, r5, r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af02      	add	r7, sp, #8
 800fb46:	4604      	mov	r4, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	4623      	mov	r3, r4
 800fb50:	80fb      	strh	r3, [r7, #6]
 800fb52:	4603      	mov	r3, r0
 800fb54:	80bb      	strh	r3, [r7, #4]
 800fb56:	460b      	mov	r3, r1
 800fb58:	807b      	strh	r3, [r7, #2]
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800fb5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fb62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	da05      	bge.n	800fb76 <UG_FillFrame+0x36>
     swap(x1,x2);
 800fb6a:	88fb      	ldrh	r3, [r7, #6]
 800fb6c:	817b      	strh	r3, [r7, #10]
 800fb6e:	887b      	ldrh	r3, [r7, #2]
 800fb70:	80fb      	strh	r3, [r7, #6]
 800fb72:	897b      	ldrh	r3, [r7, #10]
 800fb74:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800fb76:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fb7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	da05      	bge.n	800fb8e <UG_FillFrame+0x4e>
     swap(y1,y2);
 800fb82:	88bb      	ldrh	r3, [r7, #4]
 800fb84:	813b      	strh	r3, [r7, #8]
 800fb86:	883b      	ldrh	r3, [r7, #0]
 800fb88:	80bb      	strh	r3, [r7, #4]
 800fb8a:	893b      	ldrh	r3, [r7, #8]
 800fb8c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800fb8e:	4b24      	ldr	r3, [pc, #144]	; (800fc20 <UG_FillFrame+0xe0>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d012      	beq.n	800fbc4 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fb9e:	4b20      	ldr	r3, [pc, #128]	; (800fc20 <UG_FillFrame+0xe0>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fba4:	461d      	mov	r5, r3
 800fba6:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fbaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fbae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fbb2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fbb6:	8c3b      	ldrh	r3, [r7, #32]
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	4623      	mov	r3, r4
 800fbbc:	47a8      	blx	r5
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d028      	beq.n	800fc16 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800fbc4:	88bb      	ldrh	r3, [r7, #4]
 800fbc6:	81bb      	strh	r3, [r7, #12]
 800fbc8:	e01e      	b.n	800fc08 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800fbca:	88fb      	ldrh	r3, [r7, #6]
 800fbcc:	81fb      	strh	r3, [r7, #14]
 800fbce:	e00f      	b.n	800fbf0 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800fbd0:	4b13      	ldr	r3, [pc, #76]	; (800fc20 <UG_FillFrame+0xe0>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	8c3a      	ldrh	r2, [r7, #32]
 800fbda:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800fbde:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800fbe2:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800fbe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	3301      	adds	r3, #1
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	81fb      	strh	r3, [r7, #14]
 800fbf0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fbf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	dde9      	ble.n	800fbd0 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800fbfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	3301      	adds	r3, #1
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	81bb      	strh	r3, [r7, #12]
 800fc08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fc0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	ddda      	ble.n	800fbca <UG_FillFrame+0x8a>
 800fc14:	e000      	b.n	800fc18 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fc16:	bf00      	nop
      }
   }
}
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	20001ae0 	.word	0x20001ae0

0800fc24 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fc24:	b590      	push	{r4, r7, lr}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af02      	add	r7, sp, #8
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	4608      	mov	r0, r1
 800fc2e:	4611      	mov	r1, r2
 800fc30:	461a      	mov	r2, r3
 800fc32:	4623      	mov	r3, r4
 800fc34:	80fb      	strh	r3, [r7, #6]
 800fc36:	4603      	mov	r3, r0
 800fc38:	80bb      	strh	r3, [r7, #4]
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	807b      	strh	r3, [r7, #2]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800fc42:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800fc46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fc4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fc4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fc52:	8b3b      	ldrh	r3, [r7, #24]
 800fc54:	9300      	str	r3, [sp, #0]
 800fc56:	4623      	mov	r3, r4
 800fc58:	f000 f912 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800fc5c:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fc60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fc64:	f9b7 1000 	ldrsh.w	r1, [r7]
 800fc68:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fc6c:	8b3b      	ldrh	r3, [r7, #24]
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	4623      	mov	r3, r4
 800fc72:	f000 f905 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800fc76:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fc7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fc7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fc82:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fc86:	8b3b      	ldrh	r3, [r7, #24]
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	4623      	mov	r3, r4
 800fc8c:	f000 f8f8 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800fc90:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fc94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fc98:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fc9c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800fca0:	8b3b      	ldrh	r3, [r7, #24]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	4623      	mov	r3, r4
 800fca6:	f000 f8eb 	bl	800fe80 <UG_DrawLine>
}
 800fcaa:	bf00      	nop
 800fcac:	370c      	adds	r7, #12
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd90      	pop	{r4, r7, pc}
	...

0800fcb4 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800fcb4:	b590      	push	{r4, r7, lr}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	4604      	mov	r4, r0
 800fcbc:	4608      	mov	r0, r1
 800fcbe:	4611      	mov	r1, r2
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4623      	mov	r3, r4
 800fcc4:	80fb      	strh	r3, [r7, #6]
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	80bb      	strh	r3, [r7, #4]
 800fcca:	460b      	mov	r3, r1
 800fccc:	807b      	strh	r3, [r7, #2]
 800fcce:	4613      	mov	r3, r2
 800fcd0:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800fcd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f2c0 80c8 	blt.w	800fe6c <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800fcdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f2c0 80c5 	blt.w	800fe70 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800fce6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f340 80c2 	ble.w	800fe74 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800fcf0:	887b      	ldrh	r3, [r7, #2]
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	f1c3 0301 	rsb	r3, r3, #1
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	823b      	strh	r3, [r7, #16]
   e = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	81fb      	strh	r3, [r7, #14]
   x = r;
 800fd06:	887b      	ldrh	r3, [r7, #2]
 800fd08:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800fd0e:	e0a5      	b.n	800fe5c <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800fd10:	4b5a      	ldr	r3, [pc, #360]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	88f9      	ldrh	r1, [r7, #6]
 800fd1a:	8afa      	ldrh	r2, [r7, #22]
 800fd1c:	1a8a      	subs	r2, r1, r2
 800fd1e:	b292      	uxth	r2, r2
 800fd20:	b210      	sxth	r0, r2
 800fd22:	88b9      	ldrh	r1, [r7, #4]
 800fd24:	8aba      	ldrh	r2, [r7, #20]
 800fd26:	440a      	add	r2, r1
 800fd28:	b292      	uxth	r2, r2
 800fd2a:	b211      	sxth	r1, r2
 800fd2c:	883a      	ldrh	r2, [r7, #0]
 800fd2e:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800fd30:	4b52      	ldr	r3, [pc, #328]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	88f9      	ldrh	r1, [r7, #6]
 800fd3a:	8afa      	ldrh	r2, [r7, #22]
 800fd3c:	1a8a      	subs	r2, r1, r2
 800fd3e:	b292      	uxth	r2, r2
 800fd40:	b210      	sxth	r0, r2
 800fd42:	88b9      	ldrh	r1, [r7, #4]
 800fd44:	8aba      	ldrh	r2, [r7, #20]
 800fd46:	1a8a      	subs	r2, r1, r2
 800fd48:	b292      	uxth	r2, r2
 800fd4a:	b211      	sxth	r1, r2
 800fd4c:	883a      	ldrh	r2, [r7, #0]
 800fd4e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 800fd50:	4b4a      	ldr	r3, [pc, #296]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	88f9      	ldrh	r1, [r7, #6]
 800fd5a:	8afa      	ldrh	r2, [r7, #22]
 800fd5c:	440a      	add	r2, r1
 800fd5e:	b292      	uxth	r2, r2
 800fd60:	b210      	sxth	r0, r2
 800fd62:	88b9      	ldrh	r1, [r7, #4]
 800fd64:	8aba      	ldrh	r2, [r7, #20]
 800fd66:	440a      	add	r2, r1
 800fd68:	b292      	uxth	r2, r2
 800fd6a:	b211      	sxth	r1, r2
 800fd6c:	883a      	ldrh	r2, [r7, #0]
 800fd6e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 800fd70:	4b42      	ldr	r3, [pc, #264]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	88f9      	ldrh	r1, [r7, #6]
 800fd7a:	8afa      	ldrh	r2, [r7, #22]
 800fd7c:	440a      	add	r2, r1
 800fd7e:	b292      	uxth	r2, r2
 800fd80:	b210      	sxth	r0, r2
 800fd82:	88b9      	ldrh	r1, [r7, #4]
 800fd84:	8aba      	ldrh	r2, [r7, #20]
 800fd86:	1a8a      	subs	r2, r1, r2
 800fd88:	b292      	uxth	r2, r2
 800fd8a:	b211      	sxth	r1, r2
 800fd8c:	883a      	ldrh	r2, [r7, #0]
 800fd8e:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 800fd90:	4b3a      	ldr	r3, [pc, #232]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	88f9      	ldrh	r1, [r7, #6]
 800fd9a:	8aba      	ldrh	r2, [r7, #20]
 800fd9c:	1a8a      	subs	r2, r1, r2
 800fd9e:	b292      	uxth	r2, r2
 800fda0:	b210      	sxth	r0, r2
 800fda2:	88b9      	ldrh	r1, [r7, #4]
 800fda4:	8afa      	ldrh	r2, [r7, #22]
 800fda6:	440a      	add	r2, r1
 800fda8:	b292      	uxth	r2, r2
 800fdaa:	b211      	sxth	r1, r2
 800fdac:	883a      	ldrh	r2, [r7, #0]
 800fdae:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 800fdb0:	4b32      	ldr	r3, [pc, #200]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	88f9      	ldrh	r1, [r7, #6]
 800fdba:	8aba      	ldrh	r2, [r7, #20]
 800fdbc:	1a8a      	subs	r2, r1, r2
 800fdbe:	b292      	uxth	r2, r2
 800fdc0:	b210      	sxth	r0, r2
 800fdc2:	88b9      	ldrh	r1, [r7, #4]
 800fdc4:	8afa      	ldrh	r2, [r7, #22]
 800fdc6:	1a8a      	subs	r2, r1, r2
 800fdc8:	b292      	uxth	r2, r2
 800fdca:	b211      	sxth	r1, r2
 800fdcc:	883a      	ldrh	r2, [r7, #0]
 800fdce:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 800fdd0:	4b2a      	ldr	r3, [pc, #168]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	88f9      	ldrh	r1, [r7, #6]
 800fdda:	8aba      	ldrh	r2, [r7, #20]
 800fddc:	440a      	add	r2, r1
 800fdde:	b292      	uxth	r2, r2
 800fde0:	b210      	sxth	r0, r2
 800fde2:	88b9      	ldrh	r1, [r7, #4]
 800fde4:	8afa      	ldrh	r2, [r7, #22]
 800fde6:	440a      	add	r2, r1
 800fde8:	b292      	uxth	r2, r2
 800fdea:	b211      	sxth	r1, r2
 800fdec:	883a      	ldrh	r2, [r7, #0]
 800fdee:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 800fdf0:	4b22      	ldr	r3, [pc, #136]	; (800fe7c <UG_DrawCircle+0x1c8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	88f9      	ldrh	r1, [r7, #6]
 800fdfa:	8aba      	ldrh	r2, [r7, #20]
 800fdfc:	440a      	add	r2, r1
 800fdfe:	b292      	uxth	r2, r2
 800fe00:	b210      	sxth	r0, r2
 800fe02:	88b9      	ldrh	r1, [r7, #4]
 800fe04:	8afa      	ldrh	r2, [r7, #22]
 800fe06:	1a8a      	subs	r2, r1, r2
 800fe08:	b292      	uxth	r2, r2
 800fe0a:	b211      	sxth	r1, r2
 800fe0c:	883a      	ldrh	r2, [r7, #0]
 800fe0e:	4798      	blx	r3

      y++;
 800fe10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	3301      	adds	r3, #1
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	82bb      	strh	r3, [r7, #20]
      e += yd;
 800fe1c:	89fa      	ldrh	r2, [r7, #14]
 800fe1e:	8a3b      	ldrh	r3, [r7, #16]
 800fe20:	4413      	add	r3, r2
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800fe26:	8a3b      	ldrh	r3, [r7, #16]
 800fe28:	3302      	adds	r3, #2
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 800fe2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fe32:	005a      	lsls	r2, r3, #1
 800fe34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe38:	4413      	add	r3, r2
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	dd0e      	ble.n	800fe5c <UG_DrawCircle+0x1a8>
      {
         x--;
 800fe3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	3b01      	subs	r3, #1
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	82fb      	strh	r3, [r7, #22]
         e += xd;
 800fe4a:	89fa      	ldrh	r2, [r7, #14]
 800fe4c:	8a7b      	ldrh	r3, [r7, #18]
 800fe4e:	4413      	add	r3, r2
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800fe54:	8a7b      	ldrh	r3, [r7, #18]
 800fe56:	3302      	adds	r3, #2
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 800fe5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	f6bf af53 	bge.w	800fd10 <UG_DrawCircle+0x5c>
 800fe6a:	e004      	b.n	800fe76 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 800fe6c:	bf00      	nop
 800fe6e:	e002      	b.n	800fe76 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 800fe70:	bf00      	nop
 800fe72:	e000      	b.n	800fe76 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 800fe74:	bf00      	nop
      }
   }
}
 800fe76:	371c      	adds	r7, #28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd90      	pop	{r4, r7, pc}
 800fe7c:	20001ae0 	.word	0x20001ae0

0800fe80 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fe80:	b5b0      	push	{r4, r5, r7, lr}
 800fe82:	b08a      	sub	sp, #40	; 0x28
 800fe84:	af02      	add	r7, sp, #8
 800fe86:	4604      	mov	r4, r0
 800fe88:	4608      	mov	r0, r1
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4623      	mov	r3, r4
 800fe90:	80fb      	strh	r3, [r7, #6]
 800fe92:	4603      	mov	r3, r0
 800fe94:	80bb      	strh	r3, [r7, #4]
 800fe96:	460b      	mov	r3, r1
 800fe98:	807b      	strh	r3, [r7, #2]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800fe9e:	4b67      	ldr	r3, [pc, #412]	; (801003c <UG_DrawLine+0x1bc>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fea6:	f003 0302 	and.w	r3, r3, #2
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d013      	beq.n	800fed6 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800feae:	4b63      	ldr	r3, [pc, #396]	; (801003c <UG_DrawLine+0x1bc>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feb4:	461d      	mov	r5, r3
 800feb6:	f9b7 4000 	ldrsh.w	r4, [r7]
 800feba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800febe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fec2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fec6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	4623      	mov	r3, r4
 800fecc:	47a8      	blx	r5
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f000 80ae 	beq.w	8010032 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800fed6:	887a      	ldrh	r2, [r7, #2]
 800fed8:	88fb      	ldrh	r3, [r7, #6]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	b29b      	uxth	r3, r3
 800fede:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800fee0:	883a      	ldrh	r2, [r7, #0]
 800fee2:	88bb      	ldrh	r3, [r7, #4]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800feea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	bfb8      	it	lt
 800fef2:	425b      	neglt	r3, r3
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800fef8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bfb8      	it	lt
 800ff00:	425b      	neglt	r3, r3
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800ff06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	dd01      	ble.n	800ff12 <UG_DrawLine+0x92>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e001      	b.n	800ff16 <UG_DrawLine+0x96>
 800ff12:	f04f 33ff 	mov.w	r3, #4294967295
 800ff16:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800ff18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	dd01      	ble.n	800ff24 <UG_DrawLine+0xa4>
 800ff20:	2301      	movs	r3, #1
 800ff22:	e001      	b.n	800ff28 <UG_DrawLine+0xa8>
 800ff24:	f04f 33ff 	mov.w	r3, #4294967295
 800ff28:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800ff2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff2e:	105b      	asrs	r3, r3, #1
 800ff30:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800ff32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ff36:	105b      	asrs	r3, r3, #1
 800ff38:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800ff3a:	88fb      	ldrh	r3, [r7, #6]
 800ff3c:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800ff3e:	88bb      	ldrh	r3, [r7, #4]
 800ff40:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800ff42:	4b3e      	ldr	r3, [pc, #248]	; (801003c <UG_DrawLine+0x1bc>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ff4c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800ff50:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800ff54:	4798      	blx	r3

   if( dxabs >= dyabs )
 800ff56:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ff5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	db33      	blt.n	800ffca <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800ff62:	2300      	movs	r3, #0
 800ff64:	83fb      	strh	r3, [r7, #30]
 800ff66:	e029      	b.n	800ffbc <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800ff68:	8b7a      	ldrh	r2, [r7, #26]
 800ff6a:	89fb      	ldrh	r3, [r7, #14]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800ff72:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ff76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	db09      	blt.n	800ff92 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800ff7e:	8b7a      	ldrh	r2, [r7, #26]
 800ff80:	8a3b      	ldrh	r3, [r7, #16]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800ff88:	8afa      	ldrh	r2, [r7, #22]
 800ff8a:	897b      	ldrh	r3, [r7, #10]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800ff92:	8b3a      	ldrh	r2, [r7, #24]
 800ff94:	89bb      	ldrh	r3, [r7, #12]
 800ff96:	4413      	add	r3, r2
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800ff9c:	4b27      	ldr	r3, [pc, #156]	; (801003c <UG_DrawLine+0x1bc>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ffa6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800ffaa:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800ffae:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800ffb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	83fb      	strh	r3, [r7, #30]
 800ffbc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ffc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	dbcf      	blt.n	800ff68 <UG_DrawLine+0xe8>
 800ffc8:	e034      	b.n	8010034 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800ffca:	2300      	movs	r3, #0
 800ffcc:	83fb      	strh	r3, [r7, #30]
 800ffce:	e029      	b.n	8010024 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800ffd0:	8bba      	ldrh	r2, [r7, #28]
 800ffd2:	8a3b      	ldrh	r3, [r7, #16]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800ffda:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ffde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	db09      	blt.n	800fffa <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800ffe6:	8bba      	ldrh	r2, [r7, #28]
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800fff0:	8b3a      	ldrh	r2, [r7, #24]
 800fff2:	89bb      	ldrh	r3, [r7, #12]
 800fff4:	4413      	add	r3, r2
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800fffa:	8afa      	ldrh	r2, [r7, #22]
 800fffc:	897b      	ldrh	r3, [r7, #10]
 800fffe:	4413      	add	r3, r2
 8010000:	b29b      	uxth	r3, r3
 8010002:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8010004:	4b0d      	ldr	r3, [pc, #52]	; (801003c <UG_DrawLine+0x1bc>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801000e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8010012:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8010016:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8010018:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801001c:	b29b      	uxth	r3, r3
 801001e:	3301      	adds	r3, #1
 8010020:	b29b      	uxth	r3, r3
 8010022:	83fb      	strh	r3, [r7, #30]
 8010024:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010028:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801002c:	429a      	cmp	r2, r3
 801002e:	dbcf      	blt.n	800ffd0 <UG_DrawLine+0x150>
 8010030:	e000      	b.n	8010034 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8010032:	bf00      	nop
      }
   }  
}
 8010034:	3720      	adds	r7, #32
 8010036:	46bd      	mov	sp, r7
 8010038:	bdb0      	pop	{r4, r5, r7, pc}
 801003a:	bf00      	nop
 801003c:	20001ae0 	.word	0x20001ae0

08010040 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b087      	sub	sp, #28
 8010044:	af02      	add	r7, sp, #8
 8010046:	4603      	mov	r3, r0
 8010048:	603a      	str	r2, [r7, #0]
 801004a:	80fb      	strh	r3, [r7, #6]
 801004c:	460b      	mov	r3, r1
 801004e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8010050:	88fb      	ldrh	r3, [r7, #6]
 8010052:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8010054:	88bb      	ldrh	r3, [r7, #4]
 8010056:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8010058:	4b44      	ldr	r3, [pc, #272]	; (801016c <UG_PutString+0x12c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005e:	4618      	mov	r0, r3
 8010060:	f000 fa96 	bl	8010590 <_UG_FontSelect>
   while ( *str != 0 )
 8010064:	e064      	b.n	8010130 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010066:	4b41      	ldr	r3, [pc, #260]	; (801016c <UG_PutString+0x12c>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8010072:	463b      	mov	r3, r7
 8010074:	4618      	mov	r0, r3
 8010076:	f000 f8c7 	bl	8010208 <_UG_DecodeUTF8>
 801007a:	4603      	mov	r3, r0
 801007c:	817b      	strh	r3, [r7, #10]
 801007e:	e004      	b.n	801008a <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	1c5a      	adds	r2, r3, #1
 8010084:	603a      	str	r2, [r7, #0]
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 801008a:	897b      	ldrh	r3, [r7, #10]
 801008c:	2b0a      	cmp	r3, #10
 801008e:	d105      	bne.n	801009c <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8010090:	4b36      	ldr	r3, [pc, #216]	; (801016c <UG_PutString+0x12c>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	81fb      	strh	r3, [r7, #14]
         continue;
 801009a:	e049      	b.n	8010130 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 801009c:	897b      	ldrh	r3, [r7, #10]
 801009e:	2100      	movs	r1, #0
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 f929 	bl	80102f8 <_UG_GetCharData>
 80100a6:	4603      	mov	r3, r0
 80100a8:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80100aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80100ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b2:	d100      	bne.n	80100b6 <UG_PutString+0x76>
 80100b4:	e03c      	b.n	8010130 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80100b6:	4b2d      	ldr	r3, [pc, #180]	; (801016c <UG_PutString+0x12c>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100c0:	4619      	mov	r1, r3
 80100c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80100c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80100ca:	4413      	add	r3, r2
 80100cc:	4299      	cmp	r1, r3
 80100ce:	dc12      	bgt.n	80100f6 <UG_PutString+0xb6>
      {
         xp = x;
 80100d0:	88fb      	ldrh	r3, [r7, #6]
 80100d2:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80100d4:	4b25      	ldr	r3, [pc, #148]	; (801016c <UG_PutString+0x12c>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100dc:	b21a      	sxth	r2, r3
 80100de:	4b23      	ldr	r3, [pc, #140]	; (801016c <UG_PutString+0x12c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 80100e6:	b21b      	sxth	r3, r3
 80100e8:	4413      	add	r3, r2
 80100ea:	b21b      	sxth	r3, r3
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	89bb      	ldrh	r3, [r7, #12]
 80100f0:	4413      	add	r3, r2
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80100f6:	4b1d      	ldr	r3, [pc, #116]	; (801016c <UG_PutString+0x12c>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 80100fe:	4b1b      	ldr	r3, [pc, #108]	; (801016c <UG_PutString+0x12c>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8010106:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801010a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801010e:	8978      	ldrh	r0, [r7, #10]
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	4623      	mov	r3, r4
 8010114:	f000 fabe 	bl	8010694 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8010118:	4b14      	ldr	r3, [pc, #80]	; (801016c <UG_PutString+0x12c>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8010120:	b29a      	uxth	r2, r3
 8010122:	893b      	ldrh	r3, [r7, #8]
 8010124:	4413      	add	r3, r2
 8010126:	b29a      	uxth	r2, r3
 8010128:	89fb      	ldrh	r3, [r7, #14]
 801012a:	4413      	add	r3, r2
 801012c:	b29b      	uxth	r3, r3
 801012e:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d196      	bne.n	8010066 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8010138:	4b0c      	ldr	r3, [pc, #48]	; (801016c <UG_PutString+0x12c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010140:	f003 0302 	and.w	r3, r3, #2
 8010144:	2b00      	cmp	r3, #0
 8010146:	d00c      	beq.n	8010162 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8010148:	4b08      	ldr	r3, [pc, #32]	; (801016c <UG_PutString+0x12c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801014e:	461c      	mov	r4, r3
 8010150:	f04f 33ff 	mov.w	r3, #4294967295
 8010154:	f04f 32ff 	mov.w	r2, #4294967295
 8010158:	f04f 31ff 	mov.w	r1, #4294967295
 801015c:	f04f 30ff 	mov.w	r0, #4294967295
 8010160:	47a0      	blx	r4
}
 8010162:	bf00      	nop
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	bd90      	pop	{r4, r7, pc}
 801016a:	bf00      	nop
 801016c:	20001ae0 	.word	0x20001ae0

08010170 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 801017a:	4b05      	ldr	r3, [pc, #20]	; (8010190 <UG_SetForecolor+0x20>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	88fa      	ldrh	r2, [r7, #6]
 8010180:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr
 8010190:	20001ae0 	.word	0x20001ae0

08010194 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	4603      	mov	r3, r0
 801019c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 801019e:	4b05      	ldr	r3, [pc, #20]	; (80101b4 <UG_SetBackcolor+0x20>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	88fa      	ldrh	r2, [r7, #6]
 80101a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	20001ae0 	.word	0x20001ae0

080101b8 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80101c2:	4b06      	ldr	r3, [pc, #24]	; (80101dc <UG_FontSetHSpace+0x24>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	88fa      	ldrh	r2, [r7, #6]
 80101c8:	b252      	sxtb	r2, r2
 80101ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	20001ae0 	.word	0x20001ae0

080101e0 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	4603      	mov	r3, r0
 80101e8:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80101ea:	4b06      	ldr	r3, [pc, #24]	; (8010204 <UG_FontSetVSpace+0x24>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	88fa      	ldrh	r2, [r7, #6]
 80101f0:	b252      	sxtb	r2, r2
 80101f2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80101f6:	bf00      	nop
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	20001ae0 	.word	0x20001ae0

08010208 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]

  char c=**str;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8010218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801021c:	2b00      	cmp	r3, #0
 801021e:	db07      	blt.n	8010230 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	601a      	str	r2, [r3, #0]
    return c;
 801022a:	7bfb      	ldrb	r3, [r7, #15]
 801022c:	b29b      	uxth	r3, r3
 801022e:	e05c      	b.n	80102ea <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8010230:	2300      	movs	r3, #0
 8010232:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8010234:	2300      	movs	r3, #0
 8010236:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8010238:	e04f      	b.n	80102da <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	1c5a      	adds	r2, r3, #1
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 801024c:	7bbb      	ldrb	r3, [r7, #14]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d130      	bne.n	80102b4 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8010252:	7bfb      	ldrb	r3, [r7, #15]
 8010254:	2bdf      	cmp	r3, #223	; 0xdf
 8010256:	d806      	bhi.n	8010266 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8010258:	2301      	movs	r3, #1
 801025a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	f003 031f 	and.w	r3, r3, #31
 8010262:	73fb      	strb	r3, [r7, #15]
 8010264:	e023      	b.n	80102ae <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8010266:	7bfb      	ldrb	r3, [r7, #15]
 8010268:	2bef      	cmp	r3, #239	; 0xef
 801026a:	d806      	bhi.n	801027a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 801026c:	2302      	movs	r3, #2
 801026e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8010270:	7bfb      	ldrb	r3, [r7, #15]
 8010272:	f003 030f 	and.w	r3, r3, #15
 8010276:	73fb      	strb	r3, [r7, #15]
 8010278:	e019      	b.n	80102ae <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 801027a:	7bfb      	ldrb	r3, [r7, #15]
 801027c:	2bf7      	cmp	r3, #247	; 0xf7
 801027e:	d806      	bhi.n	801028e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8010280:	2303      	movs	r3, #3
 8010282:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8010284:	7bfb      	ldrb	r3, [r7, #15]
 8010286:	f003 0307 	and.w	r3, r3, #7
 801028a:	73fb      	strb	r3, [r7, #15]
 801028c:	e00f      	b.n	80102ae <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 801028e:	7bfb      	ldrb	r3, [r7, #15]
 8010290:	2bfb      	cmp	r3, #251	; 0xfb
 8010292:	d806      	bhi.n	80102a2 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8010294:	2304      	movs	r3, #4
 8010296:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8010298:	7bfb      	ldrb	r3, [r7, #15]
 801029a:	f003 0303 	and.w	r3, r3, #3
 801029e:	73fb      	strb	r3, [r7, #15]
 80102a0:	e005      	b.n	80102ae <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80102a2:	2305      	movs	r3, #5
 80102a4:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80102ae:	7bfb      	ldrb	r3, [r7, #15]
 80102b0:	81bb      	strh	r3, [r7, #12]
 80102b2:	e012      	b.n	80102da <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80102b4:	89bb      	ldrh	r3, [r7, #12]
 80102b6:	019b      	lsls	r3, r3, #6
 80102b8:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80102ba:	7bfb      	ldrb	r3, [r7, #15]
 80102bc:	b21b      	sxth	r3, r3
 80102be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102c2:	b21a      	sxth	r2, r3
 80102c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80102c8:	4313      	orrs	r3, r2
 80102ca:	b21b      	sxth	r3, r3
 80102cc:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80102ce:	7bbb      	ldrb	r3, [r7, #14]
 80102d0:	3b01      	subs	r3, #1
 80102d2:	73bb      	strb	r3, [r7, #14]
 80102d4:	7bbb      	ldrb	r3, [r7, #14]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d005      	beq.n	80102e6 <_UG_DecodeUTF8+0xde>
  while(**str)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1aa      	bne.n	801023a <_UG_DecodeUTF8+0x32>
 80102e4:	e000      	b.n	80102e8 <_UG_DecodeUTF8+0xe0>
        break;
 80102e6:	bf00      	nop
    }
  }
  return encoding;
 80102e8:	89bb      	ldrh	r3, [r7, #12]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
	...

080102f8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	6039      	str	r1, [r7, #0]
 8010302:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8010304:	2300      	movs	r3, #0
 8010306:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8010308:	2300      	movs	r3, #0
 801030a:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 801030c:	2300      	movs	r3, #0
 801030e:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8010310:	2300      	movs	r3, #0
 8010312:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8010314:	2300      	movs	r3, #0
 8010316:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8010318:	4b98      	ldr	r3, [pc, #608]	; (801057c <_UG_GetCharData+0x284>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801031e:	4b98      	ldr	r3, [pc, #608]	; (8010580 <_UG_GetCharData+0x288>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d10f      	bne.n	8010346 <_UG_GetCharData+0x4e>
 8010326:	4b97      	ldr	r3, [pc, #604]	; (8010584 <_UG_GetCharData+0x28c>)
 8010328:	881b      	ldrh	r3, [r3, #0]
 801032a:	88fa      	ldrh	r2, [r7, #6]
 801032c:	429a      	cmp	r2, r3
 801032e:	d10a      	bne.n	8010346 <_UG_GetCharData+0x4e>
    if(p){
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d003      	beq.n	801033e <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8010336:	4b94      	ldr	r3, [pc, #592]	; (8010588 <_UG_GetCharData+0x290>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 801033e:	4b93      	ldr	r3, [pc, #588]	; (801058c <_UG_GetCharData+0x294>)
 8010340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010344:	e116      	b.n	8010574 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8010346:	4b8d      	ldr	r3, [pc, #564]	; (801057c <_UG_GetCharData+0x284>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801034e:	2b00      	cmp	r3, #0
 8010350:	f000 80cc 	beq.w	80104ec <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8010354:	88fb      	ldrh	r3, [r7, #6]
 8010356:	2bfc      	cmp	r3, #252	; 0xfc
 8010358:	f300 80c8 	bgt.w	80104ec <_UG_GetCharData+0x1f4>
 801035c:	2bd6      	cmp	r3, #214	; 0xd6
 801035e:	da09      	bge.n	8010374 <_UG_GetCharData+0x7c>
 8010360:	2bc4      	cmp	r3, #196	; 0xc4
 8010362:	d06c      	beq.n	801043e <_UG_GetCharData+0x146>
 8010364:	2bc4      	cmp	r3, #196	; 0xc4
 8010366:	f300 80c1 	bgt.w	80104ec <_UG_GetCharData+0x1f4>
 801036a:	2bb0      	cmp	r3, #176	; 0xb0
 801036c:	d06d      	beq.n	801044a <_UG_GetCharData+0x152>
 801036e:	2bb5      	cmp	r3, #181	; 0xb5
 8010370:	d068      	beq.n	8010444 <_UG_GetCharData+0x14c>
 8010372:	e06e      	b.n	8010452 <_UG_GetCharData+0x15a>
 8010374:	3bd6      	subs	r3, #214	; 0xd6
 8010376:	2b26      	cmp	r3, #38	; 0x26
 8010378:	f200 80b8 	bhi.w	80104ec <_UG_GetCharData+0x1f4>
 801037c:	a201      	add	r2, pc, #4	; (adr r2, 8010384 <_UG_GetCharData+0x8c>)
 801037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010382:	bf00      	nop
 8010384:	08010427 	.word	0x08010427
 8010388:	080104ed 	.word	0x080104ed
 801038c:	080104ed 	.word	0x080104ed
 8010390:	080104ed 	.word	0x080104ed
 8010394:	080104ed 	.word	0x080104ed
 8010398:	080104ed 	.word	0x080104ed
 801039c:	08010433 	.word	0x08010433
 80103a0:	080104ed 	.word	0x080104ed
 80103a4:	080104ed 	.word	0x080104ed
 80103a8:	080104ed 	.word	0x080104ed
 80103ac:	080104ed 	.word	0x080104ed
 80103b0:	080104ed 	.word	0x080104ed
 80103b4:	080104ed 	.word	0x080104ed
 80103b8:	080104ed 	.word	0x080104ed
 80103bc:	08010439 	.word	0x08010439
 80103c0:	080104ed 	.word	0x080104ed
 80103c4:	080104ed 	.word	0x080104ed
 80103c8:	080104ed 	.word	0x080104ed
 80103cc:	080104ed 	.word	0x080104ed
 80103d0:	080104ed 	.word	0x080104ed
 80103d4:	080104ed 	.word	0x080104ed
 80103d8:	080104ed 	.word	0x080104ed
 80103dc:	080104ed 	.word	0x080104ed
 80103e0:	080104ed 	.word	0x080104ed
 80103e4:	080104ed 	.word	0x080104ed
 80103e8:	080104ed 	.word	0x080104ed
 80103ec:	080104ed 	.word	0x080104ed
 80103f0:	080104ed 	.word	0x080104ed
 80103f4:	080104ed 	.word	0x080104ed
 80103f8:	080104ed 	.word	0x080104ed
 80103fc:	080104ed 	.word	0x080104ed
 8010400:	080104ed 	.word	0x080104ed
 8010404:	08010421 	.word	0x08010421
 8010408:	080104ed 	.word	0x080104ed
 801040c:	080104ed 	.word	0x080104ed
 8010410:	080104ed 	.word	0x080104ed
 8010414:	080104ed 	.word	0x080104ed
 8010418:	080104ed 	.word	0x080104ed
 801041c:	0801042d 	.word	0x0801042d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8010420:	2394      	movs	r3, #148	; 0x94
 8010422:	80fb      	strh	r3, [r7, #6]
 8010424:	e015      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8010426:	2399      	movs	r3, #153	; 0x99
 8010428:	80fb      	strh	r3, [r7, #6]
 801042a:	e012      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 801042c:	2381      	movs	r3, #129	; 0x81
 801042e:	80fb      	strh	r3, [r7, #6]
 8010430:	e00f      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8010432:	239a      	movs	r3, #154	; 0x9a
 8010434:	80fb      	strh	r3, [r7, #6]
 8010436:	e00c      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8010438:	2384      	movs	r3, #132	; 0x84
 801043a:	80fb      	strh	r3, [r7, #6]
 801043c:	e009      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 801043e:	238e      	movs	r3, #142	; 0x8e
 8010440:	80fb      	strh	r3, [r7, #6]
 8010442:	e006      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8010444:	23e6      	movs	r3, #230	; 0xe6
 8010446:	80fb      	strh	r3, [r7, #6]
 8010448:	e003      	b.n	8010452 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 801044a:	23f8      	movs	r3, #248	; 0xf8
 801044c:	80fb      	strh	r3, [r7, #6]
 801044e:	bf00      	nop
 8010450:	e04c      	b.n	80104ec <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8010452:	e04b      	b.n	80104ec <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8010454:	4b49      	ldr	r3, [pc, #292]	; (801057c <_UG_GetCharData+0x284>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801045a:	8a7a      	ldrh	r2, [r7, #18]
 801045c:	0052      	lsls	r2, r2, #1
 801045e:	4413      	add	r3, r2
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff fa87 	bl	800f974 <ptr_8to16>
 8010466:	4603      	mov	r3, r0
 8010468:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 801046a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801046e:	2b00      	cmp	r3, #0
 8010470:	da06      	bge.n	8010480 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8010472:	89fb      	ldrh	r3, [r7, #14]
 8010474:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010478:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 801047a:	2301      	movs	r3, #1
 801047c:	747b      	strb	r3, [r7, #17]
 801047e:	e032      	b.n	80104e6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8010480:	7c7b      	ldrb	r3, [r7, #17]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d021      	beq.n	80104ca <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8010486:	88fa      	ldrh	r2, [r7, #6]
 8010488:	8afb      	ldrh	r3, [r7, #22]
 801048a:	429a      	cmp	r2, r3
 801048c:	d30d      	bcc.n	80104aa <_UG_GetCharData+0x1b2>
 801048e:	88fa      	ldrh	r2, [r7, #6]
 8010490:	89fb      	ldrh	r3, [r7, #14]
 8010492:	429a      	cmp	r2, r3
 8010494:	d809      	bhi.n	80104aa <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8010496:	88fa      	ldrh	r2, [r7, #6]
 8010498:	8afb      	ldrh	r3, [r7, #22]
 801049a:	1ad3      	subs	r3, r2, r3
 801049c:	b29a      	uxth	r2, r3
 801049e:	8abb      	ldrh	r3, [r7, #20]
 80104a0:	4413      	add	r3, r2
 80104a2:	82bb      	strh	r3, [r7, #20]
        found=1;
 80104a4:	2301      	movs	r3, #1
 80104a6:	743b      	strb	r3, [r7, #16]
        break;
 80104a8:	e02a      	b.n	8010500 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80104aa:	88fa      	ldrh	r2, [r7, #6]
 80104ac:	8afb      	ldrh	r3, [r7, #22]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d323      	bcc.n	80104fa <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80104b2:	89fa      	ldrh	r2, [r7, #14]
 80104b4:	8afb      	ldrh	r3, [r7, #22]
 80104b6:	1ad3      	subs	r3, r2, r3
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	8abb      	ldrh	r3, [r7, #20]
 80104bc:	4413      	add	r3, r2
 80104be:	b29b      	uxth	r3, r3
 80104c0:	3301      	adds	r3, #1
 80104c2:	82bb      	strh	r3, [r7, #20]
      range=0;
 80104c4:	2300      	movs	r3, #0
 80104c6:	747b      	strb	r3, [r7, #17]
 80104c8:	e00d      	b.n	80104e6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80104ca:	88fa      	ldrh	r2, [r7, #6]
 80104cc:	89fb      	ldrh	r3, [r7, #14]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d102      	bne.n	80104d8 <_UG_GetCharData+0x1e0>
      {
        found=1;
 80104d2:	2301      	movs	r3, #1
 80104d4:	743b      	strb	r3, [r7, #16]
        break;
 80104d6:	e013      	b.n	8010500 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80104d8:	88fa      	ldrh	r2, [r7, #6]
 80104da:	89fb      	ldrh	r3, [r7, #14]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d30e      	bcc.n	80104fe <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80104e0:	8abb      	ldrh	r3, [r7, #20]
 80104e2:	3301      	adds	r3, #1
 80104e4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80104e6:	8a7b      	ldrh	r3, [r7, #18]
 80104e8:	3301      	adds	r3, #1
 80104ea:	827b      	strh	r3, [r7, #18]
 80104ec:	4b23      	ldr	r3, [pc, #140]	; (801057c <_UG_GetCharData+0x284>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80104f2:	8a7a      	ldrh	r2, [r7, #18]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d3ad      	bcc.n	8010454 <_UG_GetCharData+0x15c>
 80104f8:	e002      	b.n	8010500 <_UG_GetCharData+0x208>
        break;
 80104fa:	bf00      	nop
 80104fc:	e000      	b.n	8010500 <_UG_GetCharData+0x208>
        break;
 80104fe:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8010500:	7c3b      	ldrb	r3, [r7, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d034      	beq.n	8010570 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8010506:	4b1d      	ldr	r3, [pc, #116]	; (801057c <_UG_GetCharData+0x284>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801050c:	4a1c      	ldr	r2, [pc, #112]	; (8010580 <_UG_GetCharData+0x288>)
 801050e:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8010510:	4a1c      	ldr	r2, [pc, #112]	; (8010584 <_UG_GetCharData+0x28c>)
 8010512:	88fb      	ldrh	r3, [r7, #6]
 8010514:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8010516:	4b19      	ldr	r3, [pc, #100]	; (801057c <_UG_GetCharData+0x284>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051c:	8aba      	ldrh	r2, [r7, #20]
 801051e:	4917      	ldr	r1, [pc, #92]	; (801057c <_UG_GetCharData+0x284>)
 8010520:	6809      	ldr	r1, [r1, #0]
 8010522:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8010524:	fb01 f202 	mul.w	r2, r1, r2
 8010528:	4413      	add	r3, r2
 801052a:	4a17      	ldr	r2, [pc, #92]	; (8010588 <_UG_GetCharData+0x290>)
 801052c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 801052e:	4b13      	ldr	r3, [pc, #76]	; (801057c <_UG_GetCharData+0x284>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010534:	2b00      	cmp	r3, #0
 8010536:	d009      	beq.n	801054c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8010538:	4b10      	ldr	r3, [pc, #64]	; (801057c <_UG_GetCharData+0x284>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801053e:	8abb      	ldrh	r3, [r7, #20]
 8010540:	4413      	add	r3, r2
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	b21a      	sxth	r2, r3
 8010546:	4b11      	ldr	r3, [pc, #68]	; (801058c <_UG_GetCharData+0x294>)
 8010548:	801a      	strh	r2, [r3, #0]
 801054a:	e006      	b.n	801055a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 801054c:	4b0b      	ldr	r3, [pc, #44]	; (801057c <_UG_GetCharData+0x284>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010554:	b21a      	sxth	r2, r3
 8010556:	4b0d      	ldr	r3, [pc, #52]	; (801058c <_UG_GetCharData+0x294>)
 8010558:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d003      	beq.n	8010568 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8010560:	4b09      	ldr	r3, [pc, #36]	; (8010588 <_UG_GetCharData+0x290>)
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8010568:	4b08      	ldr	r3, [pc, #32]	; (801058c <_UG_GetCharData+0x294>)
 801056a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801056e:	e001      	b.n	8010574 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010574:	4618      	mov	r0, r3
 8010576:	3718      	adds	r7, #24
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20001ae0 	.word	0x20001ae0
 8010580:	20001ae4 	.word	0x20001ae4
 8010584:	20001ae8 	.word	0x20001ae8
 8010588:	20001aec 	.word	0x20001aec
 801058c:	20001af0 	.word	0x20001af0

08010590 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8010590:	b590      	push	{r4, r7, lr}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8010598:	4b3d      	ldr	r3, [pc, #244]	; (8010690 <_UG_FontSelect+0x100>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d070      	beq.n	8010686 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80105a4:	4b3a      	ldr	r3, [pc, #232]	; (8010690 <_UG_FontSelect+0x100>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	781a      	ldrb	r2, [r3, #0]
 80105b0:	4b37      	ldr	r3, [pc, #220]	; (8010690 <_UG_FontSelect+0x100>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80105b8:	b2d2      	uxtb	r2, r2
 80105ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	1c5a      	adds	r2, r3, #1
 80105c2:	607a      	str	r2, [r7, #4]
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	b25b      	sxtb	r3, r3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	da01      	bge.n	80105d0 <_UG_FontSelect+0x40>
 80105cc:	2201      	movs	r2, #1
 80105ce:	e000      	b.n	80105d2 <_UG_FontSelect+0x42>
 80105d0:	2200      	movs	r2, #0
 80105d2:	4b2f      	ldr	r3, [pc, #188]	; (8010690 <_UG_FontSelect+0x100>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	b2d2      	uxtb	r2, r2
 80105d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	1c5a      	adds	r2, r3, #1
 80105e0:	607a      	str	r2, [r7, #4]
 80105e2:	4a2b      	ldr	r2, [pc, #172]	; (8010690 <_UG_FontSelect+0x100>)
 80105e4:	6812      	ldr	r2, [r2, #0]
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	607a      	str	r2, [r7, #4]
 80105f2:	4a27      	ldr	r2, [pc, #156]	; (8010690 <_UG_FontSelect+0x100>)
 80105f4:	6812      	ldr	r2, [r2, #0]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80105fc:	4b24      	ldr	r3, [pc, #144]	; (8010690 <_UG_FontSelect+0x100>)
 80105fe:	681c      	ldr	r4, [r3, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f7ff f9b7 	bl	800f974 <ptr_8to16>
 8010606:	4603      	mov	r3, r0
 8010608:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	3302      	adds	r3, #2
 801060e:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8010610:	4b1f      	ldr	r3, [pc, #124]	; (8010690 <_UG_FontSelect+0x100>)
 8010612:	681c      	ldr	r4, [r3, #0]
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff f9ad 	bl	800f974 <ptr_8to16>
 801061a:	4603      	mov	r3, r0
 801061c:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	3302      	adds	r3, #2
 8010622:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8010624:	4b1a      	ldr	r3, [pc, #104]	; (8010690 <_UG_FontSelect+0x100>)
 8010626:	681c      	ldr	r4, [r3, #0]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff f9a3 	bl	800f974 <ptr_8to16>
 801062e:	4603      	mov	r3, r0
 8010630:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	3302      	adds	r3, #2
 8010636:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	607a      	str	r2, [r7, #4]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00b      	beq.n	801065c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8010644:	4b12      	ldr	r3, [pc, #72]	; (8010690 <_UG_FontSelect+0x100>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 801064c:	4b10      	ldr	r3, [pc, #64]	; (8010690 <_UG_FontSelect+0x100>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010652:	461a      	mov	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4413      	add	r3, r2
 8010658:	607b      	str	r3, [r7, #4]
 801065a:	e003      	b.n	8010664 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 801065c:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <_UG_FontSelect+0x100>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2200      	movs	r2, #0
 8010662:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8010664:	4b0a      	ldr	r3, [pc, #40]	; (8010690 <_UG_FontSelect+0x100>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 801066c:	4b08      	ldr	r3, [pc, #32]	; (8010690 <_UG_FontSelect+0x100>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010672:	005b      	lsls	r3, r3, #1
 8010674:	461a      	mov	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4413      	add	r3, r2
 801067a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 801067c:	4b04      	ldr	r3, [pc, #16]	; (8010690 <_UG_FontSelect+0x100>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	641a      	str	r2, [r3, #64]	; 0x40
 8010684:	e000      	b.n	8010688 <_UG_FontSelect+0xf8>
    return;
 8010686:	bf00      	nop
}
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	bd90      	pop	{r4, r7, pc}
 801068e:	bf00      	nop
 8010690:	20001ae0 	.word	0x20001ae0

08010694 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8010694:	b5b0      	push	{r4, r5, r7, lr}
 8010696:	b08c      	sub	sp, #48	; 0x30
 8010698:	af00      	add	r7, sp, #0
 801069a:	4604      	mov	r4, r0
 801069c:	4608      	mov	r0, r1
 801069e:	4611      	mov	r1, r2
 80106a0:	461a      	mov	r2, r3
 80106a2:	4623      	mov	r3, r4
 80106a4:	80fb      	strh	r3, [r7, #6]
 80106a6:	4603      	mov	r3, r0
 80106a8:	80bb      	strh	r3, [r7, #4]
 80106aa:	460b      	mov	r3, r1
 80106ac:	807b      	strh	r3, [r7, #2]
 80106ae:	4613      	mov	r3, r2
 80106b0:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80106b6:	2300      	movs	r3, #0
 80106b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80106ba:	2300      	movs	r3, #0
 80106bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80106be:	2300      	movs	r3, #0
 80106c0:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80106c2:	4b8c      	ldr	r3, [pc, #560]	; (80108f4 <_UG_PutChar+0x260>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80106ca:	75fb      	strb	r3, [r7, #23]
 80106cc:	4b89      	ldr	r3, [pc, #548]	; (80108f4 <_UG_PutChar+0x260>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80106d4:	f003 0302 	and.w	r3, r3, #2
 80106d8:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80106da:	2300      	movs	r3, #0
 80106dc:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80106de:	f107 0208 	add.w	r2, r7, #8
 80106e2:	88fb      	ldrh	r3, [r7, #6]
 80106e4:	4611      	mov	r1, r2
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff fe06 	bl	80102f8 <_UG_GetCharData>
 80106ec:	4603      	mov	r3, r0
 80106ee:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80106f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80106f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f8:	d102      	bne.n	8010700 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80106fa:	f04f 33ff 	mov.w	r3, #4294967295
 80106fe:	e226      	b.n	8010b4e <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8010700:	4b7c      	ldr	r3, [pc, #496]	; (80108f4 <_UG_PutChar+0x260>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010708:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 801070a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <_UG_PutChar+0x80>
     return 0;
 8010710:	2300      	movs	r3, #0
 8010712:	e21c      	b.n	8010b4e <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8010714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010716:	08db      	lsrs	r3, r3, #3
 8010718:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 801071a:	4b76      	ldr	r3, [pc, #472]	; (80108f4 <_UG_PutChar+0x260>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010722:	f003 0307 	and.w	r3, r3, #7
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <_UG_PutChar+0x9e>
 801072c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801072e:	3301      	adds	r3, #1
 8010730:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8010732:	7dbb      	ldrb	r3, [r7, #22]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d01d      	beq.n	8010774 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8010738:	4b6e      	ldr	r3, [pc, #440]	; (80108f4 <_UG_PutChar+0x260>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801073e:	461d      	mov	r5, r3
 8010740:	88ba      	ldrh	r2, [r7, #4]
 8010742:	8abb      	ldrh	r3, [r7, #20]
 8010744:	4413      	add	r3, r2
 8010746:	b29b      	uxth	r3, r3
 8010748:	3b01      	subs	r3, #1
 801074a:	b29b      	uxth	r3, r3
 801074c:	b21c      	sxth	r4, r3
 801074e:	4b69      	ldr	r3, [pc, #420]	; (80108f4 <_UG_PutChar+0x260>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010756:	b29a      	uxth	r2, r3
 8010758:	887b      	ldrh	r3, [r7, #2]
 801075a:	4413      	add	r3, r2
 801075c:	b29b      	uxth	r3, r3
 801075e:	3b01      	subs	r3, #1
 8010760:	b29b      	uxth	r3, r3
 8010762:	b21b      	sxth	r3, r3
 8010764:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010768:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 801076c:	4622      	mov	r2, r4
 801076e:	47a8      	blx	r5
 8010770:	4603      	mov	r3, r0
 8010772:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8010774:	4b5f      	ldr	r3, [pc, #380]	; (80108f4 <_UG_PutChar+0x260>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801077c:	2b00      	cmp	r3, #0
 801077e:	f040 8172 	bne.w	8010a66 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010782:	2300      	movs	r3, #0
 8010784:	853b      	strh	r3, [r7, #40]	; 0x28
 8010786:	e0ec      	b.n	8010962 <_UG_PutChar+0x2ce>
     {
       c=0;
 8010788:	2300      	movs	r3, #0
 801078a:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 801078c:	2300      	movs	r3, #0
 801078e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010790:	e0df      	b.n	8010952 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	1c5a      	adds	r2, r3, #1
 8010796:	60ba      	str	r2, [r7, #8]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 801079c:	2300      	movs	r3, #0
 801079e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80107a0:	e0ca      	b.n	8010938 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80107a2:	7f7b      	ldrb	r3, [r7, #29]
 80107a4:	f003 0301 	and.w	r3, r3, #1
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d033      	beq.n	8010814 <_UG_PutChar+0x180>
           {
             if(driver)
 80107ac:	7dbb      	ldrb	r3, [r7, #22]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d01f      	beq.n	80107f2 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80107b2:	8c3b      	ldrh	r3, [r7, #32]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00a      	beq.n	80107ce <_UG_PutChar+0x13a>
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d107      	bne.n	80107ce <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80107be:	8c3a      	ldrh	r2, [r7, #32]
 80107c0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	4610      	mov	r0, r2
 80107c8:	4798      	blx	r3
                 bpixels=0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80107ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d10a      	bne.n	80107ea <_UG_PutChar+0x156>
 80107d4:	7dfb      	ldrb	r3, [r7, #23]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d007      	beq.n	80107ea <_UG_PutChar+0x156>
               {
                 x0=x+c;
 80107da:	88ba      	ldrh	r2, [r7, #4]
 80107dc:	8bfb      	ldrh	r3, [r7, #30]
 80107de:	4413      	add	r3, r2
 80107e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80107e2:	887a      	ldrh	r2, [r7, #2]
 80107e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107e6:	4413      	add	r3, r2
 80107e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80107ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107ec:	3301      	adds	r3, #1
 80107ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80107f0:	e096      	b.n	8010920 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80107f2:	4b40      	ldr	r3, [pc, #256]	; (80108f4 <_UG_PutChar+0x260>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	88b9      	ldrh	r1, [r7, #4]
 80107fc:	8bfa      	ldrh	r2, [r7, #30]
 80107fe:	440a      	add	r2, r1
 8010800:	b292      	uxth	r2, r2
 8010802:	b210      	sxth	r0, r2
 8010804:	8879      	ldrh	r1, [r7, #2]
 8010806:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010808:	440a      	add	r2, r1
 801080a:	b292      	uxth	r2, r2
 801080c:	b211      	sxth	r1, r2
 801080e:	883a      	ldrh	r2, [r7, #0]
 8010810:	4798      	blx	r3
 8010812:	e085      	b.n	8010920 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8010814:	7dbb      	ldrb	r3, [r7, #22]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d06e      	beq.n	80108f8 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 801081a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801081c:	2b00      	cmp	r3, #0
 801081e:	d064      	beq.n	80108ea <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8010820:	7dfb      	ldrb	r3, [r7, #23]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d15e      	bne.n	80108e4 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8010826:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010828:	8839      	ldrh	r1, [r7, #0]
 801082a:	69bb      	ldr	r3, [r7, #24]
 801082c:	4610      	mov	r0, r2
 801082e:	4798      	blx	r3
                   fpixels=0;
 8010830:	2300      	movs	r3, #0
 8010832:	847b      	strh	r3, [r7, #34]	; 0x22
 8010834:	e059      	b.n	80108ea <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8010836:	88ba      	ldrh	r2, [r7, #4]
 8010838:	8abb      	ldrh	r3, [r7, #20]
 801083a:	4413      	add	r3, r2
 801083c:	b29a      	uxth	r2, r3
 801083e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8010844:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801084a:	429a      	cmp	r2, r3
 801084c:	d003      	beq.n	8010856 <_UG_PutChar+0x1c2>
 801084e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010850:	89fb      	ldrh	r3, [r7, #14]
 8010852:	429a      	cmp	r2, r3
 8010854:	d224      	bcs.n	80108a0 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010856:	4b27      	ldr	r3, [pc, #156]	; (80108f4 <_UG_PutChar+0x260>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801085c:	461d      	mov	r5, r3
 801085e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010862:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010866:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010868:	89fb      	ldrh	r3, [r7, #14]
 801086a:	4413      	add	r3, r2
 801086c:	b29b      	uxth	r3, r3
 801086e:	3b01      	subs	r3, #1
 8010870:	b29b      	uxth	r3, r3
 8010872:	b21c      	sxth	r4, r3
 8010874:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010876:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801087a:	fb92 f3f3 	sdiv	r3, r2, r3
 801087e:	b29a      	uxth	r2, r3
 8010880:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010882:	4413      	add	r3, r2
 8010884:	b29b      	uxth	r3, r3
 8010886:	b21b      	sxth	r3, r3
 8010888:	4622      	mov	r2, r4
 801088a:	47a8      	blx	r5
 801088c:	4603      	mov	r3, r0
 801088e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010890:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010892:	8839      	ldrh	r1, [r7, #0]
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	4610      	mov	r0, r2
 8010898:	4798      	blx	r3
                       fpixels=0;
 801089a:	2300      	movs	r3, #0
 801089c:	847b      	strh	r3, [r7, #34]	; 0x22
 801089e:	e021      	b.n	80108e4 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80108a0:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <_UG_PutChar+0x260>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108a6:	461c      	mov	r4, r3
 80108a8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80108ac:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80108b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108b2:	89fb      	ldrh	r3, [r7, #14]
 80108b4:	4413      	add	r3, r2
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	3b01      	subs	r3, #1
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	b21a      	sxth	r2, r3
 80108be:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80108c2:	47a0      	blx	r4
 80108c4:	4603      	mov	r3, r0
 80108c6:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80108c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108ca:	8839      	ldrh	r1, [r7, #0]
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	4610      	mov	r0, r2
 80108d0:	4798      	blx	r3
                       fpixels -= width;
 80108d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108d4:	89fb      	ldrh	r3, [r7, #14]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 80108da:	88bb      	ldrh	r3, [r7, #4]
 80108dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 80108de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108e0:	3301      	adds	r3, #1
 80108e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80108e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1a5      	bne.n	8010836 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 80108ea:	8c3b      	ldrh	r3, [r7, #32]
 80108ec:	3301      	adds	r3, #1
 80108ee:	843b      	strh	r3, [r7, #32]
 80108f0:	e016      	b.n	8010920 <_UG_PutChar+0x28c>
 80108f2:	bf00      	nop
 80108f4:	20001ae0 	.word	0x20001ae0
             }
             else if(!trans)                           // Not accelerated output
 80108f8:	7dfb      	ldrb	r3, [r7, #23]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d110      	bne.n	8010920 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 80108fe:	4b96      	ldr	r3, [pc, #600]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	88b9      	ldrh	r1, [r7, #4]
 8010908:	8bfa      	ldrh	r2, [r7, #30]
 801090a:	440a      	add	r2, r1
 801090c:	b292      	uxth	r2, r2
 801090e:	b210      	sxth	r0, r2
 8010910:	8879      	ldrh	r1, [r7, #2]
 8010912:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010914:	440a      	add	r2, r1
 8010916:	b292      	uxth	r2, r2
 8010918:	b211      	sxth	r1, r2
 801091a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801091e:	4798      	blx	r3
             }
           }
           b >>= 1;
 8010920:	7f7b      	ldrb	r3, [r7, #29]
 8010922:	085b      	lsrs	r3, r3, #1
 8010924:	777b      	strb	r3, [r7, #29]
           c++;
 8010926:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801092a:	b29b      	uxth	r3, r3
 801092c:	3301      	adds	r3, #1
 801092e:	b29b      	uxth	r3, r3
 8010930:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010934:	3301      	adds	r3, #1
 8010936:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801093a:	2b07      	cmp	r3, #7
 801093c:	d806      	bhi.n	801094c <_UG_PutChar+0x2b8>
 801093e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010942:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010946:	429a      	cmp	r2, r3
 8010948:	f6ff af2b 	blt.w	80107a2 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 801094c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801094e:	3301      	adds	r3, #1
 8010950:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010952:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010956:	429a      	cmp	r2, r3
 8010958:	f4ff af1b 	bcc.w	8010792 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 801095c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801095e:	3301      	adds	r3, #1
 8010960:	853b      	strh	r3, [r7, #40]	; 0x28
 8010962:	4b7d      	ldr	r3, [pc, #500]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801096a:	b29b      	uxth	r3, r3
 801096c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801096e:	429a      	cmp	r2, r3
 8010970:	f4ff af0a 	bcc.w	8010788 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8010974:	7dbb      	ldrb	r3, [r7, #22]
 8010976:	2b00      	cmp	r3, #0
 8010978:	f000 80e7 	beq.w	8010b4a <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 801097c:	8c3b      	ldrh	r3, [r7, #32]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d009      	beq.n	8010996 <_UG_PutChar+0x302>
 8010982:	7dfb      	ldrb	r3, [r7, #23]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d106      	bne.n	8010996 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8010988:	8c3a      	ldrh	r2, [r7, #32]
 801098a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801098e:	69bb      	ldr	r3, [r7, #24]
 8010990:	4610      	mov	r0, r2
 8010992:	4798      	blx	r3
 8010994:	e0d9      	b.n	8010b4a <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8010996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 80d6 	beq.w	8010b4a <_UG_PutChar+0x4b6>
       {
         if(!trans)
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d15c      	bne.n	8010a5e <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 80109a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80109a6:	8839      	ldrh	r1, [r7, #0]
 80109a8:	69bb      	ldr	r3, [r7, #24]
 80109aa:	4610      	mov	r0, r2
 80109ac:	4798      	blx	r3
 80109ae:	e0cc      	b.n	8010b4a <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80109b0:	88ba      	ldrh	r2, [r7, #4]
 80109b2:	8abb      	ldrh	r3, [r7, #20]
 80109b4:	4413      	add	r3, r2
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80109be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d003      	beq.n	80109d0 <_UG_PutChar+0x33c>
 80109c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80109ca:	8a3b      	ldrh	r3, [r7, #16]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d224      	bcs.n	8010a1a <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80109d0:	4b61      	ldr	r3, [pc, #388]	; (8010b58 <_UG_PutChar+0x4c4>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109d6:	461d      	mov	r5, r3
 80109d8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80109dc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80109e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109e2:	8a3b      	ldrh	r3, [r7, #16]
 80109e4:	4413      	add	r3, r2
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	3b01      	subs	r3, #1
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	b21c      	sxth	r4, r3
 80109ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80109f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80109fc:	4413      	add	r3, r2
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	b21b      	sxth	r3, r3
 8010a02:	4622      	mov	r2, r4
 8010a04:	47a8      	blx	r5
 8010a06:	4603      	mov	r3, r0
 8010a08:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010a0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a0c:	8839      	ldrh	r1, [r7, #0]
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	4610      	mov	r0, r2
 8010a12:	4798      	blx	r3
               fpixels=0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8010a18:	e021      	b.n	8010a5e <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8010a1a:	4b4f      	ldr	r3, [pc, #316]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a20:	461c      	mov	r4, r3
 8010a22:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010a26:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a2c:	8a3b      	ldrh	r3, [r7, #16]
 8010a2e:	4413      	add	r3, r2
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	3b01      	subs	r3, #1
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	b21a      	sxth	r2, r3
 8010a38:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010a3c:	47a0      	blx	r4
 8010a3e:	4603      	mov	r3, r0
 8010a40:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010a42:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a44:	8839      	ldrh	r1, [r7, #0]
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	4610      	mov	r0, r2
 8010a4a:	4798      	blx	r3
               fpixels -= width;
 8010a4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a4e:	8a3b      	ldrh	r3, [r7, #16]
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8010a54:	88bb      	ldrh	r3, [r7, #4]
 8010a56:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8010a58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8010a5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1a5      	bne.n	80109b0 <_UG_PutChar+0x31c>
 8010a64:	e071      	b.n	8010b4a <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8010a66:	4b3c      	ldr	r3, [pc, #240]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a6e:	2b01      	cmp	r3, #1
 8010a70:	d16b      	bne.n	8010b4a <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010a72:	2300      	movs	r3, #0
 8010a74:	853b      	strh	r3, [r7, #40]	; 0x28
 8010a76:	e060      	b.n	8010b3a <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8010a78:	2300      	movs	r3, #0
 8010a7a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010a7c:	e04a      	b.n	8010b14 <_UG_PutChar+0x480>
       {
         b = *data++;
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	1c5a      	adds	r2, r3, #1
 8010a82:	60ba      	str	r2, [r7, #8]
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010a88:	883b      	ldrh	r3, [r7, #0]
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	7f7a      	ldrb	r2, [r7, #29]
 8010a8e:	fb03 f202 	mul.w	r2, r3, r2
 8010a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	7f79      	ldrb	r1, [r7, #29]
 8010a9a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8010a9e:	fb01 f303 	mul.w	r3, r1, r3
 8010aa2:	4413      	add	r3, r2
 8010aa4:	121b      	asrs	r3, r3, #8
 8010aa6:	b21b      	sxth	r3, r3
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8010aac:	883b      	ldrh	r3, [r7, #0]
 8010aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010ab2:	7f79      	ldrb	r1, [r7, #29]
 8010ab4:	fb03 f101 	mul.w	r1, r3, r1
 8010ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010abc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010ac0:	7f78      	ldrb	r0, [r7, #29]
 8010ac2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010ac6:	fb00 f303 	mul.w	r3, r0, r3
 8010aca:	440b      	add	r3, r1
 8010acc:	121b      	asrs	r3, r3, #8
 8010ace:	b21b      	sxth	r3, r3
 8010ad0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010ad4:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	b21b      	sxth	r3, r3
 8010ada:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8010adc:	7dbb      	ldrb	r3, [r7, #22]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d005      	beq.n	8010aee <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8010ae2:	8a7a      	ldrh	r2, [r7, #18]
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	2001      	movs	r0, #1
 8010aea:	4798      	blx	r3
 8010aec:	e00f      	b.n	8010b0e <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8010aee:	4b1a      	ldr	r3, [pc, #104]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	88b9      	ldrh	r1, [r7, #4]
 8010af8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010afa:	440a      	add	r2, r1
 8010afc:	b292      	uxth	r2, r2
 8010afe:	b210      	sxth	r0, r2
 8010b00:	8879      	ldrh	r1, [r7, #2]
 8010b02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b04:	440a      	add	r2, r1
 8010b06:	b292      	uxth	r2, r2
 8010b08:	b211      	sxth	r1, r2
 8010b0a:	8a7a      	ldrh	r2, [r7, #18]
 8010b0c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8010b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b10:	3301      	adds	r3, #1
 8010b12:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010b14:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	dbaf      	blt.n	8010a7e <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	4a0d      	ldr	r2, [pc, #52]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010b22:	6812      	ldr	r2, [r2, #0]
 8010b24:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8010b28:	4611      	mov	r1, r2
 8010b2a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010b2e:	1a8a      	subs	r2, r1, r2
 8010b30:	4413      	add	r3, r2
 8010b32:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b36:	3301      	adds	r3, #1
 8010b38:	853b      	strh	r3, [r7, #40]	; 0x28
 8010b3a:	4b07      	ldr	r3, [pc, #28]	; (8010b58 <_UG_PutChar+0x4c4>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d396      	bcc.n	8010a78 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8010b4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3730      	adds	r7, #48	; 0x30
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bdb0      	pop	{r4, r5, r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20001ae0 	.word	0x20001ae0

08010b5c <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b089      	sub	sp, #36	; 0x24
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8010b64:	4b57      	ldr	r3, [pc, #348]	; (8010cc4 <_UG_ProcessTouchData+0x168>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	88db      	ldrh	r3, [r3, #6]
 8010b6a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8010b6c:	4b55      	ldr	r3, [pc, #340]	; (8010cc4 <_UG_ProcessTouchData+0x168>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	891b      	ldrh	r3, [r3, #8]
 8010b72:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8010b74:	4b53      	ldr	r3, [pc, #332]	; (8010cc4 <_UG_ProcessTouchData+0x168>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	791b      	ldrb	r3, [r3, #4]
 8010b7a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010b82:	2300      	movs	r3, #0
 8010b84:	83fb      	strh	r3, [r7, #30]
 8010b86:	e090      	b.n	8010caa <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685a      	ldr	r2, [r3, #4]
 8010b8c:	8bfb      	ldrh	r3, [r7, #30]
 8010b8e:	015b      	lsls	r3, r3, #5
 8010b90:	4413      	add	r3, r2
 8010b92:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	785b      	ldrb	r3, [r3, #1]
 8010b9e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	f003 0301 	and.w	r3, r3, #1
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d179      	bne.n	8010c9e <_UG_ProcessTouchData+0x142>
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	f003 0302 	and.w	r3, r3, #2
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d074      	beq.n	8010c9e <_UG_ProcessTouchData+0x142>
 8010bb4:	7bfb      	ldrb	r3, [r7, #15]
 8010bb6:	f003 0308 	and.w	r3, r3, #8
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d06f      	beq.n	8010c9e <_UG_ProcessTouchData+0x142>
 8010bbe:	7bfb      	ldrb	r3, [r7, #15]
 8010bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d16a      	bne.n	8010c9e <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d047      	beq.n	8010c5e <_UG_ProcessTouchData+0x102>
 8010bce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd6:	d042      	beq.n	8010c5e <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010bd8:	7f7b      	ldrb	r3, [r7, #29]
 8010bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d107      	bne.n	8010bf2 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8010be2:	7f7b      	ldrb	r3, [r7, #29]
 8010be4:	f043 0305 	orr.w	r3, r3, #5
 8010be8:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8010bea:	7f7b      	ldrb	r3, [r7, #29]
 8010bec:	f023 0318 	bic.w	r3, r3, #24
 8010bf0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010bf2:	7f7b      	ldrb	r3, [r7, #29]
 8010bf4:	f023 0320 	bic.w	r3, r3, #32
 8010bf8:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010c00:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	db25      	blt.n	8010c54 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010c0e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	dc1e      	bgt.n	8010c54 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010c1c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	db17      	blt.n	8010c54 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010c2a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	dc10      	bgt.n	8010c54 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010c32:	7f7b      	ldrb	r3, [r7, #29]
 8010c34:	f043 0320 	orr.w	r3, r3, #32
 8010c38:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010c3a:	7f7b      	ldrb	r3, [r7, #29]
 8010c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d107      	bne.n	8010c54 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8010c44:	7f7b      	ldrb	r3, [r7, #29]
 8010c46:	f023 0304 	bic.w	r3, r3, #4
 8010c4a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8010c4c:	7f7b      	ldrb	r3, [r7, #29]
 8010c4e:	f043 0302 	orr.w	r3, r3, #2
 8010c52:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8010c54:	7f7b      	ldrb	r3, [r7, #29]
 8010c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c5a:	777b      	strb	r3, [r7, #29]
 8010c5c:	e01f      	b.n	8010c9e <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010c5e:	7f7b      	ldrb	r3, [r7, #29]
 8010c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d01a      	beq.n	8010c9e <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8010c68:	7f7b      	ldrb	r3, [r7, #29]
 8010c6a:	f003 0320 	and.w	r3, r3, #32
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d004      	beq.n	8010c7c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8010c72:	7f7b      	ldrb	r3, [r7, #29]
 8010c74:	f043 0308 	orr.w	r3, r3, #8
 8010c78:	777b      	strb	r3, [r7, #29]
 8010c7a:	e003      	b.n	8010c84 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8010c7c:	7f7b      	ldrb	r3, [r7, #29]
 8010c7e:	f043 0310 	orr.w	r3, r3, #16
 8010c82:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010c84:	7f7b      	ldrb	r3, [r7, #29]
 8010c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d003      	beq.n	8010c96 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8010c8e:	7f7b      	ldrb	r3, [r7, #29]
 8010c90:	f043 0301 	orr.w	r3, r3, #1
 8010c94:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8010c96:	7f7b      	ldrb	r3, [r7, #29]
 8010c98:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8010c9c:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	7f7a      	ldrb	r2, [r7, #29]
 8010ca2:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8010ca4:	8bfb      	ldrh	r3, [r7, #30]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	83fb      	strh	r3, [r7, #30]
 8010caa:	8bfa      	ldrh	r2, [r7, #30]
 8010cac:	8abb      	ldrh	r3, [r7, #20]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	f4ff af6a 	bcc.w	8010b88 <_UG_ProcessTouchData+0x2c>
   }
}
 8010cb4:	bf00      	nop
 8010cb6:	bf00      	nop
 8010cb8:	3724      	adds	r7, #36	; 0x24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	20001ae0 	.word	0x20001ae0

08010cc8 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b086      	sub	sp, #24
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	82fb      	strh	r3, [r7, #22]
 8010cda:	e035      	b.n	8010d48 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685a      	ldr	r2, [r3, #4]
 8010ce0:	8afb      	ldrh	r3, [r7, #22]
 8010ce2:	015b      	lsls	r3, r3, #5
 8010ce4:	4413      	add	r3, r2
 8010ce6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	785b      	ldrb	r3, [r3, #1]
 8010cf2:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010cf4:	7bfb      	ldrb	r3, [r7, #15]
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d121      	bne.n	8010d42 <_UG_UpdateObjects+0x7a>
 8010cfe:	7bfb      	ldrb	r3, [r7, #15]
 8010d00:	f003 0302 	and.w	r3, r3, #2
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d01c      	beq.n	8010d42 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010d08:	7bfb      	ldrb	r3, [r7, #15]
 8010d0a:	f003 0320 	and.w	r3, r3, #32
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d004      	beq.n	8010d1c <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	6939      	ldr	r1, [r7, #16]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	f003 0308 	and.w	r3, r3, #8
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00d      	beq.n	8010d42 <_UG_UpdateObjects+0x7a>
 8010d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	da09      	bge.n	8010d42 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8010d2e:	7bbb      	ldrb	r3, [r7, #14]
 8010d30:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d004      	beq.n	8010d42 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	6939      	ldr	r1, [r7, #16]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8010d42:	8afb      	ldrh	r3, [r7, #22]
 8010d44:	3301      	adds	r3, #1
 8010d46:	82fb      	strh	r3, [r7, #22]
 8010d48:	8afa      	ldrh	r2, [r7, #22]
 8010d4a:	8abb      	ldrh	r3, [r7, #20]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d3c5      	bcc.n	8010cdc <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8010d50:	bf00      	nop
 8010d52:	bf00      	nop
 8010d54:	3718      	adds	r7, #24
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
	...

08010d5c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8010d64:	4b22      	ldr	r3, [pc, #136]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8010d6a:	4b21      	ldr	r3, [pc, #132]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010d6c:	2202      	movs	r2, #2
 8010d6e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010d76:	2300      	movs	r3, #0
 8010d78:	82fb      	strh	r3, [r7, #22]
 8010d7a:	e02f      	b.n	8010ddc <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	685a      	ldr	r2, [r3, #4]
 8010d80:	8afb      	ldrh	r3, [r7, #22]
 8010d82:	015b      	lsls	r3, r3, #5
 8010d84:	4413      	add	r3, r2
 8010d86:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010d8e:	7bfb      	ldrb	r3, [r7, #15]
 8010d90:	f003 0301 	and.w	r3, r3, #1
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d11e      	bne.n	8010dd6 <_UG_HandleEvents+0x7a>
 8010d98:	7bfb      	ldrb	r3, [r7, #15]
 8010d9a:	f003 0302 	and.w	r3, r3, #2
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d019      	beq.n	8010dd6 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	7e9b      	ldrb	r3, [r3, #26]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d015      	beq.n	8010dd6 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8010daa:	4a11      	ldr	r2, [pc, #68]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	7e1a      	ldrb	r2, [r3, #24]
 8010db4:	4b0e      	ldr	r3, [pc, #56]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010db6:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	7e5a      	ldrb	r2, [r3, #25]
 8010dbc:	4b0c      	ldr	r3, [pc, #48]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010dbe:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	7e9a      	ldrb	r2, [r3, #26]
 8010dc4:	4b0a      	ldr	r3, [pc, #40]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010dc6:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dcc:	4808      	ldr	r0, [pc, #32]	; (8010df0 <_UG_HandleEvents+0x94>)
 8010dce:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8010dd6:	8afb      	ldrh	r3, [r7, #22]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	82fb      	strh	r3, [r7, #22]
 8010ddc:	8afa      	ldrh	r2, [r7, #22]
 8010dde:	8abb      	ldrh	r3, [r7, #20]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d3cb      	bcc.n	8010d7c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8010de4:	bf00      	nop
 8010de6:	bf00      	nop
 8010de8:	3718      	adds	r7, #24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20001af4 	.word	0x20001af4

08010df4 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8010df4:	b590      	push	{r4, r7, lr}
 8010df6:	b08f      	sub	sp, #60	; 0x3c
 8010df8:	af02      	add	r7, sp, #8
 8010dfa:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 812c 	beq.w	801105e <_UG_PutText+0x26a>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f000 8127 	beq.w	801105e <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	89db      	ldrh	r3, [r3, #14]
 8010e14:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	895b      	ldrh	r3, [r3, #10]
 8010e1a:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	3302      	adds	r3, #2
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8010e26:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010e2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e2e:	1ad2      	subs	r2, r2, r3
 8010e30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	f2c0 8114 	blt.w	8011062 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	899b      	ldrh	r3, [r3, #12]
 8010e44:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7d1b      	ldrb	r3, [r3, #20]
 8010e4a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8adb      	ldrh	r3, [r3, #22]
 8010e50:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b1b      	ldrh	r3, [r3, #24]
 8010e56:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ff fb92 	bl	8010590 <_UG_FontSelect>

   rc=1;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010e74:	4b80      	ldr	r3, [pc, #512]	; (8011078 <_UG_PutText+0x284>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d107      	bne.n	8010e90 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8010e80:	f107 0308 	add.w	r3, r7, #8
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7ff f9bf 	bl	8010208 <_UG_DecodeUTF8>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010e8e:	e004      	b.n	8010e9a <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	60ba      	str	r2, [r7, #8]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8010e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d006      	beq.n	8010eae <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8010ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ea2:	2b0a      	cmp	r3, #10
 8010ea4:	d1e6      	bne.n	8010e74 <_UG_PutText+0x80>
 8010ea6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010eac:	e7e2      	b.n	8010e74 <_UG_PutText+0x80>
     if(!chr) break;
 8010eae:	bf00      	nop
   }

   yp = 0;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010eb4:	7e7b      	ldrb	r3, [r7, #25]
 8010eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d01f      	beq.n	8010efe <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8010ebe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ec0:	8c3b      	ldrh	r3, [r7, #32]
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8010ecc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ece:	8bfb      	ldrh	r3, [r7, #30]
 8010ed0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010ed2:	fb11 f303 	smulbb	r3, r1, r3
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8010ede:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ee0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	b299      	uxth	r1, r3
 8010ee6:	8abb      	ldrh	r3, [r7, #20]
 8010ee8:	fb11 f303 	smulbb	r3, r1, r3
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	1ad3      	subs	r3, r2, r3
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8010ef4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f2c0 80b4 	blt.w	8011066 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010efe:	7e7b      	ldrb	r3, [r7, #25]
 8010f00:	f003 0310 	and.w	r3, r3, #16
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d003      	beq.n	8010f10 <_UG_PutText+0x11c>
 8010f08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010f0c:	105b      	asrs	r3, r3, #1
 8010f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8010f10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f12:	8c3b      	ldrh	r3, [r7, #32]
 8010f14:	4413      	add	r3, r2
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010f26:	4b54      	ldr	r3, [pc, #336]	; (8011078 <_UG_PutText+0x284>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d107      	bne.n	8010f42 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8010f32:	f107 0308 	add.w	r3, r7, #8
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7ff f966 	bl	8010208 <_UG_DecodeUTF8>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010f40:	e004      	b.n	8010f4c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	60ba      	str	r2, [r7, #8]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d01b      	beq.n	8010f8a <_UG_PutText+0x196>
 8010f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f54:	2b0a      	cmp	r3, #10
 8010f56:	d018      	beq.n	8010f8a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7ff f9cb 	bl	80102f8 <_UG_GetCharData>
 8010f62:	4603      	mov	r3, r0
 8010f64:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8010f66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f6e:	d00a      	beq.n	8010f86 <_UG_PutText+0x192>
         sl++;
 8010f70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f72:	3301      	adds	r3, #1
 8010f74:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8010f76:	8a7a      	ldrh	r2, [r7, #18]
 8010f78:	8afb      	ldrh	r3, [r7, #22]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f80:	4413      	add	r3, r2
 8010f82:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010f84:	e7cf      	b.n	8010f26 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8010f86:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010f88:	e7cd      	b.n	8010f26 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8010f8a:	8afb      	ldrh	r3, [r7, #22]
 8010f8c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010f8e:	1ad3      	subs	r3, r2, r3
 8010f90:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8010f92:	8b7a      	ldrh	r2, [r7, #26]
 8010f94:	8bbb      	ldrh	r3, [r7, #28]
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8010fa0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010fa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8010faa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	db5b      	blt.n	801106a <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010fb2:	7e7b      	ldrb	r3, [r7, #25]
 8010fb4:	f003 0301 	and.w	r3, r3, #1
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <_UG_PutText+0x1ce>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	853b      	strh	r3, [r7, #40]	; 0x28
 8010fc0:	e008      	b.n	8010fd4 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010fc2:	7e7b      	ldrb	r3, [r7, #25]
 8010fc4:	f003 0302 	and.w	r3, r3, #2
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d003      	beq.n	8010fd4 <_UG_PutText+0x1e0>
 8010fcc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010fd0:	105b      	asrs	r3, r3, #1
 8010fd2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8010fd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010fd6:	8bbb      	ldrh	r3, [r7, #28]
 8010fd8:	4413      	add	r3, r2
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010fde:	4b26      	ldr	r3, [pc, #152]	; (8011078 <_UG_PutText+0x284>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d107      	bne.n	8010ffa <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8010fea:	f107 030c 	add.w	r3, r7, #12
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff f90a 	bl	8010208 <_UG_DecodeUTF8>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010ff8:	e004      	b.n	8011004 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	60fa      	str	r2, [r7, #12]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8011004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011006:	2b00      	cmp	r3, #0
 8011008:	d031      	beq.n	801106e <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 801100a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801100c:	2b0a      	cmp	r3, #10
 801100e:	d01c      	beq.n	801104a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	8a1c      	ldrh	r4, [r3, #16]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	8a5b      	ldrh	r3, [r3, #18]
 8011018:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801101c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8011020:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	4623      	mov	r3, r4
 8011026:	f7ff fb35 	bl	8010694 <_UG_PutChar>
 801102a:	4603      	mov	r3, r0
 801102c:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 801102e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011036:	d0d2      	beq.n	8010fde <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8011038:	8a7a      	ldrh	r2, [r7, #18]
 801103a:	8afb      	ldrh	r3, [r7, #22]
 801103c:	4413      	add	r3, r2
 801103e:	b29a      	uxth	r2, r3
 8011040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011042:	4413      	add	r3, r2
 8011044:	b29b      	uxth	r3, r3
 8011046:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8011048:	e7c9      	b.n	8010fde <_UG_PutText+0x1ea>
           break;
 801104a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 801104c:	8bfa      	ldrh	r2, [r7, #30]
 801104e:	8abb      	ldrh	r3, [r7, #20]
 8011050:	4413      	add	r3, r2
 8011052:	b29a      	uxth	r2, r3
 8011054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011056:	4413      	add	r3, r2
 8011058:	b29b      	uxth	r3, r3
 801105a:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 801105c:	e75d      	b.n	8010f1a <_UG_PutText+0x126>
     return;
 801105e:	bf00      	nop
 8011060:	e006      	b.n	8011070 <_UG_PutText+0x27c>
     return;
 8011062:	bf00      	nop
 8011064:	e004      	b.n	8011070 <_UG_PutText+0x27c>
        return;
 8011066:	bf00      	nop
 8011068:	e002      	b.n	8011070 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 801106a:	bf00      	nop
 801106c:	e000      	b.n	8011070 <_UG_PutText+0x27c>
           return;
 801106e:	bf00      	nop
   }
}
 8011070:	3734      	adds	r7, #52	; 0x34
 8011072:	46bd      	mov	sp, r7
 8011074:	bd90      	pop	{r4, r7, pc}
 8011076:	bf00      	nop
 8011078:	20001ae0 	.word	0x20001ae0

0801107c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 801107c:	b5b0      	push	{r4, r5, r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af02      	add	r7, sp, #8
 8011082:	4604      	mov	r4, r0
 8011084:	4608      	mov	r0, r1
 8011086:	4611      	mov	r1, r2
 8011088:	461a      	mov	r2, r3
 801108a:	4623      	mov	r3, r4
 801108c:	80fb      	strh	r3, [r7, #6]
 801108e:	4603      	mov	r3, r0
 8011090:	80bb      	strh	r3, [r7, #4]
 8011092:	460b      	mov	r3, r1
 8011094:	807b      	strh	r3, [r7, #2]
 8011096:	4613      	mov	r3, r2
 8011098:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 801109a:	887b      	ldrh	r3, [r7, #2]
 801109c:	3b01      	subs	r3, #1
 801109e:	b29b      	uxth	r3, r3
 80110a0:	b21c      	sxth	r4, r3
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	1c9a      	adds	r2, r3, #2
 80110a6:	61ba      	str	r2, [r7, #24]
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80110ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80110b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	4613      	mov	r3, r2
 80110ba:	4622      	mov	r2, r4
 80110bc:	f7fe fee0 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80110c0:	88bb      	ldrh	r3, [r7, #4]
 80110c2:	3301      	adds	r3, #1
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	b219      	sxth	r1, r3
 80110c8:	883b      	ldrh	r3, [r7, #0]
 80110ca:	3b01      	subs	r3, #1
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	b21c      	sxth	r4, r3
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	1c9a      	adds	r2, r3, #2
 80110d4:	61ba      	str	r2, [r7, #24]
 80110d6:	881b      	ldrh	r3, [r3, #0]
 80110d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80110dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	4623      	mov	r3, r4
 80110e4:	f7fe fecc 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	1c9a      	adds	r2, r3, #2
 80110ec:	61ba      	str	r2, [r7, #24]
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80110f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80110f8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80110fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	4623      	mov	r3, r4
 8011104:	f7fe febc 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8011108:	883b      	ldrh	r3, [r7, #0]
 801110a:	3b01      	subs	r3, #1
 801110c:	b29b      	uxth	r3, r3
 801110e:	b21c      	sxth	r4, r3
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	1c9a      	adds	r2, r3, #2
 8011114:	61ba      	str	r2, [r7, #24]
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801111c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011120:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	4623      	mov	r3, r4
 8011128:	f7fe feaa 	bl	800fe80 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 801112c:	88fb      	ldrh	r3, [r7, #6]
 801112e:	3301      	adds	r3, #1
 8011130:	b29b      	uxth	r3, r3
 8011132:	b218      	sxth	r0, r3
 8011134:	88bb      	ldrh	r3, [r7, #4]
 8011136:	3301      	adds	r3, #1
 8011138:	b29b      	uxth	r3, r3
 801113a:	b219      	sxth	r1, r3
 801113c:	887b      	ldrh	r3, [r7, #2]
 801113e:	3b02      	subs	r3, #2
 8011140:	b29b      	uxth	r3, r3
 8011142:	b21c      	sxth	r4, r3
 8011144:	88bb      	ldrh	r3, [r7, #4]
 8011146:	3301      	adds	r3, #1
 8011148:	b29b      	uxth	r3, r3
 801114a:	b21d      	sxth	r5, r3
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	1c9a      	adds	r2, r3, #2
 8011150:	61ba      	str	r2, [r7, #24]
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	9300      	str	r3, [sp, #0]
 8011156:	462b      	mov	r3, r5
 8011158:	4622      	mov	r2, r4
 801115a:	f7fe fe91 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 801115e:	88fb      	ldrh	r3, [r7, #6]
 8011160:	3301      	adds	r3, #1
 8011162:	b29b      	uxth	r3, r3
 8011164:	b218      	sxth	r0, r3
 8011166:	88bb      	ldrh	r3, [r7, #4]
 8011168:	3302      	adds	r3, #2
 801116a:	b29b      	uxth	r3, r3
 801116c:	b219      	sxth	r1, r3
 801116e:	88fb      	ldrh	r3, [r7, #6]
 8011170:	3301      	adds	r3, #1
 8011172:	b29b      	uxth	r3, r3
 8011174:	b21c      	sxth	r4, r3
 8011176:	883b      	ldrh	r3, [r7, #0]
 8011178:	3b02      	subs	r3, #2
 801117a:	b29b      	uxth	r3, r3
 801117c:	b21d      	sxth	r5, r3
 801117e:	69bb      	ldr	r3, [r7, #24]
 8011180:	1c9a      	adds	r2, r3, #2
 8011182:	61ba      	str	r2, [r7, #24]
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	462b      	mov	r3, r5
 801118a:	4622      	mov	r2, r4
 801118c:	f7fe fe78 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8011190:	88fb      	ldrh	r3, [r7, #6]
 8011192:	3301      	adds	r3, #1
 8011194:	b29b      	uxth	r3, r3
 8011196:	b218      	sxth	r0, r3
 8011198:	883b      	ldrh	r3, [r7, #0]
 801119a:	3b01      	subs	r3, #1
 801119c:	b29b      	uxth	r3, r3
 801119e:	b219      	sxth	r1, r3
 80111a0:	887b      	ldrh	r3, [r7, #2]
 80111a2:	3b01      	subs	r3, #1
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	b21c      	sxth	r4, r3
 80111a8:	883b      	ldrh	r3, [r7, #0]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	b21d      	sxth	r5, r3
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	1c9a      	adds	r2, r3, #2
 80111b4:	61ba      	str	r2, [r7, #24]
 80111b6:	881b      	ldrh	r3, [r3, #0]
 80111b8:	9300      	str	r3, [sp, #0]
 80111ba:	462b      	mov	r3, r5
 80111bc:	4622      	mov	r2, r4
 80111be:	f7fe fe5f 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80111c2:	887b      	ldrh	r3, [r7, #2]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	b218      	sxth	r0, r3
 80111ca:	88bb      	ldrh	r3, [r7, #4]
 80111cc:	3301      	adds	r3, #1
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	b219      	sxth	r1, r3
 80111d2:	887b      	ldrh	r3, [r7, #2]
 80111d4:	3b01      	subs	r3, #1
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	b21c      	sxth	r4, r3
 80111da:	883b      	ldrh	r3, [r7, #0]
 80111dc:	3b02      	subs	r3, #2
 80111de:	b29b      	uxth	r3, r3
 80111e0:	b21d      	sxth	r5, r3
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	1c9a      	adds	r2, r3, #2
 80111e6:	61ba      	str	r2, [r7, #24]
 80111e8:	881b      	ldrh	r3, [r3, #0]
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	462b      	mov	r3, r5
 80111ee:	4622      	mov	r2, r4
 80111f0:	f7fe fe46 	bl	800fe80 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	3302      	adds	r3, #2
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	b218      	sxth	r0, r3
 80111fc:	88bb      	ldrh	r3, [r7, #4]
 80111fe:	3302      	adds	r3, #2
 8011200:	b29b      	uxth	r3, r3
 8011202:	b219      	sxth	r1, r3
 8011204:	887b      	ldrh	r3, [r7, #2]
 8011206:	3b03      	subs	r3, #3
 8011208:	b29b      	uxth	r3, r3
 801120a:	b21c      	sxth	r4, r3
 801120c:	88bb      	ldrh	r3, [r7, #4]
 801120e:	3302      	adds	r3, #2
 8011210:	b29b      	uxth	r3, r3
 8011212:	b21d      	sxth	r5, r3
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	1c9a      	adds	r2, r3, #2
 8011218:	61ba      	str	r2, [r7, #24]
 801121a:	881b      	ldrh	r3, [r3, #0]
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	462b      	mov	r3, r5
 8011220:	4622      	mov	r2, r4
 8011222:	f7fe fe2d 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8011226:	88fb      	ldrh	r3, [r7, #6]
 8011228:	3302      	adds	r3, #2
 801122a:	b29b      	uxth	r3, r3
 801122c:	b218      	sxth	r0, r3
 801122e:	88bb      	ldrh	r3, [r7, #4]
 8011230:	3303      	adds	r3, #3
 8011232:	b29b      	uxth	r3, r3
 8011234:	b219      	sxth	r1, r3
 8011236:	88fb      	ldrh	r3, [r7, #6]
 8011238:	3302      	adds	r3, #2
 801123a:	b29b      	uxth	r3, r3
 801123c:	b21c      	sxth	r4, r3
 801123e:	883b      	ldrh	r3, [r7, #0]
 8011240:	3b03      	subs	r3, #3
 8011242:	b29b      	uxth	r3, r3
 8011244:	b21d      	sxth	r5, r3
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	1c9a      	adds	r2, r3, #2
 801124a:	61ba      	str	r2, [r7, #24]
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	462b      	mov	r3, r5
 8011252:	4622      	mov	r2, r4
 8011254:	f7fe fe14 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8011258:	88fb      	ldrh	r3, [r7, #6]
 801125a:	3302      	adds	r3, #2
 801125c:	b29b      	uxth	r3, r3
 801125e:	b218      	sxth	r0, r3
 8011260:	883b      	ldrh	r3, [r7, #0]
 8011262:	3b02      	subs	r3, #2
 8011264:	b29b      	uxth	r3, r3
 8011266:	b219      	sxth	r1, r3
 8011268:	887b      	ldrh	r3, [r7, #2]
 801126a:	3b02      	subs	r3, #2
 801126c:	b29b      	uxth	r3, r3
 801126e:	b21c      	sxth	r4, r3
 8011270:	883b      	ldrh	r3, [r7, #0]
 8011272:	3b02      	subs	r3, #2
 8011274:	b29b      	uxth	r3, r3
 8011276:	b21d      	sxth	r5, r3
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	1c9a      	adds	r2, r3, #2
 801127c:	61ba      	str	r2, [r7, #24]
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	462b      	mov	r3, r5
 8011284:	4622      	mov	r2, r4
 8011286:	f7fe fdfb 	bl	800fe80 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 801128a:	887b      	ldrh	r3, [r7, #2]
 801128c:	3b02      	subs	r3, #2
 801128e:	b29b      	uxth	r3, r3
 8011290:	b218      	sxth	r0, r3
 8011292:	88bb      	ldrh	r3, [r7, #4]
 8011294:	3302      	adds	r3, #2
 8011296:	b29b      	uxth	r3, r3
 8011298:	b219      	sxth	r1, r3
 801129a:	887b      	ldrh	r3, [r7, #2]
 801129c:	3b02      	subs	r3, #2
 801129e:	b29b      	uxth	r3, r3
 80112a0:	b21a      	sxth	r2, r3
 80112a2:	883b      	ldrh	r3, [r7, #0]
 80112a4:	3b03      	subs	r3, #3
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	b21c      	sxth	r4, r3
 80112aa:	69bb      	ldr	r3, [r7, #24]
 80112ac:	881b      	ldrh	r3, [r3, #0]
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	4623      	mov	r3, r4
 80112b2:	f7fe fde5 	bl	800fe80 <UG_DrawLine>
}
 80112b6:	bf00      	nop
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080112c0 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	4603      	mov	r3, r0
 80112c8:	6039      	str	r1, [r7, #0]
 80112ca:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80112cc:	79fb      	ldrb	r3, [r7, #7]
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d810      	bhi.n	80112f4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80112d2:	4b0b      	ldr	r3, [pc, #44]	; (8011300 <UG_DriverRegister+0x40>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	79fb      	ldrb	r3, [r7, #7]
 80112d8:	330a      	adds	r3, #10
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	4413      	add	r3, r2
 80112de:	683a      	ldr	r2, [r7, #0]
 80112e0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80112e2:	4b07      	ldr	r3, [pc, #28]	; (8011300 <UG_DriverRegister+0x40>)
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	79fb      	ldrb	r3, [r7, #7]
 80112e8:	330a      	adds	r3, #10
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	4413      	add	r3, r2
 80112ee:	2203      	movs	r2, #3
 80112f0:	721a      	strb	r2, [r3, #8]
 80112f2:	e000      	b.n	80112f6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80112f4:	bf00      	nop
}
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr
 8011300:	20001ae0 	.word	0x20001ae0

08011304 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 801130a:	4b5e      	ldr	r3, [pc, #376]	; (8011484 <UG_Update+0x180>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011312:	f003 0301 	and.w	r3, r3, #1
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00a      	beq.n	8011330 <UG_Update+0x2c>
 801131a:	4b5a      	ldr	r3, [pc, #360]	; (8011484 <UG_Update+0x180>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8011322:	4b58      	ldr	r3, [pc, #352]	; (8011484 <UG_Update+0x180>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f022 0201 	bic.w	r2, r2, #1
 801132a:	b2d2      	uxtb	r2, r2
 801132c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8011330:	4b54      	ldr	r3, [pc, #336]	; (8011484 <UG_Update+0x180>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	68da      	ldr	r2, [r3, #12]
 8011336:	4b53      	ldr	r3, [pc, #332]	; (8011484 <UG_Update+0x180>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	429a      	cmp	r2, r3
 801133e:	d071      	beq.n	8011424 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8011340:	4b50      	ldr	r3, [pc, #320]	; (8011484 <UG_Update+0x180>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d06c      	beq.n	8011424 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 801134a:	4b4e      	ldr	r3, [pc, #312]	; (8011484 <UG_Update+0x180>)
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	4b4d      	ldr	r3, [pc, #308]	; (8011484 <UG_Update+0x180>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	6912      	ldr	r2, [r2, #16]
 8011354:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8011356:	4b4b      	ldr	r3, [pc, #300]	; (8011484 <UG_Update+0x180>)
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	4b4a      	ldr	r3, [pc, #296]	; (8011484 <UG_Update+0x180>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68d2      	ldr	r2, [r2, #12]
 8011360:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8011362:	4b48      	ldr	r3, [pc, #288]	; (8011484 <UG_Update+0x180>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	695b      	ldr	r3, [r3, #20]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d045      	beq.n	80113f8 <UG_Update+0xf4>
 801136c:	4b45      	ldr	r3, [pc, #276]	; (8011484 <UG_Update+0x180>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	695b      	ldr	r3, [r3, #20]
 8011372:	7d9b      	ldrb	r3, [r3, #22]
 8011374:	f003 0302 	and.w	r3, r3, #2
 8011378:	2b00      	cmp	r3, #0
 801137a:	d03d      	beq.n	80113f8 <UG_Update+0xf4>
 801137c:	4b41      	ldr	r3, [pc, #260]	; (8011484 <UG_Update+0x180>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	695b      	ldr	r3, [r3, #20]
 8011382:	7a1b      	ldrb	r3, [r3, #8]
 8011384:	f003 0308 	and.w	r3, r3, #8
 8011388:	2b00      	cmp	r3, #0
 801138a:	d035      	beq.n	80113f8 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 801138c:	4b3d      	ldr	r3, [pc, #244]	; (8011484 <UG_Update+0x180>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	695b      	ldr	r3, [r3, #20]
 8011392:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8011396:	4b3b      	ldr	r3, [pc, #236]	; (8011484 <UG_Update+0x180>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	691b      	ldr	r3, [r3, #16]
 801139c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d123      	bne.n	80113ec <UG_Update+0xe8>
 80113a4:	4b37      	ldr	r3, [pc, #220]	; (8011484 <UG_Update+0x180>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	695b      	ldr	r3, [r3, #20]
 80113aa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80113ae:	4b35      	ldr	r3, [pc, #212]	; (8011484 <UG_Update+0x180>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	691b      	ldr	r3, [r3, #16]
 80113b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d117      	bne.n	80113ec <UG_Update+0xe8>
 80113bc:	4b31      	ldr	r3, [pc, #196]	; (8011484 <UG_Update+0x180>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	695b      	ldr	r3, [r3, #20]
 80113c2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80113c6:	4b2f      	ldr	r3, [pc, #188]	; (8011484 <UG_Update+0x180>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	691b      	ldr	r3, [r3, #16]
 80113cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d10b      	bne.n	80113ec <UG_Update+0xe8>
 80113d4:	4b2b      	ldr	r3, [pc, #172]	; (8011484 <UG_Update+0x180>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	695b      	ldr	r3, [r3, #20]
 80113da:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80113de:	4b29      	ldr	r3, [pc, #164]	; (8011484 <UG_Update+0x180>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	691b      	ldr	r3, [r3, #16]
 80113e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d005      	beq.n	80113f8 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80113ec:	4b25      	ldr	r3, [pc, #148]	; (8011484 <UG_Update+0x180>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	695b      	ldr	r3, [r3, #20]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f000 f848 	bl	8011488 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80113f8:	4b22      	ldr	r3, [pc, #136]	; (8011484 <UG_Update+0x180>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	691b      	ldr	r3, [r3, #16]
 80113fe:	7a1a      	ldrb	r2, [r3, #8]
 8011400:	4b20      	ldr	r3, [pc, #128]	; (8011484 <UG_Update+0x180>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801140a:	b2d2      	uxtb	r2, r2
 801140c:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 801140e:	4b1d      	ldr	r3, [pc, #116]	; (8011484 <UG_Update+0x180>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	7a1a      	ldrb	r2, [r3, #8]
 8011416:	4b1b      	ldr	r3, [pc, #108]	; (8011484 <UG_Update+0x180>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	691b      	ldr	r3, [r3, #16]
 801141c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8011420:	b2d2      	uxtb	r2, r2
 8011422:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8011424:	4b17      	ldr	r3, [pc, #92]	; (8011484 <UG_Update+0x180>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	691b      	ldr	r3, [r3, #16]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d01b      	beq.n	8011466 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 801142e:	4b15      	ldr	r3, [pc, #84]	; (8011484 <UG_Update+0x180>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	7a1b      	ldrb	r3, [r3, #8]
 801143a:	f003 0320 	and.w	r3, r3, #32
 801143e:	2b00      	cmp	r3, #0
 8011440:	d002      	beq.n	8011448 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 f8ca 	bl	80115dc <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7a1b      	ldrb	r3, [r3, #8]
 801144c:	f003 0308 	and.w	r3, r3, #8
 8011450:	2b00      	cmp	r3, #0
 8011452:	d008      	beq.n	8011466 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fb81 	bl	8010b5c <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7ff fc34 	bl	8010cc8 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff fc7b 	bl	8010d5c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8011466:	4b07      	ldr	r3, [pc, #28]	; (8011484 <UG_Update+0x180>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	689b      	ldr	r3, [r3, #8]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d004      	beq.n	801147c <UG_Update+0x178>
     gui->device->flush();
 8011472:	4b04      	ldr	r3, [pc, #16]	; (8011484 <UG_Update+0x180>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	4798      	blx	r3
   }
}
 801147c:	bf00      	nop
 801147e:	3708      	adds	r7, #8
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	20001ae0 	.word	0x20001ae0

08011488 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8011488:	b590      	push	{r4, r7, lr}
 801148a:	b08f      	sub	sp, #60	; 0x3c
 801148c:	af02      	add	r7, sp, #8
 801148e:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	f000 809a 	beq.w	80115cc <_UG_WindowDrawTitle+0x144>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	7a1b      	ldrb	r3, [r3, #8]
 801149c:	f003 0302 	and.w	r3, r3, #2
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f000 8093 	beq.w	80115cc <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	89db      	ldrh	r3, [r3, #14]
 80114aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	8a1b      	ldrh	r3, [r3, #16]
 80114b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	8a5b      	ldrh	r3, [r3, #18]
 80114b6:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	8a9b      	ldrh	r3, [r3, #20]
 80114bc:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	7d9b      	ldrb	r3, [r3, #22]
 80114c2:	f003 0301 	and.w	r3, r3, #1
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00f      	beq.n	80114ea <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80114ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80114cc:	3303      	adds	r3, #3
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 80114d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114d4:	3303      	adds	r3, #3
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 80114da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114dc:	3b03      	subs	r3, #3
 80114de:	b29b      	uxth	r3, r3
 80114e0:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80114e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80114e4:	3b03      	subs	r3, #3
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80114ea:	4b3b      	ldr	r3, [pc, #236]	; (80115d8 <_UG_WindowDrawTitle+0x150>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d106      	bne.n	8011504 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80114fa:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011500:	83bb      	strh	r3, [r7, #28]
 8011502:	e005      	b.n	8011510 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011508:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801150e:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011516:	b29a      	uxth	r2, r3
 8011518:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801151a:	4413      	add	r3, r2
 801151c:	b29b      	uxth	r3, r3
 801151e:	3b01      	subs	r3, #1
 8011520:	b29b      	uxth	r3, r3
 8011522:	b21c      	sxth	r4, r3
 8011524:	8bfb      	ldrh	r3, [r7, #30]
 8011526:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801152a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801152e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	4623      	mov	r3, r4
 8011536:	f7fe fb03 	bl	800fb40 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	69db      	ldr	r3, [r3, #28]
 8011544:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8011546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011548:	3303      	adds	r3, #3
 801154a:	b29b      	uxth	r3, r3
 801154c:	b21b      	sxth	r3, r3
 801154e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8011550:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011552:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8011554:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011556:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801155e:	b29a      	uxth	r2, r3
 8011560:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011562:	4413      	add	r3, r2
 8011564:	b29b      	uxth	r3, r3
 8011566:	3b01      	subs	r3, #1
 8011568:	b29b      	uxth	r3, r3
 801156a:	b21b      	sxth	r3, r3
 801156c:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011574:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801157e:	b21b      	sxth	r3, r3
 8011580:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8011588:	b21b      	sxth	r3, r3
 801158a:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 801158c:	f107 030c 	add.w	r3, r7, #12
 8011590:	4618      	mov	r0, r3
 8011592:	f7ff fc2f 	bl	8010df4 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801159c:	b29a      	uxth	r2, r3
 801159e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115a0:	4413      	add	r3, r2
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	b219      	sxth	r1, r3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115b0:	4413      	add	r3, r2
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	b21b      	sxth	r3, r3
 80115b6:	f649 5413 	movw	r4, #40211	; 0x9d13
 80115ba:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80115be:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80115c2:	9400      	str	r4, [sp, #0]
 80115c4:	f7fe fc5c 	bl	800fe80 <UG_DrawLine>
      return UG_RESULT_OK;
 80115c8:	2300      	movs	r3, #0
 80115ca:	e001      	b.n	80115d0 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 80115cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3734      	adds	r7, #52	; 0x34
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd90      	pop	{r4, r7, pc}
 80115d8:	20001ae0 	.word	0x20001ae0

080115dc <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80115dc:	b590      	push	{r4, r7, lr}
 80115de:	b089      	sub	sp, #36	; 0x24
 80115e0:	af02      	add	r7, sp, #8
 80115e2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	89db      	ldrh	r3, [r3, #14]
 80115e8:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	8a1b      	ldrh	r3, [r3, #16]
 80115ee:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	8a5b      	ldrh	r3, [r3, #18]
 80115f4:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	8a9b      	ldrh	r3, [r3, #20]
 80115fa:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7a1b      	ldrb	r3, [r3, #8]
 8011600:	f023 0320 	bic.w	r3, r3, #32
 8011604:	b2da      	uxtb	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	7a1b      	ldrb	r3, [r3, #8]
 801160e:	f003 0308 	and.w	r3, r3, #8
 8011612:	2b00      	cmp	r3, #0
 8011614:	f000 8084 	beq.w	8011720 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	7d9b      	ldrb	r3, [r3, #22]
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d021      	beq.n	8011668 <_UG_WindowUpdate+0x8c>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	7a1b      	ldrb	r3, [r3, #8]
 8011628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801162c:	2b00      	cmp	r3, #0
 801162e:	d11b      	bne.n	8011668 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8011630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011634:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011638:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801163c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8011640:	4c43      	ldr	r4, [pc, #268]	; (8011750 <_UG_WindowUpdate+0x174>)
 8011642:	9400      	str	r4, [sp, #0]
 8011644:	f7ff fd1a 	bl	801107c <_UG_DrawObjectFrame>
         xs+=3;
 8011648:	8abb      	ldrh	r3, [r7, #20]
 801164a:	3303      	adds	r3, #3
 801164c:	b29b      	uxth	r3, r3
 801164e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8011650:	8a7b      	ldrh	r3, [r7, #18]
 8011652:	3303      	adds	r3, #3
 8011654:	b29b      	uxth	r3, r3
 8011656:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8011658:	8a3b      	ldrh	r3, [r7, #16]
 801165a:	3b03      	subs	r3, #3
 801165c:	b29b      	uxth	r3, r3
 801165e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8011660:	89fb      	ldrh	r3, [r7, #14]
 8011662:	3b03      	subs	r3, #3
 8011664:	b29b      	uxth	r3, r3
 8011666:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	7d9b      	ldrb	r3, [r3, #22]
 801166c:	f003 0302 	and.w	r3, r3, #2
 8011670:	2b00      	cmp	r3, #0
 8011672:	d01a      	beq.n	80116aa <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7ff ff07 	bl	8011488 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011680:	b29a      	uxth	r2, r3
 8011682:	8a7b      	ldrh	r3, [r7, #18]
 8011684:	4413      	add	r3, r2
 8011686:	b29b      	uxth	r3, r3
 8011688:	3301      	adds	r3, #1
 801168a:	b29b      	uxth	r3, r3
 801168c:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	7a1b      	ldrb	r3, [r3, #8]
 8011692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011696:	2b00      	cmp	r3, #0
 8011698:	d007      	beq.n	80116aa <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	7a1b      	ldrb	r3, [r3, #8]
 801169e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	721a      	strb	r2, [r3, #8]
            return;
 80116a8:	e04e      	b.n	8011748 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	899b      	ldrh	r3, [r3, #12]
 80116ae:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80116b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80116b6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80116ba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	4623      	mov	r3, r4
 80116c2:	f7fe fa3d 	bl	800fb40 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80116cc:	2300      	movs	r3, #0
 80116ce:	82fb      	strh	r3, [r7, #22]
 80116d0:	e021      	b.n	8011716 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685a      	ldr	r2, [r3, #4]
 80116d6:	8afb      	ldrh	r3, [r7, #22]
 80116d8:	015b      	lsls	r3, r3, #5
 80116da:	4413      	add	r3, r2
 80116dc:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d112      	bne.n	8011710 <_UG_WindowUpdate+0x134>
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	f003 0302 	and.w	r3, r3, #2
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00c      	beq.n	8011710 <_UG_WindowUpdate+0x134>
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	f003 0308 	and.w	r3, r3, #8
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d006      	beq.n	8011710 <_UG_WindowUpdate+0x134>
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801170a:	b2da      	uxtb	r2, r3
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8011710:	8afb      	ldrh	r3, [r7, #22]
 8011712:	3301      	adds	r3, #1
 8011714:	82fb      	strh	r3, [r7, #22]
 8011716:	8afa      	ldrh	r2, [r7, #22]
 8011718:	89bb      	ldrh	r3, [r7, #12]
 801171a:	429a      	cmp	r2, r3
 801171c:	d3d9      	bcc.n	80116d2 <_UG_WindowUpdate+0xf6>
 801171e:	e013      	b.n	8011748 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8011738:	4b06      	ldr	r3, [pc, #24]	; (8011754 <_UG_WindowUpdate+0x178>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	4623      	mov	r3, r4
 8011744:	f7fe f9fc 	bl	800fb40 <UG_FillFrame>
   }
}
 8011748:	371c      	adds	r7, #28
 801174a:	46bd      	mov	sp, r7
 801174c:	bd90      	pop	{r4, r7, pc}
 801174e:	bf00      	nop
 8011750:	0803acec 	.word	0x0803acec
 8011754:	20001ae0 	.word	0x20001ae0

08011758 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	460b      	mov	r3, r1
 8011762:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011764:	2300      	movs	r3, #0
 8011766:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	7c1b      	ldrb	r3, [r3, #16]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d115      	bne.n	801179c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011774:	2202      	movs	r2, #2
 8011776:	2181      	movs	r1, #129	; 0x81
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f001 fe62 	bl	8013442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2201      	movs	r2, #1
 8011782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011788:	2202      	movs	r2, #2
 801178a:	2101      	movs	r1, #1
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f001 fe58 	bl	8013442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2201      	movs	r2, #1
 8011796:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801179a:	e012      	b.n	80117c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801179c:	2340      	movs	r3, #64	; 0x40
 801179e:	2202      	movs	r2, #2
 80117a0:	2181      	movs	r1, #129	; 0x81
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f001 fe4d 	bl	8013442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2201      	movs	r2, #1
 80117ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80117ae:	2340      	movs	r3, #64	; 0x40
 80117b0:	2202      	movs	r2, #2
 80117b2:	2101      	movs	r1, #1
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f001 fe44 	bl	8013442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2201      	movs	r2, #1
 80117be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80117c2:	2308      	movs	r3, #8
 80117c4:	2203      	movs	r2, #3
 80117c6:	2182      	movs	r1, #130	; 0x82
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f001 fe3a 	bl	8013442 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2201      	movs	r2, #1
 80117d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80117d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80117d8:	f001 ff5c 	bl	8013694 <USBD_static_malloc>
 80117dc:	4602      	mov	r2, r0
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d102      	bne.n	80117f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80117ee:	2301      	movs	r3, #1
 80117f0:	73fb      	strb	r3, [r7, #15]
 80117f2:	e026      	b.n	8011842 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2200      	movs	r2, #0
 801180a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	2200      	movs	r2, #0
 8011812:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	7c1b      	ldrb	r3, [r3, #16]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d109      	bne.n	8011832 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011828:	2101      	movs	r1, #1
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f001 fefb 	bl	8013626 <USBD_LL_PrepareReceive>
 8011830:	e007      	b.n	8011842 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011838:	2340      	movs	r3, #64	; 0x40
 801183a:	2101      	movs	r1, #1
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f001 fef2 	bl	8013626 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8011842:	7bfb      	ldrb	r3, [r7, #15]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	460b      	mov	r3, r1
 8011856:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011858:	2300      	movs	r3, #0
 801185a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801185c:	2181      	movs	r1, #129	; 0x81
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f001 fe15 	bl	801348e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801186a:	2101      	movs	r1, #1
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f001 fe0e 	bl	801348e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2200      	movs	r2, #0
 8011876:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801187a:	2182      	movs	r1, #130	; 0x82
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f001 fe06 	bl	801348e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00e      	beq.n	80118b0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a2:	4618      	mov	r0, r3
 80118a4:	f001 ff04 	bl	80136b0 <USBD_static_free>
    pdev->pClassData = NULL;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80118b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b086      	sub	sp, #24
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6078      	str	r0, [r7, #4]
 80118c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80118cc:	2300      	movs	r3, #0
 80118ce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80118d0:	2300      	movs	r3, #0
 80118d2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80118d4:	2300      	movs	r3, #0
 80118d6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d039      	beq.n	8011958 <USBD_CDC_Setup+0x9e>
 80118e4:	2b20      	cmp	r3, #32
 80118e6:	d17f      	bne.n	80119e8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	88db      	ldrh	r3, [r3, #6]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d029      	beq.n	8011944 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	b25b      	sxtb	r3, r3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	da11      	bge.n	801191e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	683a      	ldr	r2, [r7, #0]
 8011904:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8011906:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011908:	683a      	ldr	r2, [r7, #0]
 801190a:	88d2      	ldrh	r2, [r2, #6]
 801190c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801190e:	6939      	ldr	r1, [r7, #16]
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	88db      	ldrh	r3, [r3, #6]
 8011914:	461a      	mov	r2, r3
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f001 f9e3 	bl	8012ce2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801191c:	e06b      	b.n	80119f6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	785a      	ldrb	r2, [r3, #1]
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	88db      	ldrh	r3, [r3, #6]
 801192c:	b2da      	uxtb	r2, r3
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8011934:	6939      	ldr	r1, [r7, #16]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	88db      	ldrh	r3, [r3, #6]
 801193a:	461a      	mov	r2, r3
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f001 f9fe 	bl	8012d3e <USBD_CtlPrepareRx>
      break;
 8011942:	e058      	b.n	80119f6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	683a      	ldr	r2, [r7, #0]
 801194e:	7850      	ldrb	r0, [r2, #1]
 8011950:	2200      	movs	r2, #0
 8011952:	6839      	ldr	r1, [r7, #0]
 8011954:	4798      	blx	r3
      break;
 8011956:	e04e      	b.n	80119f6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	785b      	ldrb	r3, [r3, #1]
 801195c:	2b0b      	cmp	r3, #11
 801195e:	d02e      	beq.n	80119be <USBD_CDC_Setup+0x104>
 8011960:	2b0b      	cmp	r3, #11
 8011962:	dc38      	bgt.n	80119d6 <USBD_CDC_Setup+0x11c>
 8011964:	2b00      	cmp	r3, #0
 8011966:	d002      	beq.n	801196e <USBD_CDC_Setup+0xb4>
 8011968:	2b0a      	cmp	r3, #10
 801196a:	d014      	beq.n	8011996 <USBD_CDC_Setup+0xdc>
 801196c:	e033      	b.n	80119d6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011974:	2b03      	cmp	r3, #3
 8011976:	d107      	bne.n	8011988 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8011978:	f107 030c 	add.w	r3, r7, #12
 801197c:	2202      	movs	r2, #2
 801197e:	4619      	mov	r1, r3
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f001 f9ae 	bl	8012ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011986:	e02e      	b.n	80119e6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f001 f93e 	bl	8012c0c <USBD_CtlError>
            ret = USBD_FAIL;
 8011990:	2302      	movs	r3, #2
 8011992:	75fb      	strb	r3, [r7, #23]
          break;
 8011994:	e027      	b.n	80119e6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801199c:	2b03      	cmp	r3, #3
 801199e:	d107      	bne.n	80119b0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80119a0:	f107 030f 	add.w	r3, r7, #15
 80119a4:	2201      	movs	r2, #1
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f001 f99a 	bl	8012ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80119ae:	e01a      	b.n	80119e6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80119b0:	6839      	ldr	r1, [r7, #0]
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f001 f92a 	bl	8012c0c <USBD_CtlError>
            ret = USBD_FAIL;
 80119b8:	2302      	movs	r3, #2
 80119ba:	75fb      	strb	r3, [r7, #23]
          break;
 80119bc:	e013      	b.n	80119e6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119c4:	2b03      	cmp	r3, #3
 80119c6:	d00d      	beq.n	80119e4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80119c8:	6839      	ldr	r1, [r7, #0]
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f001 f91e 	bl	8012c0c <USBD_CtlError>
            ret = USBD_FAIL;
 80119d0:	2302      	movs	r3, #2
 80119d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80119d4:	e006      	b.n	80119e4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80119d6:	6839      	ldr	r1, [r7, #0]
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f001 f917 	bl	8012c0c <USBD_CtlError>
          ret = USBD_FAIL;
 80119de:	2302      	movs	r3, #2
 80119e0:	75fb      	strb	r3, [r7, #23]
          break;
 80119e2:	e000      	b.n	80119e6 <USBD_CDC_Setup+0x12c>
          break;
 80119e4:	bf00      	nop
      }
      break;
 80119e6:	e006      	b.n	80119f6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f001 f90e 	bl	8012c0c <USBD_CtlError>
      ret = USBD_FAIL;
 80119f0:	2302      	movs	r3, #2
 80119f2:	75fb      	strb	r3, [r7, #23]
      break;
 80119f4:	bf00      	nop
  }

  return ret;
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3718      	adds	r7, #24
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d03a      	beq.n	8011a9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011a26:	78fa      	ldrb	r2, [r7, #3]
 8011a28:	6879      	ldr	r1, [r7, #4]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	4413      	add	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	440b      	add	r3, r1
 8011a34:	331c      	adds	r3, #28
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d029      	beq.n	8011a90 <USBD_CDC_DataIn+0x90>
 8011a3c:	78fa      	ldrb	r2, [r7, #3]
 8011a3e:	6879      	ldr	r1, [r7, #4]
 8011a40:	4613      	mov	r3, r2
 8011a42:	009b      	lsls	r3, r3, #2
 8011a44:	4413      	add	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	440b      	add	r3, r1
 8011a4a:	331c      	adds	r3, #28
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	78f9      	ldrb	r1, [r7, #3]
 8011a50:	68b8      	ldr	r0, [r7, #8]
 8011a52:	460b      	mov	r3, r1
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	440b      	add	r3, r1
 8011a58:	00db      	lsls	r3, r3, #3
 8011a5a:	4403      	add	r3, r0
 8011a5c:	3338      	adds	r3, #56	; 0x38
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	fbb2 f1f3 	udiv	r1, r2, r3
 8011a64:	fb01 f303 	mul.w	r3, r1, r3
 8011a68:	1ad3      	subs	r3, r2, r3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d110      	bne.n	8011a90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8011a6e:	78fa      	ldrb	r2, [r7, #3]
 8011a70:	6879      	ldr	r1, [r7, #4]
 8011a72:	4613      	mov	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	4413      	add	r3, r2
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	440b      	add	r3, r1
 8011a7c:	331c      	adds	r3, #28
 8011a7e:	2200      	movs	r2, #0
 8011a80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011a82:	78f9      	ldrb	r1, [r7, #3]
 8011a84:	2300      	movs	r3, #0
 8011a86:	2200      	movs	r2, #0
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f001 fda9 	bl	80135e0 <USBD_LL_Transmit>
 8011a8e:	e003      	b.n	8011a98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	e000      	b.n	8011a9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8011a9c:	2302      	movs	r3, #2
  }
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b084      	sub	sp, #16
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	460b      	mov	r3, r1
 8011ab0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011aba:	78fb      	ldrb	r3, [r7, #3]
 8011abc:	4619      	mov	r1, r3
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f001 fdd4 	bl	801366c <USBD_LL_GetRxDataSize>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00d      	beq.n	8011af2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011aea:	4611      	mov	r1, r2
 8011aec:	4798      	blx	r3

    return USBD_OK;
 8011aee:	2300      	movs	r3, #0
 8011af0:	e000      	b.n	8011af4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8011af2:	2302      	movs	r3, #2
  }
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d015      	beq.n	8011b42 <USBD_CDC_EP0_RxReady+0x46>
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011b1c:	2bff      	cmp	r3, #255	; 0xff
 8011b1e:	d010      	beq.n	8011b42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b26:	689b      	ldr	r3, [r3, #8]
 8011b28:	68fa      	ldr	r2, [r7, #12]
 8011b2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8011b2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011b36:	b292      	uxth	r2, r2
 8011b38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	22ff      	movs	r2, #255	; 0xff
 8011b3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2243      	movs	r2, #67	; 0x43
 8011b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8011b5a:	4b03      	ldr	r3, [pc, #12]	; (8011b68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	20000204 	.word	0x20000204

08011b6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2243      	movs	r2, #67	; 0x43
 8011b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8011b7a:	4b03      	ldr	r3, [pc, #12]	; (8011b88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr
 8011b88:	200001c0 	.word	0x200001c0

08011b8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2243      	movs	r2, #67	; 0x43
 8011b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8011b9a:	4b03      	ldr	r3, [pc, #12]	; (8011ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	20000248 	.word	0x20000248

08011bac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	220a      	movs	r2, #10
 8011bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8011bba:	4b03      	ldr	r3, [pc, #12]	; (8011bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	2000017c 	.word	0x2000017c

08011bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011bd6:	2302      	movs	r3, #2
 8011bd8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d005      	beq.n	8011bec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8011be8:	2300      	movs	r3, #0
 8011bea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3714      	adds	r7, #20
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b087      	sub	sp, #28
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	60f8      	str	r0, [r7, #12]
 8011c02:	60b9      	str	r1, [r7, #8]
 8011c04:	4613      	mov	r3, r2
 8011c06:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c0e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	68ba      	ldr	r2, [r7, #8]
 8011c14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011c18:	88fa      	ldrh	r2, [r7, #6]
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8011c20:	2300      	movs	r3, #0
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	371c      	adds	r7, #28
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr

08011c2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8011c2e:	b480      	push	{r7}
 8011c30:	b085      	sub	sp, #20
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	683a      	ldr	r2, [r7, #0]
 8011c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3714      	adds	r7, #20
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr

08011c56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b084      	sub	sp, #16
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d017      	beq.n	8011ca0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	7c1b      	ldrb	r3, [r3, #16]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d109      	bne.n	8011c8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c82:	2101      	movs	r1, #1
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f001 fcce 	bl	8013626 <USBD_LL_PrepareReceive>
 8011c8a:	e007      	b.n	8011c9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c92:	2340      	movs	r3, #64	; 0x40
 8011c94:	2101      	movs	r1, #1
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f001 fcc5 	bl	8013626 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	e000      	b.n	8011ca2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8011ca0:	2302      	movs	r3, #2
  }
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b084      	sub	sp, #16
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	60f8      	str	r0, [r7, #12]
 8011cb2:	60b9      	str	r1, [r7, #8]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d101      	bne.n	8011cc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011cbe:	2302      	movs	r3, #2
 8011cc0:	e01a      	b.n	8011cf8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d003      	beq.n	8011cd4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d003      	beq.n	8011ce2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	68ba      	ldr	r2, [r7, #8]
 8011cde:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	79fa      	ldrb	r2, [r7, #7]
 8011cee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f001 fb31 	bl	8013358 <USBD_LL_Init>

  return USBD_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b085      	sub	sp, #20
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d006      	beq.n	8011d22 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	683a      	ldr	r2, [r7, #0]
 8011d18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	73fb      	strb	r3, [r7, #15]
 8011d20:	e001      	b.n	8011d26 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011d22:	2302      	movs	r3, #2
 8011d24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f001 fb65 	bl	801340c <USBD_LL_Start>

  return USBD_OK;
 8011d42:	2300      	movs	r3, #0
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d54:	2300      	movs	r3, #0
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	370c      	adds	r7, #12
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr

08011d62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011d6e:	2302      	movs	r3, #2
 8011d70:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00c      	beq.n	8011d96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	78fa      	ldrb	r2, [r7, #3]
 8011d86:	4611      	mov	r1, r2
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	4798      	blx	r3
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d101      	bne.n	8011d96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011d92:	2300      	movs	r3, #0
 8011d94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3710      	adds	r7, #16
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	460b      	mov	r3, r1
 8011daa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	78fa      	ldrb	r2, [r7, #3]
 8011db6:	4611      	mov	r1, r2
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	4798      	blx	r3

  return USBD_OK;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b082      	sub	sp, #8
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011dd6:	6839      	ldr	r1, [r7, #0]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f000 feda 	bl	8012b92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2201      	movs	r2, #1
 8011de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011dec:	461a      	mov	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011dfa:	f003 031f 	and.w	r3, r3, #31
 8011dfe:	2b02      	cmp	r3, #2
 8011e00:	d016      	beq.n	8011e30 <USBD_LL_SetupStage+0x6a>
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d81c      	bhi.n	8011e40 <USBD_LL_SetupStage+0x7a>
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <USBD_LL_SetupStage+0x4a>
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d008      	beq.n	8011e20 <USBD_LL_SetupStage+0x5a>
 8011e0e:	e017      	b.n	8011e40 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011e16:	4619      	mov	r1, r3
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f000 f9cd 	bl	80121b8 <USBD_StdDevReq>
      break;
 8011e1e:	e01a      	b.n	8011e56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011e26:	4619      	mov	r1, r3
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 fa2f 	bl	801228c <USBD_StdItfReq>
      break;
 8011e2e:	e012      	b.n	8011e56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011e36:	4619      	mov	r1, r3
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 fa6f 	bl	801231c <USBD_StdEPReq>
      break;
 8011e3e:	e00a      	b.n	8011e56 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011e46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f001 fb3c 	bl	80134cc <USBD_LL_StallEP>
      break;
 8011e54:	bf00      	nop
  }

  return USBD_OK;
 8011e56:	2300      	movs	r3, #0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	607a      	str	r2, [r7, #4]
 8011e6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011e6e:	7afb      	ldrb	r3, [r7, #11]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d14b      	bne.n	8011f0c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011e7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e82:	2b03      	cmp	r3, #3
 8011e84:	d134      	bne.n	8011ef0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	68da      	ldr	r2, [r3, #12]
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d919      	bls.n	8011ec6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	68da      	ldr	r2, [r3, #12]
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	1ad2      	subs	r2, r2, r3
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	68da      	ldr	r2, [r3, #12]
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d203      	bcs.n	8011eb4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	e002      	b.n	8011eba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	461a      	mov	r2, r3
 8011ebc:	6879      	ldr	r1, [r7, #4]
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f000 ff5b 	bl	8012d7a <USBD_CtlContinueRx>
 8011ec4:	e038      	b.n	8011f38 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ecc:	691b      	ldr	r3, [r3, #16]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00a      	beq.n	8011ee8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d105      	bne.n	8011ee8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ee2:	691b      	ldr	r3, [r3, #16]
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011ee8:	68f8      	ldr	r0, [r7, #12]
 8011eea:	f000 ff58 	bl	8012d9e <USBD_CtlSendStatus>
 8011eee:	e023      	b.n	8011f38 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ef6:	2b05      	cmp	r3, #5
 8011ef8:	d11e      	bne.n	8011f38 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2200      	movs	r2, #0
 8011efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8011f02:	2100      	movs	r1, #0
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f001 fae1 	bl	80134cc <USBD_LL_StallEP>
 8011f0a:	e015      	b.n	8011f38 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f12:	699b      	ldr	r3, [r3, #24]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00d      	beq.n	8011f34 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011f1e:	2b03      	cmp	r3, #3
 8011f20:	d108      	bne.n	8011f34 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f28:	699b      	ldr	r3, [r3, #24]
 8011f2a:	7afa      	ldrb	r2, [r7, #11]
 8011f2c:	4611      	mov	r1, r2
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	4798      	blx	r3
 8011f32:	e001      	b.n	8011f38 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011f34:	2302      	movs	r3, #2
 8011f36:	e000      	b.n	8011f3a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011f38:	2300      	movs	r3, #0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b086      	sub	sp, #24
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	60f8      	str	r0, [r7, #12]
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	607a      	str	r2, [r7, #4]
 8011f4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011f50:	7afb      	ldrb	r3, [r7, #11]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d17f      	bne.n	8012056 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	3314      	adds	r3, #20
 8011f5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	d15c      	bne.n	8012020 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	68da      	ldr	r2, [r3, #12]
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	691b      	ldr	r3, [r3, #16]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d915      	bls.n	8011f9e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	68da      	ldr	r2, [r3, #12]
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	691b      	ldr	r3, [r3, #16]
 8011f7a:	1ad2      	subs	r2, r2, r3
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	461a      	mov	r2, r3
 8011f88:	6879      	ldr	r1, [r7, #4]
 8011f8a:	68f8      	ldr	r0, [r7, #12]
 8011f8c:	f000 fec5 	bl	8012d1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f90:	2300      	movs	r3, #0
 8011f92:	2200      	movs	r2, #0
 8011f94:	2100      	movs	r1, #0
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f001 fb45 	bl	8013626 <USBD_LL_PrepareReceive>
 8011f9c:	e04e      	b.n	801203c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	689b      	ldr	r3, [r3, #8]
 8011fa2:	697a      	ldr	r2, [r7, #20]
 8011fa4:	6912      	ldr	r2, [r2, #16]
 8011fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011faa:	fb01 f202 	mul.w	r2, r1, r2
 8011fae:	1a9b      	subs	r3, r3, r2
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d11c      	bne.n	8011fee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	689a      	ldr	r2, [r3, #8]
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d316      	bcc.n	8011fee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	689a      	ldr	r2, [r3, #8]
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d20f      	bcs.n	8011fee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011fce:	2200      	movs	r2, #0
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	68f8      	ldr	r0, [r7, #12]
 8011fd4:	f000 fea1 	bl	8012d1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2100      	movs	r1, #0
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f001 fb1d 	bl	8013626 <USBD_LL_PrepareReceive>
 8011fec:	e026      	b.n	801203c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d00a      	beq.n	8012010 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012000:	2b03      	cmp	r3, #3
 8012002:	d105      	bne.n	8012010 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8012010:	2180      	movs	r1, #128	; 0x80
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f001 fa5a 	bl	80134cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f000 fed3 	bl	8012dc4 <USBD_CtlReceiveStatus>
 801201e:	e00d      	b.n	801203c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012026:	2b04      	cmp	r3, #4
 8012028:	d004      	beq.n	8012034 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012030:	2b00      	cmp	r3, #0
 8012032:	d103      	bne.n	801203c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012034:	2180      	movs	r1, #128	; 0x80
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f001 fa48 	bl	80134cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012042:	2b01      	cmp	r3, #1
 8012044:	d11d      	bne.n	8012082 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012046:	68f8      	ldr	r0, [r7, #12]
 8012048:	f7ff fe80 	bl	8011d4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012054:	e015      	b.n	8012082 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801205c:	695b      	ldr	r3, [r3, #20]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00d      	beq.n	801207e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012068:	2b03      	cmp	r3, #3
 801206a:	d108      	bne.n	801207e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012072:	695b      	ldr	r3, [r3, #20]
 8012074:	7afa      	ldrb	r2, [r7, #11]
 8012076:	4611      	mov	r1, r2
 8012078:	68f8      	ldr	r0, [r7, #12]
 801207a:	4798      	blx	r3
 801207c:	e001      	b.n	8012082 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801207e:	2302      	movs	r3, #2
 8012080:	e000      	b.n	8012084 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012082:	2300      	movs	r3, #0
}
 8012084:	4618      	mov	r0, r3
 8012086:	3718      	adds	r7, #24
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012094:	2340      	movs	r3, #64	; 0x40
 8012096:	2200      	movs	r2, #0
 8012098:	2100      	movs	r1, #0
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f001 f9d1 	bl	8013442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2201      	movs	r2, #1
 80120a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2240      	movs	r2, #64	; 0x40
 80120ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80120b0:	2340      	movs	r3, #64	; 0x40
 80120b2:	2200      	movs	r2, #0
 80120b4:	2180      	movs	r1, #128	; 0x80
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f001 f9c3 	bl	8013442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2201      	movs	r2, #1
 80120c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2240      	movs	r2, #64	; 0x40
 80120c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2200      	movs	r2, #0
 80120d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d009      	beq.n	8012104 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	6852      	ldr	r2, [r2, #4]
 80120fc:	b2d2      	uxtb	r2, r2
 80120fe:	4611      	mov	r1, r2
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	4798      	blx	r3
  }

  return USBD_OK;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801210e:	b480      	push	{r7}
 8012110:	b083      	sub	sp, #12
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	460b      	mov	r3, r1
 8012118:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	78fa      	ldrb	r2, [r7, #3]
 801211e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	370c      	adds	r7, #12
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr

0801212e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801212e:	b480      	push	{r7}
 8012130:	b083      	sub	sp, #12
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2204      	movs	r2, #4
 8012146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801214a:	2300      	movs	r3, #0
}
 801214c:	4618      	mov	r0, r3
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012166:	2b04      	cmp	r3, #4
 8012168:	d105      	bne.n	8012176 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012176:	2300      	movs	r3, #0
}
 8012178:	4618      	mov	r0, r3
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012192:	2b03      	cmp	r3, #3
 8012194:	d10b      	bne.n	80121ae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801219c:	69db      	ldr	r3, [r3, #28]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d005      	beq.n	80121ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121a8:	69db      	ldr	r3, [r3, #28]
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121c2:	2300      	movs	r3, #0
 80121c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121ce:	2b40      	cmp	r3, #64	; 0x40
 80121d0:	d005      	beq.n	80121de <USBD_StdDevReq+0x26>
 80121d2:	2b40      	cmp	r3, #64	; 0x40
 80121d4:	d84f      	bhi.n	8012276 <USBD_StdDevReq+0xbe>
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <USBD_StdDevReq+0x36>
 80121da:	2b20      	cmp	r3, #32
 80121dc:	d14b      	bne.n	8012276 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	6839      	ldr	r1, [r7, #0]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	4798      	blx	r3
      break;
 80121ec:	e048      	b.n	8012280 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	785b      	ldrb	r3, [r3, #1]
 80121f2:	2b09      	cmp	r3, #9
 80121f4:	d839      	bhi.n	801226a <USBD_StdDevReq+0xb2>
 80121f6:	a201      	add	r2, pc, #4	; (adr r2, 80121fc <USBD_StdDevReq+0x44>)
 80121f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fc:	0801224d 	.word	0x0801224d
 8012200:	08012261 	.word	0x08012261
 8012204:	0801226b 	.word	0x0801226b
 8012208:	08012257 	.word	0x08012257
 801220c:	0801226b 	.word	0x0801226b
 8012210:	0801222f 	.word	0x0801222f
 8012214:	08012225 	.word	0x08012225
 8012218:	0801226b 	.word	0x0801226b
 801221c:	08012243 	.word	0x08012243
 8012220:	08012239 	.word	0x08012239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f000 f9dc 	bl	80125e4 <USBD_GetDescriptor>
          break;
 801222c:	e022      	b.n	8012274 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801222e:	6839      	ldr	r1, [r7, #0]
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fb3f 	bl	80128b4 <USBD_SetAddress>
          break;
 8012236:	e01d      	b.n	8012274 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 fb7e 	bl	801293c <USBD_SetConfig>
          break;
 8012240:	e018      	b.n	8012274 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 fc07 	bl	8012a58 <USBD_GetConfig>
          break;
 801224a:	e013      	b.n	8012274 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fc37 	bl	8012ac2 <USBD_GetStatus>
          break;
 8012254:	e00e      	b.n	8012274 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012256:	6839      	ldr	r1, [r7, #0]
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fc65 	bl	8012b28 <USBD_SetFeature>
          break;
 801225e:	e009      	b.n	8012274 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012260:	6839      	ldr	r1, [r7, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 fc74 	bl	8012b50 <USBD_ClrFeature>
          break;
 8012268:	e004      	b.n	8012274 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fccd 	bl	8012c0c <USBD_CtlError>
          break;
 8012272:	bf00      	nop
      }
      break;
 8012274:	e004      	b.n	8012280 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012276:	6839      	ldr	r1, [r7, #0]
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 fcc7 	bl	8012c0c <USBD_CtlError>
      break;
 801227e:	bf00      	nop
  }

  return ret;
 8012280:	7bfb      	ldrb	r3, [r7, #15]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop

0801228c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012296:	2300      	movs	r3, #0
 8012298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122a2:	2b40      	cmp	r3, #64	; 0x40
 80122a4:	d005      	beq.n	80122b2 <USBD_StdItfReq+0x26>
 80122a6:	2b40      	cmp	r3, #64	; 0x40
 80122a8:	d82e      	bhi.n	8012308 <USBD_StdItfReq+0x7c>
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d001      	beq.n	80122b2 <USBD_StdItfReq+0x26>
 80122ae:	2b20      	cmp	r3, #32
 80122b0:	d12a      	bne.n	8012308 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122b8:	3b01      	subs	r3, #1
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d81d      	bhi.n	80122fa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	889b      	ldrh	r3, [r3, #4]
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d813      	bhi.n	80122f0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ce:	689b      	ldr	r3, [r3, #8]
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	4798      	blx	r3
 80122d6:	4603      	mov	r3, r0
 80122d8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	88db      	ldrh	r3, [r3, #6]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d110      	bne.n	8012304 <USBD_StdItfReq+0x78>
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d10d      	bne.n	8012304 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 fd58 	bl	8012d9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80122ee:	e009      	b.n	8012304 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80122f0:	6839      	ldr	r1, [r7, #0]
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fc8a 	bl	8012c0c <USBD_CtlError>
          break;
 80122f8:	e004      	b.n	8012304 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80122fa:	6839      	ldr	r1, [r7, #0]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 fc85 	bl	8012c0c <USBD_CtlError>
          break;
 8012302:	e000      	b.n	8012306 <USBD_StdItfReq+0x7a>
          break;
 8012304:	bf00      	nop
      }
      break;
 8012306:	e004      	b.n	8012312 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012308:	6839      	ldr	r1, [r7, #0]
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 fc7e 	bl	8012c0c <USBD_CtlError>
      break;
 8012310:	bf00      	nop
  }

  return USBD_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012326:	2300      	movs	r3, #0
 8012328:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	889b      	ldrh	r3, [r3, #4]
 801232e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012338:	2b40      	cmp	r3, #64	; 0x40
 801233a:	d007      	beq.n	801234c <USBD_StdEPReq+0x30>
 801233c:	2b40      	cmp	r3, #64	; 0x40
 801233e:	f200 8146 	bhi.w	80125ce <USBD_StdEPReq+0x2b2>
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00a      	beq.n	801235c <USBD_StdEPReq+0x40>
 8012346:	2b20      	cmp	r3, #32
 8012348:	f040 8141 	bne.w	80125ce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012352:	689b      	ldr	r3, [r3, #8]
 8012354:	6839      	ldr	r1, [r7, #0]
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	4798      	blx	r3
      break;
 801235a:	e13d      	b.n	80125d8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012364:	2b20      	cmp	r3, #32
 8012366:	d10a      	bne.n	801237e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	6839      	ldr	r1, [r7, #0]
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	4798      	blx	r3
 8012376:	4603      	mov	r3, r0
 8012378:	73fb      	strb	r3, [r7, #15]

        return ret;
 801237a:	7bfb      	ldrb	r3, [r7, #15]
 801237c:	e12d      	b.n	80125da <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	785b      	ldrb	r3, [r3, #1]
 8012382:	2b03      	cmp	r3, #3
 8012384:	d007      	beq.n	8012396 <USBD_StdEPReq+0x7a>
 8012386:	2b03      	cmp	r3, #3
 8012388:	f300 811b 	bgt.w	80125c2 <USBD_StdEPReq+0x2a6>
 801238c:	2b00      	cmp	r3, #0
 801238e:	d072      	beq.n	8012476 <USBD_StdEPReq+0x15a>
 8012390:	2b01      	cmp	r3, #1
 8012392:	d03a      	beq.n	801240a <USBD_StdEPReq+0xee>
 8012394:	e115      	b.n	80125c2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801239c:	2b02      	cmp	r3, #2
 801239e:	d002      	beq.n	80123a6 <USBD_StdEPReq+0x8a>
 80123a0:	2b03      	cmp	r3, #3
 80123a2:	d015      	beq.n	80123d0 <USBD_StdEPReq+0xb4>
 80123a4:	e02b      	b.n	80123fe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d00c      	beq.n	80123c6 <USBD_StdEPReq+0xaa>
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	2b80      	cmp	r3, #128	; 0x80
 80123b0:	d009      	beq.n	80123c6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80123b2:	7bbb      	ldrb	r3, [r7, #14]
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f001 f888 	bl	80134cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80123bc:	2180      	movs	r1, #128	; 0x80
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f001 f884 	bl	80134cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80123c4:	e020      	b.n	8012408 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 fc1f 	bl	8012c0c <USBD_CtlError>
              break;
 80123ce:	e01b      	b.n	8012408 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	885b      	ldrh	r3, [r3, #2]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d10e      	bne.n	80123f6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80123d8:	7bbb      	ldrb	r3, [r7, #14]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d00b      	beq.n	80123f6 <USBD_StdEPReq+0xda>
 80123de:	7bbb      	ldrb	r3, [r7, #14]
 80123e0:	2b80      	cmp	r3, #128	; 0x80
 80123e2:	d008      	beq.n	80123f6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	88db      	ldrh	r3, [r3, #6]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d104      	bne.n	80123f6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80123ec:	7bbb      	ldrb	r3, [r7, #14]
 80123ee:	4619      	mov	r1, r3
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f001 f86b 	bl	80134cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fcd1 	bl	8012d9e <USBD_CtlSendStatus>

              break;
 80123fc:	e004      	b.n	8012408 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fc03 	bl	8012c0c <USBD_CtlError>
              break;
 8012406:	bf00      	nop
          }
          break;
 8012408:	e0e0      	b.n	80125cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012410:	2b02      	cmp	r3, #2
 8012412:	d002      	beq.n	801241a <USBD_StdEPReq+0xfe>
 8012414:	2b03      	cmp	r3, #3
 8012416:	d015      	beq.n	8012444 <USBD_StdEPReq+0x128>
 8012418:	e026      	b.n	8012468 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801241a:	7bbb      	ldrb	r3, [r7, #14]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d00c      	beq.n	801243a <USBD_StdEPReq+0x11e>
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	2b80      	cmp	r3, #128	; 0x80
 8012424:	d009      	beq.n	801243a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012426:	7bbb      	ldrb	r3, [r7, #14]
 8012428:	4619      	mov	r1, r3
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f001 f84e 	bl	80134cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012430:	2180      	movs	r1, #128	; 0x80
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f001 f84a 	bl	80134cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012438:	e01c      	b.n	8012474 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801243a:	6839      	ldr	r1, [r7, #0]
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 fbe5 	bl	8012c0c <USBD_CtlError>
              break;
 8012442:	e017      	b.n	8012474 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	885b      	ldrh	r3, [r3, #2]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d112      	bne.n	8012472 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801244c:	7bbb      	ldrb	r3, [r7, #14]
 801244e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012452:	2b00      	cmp	r3, #0
 8012454:	d004      	beq.n	8012460 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8012456:	7bbb      	ldrb	r3, [r7, #14]
 8012458:	4619      	mov	r1, r3
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f001 f855 	bl	801350a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f000 fc9c 	bl	8012d9e <USBD_CtlSendStatus>
              }
              break;
 8012466:	e004      	b.n	8012472 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8012468:	6839      	ldr	r1, [r7, #0]
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 fbce 	bl	8012c0c <USBD_CtlError>
              break;
 8012470:	e000      	b.n	8012474 <USBD_StdEPReq+0x158>
              break;
 8012472:	bf00      	nop
          }
          break;
 8012474:	e0aa      	b.n	80125cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801247c:	2b02      	cmp	r3, #2
 801247e:	d002      	beq.n	8012486 <USBD_StdEPReq+0x16a>
 8012480:	2b03      	cmp	r3, #3
 8012482:	d032      	beq.n	80124ea <USBD_StdEPReq+0x1ce>
 8012484:	e097      	b.n	80125b6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012486:	7bbb      	ldrb	r3, [r7, #14]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d007      	beq.n	801249c <USBD_StdEPReq+0x180>
 801248c:	7bbb      	ldrb	r3, [r7, #14]
 801248e:	2b80      	cmp	r3, #128	; 0x80
 8012490:	d004      	beq.n	801249c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8012492:	6839      	ldr	r1, [r7, #0]
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f000 fbb9 	bl	8012c0c <USBD_CtlError>
                break;
 801249a:	e091      	b.n	80125c0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801249c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	da0b      	bge.n	80124bc <USBD_StdEPReq+0x1a0>
 80124a4:	7bbb      	ldrb	r3, [r7, #14]
 80124a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124aa:	4613      	mov	r3, r2
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	4413      	add	r3, r2
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	3310      	adds	r3, #16
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	4413      	add	r3, r2
 80124b8:	3304      	adds	r3, #4
 80124ba:	e00b      	b.n	80124d4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80124bc:	7bbb      	ldrb	r3, [r7, #14]
 80124be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124c2:	4613      	mov	r3, r2
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	4413      	add	r3, r2
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	4413      	add	r3, r2
 80124d2:	3304      	adds	r3, #4
 80124d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	2200      	movs	r2, #0
 80124da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	2202      	movs	r2, #2
 80124e0:	4619      	mov	r1, r3
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 fbfd 	bl	8012ce2 <USBD_CtlSendData>
              break;
 80124e8:	e06a      	b.n	80125c0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80124ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	da11      	bge.n	8012516 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80124f2:	7bbb      	ldrb	r3, [r7, #14]
 80124f4:	f003 020f 	and.w	r2, r3, #15
 80124f8:	6879      	ldr	r1, [r7, #4]
 80124fa:	4613      	mov	r3, r2
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	4413      	add	r3, r2
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	440b      	add	r3, r1
 8012504:	3318      	adds	r3, #24
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d117      	bne.n	801253c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801250c:	6839      	ldr	r1, [r7, #0]
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 fb7c 	bl	8012c0c <USBD_CtlError>
                  break;
 8012514:	e054      	b.n	80125c0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012516:	7bbb      	ldrb	r3, [r7, #14]
 8012518:	f003 020f 	and.w	r2, r3, #15
 801251c:	6879      	ldr	r1, [r7, #4]
 801251e:	4613      	mov	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	4413      	add	r3, r2
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	440b      	add	r3, r1
 8012528:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d104      	bne.n	801253c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 fb69 	bl	8012c0c <USBD_CtlError>
                  break;
 801253a:	e041      	b.n	80125c0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801253c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012540:	2b00      	cmp	r3, #0
 8012542:	da0b      	bge.n	801255c <USBD_StdEPReq+0x240>
 8012544:	7bbb      	ldrb	r3, [r7, #14]
 8012546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801254a:	4613      	mov	r3, r2
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	4413      	add	r3, r2
 8012550:	009b      	lsls	r3, r3, #2
 8012552:	3310      	adds	r3, #16
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	4413      	add	r3, r2
 8012558:	3304      	adds	r3, #4
 801255a:	e00b      	b.n	8012574 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801255c:	7bbb      	ldrb	r3, [r7, #14]
 801255e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012562:	4613      	mov	r3, r2
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	4413      	add	r3, r2
 8012568:	009b      	lsls	r3, r3, #2
 801256a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	4413      	add	r3, r2
 8012572:	3304      	adds	r3, #4
 8012574:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012576:	7bbb      	ldrb	r3, [r7, #14]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d002      	beq.n	8012582 <USBD_StdEPReq+0x266>
 801257c:	7bbb      	ldrb	r3, [r7, #14]
 801257e:	2b80      	cmp	r3, #128	; 0x80
 8012580:	d103      	bne.n	801258a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	2200      	movs	r2, #0
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	e00e      	b.n	80125a8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801258a:	7bbb      	ldrb	r3, [r7, #14]
 801258c:	4619      	mov	r1, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 ffda 	bl	8013548 <USBD_LL_IsStallEP>
 8012594:	4603      	mov	r3, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	d003      	beq.n	80125a2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	2201      	movs	r2, #1
 801259e:	601a      	str	r2, [r3, #0]
 80125a0:	e002      	b.n	80125a8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	2200      	movs	r2, #0
 80125a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	2202      	movs	r2, #2
 80125ac:	4619      	mov	r1, r3
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fb97 	bl	8012ce2 <USBD_CtlSendData>
              break;
 80125b4:	e004      	b.n	80125c0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 fb27 	bl	8012c0c <USBD_CtlError>
              break;
 80125be:	bf00      	nop
          }
          break;
 80125c0:	e004      	b.n	80125cc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80125c2:	6839      	ldr	r1, [r7, #0]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fb21 	bl	8012c0c <USBD_CtlError>
          break;
 80125ca:	bf00      	nop
      }
      break;
 80125cc:	e004      	b.n	80125d8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80125ce:	6839      	ldr	r1, [r7, #0]
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f000 fb1b 	bl	8012c0c <USBD_CtlError>
      break;
 80125d6:	bf00      	nop
  }

  return ret;
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
	...

080125e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80125ee:	2300      	movs	r3, #0
 80125f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80125f2:	2300      	movs	r3, #0
 80125f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80125f6:	2300      	movs	r3, #0
 80125f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	885b      	ldrh	r3, [r3, #2]
 80125fe:	0a1b      	lsrs	r3, r3, #8
 8012600:	b29b      	uxth	r3, r3
 8012602:	3b01      	subs	r3, #1
 8012604:	2b06      	cmp	r3, #6
 8012606:	f200 8128 	bhi.w	801285a <USBD_GetDescriptor+0x276>
 801260a:	a201      	add	r2, pc, #4	; (adr r2, 8012610 <USBD_GetDescriptor+0x2c>)
 801260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012610:	0801262d 	.word	0x0801262d
 8012614:	08012645 	.word	0x08012645
 8012618:	08012685 	.word	0x08012685
 801261c:	0801285b 	.word	0x0801285b
 8012620:	0801285b 	.word	0x0801285b
 8012624:	080127fb 	.word	0x080127fb
 8012628:	08012827 	.word	0x08012827
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	7c12      	ldrb	r2, [r2, #16]
 8012638:	f107 0108 	add.w	r1, r7, #8
 801263c:	4610      	mov	r0, r2
 801263e:	4798      	blx	r3
 8012640:	60f8      	str	r0, [r7, #12]
      break;
 8012642:	e112      	b.n	801286a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	7c1b      	ldrb	r3, [r3, #16]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d10d      	bne.n	8012668 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012654:	f107 0208 	add.w	r2, r7, #8
 8012658:	4610      	mov	r0, r2
 801265a:	4798      	blx	r3
 801265c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3301      	adds	r3, #1
 8012662:	2202      	movs	r2, #2
 8012664:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012666:	e100      	b.n	801286a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012670:	f107 0208 	add.w	r2, r7, #8
 8012674:	4610      	mov	r0, r2
 8012676:	4798      	blx	r3
 8012678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	3301      	adds	r3, #1
 801267e:	2202      	movs	r2, #2
 8012680:	701a      	strb	r2, [r3, #0]
      break;
 8012682:	e0f2      	b.n	801286a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	885b      	ldrh	r3, [r3, #2]
 8012688:	b2db      	uxtb	r3, r3
 801268a:	2b05      	cmp	r3, #5
 801268c:	f200 80ac 	bhi.w	80127e8 <USBD_GetDescriptor+0x204>
 8012690:	a201      	add	r2, pc, #4	; (adr r2, 8012698 <USBD_GetDescriptor+0xb4>)
 8012692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012696:	bf00      	nop
 8012698:	080126b1 	.word	0x080126b1
 801269c:	080126e5 	.word	0x080126e5
 80126a0:	08012719 	.word	0x08012719
 80126a4:	0801274d 	.word	0x0801274d
 80126a8:	08012781 	.word	0x08012781
 80126ac:	080127b5 	.word	0x080127b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00b      	beq.n	80126d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	7c12      	ldrb	r2, [r2, #16]
 80126c8:	f107 0108 	add.w	r1, r7, #8
 80126cc:	4610      	mov	r0, r2
 80126ce:	4798      	blx	r3
 80126d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126d2:	e091      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 fa98 	bl	8012c0c <USBD_CtlError>
            err++;
 80126dc:	7afb      	ldrb	r3, [r7, #11]
 80126de:	3301      	adds	r3, #1
 80126e0:	72fb      	strb	r3, [r7, #11]
          break;
 80126e2:	e089      	b.n	80127f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126ea:	689b      	ldr	r3, [r3, #8]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00b      	beq.n	8012708 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126f6:	689b      	ldr	r3, [r3, #8]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	7c12      	ldrb	r2, [r2, #16]
 80126fc:	f107 0108 	add.w	r1, r7, #8
 8012700:	4610      	mov	r0, r2
 8012702:	4798      	blx	r3
 8012704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012706:	e077      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012708:	6839      	ldr	r1, [r7, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fa7e 	bl	8012c0c <USBD_CtlError>
            err++;
 8012710:	7afb      	ldrb	r3, [r7, #11]
 8012712:	3301      	adds	r3, #1
 8012714:	72fb      	strb	r3, [r7, #11]
          break;
 8012716:	e06f      	b.n	80127f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00b      	beq.n	801273c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	7c12      	ldrb	r2, [r2, #16]
 8012730:	f107 0108 	add.w	r1, r7, #8
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
 8012738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801273a:	e05d      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fa64 	bl	8012c0c <USBD_CtlError>
            err++;
 8012744:	7afb      	ldrb	r3, [r7, #11]
 8012746:	3301      	adds	r3, #1
 8012748:	72fb      	strb	r3, [r7, #11]
          break;
 801274a:	e055      	b.n	80127f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012752:	691b      	ldr	r3, [r3, #16]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00b      	beq.n	8012770 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	7c12      	ldrb	r2, [r2, #16]
 8012764:	f107 0108 	add.w	r1, r7, #8
 8012768:	4610      	mov	r0, r2
 801276a:	4798      	blx	r3
 801276c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801276e:	e043      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fa4a 	bl	8012c0c <USBD_CtlError>
            err++;
 8012778:	7afb      	ldrb	r3, [r7, #11]
 801277a:	3301      	adds	r3, #1
 801277c:	72fb      	strb	r3, [r7, #11]
          break;
 801277e:	e03b      	b.n	80127f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012786:	695b      	ldr	r3, [r3, #20]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00b      	beq.n	80127a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012792:	695b      	ldr	r3, [r3, #20]
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	7c12      	ldrb	r2, [r2, #16]
 8012798:	f107 0108 	add.w	r1, r7, #8
 801279c:	4610      	mov	r0, r2
 801279e:	4798      	blx	r3
 80127a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127a2:	e029      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 fa30 	bl	8012c0c <USBD_CtlError>
            err++;
 80127ac:	7afb      	ldrb	r3, [r7, #11]
 80127ae:	3301      	adds	r3, #1
 80127b0:	72fb      	strb	r3, [r7, #11]
          break;
 80127b2:	e021      	b.n	80127f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80127ba:	699b      	ldr	r3, [r3, #24]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d00b      	beq.n	80127d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80127c6:	699b      	ldr	r3, [r3, #24]
 80127c8:	687a      	ldr	r2, [r7, #4]
 80127ca:	7c12      	ldrb	r2, [r2, #16]
 80127cc:	f107 0108 	add.w	r1, r7, #8
 80127d0:	4610      	mov	r0, r2
 80127d2:	4798      	blx	r3
 80127d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127d6:	e00f      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f000 fa16 	bl	8012c0c <USBD_CtlError>
            err++;
 80127e0:	7afb      	ldrb	r3, [r7, #11]
 80127e2:	3301      	adds	r3, #1
 80127e4:	72fb      	strb	r3, [r7, #11]
          break;
 80127e6:	e007      	b.n	80127f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 fa0e 	bl	8012c0c <USBD_CtlError>
          err++;
 80127f0:	7afb      	ldrb	r3, [r7, #11]
 80127f2:	3301      	adds	r3, #1
 80127f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80127f6:	e038      	b.n	801286a <USBD_GetDescriptor+0x286>
 80127f8:	e037      	b.n	801286a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	7c1b      	ldrb	r3, [r3, #16]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d109      	bne.n	8012816 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801280a:	f107 0208 	add.w	r2, r7, #8
 801280e:	4610      	mov	r0, r2
 8012810:	4798      	blx	r3
 8012812:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012814:	e029      	b.n	801286a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f9f7 	bl	8012c0c <USBD_CtlError>
        err++;
 801281e:	7afb      	ldrb	r3, [r7, #11]
 8012820:	3301      	adds	r3, #1
 8012822:	72fb      	strb	r3, [r7, #11]
      break;
 8012824:	e021      	b.n	801286a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	7c1b      	ldrb	r3, [r3, #16]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d10d      	bne.n	801284a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012836:	f107 0208 	add.w	r2, r7, #8
 801283a:	4610      	mov	r0, r2
 801283c:	4798      	blx	r3
 801283e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	3301      	adds	r3, #1
 8012844:	2207      	movs	r2, #7
 8012846:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012848:	e00f      	b.n	801286a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801284a:	6839      	ldr	r1, [r7, #0]
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f000 f9dd 	bl	8012c0c <USBD_CtlError>
        err++;
 8012852:	7afb      	ldrb	r3, [r7, #11]
 8012854:	3301      	adds	r3, #1
 8012856:	72fb      	strb	r3, [r7, #11]
      break;
 8012858:	e007      	b.n	801286a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801285a:	6839      	ldr	r1, [r7, #0]
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 f9d5 	bl	8012c0c <USBD_CtlError>
      err++;
 8012862:	7afb      	ldrb	r3, [r7, #11]
 8012864:	3301      	adds	r3, #1
 8012866:	72fb      	strb	r3, [r7, #11]
      break;
 8012868:	bf00      	nop
  }

  if (err != 0U)
 801286a:	7afb      	ldrb	r3, [r7, #11]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d11c      	bne.n	80128aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8012870:	893b      	ldrh	r3, [r7, #8]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d011      	beq.n	801289a <USBD_GetDescriptor+0x2b6>
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	88db      	ldrh	r3, [r3, #6]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00d      	beq.n	801289a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	88da      	ldrh	r2, [r3, #6]
 8012882:	893b      	ldrh	r3, [r7, #8]
 8012884:	4293      	cmp	r3, r2
 8012886:	bf28      	it	cs
 8012888:	4613      	movcs	r3, r2
 801288a:	b29b      	uxth	r3, r3
 801288c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801288e:	893b      	ldrh	r3, [r7, #8]
 8012890:	461a      	mov	r2, r3
 8012892:	68f9      	ldr	r1, [r7, #12]
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 fa24 	bl	8012ce2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	88db      	ldrh	r3, [r3, #6]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d104      	bne.n	80128ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fa7b 	bl	8012d9e <USBD_CtlSendStatus>
 80128a8:	e000      	b.n	80128ac <USBD_GetDescriptor+0x2c8>
    return;
 80128aa:	bf00      	nop
    }
  }
}
 80128ac:	3710      	adds	r7, #16
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop

080128b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	889b      	ldrh	r3, [r3, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d130      	bne.n	8012928 <USBD_SetAddress+0x74>
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	88db      	ldrh	r3, [r3, #6]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d12c      	bne.n	8012928 <USBD_SetAddress+0x74>
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	885b      	ldrh	r3, [r3, #2]
 80128d2:	2b7f      	cmp	r3, #127	; 0x7f
 80128d4:	d828      	bhi.n	8012928 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	885b      	ldrh	r3, [r3, #2]
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128e8:	2b03      	cmp	r3, #3
 80128ea:	d104      	bne.n	80128f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80128ec:	6839      	ldr	r1, [r7, #0]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 f98c 	bl	8012c0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128f4:	e01d      	b.n	8012932 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	7bfa      	ldrb	r2, [r7, #15]
 80128fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80128fe:	7bfb      	ldrb	r3, [r7, #15]
 8012900:	4619      	mov	r1, r3
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 fe4d 	bl	80135a2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 fa48 	bl	8012d9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801290e:	7bfb      	ldrb	r3, [r7, #15]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d004      	beq.n	801291e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2202      	movs	r2, #2
 8012918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801291c:	e009      	b.n	8012932 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2201      	movs	r2, #1
 8012922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012926:	e004      	b.n	8012932 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 f96e 	bl	8012c0c <USBD_CtlError>
  }
}
 8012930:	bf00      	nop
 8012932:	bf00      	nop
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
	...

0801293c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	885b      	ldrh	r3, [r3, #2]
 801294a:	b2da      	uxtb	r2, r3
 801294c:	4b41      	ldr	r3, [pc, #260]	; (8012a54 <USBD_SetConfig+0x118>)
 801294e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012950:	4b40      	ldr	r3, [pc, #256]	; (8012a54 <USBD_SetConfig+0x118>)
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d904      	bls.n	8012962 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012958:	6839      	ldr	r1, [r7, #0]
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 f956 	bl	8012c0c <USBD_CtlError>
 8012960:	e075      	b.n	8012a4e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012968:	2b02      	cmp	r3, #2
 801296a:	d002      	beq.n	8012972 <USBD_SetConfig+0x36>
 801296c:	2b03      	cmp	r3, #3
 801296e:	d023      	beq.n	80129b8 <USBD_SetConfig+0x7c>
 8012970:	e062      	b.n	8012a38 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8012972:	4b38      	ldr	r3, [pc, #224]	; (8012a54 <USBD_SetConfig+0x118>)
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d01a      	beq.n	80129b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801297a:	4b36      	ldr	r3, [pc, #216]	; (8012a54 <USBD_SetConfig+0x118>)
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	461a      	mov	r2, r3
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2203      	movs	r2, #3
 8012988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801298c:	4b31      	ldr	r3, [pc, #196]	; (8012a54 <USBD_SetConfig+0x118>)
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	4619      	mov	r1, r3
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff f9e5 	bl	8011d62 <USBD_SetClassConfig>
 8012998:	4603      	mov	r3, r0
 801299a:	2b02      	cmp	r3, #2
 801299c:	d104      	bne.n	80129a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801299e:	6839      	ldr	r1, [r7, #0]
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 f933 	bl	8012c0c <USBD_CtlError>
            return;
 80129a6:	e052      	b.n	8012a4e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f000 f9f8 	bl	8012d9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80129ae:	e04e      	b.n	8012a4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f000 f9f4 	bl	8012d9e <USBD_CtlSendStatus>
        break;
 80129b6:	e04a      	b.n	8012a4e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80129b8:	4b26      	ldr	r3, [pc, #152]	; (8012a54 <USBD_SetConfig+0x118>)
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d112      	bne.n	80129e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2202      	movs	r2, #2
 80129c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80129c8:	4b22      	ldr	r3, [pc, #136]	; (8012a54 <USBD_SetConfig+0x118>)
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	461a      	mov	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80129d2:	4b20      	ldr	r3, [pc, #128]	; (8012a54 <USBD_SetConfig+0x118>)
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	4619      	mov	r1, r3
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f7ff f9e1 	bl	8011da0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 f9dd 	bl	8012d9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80129e4:	e033      	b.n	8012a4e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80129e6:	4b1b      	ldr	r3, [pc, #108]	; (8012a54 <USBD_SetConfig+0x118>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	461a      	mov	r2, r3
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d01d      	beq.n	8012a30 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	b2db      	uxtb	r3, r3
 80129fa:	4619      	mov	r1, r3
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f7ff f9cf 	bl	8011da0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8012a02:	4b14      	ldr	r3, [pc, #80]	; (8012a54 <USBD_SetConfig+0x118>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	461a      	mov	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8012a0c:	4b11      	ldr	r3, [pc, #68]	; (8012a54 <USBD_SetConfig+0x118>)
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	4619      	mov	r1, r3
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f7ff f9a5 	bl	8011d62 <USBD_SetClassConfig>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b02      	cmp	r3, #2
 8012a1c:	d104      	bne.n	8012a28 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f8f3 	bl	8012c0c <USBD_CtlError>
            return;
 8012a26:	e012      	b.n	8012a4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 f9b8 	bl	8012d9e <USBD_CtlSendStatus>
        break;
 8012a2e:	e00e      	b.n	8012a4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 f9b4 	bl	8012d9e <USBD_CtlSendStatus>
        break;
 8012a36:	e00a      	b.n	8012a4e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f8e6 	bl	8012c0c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <USBD_SetConfig+0x118>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	4619      	mov	r1, r3
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff f9aa 	bl	8011da0 <USBD_ClrClassConfig>
        break;
 8012a4c:	bf00      	nop
    }
  }
}
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	20001afc 	.word	0x20001afc

08012a58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	88db      	ldrh	r3, [r3, #6]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d004      	beq.n	8012a74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012a6a:	6839      	ldr	r1, [r7, #0]
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f000 f8cd 	bl	8012c0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012a72:	e022      	b.n	8012aba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	dc02      	bgt.n	8012a84 <USBD_GetConfig+0x2c>
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	dc03      	bgt.n	8012a8a <USBD_GetConfig+0x32>
 8012a82:	e015      	b.n	8012ab0 <USBD_GetConfig+0x58>
 8012a84:	2b03      	cmp	r3, #3
 8012a86:	d00b      	beq.n	8012aa0 <USBD_GetConfig+0x48>
 8012a88:	e012      	b.n	8012ab0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	3308      	adds	r3, #8
 8012a94:	2201      	movs	r2, #1
 8012a96:	4619      	mov	r1, r3
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f000 f922 	bl	8012ce2 <USBD_CtlSendData>
        break;
 8012a9e:	e00c      	b.n	8012aba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	3304      	adds	r3, #4
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f91a 	bl	8012ce2 <USBD_CtlSendData>
        break;
 8012aae:	e004      	b.n	8012aba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8012ab0:	6839      	ldr	r1, [r7, #0]
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 f8aa 	bl	8012c0c <USBD_CtlError>
        break;
 8012ab8:	bf00      	nop
}
 8012aba:	bf00      	nop
 8012abc:	3708      	adds	r7, #8
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b082      	sub	sp, #8
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
 8012aca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ad2:	3b01      	subs	r3, #1
 8012ad4:	2b02      	cmp	r3, #2
 8012ad6:	d81e      	bhi.n	8012b16 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	88db      	ldrh	r3, [r3, #6]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d004      	beq.n	8012aea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8012ae0:	6839      	ldr	r1, [r7, #0]
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 f892 	bl	8012c0c <USBD_CtlError>
        break;
 8012ae8:	e01a      	b.n	8012b20 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2201      	movs	r2, #1
 8012aee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d005      	beq.n	8012b06 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	f043 0202 	orr.w	r2, r3, #2
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	330c      	adds	r3, #12
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 f8e7 	bl	8012ce2 <USBD_CtlSendData>
      break;
 8012b14:	e004      	b.n	8012b20 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8012b16:	6839      	ldr	r1, [r7, #0]
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 f877 	bl	8012c0c <USBD_CtlError>
      break;
 8012b1e:	bf00      	nop
  }
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	885b      	ldrh	r3, [r3, #2]
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d106      	bne.n	8012b48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f000 f92b 	bl	8012d9e <USBD_CtlSendStatus>
  }
}
 8012b48:	bf00      	nop
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b60:	3b01      	subs	r3, #1
 8012b62:	2b02      	cmp	r3, #2
 8012b64:	d80b      	bhi.n	8012b7e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	885b      	ldrh	r3, [r3, #2]
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d10c      	bne.n	8012b88 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 f911 	bl	8012d9e <USBD_CtlSendStatus>
      }
      break;
 8012b7c:	e004      	b.n	8012b88 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012b7e:	6839      	ldr	r1, [r7, #0]
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 f843 	bl	8012c0c <USBD_CtlError>
      break;
 8012b86:	e000      	b.n	8012b8a <USBD_ClrFeature+0x3a>
      break;
 8012b88:	bf00      	nop
  }
}
 8012b8a:	bf00      	nop
 8012b8c:	3708      	adds	r7, #8
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}

08012b92 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012b92:	b480      	push	{r7}
 8012b94:	b083      	sub	sp, #12
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
 8012b9a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	781a      	ldrb	r2, [r3, #0]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	785a      	ldrb	r2, [r3, #1]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	3302      	adds	r3, #2
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	3303      	adds	r3, #3
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	021b      	lsls	r3, r3, #8
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	4413      	add	r3, r2
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	3304      	adds	r3, #4
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	b29a      	uxth	r2, r3
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	3305      	adds	r3, #5
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	021b      	lsls	r3, r3, #8
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	4413      	add	r3, r2
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	3306      	adds	r3, #6
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	3307      	adds	r3, #7
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	021b      	lsls	r3, r3, #8
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	4413      	add	r3, r2
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	80da      	strh	r2, [r3, #6]

}
 8012c00:	bf00      	nop
 8012c02:	370c      	adds	r7, #12
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8012c16:	2180      	movs	r1, #128	; 0x80
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 fc57 	bl	80134cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8012c1e:	2100      	movs	r1, #0
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f000 fc53 	bl	80134cc <USBD_LL_StallEP>
}
 8012c26:	bf00      	nop
 8012c28:	3708      	adds	r7, #8
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}

08012c2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012c2e:	b580      	push	{r7, lr}
 8012c30:	b086      	sub	sp, #24
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	60f8      	str	r0, [r7, #12]
 8012c36:	60b9      	str	r1, [r7, #8]
 8012c38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d032      	beq.n	8012caa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012c44:	68f8      	ldr	r0, [r7, #12]
 8012c46:	f000 f834 	bl	8012cb2 <USBD_GetLen>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	005b      	lsls	r3, r3, #1
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
 8012c5a:	1c5a      	adds	r2, r3, #1
 8012c5c:	75fa      	strb	r2, [r7, #23]
 8012c5e:	461a      	mov	r2, r3
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	4413      	add	r3, r2
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	7812      	ldrb	r2, [r2, #0]
 8012c68:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012c6a:	7dfb      	ldrb	r3, [r7, #23]
 8012c6c:	1c5a      	adds	r2, r3, #1
 8012c6e:	75fa      	strb	r2, [r7, #23]
 8012c70:	461a      	mov	r2, r3
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	4413      	add	r3, r2
 8012c76:	2203      	movs	r2, #3
 8012c78:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012c7a:	e012      	b.n	8012ca2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	1c5a      	adds	r2, r3, #1
 8012c80:	60fa      	str	r2, [r7, #12]
 8012c82:	7dfa      	ldrb	r2, [r7, #23]
 8012c84:	1c51      	adds	r1, r2, #1
 8012c86:	75f9      	strb	r1, [r7, #23]
 8012c88:	4611      	mov	r1, r2
 8012c8a:	68ba      	ldr	r2, [r7, #8]
 8012c8c:	440a      	add	r2, r1
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
 8012c94:	1c5a      	adds	r2, r3, #1
 8012c96:	75fa      	strb	r2, [r7, #23]
 8012c98:	461a      	mov	r2, r3
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1e8      	bne.n	8012c7c <USBD_GetString+0x4e>
    }
  }
}
 8012caa:	bf00      	nop
 8012cac:	3718      	adds	r7, #24
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012cb2:	b480      	push	{r7}
 8012cb4:	b085      	sub	sp, #20
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8012cbe:	e005      	b.n	8012ccc <USBD_GetLen+0x1a>
  {
    len++;
 8012cc0:	7bfb      	ldrb	r3, [r7, #15]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1f5      	bne.n	8012cc0 <USBD_GetLen+0xe>
  }

  return len;
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3714      	adds	r7, #20
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr

08012ce2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8012ce2:	b580      	push	{r7, lr}
 8012ce4:	b084      	sub	sp, #16
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	60f8      	str	r0, [r7, #12]
 8012cea:	60b9      	str	r1, [r7, #8]
 8012cec:	4613      	mov	r3, r2
 8012cee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2202      	movs	r2, #2
 8012cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012cf8:	88fa      	ldrh	r2, [r7, #6]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012cfe:	88fa      	ldrh	r2, [r7, #6]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d04:	88fb      	ldrh	r3, [r7, #6]
 8012d06:	68ba      	ldr	r2, [r7, #8]
 8012d08:	2100      	movs	r1, #0
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f000 fc68 	bl	80135e0 <USBD_LL_Transmit>

  return USBD_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}

08012d1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8012d1a:	b580      	push	{r7, lr}
 8012d1c:	b084      	sub	sp, #16
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	60f8      	str	r0, [r7, #12]
 8012d22:	60b9      	str	r1, [r7, #8]
 8012d24:	4613      	mov	r3, r2
 8012d26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d28:	88fb      	ldrh	r3, [r7, #6]
 8012d2a:	68ba      	ldr	r2, [r7, #8]
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	68f8      	ldr	r0, [r7, #12]
 8012d30:	f000 fc56 	bl	80135e0 <USBD_LL_Transmit>

  return USBD_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3710      	adds	r7, #16
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b084      	sub	sp, #16
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	60f8      	str	r0, [r7, #12]
 8012d46:	60b9      	str	r1, [r7, #8]
 8012d48:	4613      	mov	r3, r2
 8012d4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2203      	movs	r2, #3
 8012d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012d54:	88fa      	ldrh	r2, [r7, #6]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8012d5c:	88fa      	ldrh	r2, [r7, #6]
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d64:	88fb      	ldrh	r3, [r7, #6]
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	2100      	movs	r1, #0
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	f000 fc5b 	bl	8013626 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b084      	sub	sp, #16
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	60f8      	str	r0, [r7, #12]
 8012d82:	60b9      	str	r1, [r7, #8]
 8012d84:	4613      	mov	r3, r2
 8012d86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d88:	88fb      	ldrh	r3, [r7, #6]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	68f8      	ldr	r0, [r7, #12]
 8012d90:	f000 fc49 	bl	8013626 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d94:	2300      	movs	r3, #0
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}

08012d9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b082      	sub	sp, #8
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2204      	movs	r2, #4
 8012daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012dae:	2300      	movs	r3, #0
 8012db0:	2200      	movs	r2, #0
 8012db2:	2100      	movs	r1, #0
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 fc13 	bl	80135e0 <USBD_LL_Transmit>

  return USBD_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2205      	movs	r2, #5
 8012dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	2100      	movs	r1, #0
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f000 fc23 	bl	8013626 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3708      	adds	r7, #8
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
	...

08012dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012df0:	2200      	movs	r2, #0
 8012df2:	4912      	ldr	r1, [pc, #72]	; (8012e3c <MX_USB_DEVICE_Init+0x50>)
 8012df4:	4812      	ldr	r0, [pc, #72]	; (8012e40 <MX_USB_DEVICE_Init+0x54>)
 8012df6:	f7fe ff58 	bl	8011caa <USBD_Init>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d001      	beq.n	8012e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012e00:	f7f0 fa82 	bl	8003308 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012e04:	490f      	ldr	r1, [pc, #60]	; (8012e44 <MX_USB_DEVICE_Init+0x58>)
 8012e06:	480e      	ldr	r0, [pc, #56]	; (8012e40 <MX_USB_DEVICE_Init+0x54>)
 8012e08:	f7fe ff7a 	bl	8011d00 <USBD_RegisterClass>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d001      	beq.n	8012e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012e12:	f7f0 fa79 	bl	8003308 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012e16:	490c      	ldr	r1, [pc, #48]	; (8012e48 <MX_USB_DEVICE_Init+0x5c>)
 8012e18:	4809      	ldr	r0, [pc, #36]	; (8012e40 <MX_USB_DEVICE_Init+0x54>)
 8012e1a:	f7fe fed7 	bl	8011bcc <USBD_CDC_RegisterInterface>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012e24:	f7f0 fa70 	bl	8003308 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012e28:	4805      	ldr	r0, [pc, #20]	; (8012e40 <MX_USB_DEVICE_Init+0x54>)
 8012e2a:	f7fe ff83 	bl	8011d34 <USBD_Start>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d001      	beq.n	8012e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012e34:	f7f0 fa68 	bl	8003308 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012e38:	bf00      	nop
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	2000029c 	.word	0x2000029c
 8012e40:	20001b00 	.word	0x20001b00
 8012e44:	20000188 	.word	0x20000188
 8012e48:	2000028c 	.word	0x2000028c

08012e4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012e50:	2200      	movs	r2, #0
 8012e52:	4905      	ldr	r1, [pc, #20]	; (8012e68 <CDC_Init_FS+0x1c>)
 8012e54:	4805      	ldr	r0, [pc, #20]	; (8012e6c <CDC_Init_FS+0x20>)
 8012e56:	f7fe fed0 	bl	8011bfa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012e5a:	4905      	ldr	r1, [pc, #20]	; (8012e70 <CDC_Init_FS+0x24>)
 8012e5c:	4803      	ldr	r0, [pc, #12]	; (8012e6c <CDC_Init_FS+0x20>)
 8012e5e:	f7fe fee6 	bl	8011c2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012e62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	200021c4 	.word	0x200021c4
 8012e6c:	20001b00 	.word	0x20001b00
 8012e70:	20001dc4 	.word	0x20001dc4

08012e74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012e74:	b480      	push	{r7}
 8012e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012e78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	6039      	str	r1, [r7, #0]
 8012e8e:	71fb      	strb	r3, [r7, #7]
 8012e90:	4613      	mov	r3, r2
 8012e92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	2b23      	cmp	r3, #35	; 0x23
 8012e98:	d84a      	bhi.n	8012f30 <CDC_Control_FS+0xac>
 8012e9a:	a201      	add	r2, pc, #4	; (adr r2, 8012ea0 <CDC_Control_FS+0x1c>)
 8012e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea0:	08012f31 	.word	0x08012f31
 8012ea4:	08012f31 	.word	0x08012f31
 8012ea8:	08012f31 	.word	0x08012f31
 8012eac:	08012f31 	.word	0x08012f31
 8012eb0:	08012f31 	.word	0x08012f31
 8012eb4:	08012f31 	.word	0x08012f31
 8012eb8:	08012f31 	.word	0x08012f31
 8012ebc:	08012f31 	.word	0x08012f31
 8012ec0:	08012f31 	.word	0x08012f31
 8012ec4:	08012f31 	.word	0x08012f31
 8012ec8:	08012f31 	.word	0x08012f31
 8012ecc:	08012f31 	.word	0x08012f31
 8012ed0:	08012f31 	.word	0x08012f31
 8012ed4:	08012f31 	.word	0x08012f31
 8012ed8:	08012f31 	.word	0x08012f31
 8012edc:	08012f31 	.word	0x08012f31
 8012ee0:	08012f31 	.word	0x08012f31
 8012ee4:	08012f31 	.word	0x08012f31
 8012ee8:	08012f31 	.word	0x08012f31
 8012eec:	08012f31 	.word	0x08012f31
 8012ef0:	08012f31 	.word	0x08012f31
 8012ef4:	08012f31 	.word	0x08012f31
 8012ef8:	08012f31 	.word	0x08012f31
 8012efc:	08012f31 	.word	0x08012f31
 8012f00:	08012f31 	.word	0x08012f31
 8012f04:	08012f31 	.word	0x08012f31
 8012f08:	08012f31 	.word	0x08012f31
 8012f0c:	08012f31 	.word	0x08012f31
 8012f10:	08012f31 	.word	0x08012f31
 8012f14:	08012f31 	.word	0x08012f31
 8012f18:	08012f31 	.word	0x08012f31
 8012f1c:	08012f31 	.word	0x08012f31
 8012f20:	08012f31 	.word	0x08012f31
 8012f24:	08012f31 	.word	0x08012f31
 8012f28:	08012f31 	.word	0x08012f31
 8012f2c:	08012f31 	.word	0x08012f31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012f30:	bf00      	nop
  }

  return (USBD_OK);
 8012f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	370c      	adds	r7, #12
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012f4a:	6879      	ldr	r1, [r7, #4]
 8012f4c:	4805      	ldr	r0, [pc, #20]	; (8012f64 <CDC_Receive_FS+0x24>)
 8012f4e:	f7fe fe6e 	bl	8011c2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012f52:	4804      	ldr	r0, [pc, #16]	; (8012f64 <CDC_Receive_FS+0x24>)
 8012f54:	f7fe fe7f 	bl	8011c56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012f58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3708      	adds	r7, #8
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	20001b00 	.word	0x20001b00

08012f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	6039      	str	r1, [r7, #0]
 8012f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	2212      	movs	r2, #18
 8012f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012f7a:	4b03      	ldr	r3, [pc, #12]	; (8012f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	200002b8 	.word	0x200002b8

08012f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	4603      	mov	r3, r0
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2204      	movs	r2, #4
 8012f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012f9e:	4b03      	ldr	r3, [pc, #12]	; (8012fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr
 8012fac:	200002cc 	.word	0x200002cc

08012fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	6039      	str	r1, [r7, #0]
 8012fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d105      	bne.n	8012fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	4907      	ldr	r1, [pc, #28]	; (8012fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012fc6:	4808      	ldr	r0, [pc, #32]	; (8012fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012fc8:	f7ff fe31 	bl	8012c2e <USBD_GetString>
 8012fcc:	e004      	b.n	8012fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012fce:	683a      	ldr	r2, [r7, #0]
 8012fd0:	4904      	ldr	r1, [pc, #16]	; (8012fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012fd2:	4805      	ldr	r0, [pc, #20]	; (8012fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012fd4:	f7ff fe2b 	bl	8012c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012fd8:	4b02      	ldr	r3, [pc, #8]	; (8012fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	200025c4 	.word	0x200025c4
 8012fe8:	080176fc 	.word	0x080176fc

08012fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	4904      	ldr	r1, [pc, #16]	; (801300c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012ffc:	4804      	ldr	r0, [pc, #16]	; (8013010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012ffe:	f7ff fe16 	bl	8012c2e <USBD_GetString>
  return USBD_StrDesc;
 8013002:	4b02      	ldr	r3, [pc, #8]	; (801300c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	200025c4 	.word	0x200025c4
 8013010:	08017714 	.word	0x08017714

08013014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	6039      	str	r1, [r7, #0]
 801301e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	221a      	movs	r2, #26
 8013024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013026:	f000 f843 	bl	80130b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801302a:	4b02      	ldr	r3, [pc, #8]	; (8013034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801302c:	4618      	mov	r0, r3
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	200002d0 	.word	0x200002d0

08013038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	6039      	str	r1, [r7, #0]
 8013042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d105      	bne.n	8013056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801304a:	683a      	ldr	r2, [r7, #0]
 801304c:	4907      	ldr	r1, [pc, #28]	; (801306c <USBD_FS_ConfigStrDescriptor+0x34>)
 801304e:	4808      	ldr	r0, [pc, #32]	; (8013070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013050:	f7ff fded 	bl	8012c2e <USBD_GetString>
 8013054:	e004      	b.n	8013060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	4904      	ldr	r1, [pc, #16]	; (801306c <USBD_FS_ConfigStrDescriptor+0x34>)
 801305a:	4805      	ldr	r0, [pc, #20]	; (8013070 <USBD_FS_ConfigStrDescriptor+0x38>)
 801305c:	f7ff fde7 	bl	8012c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8013060:	4b02      	ldr	r3, [pc, #8]	; (801306c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	200025c4 	.word	0x200025c4
 8013070:	08017728 	.word	0x08017728

08013074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	4603      	mov	r3, r0
 801307c:	6039      	str	r1, [r7, #0]
 801307e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d105      	bne.n	8013092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	4907      	ldr	r1, [pc, #28]	; (80130a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801308a:	4808      	ldr	r0, [pc, #32]	; (80130ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 801308c:	f7ff fdcf 	bl	8012c2e <USBD_GetString>
 8013090:	e004      	b.n	801309c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013092:	683a      	ldr	r2, [r7, #0]
 8013094:	4904      	ldr	r1, [pc, #16]	; (80130a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013096:	4805      	ldr	r0, [pc, #20]	; (80130ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013098:	f7ff fdc9 	bl	8012c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 801309c:	4b02      	ldr	r3, [pc, #8]	; (80130a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	200025c4 	.word	0x200025c4
 80130ac:	08017734 	.word	0x08017734

080130b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80130b6:	4b0f      	ldr	r3, [pc, #60]	; (80130f4 <Get_SerialNum+0x44>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80130bc:	4b0e      	ldr	r3, [pc, #56]	; (80130f8 <Get_SerialNum+0x48>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80130c2:	4b0e      	ldr	r3, [pc, #56]	; (80130fc <Get_SerialNum+0x4c>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	4413      	add	r3, r2
 80130ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d009      	beq.n	80130ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80130d6:	2208      	movs	r2, #8
 80130d8:	4909      	ldr	r1, [pc, #36]	; (8013100 <Get_SerialNum+0x50>)
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f000 f814 	bl	8013108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80130e0:	2204      	movs	r2, #4
 80130e2:	4908      	ldr	r1, [pc, #32]	; (8013104 <Get_SerialNum+0x54>)
 80130e4:	68b8      	ldr	r0, [r7, #8]
 80130e6:	f000 f80f 	bl	8013108 <IntToUnicode>
  }
}
 80130ea:	bf00      	nop
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	1ffff7ac 	.word	0x1ffff7ac
 80130f8:	1ffff7b0 	.word	0x1ffff7b0
 80130fc:	1ffff7b4 	.word	0x1ffff7b4
 8013100:	200002d2 	.word	0x200002d2
 8013104:	200002e2 	.word	0x200002e2

08013108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013108:	b480      	push	{r7}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	4613      	mov	r3, r2
 8013114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801311a:	2300      	movs	r3, #0
 801311c:	75fb      	strb	r3, [r7, #23]
 801311e:	e027      	b.n	8013170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	0f1b      	lsrs	r3, r3, #28
 8013124:	2b09      	cmp	r3, #9
 8013126:	d80b      	bhi.n	8013140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	0f1b      	lsrs	r3, r3, #28
 801312c:	b2da      	uxtb	r2, r3
 801312e:	7dfb      	ldrb	r3, [r7, #23]
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	4619      	mov	r1, r3
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	440b      	add	r3, r1
 8013138:	3230      	adds	r2, #48	; 0x30
 801313a:	b2d2      	uxtb	r2, r2
 801313c:	701a      	strb	r2, [r3, #0]
 801313e:	e00a      	b.n	8013156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	0f1b      	lsrs	r3, r3, #28
 8013144:	b2da      	uxtb	r2, r3
 8013146:	7dfb      	ldrb	r3, [r7, #23]
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	4619      	mov	r1, r3
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	440b      	add	r3, r1
 8013150:	3237      	adds	r2, #55	; 0x37
 8013152:	b2d2      	uxtb	r2, r2
 8013154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	011b      	lsls	r3, r3, #4
 801315a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801315c:	7dfb      	ldrb	r3, [r7, #23]
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	3301      	adds	r3, #1
 8013162:	68ba      	ldr	r2, [r7, #8]
 8013164:	4413      	add	r3, r2
 8013166:	2200      	movs	r2, #0
 8013168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801316a:	7dfb      	ldrb	r3, [r7, #23]
 801316c:	3301      	adds	r3, #1
 801316e:	75fb      	strb	r3, [r7, #23]
 8013170:	7dfa      	ldrb	r2, [r7, #23]
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	429a      	cmp	r2, r3
 8013176:	d3d3      	bcc.n	8013120 <IntToUnicode+0x18>
  }
}
 8013178:	bf00      	nop
 801317a:	bf00      	nop
 801317c:	371c      	adds	r7, #28
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
	...

08013188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b08a      	sub	sp, #40	; 0x28
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013190:	f107 0314 	add.w	r3, r7, #20
 8013194:	2200      	movs	r2, #0
 8013196:	601a      	str	r2, [r3, #0]
 8013198:	605a      	str	r2, [r3, #4]
 801319a:	609a      	str	r2, [r3, #8]
 801319c:	60da      	str	r2, [r3, #12]
 801319e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a1c      	ldr	r2, [pc, #112]	; (8013218 <HAL_PCD_MspInit+0x90>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d131      	bne.n	801320e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80131aa:	4b1c      	ldr	r3, [pc, #112]	; (801321c <HAL_PCD_MspInit+0x94>)
 80131ac:	695b      	ldr	r3, [r3, #20]
 80131ae:	4a1b      	ldr	r2, [pc, #108]	; (801321c <HAL_PCD_MspInit+0x94>)
 80131b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80131b4:	6153      	str	r3, [r2, #20]
 80131b6:	4b19      	ldr	r3, [pc, #100]	; (801321c <HAL_PCD_MspInit+0x94>)
 80131b8:	695b      	ldr	r3, [r3, #20]
 80131ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131be:	613b      	str	r3, [r7, #16]
 80131c0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80131c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80131c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131c8:	2302      	movs	r3, #2
 80131ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131cc:	2300      	movs	r3, #0
 80131ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80131d0:	2303      	movs	r3, #3
 80131d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80131d4:	230e      	movs	r3, #14
 80131d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131d8:	f107 0314 	add.w	r3, r7, #20
 80131dc:	4619      	mov	r1, r3
 80131de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80131e2:	f7f4 faa5 	bl	8007730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80131e6:	4b0d      	ldr	r3, [pc, #52]	; (801321c <HAL_PCD_MspInit+0x94>)
 80131e8:	69db      	ldr	r3, [r3, #28]
 80131ea:	4a0c      	ldr	r2, [pc, #48]	; (801321c <HAL_PCD_MspInit+0x94>)
 80131ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80131f0:	61d3      	str	r3, [r2, #28]
 80131f2:	4b0a      	ldr	r3, [pc, #40]	; (801321c <HAL_PCD_MspInit+0x94>)
 80131f4:	69db      	ldr	r3, [r3, #28]
 80131f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80131fa:	60fb      	str	r3, [r7, #12]
 80131fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80131fe:	2200      	movs	r2, #0
 8013200:	2100      	movs	r1, #0
 8013202:	2014      	movs	r0, #20
 8013204:	f7f3 fcbf 	bl	8006b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8013208:	2014      	movs	r0, #20
 801320a:	f7f3 fcd8 	bl	8006bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801320e:	bf00      	nop
 8013210:	3728      	adds	r7, #40	; 0x28
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	40005c00 	.word	0x40005c00
 801321c:	40021000 	.word	0x40021000

08013220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013234:	4619      	mov	r1, r3
 8013236:	4610      	mov	r0, r2
 8013238:	f7fe fdc5 	bl	8011dc6 <USBD_LL_SetupStage>
}
 801323c:	bf00      	nop
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	460b      	mov	r3, r1
 801324e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8013256:	78fa      	ldrb	r2, [r7, #3]
 8013258:	6879      	ldr	r1, [r7, #4]
 801325a:	4613      	mov	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	4413      	add	r3, r2
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	440b      	add	r3, r1
 8013264:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	78fb      	ldrb	r3, [r7, #3]
 801326c:	4619      	mov	r1, r3
 801326e:	f7fe fdf7 	bl	8011e60 <USBD_LL_DataOutStage>
}
 8013272:	bf00      	nop
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b082      	sub	sp, #8
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
 8013282:	460b      	mov	r3, r1
 8013284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801328c:	78fa      	ldrb	r2, [r7, #3]
 801328e:	6879      	ldr	r1, [r7, #4]
 8013290:	4613      	mov	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	4413      	add	r3, r2
 8013296:	00db      	lsls	r3, r3, #3
 8013298:	440b      	add	r3, r1
 801329a:	333c      	adds	r3, #60	; 0x3c
 801329c:	681a      	ldr	r2, [r3, #0]
 801329e:	78fb      	ldrb	r3, [r7, #3]
 80132a0:	4619      	mov	r1, r3
 80132a2:	f7fe fe4e 	bl	8011f42 <USBD_LL_DataInStage>
}
 80132a6:	bf00      	nop
 80132a8:	3708      	adds	r7, #8
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b082      	sub	sp, #8
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80132bc:	4618      	mov	r0, r3
 80132be:	f7fe ff61 	bl	8012184 <USBD_LL_SOF>
}
 80132c2:	bf00      	nop
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b084      	sub	sp, #16
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80132d2:	2301      	movs	r3, #1
 80132d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	689b      	ldr	r3, [r3, #8]
 80132da:	2b02      	cmp	r3, #2
 80132dc:	d001      	beq.n	80132e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80132de:	f7f0 f813 	bl	8003308 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80132e8:	7bfa      	ldrb	r2, [r7, #15]
 80132ea:	4611      	mov	r1, r2
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fe ff0e 	bl	801210e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fe fec7 	bl	801208c <USBD_LL_Reset>
}
 80132fe:	bf00      	nop
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
	...

08013308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8013316:	4618      	mov	r0, r3
 8013318:	f7fe ff09 	bl	801212e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	699b      	ldr	r3, [r3, #24]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d005      	beq.n	8013330 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013324:	4b04      	ldr	r3, [pc, #16]	; (8013338 <HAL_PCD_SuspendCallback+0x30>)
 8013326:	691b      	ldr	r3, [r3, #16]
 8013328:	4a03      	ldr	r2, [pc, #12]	; (8013338 <HAL_PCD_SuspendCallback+0x30>)
 801332a:	f043 0306 	orr.w	r3, r3, #6
 801332e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013330:	bf00      	nop
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	e000ed00 	.word	0xe000ed00

0801333c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe ff04 	bl	8012158 <USBD_LL_Resume>
}
 8013350:	bf00      	nop
 8013352:	3708      	adds	r7, #8
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8013360:	4a28      	ldr	r2, [pc, #160]	; (8013404 <USBD_LL_Init+0xac>)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	4a26      	ldr	r2, [pc, #152]	; (8013404 <USBD_LL_Init+0xac>)
 801336c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8013370:	4b24      	ldr	r3, [pc, #144]	; (8013404 <USBD_LL_Init+0xac>)
 8013372:	4a25      	ldr	r2, [pc, #148]	; (8013408 <USBD_LL_Init+0xb0>)
 8013374:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013376:	4b23      	ldr	r3, [pc, #140]	; (8013404 <USBD_LL_Init+0xac>)
 8013378:	2208      	movs	r2, #8
 801337a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801337c:	4b21      	ldr	r3, [pc, #132]	; (8013404 <USBD_LL_Init+0xac>)
 801337e:	2202      	movs	r2, #2
 8013380:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013382:	4b20      	ldr	r3, [pc, #128]	; (8013404 <USBD_LL_Init+0xac>)
 8013384:	2202      	movs	r2, #2
 8013386:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013388:	4b1e      	ldr	r3, [pc, #120]	; (8013404 <USBD_LL_Init+0xac>)
 801338a:	2200      	movs	r2, #0
 801338c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801338e:	4b1d      	ldr	r3, [pc, #116]	; (8013404 <USBD_LL_Init+0xac>)
 8013390:	2200      	movs	r2, #0
 8013392:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013394:	481b      	ldr	r0, [pc, #108]	; (8013404 <USBD_LL_Init+0xac>)
 8013396:	f7f4 fc9b 	bl	8007cd0 <HAL_PCD_Init>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d001      	beq.n	80133a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80133a0:	f7ef ffb2 	bl	8003308 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80133aa:	2318      	movs	r3, #24
 80133ac:	2200      	movs	r2, #0
 80133ae:	2100      	movs	r1, #0
 80133b0:	f7f6 f924 	bl	80095fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80133ba:	2358      	movs	r3, #88	; 0x58
 80133bc:	2200      	movs	r2, #0
 80133be:	2180      	movs	r1, #128	; 0x80
 80133c0:	f7f6 f91c 	bl	80095fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80133ca:	23c0      	movs	r3, #192	; 0xc0
 80133cc:	2200      	movs	r2, #0
 80133ce:	2181      	movs	r1, #129	; 0x81
 80133d0:	f7f6 f914 	bl	80095fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80133da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80133de:	2200      	movs	r2, #0
 80133e0:	2101      	movs	r1, #1
 80133e2:	f7f6 f90b 	bl	80095fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80133ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133f0:	2200      	movs	r2, #0
 80133f2:	2182      	movs	r1, #130	; 0x82
 80133f4:	f7f6 f902 	bl	80095fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80133f8:	2300      	movs	r3, #0
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3708      	adds	r7, #8
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	200027c4 	.word	0x200027c4
 8013408:	40005c00 	.word	0x40005c00

0801340c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013414:	2300      	movs	r3, #0
 8013416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013422:	4618      	mov	r0, r3
 8013424:	f7f4 fd26 	bl	8007e74 <HAL_PCD_Start>
 8013428:	4603      	mov	r3, r0
 801342a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801342c:	7bfb      	ldrb	r3, [r7, #15]
 801342e:	4618      	mov	r0, r3
 8013430:	f000 f954 	bl	80136dc <USBD_Get_USB_Status>
 8013434:	4603      	mov	r3, r0
 8013436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013438:	7bbb      	ldrb	r3, [r7, #14]
}
 801343a:	4618      	mov	r0, r3
 801343c:	3710      	adds	r7, #16
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}

08013442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013442:	b580      	push	{r7, lr}
 8013444:	b084      	sub	sp, #16
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
 801344a:	4608      	mov	r0, r1
 801344c:	4611      	mov	r1, r2
 801344e:	461a      	mov	r2, r3
 8013450:	4603      	mov	r3, r0
 8013452:	70fb      	strb	r3, [r7, #3]
 8013454:	460b      	mov	r3, r1
 8013456:	70bb      	strb	r3, [r7, #2]
 8013458:	4613      	mov	r3, r2
 801345a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801345c:	2300      	movs	r3, #0
 801345e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013460:	2300      	movs	r3, #0
 8013462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801346a:	78bb      	ldrb	r3, [r7, #2]
 801346c:	883a      	ldrh	r2, [r7, #0]
 801346e:	78f9      	ldrb	r1, [r7, #3]
 8013470:	f7f4 fe1f 	bl	80080b2 <HAL_PCD_EP_Open>
 8013474:	4603      	mov	r3, r0
 8013476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013478:	7bfb      	ldrb	r3, [r7, #15]
 801347a:	4618      	mov	r0, r3
 801347c:	f000 f92e 	bl	80136dc <USBD_Get_USB_Status>
 8013480:	4603      	mov	r3, r0
 8013482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013484:	7bbb      	ldrb	r3, [r7, #14]
}
 8013486:	4618      	mov	r0, r3
 8013488:	3710      	adds	r7, #16
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}

0801348e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801348e:	b580      	push	{r7, lr}
 8013490:	b084      	sub	sp, #16
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
 8013496:	460b      	mov	r3, r1
 8013498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801349a:	2300      	movs	r3, #0
 801349c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801349e:	2300      	movs	r3, #0
 80134a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134a8:	78fa      	ldrb	r2, [r7, #3]
 80134aa:	4611      	mov	r1, r2
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7f4 fe5d 	bl	800816c <HAL_PCD_EP_Close>
 80134b2:	4603      	mov	r3, r0
 80134b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134b6:	7bfb      	ldrb	r3, [r7, #15]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f000 f90f 	bl	80136dc <USBD_Get_USB_Status>
 80134be:	4603      	mov	r3, r0
 80134c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3710      	adds	r7, #16
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b084      	sub	sp, #16
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	460b      	mov	r3, r1
 80134d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134d8:	2300      	movs	r3, #0
 80134da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134dc:	2300      	movs	r3, #0
 80134de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134e6:	78fa      	ldrb	r2, [r7, #3]
 80134e8:	4611      	mov	r1, r2
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7f4 ff06 	bl	80082fc <HAL_PCD_EP_SetStall>
 80134f0:	4603      	mov	r3, r0
 80134f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134f4:	7bfb      	ldrb	r3, [r7, #15]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f000 f8f0 	bl	80136dc <USBD_Get_USB_Status>
 80134fc:	4603      	mov	r3, r0
 80134fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013500:	7bbb      	ldrb	r3, [r7, #14]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b084      	sub	sp, #16
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
 8013512:	460b      	mov	r3, r1
 8013514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013516:	2300      	movs	r3, #0
 8013518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801351a:	2300      	movs	r3, #0
 801351c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013524:	78fa      	ldrb	r2, [r7, #3]
 8013526:	4611      	mov	r1, r2
 8013528:	4618      	mov	r0, r3
 801352a:	f7f4 ff39 	bl	80083a0 <HAL_PCD_EP_ClrStall>
 801352e:	4603      	mov	r3, r0
 8013530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013532:	7bfb      	ldrb	r3, [r7, #15]
 8013534:	4618      	mov	r0, r3
 8013536:	f000 f8d1 	bl	80136dc <USBD_Get_USB_Status>
 801353a:	4603      	mov	r3, r0
 801353c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801353e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013540:	4618      	mov	r0, r3
 8013542:	3710      	adds	r7, #16
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013548:	b480      	push	{r7}
 801354a:	b085      	sub	sp, #20
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	460b      	mov	r3, r1
 8013552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801355a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801355c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013560:	2b00      	cmp	r3, #0
 8013562:	da0c      	bge.n	801357e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013564:	78fb      	ldrb	r3, [r7, #3]
 8013566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801356a:	68f9      	ldr	r1, [r7, #12]
 801356c:	1c5a      	adds	r2, r3, #1
 801356e:	4613      	mov	r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	4413      	add	r3, r2
 8013574:	00db      	lsls	r3, r3, #3
 8013576:	440b      	add	r3, r1
 8013578:	3302      	adds	r3, #2
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	e00b      	b.n	8013596 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801357e:	78fb      	ldrb	r3, [r7, #3]
 8013580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013584:	68f9      	ldr	r1, [r7, #12]
 8013586:	4613      	mov	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	4413      	add	r3, r2
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	440b      	add	r3, r1
 8013590:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013594:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013596:	4618      	mov	r0, r3
 8013598:	3714      	adds	r7, #20
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr

080135a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80135a2:	b580      	push	{r7, lr}
 80135a4:	b084      	sub	sp, #16
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
 80135aa:	460b      	mov	r3, r1
 80135ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135ae:	2300      	movs	r3, #0
 80135b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135bc:	78fa      	ldrb	r2, [r7, #3]
 80135be:	4611      	mov	r1, r2
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7f4 fd51 	bl	8008068 <HAL_PCD_SetAddress>
 80135c6:	4603      	mov	r3, r0
 80135c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135ca:	7bfb      	ldrb	r3, [r7, #15]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f000 f885 	bl	80136dc <USBD_Get_USB_Status>
 80135d2:	4603      	mov	r3, r0
 80135d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80135d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3710      	adds	r7, #16
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b086      	sub	sp, #24
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	607a      	str	r2, [r7, #4]
 80135ea:	461a      	mov	r2, r3
 80135ec:	460b      	mov	r3, r1
 80135ee:	72fb      	strb	r3, [r7, #11]
 80135f0:	4613      	mov	r3, r2
 80135f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135f4:	2300      	movs	r3, #0
 80135f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135f8:	2300      	movs	r3, #0
 80135fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013602:	893b      	ldrh	r3, [r7, #8]
 8013604:	7af9      	ldrb	r1, [r7, #11]
 8013606:	687a      	ldr	r2, [r7, #4]
 8013608:	f7f4 fe41 	bl	800828e <HAL_PCD_EP_Transmit>
 801360c:	4603      	mov	r3, r0
 801360e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013610:	7dfb      	ldrb	r3, [r7, #23]
 8013612:	4618      	mov	r0, r3
 8013614:	f000 f862 	bl	80136dc <USBD_Get_USB_Status>
 8013618:	4603      	mov	r3, r0
 801361a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801361c:	7dbb      	ldrb	r3, [r7, #22]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3718      	adds	r7, #24
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013626:	b580      	push	{r7, lr}
 8013628:	b086      	sub	sp, #24
 801362a:	af00      	add	r7, sp, #0
 801362c:	60f8      	str	r0, [r7, #12]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	461a      	mov	r2, r3
 8013632:	460b      	mov	r3, r1
 8013634:	72fb      	strb	r3, [r7, #11]
 8013636:	4613      	mov	r3, r2
 8013638:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801363a:	2300      	movs	r3, #0
 801363c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801363e:	2300      	movs	r3, #0
 8013640:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013648:	893b      	ldrh	r3, [r7, #8]
 801364a:	7af9      	ldrb	r1, [r7, #11]
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	f7f4 fdd5 	bl	80081fc <HAL_PCD_EP_Receive>
 8013652:	4603      	mov	r3, r0
 8013654:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	4618      	mov	r0, r3
 801365a:	f000 f83f 	bl	80136dc <USBD_Get_USB_Status>
 801365e:	4603      	mov	r3, r0
 8013660:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013662:	7dbb      	ldrb	r3, [r7, #22]
}
 8013664:	4618      	mov	r0, r3
 8013666:	3718      	adds	r7, #24
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	460b      	mov	r3, r1
 8013676:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801367e:	78fa      	ldrb	r2, [r7, #3]
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7f4 fdeb 	bl	800825e <HAL_PCD_EP_GetRxCount>
 8013688:	4603      	mov	r3, r0
}
 801368a:	4618      	mov	r0, r3
 801368c:	3708      	adds	r7, #8
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
	...

08013694 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013694:	b480      	push	{r7}
 8013696:	b083      	sub	sp, #12
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801369c:	4b03      	ldr	r3, [pc, #12]	; (80136ac <USBD_static_malloc+0x18>)
}
 801369e:	4618      	mov	r0, r3
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	20002ab0 	.word	0x20002ab0

080136b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80136b0:	b480      	push	{r7}
 80136b2:	b083      	sub	sp, #12
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]

}
 80136b8:	bf00      	nop
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80136d0:	bf00      	nop
 80136d2:	370c      	adds	r7, #12
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr

080136dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80136dc:	b480      	push	{r7}
 80136de:	b085      	sub	sp, #20
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	4603      	mov	r3, r0
 80136e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136e6:	2300      	movs	r3, #0
 80136e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80136ea:	79fb      	ldrb	r3, [r7, #7]
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	d817      	bhi.n	8013720 <USBD_Get_USB_Status+0x44>
 80136f0:	a201      	add	r2, pc, #4	; (adr r2, 80136f8 <USBD_Get_USB_Status+0x1c>)
 80136f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136f6:	bf00      	nop
 80136f8:	08013709 	.word	0x08013709
 80136fc:	0801370f 	.word	0x0801370f
 8013700:	08013715 	.word	0x08013715
 8013704:	0801371b 	.word	0x0801371b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013708:	2300      	movs	r3, #0
 801370a:	73fb      	strb	r3, [r7, #15]
    break;
 801370c:	e00b      	b.n	8013726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801370e:	2302      	movs	r3, #2
 8013710:	73fb      	strb	r3, [r7, #15]
    break;
 8013712:	e008      	b.n	8013726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013714:	2301      	movs	r3, #1
 8013716:	73fb      	strb	r3, [r7, #15]
    break;
 8013718:	e005      	b.n	8013726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801371a:	2302      	movs	r3, #2
 801371c:	73fb      	strb	r3, [r7, #15]
    break;
 801371e:	e002      	b.n	8013726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013720:	2302      	movs	r3, #2
 8013722:	73fb      	strb	r3, [r7, #15]
    break;
 8013724:	bf00      	nop
  }
  return usb_status;
 8013726:	7bfb      	ldrb	r3, [r7, #15]
}
 8013728:	4618      	mov	r0, r3
 801372a:	3714      	adds	r7, #20
 801372c:	46bd      	mov	sp, r7
 801372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013732:	4770      	bx	lr

08013734 <__cvt>:
 8013734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013738:	ec55 4b10 	vmov	r4, r5, d0
 801373c:	2d00      	cmp	r5, #0
 801373e:	460e      	mov	r6, r1
 8013740:	4619      	mov	r1, r3
 8013742:	462b      	mov	r3, r5
 8013744:	bfbb      	ittet	lt
 8013746:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801374a:	461d      	movlt	r5, r3
 801374c:	2300      	movge	r3, #0
 801374e:	232d      	movlt	r3, #45	; 0x2d
 8013750:	700b      	strb	r3, [r1, #0]
 8013752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013754:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013758:	4691      	mov	r9, r2
 801375a:	f023 0820 	bic.w	r8, r3, #32
 801375e:	bfbc      	itt	lt
 8013760:	4622      	movlt	r2, r4
 8013762:	4614      	movlt	r4, r2
 8013764:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013768:	d005      	beq.n	8013776 <__cvt+0x42>
 801376a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801376e:	d100      	bne.n	8013772 <__cvt+0x3e>
 8013770:	3601      	adds	r6, #1
 8013772:	2102      	movs	r1, #2
 8013774:	e000      	b.n	8013778 <__cvt+0x44>
 8013776:	2103      	movs	r1, #3
 8013778:	ab03      	add	r3, sp, #12
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	ab02      	add	r3, sp, #8
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	ec45 4b10 	vmov	d0, r4, r5
 8013784:	4653      	mov	r3, sl
 8013786:	4632      	mov	r2, r6
 8013788:	f000 fe76 	bl	8014478 <_dtoa_r>
 801378c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013790:	4607      	mov	r7, r0
 8013792:	d102      	bne.n	801379a <__cvt+0x66>
 8013794:	f019 0f01 	tst.w	r9, #1
 8013798:	d022      	beq.n	80137e0 <__cvt+0xac>
 801379a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801379e:	eb07 0906 	add.w	r9, r7, r6
 80137a2:	d110      	bne.n	80137c6 <__cvt+0x92>
 80137a4:	783b      	ldrb	r3, [r7, #0]
 80137a6:	2b30      	cmp	r3, #48	; 0x30
 80137a8:	d10a      	bne.n	80137c0 <__cvt+0x8c>
 80137aa:	2200      	movs	r2, #0
 80137ac:	2300      	movs	r3, #0
 80137ae:	4620      	mov	r0, r4
 80137b0:	4629      	mov	r1, r5
 80137b2:	f7ed f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80137b6:	b918      	cbnz	r0, 80137c0 <__cvt+0x8c>
 80137b8:	f1c6 0601 	rsb	r6, r6, #1
 80137bc:	f8ca 6000 	str.w	r6, [sl]
 80137c0:	f8da 3000 	ldr.w	r3, [sl]
 80137c4:	4499      	add	r9, r3
 80137c6:	2200      	movs	r2, #0
 80137c8:	2300      	movs	r3, #0
 80137ca:	4620      	mov	r0, r4
 80137cc:	4629      	mov	r1, r5
 80137ce:	f7ed f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80137d2:	b108      	cbz	r0, 80137d8 <__cvt+0xa4>
 80137d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80137d8:	2230      	movs	r2, #48	; 0x30
 80137da:	9b03      	ldr	r3, [sp, #12]
 80137dc:	454b      	cmp	r3, r9
 80137de:	d307      	bcc.n	80137f0 <__cvt+0xbc>
 80137e0:	9b03      	ldr	r3, [sp, #12]
 80137e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137e4:	1bdb      	subs	r3, r3, r7
 80137e6:	4638      	mov	r0, r7
 80137e8:	6013      	str	r3, [r2, #0]
 80137ea:	b004      	add	sp, #16
 80137ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f0:	1c59      	adds	r1, r3, #1
 80137f2:	9103      	str	r1, [sp, #12]
 80137f4:	701a      	strb	r2, [r3, #0]
 80137f6:	e7f0      	b.n	80137da <__cvt+0xa6>

080137f8 <__exponent>:
 80137f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137fa:	4603      	mov	r3, r0
 80137fc:	2900      	cmp	r1, #0
 80137fe:	bfb8      	it	lt
 8013800:	4249      	neglt	r1, r1
 8013802:	f803 2b02 	strb.w	r2, [r3], #2
 8013806:	bfb4      	ite	lt
 8013808:	222d      	movlt	r2, #45	; 0x2d
 801380a:	222b      	movge	r2, #43	; 0x2b
 801380c:	2909      	cmp	r1, #9
 801380e:	7042      	strb	r2, [r0, #1]
 8013810:	dd2a      	ble.n	8013868 <__exponent+0x70>
 8013812:	f10d 0207 	add.w	r2, sp, #7
 8013816:	4617      	mov	r7, r2
 8013818:	260a      	movs	r6, #10
 801381a:	4694      	mov	ip, r2
 801381c:	fb91 f5f6 	sdiv	r5, r1, r6
 8013820:	fb06 1415 	mls	r4, r6, r5, r1
 8013824:	3430      	adds	r4, #48	; 0x30
 8013826:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801382a:	460c      	mov	r4, r1
 801382c:	2c63      	cmp	r4, #99	; 0x63
 801382e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013832:	4629      	mov	r1, r5
 8013834:	dcf1      	bgt.n	801381a <__exponent+0x22>
 8013836:	3130      	adds	r1, #48	; 0x30
 8013838:	f1ac 0402 	sub.w	r4, ip, #2
 801383c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013840:	1c41      	adds	r1, r0, #1
 8013842:	4622      	mov	r2, r4
 8013844:	42ba      	cmp	r2, r7
 8013846:	d30a      	bcc.n	801385e <__exponent+0x66>
 8013848:	f10d 0209 	add.w	r2, sp, #9
 801384c:	eba2 020c 	sub.w	r2, r2, ip
 8013850:	42bc      	cmp	r4, r7
 8013852:	bf88      	it	hi
 8013854:	2200      	movhi	r2, #0
 8013856:	4413      	add	r3, r2
 8013858:	1a18      	subs	r0, r3, r0
 801385a:	b003      	add	sp, #12
 801385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801385e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013862:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013866:	e7ed      	b.n	8013844 <__exponent+0x4c>
 8013868:	2330      	movs	r3, #48	; 0x30
 801386a:	3130      	adds	r1, #48	; 0x30
 801386c:	7083      	strb	r3, [r0, #2]
 801386e:	70c1      	strb	r1, [r0, #3]
 8013870:	1d03      	adds	r3, r0, #4
 8013872:	e7f1      	b.n	8013858 <__exponent+0x60>

08013874 <_printf_float>:
 8013874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013878:	ed2d 8b02 	vpush	{d8}
 801387c:	b08d      	sub	sp, #52	; 0x34
 801387e:	460c      	mov	r4, r1
 8013880:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013884:	4616      	mov	r6, r2
 8013886:	461f      	mov	r7, r3
 8013888:	4605      	mov	r5, r0
 801388a:	f000 fcf5 	bl	8014278 <_localeconv_r>
 801388e:	f8d0 a000 	ldr.w	sl, [r0]
 8013892:	4650      	mov	r0, sl
 8013894:	f7ec fcec 	bl	8000270 <strlen>
 8013898:	2300      	movs	r3, #0
 801389a:	930a      	str	r3, [sp, #40]	; 0x28
 801389c:	6823      	ldr	r3, [r4, #0]
 801389e:	9305      	str	r3, [sp, #20]
 80138a0:	f8d8 3000 	ldr.w	r3, [r8]
 80138a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80138a8:	3307      	adds	r3, #7
 80138aa:	f023 0307 	bic.w	r3, r3, #7
 80138ae:	f103 0208 	add.w	r2, r3, #8
 80138b2:	f8c8 2000 	str.w	r2, [r8]
 80138b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80138ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80138be:	9307      	str	r3, [sp, #28]
 80138c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80138c4:	ee08 0a10 	vmov	s16, r0
 80138c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80138cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138d0:	4b9e      	ldr	r3, [pc, #632]	; (8013b4c <_printf_float+0x2d8>)
 80138d2:	f04f 32ff 	mov.w	r2, #4294967295
 80138d6:	f7ed f929 	bl	8000b2c <__aeabi_dcmpun>
 80138da:	bb88      	cbnz	r0, 8013940 <_printf_float+0xcc>
 80138dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138e0:	4b9a      	ldr	r3, [pc, #616]	; (8013b4c <_printf_float+0x2d8>)
 80138e2:	f04f 32ff 	mov.w	r2, #4294967295
 80138e6:	f7ed f903 	bl	8000af0 <__aeabi_dcmple>
 80138ea:	bb48      	cbnz	r0, 8013940 <_printf_float+0xcc>
 80138ec:	2200      	movs	r2, #0
 80138ee:	2300      	movs	r3, #0
 80138f0:	4640      	mov	r0, r8
 80138f2:	4649      	mov	r1, r9
 80138f4:	f7ed f8f2 	bl	8000adc <__aeabi_dcmplt>
 80138f8:	b110      	cbz	r0, 8013900 <_printf_float+0x8c>
 80138fa:	232d      	movs	r3, #45	; 0x2d
 80138fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013900:	4a93      	ldr	r2, [pc, #588]	; (8013b50 <_printf_float+0x2dc>)
 8013902:	4b94      	ldr	r3, [pc, #592]	; (8013b54 <_printf_float+0x2e0>)
 8013904:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013908:	bf94      	ite	ls
 801390a:	4690      	movls	r8, r2
 801390c:	4698      	movhi	r8, r3
 801390e:	2303      	movs	r3, #3
 8013910:	6123      	str	r3, [r4, #16]
 8013912:	9b05      	ldr	r3, [sp, #20]
 8013914:	f023 0304 	bic.w	r3, r3, #4
 8013918:	6023      	str	r3, [r4, #0]
 801391a:	f04f 0900 	mov.w	r9, #0
 801391e:	9700      	str	r7, [sp, #0]
 8013920:	4633      	mov	r3, r6
 8013922:	aa0b      	add	r2, sp, #44	; 0x2c
 8013924:	4621      	mov	r1, r4
 8013926:	4628      	mov	r0, r5
 8013928:	f000 f9da 	bl	8013ce0 <_printf_common>
 801392c:	3001      	adds	r0, #1
 801392e:	f040 8090 	bne.w	8013a52 <_printf_float+0x1de>
 8013932:	f04f 30ff 	mov.w	r0, #4294967295
 8013936:	b00d      	add	sp, #52	; 0x34
 8013938:	ecbd 8b02 	vpop	{d8}
 801393c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013940:	4642      	mov	r2, r8
 8013942:	464b      	mov	r3, r9
 8013944:	4640      	mov	r0, r8
 8013946:	4649      	mov	r1, r9
 8013948:	f7ed f8f0 	bl	8000b2c <__aeabi_dcmpun>
 801394c:	b140      	cbz	r0, 8013960 <_printf_float+0xec>
 801394e:	464b      	mov	r3, r9
 8013950:	2b00      	cmp	r3, #0
 8013952:	bfbc      	itt	lt
 8013954:	232d      	movlt	r3, #45	; 0x2d
 8013956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801395a:	4a7f      	ldr	r2, [pc, #508]	; (8013b58 <_printf_float+0x2e4>)
 801395c:	4b7f      	ldr	r3, [pc, #508]	; (8013b5c <_printf_float+0x2e8>)
 801395e:	e7d1      	b.n	8013904 <_printf_float+0x90>
 8013960:	6863      	ldr	r3, [r4, #4]
 8013962:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013966:	9206      	str	r2, [sp, #24]
 8013968:	1c5a      	adds	r2, r3, #1
 801396a:	d13f      	bne.n	80139ec <_printf_float+0x178>
 801396c:	2306      	movs	r3, #6
 801396e:	6063      	str	r3, [r4, #4]
 8013970:	9b05      	ldr	r3, [sp, #20]
 8013972:	6861      	ldr	r1, [r4, #4]
 8013974:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013978:	2300      	movs	r3, #0
 801397a:	9303      	str	r3, [sp, #12]
 801397c:	ab0a      	add	r3, sp, #40	; 0x28
 801397e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013982:	ab09      	add	r3, sp, #36	; 0x24
 8013984:	ec49 8b10 	vmov	d0, r8, r9
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	6022      	str	r2, [r4, #0]
 801398c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013990:	4628      	mov	r0, r5
 8013992:	f7ff fecf 	bl	8013734 <__cvt>
 8013996:	9b06      	ldr	r3, [sp, #24]
 8013998:	9909      	ldr	r1, [sp, #36]	; 0x24
 801399a:	2b47      	cmp	r3, #71	; 0x47
 801399c:	4680      	mov	r8, r0
 801399e:	d108      	bne.n	80139b2 <_printf_float+0x13e>
 80139a0:	1cc8      	adds	r0, r1, #3
 80139a2:	db02      	blt.n	80139aa <_printf_float+0x136>
 80139a4:	6863      	ldr	r3, [r4, #4]
 80139a6:	4299      	cmp	r1, r3
 80139a8:	dd41      	ble.n	8013a2e <_printf_float+0x1ba>
 80139aa:	f1ab 0302 	sub.w	r3, fp, #2
 80139ae:	fa5f fb83 	uxtb.w	fp, r3
 80139b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80139b6:	d820      	bhi.n	80139fa <_printf_float+0x186>
 80139b8:	3901      	subs	r1, #1
 80139ba:	465a      	mov	r2, fp
 80139bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80139c0:	9109      	str	r1, [sp, #36]	; 0x24
 80139c2:	f7ff ff19 	bl	80137f8 <__exponent>
 80139c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139c8:	1813      	adds	r3, r2, r0
 80139ca:	2a01      	cmp	r2, #1
 80139cc:	4681      	mov	r9, r0
 80139ce:	6123      	str	r3, [r4, #16]
 80139d0:	dc02      	bgt.n	80139d8 <_printf_float+0x164>
 80139d2:	6822      	ldr	r2, [r4, #0]
 80139d4:	07d2      	lsls	r2, r2, #31
 80139d6:	d501      	bpl.n	80139dc <_printf_float+0x168>
 80139d8:	3301      	adds	r3, #1
 80139da:	6123      	str	r3, [r4, #16]
 80139dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d09c      	beq.n	801391e <_printf_float+0xaa>
 80139e4:	232d      	movs	r3, #45	; 0x2d
 80139e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139ea:	e798      	b.n	801391e <_printf_float+0xaa>
 80139ec:	9a06      	ldr	r2, [sp, #24]
 80139ee:	2a47      	cmp	r2, #71	; 0x47
 80139f0:	d1be      	bne.n	8013970 <_printf_float+0xfc>
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d1bc      	bne.n	8013970 <_printf_float+0xfc>
 80139f6:	2301      	movs	r3, #1
 80139f8:	e7b9      	b.n	801396e <_printf_float+0xfa>
 80139fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80139fe:	d118      	bne.n	8013a32 <_printf_float+0x1be>
 8013a00:	2900      	cmp	r1, #0
 8013a02:	6863      	ldr	r3, [r4, #4]
 8013a04:	dd0b      	ble.n	8013a1e <_printf_float+0x1aa>
 8013a06:	6121      	str	r1, [r4, #16]
 8013a08:	b913      	cbnz	r3, 8013a10 <_printf_float+0x19c>
 8013a0a:	6822      	ldr	r2, [r4, #0]
 8013a0c:	07d0      	lsls	r0, r2, #31
 8013a0e:	d502      	bpl.n	8013a16 <_printf_float+0x1a2>
 8013a10:	3301      	adds	r3, #1
 8013a12:	440b      	add	r3, r1
 8013a14:	6123      	str	r3, [r4, #16]
 8013a16:	65a1      	str	r1, [r4, #88]	; 0x58
 8013a18:	f04f 0900 	mov.w	r9, #0
 8013a1c:	e7de      	b.n	80139dc <_printf_float+0x168>
 8013a1e:	b913      	cbnz	r3, 8013a26 <_printf_float+0x1b2>
 8013a20:	6822      	ldr	r2, [r4, #0]
 8013a22:	07d2      	lsls	r2, r2, #31
 8013a24:	d501      	bpl.n	8013a2a <_printf_float+0x1b6>
 8013a26:	3302      	adds	r3, #2
 8013a28:	e7f4      	b.n	8013a14 <_printf_float+0x1a0>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e7f2      	b.n	8013a14 <_printf_float+0x1a0>
 8013a2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a34:	4299      	cmp	r1, r3
 8013a36:	db05      	blt.n	8013a44 <_printf_float+0x1d0>
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	6121      	str	r1, [r4, #16]
 8013a3c:	07d8      	lsls	r0, r3, #31
 8013a3e:	d5ea      	bpl.n	8013a16 <_printf_float+0x1a2>
 8013a40:	1c4b      	adds	r3, r1, #1
 8013a42:	e7e7      	b.n	8013a14 <_printf_float+0x1a0>
 8013a44:	2900      	cmp	r1, #0
 8013a46:	bfd4      	ite	le
 8013a48:	f1c1 0202 	rsble	r2, r1, #2
 8013a4c:	2201      	movgt	r2, #1
 8013a4e:	4413      	add	r3, r2
 8013a50:	e7e0      	b.n	8013a14 <_printf_float+0x1a0>
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	055a      	lsls	r2, r3, #21
 8013a56:	d407      	bmi.n	8013a68 <_printf_float+0x1f4>
 8013a58:	6923      	ldr	r3, [r4, #16]
 8013a5a:	4642      	mov	r2, r8
 8013a5c:	4631      	mov	r1, r6
 8013a5e:	4628      	mov	r0, r5
 8013a60:	47b8      	blx	r7
 8013a62:	3001      	adds	r0, #1
 8013a64:	d12c      	bne.n	8013ac0 <_printf_float+0x24c>
 8013a66:	e764      	b.n	8013932 <_printf_float+0xbe>
 8013a68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013a6c:	f240 80e0 	bls.w	8013c30 <_printf_float+0x3bc>
 8013a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013a74:	2200      	movs	r2, #0
 8013a76:	2300      	movs	r3, #0
 8013a78:	f7ed f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	d034      	beq.n	8013aea <_printf_float+0x276>
 8013a80:	4a37      	ldr	r2, [pc, #220]	; (8013b60 <_printf_float+0x2ec>)
 8013a82:	2301      	movs	r3, #1
 8013a84:	4631      	mov	r1, r6
 8013a86:	4628      	mov	r0, r5
 8013a88:	47b8      	blx	r7
 8013a8a:	3001      	adds	r0, #1
 8013a8c:	f43f af51 	beq.w	8013932 <_printf_float+0xbe>
 8013a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a94:	429a      	cmp	r2, r3
 8013a96:	db02      	blt.n	8013a9e <_printf_float+0x22a>
 8013a98:	6823      	ldr	r3, [r4, #0]
 8013a9a:	07d8      	lsls	r0, r3, #31
 8013a9c:	d510      	bpl.n	8013ac0 <_printf_float+0x24c>
 8013a9e:	ee18 3a10 	vmov	r3, s16
 8013aa2:	4652      	mov	r2, sl
 8013aa4:	4631      	mov	r1, r6
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	47b8      	blx	r7
 8013aaa:	3001      	adds	r0, #1
 8013aac:	f43f af41 	beq.w	8013932 <_printf_float+0xbe>
 8013ab0:	f04f 0800 	mov.w	r8, #0
 8013ab4:	f104 091a 	add.w	r9, r4, #26
 8013ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013aba:	3b01      	subs	r3, #1
 8013abc:	4543      	cmp	r3, r8
 8013abe:	dc09      	bgt.n	8013ad4 <_printf_float+0x260>
 8013ac0:	6823      	ldr	r3, [r4, #0]
 8013ac2:	079b      	lsls	r3, r3, #30
 8013ac4:	f100 8107 	bmi.w	8013cd6 <_printf_float+0x462>
 8013ac8:	68e0      	ldr	r0, [r4, #12]
 8013aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013acc:	4298      	cmp	r0, r3
 8013ace:	bfb8      	it	lt
 8013ad0:	4618      	movlt	r0, r3
 8013ad2:	e730      	b.n	8013936 <_printf_float+0xc2>
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	464a      	mov	r2, r9
 8013ad8:	4631      	mov	r1, r6
 8013ada:	4628      	mov	r0, r5
 8013adc:	47b8      	blx	r7
 8013ade:	3001      	adds	r0, #1
 8013ae0:	f43f af27 	beq.w	8013932 <_printf_float+0xbe>
 8013ae4:	f108 0801 	add.w	r8, r8, #1
 8013ae8:	e7e6      	b.n	8013ab8 <_printf_float+0x244>
 8013aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	dc39      	bgt.n	8013b64 <_printf_float+0x2f0>
 8013af0:	4a1b      	ldr	r2, [pc, #108]	; (8013b60 <_printf_float+0x2ec>)
 8013af2:	2301      	movs	r3, #1
 8013af4:	4631      	mov	r1, r6
 8013af6:	4628      	mov	r0, r5
 8013af8:	47b8      	blx	r7
 8013afa:	3001      	adds	r0, #1
 8013afc:	f43f af19 	beq.w	8013932 <_printf_float+0xbe>
 8013b00:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013b04:	4313      	orrs	r3, r2
 8013b06:	d102      	bne.n	8013b0e <_printf_float+0x29a>
 8013b08:	6823      	ldr	r3, [r4, #0]
 8013b0a:	07d9      	lsls	r1, r3, #31
 8013b0c:	d5d8      	bpl.n	8013ac0 <_printf_float+0x24c>
 8013b0e:	ee18 3a10 	vmov	r3, s16
 8013b12:	4652      	mov	r2, sl
 8013b14:	4631      	mov	r1, r6
 8013b16:	4628      	mov	r0, r5
 8013b18:	47b8      	blx	r7
 8013b1a:	3001      	adds	r0, #1
 8013b1c:	f43f af09 	beq.w	8013932 <_printf_float+0xbe>
 8013b20:	f04f 0900 	mov.w	r9, #0
 8013b24:	f104 0a1a 	add.w	sl, r4, #26
 8013b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b2a:	425b      	negs	r3, r3
 8013b2c:	454b      	cmp	r3, r9
 8013b2e:	dc01      	bgt.n	8013b34 <_printf_float+0x2c0>
 8013b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b32:	e792      	b.n	8013a5a <_printf_float+0x1e6>
 8013b34:	2301      	movs	r3, #1
 8013b36:	4652      	mov	r2, sl
 8013b38:	4631      	mov	r1, r6
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	47b8      	blx	r7
 8013b3e:	3001      	adds	r0, #1
 8013b40:	f43f aef7 	beq.w	8013932 <_printf_float+0xbe>
 8013b44:	f109 0901 	add.w	r9, r9, #1
 8013b48:	e7ee      	b.n	8013b28 <_printf_float+0x2b4>
 8013b4a:	bf00      	nop
 8013b4c:	7fefffff 	.word	0x7fefffff
 8013b50:	0803ad04 	.word	0x0803ad04
 8013b54:	0803ad08 	.word	0x0803ad08
 8013b58:	0803ad0c 	.word	0x0803ad0c
 8013b5c:	0803ad10 	.word	0x0803ad10
 8013b60:	0803ad14 	.word	0x0803ad14
 8013b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	bfa8      	it	ge
 8013b6c:	461a      	movge	r2, r3
 8013b6e:	2a00      	cmp	r2, #0
 8013b70:	4691      	mov	r9, r2
 8013b72:	dc37      	bgt.n	8013be4 <_printf_float+0x370>
 8013b74:	f04f 0b00 	mov.w	fp, #0
 8013b78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b7c:	f104 021a 	add.w	r2, r4, #26
 8013b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013b82:	9305      	str	r3, [sp, #20]
 8013b84:	eba3 0309 	sub.w	r3, r3, r9
 8013b88:	455b      	cmp	r3, fp
 8013b8a:	dc33      	bgt.n	8013bf4 <_printf_float+0x380>
 8013b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b90:	429a      	cmp	r2, r3
 8013b92:	db3b      	blt.n	8013c0c <_printf_float+0x398>
 8013b94:	6823      	ldr	r3, [r4, #0]
 8013b96:	07da      	lsls	r2, r3, #31
 8013b98:	d438      	bmi.n	8013c0c <_printf_float+0x398>
 8013b9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013b9e:	eba2 0903 	sub.w	r9, r2, r3
 8013ba2:	9b05      	ldr	r3, [sp, #20]
 8013ba4:	1ad2      	subs	r2, r2, r3
 8013ba6:	4591      	cmp	r9, r2
 8013ba8:	bfa8      	it	ge
 8013baa:	4691      	movge	r9, r2
 8013bac:	f1b9 0f00 	cmp.w	r9, #0
 8013bb0:	dc35      	bgt.n	8013c1e <_printf_float+0x3aa>
 8013bb2:	f04f 0800 	mov.w	r8, #0
 8013bb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013bba:	f104 0a1a 	add.w	sl, r4, #26
 8013bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013bc2:	1a9b      	subs	r3, r3, r2
 8013bc4:	eba3 0309 	sub.w	r3, r3, r9
 8013bc8:	4543      	cmp	r3, r8
 8013bca:	f77f af79 	ble.w	8013ac0 <_printf_float+0x24c>
 8013bce:	2301      	movs	r3, #1
 8013bd0:	4652      	mov	r2, sl
 8013bd2:	4631      	mov	r1, r6
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	47b8      	blx	r7
 8013bd8:	3001      	adds	r0, #1
 8013bda:	f43f aeaa 	beq.w	8013932 <_printf_float+0xbe>
 8013bde:	f108 0801 	add.w	r8, r8, #1
 8013be2:	e7ec      	b.n	8013bbe <_printf_float+0x34a>
 8013be4:	4613      	mov	r3, r2
 8013be6:	4631      	mov	r1, r6
 8013be8:	4642      	mov	r2, r8
 8013bea:	4628      	mov	r0, r5
 8013bec:	47b8      	blx	r7
 8013bee:	3001      	adds	r0, #1
 8013bf0:	d1c0      	bne.n	8013b74 <_printf_float+0x300>
 8013bf2:	e69e      	b.n	8013932 <_printf_float+0xbe>
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	4631      	mov	r1, r6
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	9205      	str	r2, [sp, #20]
 8013bfc:	47b8      	blx	r7
 8013bfe:	3001      	adds	r0, #1
 8013c00:	f43f ae97 	beq.w	8013932 <_printf_float+0xbe>
 8013c04:	9a05      	ldr	r2, [sp, #20]
 8013c06:	f10b 0b01 	add.w	fp, fp, #1
 8013c0a:	e7b9      	b.n	8013b80 <_printf_float+0x30c>
 8013c0c:	ee18 3a10 	vmov	r3, s16
 8013c10:	4652      	mov	r2, sl
 8013c12:	4631      	mov	r1, r6
 8013c14:	4628      	mov	r0, r5
 8013c16:	47b8      	blx	r7
 8013c18:	3001      	adds	r0, #1
 8013c1a:	d1be      	bne.n	8013b9a <_printf_float+0x326>
 8013c1c:	e689      	b.n	8013932 <_printf_float+0xbe>
 8013c1e:	9a05      	ldr	r2, [sp, #20]
 8013c20:	464b      	mov	r3, r9
 8013c22:	4442      	add	r2, r8
 8013c24:	4631      	mov	r1, r6
 8013c26:	4628      	mov	r0, r5
 8013c28:	47b8      	blx	r7
 8013c2a:	3001      	adds	r0, #1
 8013c2c:	d1c1      	bne.n	8013bb2 <_printf_float+0x33e>
 8013c2e:	e680      	b.n	8013932 <_printf_float+0xbe>
 8013c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c32:	2a01      	cmp	r2, #1
 8013c34:	dc01      	bgt.n	8013c3a <_printf_float+0x3c6>
 8013c36:	07db      	lsls	r3, r3, #31
 8013c38:	d53a      	bpl.n	8013cb0 <_printf_float+0x43c>
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	4642      	mov	r2, r8
 8013c3e:	4631      	mov	r1, r6
 8013c40:	4628      	mov	r0, r5
 8013c42:	47b8      	blx	r7
 8013c44:	3001      	adds	r0, #1
 8013c46:	f43f ae74 	beq.w	8013932 <_printf_float+0xbe>
 8013c4a:	ee18 3a10 	vmov	r3, s16
 8013c4e:	4652      	mov	r2, sl
 8013c50:	4631      	mov	r1, r6
 8013c52:	4628      	mov	r0, r5
 8013c54:	47b8      	blx	r7
 8013c56:	3001      	adds	r0, #1
 8013c58:	f43f ae6b 	beq.w	8013932 <_printf_float+0xbe>
 8013c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c60:	2200      	movs	r2, #0
 8013c62:	2300      	movs	r3, #0
 8013c64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013c68:	f7ec ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c6c:	b9d8      	cbnz	r0, 8013ca6 <_printf_float+0x432>
 8013c6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013c72:	f108 0201 	add.w	r2, r8, #1
 8013c76:	4631      	mov	r1, r6
 8013c78:	4628      	mov	r0, r5
 8013c7a:	47b8      	blx	r7
 8013c7c:	3001      	adds	r0, #1
 8013c7e:	d10e      	bne.n	8013c9e <_printf_float+0x42a>
 8013c80:	e657      	b.n	8013932 <_printf_float+0xbe>
 8013c82:	2301      	movs	r3, #1
 8013c84:	4652      	mov	r2, sl
 8013c86:	4631      	mov	r1, r6
 8013c88:	4628      	mov	r0, r5
 8013c8a:	47b8      	blx	r7
 8013c8c:	3001      	adds	r0, #1
 8013c8e:	f43f ae50 	beq.w	8013932 <_printf_float+0xbe>
 8013c92:	f108 0801 	add.w	r8, r8, #1
 8013c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c98:	3b01      	subs	r3, #1
 8013c9a:	4543      	cmp	r3, r8
 8013c9c:	dcf1      	bgt.n	8013c82 <_printf_float+0x40e>
 8013c9e:	464b      	mov	r3, r9
 8013ca0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ca4:	e6da      	b.n	8013a5c <_printf_float+0x1e8>
 8013ca6:	f04f 0800 	mov.w	r8, #0
 8013caa:	f104 0a1a 	add.w	sl, r4, #26
 8013cae:	e7f2      	b.n	8013c96 <_printf_float+0x422>
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	4642      	mov	r2, r8
 8013cb4:	e7df      	b.n	8013c76 <_printf_float+0x402>
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	464a      	mov	r2, r9
 8013cba:	4631      	mov	r1, r6
 8013cbc:	4628      	mov	r0, r5
 8013cbe:	47b8      	blx	r7
 8013cc0:	3001      	adds	r0, #1
 8013cc2:	f43f ae36 	beq.w	8013932 <_printf_float+0xbe>
 8013cc6:	f108 0801 	add.w	r8, r8, #1
 8013cca:	68e3      	ldr	r3, [r4, #12]
 8013ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cce:	1a5b      	subs	r3, r3, r1
 8013cd0:	4543      	cmp	r3, r8
 8013cd2:	dcf0      	bgt.n	8013cb6 <_printf_float+0x442>
 8013cd4:	e6f8      	b.n	8013ac8 <_printf_float+0x254>
 8013cd6:	f04f 0800 	mov.w	r8, #0
 8013cda:	f104 0919 	add.w	r9, r4, #25
 8013cde:	e7f4      	b.n	8013cca <_printf_float+0x456>

08013ce0 <_printf_common>:
 8013ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ce4:	4616      	mov	r6, r2
 8013ce6:	4699      	mov	r9, r3
 8013ce8:	688a      	ldr	r2, [r1, #8]
 8013cea:	690b      	ldr	r3, [r1, #16]
 8013cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	bfb8      	it	lt
 8013cf4:	4613      	movlt	r3, r2
 8013cf6:	6033      	str	r3, [r6, #0]
 8013cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	460c      	mov	r4, r1
 8013d00:	b10a      	cbz	r2, 8013d06 <_printf_common+0x26>
 8013d02:	3301      	adds	r3, #1
 8013d04:	6033      	str	r3, [r6, #0]
 8013d06:	6823      	ldr	r3, [r4, #0]
 8013d08:	0699      	lsls	r1, r3, #26
 8013d0a:	bf42      	ittt	mi
 8013d0c:	6833      	ldrmi	r3, [r6, #0]
 8013d0e:	3302      	addmi	r3, #2
 8013d10:	6033      	strmi	r3, [r6, #0]
 8013d12:	6825      	ldr	r5, [r4, #0]
 8013d14:	f015 0506 	ands.w	r5, r5, #6
 8013d18:	d106      	bne.n	8013d28 <_printf_common+0x48>
 8013d1a:	f104 0a19 	add.w	sl, r4, #25
 8013d1e:	68e3      	ldr	r3, [r4, #12]
 8013d20:	6832      	ldr	r2, [r6, #0]
 8013d22:	1a9b      	subs	r3, r3, r2
 8013d24:	42ab      	cmp	r3, r5
 8013d26:	dc26      	bgt.n	8013d76 <_printf_common+0x96>
 8013d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d2c:	1e13      	subs	r3, r2, #0
 8013d2e:	6822      	ldr	r2, [r4, #0]
 8013d30:	bf18      	it	ne
 8013d32:	2301      	movne	r3, #1
 8013d34:	0692      	lsls	r2, r2, #26
 8013d36:	d42b      	bmi.n	8013d90 <_printf_common+0xb0>
 8013d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d3c:	4649      	mov	r1, r9
 8013d3e:	4638      	mov	r0, r7
 8013d40:	47c0      	blx	r8
 8013d42:	3001      	adds	r0, #1
 8013d44:	d01e      	beq.n	8013d84 <_printf_common+0xa4>
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	6922      	ldr	r2, [r4, #16]
 8013d4a:	f003 0306 	and.w	r3, r3, #6
 8013d4e:	2b04      	cmp	r3, #4
 8013d50:	bf02      	ittt	eq
 8013d52:	68e5      	ldreq	r5, [r4, #12]
 8013d54:	6833      	ldreq	r3, [r6, #0]
 8013d56:	1aed      	subeq	r5, r5, r3
 8013d58:	68a3      	ldr	r3, [r4, #8]
 8013d5a:	bf0c      	ite	eq
 8013d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d60:	2500      	movne	r5, #0
 8013d62:	4293      	cmp	r3, r2
 8013d64:	bfc4      	itt	gt
 8013d66:	1a9b      	subgt	r3, r3, r2
 8013d68:	18ed      	addgt	r5, r5, r3
 8013d6a:	2600      	movs	r6, #0
 8013d6c:	341a      	adds	r4, #26
 8013d6e:	42b5      	cmp	r5, r6
 8013d70:	d11a      	bne.n	8013da8 <_printf_common+0xc8>
 8013d72:	2000      	movs	r0, #0
 8013d74:	e008      	b.n	8013d88 <_printf_common+0xa8>
 8013d76:	2301      	movs	r3, #1
 8013d78:	4652      	mov	r2, sl
 8013d7a:	4649      	mov	r1, r9
 8013d7c:	4638      	mov	r0, r7
 8013d7e:	47c0      	blx	r8
 8013d80:	3001      	adds	r0, #1
 8013d82:	d103      	bne.n	8013d8c <_printf_common+0xac>
 8013d84:	f04f 30ff 	mov.w	r0, #4294967295
 8013d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d8c:	3501      	adds	r5, #1
 8013d8e:	e7c6      	b.n	8013d1e <_printf_common+0x3e>
 8013d90:	18e1      	adds	r1, r4, r3
 8013d92:	1c5a      	adds	r2, r3, #1
 8013d94:	2030      	movs	r0, #48	; 0x30
 8013d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013d9a:	4422      	add	r2, r4
 8013d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013da4:	3302      	adds	r3, #2
 8013da6:	e7c7      	b.n	8013d38 <_printf_common+0x58>
 8013da8:	2301      	movs	r3, #1
 8013daa:	4622      	mov	r2, r4
 8013dac:	4649      	mov	r1, r9
 8013dae:	4638      	mov	r0, r7
 8013db0:	47c0      	blx	r8
 8013db2:	3001      	adds	r0, #1
 8013db4:	d0e6      	beq.n	8013d84 <_printf_common+0xa4>
 8013db6:	3601      	adds	r6, #1
 8013db8:	e7d9      	b.n	8013d6e <_printf_common+0x8e>
	...

08013dbc <_printf_i>:
 8013dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013dc0:	7e0f      	ldrb	r7, [r1, #24]
 8013dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013dc4:	2f78      	cmp	r7, #120	; 0x78
 8013dc6:	4691      	mov	r9, r2
 8013dc8:	4680      	mov	r8, r0
 8013dca:	460c      	mov	r4, r1
 8013dcc:	469a      	mov	sl, r3
 8013dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013dd2:	d807      	bhi.n	8013de4 <_printf_i+0x28>
 8013dd4:	2f62      	cmp	r7, #98	; 0x62
 8013dd6:	d80a      	bhi.n	8013dee <_printf_i+0x32>
 8013dd8:	2f00      	cmp	r7, #0
 8013dda:	f000 80d4 	beq.w	8013f86 <_printf_i+0x1ca>
 8013dde:	2f58      	cmp	r7, #88	; 0x58
 8013de0:	f000 80c0 	beq.w	8013f64 <_printf_i+0x1a8>
 8013de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013dec:	e03a      	b.n	8013e64 <_printf_i+0xa8>
 8013dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013df2:	2b15      	cmp	r3, #21
 8013df4:	d8f6      	bhi.n	8013de4 <_printf_i+0x28>
 8013df6:	a101      	add	r1, pc, #4	; (adr r1, 8013dfc <_printf_i+0x40>)
 8013df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013dfc:	08013e55 	.word	0x08013e55
 8013e00:	08013e69 	.word	0x08013e69
 8013e04:	08013de5 	.word	0x08013de5
 8013e08:	08013de5 	.word	0x08013de5
 8013e0c:	08013de5 	.word	0x08013de5
 8013e10:	08013de5 	.word	0x08013de5
 8013e14:	08013e69 	.word	0x08013e69
 8013e18:	08013de5 	.word	0x08013de5
 8013e1c:	08013de5 	.word	0x08013de5
 8013e20:	08013de5 	.word	0x08013de5
 8013e24:	08013de5 	.word	0x08013de5
 8013e28:	08013f6d 	.word	0x08013f6d
 8013e2c:	08013e95 	.word	0x08013e95
 8013e30:	08013f27 	.word	0x08013f27
 8013e34:	08013de5 	.word	0x08013de5
 8013e38:	08013de5 	.word	0x08013de5
 8013e3c:	08013f8f 	.word	0x08013f8f
 8013e40:	08013de5 	.word	0x08013de5
 8013e44:	08013e95 	.word	0x08013e95
 8013e48:	08013de5 	.word	0x08013de5
 8013e4c:	08013de5 	.word	0x08013de5
 8013e50:	08013f2f 	.word	0x08013f2f
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	1d1a      	adds	r2, r3, #4
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	602a      	str	r2, [r5, #0]
 8013e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e64:	2301      	movs	r3, #1
 8013e66:	e09f      	b.n	8013fa8 <_printf_i+0x1ec>
 8013e68:	6820      	ldr	r0, [r4, #0]
 8013e6a:	682b      	ldr	r3, [r5, #0]
 8013e6c:	0607      	lsls	r7, r0, #24
 8013e6e:	f103 0104 	add.w	r1, r3, #4
 8013e72:	6029      	str	r1, [r5, #0]
 8013e74:	d501      	bpl.n	8013e7a <_printf_i+0xbe>
 8013e76:	681e      	ldr	r6, [r3, #0]
 8013e78:	e003      	b.n	8013e82 <_printf_i+0xc6>
 8013e7a:	0646      	lsls	r6, r0, #25
 8013e7c:	d5fb      	bpl.n	8013e76 <_printf_i+0xba>
 8013e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013e82:	2e00      	cmp	r6, #0
 8013e84:	da03      	bge.n	8013e8e <_printf_i+0xd2>
 8013e86:	232d      	movs	r3, #45	; 0x2d
 8013e88:	4276      	negs	r6, r6
 8013e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e8e:	485a      	ldr	r0, [pc, #360]	; (8013ff8 <_printf_i+0x23c>)
 8013e90:	230a      	movs	r3, #10
 8013e92:	e012      	b.n	8013eba <_printf_i+0xfe>
 8013e94:	682b      	ldr	r3, [r5, #0]
 8013e96:	6820      	ldr	r0, [r4, #0]
 8013e98:	1d19      	adds	r1, r3, #4
 8013e9a:	6029      	str	r1, [r5, #0]
 8013e9c:	0605      	lsls	r5, r0, #24
 8013e9e:	d501      	bpl.n	8013ea4 <_printf_i+0xe8>
 8013ea0:	681e      	ldr	r6, [r3, #0]
 8013ea2:	e002      	b.n	8013eaa <_printf_i+0xee>
 8013ea4:	0641      	lsls	r1, r0, #25
 8013ea6:	d5fb      	bpl.n	8013ea0 <_printf_i+0xe4>
 8013ea8:	881e      	ldrh	r6, [r3, #0]
 8013eaa:	4853      	ldr	r0, [pc, #332]	; (8013ff8 <_printf_i+0x23c>)
 8013eac:	2f6f      	cmp	r7, #111	; 0x6f
 8013eae:	bf0c      	ite	eq
 8013eb0:	2308      	moveq	r3, #8
 8013eb2:	230a      	movne	r3, #10
 8013eb4:	2100      	movs	r1, #0
 8013eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013eba:	6865      	ldr	r5, [r4, #4]
 8013ebc:	60a5      	str	r5, [r4, #8]
 8013ebe:	2d00      	cmp	r5, #0
 8013ec0:	bfa2      	ittt	ge
 8013ec2:	6821      	ldrge	r1, [r4, #0]
 8013ec4:	f021 0104 	bicge.w	r1, r1, #4
 8013ec8:	6021      	strge	r1, [r4, #0]
 8013eca:	b90e      	cbnz	r6, 8013ed0 <_printf_i+0x114>
 8013ecc:	2d00      	cmp	r5, #0
 8013ece:	d04b      	beq.n	8013f68 <_printf_i+0x1ac>
 8013ed0:	4615      	mov	r5, r2
 8013ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8013eda:	5dc7      	ldrb	r7, [r0, r7]
 8013edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013ee0:	4637      	mov	r7, r6
 8013ee2:	42bb      	cmp	r3, r7
 8013ee4:	460e      	mov	r6, r1
 8013ee6:	d9f4      	bls.n	8013ed2 <_printf_i+0x116>
 8013ee8:	2b08      	cmp	r3, #8
 8013eea:	d10b      	bne.n	8013f04 <_printf_i+0x148>
 8013eec:	6823      	ldr	r3, [r4, #0]
 8013eee:	07de      	lsls	r6, r3, #31
 8013ef0:	d508      	bpl.n	8013f04 <_printf_i+0x148>
 8013ef2:	6923      	ldr	r3, [r4, #16]
 8013ef4:	6861      	ldr	r1, [r4, #4]
 8013ef6:	4299      	cmp	r1, r3
 8013ef8:	bfde      	ittt	le
 8013efa:	2330      	movle	r3, #48	; 0x30
 8013efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013f04:	1b52      	subs	r2, r2, r5
 8013f06:	6122      	str	r2, [r4, #16]
 8013f08:	f8cd a000 	str.w	sl, [sp]
 8013f0c:	464b      	mov	r3, r9
 8013f0e:	aa03      	add	r2, sp, #12
 8013f10:	4621      	mov	r1, r4
 8013f12:	4640      	mov	r0, r8
 8013f14:	f7ff fee4 	bl	8013ce0 <_printf_common>
 8013f18:	3001      	adds	r0, #1
 8013f1a:	d14a      	bne.n	8013fb2 <_printf_i+0x1f6>
 8013f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f20:	b004      	add	sp, #16
 8013f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f26:	6823      	ldr	r3, [r4, #0]
 8013f28:	f043 0320 	orr.w	r3, r3, #32
 8013f2c:	6023      	str	r3, [r4, #0]
 8013f2e:	4833      	ldr	r0, [pc, #204]	; (8013ffc <_printf_i+0x240>)
 8013f30:	2778      	movs	r7, #120	; 0x78
 8013f32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013f36:	6823      	ldr	r3, [r4, #0]
 8013f38:	6829      	ldr	r1, [r5, #0]
 8013f3a:	061f      	lsls	r7, r3, #24
 8013f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f40:	d402      	bmi.n	8013f48 <_printf_i+0x18c>
 8013f42:	065f      	lsls	r7, r3, #25
 8013f44:	bf48      	it	mi
 8013f46:	b2b6      	uxthmi	r6, r6
 8013f48:	07df      	lsls	r7, r3, #31
 8013f4a:	bf48      	it	mi
 8013f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8013f50:	6029      	str	r1, [r5, #0]
 8013f52:	bf48      	it	mi
 8013f54:	6023      	strmi	r3, [r4, #0]
 8013f56:	b91e      	cbnz	r6, 8013f60 <_printf_i+0x1a4>
 8013f58:	6823      	ldr	r3, [r4, #0]
 8013f5a:	f023 0320 	bic.w	r3, r3, #32
 8013f5e:	6023      	str	r3, [r4, #0]
 8013f60:	2310      	movs	r3, #16
 8013f62:	e7a7      	b.n	8013eb4 <_printf_i+0xf8>
 8013f64:	4824      	ldr	r0, [pc, #144]	; (8013ff8 <_printf_i+0x23c>)
 8013f66:	e7e4      	b.n	8013f32 <_printf_i+0x176>
 8013f68:	4615      	mov	r5, r2
 8013f6a:	e7bd      	b.n	8013ee8 <_printf_i+0x12c>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	6826      	ldr	r6, [r4, #0]
 8013f70:	6961      	ldr	r1, [r4, #20]
 8013f72:	1d18      	adds	r0, r3, #4
 8013f74:	6028      	str	r0, [r5, #0]
 8013f76:	0635      	lsls	r5, r6, #24
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	d501      	bpl.n	8013f80 <_printf_i+0x1c4>
 8013f7c:	6019      	str	r1, [r3, #0]
 8013f7e:	e002      	b.n	8013f86 <_printf_i+0x1ca>
 8013f80:	0670      	lsls	r0, r6, #25
 8013f82:	d5fb      	bpl.n	8013f7c <_printf_i+0x1c0>
 8013f84:	8019      	strh	r1, [r3, #0]
 8013f86:	2300      	movs	r3, #0
 8013f88:	6123      	str	r3, [r4, #16]
 8013f8a:	4615      	mov	r5, r2
 8013f8c:	e7bc      	b.n	8013f08 <_printf_i+0x14c>
 8013f8e:	682b      	ldr	r3, [r5, #0]
 8013f90:	1d1a      	adds	r2, r3, #4
 8013f92:	602a      	str	r2, [r5, #0]
 8013f94:	681d      	ldr	r5, [r3, #0]
 8013f96:	6862      	ldr	r2, [r4, #4]
 8013f98:	2100      	movs	r1, #0
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	f7ec f918 	bl	80001d0 <memchr>
 8013fa0:	b108      	cbz	r0, 8013fa6 <_printf_i+0x1ea>
 8013fa2:	1b40      	subs	r0, r0, r5
 8013fa4:	6060      	str	r0, [r4, #4]
 8013fa6:	6863      	ldr	r3, [r4, #4]
 8013fa8:	6123      	str	r3, [r4, #16]
 8013faa:	2300      	movs	r3, #0
 8013fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fb0:	e7aa      	b.n	8013f08 <_printf_i+0x14c>
 8013fb2:	6923      	ldr	r3, [r4, #16]
 8013fb4:	462a      	mov	r2, r5
 8013fb6:	4649      	mov	r1, r9
 8013fb8:	4640      	mov	r0, r8
 8013fba:	47d0      	blx	sl
 8013fbc:	3001      	adds	r0, #1
 8013fbe:	d0ad      	beq.n	8013f1c <_printf_i+0x160>
 8013fc0:	6823      	ldr	r3, [r4, #0]
 8013fc2:	079b      	lsls	r3, r3, #30
 8013fc4:	d413      	bmi.n	8013fee <_printf_i+0x232>
 8013fc6:	68e0      	ldr	r0, [r4, #12]
 8013fc8:	9b03      	ldr	r3, [sp, #12]
 8013fca:	4298      	cmp	r0, r3
 8013fcc:	bfb8      	it	lt
 8013fce:	4618      	movlt	r0, r3
 8013fd0:	e7a6      	b.n	8013f20 <_printf_i+0x164>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	4632      	mov	r2, r6
 8013fd6:	4649      	mov	r1, r9
 8013fd8:	4640      	mov	r0, r8
 8013fda:	47d0      	blx	sl
 8013fdc:	3001      	adds	r0, #1
 8013fde:	d09d      	beq.n	8013f1c <_printf_i+0x160>
 8013fe0:	3501      	adds	r5, #1
 8013fe2:	68e3      	ldr	r3, [r4, #12]
 8013fe4:	9903      	ldr	r1, [sp, #12]
 8013fe6:	1a5b      	subs	r3, r3, r1
 8013fe8:	42ab      	cmp	r3, r5
 8013fea:	dcf2      	bgt.n	8013fd2 <_printf_i+0x216>
 8013fec:	e7eb      	b.n	8013fc6 <_printf_i+0x20a>
 8013fee:	2500      	movs	r5, #0
 8013ff0:	f104 0619 	add.w	r6, r4, #25
 8013ff4:	e7f5      	b.n	8013fe2 <_printf_i+0x226>
 8013ff6:	bf00      	nop
 8013ff8:	0803ad16 	.word	0x0803ad16
 8013ffc:	0803ad27 	.word	0x0803ad27

08014000 <std>:
 8014000:	2300      	movs	r3, #0
 8014002:	b510      	push	{r4, lr}
 8014004:	4604      	mov	r4, r0
 8014006:	e9c0 3300 	strd	r3, r3, [r0]
 801400a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801400e:	6083      	str	r3, [r0, #8]
 8014010:	8181      	strh	r1, [r0, #12]
 8014012:	6643      	str	r3, [r0, #100]	; 0x64
 8014014:	81c2      	strh	r2, [r0, #14]
 8014016:	6183      	str	r3, [r0, #24]
 8014018:	4619      	mov	r1, r3
 801401a:	2208      	movs	r2, #8
 801401c:	305c      	adds	r0, #92	; 0x5c
 801401e:	f000 f916 	bl	801424e <memset>
 8014022:	4b0d      	ldr	r3, [pc, #52]	; (8014058 <std+0x58>)
 8014024:	6263      	str	r3, [r4, #36]	; 0x24
 8014026:	4b0d      	ldr	r3, [pc, #52]	; (801405c <std+0x5c>)
 8014028:	62a3      	str	r3, [r4, #40]	; 0x28
 801402a:	4b0d      	ldr	r3, [pc, #52]	; (8014060 <std+0x60>)
 801402c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801402e:	4b0d      	ldr	r3, [pc, #52]	; (8014064 <std+0x64>)
 8014030:	6323      	str	r3, [r4, #48]	; 0x30
 8014032:	4b0d      	ldr	r3, [pc, #52]	; (8014068 <std+0x68>)
 8014034:	6224      	str	r4, [r4, #32]
 8014036:	429c      	cmp	r4, r3
 8014038:	d006      	beq.n	8014048 <std+0x48>
 801403a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801403e:	4294      	cmp	r4, r2
 8014040:	d002      	beq.n	8014048 <std+0x48>
 8014042:	33d0      	adds	r3, #208	; 0xd0
 8014044:	429c      	cmp	r4, r3
 8014046:	d105      	bne.n	8014054 <std+0x54>
 8014048:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801404c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014050:	f000 b986 	b.w	8014360 <__retarget_lock_init_recursive>
 8014054:	bd10      	pop	{r4, pc}
 8014056:	bf00      	nop
 8014058:	080141c5 	.word	0x080141c5
 801405c:	080141e7 	.word	0x080141e7
 8014060:	0801421f 	.word	0x0801421f
 8014064:	08014243 	.word	0x08014243
 8014068:	20002cd0 	.word	0x20002cd0

0801406c <stdio_exit_handler>:
 801406c:	4a02      	ldr	r2, [pc, #8]	; (8014078 <stdio_exit_handler+0xc>)
 801406e:	4903      	ldr	r1, [pc, #12]	; (801407c <stdio_exit_handler+0x10>)
 8014070:	4803      	ldr	r0, [pc, #12]	; (8014080 <stdio_exit_handler+0x14>)
 8014072:	f000 b869 	b.w	8014148 <_fwalk_sglue>
 8014076:	bf00      	nop
 8014078:	200002ec 	.word	0x200002ec
 801407c:	08015d11 	.word	0x08015d11
 8014080:	200002f8 	.word	0x200002f8

08014084 <cleanup_stdio>:
 8014084:	6841      	ldr	r1, [r0, #4]
 8014086:	4b0c      	ldr	r3, [pc, #48]	; (80140b8 <cleanup_stdio+0x34>)
 8014088:	4299      	cmp	r1, r3
 801408a:	b510      	push	{r4, lr}
 801408c:	4604      	mov	r4, r0
 801408e:	d001      	beq.n	8014094 <cleanup_stdio+0x10>
 8014090:	f001 fe3e 	bl	8015d10 <_fflush_r>
 8014094:	68a1      	ldr	r1, [r4, #8]
 8014096:	4b09      	ldr	r3, [pc, #36]	; (80140bc <cleanup_stdio+0x38>)
 8014098:	4299      	cmp	r1, r3
 801409a:	d002      	beq.n	80140a2 <cleanup_stdio+0x1e>
 801409c:	4620      	mov	r0, r4
 801409e:	f001 fe37 	bl	8015d10 <_fflush_r>
 80140a2:	68e1      	ldr	r1, [r4, #12]
 80140a4:	4b06      	ldr	r3, [pc, #24]	; (80140c0 <cleanup_stdio+0x3c>)
 80140a6:	4299      	cmp	r1, r3
 80140a8:	d004      	beq.n	80140b4 <cleanup_stdio+0x30>
 80140aa:	4620      	mov	r0, r4
 80140ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140b0:	f001 be2e 	b.w	8015d10 <_fflush_r>
 80140b4:	bd10      	pop	{r4, pc}
 80140b6:	bf00      	nop
 80140b8:	20002cd0 	.word	0x20002cd0
 80140bc:	20002d38 	.word	0x20002d38
 80140c0:	20002da0 	.word	0x20002da0

080140c4 <global_stdio_init.part.0>:
 80140c4:	b510      	push	{r4, lr}
 80140c6:	4b0b      	ldr	r3, [pc, #44]	; (80140f4 <global_stdio_init.part.0+0x30>)
 80140c8:	4c0b      	ldr	r4, [pc, #44]	; (80140f8 <global_stdio_init.part.0+0x34>)
 80140ca:	4a0c      	ldr	r2, [pc, #48]	; (80140fc <global_stdio_init.part.0+0x38>)
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	4620      	mov	r0, r4
 80140d0:	2200      	movs	r2, #0
 80140d2:	2104      	movs	r1, #4
 80140d4:	f7ff ff94 	bl	8014000 <std>
 80140d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80140dc:	2201      	movs	r2, #1
 80140de:	2109      	movs	r1, #9
 80140e0:	f7ff ff8e 	bl	8014000 <std>
 80140e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80140e8:	2202      	movs	r2, #2
 80140ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ee:	2112      	movs	r1, #18
 80140f0:	f7ff bf86 	b.w	8014000 <std>
 80140f4:	20002e08 	.word	0x20002e08
 80140f8:	20002cd0 	.word	0x20002cd0
 80140fc:	0801406d 	.word	0x0801406d

08014100 <__sfp_lock_acquire>:
 8014100:	4801      	ldr	r0, [pc, #4]	; (8014108 <__sfp_lock_acquire+0x8>)
 8014102:	f000 b92e 	b.w	8014362 <__retarget_lock_acquire_recursive>
 8014106:	bf00      	nop
 8014108:	20002e11 	.word	0x20002e11

0801410c <__sfp_lock_release>:
 801410c:	4801      	ldr	r0, [pc, #4]	; (8014114 <__sfp_lock_release+0x8>)
 801410e:	f000 b929 	b.w	8014364 <__retarget_lock_release_recursive>
 8014112:	bf00      	nop
 8014114:	20002e11 	.word	0x20002e11

08014118 <__sinit>:
 8014118:	b510      	push	{r4, lr}
 801411a:	4604      	mov	r4, r0
 801411c:	f7ff fff0 	bl	8014100 <__sfp_lock_acquire>
 8014120:	6a23      	ldr	r3, [r4, #32]
 8014122:	b11b      	cbz	r3, 801412c <__sinit+0x14>
 8014124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014128:	f7ff bff0 	b.w	801410c <__sfp_lock_release>
 801412c:	4b04      	ldr	r3, [pc, #16]	; (8014140 <__sinit+0x28>)
 801412e:	6223      	str	r3, [r4, #32]
 8014130:	4b04      	ldr	r3, [pc, #16]	; (8014144 <__sinit+0x2c>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d1f5      	bne.n	8014124 <__sinit+0xc>
 8014138:	f7ff ffc4 	bl	80140c4 <global_stdio_init.part.0>
 801413c:	e7f2      	b.n	8014124 <__sinit+0xc>
 801413e:	bf00      	nop
 8014140:	08014085 	.word	0x08014085
 8014144:	20002e08 	.word	0x20002e08

08014148 <_fwalk_sglue>:
 8014148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801414c:	4607      	mov	r7, r0
 801414e:	4688      	mov	r8, r1
 8014150:	4614      	mov	r4, r2
 8014152:	2600      	movs	r6, #0
 8014154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014158:	f1b9 0901 	subs.w	r9, r9, #1
 801415c:	d505      	bpl.n	801416a <_fwalk_sglue+0x22>
 801415e:	6824      	ldr	r4, [r4, #0]
 8014160:	2c00      	cmp	r4, #0
 8014162:	d1f7      	bne.n	8014154 <_fwalk_sglue+0xc>
 8014164:	4630      	mov	r0, r6
 8014166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801416a:	89ab      	ldrh	r3, [r5, #12]
 801416c:	2b01      	cmp	r3, #1
 801416e:	d907      	bls.n	8014180 <_fwalk_sglue+0x38>
 8014170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014174:	3301      	adds	r3, #1
 8014176:	d003      	beq.n	8014180 <_fwalk_sglue+0x38>
 8014178:	4629      	mov	r1, r5
 801417a:	4638      	mov	r0, r7
 801417c:	47c0      	blx	r8
 801417e:	4306      	orrs	r6, r0
 8014180:	3568      	adds	r5, #104	; 0x68
 8014182:	e7e9      	b.n	8014158 <_fwalk_sglue+0x10>

08014184 <siprintf>:
 8014184:	b40e      	push	{r1, r2, r3}
 8014186:	b500      	push	{lr}
 8014188:	b09c      	sub	sp, #112	; 0x70
 801418a:	ab1d      	add	r3, sp, #116	; 0x74
 801418c:	9002      	str	r0, [sp, #8]
 801418e:	9006      	str	r0, [sp, #24]
 8014190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014194:	4809      	ldr	r0, [pc, #36]	; (80141bc <siprintf+0x38>)
 8014196:	9107      	str	r1, [sp, #28]
 8014198:	9104      	str	r1, [sp, #16]
 801419a:	4909      	ldr	r1, [pc, #36]	; (80141c0 <siprintf+0x3c>)
 801419c:	f853 2b04 	ldr.w	r2, [r3], #4
 80141a0:	9105      	str	r1, [sp, #20]
 80141a2:	6800      	ldr	r0, [r0, #0]
 80141a4:	9301      	str	r3, [sp, #4]
 80141a6:	a902      	add	r1, sp, #8
 80141a8:	f001 fc2e 	bl	8015a08 <_svfiprintf_r>
 80141ac:	9b02      	ldr	r3, [sp, #8]
 80141ae:	2200      	movs	r2, #0
 80141b0:	701a      	strb	r2, [r3, #0]
 80141b2:	b01c      	add	sp, #112	; 0x70
 80141b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80141b8:	b003      	add	sp, #12
 80141ba:	4770      	bx	lr
 80141bc:	20000344 	.word	0x20000344
 80141c0:	ffff0208 	.word	0xffff0208

080141c4 <__sread>:
 80141c4:	b510      	push	{r4, lr}
 80141c6:	460c      	mov	r4, r1
 80141c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141cc:	f000 f87a 	bl	80142c4 <_read_r>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	bfab      	itete	ge
 80141d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141d6:	89a3      	ldrhlt	r3, [r4, #12]
 80141d8:	181b      	addge	r3, r3, r0
 80141da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80141de:	bfac      	ite	ge
 80141e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80141e2:	81a3      	strhlt	r3, [r4, #12]
 80141e4:	bd10      	pop	{r4, pc}

080141e6 <__swrite>:
 80141e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ea:	461f      	mov	r7, r3
 80141ec:	898b      	ldrh	r3, [r1, #12]
 80141ee:	05db      	lsls	r3, r3, #23
 80141f0:	4605      	mov	r5, r0
 80141f2:	460c      	mov	r4, r1
 80141f4:	4616      	mov	r6, r2
 80141f6:	d505      	bpl.n	8014204 <__swrite+0x1e>
 80141f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141fc:	2302      	movs	r3, #2
 80141fe:	2200      	movs	r2, #0
 8014200:	f000 f84e 	bl	80142a0 <_lseek_r>
 8014204:	89a3      	ldrh	r3, [r4, #12]
 8014206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801420a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801420e:	81a3      	strh	r3, [r4, #12]
 8014210:	4632      	mov	r2, r6
 8014212:	463b      	mov	r3, r7
 8014214:	4628      	mov	r0, r5
 8014216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801421a:	f000 b865 	b.w	80142e8 <_write_r>

0801421e <__sseek>:
 801421e:	b510      	push	{r4, lr}
 8014220:	460c      	mov	r4, r1
 8014222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014226:	f000 f83b 	bl	80142a0 <_lseek_r>
 801422a:	1c43      	adds	r3, r0, #1
 801422c:	89a3      	ldrh	r3, [r4, #12]
 801422e:	bf15      	itete	ne
 8014230:	6560      	strne	r0, [r4, #84]	; 0x54
 8014232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801423a:	81a3      	strheq	r3, [r4, #12]
 801423c:	bf18      	it	ne
 801423e:	81a3      	strhne	r3, [r4, #12]
 8014240:	bd10      	pop	{r4, pc}

08014242 <__sclose>:
 8014242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014246:	f000 b81b 	b.w	8014280 <_close_r>

0801424a <index>:
 801424a:	f000 b808 	b.w	801425e <strchr>

0801424e <memset>:
 801424e:	4402      	add	r2, r0
 8014250:	4603      	mov	r3, r0
 8014252:	4293      	cmp	r3, r2
 8014254:	d100      	bne.n	8014258 <memset+0xa>
 8014256:	4770      	bx	lr
 8014258:	f803 1b01 	strb.w	r1, [r3], #1
 801425c:	e7f9      	b.n	8014252 <memset+0x4>

0801425e <strchr>:
 801425e:	b2c9      	uxtb	r1, r1
 8014260:	4603      	mov	r3, r0
 8014262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014266:	b11a      	cbz	r2, 8014270 <strchr+0x12>
 8014268:	428a      	cmp	r2, r1
 801426a:	d1f9      	bne.n	8014260 <strchr+0x2>
 801426c:	4618      	mov	r0, r3
 801426e:	4770      	bx	lr
 8014270:	2900      	cmp	r1, #0
 8014272:	bf18      	it	ne
 8014274:	2300      	movne	r3, #0
 8014276:	e7f9      	b.n	801426c <strchr+0xe>

08014278 <_localeconv_r>:
 8014278:	4800      	ldr	r0, [pc, #0]	; (801427c <_localeconv_r+0x4>)
 801427a:	4770      	bx	lr
 801427c:	20000438 	.word	0x20000438

08014280 <_close_r>:
 8014280:	b538      	push	{r3, r4, r5, lr}
 8014282:	4d06      	ldr	r5, [pc, #24]	; (801429c <_close_r+0x1c>)
 8014284:	2300      	movs	r3, #0
 8014286:	4604      	mov	r4, r0
 8014288:	4608      	mov	r0, r1
 801428a:	602b      	str	r3, [r5, #0]
 801428c:	f7f0 f861 	bl	8004352 <_close>
 8014290:	1c43      	adds	r3, r0, #1
 8014292:	d102      	bne.n	801429a <_close_r+0x1a>
 8014294:	682b      	ldr	r3, [r5, #0]
 8014296:	b103      	cbz	r3, 801429a <_close_r+0x1a>
 8014298:	6023      	str	r3, [r4, #0]
 801429a:	bd38      	pop	{r3, r4, r5, pc}
 801429c:	20002e0c 	.word	0x20002e0c

080142a0 <_lseek_r>:
 80142a0:	b538      	push	{r3, r4, r5, lr}
 80142a2:	4d07      	ldr	r5, [pc, #28]	; (80142c0 <_lseek_r+0x20>)
 80142a4:	4604      	mov	r4, r0
 80142a6:	4608      	mov	r0, r1
 80142a8:	4611      	mov	r1, r2
 80142aa:	2200      	movs	r2, #0
 80142ac:	602a      	str	r2, [r5, #0]
 80142ae:	461a      	mov	r2, r3
 80142b0:	f7f0 f876 	bl	80043a0 <_lseek>
 80142b4:	1c43      	adds	r3, r0, #1
 80142b6:	d102      	bne.n	80142be <_lseek_r+0x1e>
 80142b8:	682b      	ldr	r3, [r5, #0]
 80142ba:	b103      	cbz	r3, 80142be <_lseek_r+0x1e>
 80142bc:	6023      	str	r3, [r4, #0]
 80142be:	bd38      	pop	{r3, r4, r5, pc}
 80142c0:	20002e0c 	.word	0x20002e0c

080142c4 <_read_r>:
 80142c4:	b538      	push	{r3, r4, r5, lr}
 80142c6:	4d07      	ldr	r5, [pc, #28]	; (80142e4 <_read_r+0x20>)
 80142c8:	4604      	mov	r4, r0
 80142ca:	4608      	mov	r0, r1
 80142cc:	4611      	mov	r1, r2
 80142ce:	2200      	movs	r2, #0
 80142d0:	602a      	str	r2, [r5, #0]
 80142d2:	461a      	mov	r2, r3
 80142d4:	f7f0 f804 	bl	80042e0 <_read>
 80142d8:	1c43      	adds	r3, r0, #1
 80142da:	d102      	bne.n	80142e2 <_read_r+0x1e>
 80142dc:	682b      	ldr	r3, [r5, #0]
 80142de:	b103      	cbz	r3, 80142e2 <_read_r+0x1e>
 80142e0:	6023      	str	r3, [r4, #0]
 80142e2:	bd38      	pop	{r3, r4, r5, pc}
 80142e4:	20002e0c 	.word	0x20002e0c

080142e8 <_write_r>:
 80142e8:	b538      	push	{r3, r4, r5, lr}
 80142ea:	4d07      	ldr	r5, [pc, #28]	; (8014308 <_write_r+0x20>)
 80142ec:	4604      	mov	r4, r0
 80142ee:	4608      	mov	r0, r1
 80142f0:	4611      	mov	r1, r2
 80142f2:	2200      	movs	r2, #0
 80142f4:	602a      	str	r2, [r5, #0]
 80142f6:	461a      	mov	r2, r3
 80142f8:	f7f0 f80f 	bl	800431a <_write>
 80142fc:	1c43      	adds	r3, r0, #1
 80142fe:	d102      	bne.n	8014306 <_write_r+0x1e>
 8014300:	682b      	ldr	r3, [r5, #0]
 8014302:	b103      	cbz	r3, 8014306 <_write_r+0x1e>
 8014304:	6023      	str	r3, [r4, #0]
 8014306:	bd38      	pop	{r3, r4, r5, pc}
 8014308:	20002e0c 	.word	0x20002e0c

0801430c <__errno>:
 801430c:	4b01      	ldr	r3, [pc, #4]	; (8014314 <__errno+0x8>)
 801430e:	6818      	ldr	r0, [r3, #0]
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop
 8014314:	20000344 	.word	0x20000344

08014318 <__libc_init_array>:
 8014318:	b570      	push	{r4, r5, r6, lr}
 801431a:	4d0d      	ldr	r5, [pc, #52]	; (8014350 <__libc_init_array+0x38>)
 801431c:	4c0d      	ldr	r4, [pc, #52]	; (8014354 <__libc_init_array+0x3c>)
 801431e:	1b64      	subs	r4, r4, r5
 8014320:	10a4      	asrs	r4, r4, #2
 8014322:	2600      	movs	r6, #0
 8014324:	42a6      	cmp	r6, r4
 8014326:	d109      	bne.n	801433c <__libc_init_array+0x24>
 8014328:	4d0b      	ldr	r5, [pc, #44]	; (8014358 <__libc_init_array+0x40>)
 801432a:	4c0c      	ldr	r4, [pc, #48]	; (801435c <__libc_init_array+0x44>)
 801432c:	f003 f950 	bl	80175d0 <_init>
 8014330:	1b64      	subs	r4, r4, r5
 8014332:	10a4      	asrs	r4, r4, #2
 8014334:	2600      	movs	r6, #0
 8014336:	42a6      	cmp	r6, r4
 8014338:	d105      	bne.n	8014346 <__libc_init_array+0x2e>
 801433a:	bd70      	pop	{r4, r5, r6, pc}
 801433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014340:	4798      	blx	r3
 8014342:	3601      	adds	r6, #1
 8014344:	e7ee      	b.n	8014324 <__libc_init_array+0xc>
 8014346:	f855 3b04 	ldr.w	r3, [r5], #4
 801434a:	4798      	blx	r3
 801434c:	3601      	adds	r6, #1
 801434e:	e7f2      	b.n	8014336 <__libc_init_array+0x1e>
 8014350:	0803b0b8 	.word	0x0803b0b8
 8014354:	0803b0b8 	.word	0x0803b0b8
 8014358:	0803b0b8 	.word	0x0803b0b8
 801435c:	0803b0bc 	.word	0x0803b0bc

08014360 <__retarget_lock_init_recursive>:
 8014360:	4770      	bx	lr

08014362 <__retarget_lock_acquire_recursive>:
 8014362:	4770      	bx	lr

08014364 <__retarget_lock_release_recursive>:
 8014364:	4770      	bx	lr

08014366 <quorem>:
 8014366:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801436a:	6903      	ldr	r3, [r0, #16]
 801436c:	690c      	ldr	r4, [r1, #16]
 801436e:	42a3      	cmp	r3, r4
 8014370:	4607      	mov	r7, r0
 8014372:	db7e      	blt.n	8014472 <quorem+0x10c>
 8014374:	3c01      	subs	r4, #1
 8014376:	f101 0814 	add.w	r8, r1, #20
 801437a:	f100 0514 	add.w	r5, r0, #20
 801437e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014382:	9301      	str	r3, [sp, #4]
 8014384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801438c:	3301      	adds	r3, #1
 801438e:	429a      	cmp	r2, r3
 8014390:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014394:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014398:	fbb2 f6f3 	udiv	r6, r2, r3
 801439c:	d331      	bcc.n	8014402 <quorem+0x9c>
 801439e:	f04f 0e00 	mov.w	lr, #0
 80143a2:	4640      	mov	r0, r8
 80143a4:	46ac      	mov	ip, r5
 80143a6:	46f2      	mov	sl, lr
 80143a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80143ac:	b293      	uxth	r3, r2
 80143ae:	fb06 e303 	mla	r3, r6, r3, lr
 80143b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80143b6:	0c1a      	lsrs	r2, r3, #16
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	ebaa 0303 	sub.w	r3, sl, r3
 80143be:	f8dc a000 	ldr.w	sl, [ip]
 80143c2:	fa13 f38a 	uxtah	r3, r3, sl
 80143c6:	fb06 220e 	mla	r2, r6, lr, r2
 80143ca:	9300      	str	r3, [sp, #0]
 80143cc:	9b00      	ldr	r3, [sp, #0]
 80143ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80143d2:	b292      	uxth	r2, r2
 80143d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80143d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80143e0:	4581      	cmp	r9, r0
 80143e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143e6:	f84c 3b04 	str.w	r3, [ip], #4
 80143ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80143ee:	d2db      	bcs.n	80143a8 <quorem+0x42>
 80143f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80143f4:	b92b      	cbnz	r3, 8014402 <quorem+0x9c>
 80143f6:	9b01      	ldr	r3, [sp, #4]
 80143f8:	3b04      	subs	r3, #4
 80143fa:	429d      	cmp	r5, r3
 80143fc:	461a      	mov	r2, r3
 80143fe:	d32c      	bcc.n	801445a <quorem+0xf4>
 8014400:	613c      	str	r4, [r7, #16]
 8014402:	4638      	mov	r0, r7
 8014404:	f001 f9a6 	bl	8015754 <__mcmp>
 8014408:	2800      	cmp	r0, #0
 801440a:	db22      	blt.n	8014452 <quorem+0xec>
 801440c:	3601      	adds	r6, #1
 801440e:	4629      	mov	r1, r5
 8014410:	2000      	movs	r0, #0
 8014412:	f858 2b04 	ldr.w	r2, [r8], #4
 8014416:	f8d1 c000 	ldr.w	ip, [r1]
 801441a:	b293      	uxth	r3, r2
 801441c:	1ac3      	subs	r3, r0, r3
 801441e:	0c12      	lsrs	r2, r2, #16
 8014420:	fa13 f38c 	uxtah	r3, r3, ip
 8014424:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801442c:	b29b      	uxth	r3, r3
 801442e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014432:	45c1      	cmp	r9, r8
 8014434:	f841 3b04 	str.w	r3, [r1], #4
 8014438:	ea4f 4022 	mov.w	r0, r2, asr #16
 801443c:	d2e9      	bcs.n	8014412 <quorem+0xac>
 801443e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014446:	b922      	cbnz	r2, 8014452 <quorem+0xec>
 8014448:	3b04      	subs	r3, #4
 801444a:	429d      	cmp	r5, r3
 801444c:	461a      	mov	r2, r3
 801444e:	d30a      	bcc.n	8014466 <quorem+0x100>
 8014450:	613c      	str	r4, [r7, #16]
 8014452:	4630      	mov	r0, r6
 8014454:	b003      	add	sp, #12
 8014456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445a:	6812      	ldr	r2, [r2, #0]
 801445c:	3b04      	subs	r3, #4
 801445e:	2a00      	cmp	r2, #0
 8014460:	d1ce      	bne.n	8014400 <quorem+0x9a>
 8014462:	3c01      	subs	r4, #1
 8014464:	e7c9      	b.n	80143fa <quorem+0x94>
 8014466:	6812      	ldr	r2, [r2, #0]
 8014468:	3b04      	subs	r3, #4
 801446a:	2a00      	cmp	r2, #0
 801446c:	d1f0      	bne.n	8014450 <quorem+0xea>
 801446e:	3c01      	subs	r4, #1
 8014470:	e7eb      	b.n	801444a <quorem+0xe4>
 8014472:	2000      	movs	r0, #0
 8014474:	e7ee      	b.n	8014454 <quorem+0xee>
	...

08014478 <_dtoa_r>:
 8014478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447c:	ed2d 8b04 	vpush	{d8-d9}
 8014480:	69c5      	ldr	r5, [r0, #28]
 8014482:	b093      	sub	sp, #76	; 0x4c
 8014484:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014488:	ec57 6b10 	vmov	r6, r7, d0
 801448c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014490:	9107      	str	r1, [sp, #28]
 8014492:	4604      	mov	r4, r0
 8014494:	920a      	str	r2, [sp, #40]	; 0x28
 8014496:	930d      	str	r3, [sp, #52]	; 0x34
 8014498:	b975      	cbnz	r5, 80144b8 <_dtoa_r+0x40>
 801449a:	2010      	movs	r0, #16
 801449c:	f000 fe2a 	bl	80150f4 <malloc>
 80144a0:	4602      	mov	r2, r0
 80144a2:	61e0      	str	r0, [r4, #28]
 80144a4:	b920      	cbnz	r0, 80144b0 <_dtoa_r+0x38>
 80144a6:	4bae      	ldr	r3, [pc, #696]	; (8014760 <_dtoa_r+0x2e8>)
 80144a8:	21ef      	movs	r1, #239	; 0xef
 80144aa:	48ae      	ldr	r0, [pc, #696]	; (8014764 <_dtoa_r+0x2ec>)
 80144ac:	f001 fc90 	bl	8015dd0 <__assert_func>
 80144b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80144b4:	6005      	str	r5, [r0, #0]
 80144b6:	60c5      	str	r5, [r0, #12]
 80144b8:	69e3      	ldr	r3, [r4, #28]
 80144ba:	6819      	ldr	r1, [r3, #0]
 80144bc:	b151      	cbz	r1, 80144d4 <_dtoa_r+0x5c>
 80144be:	685a      	ldr	r2, [r3, #4]
 80144c0:	604a      	str	r2, [r1, #4]
 80144c2:	2301      	movs	r3, #1
 80144c4:	4093      	lsls	r3, r2
 80144c6:	608b      	str	r3, [r1, #8]
 80144c8:	4620      	mov	r0, r4
 80144ca:	f000 ff07 	bl	80152dc <_Bfree>
 80144ce:	69e3      	ldr	r3, [r4, #28]
 80144d0:	2200      	movs	r2, #0
 80144d2:	601a      	str	r2, [r3, #0]
 80144d4:	1e3b      	subs	r3, r7, #0
 80144d6:	bfbb      	ittet	lt
 80144d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80144dc:	9303      	strlt	r3, [sp, #12]
 80144de:	2300      	movge	r3, #0
 80144e0:	2201      	movlt	r2, #1
 80144e2:	bfac      	ite	ge
 80144e4:	f8c8 3000 	strge.w	r3, [r8]
 80144e8:	f8c8 2000 	strlt.w	r2, [r8]
 80144ec:	4b9e      	ldr	r3, [pc, #632]	; (8014768 <_dtoa_r+0x2f0>)
 80144ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80144f2:	ea33 0308 	bics.w	r3, r3, r8
 80144f6:	d11b      	bne.n	8014530 <_dtoa_r+0xb8>
 80144f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014504:	4333      	orrs	r3, r6
 8014506:	f000 8593 	beq.w	8015030 <_dtoa_r+0xbb8>
 801450a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801450c:	b963      	cbnz	r3, 8014528 <_dtoa_r+0xb0>
 801450e:	4b97      	ldr	r3, [pc, #604]	; (801476c <_dtoa_r+0x2f4>)
 8014510:	e027      	b.n	8014562 <_dtoa_r+0xea>
 8014512:	4b97      	ldr	r3, [pc, #604]	; (8014770 <_dtoa_r+0x2f8>)
 8014514:	9300      	str	r3, [sp, #0]
 8014516:	3308      	adds	r3, #8
 8014518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	9800      	ldr	r0, [sp, #0]
 801451e:	b013      	add	sp, #76	; 0x4c
 8014520:	ecbd 8b04 	vpop	{d8-d9}
 8014524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014528:	4b90      	ldr	r3, [pc, #576]	; (801476c <_dtoa_r+0x2f4>)
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	3303      	adds	r3, #3
 801452e:	e7f3      	b.n	8014518 <_dtoa_r+0xa0>
 8014530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014534:	2200      	movs	r2, #0
 8014536:	ec51 0b17 	vmov	r0, r1, d7
 801453a:	eeb0 8a47 	vmov.f32	s16, s14
 801453e:	eef0 8a67 	vmov.f32	s17, s15
 8014542:	2300      	movs	r3, #0
 8014544:	f7ec fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8014548:	4681      	mov	r9, r0
 801454a:	b160      	cbz	r0, 8014566 <_dtoa_r+0xee>
 801454c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801454e:	2301      	movs	r3, #1
 8014550:	6013      	str	r3, [r2, #0]
 8014552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014554:	2b00      	cmp	r3, #0
 8014556:	f000 8568 	beq.w	801502a <_dtoa_r+0xbb2>
 801455a:	4b86      	ldr	r3, [pc, #536]	; (8014774 <_dtoa_r+0x2fc>)
 801455c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801455e:	6013      	str	r3, [r2, #0]
 8014560:	3b01      	subs	r3, #1
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	e7da      	b.n	801451c <_dtoa_r+0xa4>
 8014566:	aa10      	add	r2, sp, #64	; 0x40
 8014568:	a911      	add	r1, sp, #68	; 0x44
 801456a:	4620      	mov	r0, r4
 801456c:	eeb0 0a48 	vmov.f32	s0, s16
 8014570:	eef0 0a68 	vmov.f32	s1, s17
 8014574:	f001 f994 	bl	80158a0 <__d2b>
 8014578:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801457c:	4682      	mov	sl, r0
 801457e:	2d00      	cmp	r5, #0
 8014580:	d07f      	beq.n	8014682 <_dtoa_r+0x20a>
 8014582:	ee18 3a90 	vmov	r3, s17
 8014586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801458a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801458e:	ec51 0b18 	vmov	r0, r1, d8
 8014592:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801459a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801459e:	4619      	mov	r1, r3
 80145a0:	2200      	movs	r2, #0
 80145a2:	4b75      	ldr	r3, [pc, #468]	; (8014778 <_dtoa_r+0x300>)
 80145a4:	f7eb fe70 	bl	8000288 <__aeabi_dsub>
 80145a8:	a367      	add	r3, pc, #412	; (adr r3, 8014748 <_dtoa_r+0x2d0>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7ec f823 	bl	80005f8 <__aeabi_dmul>
 80145b2:	a367      	add	r3, pc, #412	; (adr r3, 8014750 <_dtoa_r+0x2d8>)
 80145b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b8:	f7eb fe68 	bl	800028c <__adddf3>
 80145bc:	4606      	mov	r6, r0
 80145be:	4628      	mov	r0, r5
 80145c0:	460f      	mov	r7, r1
 80145c2:	f7eb ffaf 	bl	8000524 <__aeabi_i2d>
 80145c6:	a364      	add	r3, pc, #400	; (adr r3, 8014758 <_dtoa_r+0x2e0>)
 80145c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145cc:	f7ec f814 	bl	80005f8 <__aeabi_dmul>
 80145d0:	4602      	mov	r2, r0
 80145d2:	460b      	mov	r3, r1
 80145d4:	4630      	mov	r0, r6
 80145d6:	4639      	mov	r1, r7
 80145d8:	f7eb fe58 	bl	800028c <__adddf3>
 80145dc:	4606      	mov	r6, r0
 80145de:	460f      	mov	r7, r1
 80145e0:	f7ec faba 	bl	8000b58 <__aeabi_d2iz>
 80145e4:	2200      	movs	r2, #0
 80145e6:	4683      	mov	fp, r0
 80145e8:	2300      	movs	r3, #0
 80145ea:	4630      	mov	r0, r6
 80145ec:	4639      	mov	r1, r7
 80145ee:	f7ec fa75 	bl	8000adc <__aeabi_dcmplt>
 80145f2:	b148      	cbz	r0, 8014608 <_dtoa_r+0x190>
 80145f4:	4658      	mov	r0, fp
 80145f6:	f7eb ff95 	bl	8000524 <__aeabi_i2d>
 80145fa:	4632      	mov	r2, r6
 80145fc:	463b      	mov	r3, r7
 80145fe:	f7ec fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8014602:	b908      	cbnz	r0, 8014608 <_dtoa_r+0x190>
 8014604:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014608:	f1bb 0f16 	cmp.w	fp, #22
 801460c:	d857      	bhi.n	80146be <_dtoa_r+0x246>
 801460e:	4b5b      	ldr	r3, [pc, #364]	; (801477c <_dtoa_r+0x304>)
 8014610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	ec51 0b18 	vmov	r0, r1, d8
 801461c:	f7ec fa5e 	bl	8000adc <__aeabi_dcmplt>
 8014620:	2800      	cmp	r0, #0
 8014622:	d04e      	beq.n	80146c2 <_dtoa_r+0x24a>
 8014624:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014628:	2300      	movs	r3, #0
 801462a:	930c      	str	r3, [sp, #48]	; 0x30
 801462c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801462e:	1b5b      	subs	r3, r3, r5
 8014630:	1e5a      	subs	r2, r3, #1
 8014632:	bf45      	ittet	mi
 8014634:	f1c3 0301 	rsbmi	r3, r3, #1
 8014638:	9305      	strmi	r3, [sp, #20]
 801463a:	2300      	movpl	r3, #0
 801463c:	2300      	movmi	r3, #0
 801463e:	9206      	str	r2, [sp, #24]
 8014640:	bf54      	ite	pl
 8014642:	9305      	strpl	r3, [sp, #20]
 8014644:	9306      	strmi	r3, [sp, #24]
 8014646:	f1bb 0f00 	cmp.w	fp, #0
 801464a:	db3c      	blt.n	80146c6 <_dtoa_r+0x24e>
 801464c:	9b06      	ldr	r3, [sp, #24]
 801464e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014652:	445b      	add	r3, fp
 8014654:	9306      	str	r3, [sp, #24]
 8014656:	2300      	movs	r3, #0
 8014658:	9308      	str	r3, [sp, #32]
 801465a:	9b07      	ldr	r3, [sp, #28]
 801465c:	2b09      	cmp	r3, #9
 801465e:	d868      	bhi.n	8014732 <_dtoa_r+0x2ba>
 8014660:	2b05      	cmp	r3, #5
 8014662:	bfc4      	itt	gt
 8014664:	3b04      	subgt	r3, #4
 8014666:	9307      	strgt	r3, [sp, #28]
 8014668:	9b07      	ldr	r3, [sp, #28]
 801466a:	f1a3 0302 	sub.w	r3, r3, #2
 801466e:	bfcc      	ite	gt
 8014670:	2500      	movgt	r5, #0
 8014672:	2501      	movle	r5, #1
 8014674:	2b03      	cmp	r3, #3
 8014676:	f200 8085 	bhi.w	8014784 <_dtoa_r+0x30c>
 801467a:	e8df f003 	tbb	[pc, r3]
 801467e:	3b2e      	.short	0x3b2e
 8014680:	5839      	.short	0x5839
 8014682:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014686:	441d      	add	r5, r3
 8014688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801468c:	2b20      	cmp	r3, #32
 801468e:	bfc1      	itttt	gt
 8014690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014694:	fa08 f803 	lslgt.w	r8, r8, r3
 8014698:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801469c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80146a0:	bfd6      	itet	le
 80146a2:	f1c3 0320 	rsble	r3, r3, #32
 80146a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80146aa:	fa06 f003 	lslle.w	r0, r6, r3
 80146ae:	f7eb ff29 	bl	8000504 <__aeabi_ui2d>
 80146b2:	2201      	movs	r2, #1
 80146b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80146b8:	3d01      	subs	r5, #1
 80146ba:	920e      	str	r2, [sp, #56]	; 0x38
 80146bc:	e76f      	b.n	801459e <_dtoa_r+0x126>
 80146be:	2301      	movs	r3, #1
 80146c0:	e7b3      	b.n	801462a <_dtoa_r+0x1b2>
 80146c2:	900c      	str	r0, [sp, #48]	; 0x30
 80146c4:	e7b2      	b.n	801462c <_dtoa_r+0x1b4>
 80146c6:	9b05      	ldr	r3, [sp, #20]
 80146c8:	eba3 030b 	sub.w	r3, r3, fp
 80146cc:	9305      	str	r3, [sp, #20]
 80146ce:	f1cb 0300 	rsb	r3, fp, #0
 80146d2:	9308      	str	r3, [sp, #32]
 80146d4:	2300      	movs	r3, #0
 80146d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80146d8:	e7bf      	b.n	801465a <_dtoa_r+0x1e2>
 80146da:	2300      	movs	r3, #0
 80146dc:	9309      	str	r3, [sp, #36]	; 0x24
 80146de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	dc52      	bgt.n	801478a <_dtoa_r+0x312>
 80146e4:	2301      	movs	r3, #1
 80146e6:	9301      	str	r3, [sp, #4]
 80146e8:	9304      	str	r3, [sp, #16]
 80146ea:	461a      	mov	r2, r3
 80146ec:	920a      	str	r2, [sp, #40]	; 0x28
 80146ee:	e00b      	b.n	8014708 <_dtoa_r+0x290>
 80146f0:	2301      	movs	r3, #1
 80146f2:	e7f3      	b.n	80146dc <_dtoa_r+0x264>
 80146f4:	2300      	movs	r3, #0
 80146f6:	9309      	str	r3, [sp, #36]	; 0x24
 80146f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146fa:	445b      	add	r3, fp
 80146fc:	9301      	str	r3, [sp, #4]
 80146fe:	3301      	adds	r3, #1
 8014700:	2b01      	cmp	r3, #1
 8014702:	9304      	str	r3, [sp, #16]
 8014704:	bfb8      	it	lt
 8014706:	2301      	movlt	r3, #1
 8014708:	69e0      	ldr	r0, [r4, #28]
 801470a:	2100      	movs	r1, #0
 801470c:	2204      	movs	r2, #4
 801470e:	f102 0614 	add.w	r6, r2, #20
 8014712:	429e      	cmp	r6, r3
 8014714:	d93d      	bls.n	8014792 <_dtoa_r+0x31a>
 8014716:	6041      	str	r1, [r0, #4]
 8014718:	4620      	mov	r0, r4
 801471a:	f000 fd9f 	bl	801525c <_Balloc>
 801471e:	9000      	str	r0, [sp, #0]
 8014720:	2800      	cmp	r0, #0
 8014722:	d139      	bne.n	8014798 <_dtoa_r+0x320>
 8014724:	4b16      	ldr	r3, [pc, #88]	; (8014780 <_dtoa_r+0x308>)
 8014726:	4602      	mov	r2, r0
 8014728:	f240 11af 	movw	r1, #431	; 0x1af
 801472c:	e6bd      	b.n	80144aa <_dtoa_r+0x32>
 801472e:	2301      	movs	r3, #1
 8014730:	e7e1      	b.n	80146f6 <_dtoa_r+0x27e>
 8014732:	2501      	movs	r5, #1
 8014734:	2300      	movs	r3, #0
 8014736:	9307      	str	r3, [sp, #28]
 8014738:	9509      	str	r5, [sp, #36]	; 0x24
 801473a:	f04f 33ff 	mov.w	r3, #4294967295
 801473e:	9301      	str	r3, [sp, #4]
 8014740:	9304      	str	r3, [sp, #16]
 8014742:	2200      	movs	r2, #0
 8014744:	2312      	movs	r3, #18
 8014746:	e7d1      	b.n	80146ec <_dtoa_r+0x274>
 8014748:	636f4361 	.word	0x636f4361
 801474c:	3fd287a7 	.word	0x3fd287a7
 8014750:	8b60c8b3 	.word	0x8b60c8b3
 8014754:	3fc68a28 	.word	0x3fc68a28
 8014758:	509f79fb 	.word	0x509f79fb
 801475c:	3fd34413 	.word	0x3fd34413
 8014760:	0803ad45 	.word	0x0803ad45
 8014764:	0803ad5c 	.word	0x0803ad5c
 8014768:	7ff00000 	.word	0x7ff00000
 801476c:	0803ad41 	.word	0x0803ad41
 8014770:	0803ad38 	.word	0x0803ad38
 8014774:	0803ad15 	.word	0x0803ad15
 8014778:	3ff80000 	.word	0x3ff80000
 801477c:	0803ae48 	.word	0x0803ae48
 8014780:	0803adb4 	.word	0x0803adb4
 8014784:	2301      	movs	r3, #1
 8014786:	9309      	str	r3, [sp, #36]	; 0x24
 8014788:	e7d7      	b.n	801473a <_dtoa_r+0x2c2>
 801478a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	9304      	str	r3, [sp, #16]
 8014790:	e7ba      	b.n	8014708 <_dtoa_r+0x290>
 8014792:	3101      	adds	r1, #1
 8014794:	0052      	lsls	r2, r2, #1
 8014796:	e7ba      	b.n	801470e <_dtoa_r+0x296>
 8014798:	69e3      	ldr	r3, [r4, #28]
 801479a:	9a00      	ldr	r2, [sp, #0]
 801479c:	601a      	str	r2, [r3, #0]
 801479e:	9b04      	ldr	r3, [sp, #16]
 80147a0:	2b0e      	cmp	r3, #14
 80147a2:	f200 80a8 	bhi.w	80148f6 <_dtoa_r+0x47e>
 80147a6:	2d00      	cmp	r5, #0
 80147a8:	f000 80a5 	beq.w	80148f6 <_dtoa_r+0x47e>
 80147ac:	f1bb 0f00 	cmp.w	fp, #0
 80147b0:	dd38      	ble.n	8014824 <_dtoa_r+0x3ac>
 80147b2:	4bc0      	ldr	r3, [pc, #768]	; (8014ab4 <_dtoa_r+0x63c>)
 80147b4:	f00b 020f 	and.w	r2, fp, #15
 80147b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80147c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80147c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80147c8:	d019      	beq.n	80147fe <_dtoa_r+0x386>
 80147ca:	4bbb      	ldr	r3, [pc, #748]	; (8014ab8 <_dtoa_r+0x640>)
 80147cc:	ec51 0b18 	vmov	r0, r1, d8
 80147d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80147d4:	f7ec f83a 	bl	800084c <__aeabi_ddiv>
 80147d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147dc:	f008 080f 	and.w	r8, r8, #15
 80147e0:	2503      	movs	r5, #3
 80147e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014ab8 <_dtoa_r+0x640>
 80147e6:	f1b8 0f00 	cmp.w	r8, #0
 80147ea:	d10a      	bne.n	8014802 <_dtoa_r+0x38a>
 80147ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147f0:	4632      	mov	r2, r6
 80147f2:	463b      	mov	r3, r7
 80147f4:	f7ec f82a 	bl	800084c <__aeabi_ddiv>
 80147f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147fc:	e02b      	b.n	8014856 <_dtoa_r+0x3de>
 80147fe:	2502      	movs	r5, #2
 8014800:	e7ef      	b.n	80147e2 <_dtoa_r+0x36a>
 8014802:	f018 0f01 	tst.w	r8, #1
 8014806:	d008      	beq.n	801481a <_dtoa_r+0x3a2>
 8014808:	4630      	mov	r0, r6
 801480a:	4639      	mov	r1, r7
 801480c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014810:	f7eb fef2 	bl	80005f8 <__aeabi_dmul>
 8014814:	3501      	adds	r5, #1
 8014816:	4606      	mov	r6, r0
 8014818:	460f      	mov	r7, r1
 801481a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801481e:	f109 0908 	add.w	r9, r9, #8
 8014822:	e7e0      	b.n	80147e6 <_dtoa_r+0x36e>
 8014824:	f000 809f 	beq.w	8014966 <_dtoa_r+0x4ee>
 8014828:	f1cb 0600 	rsb	r6, fp, #0
 801482c:	4ba1      	ldr	r3, [pc, #644]	; (8014ab4 <_dtoa_r+0x63c>)
 801482e:	4fa2      	ldr	r7, [pc, #648]	; (8014ab8 <_dtoa_r+0x640>)
 8014830:	f006 020f 	and.w	r2, r6, #15
 8014834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483c:	ec51 0b18 	vmov	r0, r1, d8
 8014840:	f7eb feda 	bl	80005f8 <__aeabi_dmul>
 8014844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014848:	1136      	asrs	r6, r6, #4
 801484a:	2300      	movs	r3, #0
 801484c:	2502      	movs	r5, #2
 801484e:	2e00      	cmp	r6, #0
 8014850:	d17e      	bne.n	8014950 <_dtoa_r+0x4d8>
 8014852:	2b00      	cmp	r3, #0
 8014854:	d1d0      	bne.n	80147f8 <_dtoa_r+0x380>
 8014856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014858:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801485c:	2b00      	cmp	r3, #0
 801485e:	f000 8084 	beq.w	801496a <_dtoa_r+0x4f2>
 8014862:	4b96      	ldr	r3, [pc, #600]	; (8014abc <_dtoa_r+0x644>)
 8014864:	2200      	movs	r2, #0
 8014866:	4640      	mov	r0, r8
 8014868:	4649      	mov	r1, r9
 801486a:	f7ec f937 	bl	8000adc <__aeabi_dcmplt>
 801486e:	2800      	cmp	r0, #0
 8014870:	d07b      	beq.n	801496a <_dtoa_r+0x4f2>
 8014872:	9b04      	ldr	r3, [sp, #16]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d078      	beq.n	801496a <_dtoa_r+0x4f2>
 8014878:	9b01      	ldr	r3, [sp, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	dd39      	ble.n	80148f2 <_dtoa_r+0x47a>
 801487e:	4b90      	ldr	r3, [pc, #576]	; (8014ac0 <_dtoa_r+0x648>)
 8014880:	2200      	movs	r2, #0
 8014882:	4640      	mov	r0, r8
 8014884:	4649      	mov	r1, r9
 8014886:	f7eb feb7 	bl	80005f8 <__aeabi_dmul>
 801488a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801488e:	9e01      	ldr	r6, [sp, #4]
 8014890:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014894:	3501      	adds	r5, #1
 8014896:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801489a:	4628      	mov	r0, r5
 801489c:	f7eb fe42 	bl	8000524 <__aeabi_i2d>
 80148a0:	4642      	mov	r2, r8
 80148a2:	464b      	mov	r3, r9
 80148a4:	f7eb fea8 	bl	80005f8 <__aeabi_dmul>
 80148a8:	4b86      	ldr	r3, [pc, #536]	; (8014ac4 <_dtoa_r+0x64c>)
 80148aa:	2200      	movs	r2, #0
 80148ac:	f7eb fcee 	bl	800028c <__adddf3>
 80148b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80148b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80148b8:	9303      	str	r3, [sp, #12]
 80148ba:	2e00      	cmp	r6, #0
 80148bc:	d158      	bne.n	8014970 <_dtoa_r+0x4f8>
 80148be:	4b82      	ldr	r3, [pc, #520]	; (8014ac8 <_dtoa_r+0x650>)
 80148c0:	2200      	movs	r2, #0
 80148c2:	4640      	mov	r0, r8
 80148c4:	4649      	mov	r1, r9
 80148c6:	f7eb fcdf 	bl	8000288 <__aeabi_dsub>
 80148ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148ce:	4680      	mov	r8, r0
 80148d0:	4689      	mov	r9, r1
 80148d2:	f7ec f921 	bl	8000b18 <__aeabi_dcmpgt>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	f040 8296 	bne.w	8014e08 <_dtoa_r+0x990>
 80148dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80148e0:	4640      	mov	r0, r8
 80148e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80148e6:	4649      	mov	r1, r9
 80148e8:	f7ec f8f8 	bl	8000adc <__aeabi_dcmplt>
 80148ec:	2800      	cmp	r0, #0
 80148ee:	f040 8289 	bne.w	8014e04 <_dtoa_r+0x98c>
 80148f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80148f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f2c0 814e 	blt.w	8014b9a <_dtoa_r+0x722>
 80148fe:	f1bb 0f0e 	cmp.w	fp, #14
 8014902:	f300 814a 	bgt.w	8014b9a <_dtoa_r+0x722>
 8014906:	4b6b      	ldr	r3, [pc, #428]	; (8014ab4 <_dtoa_r+0x63c>)
 8014908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801490c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014912:	2b00      	cmp	r3, #0
 8014914:	f280 80dc 	bge.w	8014ad0 <_dtoa_r+0x658>
 8014918:	9b04      	ldr	r3, [sp, #16]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f300 80d8 	bgt.w	8014ad0 <_dtoa_r+0x658>
 8014920:	f040 826f 	bne.w	8014e02 <_dtoa_r+0x98a>
 8014924:	4b68      	ldr	r3, [pc, #416]	; (8014ac8 <_dtoa_r+0x650>)
 8014926:	2200      	movs	r2, #0
 8014928:	4640      	mov	r0, r8
 801492a:	4649      	mov	r1, r9
 801492c:	f7eb fe64 	bl	80005f8 <__aeabi_dmul>
 8014930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014934:	f7ec f8e6 	bl	8000b04 <__aeabi_dcmpge>
 8014938:	9e04      	ldr	r6, [sp, #16]
 801493a:	4637      	mov	r7, r6
 801493c:	2800      	cmp	r0, #0
 801493e:	f040 8245 	bne.w	8014dcc <_dtoa_r+0x954>
 8014942:	9d00      	ldr	r5, [sp, #0]
 8014944:	2331      	movs	r3, #49	; 0x31
 8014946:	f805 3b01 	strb.w	r3, [r5], #1
 801494a:	f10b 0b01 	add.w	fp, fp, #1
 801494e:	e241      	b.n	8014dd4 <_dtoa_r+0x95c>
 8014950:	07f2      	lsls	r2, r6, #31
 8014952:	d505      	bpl.n	8014960 <_dtoa_r+0x4e8>
 8014954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014958:	f7eb fe4e 	bl	80005f8 <__aeabi_dmul>
 801495c:	3501      	adds	r5, #1
 801495e:	2301      	movs	r3, #1
 8014960:	1076      	asrs	r6, r6, #1
 8014962:	3708      	adds	r7, #8
 8014964:	e773      	b.n	801484e <_dtoa_r+0x3d6>
 8014966:	2502      	movs	r5, #2
 8014968:	e775      	b.n	8014856 <_dtoa_r+0x3de>
 801496a:	9e04      	ldr	r6, [sp, #16]
 801496c:	465f      	mov	r7, fp
 801496e:	e792      	b.n	8014896 <_dtoa_r+0x41e>
 8014970:	9900      	ldr	r1, [sp, #0]
 8014972:	4b50      	ldr	r3, [pc, #320]	; (8014ab4 <_dtoa_r+0x63c>)
 8014974:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014978:	4431      	add	r1, r6
 801497a:	9102      	str	r1, [sp, #8]
 801497c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801497e:	eeb0 9a47 	vmov.f32	s18, s14
 8014982:	eef0 9a67 	vmov.f32	s19, s15
 8014986:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801498a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801498e:	2900      	cmp	r1, #0
 8014990:	d044      	beq.n	8014a1c <_dtoa_r+0x5a4>
 8014992:	494e      	ldr	r1, [pc, #312]	; (8014acc <_dtoa_r+0x654>)
 8014994:	2000      	movs	r0, #0
 8014996:	f7eb ff59 	bl	800084c <__aeabi_ddiv>
 801499a:	ec53 2b19 	vmov	r2, r3, d9
 801499e:	f7eb fc73 	bl	8000288 <__aeabi_dsub>
 80149a2:	9d00      	ldr	r5, [sp, #0]
 80149a4:	ec41 0b19 	vmov	d9, r0, r1
 80149a8:	4649      	mov	r1, r9
 80149aa:	4640      	mov	r0, r8
 80149ac:	f7ec f8d4 	bl	8000b58 <__aeabi_d2iz>
 80149b0:	4606      	mov	r6, r0
 80149b2:	f7eb fdb7 	bl	8000524 <__aeabi_i2d>
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	4640      	mov	r0, r8
 80149bc:	4649      	mov	r1, r9
 80149be:	f7eb fc63 	bl	8000288 <__aeabi_dsub>
 80149c2:	3630      	adds	r6, #48	; 0x30
 80149c4:	f805 6b01 	strb.w	r6, [r5], #1
 80149c8:	ec53 2b19 	vmov	r2, r3, d9
 80149cc:	4680      	mov	r8, r0
 80149ce:	4689      	mov	r9, r1
 80149d0:	f7ec f884 	bl	8000adc <__aeabi_dcmplt>
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d164      	bne.n	8014aa2 <_dtoa_r+0x62a>
 80149d8:	4642      	mov	r2, r8
 80149da:	464b      	mov	r3, r9
 80149dc:	4937      	ldr	r1, [pc, #220]	; (8014abc <_dtoa_r+0x644>)
 80149de:	2000      	movs	r0, #0
 80149e0:	f7eb fc52 	bl	8000288 <__aeabi_dsub>
 80149e4:	ec53 2b19 	vmov	r2, r3, d9
 80149e8:	f7ec f878 	bl	8000adc <__aeabi_dcmplt>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	f040 80b6 	bne.w	8014b5e <_dtoa_r+0x6e6>
 80149f2:	9b02      	ldr	r3, [sp, #8]
 80149f4:	429d      	cmp	r5, r3
 80149f6:	f43f af7c 	beq.w	80148f2 <_dtoa_r+0x47a>
 80149fa:	4b31      	ldr	r3, [pc, #196]	; (8014ac0 <_dtoa_r+0x648>)
 80149fc:	ec51 0b19 	vmov	r0, r1, d9
 8014a00:	2200      	movs	r2, #0
 8014a02:	f7eb fdf9 	bl	80005f8 <__aeabi_dmul>
 8014a06:	4b2e      	ldr	r3, [pc, #184]	; (8014ac0 <_dtoa_r+0x648>)
 8014a08:	ec41 0b19 	vmov	d9, r0, r1
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	4640      	mov	r0, r8
 8014a10:	4649      	mov	r1, r9
 8014a12:	f7eb fdf1 	bl	80005f8 <__aeabi_dmul>
 8014a16:	4680      	mov	r8, r0
 8014a18:	4689      	mov	r9, r1
 8014a1a:	e7c5      	b.n	80149a8 <_dtoa_r+0x530>
 8014a1c:	ec51 0b17 	vmov	r0, r1, d7
 8014a20:	f7eb fdea 	bl	80005f8 <__aeabi_dmul>
 8014a24:	9b02      	ldr	r3, [sp, #8]
 8014a26:	9d00      	ldr	r5, [sp, #0]
 8014a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a2a:	ec41 0b19 	vmov	d9, r0, r1
 8014a2e:	4649      	mov	r1, r9
 8014a30:	4640      	mov	r0, r8
 8014a32:	f7ec f891 	bl	8000b58 <__aeabi_d2iz>
 8014a36:	4606      	mov	r6, r0
 8014a38:	f7eb fd74 	bl	8000524 <__aeabi_i2d>
 8014a3c:	3630      	adds	r6, #48	; 0x30
 8014a3e:	4602      	mov	r2, r0
 8014a40:	460b      	mov	r3, r1
 8014a42:	4640      	mov	r0, r8
 8014a44:	4649      	mov	r1, r9
 8014a46:	f7eb fc1f 	bl	8000288 <__aeabi_dsub>
 8014a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8014a4e:	9b02      	ldr	r3, [sp, #8]
 8014a50:	429d      	cmp	r5, r3
 8014a52:	4680      	mov	r8, r0
 8014a54:	4689      	mov	r9, r1
 8014a56:	f04f 0200 	mov.w	r2, #0
 8014a5a:	d124      	bne.n	8014aa6 <_dtoa_r+0x62e>
 8014a5c:	4b1b      	ldr	r3, [pc, #108]	; (8014acc <_dtoa_r+0x654>)
 8014a5e:	ec51 0b19 	vmov	r0, r1, d9
 8014a62:	f7eb fc13 	bl	800028c <__adddf3>
 8014a66:	4602      	mov	r2, r0
 8014a68:	460b      	mov	r3, r1
 8014a6a:	4640      	mov	r0, r8
 8014a6c:	4649      	mov	r1, r9
 8014a6e:	f7ec f853 	bl	8000b18 <__aeabi_dcmpgt>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	d173      	bne.n	8014b5e <_dtoa_r+0x6e6>
 8014a76:	ec53 2b19 	vmov	r2, r3, d9
 8014a7a:	4914      	ldr	r1, [pc, #80]	; (8014acc <_dtoa_r+0x654>)
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	f7eb fc03 	bl	8000288 <__aeabi_dsub>
 8014a82:	4602      	mov	r2, r0
 8014a84:	460b      	mov	r3, r1
 8014a86:	4640      	mov	r0, r8
 8014a88:	4649      	mov	r1, r9
 8014a8a:	f7ec f827 	bl	8000adc <__aeabi_dcmplt>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f43f af2f 	beq.w	80148f2 <_dtoa_r+0x47a>
 8014a94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014a96:	1e6b      	subs	r3, r5, #1
 8014a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014a9e:	2b30      	cmp	r3, #48	; 0x30
 8014aa0:	d0f8      	beq.n	8014a94 <_dtoa_r+0x61c>
 8014aa2:	46bb      	mov	fp, r7
 8014aa4:	e04a      	b.n	8014b3c <_dtoa_r+0x6c4>
 8014aa6:	4b06      	ldr	r3, [pc, #24]	; (8014ac0 <_dtoa_r+0x648>)
 8014aa8:	f7eb fda6 	bl	80005f8 <__aeabi_dmul>
 8014aac:	4680      	mov	r8, r0
 8014aae:	4689      	mov	r9, r1
 8014ab0:	e7bd      	b.n	8014a2e <_dtoa_r+0x5b6>
 8014ab2:	bf00      	nop
 8014ab4:	0803ae48 	.word	0x0803ae48
 8014ab8:	0803ae20 	.word	0x0803ae20
 8014abc:	3ff00000 	.word	0x3ff00000
 8014ac0:	40240000 	.word	0x40240000
 8014ac4:	401c0000 	.word	0x401c0000
 8014ac8:	40140000 	.word	0x40140000
 8014acc:	3fe00000 	.word	0x3fe00000
 8014ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014ad4:	9d00      	ldr	r5, [sp, #0]
 8014ad6:	4642      	mov	r2, r8
 8014ad8:	464b      	mov	r3, r9
 8014ada:	4630      	mov	r0, r6
 8014adc:	4639      	mov	r1, r7
 8014ade:	f7eb feb5 	bl	800084c <__aeabi_ddiv>
 8014ae2:	f7ec f839 	bl	8000b58 <__aeabi_d2iz>
 8014ae6:	9001      	str	r0, [sp, #4]
 8014ae8:	f7eb fd1c 	bl	8000524 <__aeabi_i2d>
 8014aec:	4642      	mov	r2, r8
 8014aee:	464b      	mov	r3, r9
 8014af0:	f7eb fd82 	bl	80005f8 <__aeabi_dmul>
 8014af4:	4602      	mov	r2, r0
 8014af6:	460b      	mov	r3, r1
 8014af8:	4630      	mov	r0, r6
 8014afa:	4639      	mov	r1, r7
 8014afc:	f7eb fbc4 	bl	8000288 <__aeabi_dsub>
 8014b00:	9e01      	ldr	r6, [sp, #4]
 8014b02:	9f04      	ldr	r7, [sp, #16]
 8014b04:	3630      	adds	r6, #48	; 0x30
 8014b06:	f805 6b01 	strb.w	r6, [r5], #1
 8014b0a:	9e00      	ldr	r6, [sp, #0]
 8014b0c:	1bae      	subs	r6, r5, r6
 8014b0e:	42b7      	cmp	r7, r6
 8014b10:	4602      	mov	r2, r0
 8014b12:	460b      	mov	r3, r1
 8014b14:	d134      	bne.n	8014b80 <_dtoa_r+0x708>
 8014b16:	f7eb fbb9 	bl	800028c <__adddf3>
 8014b1a:	4642      	mov	r2, r8
 8014b1c:	464b      	mov	r3, r9
 8014b1e:	4606      	mov	r6, r0
 8014b20:	460f      	mov	r7, r1
 8014b22:	f7eb fff9 	bl	8000b18 <__aeabi_dcmpgt>
 8014b26:	b9c8      	cbnz	r0, 8014b5c <_dtoa_r+0x6e4>
 8014b28:	4642      	mov	r2, r8
 8014b2a:	464b      	mov	r3, r9
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	4639      	mov	r1, r7
 8014b30:	f7eb ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b34:	b110      	cbz	r0, 8014b3c <_dtoa_r+0x6c4>
 8014b36:	9b01      	ldr	r3, [sp, #4]
 8014b38:	07db      	lsls	r3, r3, #31
 8014b3a:	d40f      	bmi.n	8014b5c <_dtoa_r+0x6e4>
 8014b3c:	4651      	mov	r1, sl
 8014b3e:	4620      	mov	r0, r4
 8014b40:	f000 fbcc 	bl	80152dc <_Bfree>
 8014b44:	2300      	movs	r3, #0
 8014b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b48:	702b      	strb	r3, [r5, #0]
 8014b4a:	f10b 0301 	add.w	r3, fp, #1
 8014b4e:	6013      	str	r3, [r2, #0]
 8014b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	f43f ace2 	beq.w	801451c <_dtoa_r+0xa4>
 8014b58:	601d      	str	r5, [r3, #0]
 8014b5a:	e4df      	b.n	801451c <_dtoa_r+0xa4>
 8014b5c:	465f      	mov	r7, fp
 8014b5e:	462b      	mov	r3, r5
 8014b60:	461d      	mov	r5, r3
 8014b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b66:	2a39      	cmp	r2, #57	; 0x39
 8014b68:	d106      	bne.n	8014b78 <_dtoa_r+0x700>
 8014b6a:	9a00      	ldr	r2, [sp, #0]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d1f7      	bne.n	8014b60 <_dtoa_r+0x6e8>
 8014b70:	9900      	ldr	r1, [sp, #0]
 8014b72:	2230      	movs	r2, #48	; 0x30
 8014b74:	3701      	adds	r7, #1
 8014b76:	700a      	strb	r2, [r1, #0]
 8014b78:	781a      	ldrb	r2, [r3, #0]
 8014b7a:	3201      	adds	r2, #1
 8014b7c:	701a      	strb	r2, [r3, #0]
 8014b7e:	e790      	b.n	8014aa2 <_dtoa_r+0x62a>
 8014b80:	4ba3      	ldr	r3, [pc, #652]	; (8014e10 <_dtoa_r+0x998>)
 8014b82:	2200      	movs	r2, #0
 8014b84:	f7eb fd38 	bl	80005f8 <__aeabi_dmul>
 8014b88:	2200      	movs	r2, #0
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	4606      	mov	r6, r0
 8014b8e:	460f      	mov	r7, r1
 8014b90:	f7eb ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	d09e      	beq.n	8014ad6 <_dtoa_r+0x65e>
 8014b98:	e7d0      	b.n	8014b3c <_dtoa_r+0x6c4>
 8014b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b9c:	2a00      	cmp	r2, #0
 8014b9e:	f000 80ca 	beq.w	8014d36 <_dtoa_r+0x8be>
 8014ba2:	9a07      	ldr	r2, [sp, #28]
 8014ba4:	2a01      	cmp	r2, #1
 8014ba6:	f300 80ad 	bgt.w	8014d04 <_dtoa_r+0x88c>
 8014baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014bac:	2a00      	cmp	r2, #0
 8014bae:	f000 80a5 	beq.w	8014cfc <_dtoa_r+0x884>
 8014bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014bb6:	9e08      	ldr	r6, [sp, #32]
 8014bb8:	9d05      	ldr	r5, [sp, #20]
 8014bba:	9a05      	ldr	r2, [sp, #20]
 8014bbc:	441a      	add	r2, r3
 8014bbe:	9205      	str	r2, [sp, #20]
 8014bc0:	9a06      	ldr	r2, [sp, #24]
 8014bc2:	2101      	movs	r1, #1
 8014bc4:	441a      	add	r2, r3
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	9206      	str	r2, [sp, #24]
 8014bca:	f000 fc3d 	bl	8015448 <__i2b>
 8014bce:	4607      	mov	r7, r0
 8014bd0:	b165      	cbz	r5, 8014bec <_dtoa_r+0x774>
 8014bd2:	9b06      	ldr	r3, [sp, #24]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	dd09      	ble.n	8014bec <_dtoa_r+0x774>
 8014bd8:	42ab      	cmp	r3, r5
 8014bda:	9a05      	ldr	r2, [sp, #20]
 8014bdc:	bfa8      	it	ge
 8014bde:	462b      	movge	r3, r5
 8014be0:	1ad2      	subs	r2, r2, r3
 8014be2:	9205      	str	r2, [sp, #20]
 8014be4:	9a06      	ldr	r2, [sp, #24]
 8014be6:	1aed      	subs	r5, r5, r3
 8014be8:	1ad3      	subs	r3, r2, r3
 8014bea:	9306      	str	r3, [sp, #24]
 8014bec:	9b08      	ldr	r3, [sp, #32]
 8014bee:	b1f3      	cbz	r3, 8014c2e <_dtoa_r+0x7b6>
 8014bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f000 80a3 	beq.w	8014d3e <_dtoa_r+0x8c6>
 8014bf8:	2e00      	cmp	r6, #0
 8014bfa:	dd10      	ble.n	8014c1e <_dtoa_r+0x7a6>
 8014bfc:	4639      	mov	r1, r7
 8014bfe:	4632      	mov	r2, r6
 8014c00:	4620      	mov	r0, r4
 8014c02:	f000 fce1 	bl	80155c8 <__pow5mult>
 8014c06:	4652      	mov	r2, sl
 8014c08:	4601      	mov	r1, r0
 8014c0a:	4607      	mov	r7, r0
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f000 fc31 	bl	8015474 <__multiply>
 8014c12:	4651      	mov	r1, sl
 8014c14:	4680      	mov	r8, r0
 8014c16:	4620      	mov	r0, r4
 8014c18:	f000 fb60 	bl	80152dc <_Bfree>
 8014c1c:	46c2      	mov	sl, r8
 8014c1e:	9b08      	ldr	r3, [sp, #32]
 8014c20:	1b9a      	subs	r2, r3, r6
 8014c22:	d004      	beq.n	8014c2e <_dtoa_r+0x7b6>
 8014c24:	4651      	mov	r1, sl
 8014c26:	4620      	mov	r0, r4
 8014c28:	f000 fcce 	bl	80155c8 <__pow5mult>
 8014c2c:	4682      	mov	sl, r0
 8014c2e:	2101      	movs	r1, #1
 8014c30:	4620      	mov	r0, r4
 8014c32:	f000 fc09 	bl	8015448 <__i2b>
 8014c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	4606      	mov	r6, r0
 8014c3c:	f340 8081 	ble.w	8014d42 <_dtoa_r+0x8ca>
 8014c40:	461a      	mov	r2, r3
 8014c42:	4601      	mov	r1, r0
 8014c44:	4620      	mov	r0, r4
 8014c46:	f000 fcbf 	bl	80155c8 <__pow5mult>
 8014c4a:	9b07      	ldr	r3, [sp, #28]
 8014c4c:	2b01      	cmp	r3, #1
 8014c4e:	4606      	mov	r6, r0
 8014c50:	dd7a      	ble.n	8014d48 <_dtoa_r+0x8d0>
 8014c52:	f04f 0800 	mov.w	r8, #0
 8014c56:	6933      	ldr	r3, [r6, #16]
 8014c58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014c5c:	6918      	ldr	r0, [r3, #16]
 8014c5e:	f000 fba5 	bl	80153ac <__hi0bits>
 8014c62:	f1c0 0020 	rsb	r0, r0, #32
 8014c66:	9b06      	ldr	r3, [sp, #24]
 8014c68:	4418      	add	r0, r3
 8014c6a:	f010 001f 	ands.w	r0, r0, #31
 8014c6e:	f000 8094 	beq.w	8014d9a <_dtoa_r+0x922>
 8014c72:	f1c0 0320 	rsb	r3, r0, #32
 8014c76:	2b04      	cmp	r3, #4
 8014c78:	f340 8085 	ble.w	8014d86 <_dtoa_r+0x90e>
 8014c7c:	9b05      	ldr	r3, [sp, #20]
 8014c7e:	f1c0 001c 	rsb	r0, r0, #28
 8014c82:	4403      	add	r3, r0
 8014c84:	9305      	str	r3, [sp, #20]
 8014c86:	9b06      	ldr	r3, [sp, #24]
 8014c88:	4403      	add	r3, r0
 8014c8a:	4405      	add	r5, r0
 8014c8c:	9306      	str	r3, [sp, #24]
 8014c8e:	9b05      	ldr	r3, [sp, #20]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	dd05      	ble.n	8014ca0 <_dtoa_r+0x828>
 8014c94:	4651      	mov	r1, sl
 8014c96:	461a      	mov	r2, r3
 8014c98:	4620      	mov	r0, r4
 8014c9a:	f000 fcef 	bl	801567c <__lshift>
 8014c9e:	4682      	mov	sl, r0
 8014ca0:	9b06      	ldr	r3, [sp, #24]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	dd05      	ble.n	8014cb2 <_dtoa_r+0x83a>
 8014ca6:	4631      	mov	r1, r6
 8014ca8:	461a      	mov	r2, r3
 8014caa:	4620      	mov	r0, r4
 8014cac:	f000 fce6 	bl	801567c <__lshift>
 8014cb0:	4606      	mov	r6, r0
 8014cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d072      	beq.n	8014d9e <_dtoa_r+0x926>
 8014cb8:	4631      	mov	r1, r6
 8014cba:	4650      	mov	r0, sl
 8014cbc:	f000 fd4a 	bl	8015754 <__mcmp>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	da6c      	bge.n	8014d9e <_dtoa_r+0x926>
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	4651      	mov	r1, sl
 8014cc8:	220a      	movs	r2, #10
 8014cca:	4620      	mov	r0, r4
 8014ccc:	f000 fb28 	bl	8015320 <__multadd>
 8014cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cd6:	4682      	mov	sl, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	f000 81b0 	beq.w	801503e <_dtoa_r+0xbc6>
 8014cde:	2300      	movs	r3, #0
 8014ce0:	4639      	mov	r1, r7
 8014ce2:	220a      	movs	r2, #10
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	f000 fb1b 	bl	8015320 <__multadd>
 8014cea:	9b01      	ldr	r3, [sp, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	4607      	mov	r7, r0
 8014cf0:	f300 8096 	bgt.w	8014e20 <_dtoa_r+0x9a8>
 8014cf4:	9b07      	ldr	r3, [sp, #28]
 8014cf6:	2b02      	cmp	r3, #2
 8014cf8:	dc59      	bgt.n	8014dae <_dtoa_r+0x936>
 8014cfa:	e091      	b.n	8014e20 <_dtoa_r+0x9a8>
 8014cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d02:	e758      	b.n	8014bb6 <_dtoa_r+0x73e>
 8014d04:	9b04      	ldr	r3, [sp, #16]
 8014d06:	1e5e      	subs	r6, r3, #1
 8014d08:	9b08      	ldr	r3, [sp, #32]
 8014d0a:	42b3      	cmp	r3, r6
 8014d0c:	bfbf      	itttt	lt
 8014d0e:	9b08      	ldrlt	r3, [sp, #32]
 8014d10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014d12:	9608      	strlt	r6, [sp, #32]
 8014d14:	1af3      	sublt	r3, r6, r3
 8014d16:	bfb4      	ite	lt
 8014d18:	18d2      	addlt	r2, r2, r3
 8014d1a:	1b9e      	subge	r6, r3, r6
 8014d1c:	9b04      	ldr	r3, [sp, #16]
 8014d1e:	bfbc      	itt	lt
 8014d20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014d22:	2600      	movlt	r6, #0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	bfb7      	itett	lt
 8014d28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014d2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014d30:	1a9d      	sublt	r5, r3, r2
 8014d32:	2300      	movlt	r3, #0
 8014d34:	e741      	b.n	8014bba <_dtoa_r+0x742>
 8014d36:	9e08      	ldr	r6, [sp, #32]
 8014d38:	9d05      	ldr	r5, [sp, #20]
 8014d3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014d3c:	e748      	b.n	8014bd0 <_dtoa_r+0x758>
 8014d3e:	9a08      	ldr	r2, [sp, #32]
 8014d40:	e770      	b.n	8014c24 <_dtoa_r+0x7ac>
 8014d42:	9b07      	ldr	r3, [sp, #28]
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	dc19      	bgt.n	8014d7c <_dtoa_r+0x904>
 8014d48:	9b02      	ldr	r3, [sp, #8]
 8014d4a:	b9bb      	cbnz	r3, 8014d7c <_dtoa_r+0x904>
 8014d4c:	9b03      	ldr	r3, [sp, #12]
 8014d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d52:	b99b      	cbnz	r3, 8014d7c <_dtoa_r+0x904>
 8014d54:	9b03      	ldr	r3, [sp, #12]
 8014d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d5a:	0d1b      	lsrs	r3, r3, #20
 8014d5c:	051b      	lsls	r3, r3, #20
 8014d5e:	b183      	cbz	r3, 8014d82 <_dtoa_r+0x90a>
 8014d60:	9b05      	ldr	r3, [sp, #20]
 8014d62:	3301      	adds	r3, #1
 8014d64:	9305      	str	r3, [sp, #20]
 8014d66:	9b06      	ldr	r3, [sp, #24]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	9306      	str	r3, [sp, #24]
 8014d6c:	f04f 0801 	mov.w	r8, #1
 8014d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	f47f af6f 	bne.w	8014c56 <_dtoa_r+0x7de>
 8014d78:	2001      	movs	r0, #1
 8014d7a:	e774      	b.n	8014c66 <_dtoa_r+0x7ee>
 8014d7c:	f04f 0800 	mov.w	r8, #0
 8014d80:	e7f6      	b.n	8014d70 <_dtoa_r+0x8f8>
 8014d82:	4698      	mov	r8, r3
 8014d84:	e7f4      	b.n	8014d70 <_dtoa_r+0x8f8>
 8014d86:	d082      	beq.n	8014c8e <_dtoa_r+0x816>
 8014d88:	9a05      	ldr	r2, [sp, #20]
 8014d8a:	331c      	adds	r3, #28
 8014d8c:	441a      	add	r2, r3
 8014d8e:	9205      	str	r2, [sp, #20]
 8014d90:	9a06      	ldr	r2, [sp, #24]
 8014d92:	441a      	add	r2, r3
 8014d94:	441d      	add	r5, r3
 8014d96:	9206      	str	r2, [sp, #24]
 8014d98:	e779      	b.n	8014c8e <_dtoa_r+0x816>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	e7f4      	b.n	8014d88 <_dtoa_r+0x910>
 8014d9e:	9b04      	ldr	r3, [sp, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	dc37      	bgt.n	8014e14 <_dtoa_r+0x99c>
 8014da4:	9b07      	ldr	r3, [sp, #28]
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	dd34      	ble.n	8014e14 <_dtoa_r+0x99c>
 8014daa:	9b04      	ldr	r3, [sp, #16]
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	9b01      	ldr	r3, [sp, #4]
 8014db0:	b963      	cbnz	r3, 8014dcc <_dtoa_r+0x954>
 8014db2:	4631      	mov	r1, r6
 8014db4:	2205      	movs	r2, #5
 8014db6:	4620      	mov	r0, r4
 8014db8:	f000 fab2 	bl	8015320 <__multadd>
 8014dbc:	4601      	mov	r1, r0
 8014dbe:	4606      	mov	r6, r0
 8014dc0:	4650      	mov	r0, sl
 8014dc2:	f000 fcc7 	bl	8015754 <__mcmp>
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	f73f adbb 	bgt.w	8014942 <_dtoa_r+0x4ca>
 8014dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dce:	9d00      	ldr	r5, [sp, #0]
 8014dd0:	ea6f 0b03 	mvn.w	fp, r3
 8014dd4:	f04f 0800 	mov.w	r8, #0
 8014dd8:	4631      	mov	r1, r6
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f000 fa7e 	bl	80152dc <_Bfree>
 8014de0:	2f00      	cmp	r7, #0
 8014de2:	f43f aeab 	beq.w	8014b3c <_dtoa_r+0x6c4>
 8014de6:	f1b8 0f00 	cmp.w	r8, #0
 8014dea:	d005      	beq.n	8014df8 <_dtoa_r+0x980>
 8014dec:	45b8      	cmp	r8, r7
 8014dee:	d003      	beq.n	8014df8 <_dtoa_r+0x980>
 8014df0:	4641      	mov	r1, r8
 8014df2:	4620      	mov	r0, r4
 8014df4:	f000 fa72 	bl	80152dc <_Bfree>
 8014df8:	4639      	mov	r1, r7
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f000 fa6e 	bl	80152dc <_Bfree>
 8014e00:	e69c      	b.n	8014b3c <_dtoa_r+0x6c4>
 8014e02:	2600      	movs	r6, #0
 8014e04:	4637      	mov	r7, r6
 8014e06:	e7e1      	b.n	8014dcc <_dtoa_r+0x954>
 8014e08:	46bb      	mov	fp, r7
 8014e0a:	4637      	mov	r7, r6
 8014e0c:	e599      	b.n	8014942 <_dtoa_r+0x4ca>
 8014e0e:	bf00      	nop
 8014e10:	40240000 	.word	0x40240000
 8014e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	f000 80c8 	beq.w	8014fac <_dtoa_r+0xb34>
 8014e1c:	9b04      	ldr	r3, [sp, #16]
 8014e1e:	9301      	str	r3, [sp, #4]
 8014e20:	2d00      	cmp	r5, #0
 8014e22:	dd05      	ble.n	8014e30 <_dtoa_r+0x9b8>
 8014e24:	4639      	mov	r1, r7
 8014e26:	462a      	mov	r2, r5
 8014e28:	4620      	mov	r0, r4
 8014e2a:	f000 fc27 	bl	801567c <__lshift>
 8014e2e:	4607      	mov	r7, r0
 8014e30:	f1b8 0f00 	cmp.w	r8, #0
 8014e34:	d05b      	beq.n	8014eee <_dtoa_r+0xa76>
 8014e36:	6879      	ldr	r1, [r7, #4]
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f000 fa0f 	bl	801525c <_Balloc>
 8014e3e:	4605      	mov	r5, r0
 8014e40:	b928      	cbnz	r0, 8014e4e <_dtoa_r+0x9d6>
 8014e42:	4b83      	ldr	r3, [pc, #524]	; (8015050 <_dtoa_r+0xbd8>)
 8014e44:	4602      	mov	r2, r0
 8014e46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014e4a:	f7ff bb2e 	b.w	80144aa <_dtoa_r+0x32>
 8014e4e:	693a      	ldr	r2, [r7, #16]
 8014e50:	3202      	adds	r2, #2
 8014e52:	0092      	lsls	r2, r2, #2
 8014e54:	f107 010c 	add.w	r1, r7, #12
 8014e58:	300c      	adds	r0, #12
 8014e5a:	f000 ffab 	bl	8015db4 <memcpy>
 8014e5e:	2201      	movs	r2, #1
 8014e60:	4629      	mov	r1, r5
 8014e62:	4620      	mov	r0, r4
 8014e64:	f000 fc0a 	bl	801567c <__lshift>
 8014e68:	9b00      	ldr	r3, [sp, #0]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	9304      	str	r3, [sp, #16]
 8014e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e72:	4413      	add	r3, r2
 8014e74:	9308      	str	r3, [sp, #32]
 8014e76:	9b02      	ldr	r3, [sp, #8]
 8014e78:	f003 0301 	and.w	r3, r3, #1
 8014e7c:	46b8      	mov	r8, r7
 8014e7e:	9306      	str	r3, [sp, #24]
 8014e80:	4607      	mov	r7, r0
 8014e82:	9b04      	ldr	r3, [sp, #16]
 8014e84:	4631      	mov	r1, r6
 8014e86:	3b01      	subs	r3, #1
 8014e88:	4650      	mov	r0, sl
 8014e8a:	9301      	str	r3, [sp, #4]
 8014e8c:	f7ff fa6b 	bl	8014366 <quorem>
 8014e90:	4641      	mov	r1, r8
 8014e92:	9002      	str	r0, [sp, #8]
 8014e94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014e98:	4650      	mov	r0, sl
 8014e9a:	f000 fc5b 	bl	8015754 <__mcmp>
 8014e9e:	463a      	mov	r2, r7
 8014ea0:	9005      	str	r0, [sp, #20]
 8014ea2:	4631      	mov	r1, r6
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	f000 fc71 	bl	801578c <__mdiff>
 8014eaa:	68c2      	ldr	r2, [r0, #12]
 8014eac:	4605      	mov	r5, r0
 8014eae:	bb02      	cbnz	r2, 8014ef2 <_dtoa_r+0xa7a>
 8014eb0:	4601      	mov	r1, r0
 8014eb2:	4650      	mov	r0, sl
 8014eb4:	f000 fc4e 	bl	8015754 <__mcmp>
 8014eb8:	4602      	mov	r2, r0
 8014eba:	4629      	mov	r1, r5
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8014ec0:	f000 fa0c 	bl	80152dc <_Bfree>
 8014ec4:	9b07      	ldr	r3, [sp, #28]
 8014ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ec8:	9d04      	ldr	r5, [sp, #16]
 8014eca:	ea43 0102 	orr.w	r1, r3, r2
 8014ece:	9b06      	ldr	r3, [sp, #24]
 8014ed0:	4319      	orrs	r1, r3
 8014ed2:	d110      	bne.n	8014ef6 <_dtoa_r+0xa7e>
 8014ed4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014ed8:	d029      	beq.n	8014f2e <_dtoa_r+0xab6>
 8014eda:	9b05      	ldr	r3, [sp, #20]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	dd02      	ble.n	8014ee6 <_dtoa_r+0xa6e>
 8014ee0:	9b02      	ldr	r3, [sp, #8]
 8014ee2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014ee6:	9b01      	ldr	r3, [sp, #4]
 8014ee8:	f883 9000 	strb.w	r9, [r3]
 8014eec:	e774      	b.n	8014dd8 <_dtoa_r+0x960>
 8014eee:	4638      	mov	r0, r7
 8014ef0:	e7ba      	b.n	8014e68 <_dtoa_r+0x9f0>
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	e7e1      	b.n	8014eba <_dtoa_r+0xa42>
 8014ef6:	9b05      	ldr	r3, [sp, #20]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	db04      	blt.n	8014f06 <_dtoa_r+0xa8e>
 8014efc:	9907      	ldr	r1, [sp, #28]
 8014efe:	430b      	orrs	r3, r1
 8014f00:	9906      	ldr	r1, [sp, #24]
 8014f02:	430b      	orrs	r3, r1
 8014f04:	d120      	bne.n	8014f48 <_dtoa_r+0xad0>
 8014f06:	2a00      	cmp	r2, #0
 8014f08:	dded      	ble.n	8014ee6 <_dtoa_r+0xa6e>
 8014f0a:	4651      	mov	r1, sl
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f000 fbb4 	bl	801567c <__lshift>
 8014f14:	4631      	mov	r1, r6
 8014f16:	4682      	mov	sl, r0
 8014f18:	f000 fc1c 	bl	8015754 <__mcmp>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	dc03      	bgt.n	8014f28 <_dtoa_r+0xab0>
 8014f20:	d1e1      	bne.n	8014ee6 <_dtoa_r+0xa6e>
 8014f22:	f019 0f01 	tst.w	r9, #1
 8014f26:	d0de      	beq.n	8014ee6 <_dtoa_r+0xa6e>
 8014f28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014f2c:	d1d8      	bne.n	8014ee0 <_dtoa_r+0xa68>
 8014f2e:	9a01      	ldr	r2, [sp, #4]
 8014f30:	2339      	movs	r3, #57	; 0x39
 8014f32:	7013      	strb	r3, [r2, #0]
 8014f34:	462b      	mov	r3, r5
 8014f36:	461d      	mov	r5, r3
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014f3e:	2a39      	cmp	r2, #57	; 0x39
 8014f40:	d06c      	beq.n	801501c <_dtoa_r+0xba4>
 8014f42:	3201      	adds	r2, #1
 8014f44:	701a      	strb	r2, [r3, #0]
 8014f46:	e747      	b.n	8014dd8 <_dtoa_r+0x960>
 8014f48:	2a00      	cmp	r2, #0
 8014f4a:	dd07      	ble.n	8014f5c <_dtoa_r+0xae4>
 8014f4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014f50:	d0ed      	beq.n	8014f2e <_dtoa_r+0xab6>
 8014f52:	9a01      	ldr	r2, [sp, #4]
 8014f54:	f109 0301 	add.w	r3, r9, #1
 8014f58:	7013      	strb	r3, [r2, #0]
 8014f5a:	e73d      	b.n	8014dd8 <_dtoa_r+0x960>
 8014f5c:	9b04      	ldr	r3, [sp, #16]
 8014f5e:	9a08      	ldr	r2, [sp, #32]
 8014f60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d043      	beq.n	8014ff0 <_dtoa_r+0xb78>
 8014f68:	4651      	mov	r1, sl
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	220a      	movs	r2, #10
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f000 f9d6 	bl	8015320 <__multadd>
 8014f74:	45b8      	cmp	r8, r7
 8014f76:	4682      	mov	sl, r0
 8014f78:	f04f 0300 	mov.w	r3, #0
 8014f7c:	f04f 020a 	mov.w	r2, #10
 8014f80:	4641      	mov	r1, r8
 8014f82:	4620      	mov	r0, r4
 8014f84:	d107      	bne.n	8014f96 <_dtoa_r+0xb1e>
 8014f86:	f000 f9cb 	bl	8015320 <__multadd>
 8014f8a:	4680      	mov	r8, r0
 8014f8c:	4607      	mov	r7, r0
 8014f8e:	9b04      	ldr	r3, [sp, #16]
 8014f90:	3301      	adds	r3, #1
 8014f92:	9304      	str	r3, [sp, #16]
 8014f94:	e775      	b.n	8014e82 <_dtoa_r+0xa0a>
 8014f96:	f000 f9c3 	bl	8015320 <__multadd>
 8014f9a:	4639      	mov	r1, r7
 8014f9c:	4680      	mov	r8, r0
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	220a      	movs	r2, #10
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	f000 f9bc 	bl	8015320 <__multadd>
 8014fa8:	4607      	mov	r7, r0
 8014faa:	e7f0      	b.n	8014f8e <_dtoa_r+0xb16>
 8014fac:	9b04      	ldr	r3, [sp, #16]
 8014fae:	9301      	str	r3, [sp, #4]
 8014fb0:	9d00      	ldr	r5, [sp, #0]
 8014fb2:	4631      	mov	r1, r6
 8014fb4:	4650      	mov	r0, sl
 8014fb6:	f7ff f9d6 	bl	8014366 <quorem>
 8014fba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014fbe:	9b00      	ldr	r3, [sp, #0]
 8014fc0:	f805 9b01 	strb.w	r9, [r5], #1
 8014fc4:	1aea      	subs	r2, r5, r3
 8014fc6:	9b01      	ldr	r3, [sp, #4]
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	dd07      	ble.n	8014fdc <_dtoa_r+0xb64>
 8014fcc:	4651      	mov	r1, sl
 8014fce:	2300      	movs	r3, #0
 8014fd0:	220a      	movs	r2, #10
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f000 f9a4 	bl	8015320 <__multadd>
 8014fd8:	4682      	mov	sl, r0
 8014fda:	e7ea      	b.n	8014fb2 <_dtoa_r+0xb3a>
 8014fdc:	9b01      	ldr	r3, [sp, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	bfc8      	it	gt
 8014fe2:	461d      	movgt	r5, r3
 8014fe4:	9b00      	ldr	r3, [sp, #0]
 8014fe6:	bfd8      	it	le
 8014fe8:	2501      	movle	r5, #1
 8014fea:	441d      	add	r5, r3
 8014fec:	f04f 0800 	mov.w	r8, #0
 8014ff0:	4651      	mov	r1, sl
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f000 fb41 	bl	801567c <__lshift>
 8014ffa:	4631      	mov	r1, r6
 8014ffc:	4682      	mov	sl, r0
 8014ffe:	f000 fba9 	bl	8015754 <__mcmp>
 8015002:	2800      	cmp	r0, #0
 8015004:	dc96      	bgt.n	8014f34 <_dtoa_r+0xabc>
 8015006:	d102      	bne.n	801500e <_dtoa_r+0xb96>
 8015008:	f019 0f01 	tst.w	r9, #1
 801500c:	d192      	bne.n	8014f34 <_dtoa_r+0xabc>
 801500e:	462b      	mov	r3, r5
 8015010:	461d      	mov	r5, r3
 8015012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015016:	2a30      	cmp	r2, #48	; 0x30
 8015018:	d0fa      	beq.n	8015010 <_dtoa_r+0xb98>
 801501a:	e6dd      	b.n	8014dd8 <_dtoa_r+0x960>
 801501c:	9a00      	ldr	r2, [sp, #0]
 801501e:	429a      	cmp	r2, r3
 8015020:	d189      	bne.n	8014f36 <_dtoa_r+0xabe>
 8015022:	f10b 0b01 	add.w	fp, fp, #1
 8015026:	2331      	movs	r3, #49	; 0x31
 8015028:	e796      	b.n	8014f58 <_dtoa_r+0xae0>
 801502a:	4b0a      	ldr	r3, [pc, #40]	; (8015054 <_dtoa_r+0xbdc>)
 801502c:	f7ff ba99 	b.w	8014562 <_dtoa_r+0xea>
 8015030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015032:	2b00      	cmp	r3, #0
 8015034:	f47f aa6d 	bne.w	8014512 <_dtoa_r+0x9a>
 8015038:	4b07      	ldr	r3, [pc, #28]	; (8015058 <_dtoa_r+0xbe0>)
 801503a:	f7ff ba92 	b.w	8014562 <_dtoa_r+0xea>
 801503e:	9b01      	ldr	r3, [sp, #4]
 8015040:	2b00      	cmp	r3, #0
 8015042:	dcb5      	bgt.n	8014fb0 <_dtoa_r+0xb38>
 8015044:	9b07      	ldr	r3, [sp, #28]
 8015046:	2b02      	cmp	r3, #2
 8015048:	f73f aeb1 	bgt.w	8014dae <_dtoa_r+0x936>
 801504c:	e7b0      	b.n	8014fb0 <_dtoa_r+0xb38>
 801504e:	bf00      	nop
 8015050:	0803adb4 	.word	0x0803adb4
 8015054:	0803ad14 	.word	0x0803ad14
 8015058:	0803ad38 	.word	0x0803ad38

0801505c <_free_r>:
 801505c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801505e:	2900      	cmp	r1, #0
 8015060:	d044      	beq.n	80150ec <_free_r+0x90>
 8015062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015066:	9001      	str	r0, [sp, #4]
 8015068:	2b00      	cmp	r3, #0
 801506a:	f1a1 0404 	sub.w	r4, r1, #4
 801506e:	bfb8      	it	lt
 8015070:	18e4      	addlt	r4, r4, r3
 8015072:	f000 f8e7 	bl	8015244 <__malloc_lock>
 8015076:	4a1e      	ldr	r2, [pc, #120]	; (80150f0 <_free_r+0x94>)
 8015078:	9801      	ldr	r0, [sp, #4]
 801507a:	6813      	ldr	r3, [r2, #0]
 801507c:	b933      	cbnz	r3, 801508c <_free_r+0x30>
 801507e:	6063      	str	r3, [r4, #4]
 8015080:	6014      	str	r4, [r2, #0]
 8015082:	b003      	add	sp, #12
 8015084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015088:	f000 b8e2 	b.w	8015250 <__malloc_unlock>
 801508c:	42a3      	cmp	r3, r4
 801508e:	d908      	bls.n	80150a2 <_free_r+0x46>
 8015090:	6825      	ldr	r5, [r4, #0]
 8015092:	1961      	adds	r1, r4, r5
 8015094:	428b      	cmp	r3, r1
 8015096:	bf01      	itttt	eq
 8015098:	6819      	ldreq	r1, [r3, #0]
 801509a:	685b      	ldreq	r3, [r3, #4]
 801509c:	1949      	addeq	r1, r1, r5
 801509e:	6021      	streq	r1, [r4, #0]
 80150a0:	e7ed      	b.n	801507e <_free_r+0x22>
 80150a2:	461a      	mov	r2, r3
 80150a4:	685b      	ldr	r3, [r3, #4]
 80150a6:	b10b      	cbz	r3, 80150ac <_free_r+0x50>
 80150a8:	42a3      	cmp	r3, r4
 80150aa:	d9fa      	bls.n	80150a2 <_free_r+0x46>
 80150ac:	6811      	ldr	r1, [r2, #0]
 80150ae:	1855      	adds	r5, r2, r1
 80150b0:	42a5      	cmp	r5, r4
 80150b2:	d10b      	bne.n	80150cc <_free_r+0x70>
 80150b4:	6824      	ldr	r4, [r4, #0]
 80150b6:	4421      	add	r1, r4
 80150b8:	1854      	adds	r4, r2, r1
 80150ba:	42a3      	cmp	r3, r4
 80150bc:	6011      	str	r1, [r2, #0]
 80150be:	d1e0      	bne.n	8015082 <_free_r+0x26>
 80150c0:	681c      	ldr	r4, [r3, #0]
 80150c2:	685b      	ldr	r3, [r3, #4]
 80150c4:	6053      	str	r3, [r2, #4]
 80150c6:	440c      	add	r4, r1
 80150c8:	6014      	str	r4, [r2, #0]
 80150ca:	e7da      	b.n	8015082 <_free_r+0x26>
 80150cc:	d902      	bls.n	80150d4 <_free_r+0x78>
 80150ce:	230c      	movs	r3, #12
 80150d0:	6003      	str	r3, [r0, #0]
 80150d2:	e7d6      	b.n	8015082 <_free_r+0x26>
 80150d4:	6825      	ldr	r5, [r4, #0]
 80150d6:	1961      	adds	r1, r4, r5
 80150d8:	428b      	cmp	r3, r1
 80150da:	bf04      	itt	eq
 80150dc:	6819      	ldreq	r1, [r3, #0]
 80150de:	685b      	ldreq	r3, [r3, #4]
 80150e0:	6063      	str	r3, [r4, #4]
 80150e2:	bf04      	itt	eq
 80150e4:	1949      	addeq	r1, r1, r5
 80150e6:	6021      	streq	r1, [r4, #0]
 80150e8:	6054      	str	r4, [r2, #4]
 80150ea:	e7ca      	b.n	8015082 <_free_r+0x26>
 80150ec:	b003      	add	sp, #12
 80150ee:	bd30      	pop	{r4, r5, pc}
 80150f0:	20002e14 	.word	0x20002e14

080150f4 <malloc>:
 80150f4:	4b02      	ldr	r3, [pc, #8]	; (8015100 <malloc+0xc>)
 80150f6:	4601      	mov	r1, r0
 80150f8:	6818      	ldr	r0, [r3, #0]
 80150fa:	f000 b823 	b.w	8015144 <_malloc_r>
 80150fe:	bf00      	nop
 8015100:	20000344 	.word	0x20000344

08015104 <sbrk_aligned>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	4e0e      	ldr	r6, [pc, #56]	; (8015140 <sbrk_aligned+0x3c>)
 8015108:	460c      	mov	r4, r1
 801510a:	6831      	ldr	r1, [r6, #0]
 801510c:	4605      	mov	r5, r0
 801510e:	b911      	cbnz	r1, 8015116 <sbrk_aligned+0x12>
 8015110:	f000 fe40 	bl	8015d94 <_sbrk_r>
 8015114:	6030      	str	r0, [r6, #0]
 8015116:	4621      	mov	r1, r4
 8015118:	4628      	mov	r0, r5
 801511a:	f000 fe3b 	bl	8015d94 <_sbrk_r>
 801511e:	1c43      	adds	r3, r0, #1
 8015120:	d00a      	beq.n	8015138 <sbrk_aligned+0x34>
 8015122:	1cc4      	adds	r4, r0, #3
 8015124:	f024 0403 	bic.w	r4, r4, #3
 8015128:	42a0      	cmp	r0, r4
 801512a:	d007      	beq.n	801513c <sbrk_aligned+0x38>
 801512c:	1a21      	subs	r1, r4, r0
 801512e:	4628      	mov	r0, r5
 8015130:	f000 fe30 	bl	8015d94 <_sbrk_r>
 8015134:	3001      	adds	r0, #1
 8015136:	d101      	bne.n	801513c <sbrk_aligned+0x38>
 8015138:	f04f 34ff 	mov.w	r4, #4294967295
 801513c:	4620      	mov	r0, r4
 801513e:	bd70      	pop	{r4, r5, r6, pc}
 8015140:	20002e18 	.word	0x20002e18

08015144 <_malloc_r>:
 8015144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015148:	1ccd      	adds	r5, r1, #3
 801514a:	f025 0503 	bic.w	r5, r5, #3
 801514e:	3508      	adds	r5, #8
 8015150:	2d0c      	cmp	r5, #12
 8015152:	bf38      	it	cc
 8015154:	250c      	movcc	r5, #12
 8015156:	2d00      	cmp	r5, #0
 8015158:	4607      	mov	r7, r0
 801515a:	db01      	blt.n	8015160 <_malloc_r+0x1c>
 801515c:	42a9      	cmp	r1, r5
 801515e:	d905      	bls.n	801516c <_malloc_r+0x28>
 8015160:	230c      	movs	r3, #12
 8015162:	603b      	str	r3, [r7, #0]
 8015164:	2600      	movs	r6, #0
 8015166:	4630      	mov	r0, r6
 8015168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801516c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015240 <_malloc_r+0xfc>
 8015170:	f000 f868 	bl	8015244 <__malloc_lock>
 8015174:	f8d8 3000 	ldr.w	r3, [r8]
 8015178:	461c      	mov	r4, r3
 801517a:	bb5c      	cbnz	r4, 80151d4 <_malloc_r+0x90>
 801517c:	4629      	mov	r1, r5
 801517e:	4638      	mov	r0, r7
 8015180:	f7ff ffc0 	bl	8015104 <sbrk_aligned>
 8015184:	1c43      	adds	r3, r0, #1
 8015186:	4604      	mov	r4, r0
 8015188:	d155      	bne.n	8015236 <_malloc_r+0xf2>
 801518a:	f8d8 4000 	ldr.w	r4, [r8]
 801518e:	4626      	mov	r6, r4
 8015190:	2e00      	cmp	r6, #0
 8015192:	d145      	bne.n	8015220 <_malloc_r+0xdc>
 8015194:	2c00      	cmp	r4, #0
 8015196:	d048      	beq.n	801522a <_malloc_r+0xe6>
 8015198:	6823      	ldr	r3, [r4, #0]
 801519a:	4631      	mov	r1, r6
 801519c:	4638      	mov	r0, r7
 801519e:	eb04 0903 	add.w	r9, r4, r3
 80151a2:	f000 fdf7 	bl	8015d94 <_sbrk_r>
 80151a6:	4581      	cmp	r9, r0
 80151a8:	d13f      	bne.n	801522a <_malloc_r+0xe6>
 80151aa:	6821      	ldr	r1, [r4, #0]
 80151ac:	1a6d      	subs	r5, r5, r1
 80151ae:	4629      	mov	r1, r5
 80151b0:	4638      	mov	r0, r7
 80151b2:	f7ff ffa7 	bl	8015104 <sbrk_aligned>
 80151b6:	3001      	adds	r0, #1
 80151b8:	d037      	beq.n	801522a <_malloc_r+0xe6>
 80151ba:	6823      	ldr	r3, [r4, #0]
 80151bc:	442b      	add	r3, r5
 80151be:	6023      	str	r3, [r4, #0]
 80151c0:	f8d8 3000 	ldr.w	r3, [r8]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d038      	beq.n	801523a <_malloc_r+0xf6>
 80151c8:	685a      	ldr	r2, [r3, #4]
 80151ca:	42a2      	cmp	r2, r4
 80151cc:	d12b      	bne.n	8015226 <_malloc_r+0xe2>
 80151ce:	2200      	movs	r2, #0
 80151d0:	605a      	str	r2, [r3, #4]
 80151d2:	e00f      	b.n	80151f4 <_malloc_r+0xb0>
 80151d4:	6822      	ldr	r2, [r4, #0]
 80151d6:	1b52      	subs	r2, r2, r5
 80151d8:	d41f      	bmi.n	801521a <_malloc_r+0xd6>
 80151da:	2a0b      	cmp	r2, #11
 80151dc:	d917      	bls.n	801520e <_malloc_r+0xca>
 80151de:	1961      	adds	r1, r4, r5
 80151e0:	42a3      	cmp	r3, r4
 80151e2:	6025      	str	r5, [r4, #0]
 80151e4:	bf18      	it	ne
 80151e6:	6059      	strne	r1, [r3, #4]
 80151e8:	6863      	ldr	r3, [r4, #4]
 80151ea:	bf08      	it	eq
 80151ec:	f8c8 1000 	streq.w	r1, [r8]
 80151f0:	5162      	str	r2, [r4, r5]
 80151f2:	604b      	str	r3, [r1, #4]
 80151f4:	4638      	mov	r0, r7
 80151f6:	f104 060b 	add.w	r6, r4, #11
 80151fa:	f000 f829 	bl	8015250 <__malloc_unlock>
 80151fe:	f026 0607 	bic.w	r6, r6, #7
 8015202:	1d23      	adds	r3, r4, #4
 8015204:	1af2      	subs	r2, r6, r3
 8015206:	d0ae      	beq.n	8015166 <_malloc_r+0x22>
 8015208:	1b9b      	subs	r3, r3, r6
 801520a:	50a3      	str	r3, [r4, r2]
 801520c:	e7ab      	b.n	8015166 <_malloc_r+0x22>
 801520e:	42a3      	cmp	r3, r4
 8015210:	6862      	ldr	r2, [r4, #4]
 8015212:	d1dd      	bne.n	80151d0 <_malloc_r+0x8c>
 8015214:	f8c8 2000 	str.w	r2, [r8]
 8015218:	e7ec      	b.n	80151f4 <_malloc_r+0xb0>
 801521a:	4623      	mov	r3, r4
 801521c:	6864      	ldr	r4, [r4, #4]
 801521e:	e7ac      	b.n	801517a <_malloc_r+0x36>
 8015220:	4634      	mov	r4, r6
 8015222:	6876      	ldr	r6, [r6, #4]
 8015224:	e7b4      	b.n	8015190 <_malloc_r+0x4c>
 8015226:	4613      	mov	r3, r2
 8015228:	e7cc      	b.n	80151c4 <_malloc_r+0x80>
 801522a:	230c      	movs	r3, #12
 801522c:	603b      	str	r3, [r7, #0]
 801522e:	4638      	mov	r0, r7
 8015230:	f000 f80e 	bl	8015250 <__malloc_unlock>
 8015234:	e797      	b.n	8015166 <_malloc_r+0x22>
 8015236:	6025      	str	r5, [r4, #0]
 8015238:	e7dc      	b.n	80151f4 <_malloc_r+0xb0>
 801523a:	605b      	str	r3, [r3, #4]
 801523c:	deff      	udf	#255	; 0xff
 801523e:	bf00      	nop
 8015240:	20002e14 	.word	0x20002e14

08015244 <__malloc_lock>:
 8015244:	4801      	ldr	r0, [pc, #4]	; (801524c <__malloc_lock+0x8>)
 8015246:	f7ff b88c 	b.w	8014362 <__retarget_lock_acquire_recursive>
 801524a:	bf00      	nop
 801524c:	20002e10 	.word	0x20002e10

08015250 <__malloc_unlock>:
 8015250:	4801      	ldr	r0, [pc, #4]	; (8015258 <__malloc_unlock+0x8>)
 8015252:	f7ff b887 	b.w	8014364 <__retarget_lock_release_recursive>
 8015256:	bf00      	nop
 8015258:	20002e10 	.word	0x20002e10

0801525c <_Balloc>:
 801525c:	b570      	push	{r4, r5, r6, lr}
 801525e:	69c6      	ldr	r6, [r0, #28]
 8015260:	4604      	mov	r4, r0
 8015262:	460d      	mov	r5, r1
 8015264:	b976      	cbnz	r6, 8015284 <_Balloc+0x28>
 8015266:	2010      	movs	r0, #16
 8015268:	f7ff ff44 	bl	80150f4 <malloc>
 801526c:	4602      	mov	r2, r0
 801526e:	61e0      	str	r0, [r4, #28]
 8015270:	b920      	cbnz	r0, 801527c <_Balloc+0x20>
 8015272:	4b18      	ldr	r3, [pc, #96]	; (80152d4 <_Balloc+0x78>)
 8015274:	4818      	ldr	r0, [pc, #96]	; (80152d8 <_Balloc+0x7c>)
 8015276:	216b      	movs	r1, #107	; 0x6b
 8015278:	f000 fdaa 	bl	8015dd0 <__assert_func>
 801527c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015280:	6006      	str	r6, [r0, #0]
 8015282:	60c6      	str	r6, [r0, #12]
 8015284:	69e6      	ldr	r6, [r4, #28]
 8015286:	68f3      	ldr	r3, [r6, #12]
 8015288:	b183      	cbz	r3, 80152ac <_Balloc+0x50>
 801528a:	69e3      	ldr	r3, [r4, #28]
 801528c:	68db      	ldr	r3, [r3, #12]
 801528e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015292:	b9b8      	cbnz	r0, 80152c4 <_Balloc+0x68>
 8015294:	2101      	movs	r1, #1
 8015296:	fa01 f605 	lsl.w	r6, r1, r5
 801529a:	1d72      	adds	r2, r6, #5
 801529c:	0092      	lsls	r2, r2, #2
 801529e:	4620      	mov	r0, r4
 80152a0:	f000 fdb4 	bl	8015e0c <_calloc_r>
 80152a4:	b160      	cbz	r0, 80152c0 <_Balloc+0x64>
 80152a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80152aa:	e00e      	b.n	80152ca <_Balloc+0x6e>
 80152ac:	2221      	movs	r2, #33	; 0x21
 80152ae:	2104      	movs	r1, #4
 80152b0:	4620      	mov	r0, r4
 80152b2:	f000 fdab 	bl	8015e0c <_calloc_r>
 80152b6:	69e3      	ldr	r3, [r4, #28]
 80152b8:	60f0      	str	r0, [r6, #12]
 80152ba:	68db      	ldr	r3, [r3, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1e4      	bne.n	801528a <_Balloc+0x2e>
 80152c0:	2000      	movs	r0, #0
 80152c2:	bd70      	pop	{r4, r5, r6, pc}
 80152c4:	6802      	ldr	r2, [r0, #0]
 80152c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80152ca:	2300      	movs	r3, #0
 80152cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80152d0:	e7f7      	b.n	80152c2 <_Balloc+0x66>
 80152d2:	bf00      	nop
 80152d4:	0803ad45 	.word	0x0803ad45
 80152d8:	0803adc5 	.word	0x0803adc5

080152dc <_Bfree>:
 80152dc:	b570      	push	{r4, r5, r6, lr}
 80152de:	69c6      	ldr	r6, [r0, #28]
 80152e0:	4605      	mov	r5, r0
 80152e2:	460c      	mov	r4, r1
 80152e4:	b976      	cbnz	r6, 8015304 <_Bfree+0x28>
 80152e6:	2010      	movs	r0, #16
 80152e8:	f7ff ff04 	bl	80150f4 <malloc>
 80152ec:	4602      	mov	r2, r0
 80152ee:	61e8      	str	r0, [r5, #28]
 80152f0:	b920      	cbnz	r0, 80152fc <_Bfree+0x20>
 80152f2:	4b09      	ldr	r3, [pc, #36]	; (8015318 <_Bfree+0x3c>)
 80152f4:	4809      	ldr	r0, [pc, #36]	; (801531c <_Bfree+0x40>)
 80152f6:	218f      	movs	r1, #143	; 0x8f
 80152f8:	f000 fd6a 	bl	8015dd0 <__assert_func>
 80152fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015300:	6006      	str	r6, [r0, #0]
 8015302:	60c6      	str	r6, [r0, #12]
 8015304:	b13c      	cbz	r4, 8015316 <_Bfree+0x3a>
 8015306:	69eb      	ldr	r3, [r5, #28]
 8015308:	6862      	ldr	r2, [r4, #4]
 801530a:	68db      	ldr	r3, [r3, #12]
 801530c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015310:	6021      	str	r1, [r4, #0]
 8015312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015316:	bd70      	pop	{r4, r5, r6, pc}
 8015318:	0803ad45 	.word	0x0803ad45
 801531c:	0803adc5 	.word	0x0803adc5

08015320 <__multadd>:
 8015320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015324:	690d      	ldr	r5, [r1, #16]
 8015326:	4607      	mov	r7, r0
 8015328:	460c      	mov	r4, r1
 801532a:	461e      	mov	r6, r3
 801532c:	f101 0c14 	add.w	ip, r1, #20
 8015330:	2000      	movs	r0, #0
 8015332:	f8dc 3000 	ldr.w	r3, [ip]
 8015336:	b299      	uxth	r1, r3
 8015338:	fb02 6101 	mla	r1, r2, r1, r6
 801533c:	0c1e      	lsrs	r6, r3, #16
 801533e:	0c0b      	lsrs	r3, r1, #16
 8015340:	fb02 3306 	mla	r3, r2, r6, r3
 8015344:	b289      	uxth	r1, r1
 8015346:	3001      	adds	r0, #1
 8015348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801534c:	4285      	cmp	r5, r0
 801534e:	f84c 1b04 	str.w	r1, [ip], #4
 8015352:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015356:	dcec      	bgt.n	8015332 <__multadd+0x12>
 8015358:	b30e      	cbz	r6, 801539e <__multadd+0x7e>
 801535a:	68a3      	ldr	r3, [r4, #8]
 801535c:	42ab      	cmp	r3, r5
 801535e:	dc19      	bgt.n	8015394 <__multadd+0x74>
 8015360:	6861      	ldr	r1, [r4, #4]
 8015362:	4638      	mov	r0, r7
 8015364:	3101      	adds	r1, #1
 8015366:	f7ff ff79 	bl	801525c <_Balloc>
 801536a:	4680      	mov	r8, r0
 801536c:	b928      	cbnz	r0, 801537a <__multadd+0x5a>
 801536e:	4602      	mov	r2, r0
 8015370:	4b0c      	ldr	r3, [pc, #48]	; (80153a4 <__multadd+0x84>)
 8015372:	480d      	ldr	r0, [pc, #52]	; (80153a8 <__multadd+0x88>)
 8015374:	21ba      	movs	r1, #186	; 0xba
 8015376:	f000 fd2b 	bl	8015dd0 <__assert_func>
 801537a:	6922      	ldr	r2, [r4, #16]
 801537c:	3202      	adds	r2, #2
 801537e:	f104 010c 	add.w	r1, r4, #12
 8015382:	0092      	lsls	r2, r2, #2
 8015384:	300c      	adds	r0, #12
 8015386:	f000 fd15 	bl	8015db4 <memcpy>
 801538a:	4621      	mov	r1, r4
 801538c:	4638      	mov	r0, r7
 801538e:	f7ff ffa5 	bl	80152dc <_Bfree>
 8015392:	4644      	mov	r4, r8
 8015394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015398:	3501      	adds	r5, #1
 801539a:	615e      	str	r6, [r3, #20]
 801539c:	6125      	str	r5, [r4, #16]
 801539e:	4620      	mov	r0, r4
 80153a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a4:	0803adb4 	.word	0x0803adb4
 80153a8:	0803adc5 	.word	0x0803adc5

080153ac <__hi0bits>:
 80153ac:	0c03      	lsrs	r3, r0, #16
 80153ae:	041b      	lsls	r3, r3, #16
 80153b0:	b9d3      	cbnz	r3, 80153e8 <__hi0bits+0x3c>
 80153b2:	0400      	lsls	r0, r0, #16
 80153b4:	2310      	movs	r3, #16
 80153b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80153ba:	bf04      	itt	eq
 80153bc:	0200      	lsleq	r0, r0, #8
 80153be:	3308      	addeq	r3, #8
 80153c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80153c4:	bf04      	itt	eq
 80153c6:	0100      	lsleq	r0, r0, #4
 80153c8:	3304      	addeq	r3, #4
 80153ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80153ce:	bf04      	itt	eq
 80153d0:	0080      	lsleq	r0, r0, #2
 80153d2:	3302      	addeq	r3, #2
 80153d4:	2800      	cmp	r0, #0
 80153d6:	db05      	blt.n	80153e4 <__hi0bits+0x38>
 80153d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80153dc:	f103 0301 	add.w	r3, r3, #1
 80153e0:	bf08      	it	eq
 80153e2:	2320      	moveq	r3, #32
 80153e4:	4618      	mov	r0, r3
 80153e6:	4770      	bx	lr
 80153e8:	2300      	movs	r3, #0
 80153ea:	e7e4      	b.n	80153b6 <__hi0bits+0xa>

080153ec <__lo0bits>:
 80153ec:	6803      	ldr	r3, [r0, #0]
 80153ee:	f013 0207 	ands.w	r2, r3, #7
 80153f2:	d00c      	beq.n	801540e <__lo0bits+0x22>
 80153f4:	07d9      	lsls	r1, r3, #31
 80153f6:	d422      	bmi.n	801543e <__lo0bits+0x52>
 80153f8:	079a      	lsls	r2, r3, #30
 80153fa:	bf49      	itett	mi
 80153fc:	085b      	lsrmi	r3, r3, #1
 80153fe:	089b      	lsrpl	r3, r3, #2
 8015400:	6003      	strmi	r3, [r0, #0]
 8015402:	2201      	movmi	r2, #1
 8015404:	bf5c      	itt	pl
 8015406:	6003      	strpl	r3, [r0, #0]
 8015408:	2202      	movpl	r2, #2
 801540a:	4610      	mov	r0, r2
 801540c:	4770      	bx	lr
 801540e:	b299      	uxth	r1, r3
 8015410:	b909      	cbnz	r1, 8015416 <__lo0bits+0x2a>
 8015412:	0c1b      	lsrs	r3, r3, #16
 8015414:	2210      	movs	r2, #16
 8015416:	b2d9      	uxtb	r1, r3
 8015418:	b909      	cbnz	r1, 801541e <__lo0bits+0x32>
 801541a:	3208      	adds	r2, #8
 801541c:	0a1b      	lsrs	r3, r3, #8
 801541e:	0719      	lsls	r1, r3, #28
 8015420:	bf04      	itt	eq
 8015422:	091b      	lsreq	r3, r3, #4
 8015424:	3204      	addeq	r2, #4
 8015426:	0799      	lsls	r1, r3, #30
 8015428:	bf04      	itt	eq
 801542a:	089b      	lsreq	r3, r3, #2
 801542c:	3202      	addeq	r2, #2
 801542e:	07d9      	lsls	r1, r3, #31
 8015430:	d403      	bmi.n	801543a <__lo0bits+0x4e>
 8015432:	085b      	lsrs	r3, r3, #1
 8015434:	f102 0201 	add.w	r2, r2, #1
 8015438:	d003      	beq.n	8015442 <__lo0bits+0x56>
 801543a:	6003      	str	r3, [r0, #0]
 801543c:	e7e5      	b.n	801540a <__lo0bits+0x1e>
 801543e:	2200      	movs	r2, #0
 8015440:	e7e3      	b.n	801540a <__lo0bits+0x1e>
 8015442:	2220      	movs	r2, #32
 8015444:	e7e1      	b.n	801540a <__lo0bits+0x1e>
	...

08015448 <__i2b>:
 8015448:	b510      	push	{r4, lr}
 801544a:	460c      	mov	r4, r1
 801544c:	2101      	movs	r1, #1
 801544e:	f7ff ff05 	bl	801525c <_Balloc>
 8015452:	4602      	mov	r2, r0
 8015454:	b928      	cbnz	r0, 8015462 <__i2b+0x1a>
 8015456:	4b05      	ldr	r3, [pc, #20]	; (801546c <__i2b+0x24>)
 8015458:	4805      	ldr	r0, [pc, #20]	; (8015470 <__i2b+0x28>)
 801545a:	f240 1145 	movw	r1, #325	; 0x145
 801545e:	f000 fcb7 	bl	8015dd0 <__assert_func>
 8015462:	2301      	movs	r3, #1
 8015464:	6144      	str	r4, [r0, #20]
 8015466:	6103      	str	r3, [r0, #16]
 8015468:	bd10      	pop	{r4, pc}
 801546a:	bf00      	nop
 801546c:	0803adb4 	.word	0x0803adb4
 8015470:	0803adc5 	.word	0x0803adc5

08015474 <__multiply>:
 8015474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015478:	4691      	mov	r9, r2
 801547a:	690a      	ldr	r2, [r1, #16]
 801547c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015480:	429a      	cmp	r2, r3
 8015482:	bfb8      	it	lt
 8015484:	460b      	movlt	r3, r1
 8015486:	460c      	mov	r4, r1
 8015488:	bfbc      	itt	lt
 801548a:	464c      	movlt	r4, r9
 801548c:	4699      	movlt	r9, r3
 801548e:	6927      	ldr	r7, [r4, #16]
 8015490:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015494:	68a3      	ldr	r3, [r4, #8]
 8015496:	6861      	ldr	r1, [r4, #4]
 8015498:	eb07 060a 	add.w	r6, r7, sl
 801549c:	42b3      	cmp	r3, r6
 801549e:	b085      	sub	sp, #20
 80154a0:	bfb8      	it	lt
 80154a2:	3101      	addlt	r1, #1
 80154a4:	f7ff feda 	bl	801525c <_Balloc>
 80154a8:	b930      	cbnz	r0, 80154b8 <__multiply+0x44>
 80154aa:	4602      	mov	r2, r0
 80154ac:	4b44      	ldr	r3, [pc, #272]	; (80155c0 <__multiply+0x14c>)
 80154ae:	4845      	ldr	r0, [pc, #276]	; (80155c4 <__multiply+0x150>)
 80154b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80154b4:	f000 fc8c 	bl	8015dd0 <__assert_func>
 80154b8:	f100 0514 	add.w	r5, r0, #20
 80154bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80154c0:	462b      	mov	r3, r5
 80154c2:	2200      	movs	r2, #0
 80154c4:	4543      	cmp	r3, r8
 80154c6:	d321      	bcc.n	801550c <__multiply+0x98>
 80154c8:	f104 0314 	add.w	r3, r4, #20
 80154cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80154d0:	f109 0314 	add.w	r3, r9, #20
 80154d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80154d8:	9202      	str	r2, [sp, #8]
 80154da:	1b3a      	subs	r2, r7, r4
 80154dc:	3a15      	subs	r2, #21
 80154de:	f022 0203 	bic.w	r2, r2, #3
 80154e2:	3204      	adds	r2, #4
 80154e4:	f104 0115 	add.w	r1, r4, #21
 80154e8:	428f      	cmp	r7, r1
 80154ea:	bf38      	it	cc
 80154ec:	2204      	movcc	r2, #4
 80154ee:	9201      	str	r2, [sp, #4]
 80154f0:	9a02      	ldr	r2, [sp, #8]
 80154f2:	9303      	str	r3, [sp, #12]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d80c      	bhi.n	8015512 <__multiply+0x9e>
 80154f8:	2e00      	cmp	r6, #0
 80154fa:	dd03      	ble.n	8015504 <__multiply+0x90>
 80154fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015500:	2b00      	cmp	r3, #0
 8015502:	d05b      	beq.n	80155bc <__multiply+0x148>
 8015504:	6106      	str	r6, [r0, #16]
 8015506:	b005      	add	sp, #20
 8015508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801550c:	f843 2b04 	str.w	r2, [r3], #4
 8015510:	e7d8      	b.n	80154c4 <__multiply+0x50>
 8015512:	f8b3 a000 	ldrh.w	sl, [r3]
 8015516:	f1ba 0f00 	cmp.w	sl, #0
 801551a:	d024      	beq.n	8015566 <__multiply+0xf2>
 801551c:	f104 0e14 	add.w	lr, r4, #20
 8015520:	46a9      	mov	r9, r5
 8015522:	f04f 0c00 	mov.w	ip, #0
 8015526:	f85e 2b04 	ldr.w	r2, [lr], #4
 801552a:	f8d9 1000 	ldr.w	r1, [r9]
 801552e:	fa1f fb82 	uxth.w	fp, r2
 8015532:	b289      	uxth	r1, r1
 8015534:	fb0a 110b 	mla	r1, sl, fp, r1
 8015538:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801553c:	f8d9 2000 	ldr.w	r2, [r9]
 8015540:	4461      	add	r1, ip
 8015542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015546:	fb0a c20b 	mla	r2, sl, fp, ip
 801554a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801554e:	b289      	uxth	r1, r1
 8015550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015554:	4577      	cmp	r7, lr
 8015556:	f849 1b04 	str.w	r1, [r9], #4
 801555a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801555e:	d8e2      	bhi.n	8015526 <__multiply+0xb2>
 8015560:	9a01      	ldr	r2, [sp, #4]
 8015562:	f845 c002 	str.w	ip, [r5, r2]
 8015566:	9a03      	ldr	r2, [sp, #12]
 8015568:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801556c:	3304      	adds	r3, #4
 801556e:	f1b9 0f00 	cmp.w	r9, #0
 8015572:	d021      	beq.n	80155b8 <__multiply+0x144>
 8015574:	6829      	ldr	r1, [r5, #0]
 8015576:	f104 0c14 	add.w	ip, r4, #20
 801557a:	46ae      	mov	lr, r5
 801557c:	f04f 0a00 	mov.w	sl, #0
 8015580:	f8bc b000 	ldrh.w	fp, [ip]
 8015584:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015588:	fb09 220b 	mla	r2, r9, fp, r2
 801558c:	4452      	add	r2, sl
 801558e:	b289      	uxth	r1, r1
 8015590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015594:	f84e 1b04 	str.w	r1, [lr], #4
 8015598:	f85c 1b04 	ldr.w	r1, [ip], #4
 801559c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80155a0:	f8be 1000 	ldrh.w	r1, [lr]
 80155a4:	fb09 110a 	mla	r1, r9, sl, r1
 80155a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80155ac:	4567      	cmp	r7, ip
 80155ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80155b2:	d8e5      	bhi.n	8015580 <__multiply+0x10c>
 80155b4:	9a01      	ldr	r2, [sp, #4]
 80155b6:	50a9      	str	r1, [r5, r2]
 80155b8:	3504      	adds	r5, #4
 80155ba:	e799      	b.n	80154f0 <__multiply+0x7c>
 80155bc:	3e01      	subs	r6, #1
 80155be:	e79b      	b.n	80154f8 <__multiply+0x84>
 80155c0:	0803adb4 	.word	0x0803adb4
 80155c4:	0803adc5 	.word	0x0803adc5

080155c8 <__pow5mult>:
 80155c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155cc:	4615      	mov	r5, r2
 80155ce:	f012 0203 	ands.w	r2, r2, #3
 80155d2:	4606      	mov	r6, r0
 80155d4:	460f      	mov	r7, r1
 80155d6:	d007      	beq.n	80155e8 <__pow5mult+0x20>
 80155d8:	4c25      	ldr	r4, [pc, #148]	; (8015670 <__pow5mult+0xa8>)
 80155da:	3a01      	subs	r2, #1
 80155dc:	2300      	movs	r3, #0
 80155de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80155e2:	f7ff fe9d 	bl	8015320 <__multadd>
 80155e6:	4607      	mov	r7, r0
 80155e8:	10ad      	asrs	r5, r5, #2
 80155ea:	d03d      	beq.n	8015668 <__pow5mult+0xa0>
 80155ec:	69f4      	ldr	r4, [r6, #28]
 80155ee:	b97c      	cbnz	r4, 8015610 <__pow5mult+0x48>
 80155f0:	2010      	movs	r0, #16
 80155f2:	f7ff fd7f 	bl	80150f4 <malloc>
 80155f6:	4602      	mov	r2, r0
 80155f8:	61f0      	str	r0, [r6, #28]
 80155fa:	b928      	cbnz	r0, 8015608 <__pow5mult+0x40>
 80155fc:	4b1d      	ldr	r3, [pc, #116]	; (8015674 <__pow5mult+0xac>)
 80155fe:	481e      	ldr	r0, [pc, #120]	; (8015678 <__pow5mult+0xb0>)
 8015600:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015604:	f000 fbe4 	bl	8015dd0 <__assert_func>
 8015608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801560c:	6004      	str	r4, [r0, #0]
 801560e:	60c4      	str	r4, [r0, #12]
 8015610:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015618:	b94c      	cbnz	r4, 801562e <__pow5mult+0x66>
 801561a:	f240 2171 	movw	r1, #625	; 0x271
 801561e:	4630      	mov	r0, r6
 8015620:	f7ff ff12 	bl	8015448 <__i2b>
 8015624:	2300      	movs	r3, #0
 8015626:	f8c8 0008 	str.w	r0, [r8, #8]
 801562a:	4604      	mov	r4, r0
 801562c:	6003      	str	r3, [r0, #0]
 801562e:	f04f 0900 	mov.w	r9, #0
 8015632:	07eb      	lsls	r3, r5, #31
 8015634:	d50a      	bpl.n	801564c <__pow5mult+0x84>
 8015636:	4639      	mov	r1, r7
 8015638:	4622      	mov	r2, r4
 801563a:	4630      	mov	r0, r6
 801563c:	f7ff ff1a 	bl	8015474 <__multiply>
 8015640:	4639      	mov	r1, r7
 8015642:	4680      	mov	r8, r0
 8015644:	4630      	mov	r0, r6
 8015646:	f7ff fe49 	bl	80152dc <_Bfree>
 801564a:	4647      	mov	r7, r8
 801564c:	106d      	asrs	r5, r5, #1
 801564e:	d00b      	beq.n	8015668 <__pow5mult+0xa0>
 8015650:	6820      	ldr	r0, [r4, #0]
 8015652:	b938      	cbnz	r0, 8015664 <__pow5mult+0x9c>
 8015654:	4622      	mov	r2, r4
 8015656:	4621      	mov	r1, r4
 8015658:	4630      	mov	r0, r6
 801565a:	f7ff ff0b 	bl	8015474 <__multiply>
 801565e:	6020      	str	r0, [r4, #0]
 8015660:	f8c0 9000 	str.w	r9, [r0]
 8015664:	4604      	mov	r4, r0
 8015666:	e7e4      	b.n	8015632 <__pow5mult+0x6a>
 8015668:	4638      	mov	r0, r7
 801566a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801566e:	bf00      	nop
 8015670:	0803af10 	.word	0x0803af10
 8015674:	0803ad45 	.word	0x0803ad45
 8015678:	0803adc5 	.word	0x0803adc5

0801567c <__lshift>:
 801567c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015680:	460c      	mov	r4, r1
 8015682:	6849      	ldr	r1, [r1, #4]
 8015684:	6923      	ldr	r3, [r4, #16]
 8015686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801568a:	68a3      	ldr	r3, [r4, #8]
 801568c:	4607      	mov	r7, r0
 801568e:	4691      	mov	r9, r2
 8015690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015694:	f108 0601 	add.w	r6, r8, #1
 8015698:	42b3      	cmp	r3, r6
 801569a:	db0b      	blt.n	80156b4 <__lshift+0x38>
 801569c:	4638      	mov	r0, r7
 801569e:	f7ff fddd 	bl	801525c <_Balloc>
 80156a2:	4605      	mov	r5, r0
 80156a4:	b948      	cbnz	r0, 80156ba <__lshift+0x3e>
 80156a6:	4602      	mov	r2, r0
 80156a8:	4b28      	ldr	r3, [pc, #160]	; (801574c <__lshift+0xd0>)
 80156aa:	4829      	ldr	r0, [pc, #164]	; (8015750 <__lshift+0xd4>)
 80156ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80156b0:	f000 fb8e 	bl	8015dd0 <__assert_func>
 80156b4:	3101      	adds	r1, #1
 80156b6:	005b      	lsls	r3, r3, #1
 80156b8:	e7ee      	b.n	8015698 <__lshift+0x1c>
 80156ba:	2300      	movs	r3, #0
 80156bc:	f100 0114 	add.w	r1, r0, #20
 80156c0:	f100 0210 	add.w	r2, r0, #16
 80156c4:	4618      	mov	r0, r3
 80156c6:	4553      	cmp	r3, sl
 80156c8:	db33      	blt.n	8015732 <__lshift+0xb6>
 80156ca:	6920      	ldr	r0, [r4, #16]
 80156cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80156d0:	f104 0314 	add.w	r3, r4, #20
 80156d4:	f019 091f 	ands.w	r9, r9, #31
 80156d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80156dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80156e0:	d02b      	beq.n	801573a <__lshift+0xbe>
 80156e2:	f1c9 0e20 	rsb	lr, r9, #32
 80156e6:	468a      	mov	sl, r1
 80156e8:	2200      	movs	r2, #0
 80156ea:	6818      	ldr	r0, [r3, #0]
 80156ec:	fa00 f009 	lsl.w	r0, r0, r9
 80156f0:	4310      	orrs	r0, r2
 80156f2:	f84a 0b04 	str.w	r0, [sl], #4
 80156f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80156fa:	459c      	cmp	ip, r3
 80156fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8015700:	d8f3      	bhi.n	80156ea <__lshift+0x6e>
 8015702:	ebac 0304 	sub.w	r3, ip, r4
 8015706:	3b15      	subs	r3, #21
 8015708:	f023 0303 	bic.w	r3, r3, #3
 801570c:	3304      	adds	r3, #4
 801570e:	f104 0015 	add.w	r0, r4, #21
 8015712:	4584      	cmp	ip, r0
 8015714:	bf38      	it	cc
 8015716:	2304      	movcc	r3, #4
 8015718:	50ca      	str	r2, [r1, r3]
 801571a:	b10a      	cbz	r2, 8015720 <__lshift+0xa4>
 801571c:	f108 0602 	add.w	r6, r8, #2
 8015720:	3e01      	subs	r6, #1
 8015722:	4638      	mov	r0, r7
 8015724:	612e      	str	r6, [r5, #16]
 8015726:	4621      	mov	r1, r4
 8015728:	f7ff fdd8 	bl	80152dc <_Bfree>
 801572c:	4628      	mov	r0, r5
 801572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015732:	f842 0f04 	str.w	r0, [r2, #4]!
 8015736:	3301      	adds	r3, #1
 8015738:	e7c5      	b.n	80156c6 <__lshift+0x4a>
 801573a:	3904      	subs	r1, #4
 801573c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015740:	f841 2f04 	str.w	r2, [r1, #4]!
 8015744:	459c      	cmp	ip, r3
 8015746:	d8f9      	bhi.n	801573c <__lshift+0xc0>
 8015748:	e7ea      	b.n	8015720 <__lshift+0xa4>
 801574a:	bf00      	nop
 801574c:	0803adb4 	.word	0x0803adb4
 8015750:	0803adc5 	.word	0x0803adc5

08015754 <__mcmp>:
 8015754:	b530      	push	{r4, r5, lr}
 8015756:	6902      	ldr	r2, [r0, #16]
 8015758:	690c      	ldr	r4, [r1, #16]
 801575a:	1b12      	subs	r2, r2, r4
 801575c:	d10e      	bne.n	801577c <__mcmp+0x28>
 801575e:	f100 0314 	add.w	r3, r0, #20
 8015762:	3114      	adds	r1, #20
 8015764:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015768:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801576c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015770:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015774:	42a5      	cmp	r5, r4
 8015776:	d003      	beq.n	8015780 <__mcmp+0x2c>
 8015778:	d305      	bcc.n	8015786 <__mcmp+0x32>
 801577a:	2201      	movs	r2, #1
 801577c:	4610      	mov	r0, r2
 801577e:	bd30      	pop	{r4, r5, pc}
 8015780:	4283      	cmp	r3, r0
 8015782:	d3f3      	bcc.n	801576c <__mcmp+0x18>
 8015784:	e7fa      	b.n	801577c <__mcmp+0x28>
 8015786:	f04f 32ff 	mov.w	r2, #4294967295
 801578a:	e7f7      	b.n	801577c <__mcmp+0x28>

0801578c <__mdiff>:
 801578c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015790:	460c      	mov	r4, r1
 8015792:	4606      	mov	r6, r0
 8015794:	4611      	mov	r1, r2
 8015796:	4620      	mov	r0, r4
 8015798:	4690      	mov	r8, r2
 801579a:	f7ff ffdb 	bl	8015754 <__mcmp>
 801579e:	1e05      	subs	r5, r0, #0
 80157a0:	d110      	bne.n	80157c4 <__mdiff+0x38>
 80157a2:	4629      	mov	r1, r5
 80157a4:	4630      	mov	r0, r6
 80157a6:	f7ff fd59 	bl	801525c <_Balloc>
 80157aa:	b930      	cbnz	r0, 80157ba <__mdiff+0x2e>
 80157ac:	4b3a      	ldr	r3, [pc, #232]	; (8015898 <__mdiff+0x10c>)
 80157ae:	4602      	mov	r2, r0
 80157b0:	f240 2137 	movw	r1, #567	; 0x237
 80157b4:	4839      	ldr	r0, [pc, #228]	; (801589c <__mdiff+0x110>)
 80157b6:	f000 fb0b 	bl	8015dd0 <__assert_func>
 80157ba:	2301      	movs	r3, #1
 80157bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80157c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c4:	bfa4      	itt	ge
 80157c6:	4643      	movge	r3, r8
 80157c8:	46a0      	movge	r8, r4
 80157ca:	4630      	mov	r0, r6
 80157cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80157d0:	bfa6      	itte	ge
 80157d2:	461c      	movge	r4, r3
 80157d4:	2500      	movge	r5, #0
 80157d6:	2501      	movlt	r5, #1
 80157d8:	f7ff fd40 	bl	801525c <_Balloc>
 80157dc:	b920      	cbnz	r0, 80157e8 <__mdiff+0x5c>
 80157de:	4b2e      	ldr	r3, [pc, #184]	; (8015898 <__mdiff+0x10c>)
 80157e0:	4602      	mov	r2, r0
 80157e2:	f240 2145 	movw	r1, #581	; 0x245
 80157e6:	e7e5      	b.n	80157b4 <__mdiff+0x28>
 80157e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80157ec:	6926      	ldr	r6, [r4, #16]
 80157ee:	60c5      	str	r5, [r0, #12]
 80157f0:	f104 0914 	add.w	r9, r4, #20
 80157f4:	f108 0514 	add.w	r5, r8, #20
 80157f8:	f100 0e14 	add.w	lr, r0, #20
 80157fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015800:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015804:	f108 0210 	add.w	r2, r8, #16
 8015808:	46f2      	mov	sl, lr
 801580a:	2100      	movs	r1, #0
 801580c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015810:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015814:	fa11 f88b 	uxtah	r8, r1, fp
 8015818:	b299      	uxth	r1, r3
 801581a:	0c1b      	lsrs	r3, r3, #16
 801581c:	eba8 0801 	sub.w	r8, r8, r1
 8015820:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015824:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015828:	fa1f f888 	uxth.w	r8, r8
 801582c:	1419      	asrs	r1, r3, #16
 801582e:	454e      	cmp	r6, r9
 8015830:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015834:	f84a 3b04 	str.w	r3, [sl], #4
 8015838:	d8e8      	bhi.n	801580c <__mdiff+0x80>
 801583a:	1b33      	subs	r3, r6, r4
 801583c:	3b15      	subs	r3, #21
 801583e:	f023 0303 	bic.w	r3, r3, #3
 8015842:	3304      	adds	r3, #4
 8015844:	3415      	adds	r4, #21
 8015846:	42a6      	cmp	r6, r4
 8015848:	bf38      	it	cc
 801584a:	2304      	movcc	r3, #4
 801584c:	441d      	add	r5, r3
 801584e:	4473      	add	r3, lr
 8015850:	469e      	mov	lr, r3
 8015852:	462e      	mov	r6, r5
 8015854:	4566      	cmp	r6, ip
 8015856:	d30e      	bcc.n	8015876 <__mdiff+0xea>
 8015858:	f10c 0203 	add.w	r2, ip, #3
 801585c:	1b52      	subs	r2, r2, r5
 801585e:	f022 0203 	bic.w	r2, r2, #3
 8015862:	3d03      	subs	r5, #3
 8015864:	45ac      	cmp	ip, r5
 8015866:	bf38      	it	cc
 8015868:	2200      	movcc	r2, #0
 801586a:	4413      	add	r3, r2
 801586c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015870:	b17a      	cbz	r2, 8015892 <__mdiff+0x106>
 8015872:	6107      	str	r7, [r0, #16]
 8015874:	e7a4      	b.n	80157c0 <__mdiff+0x34>
 8015876:	f856 8b04 	ldr.w	r8, [r6], #4
 801587a:	fa11 f288 	uxtah	r2, r1, r8
 801587e:	1414      	asrs	r4, r2, #16
 8015880:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015884:	b292      	uxth	r2, r2
 8015886:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801588a:	f84e 2b04 	str.w	r2, [lr], #4
 801588e:	1421      	asrs	r1, r4, #16
 8015890:	e7e0      	b.n	8015854 <__mdiff+0xc8>
 8015892:	3f01      	subs	r7, #1
 8015894:	e7ea      	b.n	801586c <__mdiff+0xe0>
 8015896:	bf00      	nop
 8015898:	0803adb4 	.word	0x0803adb4
 801589c:	0803adc5 	.word	0x0803adc5

080158a0 <__d2b>:
 80158a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158a4:	460f      	mov	r7, r1
 80158a6:	2101      	movs	r1, #1
 80158a8:	ec59 8b10 	vmov	r8, r9, d0
 80158ac:	4616      	mov	r6, r2
 80158ae:	f7ff fcd5 	bl	801525c <_Balloc>
 80158b2:	4604      	mov	r4, r0
 80158b4:	b930      	cbnz	r0, 80158c4 <__d2b+0x24>
 80158b6:	4602      	mov	r2, r0
 80158b8:	4b24      	ldr	r3, [pc, #144]	; (801594c <__d2b+0xac>)
 80158ba:	4825      	ldr	r0, [pc, #148]	; (8015950 <__d2b+0xb0>)
 80158bc:	f240 310f 	movw	r1, #783	; 0x30f
 80158c0:	f000 fa86 	bl	8015dd0 <__assert_func>
 80158c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80158c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80158cc:	bb2d      	cbnz	r5, 801591a <__d2b+0x7a>
 80158ce:	9301      	str	r3, [sp, #4]
 80158d0:	f1b8 0300 	subs.w	r3, r8, #0
 80158d4:	d026      	beq.n	8015924 <__d2b+0x84>
 80158d6:	4668      	mov	r0, sp
 80158d8:	9300      	str	r3, [sp, #0]
 80158da:	f7ff fd87 	bl	80153ec <__lo0bits>
 80158de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80158e2:	b1e8      	cbz	r0, 8015920 <__d2b+0x80>
 80158e4:	f1c0 0320 	rsb	r3, r0, #32
 80158e8:	fa02 f303 	lsl.w	r3, r2, r3
 80158ec:	430b      	orrs	r3, r1
 80158ee:	40c2      	lsrs	r2, r0
 80158f0:	6163      	str	r3, [r4, #20]
 80158f2:	9201      	str	r2, [sp, #4]
 80158f4:	9b01      	ldr	r3, [sp, #4]
 80158f6:	61a3      	str	r3, [r4, #24]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	bf14      	ite	ne
 80158fc:	2202      	movne	r2, #2
 80158fe:	2201      	moveq	r2, #1
 8015900:	6122      	str	r2, [r4, #16]
 8015902:	b1bd      	cbz	r5, 8015934 <__d2b+0x94>
 8015904:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015908:	4405      	add	r5, r0
 801590a:	603d      	str	r5, [r7, #0]
 801590c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015910:	6030      	str	r0, [r6, #0]
 8015912:	4620      	mov	r0, r4
 8015914:	b003      	add	sp, #12
 8015916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801591a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801591e:	e7d6      	b.n	80158ce <__d2b+0x2e>
 8015920:	6161      	str	r1, [r4, #20]
 8015922:	e7e7      	b.n	80158f4 <__d2b+0x54>
 8015924:	a801      	add	r0, sp, #4
 8015926:	f7ff fd61 	bl	80153ec <__lo0bits>
 801592a:	9b01      	ldr	r3, [sp, #4]
 801592c:	6163      	str	r3, [r4, #20]
 801592e:	3020      	adds	r0, #32
 8015930:	2201      	movs	r2, #1
 8015932:	e7e5      	b.n	8015900 <__d2b+0x60>
 8015934:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015938:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801593c:	6038      	str	r0, [r7, #0]
 801593e:	6918      	ldr	r0, [r3, #16]
 8015940:	f7ff fd34 	bl	80153ac <__hi0bits>
 8015944:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015948:	e7e2      	b.n	8015910 <__d2b+0x70>
 801594a:	bf00      	nop
 801594c:	0803adb4 	.word	0x0803adb4
 8015950:	0803adc5 	.word	0x0803adc5

08015954 <__ssputs_r>:
 8015954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015958:	688e      	ldr	r6, [r1, #8]
 801595a:	461f      	mov	r7, r3
 801595c:	42be      	cmp	r6, r7
 801595e:	680b      	ldr	r3, [r1, #0]
 8015960:	4682      	mov	sl, r0
 8015962:	460c      	mov	r4, r1
 8015964:	4690      	mov	r8, r2
 8015966:	d82c      	bhi.n	80159c2 <__ssputs_r+0x6e>
 8015968:	898a      	ldrh	r2, [r1, #12]
 801596a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801596e:	d026      	beq.n	80159be <__ssputs_r+0x6a>
 8015970:	6965      	ldr	r5, [r4, #20]
 8015972:	6909      	ldr	r1, [r1, #16]
 8015974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015978:	eba3 0901 	sub.w	r9, r3, r1
 801597c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015980:	1c7b      	adds	r3, r7, #1
 8015982:	444b      	add	r3, r9
 8015984:	106d      	asrs	r5, r5, #1
 8015986:	429d      	cmp	r5, r3
 8015988:	bf38      	it	cc
 801598a:	461d      	movcc	r5, r3
 801598c:	0553      	lsls	r3, r2, #21
 801598e:	d527      	bpl.n	80159e0 <__ssputs_r+0x8c>
 8015990:	4629      	mov	r1, r5
 8015992:	f7ff fbd7 	bl	8015144 <_malloc_r>
 8015996:	4606      	mov	r6, r0
 8015998:	b360      	cbz	r0, 80159f4 <__ssputs_r+0xa0>
 801599a:	6921      	ldr	r1, [r4, #16]
 801599c:	464a      	mov	r2, r9
 801599e:	f000 fa09 	bl	8015db4 <memcpy>
 80159a2:	89a3      	ldrh	r3, [r4, #12]
 80159a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80159a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159ac:	81a3      	strh	r3, [r4, #12]
 80159ae:	6126      	str	r6, [r4, #16]
 80159b0:	6165      	str	r5, [r4, #20]
 80159b2:	444e      	add	r6, r9
 80159b4:	eba5 0509 	sub.w	r5, r5, r9
 80159b8:	6026      	str	r6, [r4, #0]
 80159ba:	60a5      	str	r5, [r4, #8]
 80159bc:	463e      	mov	r6, r7
 80159be:	42be      	cmp	r6, r7
 80159c0:	d900      	bls.n	80159c4 <__ssputs_r+0x70>
 80159c2:	463e      	mov	r6, r7
 80159c4:	6820      	ldr	r0, [r4, #0]
 80159c6:	4632      	mov	r2, r6
 80159c8:	4641      	mov	r1, r8
 80159ca:	f000 f9c9 	bl	8015d60 <memmove>
 80159ce:	68a3      	ldr	r3, [r4, #8]
 80159d0:	1b9b      	subs	r3, r3, r6
 80159d2:	60a3      	str	r3, [r4, #8]
 80159d4:	6823      	ldr	r3, [r4, #0]
 80159d6:	4433      	add	r3, r6
 80159d8:	6023      	str	r3, [r4, #0]
 80159da:	2000      	movs	r0, #0
 80159dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159e0:	462a      	mov	r2, r5
 80159e2:	f000 fa3b 	bl	8015e5c <_realloc_r>
 80159e6:	4606      	mov	r6, r0
 80159e8:	2800      	cmp	r0, #0
 80159ea:	d1e0      	bne.n	80159ae <__ssputs_r+0x5a>
 80159ec:	6921      	ldr	r1, [r4, #16]
 80159ee:	4650      	mov	r0, sl
 80159f0:	f7ff fb34 	bl	801505c <_free_r>
 80159f4:	230c      	movs	r3, #12
 80159f6:	f8ca 3000 	str.w	r3, [sl]
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a00:	81a3      	strh	r3, [r4, #12]
 8015a02:	f04f 30ff 	mov.w	r0, #4294967295
 8015a06:	e7e9      	b.n	80159dc <__ssputs_r+0x88>

08015a08 <_svfiprintf_r>:
 8015a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0c:	4698      	mov	r8, r3
 8015a0e:	898b      	ldrh	r3, [r1, #12]
 8015a10:	061b      	lsls	r3, r3, #24
 8015a12:	b09d      	sub	sp, #116	; 0x74
 8015a14:	4607      	mov	r7, r0
 8015a16:	460d      	mov	r5, r1
 8015a18:	4614      	mov	r4, r2
 8015a1a:	d50e      	bpl.n	8015a3a <_svfiprintf_r+0x32>
 8015a1c:	690b      	ldr	r3, [r1, #16]
 8015a1e:	b963      	cbnz	r3, 8015a3a <_svfiprintf_r+0x32>
 8015a20:	2140      	movs	r1, #64	; 0x40
 8015a22:	f7ff fb8f 	bl	8015144 <_malloc_r>
 8015a26:	6028      	str	r0, [r5, #0]
 8015a28:	6128      	str	r0, [r5, #16]
 8015a2a:	b920      	cbnz	r0, 8015a36 <_svfiprintf_r+0x2e>
 8015a2c:	230c      	movs	r3, #12
 8015a2e:	603b      	str	r3, [r7, #0]
 8015a30:	f04f 30ff 	mov.w	r0, #4294967295
 8015a34:	e0d0      	b.n	8015bd8 <_svfiprintf_r+0x1d0>
 8015a36:	2340      	movs	r3, #64	; 0x40
 8015a38:	616b      	str	r3, [r5, #20]
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8015a3e:	2320      	movs	r3, #32
 8015a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a48:	2330      	movs	r3, #48	; 0x30
 8015a4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015bf0 <_svfiprintf_r+0x1e8>
 8015a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a52:	f04f 0901 	mov.w	r9, #1
 8015a56:	4623      	mov	r3, r4
 8015a58:	469a      	mov	sl, r3
 8015a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a5e:	b10a      	cbz	r2, 8015a64 <_svfiprintf_r+0x5c>
 8015a60:	2a25      	cmp	r2, #37	; 0x25
 8015a62:	d1f9      	bne.n	8015a58 <_svfiprintf_r+0x50>
 8015a64:	ebba 0b04 	subs.w	fp, sl, r4
 8015a68:	d00b      	beq.n	8015a82 <_svfiprintf_r+0x7a>
 8015a6a:	465b      	mov	r3, fp
 8015a6c:	4622      	mov	r2, r4
 8015a6e:	4629      	mov	r1, r5
 8015a70:	4638      	mov	r0, r7
 8015a72:	f7ff ff6f 	bl	8015954 <__ssputs_r>
 8015a76:	3001      	adds	r0, #1
 8015a78:	f000 80a9 	beq.w	8015bce <_svfiprintf_r+0x1c6>
 8015a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a7e:	445a      	add	r2, fp
 8015a80:	9209      	str	r2, [sp, #36]	; 0x24
 8015a82:	f89a 3000 	ldrb.w	r3, [sl]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f000 80a1 	beq.w	8015bce <_svfiprintf_r+0x1c6>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a96:	f10a 0a01 	add.w	sl, sl, #1
 8015a9a:	9304      	str	r3, [sp, #16]
 8015a9c:	9307      	str	r3, [sp, #28]
 8015a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8015aa4:	4654      	mov	r4, sl
 8015aa6:	2205      	movs	r2, #5
 8015aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015aac:	4850      	ldr	r0, [pc, #320]	; (8015bf0 <_svfiprintf_r+0x1e8>)
 8015aae:	f7ea fb8f 	bl	80001d0 <memchr>
 8015ab2:	9a04      	ldr	r2, [sp, #16]
 8015ab4:	b9d8      	cbnz	r0, 8015aee <_svfiprintf_r+0xe6>
 8015ab6:	06d0      	lsls	r0, r2, #27
 8015ab8:	bf44      	itt	mi
 8015aba:	2320      	movmi	r3, #32
 8015abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ac0:	0711      	lsls	r1, r2, #28
 8015ac2:	bf44      	itt	mi
 8015ac4:	232b      	movmi	r3, #43	; 0x2b
 8015ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015aca:	f89a 3000 	ldrb.w	r3, [sl]
 8015ace:	2b2a      	cmp	r3, #42	; 0x2a
 8015ad0:	d015      	beq.n	8015afe <_svfiprintf_r+0xf6>
 8015ad2:	9a07      	ldr	r2, [sp, #28]
 8015ad4:	4654      	mov	r4, sl
 8015ad6:	2000      	movs	r0, #0
 8015ad8:	f04f 0c0a 	mov.w	ip, #10
 8015adc:	4621      	mov	r1, r4
 8015ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ae2:	3b30      	subs	r3, #48	; 0x30
 8015ae4:	2b09      	cmp	r3, #9
 8015ae6:	d94d      	bls.n	8015b84 <_svfiprintf_r+0x17c>
 8015ae8:	b1b0      	cbz	r0, 8015b18 <_svfiprintf_r+0x110>
 8015aea:	9207      	str	r2, [sp, #28]
 8015aec:	e014      	b.n	8015b18 <_svfiprintf_r+0x110>
 8015aee:	eba0 0308 	sub.w	r3, r0, r8
 8015af2:	fa09 f303 	lsl.w	r3, r9, r3
 8015af6:	4313      	orrs	r3, r2
 8015af8:	9304      	str	r3, [sp, #16]
 8015afa:	46a2      	mov	sl, r4
 8015afc:	e7d2      	b.n	8015aa4 <_svfiprintf_r+0x9c>
 8015afe:	9b03      	ldr	r3, [sp, #12]
 8015b00:	1d19      	adds	r1, r3, #4
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	9103      	str	r1, [sp, #12]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	bfbb      	ittet	lt
 8015b0a:	425b      	neglt	r3, r3
 8015b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8015b10:	9307      	strge	r3, [sp, #28]
 8015b12:	9307      	strlt	r3, [sp, #28]
 8015b14:	bfb8      	it	lt
 8015b16:	9204      	strlt	r2, [sp, #16]
 8015b18:	7823      	ldrb	r3, [r4, #0]
 8015b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8015b1c:	d10c      	bne.n	8015b38 <_svfiprintf_r+0x130>
 8015b1e:	7863      	ldrb	r3, [r4, #1]
 8015b20:	2b2a      	cmp	r3, #42	; 0x2a
 8015b22:	d134      	bne.n	8015b8e <_svfiprintf_r+0x186>
 8015b24:	9b03      	ldr	r3, [sp, #12]
 8015b26:	1d1a      	adds	r2, r3, #4
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	9203      	str	r2, [sp, #12]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	bfb8      	it	lt
 8015b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b34:	3402      	adds	r4, #2
 8015b36:	9305      	str	r3, [sp, #20]
 8015b38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015c00 <_svfiprintf_r+0x1f8>
 8015b3c:	7821      	ldrb	r1, [r4, #0]
 8015b3e:	2203      	movs	r2, #3
 8015b40:	4650      	mov	r0, sl
 8015b42:	f7ea fb45 	bl	80001d0 <memchr>
 8015b46:	b138      	cbz	r0, 8015b58 <_svfiprintf_r+0x150>
 8015b48:	9b04      	ldr	r3, [sp, #16]
 8015b4a:	eba0 000a 	sub.w	r0, r0, sl
 8015b4e:	2240      	movs	r2, #64	; 0x40
 8015b50:	4082      	lsls	r2, r0
 8015b52:	4313      	orrs	r3, r2
 8015b54:	3401      	adds	r4, #1
 8015b56:	9304      	str	r3, [sp, #16]
 8015b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b5c:	4825      	ldr	r0, [pc, #148]	; (8015bf4 <_svfiprintf_r+0x1ec>)
 8015b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b62:	2206      	movs	r2, #6
 8015b64:	f7ea fb34 	bl	80001d0 <memchr>
 8015b68:	2800      	cmp	r0, #0
 8015b6a:	d038      	beq.n	8015bde <_svfiprintf_r+0x1d6>
 8015b6c:	4b22      	ldr	r3, [pc, #136]	; (8015bf8 <_svfiprintf_r+0x1f0>)
 8015b6e:	bb1b      	cbnz	r3, 8015bb8 <_svfiprintf_r+0x1b0>
 8015b70:	9b03      	ldr	r3, [sp, #12]
 8015b72:	3307      	adds	r3, #7
 8015b74:	f023 0307 	bic.w	r3, r3, #7
 8015b78:	3308      	adds	r3, #8
 8015b7a:	9303      	str	r3, [sp, #12]
 8015b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b7e:	4433      	add	r3, r6
 8015b80:	9309      	str	r3, [sp, #36]	; 0x24
 8015b82:	e768      	b.n	8015a56 <_svfiprintf_r+0x4e>
 8015b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b88:	460c      	mov	r4, r1
 8015b8a:	2001      	movs	r0, #1
 8015b8c:	e7a6      	b.n	8015adc <_svfiprintf_r+0xd4>
 8015b8e:	2300      	movs	r3, #0
 8015b90:	3401      	adds	r4, #1
 8015b92:	9305      	str	r3, [sp, #20]
 8015b94:	4619      	mov	r1, r3
 8015b96:	f04f 0c0a 	mov.w	ip, #10
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ba0:	3a30      	subs	r2, #48	; 0x30
 8015ba2:	2a09      	cmp	r2, #9
 8015ba4:	d903      	bls.n	8015bae <_svfiprintf_r+0x1a6>
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d0c6      	beq.n	8015b38 <_svfiprintf_r+0x130>
 8015baa:	9105      	str	r1, [sp, #20]
 8015bac:	e7c4      	b.n	8015b38 <_svfiprintf_r+0x130>
 8015bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	e7f0      	b.n	8015b9a <_svfiprintf_r+0x192>
 8015bb8:	ab03      	add	r3, sp, #12
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	462a      	mov	r2, r5
 8015bbe:	4b0f      	ldr	r3, [pc, #60]	; (8015bfc <_svfiprintf_r+0x1f4>)
 8015bc0:	a904      	add	r1, sp, #16
 8015bc2:	4638      	mov	r0, r7
 8015bc4:	f7fd fe56 	bl	8013874 <_printf_float>
 8015bc8:	1c42      	adds	r2, r0, #1
 8015bca:	4606      	mov	r6, r0
 8015bcc:	d1d6      	bne.n	8015b7c <_svfiprintf_r+0x174>
 8015bce:	89ab      	ldrh	r3, [r5, #12]
 8015bd0:	065b      	lsls	r3, r3, #25
 8015bd2:	f53f af2d 	bmi.w	8015a30 <_svfiprintf_r+0x28>
 8015bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bd8:	b01d      	add	sp, #116	; 0x74
 8015bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bde:	ab03      	add	r3, sp, #12
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	462a      	mov	r2, r5
 8015be4:	4b05      	ldr	r3, [pc, #20]	; (8015bfc <_svfiprintf_r+0x1f4>)
 8015be6:	a904      	add	r1, sp, #16
 8015be8:	4638      	mov	r0, r7
 8015bea:	f7fe f8e7 	bl	8013dbc <_printf_i>
 8015bee:	e7eb      	b.n	8015bc8 <_svfiprintf_r+0x1c0>
 8015bf0:	0803af1c 	.word	0x0803af1c
 8015bf4:	0803af26 	.word	0x0803af26
 8015bf8:	08013875 	.word	0x08013875
 8015bfc:	08015955 	.word	0x08015955
 8015c00:	0803af22 	.word	0x0803af22

08015c04 <__sflush_r>:
 8015c04:	898a      	ldrh	r2, [r1, #12]
 8015c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c0a:	4605      	mov	r5, r0
 8015c0c:	0710      	lsls	r0, r2, #28
 8015c0e:	460c      	mov	r4, r1
 8015c10:	d458      	bmi.n	8015cc4 <__sflush_r+0xc0>
 8015c12:	684b      	ldr	r3, [r1, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	dc05      	bgt.n	8015c24 <__sflush_r+0x20>
 8015c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	dc02      	bgt.n	8015c24 <__sflush_r+0x20>
 8015c1e:	2000      	movs	r0, #0
 8015c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c26:	2e00      	cmp	r6, #0
 8015c28:	d0f9      	beq.n	8015c1e <__sflush_r+0x1a>
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015c30:	682f      	ldr	r7, [r5, #0]
 8015c32:	6a21      	ldr	r1, [r4, #32]
 8015c34:	602b      	str	r3, [r5, #0]
 8015c36:	d032      	beq.n	8015c9e <__sflush_r+0x9a>
 8015c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015c3a:	89a3      	ldrh	r3, [r4, #12]
 8015c3c:	075a      	lsls	r2, r3, #29
 8015c3e:	d505      	bpl.n	8015c4c <__sflush_r+0x48>
 8015c40:	6863      	ldr	r3, [r4, #4]
 8015c42:	1ac0      	subs	r0, r0, r3
 8015c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c46:	b10b      	cbz	r3, 8015c4c <__sflush_r+0x48>
 8015c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c4a:	1ac0      	subs	r0, r0, r3
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	4602      	mov	r2, r0
 8015c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c52:	6a21      	ldr	r1, [r4, #32]
 8015c54:	4628      	mov	r0, r5
 8015c56:	47b0      	blx	r6
 8015c58:	1c43      	adds	r3, r0, #1
 8015c5a:	89a3      	ldrh	r3, [r4, #12]
 8015c5c:	d106      	bne.n	8015c6c <__sflush_r+0x68>
 8015c5e:	6829      	ldr	r1, [r5, #0]
 8015c60:	291d      	cmp	r1, #29
 8015c62:	d82b      	bhi.n	8015cbc <__sflush_r+0xb8>
 8015c64:	4a29      	ldr	r2, [pc, #164]	; (8015d0c <__sflush_r+0x108>)
 8015c66:	410a      	asrs	r2, r1
 8015c68:	07d6      	lsls	r6, r2, #31
 8015c6a:	d427      	bmi.n	8015cbc <__sflush_r+0xb8>
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	6062      	str	r2, [r4, #4]
 8015c70:	04d9      	lsls	r1, r3, #19
 8015c72:	6922      	ldr	r2, [r4, #16]
 8015c74:	6022      	str	r2, [r4, #0]
 8015c76:	d504      	bpl.n	8015c82 <__sflush_r+0x7e>
 8015c78:	1c42      	adds	r2, r0, #1
 8015c7a:	d101      	bne.n	8015c80 <__sflush_r+0x7c>
 8015c7c:	682b      	ldr	r3, [r5, #0]
 8015c7e:	b903      	cbnz	r3, 8015c82 <__sflush_r+0x7e>
 8015c80:	6560      	str	r0, [r4, #84]	; 0x54
 8015c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c84:	602f      	str	r7, [r5, #0]
 8015c86:	2900      	cmp	r1, #0
 8015c88:	d0c9      	beq.n	8015c1e <__sflush_r+0x1a>
 8015c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c8e:	4299      	cmp	r1, r3
 8015c90:	d002      	beq.n	8015c98 <__sflush_r+0x94>
 8015c92:	4628      	mov	r0, r5
 8015c94:	f7ff f9e2 	bl	801505c <_free_r>
 8015c98:	2000      	movs	r0, #0
 8015c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8015c9c:	e7c0      	b.n	8015c20 <__sflush_r+0x1c>
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	47b0      	blx	r6
 8015ca4:	1c41      	adds	r1, r0, #1
 8015ca6:	d1c8      	bne.n	8015c3a <__sflush_r+0x36>
 8015ca8:	682b      	ldr	r3, [r5, #0]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d0c5      	beq.n	8015c3a <__sflush_r+0x36>
 8015cae:	2b1d      	cmp	r3, #29
 8015cb0:	d001      	beq.n	8015cb6 <__sflush_r+0xb2>
 8015cb2:	2b16      	cmp	r3, #22
 8015cb4:	d101      	bne.n	8015cba <__sflush_r+0xb6>
 8015cb6:	602f      	str	r7, [r5, #0]
 8015cb8:	e7b1      	b.n	8015c1e <__sflush_r+0x1a>
 8015cba:	89a3      	ldrh	r3, [r4, #12]
 8015cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cc0:	81a3      	strh	r3, [r4, #12]
 8015cc2:	e7ad      	b.n	8015c20 <__sflush_r+0x1c>
 8015cc4:	690f      	ldr	r7, [r1, #16]
 8015cc6:	2f00      	cmp	r7, #0
 8015cc8:	d0a9      	beq.n	8015c1e <__sflush_r+0x1a>
 8015cca:	0793      	lsls	r3, r2, #30
 8015ccc:	680e      	ldr	r6, [r1, #0]
 8015cce:	bf08      	it	eq
 8015cd0:	694b      	ldreq	r3, [r1, #20]
 8015cd2:	600f      	str	r7, [r1, #0]
 8015cd4:	bf18      	it	ne
 8015cd6:	2300      	movne	r3, #0
 8015cd8:	eba6 0807 	sub.w	r8, r6, r7
 8015cdc:	608b      	str	r3, [r1, #8]
 8015cde:	f1b8 0f00 	cmp.w	r8, #0
 8015ce2:	dd9c      	ble.n	8015c1e <__sflush_r+0x1a>
 8015ce4:	6a21      	ldr	r1, [r4, #32]
 8015ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ce8:	4643      	mov	r3, r8
 8015cea:	463a      	mov	r2, r7
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b0      	blx	r6
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	dc06      	bgt.n	8015d02 <__sflush_r+0xfe>
 8015cf4:	89a3      	ldrh	r3, [r4, #12]
 8015cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cfa:	81a3      	strh	r3, [r4, #12]
 8015cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8015d00:	e78e      	b.n	8015c20 <__sflush_r+0x1c>
 8015d02:	4407      	add	r7, r0
 8015d04:	eba8 0800 	sub.w	r8, r8, r0
 8015d08:	e7e9      	b.n	8015cde <__sflush_r+0xda>
 8015d0a:	bf00      	nop
 8015d0c:	dfbffffe 	.word	0xdfbffffe

08015d10 <_fflush_r>:
 8015d10:	b538      	push	{r3, r4, r5, lr}
 8015d12:	690b      	ldr	r3, [r1, #16]
 8015d14:	4605      	mov	r5, r0
 8015d16:	460c      	mov	r4, r1
 8015d18:	b913      	cbnz	r3, 8015d20 <_fflush_r+0x10>
 8015d1a:	2500      	movs	r5, #0
 8015d1c:	4628      	mov	r0, r5
 8015d1e:	bd38      	pop	{r3, r4, r5, pc}
 8015d20:	b118      	cbz	r0, 8015d2a <_fflush_r+0x1a>
 8015d22:	6a03      	ldr	r3, [r0, #32]
 8015d24:	b90b      	cbnz	r3, 8015d2a <_fflush_r+0x1a>
 8015d26:	f7fe f9f7 	bl	8014118 <__sinit>
 8015d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d0f3      	beq.n	8015d1a <_fflush_r+0xa>
 8015d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015d34:	07d0      	lsls	r0, r2, #31
 8015d36:	d404      	bmi.n	8015d42 <_fflush_r+0x32>
 8015d38:	0599      	lsls	r1, r3, #22
 8015d3a:	d402      	bmi.n	8015d42 <_fflush_r+0x32>
 8015d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d3e:	f7fe fb10 	bl	8014362 <__retarget_lock_acquire_recursive>
 8015d42:	4628      	mov	r0, r5
 8015d44:	4621      	mov	r1, r4
 8015d46:	f7ff ff5d 	bl	8015c04 <__sflush_r>
 8015d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015d4c:	07da      	lsls	r2, r3, #31
 8015d4e:	4605      	mov	r5, r0
 8015d50:	d4e4      	bmi.n	8015d1c <_fflush_r+0xc>
 8015d52:	89a3      	ldrh	r3, [r4, #12]
 8015d54:	059b      	lsls	r3, r3, #22
 8015d56:	d4e1      	bmi.n	8015d1c <_fflush_r+0xc>
 8015d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d5a:	f7fe fb03 	bl	8014364 <__retarget_lock_release_recursive>
 8015d5e:	e7dd      	b.n	8015d1c <_fflush_r+0xc>

08015d60 <memmove>:
 8015d60:	4288      	cmp	r0, r1
 8015d62:	b510      	push	{r4, lr}
 8015d64:	eb01 0402 	add.w	r4, r1, r2
 8015d68:	d902      	bls.n	8015d70 <memmove+0x10>
 8015d6a:	4284      	cmp	r4, r0
 8015d6c:	4623      	mov	r3, r4
 8015d6e:	d807      	bhi.n	8015d80 <memmove+0x20>
 8015d70:	1e43      	subs	r3, r0, #1
 8015d72:	42a1      	cmp	r1, r4
 8015d74:	d008      	beq.n	8015d88 <memmove+0x28>
 8015d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d7e:	e7f8      	b.n	8015d72 <memmove+0x12>
 8015d80:	4402      	add	r2, r0
 8015d82:	4601      	mov	r1, r0
 8015d84:	428a      	cmp	r2, r1
 8015d86:	d100      	bne.n	8015d8a <memmove+0x2a>
 8015d88:	bd10      	pop	{r4, pc}
 8015d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d92:	e7f7      	b.n	8015d84 <memmove+0x24>

08015d94 <_sbrk_r>:
 8015d94:	b538      	push	{r3, r4, r5, lr}
 8015d96:	4d06      	ldr	r5, [pc, #24]	; (8015db0 <_sbrk_r+0x1c>)
 8015d98:	2300      	movs	r3, #0
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	4608      	mov	r0, r1
 8015d9e:	602b      	str	r3, [r5, #0]
 8015da0:	f7ee fb0c 	bl	80043bc <_sbrk>
 8015da4:	1c43      	adds	r3, r0, #1
 8015da6:	d102      	bne.n	8015dae <_sbrk_r+0x1a>
 8015da8:	682b      	ldr	r3, [r5, #0]
 8015daa:	b103      	cbz	r3, 8015dae <_sbrk_r+0x1a>
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	bd38      	pop	{r3, r4, r5, pc}
 8015db0:	20002e0c 	.word	0x20002e0c

08015db4 <memcpy>:
 8015db4:	440a      	add	r2, r1
 8015db6:	4291      	cmp	r1, r2
 8015db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8015dbc:	d100      	bne.n	8015dc0 <memcpy+0xc>
 8015dbe:	4770      	bx	lr
 8015dc0:	b510      	push	{r4, lr}
 8015dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dca:	4291      	cmp	r1, r2
 8015dcc:	d1f9      	bne.n	8015dc2 <memcpy+0xe>
 8015dce:	bd10      	pop	{r4, pc}

08015dd0 <__assert_func>:
 8015dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015dd2:	4614      	mov	r4, r2
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	4b09      	ldr	r3, [pc, #36]	; (8015dfc <__assert_func+0x2c>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	4605      	mov	r5, r0
 8015ddc:	68d8      	ldr	r0, [r3, #12]
 8015dde:	b14c      	cbz	r4, 8015df4 <__assert_func+0x24>
 8015de0:	4b07      	ldr	r3, [pc, #28]	; (8015e00 <__assert_func+0x30>)
 8015de2:	9100      	str	r1, [sp, #0]
 8015de4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015de8:	4906      	ldr	r1, [pc, #24]	; (8015e04 <__assert_func+0x34>)
 8015dea:	462b      	mov	r3, r5
 8015dec:	f000 f872 	bl	8015ed4 <fiprintf>
 8015df0:	f000 f882 	bl	8015ef8 <abort>
 8015df4:	4b04      	ldr	r3, [pc, #16]	; (8015e08 <__assert_func+0x38>)
 8015df6:	461c      	mov	r4, r3
 8015df8:	e7f3      	b.n	8015de2 <__assert_func+0x12>
 8015dfa:	bf00      	nop
 8015dfc:	20000344 	.word	0x20000344
 8015e00:	0803af37 	.word	0x0803af37
 8015e04:	0803af44 	.word	0x0803af44
 8015e08:	0803af72 	.word	0x0803af72

08015e0c <_calloc_r>:
 8015e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e0e:	fba1 2402 	umull	r2, r4, r1, r2
 8015e12:	b94c      	cbnz	r4, 8015e28 <_calloc_r+0x1c>
 8015e14:	4611      	mov	r1, r2
 8015e16:	9201      	str	r2, [sp, #4]
 8015e18:	f7ff f994 	bl	8015144 <_malloc_r>
 8015e1c:	9a01      	ldr	r2, [sp, #4]
 8015e1e:	4605      	mov	r5, r0
 8015e20:	b930      	cbnz	r0, 8015e30 <_calloc_r+0x24>
 8015e22:	4628      	mov	r0, r5
 8015e24:	b003      	add	sp, #12
 8015e26:	bd30      	pop	{r4, r5, pc}
 8015e28:	220c      	movs	r2, #12
 8015e2a:	6002      	str	r2, [r0, #0]
 8015e2c:	2500      	movs	r5, #0
 8015e2e:	e7f8      	b.n	8015e22 <_calloc_r+0x16>
 8015e30:	4621      	mov	r1, r4
 8015e32:	f7fe fa0c 	bl	801424e <memset>
 8015e36:	e7f4      	b.n	8015e22 <_calloc_r+0x16>

08015e38 <__ascii_mbtowc>:
 8015e38:	b082      	sub	sp, #8
 8015e3a:	b901      	cbnz	r1, 8015e3e <__ascii_mbtowc+0x6>
 8015e3c:	a901      	add	r1, sp, #4
 8015e3e:	b142      	cbz	r2, 8015e52 <__ascii_mbtowc+0x1a>
 8015e40:	b14b      	cbz	r3, 8015e56 <__ascii_mbtowc+0x1e>
 8015e42:	7813      	ldrb	r3, [r2, #0]
 8015e44:	600b      	str	r3, [r1, #0]
 8015e46:	7812      	ldrb	r2, [r2, #0]
 8015e48:	1e10      	subs	r0, r2, #0
 8015e4a:	bf18      	it	ne
 8015e4c:	2001      	movne	r0, #1
 8015e4e:	b002      	add	sp, #8
 8015e50:	4770      	bx	lr
 8015e52:	4610      	mov	r0, r2
 8015e54:	e7fb      	b.n	8015e4e <__ascii_mbtowc+0x16>
 8015e56:	f06f 0001 	mvn.w	r0, #1
 8015e5a:	e7f8      	b.n	8015e4e <__ascii_mbtowc+0x16>

08015e5c <_realloc_r>:
 8015e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e60:	4680      	mov	r8, r0
 8015e62:	4614      	mov	r4, r2
 8015e64:	460e      	mov	r6, r1
 8015e66:	b921      	cbnz	r1, 8015e72 <_realloc_r+0x16>
 8015e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e6c:	4611      	mov	r1, r2
 8015e6e:	f7ff b969 	b.w	8015144 <_malloc_r>
 8015e72:	b92a      	cbnz	r2, 8015e80 <_realloc_r+0x24>
 8015e74:	f7ff f8f2 	bl	801505c <_free_r>
 8015e78:	4625      	mov	r5, r4
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e80:	f000 f841 	bl	8015f06 <_malloc_usable_size_r>
 8015e84:	4284      	cmp	r4, r0
 8015e86:	4607      	mov	r7, r0
 8015e88:	d802      	bhi.n	8015e90 <_realloc_r+0x34>
 8015e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e8e:	d812      	bhi.n	8015eb6 <_realloc_r+0x5a>
 8015e90:	4621      	mov	r1, r4
 8015e92:	4640      	mov	r0, r8
 8015e94:	f7ff f956 	bl	8015144 <_malloc_r>
 8015e98:	4605      	mov	r5, r0
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	d0ed      	beq.n	8015e7a <_realloc_r+0x1e>
 8015e9e:	42bc      	cmp	r4, r7
 8015ea0:	4622      	mov	r2, r4
 8015ea2:	4631      	mov	r1, r6
 8015ea4:	bf28      	it	cs
 8015ea6:	463a      	movcs	r2, r7
 8015ea8:	f7ff ff84 	bl	8015db4 <memcpy>
 8015eac:	4631      	mov	r1, r6
 8015eae:	4640      	mov	r0, r8
 8015eb0:	f7ff f8d4 	bl	801505c <_free_r>
 8015eb4:	e7e1      	b.n	8015e7a <_realloc_r+0x1e>
 8015eb6:	4635      	mov	r5, r6
 8015eb8:	e7df      	b.n	8015e7a <_realloc_r+0x1e>

08015eba <__ascii_wctomb>:
 8015eba:	b149      	cbz	r1, 8015ed0 <__ascii_wctomb+0x16>
 8015ebc:	2aff      	cmp	r2, #255	; 0xff
 8015ebe:	bf85      	ittet	hi
 8015ec0:	238a      	movhi	r3, #138	; 0x8a
 8015ec2:	6003      	strhi	r3, [r0, #0]
 8015ec4:	700a      	strbls	r2, [r1, #0]
 8015ec6:	f04f 30ff 	movhi.w	r0, #4294967295
 8015eca:	bf98      	it	ls
 8015ecc:	2001      	movls	r0, #1
 8015ece:	4770      	bx	lr
 8015ed0:	4608      	mov	r0, r1
 8015ed2:	4770      	bx	lr

08015ed4 <fiprintf>:
 8015ed4:	b40e      	push	{r1, r2, r3}
 8015ed6:	b503      	push	{r0, r1, lr}
 8015ed8:	4601      	mov	r1, r0
 8015eda:	ab03      	add	r3, sp, #12
 8015edc:	4805      	ldr	r0, [pc, #20]	; (8015ef4 <fiprintf+0x20>)
 8015ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ee2:	6800      	ldr	r0, [r0, #0]
 8015ee4:	9301      	str	r3, [sp, #4]
 8015ee6:	f000 f83f 	bl	8015f68 <_vfiprintf_r>
 8015eea:	b002      	add	sp, #8
 8015eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ef0:	b003      	add	sp, #12
 8015ef2:	4770      	bx	lr
 8015ef4:	20000344 	.word	0x20000344

08015ef8 <abort>:
 8015ef8:	b508      	push	{r3, lr}
 8015efa:	2006      	movs	r0, #6
 8015efc:	f000 fa0c 	bl	8016318 <raise>
 8015f00:	2001      	movs	r0, #1
 8015f02:	f7ee f9e3 	bl	80042cc <_exit>

08015f06 <_malloc_usable_size_r>:
 8015f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f0a:	1f18      	subs	r0, r3, #4
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	bfbc      	itt	lt
 8015f10:	580b      	ldrlt	r3, [r1, r0]
 8015f12:	18c0      	addlt	r0, r0, r3
 8015f14:	4770      	bx	lr

08015f16 <__sfputc_r>:
 8015f16:	6893      	ldr	r3, [r2, #8]
 8015f18:	3b01      	subs	r3, #1
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	b410      	push	{r4}
 8015f1e:	6093      	str	r3, [r2, #8]
 8015f20:	da08      	bge.n	8015f34 <__sfputc_r+0x1e>
 8015f22:	6994      	ldr	r4, [r2, #24]
 8015f24:	42a3      	cmp	r3, r4
 8015f26:	db01      	blt.n	8015f2c <__sfputc_r+0x16>
 8015f28:	290a      	cmp	r1, #10
 8015f2a:	d103      	bne.n	8015f34 <__sfputc_r+0x1e>
 8015f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f30:	f000 b934 	b.w	801619c <__swbuf_r>
 8015f34:	6813      	ldr	r3, [r2, #0]
 8015f36:	1c58      	adds	r0, r3, #1
 8015f38:	6010      	str	r0, [r2, #0]
 8015f3a:	7019      	strb	r1, [r3, #0]
 8015f3c:	4608      	mov	r0, r1
 8015f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f42:	4770      	bx	lr

08015f44 <__sfputs_r>:
 8015f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f46:	4606      	mov	r6, r0
 8015f48:	460f      	mov	r7, r1
 8015f4a:	4614      	mov	r4, r2
 8015f4c:	18d5      	adds	r5, r2, r3
 8015f4e:	42ac      	cmp	r4, r5
 8015f50:	d101      	bne.n	8015f56 <__sfputs_r+0x12>
 8015f52:	2000      	movs	r0, #0
 8015f54:	e007      	b.n	8015f66 <__sfputs_r+0x22>
 8015f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f5a:	463a      	mov	r2, r7
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	f7ff ffda 	bl	8015f16 <__sfputc_r>
 8015f62:	1c43      	adds	r3, r0, #1
 8015f64:	d1f3      	bne.n	8015f4e <__sfputs_r+0xa>
 8015f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015f68 <_vfiprintf_r>:
 8015f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f6c:	460d      	mov	r5, r1
 8015f6e:	b09d      	sub	sp, #116	; 0x74
 8015f70:	4614      	mov	r4, r2
 8015f72:	4698      	mov	r8, r3
 8015f74:	4606      	mov	r6, r0
 8015f76:	b118      	cbz	r0, 8015f80 <_vfiprintf_r+0x18>
 8015f78:	6a03      	ldr	r3, [r0, #32]
 8015f7a:	b90b      	cbnz	r3, 8015f80 <_vfiprintf_r+0x18>
 8015f7c:	f7fe f8cc 	bl	8014118 <__sinit>
 8015f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f82:	07d9      	lsls	r1, r3, #31
 8015f84:	d405      	bmi.n	8015f92 <_vfiprintf_r+0x2a>
 8015f86:	89ab      	ldrh	r3, [r5, #12]
 8015f88:	059a      	lsls	r2, r3, #22
 8015f8a:	d402      	bmi.n	8015f92 <_vfiprintf_r+0x2a>
 8015f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f8e:	f7fe f9e8 	bl	8014362 <__retarget_lock_acquire_recursive>
 8015f92:	89ab      	ldrh	r3, [r5, #12]
 8015f94:	071b      	lsls	r3, r3, #28
 8015f96:	d501      	bpl.n	8015f9c <_vfiprintf_r+0x34>
 8015f98:	692b      	ldr	r3, [r5, #16]
 8015f9a:	b99b      	cbnz	r3, 8015fc4 <_vfiprintf_r+0x5c>
 8015f9c:	4629      	mov	r1, r5
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	f000 f93a 	bl	8016218 <__swsetup_r>
 8015fa4:	b170      	cbz	r0, 8015fc4 <_vfiprintf_r+0x5c>
 8015fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015fa8:	07dc      	lsls	r4, r3, #31
 8015faa:	d504      	bpl.n	8015fb6 <_vfiprintf_r+0x4e>
 8015fac:	f04f 30ff 	mov.w	r0, #4294967295
 8015fb0:	b01d      	add	sp, #116	; 0x74
 8015fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fb6:	89ab      	ldrh	r3, [r5, #12]
 8015fb8:	0598      	lsls	r0, r3, #22
 8015fba:	d4f7      	bmi.n	8015fac <_vfiprintf_r+0x44>
 8015fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015fbe:	f7fe f9d1 	bl	8014364 <__retarget_lock_release_recursive>
 8015fc2:	e7f3      	b.n	8015fac <_vfiprintf_r+0x44>
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc8:	2320      	movs	r3, #32
 8015fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fd2:	2330      	movs	r3, #48	; 0x30
 8015fd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016188 <_vfiprintf_r+0x220>
 8015fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015fdc:	f04f 0901 	mov.w	r9, #1
 8015fe0:	4623      	mov	r3, r4
 8015fe2:	469a      	mov	sl, r3
 8015fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fe8:	b10a      	cbz	r2, 8015fee <_vfiprintf_r+0x86>
 8015fea:	2a25      	cmp	r2, #37	; 0x25
 8015fec:	d1f9      	bne.n	8015fe2 <_vfiprintf_r+0x7a>
 8015fee:	ebba 0b04 	subs.w	fp, sl, r4
 8015ff2:	d00b      	beq.n	801600c <_vfiprintf_r+0xa4>
 8015ff4:	465b      	mov	r3, fp
 8015ff6:	4622      	mov	r2, r4
 8015ff8:	4629      	mov	r1, r5
 8015ffa:	4630      	mov	r0, r6
 8015ffc:	f7ff ffa2 	bl	8015f44 <__sfputs_r>
 8016000:	3001      	adds	r0, #1
 8016002:	f000 80a9 	beq.w	8016158 <_vfiprintf_r+0x1f0>
 8016006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016008:	445a      	add	r2, fp
 801600a:	9209      	str	r2, [sp, #36]	; 0x24
 801600c:	f89a 3000 	ldrb.w	r3, [sl]
 8016010:	2b00      	cmp	r3, #0
 8016012:	f000 80a1 	beq.w	8016158 <_vfiprintf_r+0x1f0>
 8016016:	2300      	movs	r3, #0
 8016018:	f04f 32ff 	mov.w	r2, #4294967295
 801601c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016020:	f10a 0a01 	add.w	sl, sl, #1
 8016024:	9304      	str	r3, [sp, #16]
 8016026:	9307      	str	r3, [sp, #28]
 8016028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801602c:	931a      	str	r3, [sp, #104]	; 0x68
 801602e:	4654      	mov	r4, sl
 8016030:	2205      	movs	r2, #5
 8016032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016036:	4854      	ldr	r0, [pc, #336]	; (8016188 <_vfiprintf_r+0x220>)
 8016038:	f7ea f8ca 	bl	80001d0 <memchr>
 801603c:	9a04      	ldr	r2, [sp, #16]
 801603e:	b9d8      	cbnz	r0, 8016078 <_vfiprintf_r+0x110>
 8016040:	06d1      	lsls	r1, r2, #27
 8016042:	bf44      	itt	mi
 8016044:	2320      	movmi	r3, #32
 8016046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801604a:	0713      	lsls	r3, r2, #28
 801604c:	bf44      	itt	mi
 801604e:	232b      	movmi	r3, #43	; 0x2b
 8016050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016054:	f89a 3000 	ldrb.w	r3, [sl]
 8016058:	2b2a      	cmp	r3, #42	; 0x2a
 801605a:	d015      	beq.n	8016088 <_vfiprintf_r+0x120>
 801605c:	9a07      	ldr	r2, [sp, #28]
 801605e:	4654      	mov	r4, sl
 8016060:	2000      	movs	r0, #0
 8016062:	f04f 0c0a 	mov.w	ip, #10
 8016066:	4621      	mov	r1, r4
 8016068:	f811 3b01 	ldrb.w	r3, [r1], #1
 801606c:	3b30      	subs	r3, #48	; 0x30
 801606e:	2b09      	cmp	r3, #9
 8016070:	d94d      	bls.n	801610e <_vfiprintf_r+0x1a6>
 8016072:	b1b0      	cbz	r0, 80160a2 <_vfiprintf_r+0x13a>
 8016074:	9207      	str	r2, [sp, #28]
 8016076:	e014      	b.n	80160a2 <_vfiprintf_r+0x13a>
 8016078:	eba0 0308 	sub.w	r3, r0, r8
 801607c:	fa09 f303 	lsl.w	r3, r9, r3
 8016080:	4313      	orrs	r3, r2
 8016082:	9304      	str	r3, [sp, #16]
 8016084:	46a2      	mov	sl, r4
 8016086:	e7d2      	b.n	801602e <_vfiprintf_r+0xc6>
 8016088:	9b03      	ldr	r3, [sp, #12]
 801608a:	1d19      	adds	r1, r3, #4
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	9103      	str	r1, [sp, #12]
 8016090:	2b00      	cmp	r3, #0
 8016092:	bfbb      	ittet	lt
 8016094:	425b      	neglt	r3, r3
 8016096:	f042 0202 	orrlt.w	r2, r2, #2
 801609a:	9307      	strge	r3, [sp, #28]
 801609c:	9307      	strlt	r3, [sp, #28]
 801609e:	bfb8      	it	lt
 80160a0:	9204      	strlt	r2, [sp, #16]
 80160a2:	7823      	ldrb	r3, [r4, #0]
 80160a4:	2b2e      	cmp	r3, #46	; 0x2e
 80160a6:	d10c      	bne.n	80160c2 <_vfiprintf_r+0x15a>
 80160a8:	7863      	ldrb	r3, [r4, #1]
 80160aa:	2b2a      	cmp	r3, #42	; 0x2a
 80160ac:	d134      	bne.n	8016118 <_vfiprintf_r+0x1b0>
 80160ae:	9b03      	ldr	r3, [sp, #12]
 80160b0:	1d1a      	adds	r2, r3, #4
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	9203      	str	r2, [sp, #12]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	bfb8      	it	lt
 80160ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80160be:	3402      	adds	r4, #2
 80160c0:	9305      	str	r3, [sp, #20]
 80160c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016198 <_vfiprintf_r+0x230>
 80160c6:	7821      	ldrb	r1, [r4, #0]
 80160c8:	2203      	movs	r2, #3
 80160ca:	4650      	mov	r0, sl
 80160cc:	f7ea f880 	bl	80001d0 <memchr>
 80160d0:	b138      	cbz	r0, 80160e2 <_vfiprintf_r+0x17a>
 80160d2:	9b04      	ldr	r3, [sp, #16]
 80160d4:	eba0 000a 	sub.w	r0, r0, sl
 80160d8:	2240      	movs	r2, #64	; 0x40
 80160da:	4082      	lsls	r2, r0
 80160dc:	4313      	orrs	r3, r2
 80160de:	3401      	adds	r4, #1
 80160e0:	9304      	str	r3, [sp, #16]
 80160e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160e6:	4829      	ldr	r0, [pc, #164]	; (801618c <_vfiprintf_r+0x224>)
 80160e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80160ec:	2206      	movs	r2, #6
 80160ee:	f7ea f86f 	bl	80001d0 <memchr>
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d03f      	beq.n	8016176 <_vfiprintf_r+0x20e>
 80160f6:	4b26      	ldr	r3, [pc, #152]	; (8016190 <_vfiprintf_r+0x228>)
 80160f8:	bb1b      	cbnz	r3, 8016142 <_vfiprintf_r+0x1da>
 80160fa:	9b03      	ldr	r3, [sp, #12]
 80160fc:	3307      	adds	r3, #7
 80160fe:	f023 0307 	bic.w	r3, r3, #7
 8016102:	3308      	adds	r3, #8
 8016104:	9303      	str	r3, [sp, #12]
 8016106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016108:	443b      	add	r3, r7
 801610a:	9309      	str	r3, [sp, #36]	; 0x24
 801610c:	e768      	b.n	8015fe0 <_vfiprintf_r+0x78>
 801610e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016112:	460c      	mov	r4, r1
 8016114:	2001      	movs	r0, #1
 8016116:	e7a6      	b.n	8016066 <_vfiprintf_r+0xfe>
 8016118:	2300      	movs	r3, #0
 801611a:	3401      	adds	r4, #1
 801611c:	9305      	str	r3, [sp, #20]
 801611e:	4619      	mov	r1, r3
 8016120:	f04f 0c0a 	mov.w	ip, #10
 8016124:	4620      	mov	r0, r4
 8016126:	f810 2b01 	ldrb.w	r2, [r0], #1
 801612a:	3a30      	subs	r2, #48	; 0x30
 801612c:	2a09      	cmp	r2, #9
 801612e:	d903      	bls.n	8016138 <_vfiprintf_r+0x1d0>
 8016130:	2b00      	cmp	r3, #0
 8016132:	d0c6      	beq.n	80160c2 <_vfiprintf_r+0x15a>
 8016134:	9105      	str	r1, [sp, #20]
 8016136:	e7c4      	b.n	80160c2 <_vfiprintf_r+0x15a>
 8016138:	fb0c 2101 	mla	r1, ip, r1, r2
 801613c:	4604      	mov	r4, r0
 801613e:	2301      	movs	r3, #1
 8016140:	e7f0      	b.n	8016124 <_vfiprintf_r+0x1bc>
 8016142:	ab03      	add	r3, sp, #12
 8016144:	9300      	str	r3, [sp, #0]
 8016146:	462a      	mov	r2, r5
 8016148:	4b12      	ldr	r3, [pc, #72]	; (8016194 <_vfiprintf_r+0x22c>)
 801614a:	a904      	add	r1, sp, #16
 801614c:	4630      	mov	r0, r6
 801614e:	f7fd fb91 	bl	8013874 <_printf_float>
 8016152:	4607      	mov	r7, r0
 8016154:	1c78      	adds	r0, r7, #1
 8016156:	d1d6      	bne.n	8016106 <_vfiprintf_r+0x19e>
 8016158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801615a:	07d9      	lsls	r1, r3, #31
 801615c:	d405      	bmi.n	801616a <_vfiprintf_r+0x202>
 801615e:	89ab      	ldrh	r3, [r5, #12]
 8016160:	059a      	lsls	r2, r3, #22
 8016162:	d402      	bmi.n	801616a <_vfiprintf_r+0x202>
 8016164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016166:	f7fe f8fd 	bl	8014364 <__retarget_lock_release_recursive>
 801616a:	89ab      	ldrh	r3, [r5, #12]
 801616c:	065b      	lsls	r3, r3, #25
 801616e:	f53f af1d 	bmi.w	8015fac <_vfiprintf_r+0x44>
 8016172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016174:	e71c      	b.n	8015fb0 <_vfiprintf_r+0x48>
 8016176:	ab03      	add	r3, sp, #12
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	462a      	mov	r2, r5
 801617c:	4b05      	ldr	r3, [pc, #20]	; (8016194 <_vfiprintf_r+0x22c>)
 801617e:	a904      	add	r1, sp, #16
 8016180:	4630      	mov	r0, r6
 8016182:	f7fd fe1b 	bl	8013dbc <_printf_i>
 8016186:	e7e4      	b.n	8016152 <_vfiprintf_r+0x1ea>
 8016188:	0803af1c 	.word	0x0803af1c
 801618c:	0803af26 	.word	0x0803af26
 8016190:	08013875 	.word	0x08013875
 8016194:	08015f45 	.word	0x08015f45
 8016198:	0803af22 	.word	0x0803af22

0801619c <__swbuf_r>:
 801619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801619e:	460e      	mov	r6, r1
 80161a0:	4614      	mov	r4, r2
 80161a2:	4605      	mov	r5, r0
 80161a4:	b118      	cbz	r0, 80161ae <__swbuf_r+0x12>
 80161a6:	6a03      	ldr	r3, [r0, #32]
 80161a8:	b90b      	cbnz	r3, 80161ae <__swbuf_r+0x12>
 80161aa:	f7fd ffb5 	bl	8014118 <__sinit>
 80161ae:	69a3      	ldr	r3, [r4, #24]
 80161b0:	60a3      	str	r3, [r4, #8]
 80161b2:	89a3      	ldrh	r3, [r4, #12]
 80161b4:	071a      	lsls	r2, r3, #28
 80161b6:	d525      	bpl.n	8016204 <__swbuf_r+0x68>
 80161b8:	6923      	ldr	r3, [r4, #16]
 80161ba:	b31b      	cbz	r3, 8016204 <__swbuf_r+0x68>
 80161bc:	6823      	ldr	r3, [r4, #0]
 80161be:	6922      	ldr	r2, [r4, #16]
 80161c0:	1a98      	subs	r0, r3, r2
 80161c2:	6963      	ldr	r3, [r4, #20]
 80161c4:	b2f6      	uxtb	r6, r6
 80161c6:	4283      	cmp	r3, r0
 80161c8:	4637      	mov	r7, r6
 80161ca:	dc04      	bgt.n	80161d6 <__swbuf_r+0x3a>
 80161cc:	4621      	mov	r1, r4
 80161ce:	4628      	mov	r0, r5
 80161d0:	f7ff fd9e 	bl	8015d10 <_fflush_r>
 80161d4:	b9e0      	cbnz	r0, 8016210 <__swbuf_r+0x74>
 80161d6:	68a3      	ldr	r3, [r4, #8]
 80161d8:	3b01      	subs	r3, #1
 80161da:	60a3      	str	r3, [r4, #8]
 80161dc:	6823      	ldr	r3, [r4, #0]
 80161de:	1c5a      	adds	r2, r3, #1
 80161e0:	6022      	str	r2, [r4, #0]
 80161e2:	701e      	strb	r6, [r3, #0]
 80161e4:	6962      	ldr	r2, [r4, #20]
 80161e6:	1c43      	adds	r3, r0, #1
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d004      	beq.n	80161f6 <__swbuf_r+0x5a>
 80161ec:	89a3      	ldrh	r3, [r4, #12]
 80161ee:	07db      	lsls	r3, r3, #31
 80161f0:	d506      	bpl.n	8016200 <__swbuf_r+0x64>
 80161f2:	2e0a      	cmp	r6, #10
 80161f4:	d104      	bne.n	8016200 <__swbuf_r+0x64>
 80161f6:	4621      	mov	r1, r4
 80161f8:	4628      	mov	r0, r5
 80161fa:	f7ff fd89 	bl	8015d10 <_fflush_r>
 80161fe:	b938      	cbnz	r0, 8016210 <__swbuf_r+0x74>
 8016200:	4638      	mov	r0, r7
 8016202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016204:	4621      	mov	r1, r4
 8016206:	4628      	mov	r0, r5
 8016208:	f000 f806 	bl	8016218 <__swsetup_r>
 801620c:	2800      	cmp	r0, #0
 801620e:	d0d5      	beq.n	80161bc <__swbuf_r+0x20>
 8016210:	f04f 37ff 	mov.w	r7, #4294967295
 8016214:	e7f4      	b.n	8016200 <__swbuf_r+0x64>
	...

08016218 <__swsetup_r>:
 8016218:	b538      	push	{r3, r4, r5, lr}
 801621a:	4b2a      	ldr	r3, [pc, #168]	; (80162c4 <__swsetup_r+0xac>)
 801621c:	4605      	mov	r5, r0
 801621e:	6818      	ldr	r0, [r3, #0]
 8016220:	460c      	mov	r4, r1
 8016222:	b118      	cbz	r0, 801622c <__swsetup_r+0x14>
 8016224:	6a03      	ldr	r3, [r0, #32]
 8016226:	b90b      	cbnz	r3, 801622c <__swsetup_r+0x14>
 8016228:	f7fd ff76 	bl	8014118 <__sinit>
 801622c:	89a3      	ldrh	r3, [r4, #12]
 801622e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016232:	0718      	lsls	r0, r3, #28
 8016234:	d422      	bmi.n	801627c <__swsetup_r+0x64>
 8016236:	06d9      	lsls	r1, r3, #27
 8016238:	d407      	bmi.n	801624a <__swsetup_r+0x32>
 801623a:	2309      	movs	r3, #9
 801623c:	602b      	str	r3, [r5, #0]
 801623e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016242:	81a3      	strh	r3, [r4, #12]
 8016244:	f04f 30ff 	mov.w	r0, #4294967295
 8016248:	e034      	b.n	80162b4 <__swsetup_r+0x9c>
 801624a:	0758      	lsls	r0, r3, #29
 801624c:	d512      	bpl.n	8016274 <__swsetup_r+0x5c>
 801624e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016250:	b141      	cbz	r1, 8016264 <__swsetup_r+0x4c>
 8016252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016256:	4299      	cmp	r1, r3
 8016258:	d002      	beq.n	8016260 <__swsetup_r+0x48>
 801625a:	4628      	mov	r0, r5
 801625c:	f7fe fefe 	bl	801505c <_free_r>
 8016260:	2300      	movs	r3, #0
 8016262:	6363      	str	r3, [r4, #52]	; 0x34
 8016264:	89a3      	ldrh	r3, [r4, #12]
 8016266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801626a:	81a3      	strh	r3, [r4, #12]
 801626c:	2300      	movs	r3, #0
 801626e:	6063      	str	r3, [r4, #4]
 8016270:	6923      	ldr	r3, [r4, #16]
 8016272:	6023      	str	r3, [r4, #0]
 8016274:	89a3      	ldrh	r3, [r4, #12]
 8016276:	f043 0308 	orr.w	r3, r3, #8
 801627a:	81a3      	strh	r3, [r4, #12]
 801627c:	6923      	ldr	r3, [r4, #16]
 801627e:	b94b      	cbnz	r3, 8016294 <__swsetup_r+0x7c>
 8016280:	89a3      	ldrh	r3, [r4, #12]
 8016282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801628a:	d003      	beq.n	8016294 <__swsetup_r+0x7c>
 801628c:	4621      	mov	r1, r4
 801628e:	4628      	mov	r0, r5
 8016290:	f000 f884 	bl	801639c <__smakebuf_r>
 8016294:	89a0      	ldrh	r0, [r4, #12]
 8016296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801629a:	f010 0301 	ands.w	r3, r0, #1
 801629e:	d00a      	beq.n	80162b6 <__swsetup_r+0x9e>
 80162a0:	2300      	movs	r3, #0
 80162a2:	60a3      	str	r3, [r4, #8]
 80162a4:	6963      	ldr	r3, [r4, #20]
 80162a6:	425b      	negs	r3, r3
 80162a8:	61a3      	str	r3, [r4, #24]
 80162aa:	6923      	ldr	r3, [r4, #16]
 80162ac:	b943      	cbnz	r3, 80162c0 <__swsetup_r+0xa8>
 80162ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80162b2:	d1c4      	bne.n	801623e <__swsetup_r+0x26>
 80162b4:	bd38      	pop	{r3, r4, r5, pc}
 80162b6:	0781      	lsls	r1, r0, #30
 80162b8:	bf58      	it	pl
 80162ba:	6963      	ldrpl	r3, [r4, #20]
 80162bc:	60a3      	str	r3, [r4, #8]
 80162be:	e7f4      	b.n	80162aa <__swsetup_r+0x92>
 80162c0:	2000      	movs	r0, #0
 80162c2:	e7f7      	b.n	80162b4 <__swsetup_r+0x9c>
 80162c4:	20000344 	.word	0x20000344

080162c8 <_raise_r>:
 80162c8:	291f      	cmp	r1, #31
 80162ca:	b538      	push	{r3, r4, r5, lr}
 80162cc:	4604      	mov	r4, r0
 80162ce:	460d      	mov	r5, r1
 80162d0:	d904      	bls.n	80162dc <_raise_r+0x14>
 80162d2:	2316      	movs	r3, #22
 80162d4:	6003      	str	r3, [r0, #0]
 80162d6:	f04f 30ff 	mov.w	r0, #4294967295
 80162da:	bd38      	pop	{r3, r4, r5, pc}
 80162dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80162de:	b112      	cbz	r2, 80162e6 <_raise_r+0x1e>
 80162e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80162e4:	b94b      	cbnz	r3, 80162fa <_raise_r+0x32>
 80162e6:	4620      	mov	r0, r4
 80162e8:	f000 f830 	bl	801634c <_getpid_r>
 80162ec:	462a      	mov	r2, r5
 80162ee:	4601      	mov	r1, r0
 80162f0:	4620      	mov	r0, r4
 80162f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162f6:	f000 b817 	b.w	8016328 <_kill_r>
 80162fa:	2b01      	cmp	r3, #1
 80162fc:	d00a      	beq.n	8016314 <_raise_r+0x4c>
 80162fe:	1c59      	adds	r1, r3, #1
 8016300:	d103      	bne.n	801630a <_raise_r+0x42>
 8016302:	2316      	movs	r3, #22
 8016304:	6003      	str	r3, [r0, #0]
 8016306:	2001      	movs	r0, #1
 8016308:	e7e7      	b.n	80162da <_raise_r+0x12>
 801630a:	2400      	movs	r4, #0
 801630c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016310:	4628      	mov	r0, r5
 8016312:	4798      	blx	r3
 8016314:	2000      	movs	r0, #0
 8016316:	e7e0      	b.n	80162da <_raise_r+0x12>

08016318 <raise>:
 8016318:	4b02      	ldr	r3, [pc, #8]	; (8016324 <raise+0xc>)
 801631a:	4601      	mov	r1, r0
 801631c:	6818      	ldr	r0, [r3, #0]
 801631e:	f7ff bfd3 	b.w	80162c8 <_raise_r>
 8016322:	bf00      	nop
 8016324:	20000344 	.word	0x20000344

08016328 <_kill_r>:
 8016328:	b538      	push	{r3, r4, r5, lr}
 801632a:	4d07      	ldr	r5, [pc, #28]	; (8016348 <_kill_r+0x20>)
 801632c:	2300      	movs	r3, #0
 801632e:	4604      	mov	r4, r0
 8016330:	4608      	mov	r0, r1
 8016332:	4611      	mov	r1, r2
 8016334:	602b      	str	r3, [r5, #0]
 8016336:	f7ed ffb9 	bl	80042ac <_kill>
 801633a:	1c43      	adds	r3, r0, #1
 801633c:	d102      	bne.n	8016344 <_kill_r+0x1c>
 801633e:	682b      	ldr	r3, [r5, #0]
 8016340:	b103      	cbz	r3, 8016344 <_kill_r+0x1c>
 8016342:	6023      	str	r3, [r4, #0]
 8016344:	bd38      	pop	{r3, r4, r5, pc}
 8016346:	bf00      	nop
 8016348:	20002e0c 	.word	0x20002e0c

0801634c <_getpid_r>:
 801634c:	f7ed bfa6 	b.w	800429c <_getpid>

08016350 <__swhatbuf_r>:
 8016350:	b570      	push	{r4, r5, r6, lr}
 8016352:	460c      	mov	r4, r1
 8016354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016358:	2900      	cmp	r1, #0
 801635a:	b096      	sub	sp, #88	; 0x58
 801635c:	4615      	mov	r5, r2
 801635e:	461e      	mov	r6, r3
 8016360:	da0d      	bge.n	801637e <__swhatbuf_r+0x2e>
 8016362:	89a3      	ldrh	r3, [r4, #12]
 8016364:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016368:	f04f 0100 	mov.w	r1, #0
 801636c:	bf0c      	ite	eq
 801636e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016372:	2340      	movne	r3, #64	; 0x40
 8016374:	2000      	movs	r0, #0
 8016376:	6031      	str	r1, [r6, #0]
 8016378:	602b      	str	r3, [r5, #0]
 801637a:	b016      	add	sp, #88	; 0x58
 801637c:	bd70      	pop	{r4, r5, r6, pc}
 801637e:	466a      	mov	r2, sp
 8016380:	f000 f848 	bl	8016414 <_fstat_r>
 8016384:	2800      	cmp	r0, #0
 8016386:	dbec      	blt.n	8016362 <__swhatbuf_r+0x12>
 8016388:	9901      	ldr	r1, [sp, #4]
 801638a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801638e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016392:	4259      	negs	r1, r3
 8016394:	4159      	adcs	r1, r3
 8016396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801639a:	e7eb      	b.n	8016374 <__swhatbuf_r+0x24>

0801639c <__smakebuf_r>:
 801639c:	898b      	ldrh	r3, [r1, #12]
 801639e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163a0:	079d      	lsls	r5, r3, #30
 80163a2:	4606      	mov	r6, r0
 80163a4:	460c      	mov	r4, r1
 80163a6:	d507      	bpl.n	80163b8 <__smakebuf_r+0x1c>
 80163a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80163ac:	6023      	str	r3, [r4, #0]
 80163ae:	6123      	str	r3, [r4, #16]
 80163b0:	2301      	movs	r3, #1
 80163b2:	6163      	str	r3, [r4, #20]
 80163b4:	b002      	add	sp, #8
 80163b6:	bd70      	pop	{r4, r5, r6, pc}
 80163b8:	ab01      	add	r3, sp, #4
 80163ba:	466a      	mov	r2, sp
 80163bc:	f7ff ffc8 	bl	8016350 <__swhatbuf_r>
 80163c0:	9900      	ldr	r1, [sp, #0]
 80163c2:	4605      	mov	r5, r0
 80163c4:	4630      	mov	r0, r6
 80163c6:	f7fe febd 	bl	8015144 <_malloc_r>
 80163ca:	b948      	cbnz	r0, 80163e0 <__smakebuf_r+0x44>
 80163cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163d0:	059a      	lsls	r2, r3, #22
 80163d2:	d4ef      	bmi.n	80163b4 <__smakebuf_r+0x18>
 80163d4:	f023 0303 	bic.w	r3, r3, #3
 80163d8:	f043 0302 	orr.w	r3, r3, #2
 80163dc:	81a3      	strh	r3, [r4, #12]
 80163de:	e7e3      	b.n	80163a8 <__smakebuf_r+0xc>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	6020      	str	r0, [r4, #0]
 80163e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163e8:	81a3      	strh	r3, [r4, #12]
 80163ea:	9b00      	ldr	r3, [sp, #0]
 80163ec:	6163      	str	r3, [r4, #20]
 80163ee:	9b01      	ldr	r3, [sp, #4]
 80163f0:	6120      	str	r0, [r4, #16]
 80163f2:	b15b      	cbz	r3, 801640c <__smakebuf_r+0x70>
 80163f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163f8:	4630      	mov	r0, r6
 80163fa:	f000 f81d 	bl	8016438 <_isatty_r>
 80163fe:	b128      	cbz	r0, 801640c <__smakebuf_r+0x70>
 8016400:	89a3      	ldrh	r3, [r4, #12]
 8016402:	f023 0303 	bic.w	r3, r3, #3
 8016406:	f043 0301 	orr.w	r3, r3, #1
 801640a:	81a3      	strh	r3, [r4, #12]
 801640c:	89a3      	ldrh	r3, [r4, #12]
 801640e:	431d      	orrs	r5, r3
 8016410:	81a5      	strh	r5, [r4, #12]
 8016412:	e7cf      	b.n	80163b4 <__smakebuf_r+0x18>

08016414 <_fstat_r>:
 8016414:	b538      	push	{r3, r4, r5, lr}
 8016416:	4d07      	ldr	r5, [pc, #28]	; (8016434 <_fstat_r+0x20>)
 8016418:	2300      	movs	r3, #0
 801641a:	4604      	mov	r4, r0
 801641c:	4608      	mov	r0, r1
 801641e:	4611      	mov	r1, r2
 8016420:	602b      	str	r3, [r5, #0]
 8016422:	f7ed ffa2 	bl	800436a <_fstat>
 8016426:	1c43      	adds	r3, r0, #1
 8016428:	d102      	bne.n	8016430 <_fstat_r+0x1c>
 801642a:	682b      	ldr	r3, [r5, #0]
 801642c:	b103      	cbz	r3, 8016430 <_fstat_r+0x1c>
 801642e:	6023      	str	r3, [r4, #0]
 8016430:	bd38      	pop	{r3, r4, r5, pc}
 8016432:	bf00      	nop
 8016434:	20002e0c 	.word	0x20002e0c

08016438 <_isatty_r>:
 8016438:	b538      	push	{r3, r4, r5, lr}
 801643a:	4d06      	ldr	r5, [pc, #24]	; (8016454 <_isatty_r+0x1c>)
 801643c:	2300      	movs	r3, #0
 801643e:	4604      	mov	r4, r0
 8016440:	4608      	mov	r0, r1
 8016442:	602b      	str	r3, [r5, #0]
 8016444:	f7ed ffa1 	bl	800438a <_isatty>
 8016448:	1c43      	adds	r3, r0, #1
 801644a:	d102      	bne.n	8016452 <_isatty_r+0x1a>
 801644c:	682b      	ldr	r3, [r5, #0]
 801644e:	b103      	cbz	r3, 8016452 <_isatty_r+0x1a>
 8016450:	6023      	str	r3, [r4, #0]
 8016452:	bd38      	pop	{r3, r4, r5, pc}
 8016454:	20002e0c 	.word	0x20002e0c

08016458 <fmod>:
 8016458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801645a:	ed2d 8b02 	vpush	{d8}
 801645e:	ec57 6b10 	vmov	r6, r7, d0
 8016462:	ec55 4b11 	vmov	r4, r5, d1
 8016466:	f000 f8e9 	bl	801663c <__ieee754_fmod>
 801646a:	4622      	mov	r2, r4
 801646c:	462b      	mov	r3, r5
 801646e:	4630      	mov	r0, r6
 8016470:	4639      	mov	r1, r7
 8016472:	eeb0 8a40 	vmov.f32	s16, s0
 8016476:	eef0 8a60 	vmov.f32	s17, s1
 801647a:	f7ea fb57 	bl	8000b2c <__aeabi_dcmpun>
 801647e:	b990      	cbnz	r0, 80164a6 <fmod+0x4e>
 8016480:	2200      	movs	r2, #0
 8016482:	2300      	movs	r3, #0
 8016484:	4620      	mov	r0, r4
 8016486:	4629      	mov	r1, r5
 8016488:	f7ea fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801648c:	b158      	cbz	r0, 80164a6 <fmod+0x4e>
 801648e:	f7fd ff3d 	bl	801430c <__errno>
 8016492:	2321      	movs	r3, #33	; 0x21
 8016494:	6003      	str	r3, [r0, #0]
 8016496:	2200      	movs	r2, #0
 8016498:	2300      	movs	r3, #0
 801649a:	4610      	mov	r0, r2
 801649c:	4619      	mov	r1, r3
 801649e:	f7ea f9d5 	bl	800084c <__aeabi_ddiv>
 80164a2:	ec41 0b18 	vmov	d8, r0, r1
 80164a6:	eeb0 0a48 	vmov.f32	s0, s16
 80164aa:	eef0 0a68 	vmov.f32	s1, s17
 80164ae:	ecbd 8b02 	vpop	{d8}
 80164b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080164b4 <pow>:
 80164b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b6:	ed2d 8b02 	vpush	{d8}
 80164ba:	eeb0 8a40 	vmov.f32	s16, s0
 80164be:	eef0 8a60 	vmov.f32	s17, s1
 80164c2:	ec55 4b11 	vmov	r4, r5, d1
 80164c6:	f000 f9c7 	bl	8016858 <__ieee754_pow>
 80164ca:	4622      	mov	r2, r4
 80164cc:	462b      	mov	r3, r5
 80164ce:	4620      	mov	r0, r4
 80164d0:	4629      	mov	r1, r5
 80164d2:	ec57 6b10 	vmov	r6, r7, d0
 80164d6:	f7ea fb29 	bl	8000b2c <__aeabi_dcmpun>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d13b      	bne.n	8016556 <pow+0xa2>
 80164de:	ec51 0b18 	vmov	r0, r1, d8
 80164e2:	2200      	movs	r2, #0
 80164e4:	2300      	movs	r3, #0
 80164e6:	f7ea faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80164ea:	b1b8      	cbz	r0, 801651c <pow+0x68>
 80164ec:	2200      	movs	r2, #0
 80164ee:	2300      	movs	r3, #0
 80164f0:	4620      	mov	r0, r4
 80164f2:	4629      	mov	r1, r5
 80164f4:	f7ea fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d146      	bne.n	801658a <pow+0xd6>
 80164fc:	ec45 4b10 	vmov	d0, r4, r5
 8016500:	f000 f848 	bl	8016594 <finite>
 8016504:	b338      	cbz	r0, 8016556 <pow+0xa2>
 8016506:	2200      	movs	r2, #0
 8016508:	2300      	movs	r3, #0
 801650a:	4620      	mov	r0, r4
 801650c:	4629      	mov	r1, r5
 801650e:	f7ea fae5 	bl	8000adc <__aeabi_dcmplt>
 8016512:	b300      	cbz	r0, 8016556 <pow+0xa2>
 8016514:	f7fd fefa 	bl	801430c <__errno>
 8016518:	2322      	movs	r3, #34	; 0x22
 801651a:	e01b      	b.n	8016554 <pow+0xa0>
 801651c:	ec47 6b10 	vmov	d0, r6, r7
 8016520:	f000 f838 	bl	8016594 <finite>
 8016524:	b9e0      	cbnz	r0, 8016560 <pow+0xac>
 8016526:	eeb0 0a48 	vmov.f32	s0, s16
 801652a:	eef0 0a68 	vmov.f32	s1, s17
 801652e:	f000 f831 	bl	8016594 <finite>
 8016532:	b1a8      	cbz	r0, 8016560 <pow+0xac>
 8016534:	ec45 4b10 	vmov	d0, r4, r5
 8016538:	f000 f82c 	bl	8016594 <finite>
 801653c:	b180      	cbz	r0, 8016560 <pow+0xac>
 801653e:	4632      	mov	r2, r6
 8016540:	463b      	mov	r3, r7
 8016542:	4630      	mov	r0, r6
 8016544:	4639      	mov	r1, r7
 8016546:	f7ea faf1 	bl	8000b2c <__aeabi_dcmpun>
 801654a:	2800      	cmp	r0, #0
 801654c:	d0e2      	beq.n	8016514 <pow+0x60>
 801654e:	f7fd fedd 	bl	801430c <__errno>
 8016552:	2321      	movs	r3, #33	; 0x21
 8016554:	6003      	str	r3, [r0, #0]
 8016556:	ecbd 8b02 	vpop	{d8}
 801655a:	ec47 6b10 	vmov	d0, r6, r7
 801655e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016560:	2200      	movs	r2, #0
 8016562:	2300      	movs	r3, #0
 8016564:	4630      	mov	r0, r6
 8016566:	4639      	mov	r1, r7
 8016568:	f7ea faae 	bl	8000ac8 <__aeabi_dcmpeq>
 801656c:	2800      	cmp	r0, #0
 801656e:	d0f2      	beq.n	8016556 <pow+0xa2>
 8016570:	eeb0 0a48 	vmov.f32	s0, s16
 8016574:	eef0 0a68 	vmov.f32	s1, s17
 8016578:	f000 f80c 	bl	8016594 <finite>
 801657c:	2800      	cmp	r0, #0
 801657e:	d0ea      	beq.n	8016556 <pow+0xa2>
 8016580:	ec45 4b10 	vmov	d0, r4, r5
 8016584:	f000 f806 	bl	8016594 <finite>
 8016588:	e7c3      	b.n	8016512 <pow+0x5e>
 801658a:	4f01      	ldr	r7, [pc, #4]	; (8016590 <pow+0xdc>)
 801658c:	2600      	movs	r6, #0
 801658e:	e7e2      	b.n	8016556 <pow+0xa2>
 8016590:	3ff00000 	.word	0x3ff00000

08016594 <finite>:
 8016594:	b082      	sub	sp, #8
 8016596:	ed8d 0b00 	vstr	d0, [sp]
 801659a:	9801      	ldr	r0, [sp, #4]
 801659c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80165a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80165a4:	0fc0      	lsrs	r0, r0, #31
 80165a6:	b002      	add	sp, #8
 80165a8:	4770      	bx	lr
	...

080165ac <round>:
 80165ac:	ec53 2b10 	vmov	r2, r3, d0
 80165b0:	b570      	push	{r4, r5, r6, lr}
 80165b2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80165b6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80165ba:	2813      	cmp	r0, #19
 80165bc:	ee10 5a10 	vmov	r5, s0
 80165c0:	4619      	mov	r1, r3
 80165c2:	dc18      	bgt.n	80165f6 <round+0x4a>
 80165c4:	2800      	cmp	r0, #0
 80165c6:	da09      	bge.n	80165dc <round+0x30>
 80165c8:	3001      	adds	r0, #1
 80165ca:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80165ce:	d103      	bne.n	80165d8 <round+0x2c>
 80165d0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80165d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80165d8:	2300      	movs	r3, #0
 80165da:	e02a      	b.n	8016632 <round+0x86>
 80165dc:	4c16      	ldr	r4, [pc, #88]	; (8016638 <round+0x8c>)
 80165de:	4104      	asrs	r4, r0
 80165e0:	ea03 0604 	and.w	r6, r3, r4
 80165e4:	4316      	orrs	r6, r2
 80165e6:	d011      	beq.n	801660c <round+0x60>
 80165e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80165ec:	4103      	asrs	r3, r0
 80165ee:	440b      	add	r3, r1
 80165f0:	ea23 0104 	bic.w	r1, r3, r4
 80165f4:	e7f0      	b.n	80165d8 <round+0x2c>
 80165f6:	2833      	cmp	r0, #51	; 0x33
 80165f8:	dd0b      	ble.n	8016612 <round+0x66>
 80165fa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80165fe:	d105      	bne.n	801660c <round+0x60>
 8016600:	ee10 0a10 	vmov	r0, s0
 8016604:	f7e9 fe42 	bl	800028c <__adddf3>
 8016608:	4602      	mov	r2, r0
 801660a:	460b      	mov	r3, r1
 801660c:	ec43 2b10 	vmov	d0, r2, r3
 8016610:	bd70      	pop	{r4, r5, r6, pc}
 8016612:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8016616:	f04f 34ff 	mov.w	r4, #4294967295
 801661a:	40f4      	lsrs	r4, r6
 801661c:	4214      	tst	r4, r2
 801661e:	d0f5      	beq.n	801660c <round+0x60>
 8016620:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8016624:	2301      	movs	r3, #1
 8016626:	4083      	lsls	r3, r0
 8016628:	195b      	adds	r3, r3, r5
 801662a:	bf28      	it	cs
 801662c:	3101      	addcs	r1, #1
 801662e:	ea23 0304 	bic.w	r3, r3, r4
 8016632:	461a      	mov	r2, r3
 8016634:	460b      	mov	r3, r1
 8016636:	e7e9      	b.n	801660c <round+0x60>
 8016638:	000fffff 	.word	0x000fffff

0801663c <__ieee754_fmod>:
 801663c:	ec53 2b11 	vmov	r2, r3, d1
 8016640:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8016644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016648:	ea5c 0402 	orrs.w	r4, ip, r2
 801664c:	ec51 0b10 	vmov	r0, r1, d0
 8016650:	ee11 7a10 	vmov	r7, s2
 8016654:	ee11 ea10 	vmov	lr, s2
 8016658:	461e      	mov	r6, r3
 801665a:	d00c      	beq.n	8016676 <__ieee754_fmod+0x3a>
 801665c:	4c78      	ldr	r4, [pc, #480]	; (8016840 <__ieee754_fmod+0x204>)
 801665e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016662:	45a0      	cmp	r8, r4
 8016664:	4689      	mov	r9, r1
 8016666:	dc06      	bgt.n	8016676 <__ieee754_fmod+0x3a>
 8016668:	4254      	negs	r4, r2
 801666a:	4d76      	ldr	r5, [pc, #472]	; (8016844 <__ieee754_fmod+0x208>)
 801666c:	4314      	orrs	r4, r2
 801666e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8016672:	42ac      	cmp	r4, r5
 8016674:	d909      	bls.n	801668a <__ieee754_fmod+0x4e>
 8016676:	f7e9 ffbf 	bl	80005f8 <__aeabi_dmul>
 801667a:	4602      	mov	r2, r0
 801667c:	460b      	mov	r3, r1
 801667e:	f7ea f8e5 	bl	800084c <__aeabi_ddiv>
 8016682:	ec41 0b10 	vmov	d0, r0, r1
 8016686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801668a:	45e0      	cmp	r8, ip
 801668c:	ee10 aa10 	vmov	sl, s0
 8016690:	ee10 4a10 	vmov	r4, s0
 8016694:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8016698:	dc09      	bgt.n	80166ae <__ieee754_fmod+0x72>
 801669a:	dbf2      	blt.n	8016682 <__ieee754_fmod+0x46>
 801669c:	4290      	cmp	r0, r2
 801669e:	d3f0      	bcc.n	8016682 <__ieee754_fmod+0x46>
 80166a0:	d105      	bne.n	80166ae <__ieee754_fmod+0x72>
 80166a2:	4b69      	ldr	r3, [pc, #420]	; (8016848 <__ieee754_fmod+0x20c>)
 80166a4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80166a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166ac:	e7e9      	b.n	8016682 <__ieee754_fmod+0x46>
 80166ae:	4a65      	ldr	r2, [pc, #404]	; (8016844 <__ieee754_fmod+0x208>)
 80166b0:	ea19 0f02 	tst.w	r9, r2
 80166b4:	d148      	bne.n	8016748 <__ieee754_fmod+0x10c>
 80166b6:	f1b8 0f00 	cmp.w	r8, #0
 80166ba:	d13d      	bne.n	8016738 <__ieee754_fmod+0xfc>
 80166bc:	4963      	ldr	r1, [pc, #396]	; (801684c <__ieee754_fmod+0x210>)
 80166be:	4653      	mov	r3, sl
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	dc36      	bgt.n	8016732 <__ieee754_fmod+0xf6>
 80166c4:	4216      	tst	r6, r2
 80166c6:	d14f      	bne.n	8016768 <__ieee754_fmod+0x12c>
 80166c8:	f1bc 0f00 	cmp.w	ip, #0
 80166cc:	d144      	bne.n	8016758 <__ieee754_fmod+0x11c>
 80166ce:	4a5f      	ldr	r2, [pc, #380]	; (801684c <__ieee754_fmod+0x210>)
 80166d0:	463b      	mov	r3, r7
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	dc3d      	bgt.n	8016752 <__ieee754_fmod+0x116>
 80166d6:	485e      	ldr	r0, [pc, #376]	; (8016850 <__ieee754_fmod+0x214>)
 80166d8:	4281      	cmp	r1, r0
 80166da:	db4a      	blt.n	8016772 <__ieee754_fmod+0x136>
 80166dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80166e4:	485a      	ldr	r0, [pc, #360]	; (8016850 <__ieee754_fmod+0x214>)
 80166e6:	4282      	cmp	r2, r0
 80166e8:	db57      	blt.n	801679a <__ieee754_fmod+0x15e>
 80166ea:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80166ee:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80166f2:	1a89      	subs	r1, r1, r2
 80166f4:	1b98      	subs	r0, r3, r6
 80166f6:	eba4 070e 	sub.w	r7, r4, lr
 80166fa:	2900      	cmp	r1, #0
 80166fc:	d162      	bne.n	80167c4 <__ieee754_fmod+0x188>
 80166fe:	4574      	cmp	r4, lr
 8016700:	bf38      	it	cc
 8016702:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016706:	2800      	cmp	r0, #0
 8016708:	bfa4      	itt	ge
 801670a:	463c      	movge	r4, r7
 801670c:	4603      	movge	r3, r0
 801670e:	ea53 0104 	orrs.w	r1, r3, r4
 8016712:	d0c6      	beq.n	80166a2 <__ieee754_fmod+0x66>
 8016714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016718:	db69      	blt.n	80167ee <__ieee754_fmod+0x1b2>
 801671a:	494d      	ldr	r1, [pc, #308]	; (8016850 <__ieee754_fmod+0x214>)
 801671c:	428a      	cmp	r2, r1
 801671e:	db6c      	blt.n	80167fa <__ieee754_fmod+0x1be>
 8016720:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016724:	432b      	orrs	r3, r5
 8016726:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801672a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801672e:	4620      	mov	r0, r4
 8016730:	e7a7      	b.n	8016682 <__ieee754_fmod+0x46>
 8016732:	3901      	subs	r1, #1
 8016734:	005b      	lsls	r3, r3, #1
 8016736:	e7c3      	b.n	80166c0 <__ieee754_fmod+0x84>
 8016738:	4945      	ldr	r1, [pc, #276]	; (8016850 <__ieee754_fmod+0x214>)
 801673a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801673e:	2b00      	cmp	r3, #0
 8016740:	ddc0      	ble.n	80166c4 <__ieee754_fmod+0x88>
 8016742:	3901      	subs	r1, #1
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	e7fa      	b.n	801673e <__ieee754_fmod+0x102>
 8016748:	ea4f 5128 	mov.w	r1, r8, asr #20
 801674c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016750:	e7b8      	b.n	80166c4 <__ieee754_fmod+0x88>
 8016752:	3a01      	subs	r2, #1
 8016754:	005b      	lsls	r3, r3, #1
 8016756:	e7bc      	b.n	80166d2 <__ieee754_fmod+0x96>
 8016758:	4a3d      	ldr	r2, [pc, #244]	; (8016850 <__ieee754_fmod+0x214>)
 801675a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801675e:	2b00      	cmp	r3, #0
 8016760:	ddb9      	ble.n	80166d6 <__ieee754_fmod+0x9a>
 8016762:	3a01      	subs	r2, #1
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	e7fa      	b.n	801675e <__ieee754_fmod+0x122>
 8016768:	ea4f 522c 	mov.w	r2, ip, asr #20
 801676c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016770:	e7b1      	b.n	80166d6 <__ieee754_fmod+0x9a>
 8016772:	1a40      	subs	r0, r0, r1
 8016774:	281f      	cmp	r0, #31
 8016776:	dc0a      	bgt.n	801678e <__ieee754_fmod+0x152>
 8016778:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801677c:	fa08 f800 	lsl.w	r8, r8, r0
 8016780:	fa2a f303 	lsr.w	r3, sl, r3
 8016784:	ea43 0308 	orr.w	r3, r3, r8
 8016788:	fa0a f400 	lsl.w	r4, sl, r0
 801678c:	e7aa      	b.n	80166e4 <__ieee754_fmod+0xa8>
 801678e:	4b31      	ldr	r3, [pc, #196]	; (8016854 <__ieee754_fmod+0x218>)
 8016790:	1a5b      	subs	r3, r3, r1
 8016792:	fa0a f303 	lsl.w	r3, sl, r3
 8016796:	2400      	movs	r4, #0
 8016798:	e7a4      	b.n	80166e4 <__ieee754_fmod+0xa8>
 801679a:	1a80      	subs	r0, r0, r2
 801679c:	281f      	cmp	r0, #31
 801679e:	dc0a      	bgt.n	80167b6 <__ieee754_fmod+0x17a>
 80167a0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80167a4:	fa0c fc00 	lsl.w	ip, ip, r0
 80167a8:	fa27 f606 	lsr.w	r6, r7, r6
 80167ac:	ea46 060c 	orr.w	r6, r6, ip
 80167b0:	fa07 fe00 	lsl.w	lr, r7, r0
 80167b4:	e79d      	b.n	80166f2 <__ieee754_fmod+0xb6>
 80167b6:	4e27      	ldr	r6, [pc, #156]	; (8016854 <__ieee754_fmod+0x218>)
 80167b8:	1ab6      	subs	r6, r6, r2
 80167ba:	fa07 f606 	lsl.w	r6, r7, r6
 80167be:	f04f 0e00 	mov.w	lr, #0
 80167c2:	e796      	b.n	80166f2 <__ieee754_fmod+0xb6>
 80167c4:	4574      	cmp	r4, lr
 80167c6:	bf38      	it	cc
 80167c8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80167cc:	2800      	cmp	r0, #0
 80167ce:	da05      	bge.n	80167dc <__ieee754_fmod+0x1a0>
 80167d0:	0fe0      	lsrs	r0, r4, #31
 80167d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80167d6:	0064      	lsls	r4, r4, #1
 80167d8:	3901      	subs	r1, #1
 80167da:	e78b      	b.n	80166f4 <__ieee754_fmod+0xb8>
 80167dc:	ea50 0307 	orrs.w	r3, r0, r7
 80167e0:	f43f af5f 	beq.w	80166a2 <__ieee754_fmod+0x66>
 80167e4:	0ffb      	lsrs	r3, r7, #31
 80167e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80167ea:	007c      	lsls	r4, r7, #1
 80167ec:	e7f4      	b.n	80167d8 <__ieee754_fmod+0x19c>
 80167ee:	0fe1      	lsrs	r1, r4, #31
 80167f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80167f4:	0064      	lsls	r4, r4, #1
 80167f6:	3a01      	subs	r2, #1
 80167f8:	e78c      	b.n	8016714 <__ieee754_fmod+0xd8>
 80167fa:	1a89      	subs	r1, r1, r2
 80167fc:	2914      	cmp	r1, #20
 80167fe:	dc0a      	bgt.n	8016816 <__ieee754_fmod+0x1da>
 8016800:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016804:	fa03 f202 	lsl.w	r2, r3, r2
 8016808:	40cc      	lsrs	r4, r1
 801680a:	4322      	orrs	r2, r4
 801680c:	410b      	asrs	r3, r1
 801680e:	ea43 0105 	orr.w	r1, r3, r5
 8016812:	4610      	mov	r0, r2
 8016814:	e735      	b.n	8016682 <__ieee754_fmod+0x46>
 8016816:	291f      	cmp	r1, #31
 8016818:	dc07      	bgt.n	801682a <__ieee754_fmod+0x1ee>
 801681a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801681e:	40cc      	lsrs	r4, r1
 8016820:	fa03 f202 	lsl.w	r2, r3, r2
 8016824:	4322      	orrs	r2, r4
 8016826:	462b      	mov	r3, r5
 8016828:	e7f1      	b.n	801680e <__ieee754_fmod+0x1d2>
 801682a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801682e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016832:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8016836:	32e2      	adds	r2, #226	; 0xe2
 8016838:	fa43 f202 	asr.w	r2, r3, r2
 801683c:	e7f3      	b.n	8016826 <__ieee754_fmod+0x1ea>
 801683e:	bf00      	nop
 8016840:	7fefffff 	.word	0x7fefffff
 8016844:	7ff00000 	.word	0x7ff00000
 8016848:	0803b078 	.word	0x0803b078
 801684c:	fffffbed 	.word	0xfffffbed
 8016850:	fffffc02 	.word	0xfffffc02
 8016854:	fffffbe2 	.word	0xfffffbe2

08016858 <__ieee754_pow>:
 8016858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801685c:	ed2d 8b06 	vpush	{d8-d10}
 8016860:	b089      	sub	sp, #36	; 0x24
 8016862:	ed8d 1b00 	vstr	d1, [sp]
 8016866:	e9dd 2900 	ldrd	r2, r9, [sp]
 801686a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801686e:	ea58 0102 	orrs.w	r1, r8, r2
 8016872:	ec57 6b10 	vmov	r6, r7, d0
 8016876:	d115      	bne.n	80168a4 <__ieee754_pow+0x4c>
 8016878:	19b3      	adds	r3, r6, r6
 801687a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801687e:	4152      	adcs	r2, r2
 8016880:	4299      	cmp	r1, r3
 8016882:	4b89      	ldr	r3, [pc, #548]	; (8016aa8 <__ieee754_pow+0x250>)
 8016884:	4193      	sbcs	r3, r2
 8016886:	f080 84d1 	bcs.w	801722c <__ieee754_pow+0x9d4>
 801688a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801688e:	4630      	mov	r0, r6
 8016890:	4639      	mov	r1, r7
 8016892:	f7e9 fcfb 	bl	800028c <__adddf3>
 8016896:	ec41 0b10 	vmov	d0, r0, r1
 801689a:	b009      	add	sp, #36	; 0x24
 801689c:	ecbd 8b06 	vpop	{d8-d10}
 80168a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168a4:	4b81      	ldr	r3, [pc, #516]	; (8016aac <__ieee754_pow+0x254>)
 80168a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80168aa:	429c      	cmp	r4, r3
 80168ac:	ee10 aa10 	vmov	sl, s0
 80168b0:	463d      	mov	r5, r7
 80168b2:	dc06      	bgt.n	80168c2 <__ieee754_pow+0x6a>
 80168b4:	d101      	bne.n	80168ba <__ieee754_pow+0x62>
 80168b6:	2e00      	cmp	r6, #0
 80168b8:	d1e7      	bne.n	801688a <__ieee754_pow+0x32>
 80168ba:	4598      	cmp	r8, r3
 80168bc:	dc01      	bgt.n	80168c2 <__ieee754_pow+0x6a>
 80168be:	d10f      	bne.n	80168e0 <__ieee754_pow+0x88>
 80168c0:	b172      	cbz	r2, 80168e0 <__ieee754_pow+0x88>
 80168c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80168c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80168ca:	ea55 050a 	orrs.w	r5, r5, sl
 80168ce:	d1dc      	bne.n	801688a <__ieee754_pow+0x32>
 80168d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80168d4:	18db      	adds	r3, r3, r3
 80168d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80168da:	4152      	adcs	r2, r2
 80168dc:	429d      	cmp	r5, r3
 80168de:	e7d0      	b.n	8016882 <__ieee754_pow+0x2a>
 80168e0:	2d00      	cmp	r5, #0
 80168e2:	da3b      	bge.n	801695c <__ieee754_pow+0x104>
 80168e4:	4b72      	ldr	r3, [pc, #456]	; (8016ab0 <__ieee754_pow+0x258>)
 80168e6:	4598      	cmp	r8, r3
 80168e8:	dc51      	bgt.n	801698e <__ieee754_pow+0x136>
 80168ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80168ee:	4598      	cmp	r8, r3
 80168f0:	f340 84ab 	ble.w	801724a <__ieee754_pow+0x9f2>
 80168f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80168f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80168fc:	2b14      	cmp	r3, #20
 80168fe:	dd0f      	ble.n	8016920 <__ieee754_pow+0xc8>
 8016900:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016904:	fa22 f103 	lsr.w	r1, r2, r3
 8016908:	fa01 f303 	lsl.w	r3, r1, r3
 801690c:	4293      	cmp	r3, r2
 801690e:	f040 849c 	bne.w	801724a <__ieee754_pow+0x9f2>
 8016912:	f001 0101 	and.w	r1, r1, #1
 8016916:	f1c1 0302 	rsb	r3, r1, #2
 801691a:	9304      	str	r3, [sp, #16]
 801691c:	b182      	cbz	r2, 8016940 <__ieee754_pow+0xe8>
 801691e:	e05f      	b.n	80169e0 <__ieee754_pow+0x188>
 8016920:	2a00      	cmp	r2, #0
 8016922:	d15b      	bne.n	80169dc <__ieee754_pow+0x184>
 8016924:	f1c3 0314 	rsb	r3, r3, #20
 8016928:	fa48 f103 	asr.w	r1, r8, r3
 801692c:	fa01 f303 	lsl.w	r3, r1, r3
 8016930:	4543      	cmp	r3, r8
 8016932:	f040 8487 	bne.w	8017244 <__ieee754_pow+0x9ec>
 8016936:	f001 0101 	and.w	r1, r1, #1
 801693a:	f1c1 0302 	rsb	r3, r1, #2
 801693e:	9304      	str	r3, [sp, #16]
 8016940:	4b5c      	ldr	r3, [pc, #368]	; (8016ab4 <__ieee754_pow+0x25c>)
 8016942:	4598      	cmp	r8, r3
 8016944:	d132      	bne.n	80169ac <__ieee754_pow+0x154>
 8016946:	f1b9 0f00 	cmp.w	r9, #0
 801694a:	f280 8477 	bge.w	801723c <__ieee754_pow+0x9e4>
 801694e:	4959      	ldr	r1, [pc, #356]	; (8016ab4 <__ieee754_pow+0x25c>)
 8016950:	4632      	mov	r2, r6
 8016952:	463b      	mov	r3, r7
 8016954:	2000      	movs	r0, #0
 8016956:	f7e9 ff79 	bl	800084c <__aeabi_ddiv>
 801695a:	e79c      	b.n	8016896 <__ieee754_pow+0x3e>
 801695c:	2300      	movs	r3, #0
 801695e:	9304      	str	r3, [sp, #16]
 8016960:	2a00      	cmp	r2, #0
 8016962:	d13d      	bne.n	80169e0 <__ieee754_pow+0x188>
 8016964:	4b51      	ldr	r3, [pc, #324]	; (8016aac <__ieee754_pow+0x254>)
 8016966:	4598      	cmp	r8, r3
 8016968:	d1ea      	bne.n	8016940 <__ieee754_pow+0xe8>
 801696a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801696e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016972:	ea53 030a 	orrs.w	r3, r3, sl
 8016976:	f000 8459 	beq.w	801722c <__ieee754_pow+0x9d4>
 801697a:	4b4f      	ldr	r3, [pc, #316]	; (8016ab8 <__ieee754_pow+0x260>)
 801697c:	429c      	cmp	r4, r3
 801697e:	dd08      	ble.n	8016992 <__ieee754_pow+0x13a>
 8016980:	f1b9 0f00 	cmp.w	r9, #0
 8016984:	f2c0 8456 	blt.w	8017234 <__ieee754_pow+0x9dc>
 8016988:	e9dd 0100 	ldrd	r0, r1, [sp]
 801698c:	e783      	b.n	8016896 <__ieee754_pow+0x3e>
 801698e:	2302      	movs	r3, #2
 8016990:	e7e5      	b.n	801695e <__ieee754_pow+0x106>
 8016992:	f1b9 0f00 	cmp.w	r9, #0
 8016996:	f04f 0000 	mov.w	r0, #0
 801699a:	f04f 0100 	mov.w	r1, #0
 801699e:	f6bf af7a 	bge.w	8016896 <__ieee754_pow+0x3e>
 80169a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80169a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80169aa:	e774      	b.n	8016896 <__ieee754_pow+0x3e>
 80169ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80169b0:	d106      	bne.n	80169c0 <__ieee754_pow+0x168>
 80169b2:	4632      	mov	r2, r6
 80169b4:	463b      	mov	r3, r7
 80169b6:	4630      	mov	r0, r6
 80169b8:	4639      	mov	r1, r7
 80169ba:	f7e9 fe1d 	bl	80005f8 <__aeabi_dmul>
 80169be:	e76a      	b.n	8016896 <__ieee754_pow+0x3e>
 80169c0:	4b3e      	ldr	r3, [pc, #248]	; (8016abc <__ieee754_pow+0x264>)
 80169c2:	4599      	cmp	r9, r3
 80169c4:	d10c      	bne.n	80169e0 <__ieee754_pow+0x188>
 80169c6:	2d00      	cmp	r5, #0
 80169c8:	db0a      	blt.n	80169e0 <__ieee754_pow+0x188>
 80169ca:	ec47 6b10 	vmov	d0, r6, r7
 80169ce:	b009      	add	sp, #36	; 0x24
 80169d0:	ecbd 8b06 	vpop	{d8-d10}
 80169d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d8:	f000 bd20 	b.w	801741c <__ieee754_sqrt>
 80169dc:	2300      	movs	r3, #0
 80169de:	9304      	str	r3, [sp, #16]
 80169e0:	ec47 6b10 	vmov	d0, r6, r7
 80169e4:	f000 fc62 	bl	80172ac <fabs>
 80169e8:	ec51 0b10 	vmov	r0, r1, d0
 80169ec:	f1ba 0f00 	cmp.w	sl, #0
 80169f0:	d129      	bne.n	8016a46 <__ieee754_pow+0x1ee>
 80169f2:	b124      	cbz	r4, 80169fe <__ieee754_pow+0x1a6>
 80169f4:	4b2f      	ldr	r3, [pc, #188]	; (8016ab4 <__ieee754_pow+0x25c>)
 80169f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d123      	bne.n	8016a46 <__ieee754_pow+0x1ee>
 80169fe:	f1b9 0f00 	cmp.w	r9, #0
 8016a02:	da05      	bge.n	8016a10 <__ieee754_pow+0x1b8>
 8016a04:	4602      	mov	r2, r0
 8016a06:	460b      	mov	r3, r1
 8016a08:	2000      	movs	r0, #0
 8016a0a:	492a      	ldr	r1, [pc, #168]	; (8016ab4 <__ieee754_pow+0x25c>)
 8016a0c:	f7e9 ff1e 	bl	800084c <__aeabi_ddiv>
 8016a10:	2d00      	cmp	r5, #0
 8016a12:	f6bf af40 	bge.w	8016896 <__ieee754_pow+0x3e>
 8016a16:	9b04      	ldr	r3, [sp, #16]
 8016a18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016a1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016a20:	431c      	orrs	r4, r3
 8016a22:	d108      	bne.n	8016a36 <__ieee754_pow+0x1de>
 8016a24:	4602      	mov	r2, r0
 8016a26:	460b      	mov	r3, r1
 8016a28:	4610      	mov	r0, r2
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	f7e9 fc2c 	bl	8000288 <__aeabi_dsub>
 8016a30:	4602      	mov	r2, r0
 8016a32:	460b      	mov	r3, r1
 8016a34:	e78f      	b.n	8016956 <__ieee754_pow+0xfe>
 8016a36:	9b04      	ldr	r3, [sp, #16]
 8016a38:	2b01      	cmp	r3, #1
 8016a3a:	f47f af2c 	bne.w	8016896 <__ieee754_pow+0x3e>
 8016a3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a42:	4619      	mov	r1, r3
 8016a44:	e727      	b.n	8016896 <__ieee754_pow+0x3e>
 8016a46:	0feb      	lsrs	r3, r5, #31
 8016a48:	3b01      	subs	r3, #1
 8016a4a:	9306      	str	r3, [sp, #24]
 8016a4c:	9a06      	ldr	r2, [sp, #24]
 8016a4e:	9b04      	ldr	r3, [sp, #16]
 8016a50:	4313      	orrs	r3, r2
 8016a52:	d102      	bne.n	8016a5a <__ieee754_pow+0x202>
 8016a54:	4632      	mov	r2, r6
 8016a56:	463b      	mov	r3, r7
 8016a58:	e7e6      	b.n	8016a28 <__ieee754_pow+0x1d0>
 8016a5a:	4b19      	ldr	r3, [pc, #100]	; (8016ac0 <__ieee754_pow+0x268>)
 8016a5c:	4598      	cmp	r8, r3
 8016a5e:	f340 80fb 	ble.w	8016c58 <__ieee754_pow+0x400>
 8016a62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016a66:	4598      	cmp	r8, r3
 8016a68:	4b13      	ldr	r3, [pc, #76]	; (8016ab8 <__ieee754_pow+0x260>)
 8016a6a:	dd0c      	ble.n	8016a86 <__ieee754_pow+0x22e>
 8016a6c:	429c      	cmp	r4, r3
 8016a6e:	dc0f      	bgt.n	8016a90 <__ieee754_pow+0x238>
 8016a70:	f1b9 0f00 	cmp.w	r9, #0
 8016a74:	da0f      	bge.n	8016a96 <__ieee754_pow+0x23e>
 8016a76:	2000      	movs	r0, #0
 8016a78:	b009      	add	sp, #36	; 0x24
 8016a7a:	ecbd 8b06 	vpop	{d8-d10}
 8016a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a82:	f000 bcc2 	b.w	801740a <__math_oflow>
 8016a86:	429c      	cmp	r4, r3
 8016a88:	dbf2      	blt.n	8016a70 <__ieee754_pow+0x218>
 8016a8a:	4b0a      	ldr	r3, [pc, #40]	; (8016ab4 <__ieee754_pow+0x25c>)
 8016a8c:	429c      	cmp	r4, r3
 8016a8e:	dd19      	ble.n	8016ac4 <__ieee754_pow+0x26c>
 8016a90:	f1b9 0f00 	cmp.w	r9, #0
 8016a94:	dcef      	bgt.n	8016a76 <__ieee754_pow+0x21e>
 8016a96:	2000      	movs	r0, #0
 8016a98:	b009      	add	sp, #36	; 0x24
 8016a9a:	ecbd 8b06 	vpop	{d8-d10}
 8016a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa2:	f000 bca9 	b.w	80173f8 <__math_uflow>
 8016aa6:	bf00      	nop
 8016aa8:	fff00000 	.word	0xfff00000
 8016aac:	7ff00000 	.word	0x7ff00000
 8016ab0:	433fffff 	.word	0x433fffff
 8016ab4:	3ff00000 	.word	0x3ff00000
 8016ab8:	3fefffff 	.word	0x3fefffff
 8016abc:	3fe00000 	.word	0x3fe00000
 8016ac0:	41e00000 	.word	0x41e00000
 8016ac4:	4b60      	ldr	r3, [pc, #384]	; (8016c48 <__ieee754_pow+0x3f0>)
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	f7e9 fbde 	bl	8000288 <__aeabi_dsub>
 8016acc:	a354      	add	r3, pc, #336	; (adr r3, 8016c20 <__ieee754_pow+0x3c8>)
 8016ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	460d      	mov	r5, r1
 8016ad6:	f7e9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8016ada:	a353      	add	r3, pc, #332	; (adr r3, 8016c28 <__ieee754_pow+0x3d0>)
 8016adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	460f      	mov	r7, r1
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	f7e9 fd86 	bl	80005f8 <__aeabi_dmul>
 8016aec:	4b57      	ldr	r3, [pc, #348]	; (8016c4c <__ieee754_pow+0x3f4>)
 8016aee:	4682      	mov	sl, r0
 8016af0:	468b      	mov	fp, r1
 8016af2:	2200      	movs	r2, #0
 8016af4:	4620      	mov	r0, r4
 8016af6:	4629      	mov	r1, r5
 8016af8:	f7e9 fd7e 	bl	80005f8 <__aeabi_dmul>
 8016afc:	4602      	mov	r2, r0
 8016afe:	460b      	mov	r3, r1
 8016b00:	a14b      	add	r1, pc, #300	; (adr r1, 8016c30 <__ieee754_pow+0x3d8>)
 8016b02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b06:	f7e9 fbbf 	bl	8000288 <__aeabi_dsub>
 8016b0a:	4622      	mov	r2, r4
 8016b0c:	462b      	mov	r3, r5
 8016b0e:	f7e9 fd73 	bl	80005f8 <__aeabi_dmul>
 8016b12:	4602      	mov	r2, r0
 8016b14:	460b      	mov	r3, r1
 8016b16:	2000      	movs	r0, #0
 8016b18:	494d      	ldr	r1, [pc, #308]	; (8016c50 <__ieee754_pow+0x3f8>)
 8016b1a:	f7e9 fbb5 	bl	8000288 <__aeabi_dsub>
 8016b1e:	4622      	mov	r2, r4
 8016b20:	4680      	mov	r8, r0
 8016b22:	4689      	mov	r9, r1
 8016b24:	462b      	mov	r3, r5
 8016b26:	4620      	mov	r0, r4
 8016b28:	4629      	mov	r1, r5
 8016b2a:	f7e9 fd65 	bl	80005f8 <__aeabi_dmul>
 8016b2e:	4602      	mov	r2, r0
 8016b30:	460b      	mov	r3, r1
 8016b32:	4640      	mov	r0, r8
 8016b34:	4649      	mov	r1, r9
 8016b36:	f7e9 fd5f 	bl	80005f8 <__aeabi_dmul>
 8016b3a:	a33f      	add	r3, pc, #252	; (adr r3, 8016c38 <__ieee754_pow+0x3e0>)
 8016b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b40:	f7e9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8016b44:	4602      	mov	r2, r0
 8016b46:	460b      	mov	r3, r1
 8016b48:	4650      	mov	r0, sl
 8016b4a:	4659      	mov	r1, fp
 8016b4c:	f7e9 fb9c 	bl	8000288 <__aeabi_dsub>
 8016b50:	4602      	mov	r2, r0
 8016b52:	460b      	mov	r3, r1
 8016b54:	4680      	mov	r8, r0
 8016b56:	4689      	mov	r9, r1
 8016b58:	4630      	mov	r0, r6
 8016b5a:	4639      	mov	r1, r7
 8016b5c:	f7e9 fb96 	bl	800028c <__adddf3>
 8016b60:	2000      	movs	r0, #0
 8016b62:	4632      	mov	r2, r6
 8016b64:	463b      	mov	r3, r7
 8016b66:	4604      	mov	r4, r0
 8016b68:	460d      	mov	r5, r1
 8016b6a:	f7e9 fb8d 	bl	8000288 <__aeabi_dsub>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	460b      	mov	r3, r1
 8016b72:	4640      	mov	r0, r8
 8016b74:	4649      	mov	r1, r9
 8016b76:	f7e9 fb87 	bl	8000288 <__aeabi_dsub>
 8016b7a:	9b04      	ldr	r3, [sp, #16]
 8016b7c:	9a06      	ldr	r2, [sp, #24]
 8016b7e:	3b01      	subs	r3, #1
 8016b80:	4313      	orrs	r3, r2
 8016b82:	4682      	mov	sl, r0
 8016b84:	468b      	mov	fp, r1
 8016b86:	f040 81e7 	bne.w	8016f58 <__ieee754_pow+0x700>
 8016b8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016c40 <__ieee754_pow+0x3e8>
 8016b8e:	eeb0 8a47 	vmov.f32	s16, s14
 8016b92:	eef0 8a67 	vmov.f32	s17, s15
 8016b96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016b9a:	2600      	movs	r6, #0
 8016b9c:	4632      	mov	r2, r6
 8016b9e:	463b      	mov	r3, r7
 8016ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ba4:	f7e9 fb70 	bl	8000288 <__aeabi_dsub>
 8016ba8:	4622      	mov	r2, r4
 8016baa:	462b      	mov	r3, r5
 8016bac:	f7e9 fd24 	bl	80005f8 <__aeabi_dmul>
 8016bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bb4:	4680      	mov	r8, r0
 8016bb6:	4689      	mov	r9, r1
 8016bb8:	4650      	mov	r0, sl
 8016bba:	4659      	mov	r1, fp
 8016bbc:	f7e9 fd1c 	bl	80005f8 <__aeabi_dmul>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	4640      	mov	r0, r8
 8016bc6:	4649      	mov	r1, r9
 8016bc8:	f7e9 fb60 	bl	800028c <__adddf3>
 8016bcc:	4632      	mov	r2, r6
 8016bce:	463b      	mov	r3, r7
 8016bd0:	4680      	mov	r8, r0
 8016bd2:	4689      	mov	r9, r1
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	f7e9 fd0e 	bl	80005f8 <__aeabi_dmul>
 8016bdc:	460b      	mov	r3, r1
 8016bde:	4604      	mov	r4, r0
 8016be0:	460d      	mov	r5, r1
 8016be2:	4602      	mov	r2, r0
 8016be4:	4649      	mov	r1, r9
 8016be6:	4640      	mov	r0, r8
 8016be8:	f7e9 fb50 	bl	800028c <__adddf3>
 8016bec:	4b19      	ldr	r3, [pc, #100]	; (8016c54 <__ieee754_pow+0x3fc>)
 8016bee:	4299      	cmp	r1, r3
 8016bf0:	ec45 4b19 	vmov	d9, r4, r5
 8016bf4:	4606      	mov	r6, r0
 8016bf6:	460f      	mov	r7, r1
 8016bf8:	468b      	mov	fp, r1
 8016bfa:	f340 82f0 	ble.w	80171de <__ieee754_pow+0x986>
 8016bfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016c02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016c06:	4303      	orrs	r3, r0
 8016c08:	f000 81e4 	beq.w	8016fd4 <__ieee754_pow+0x77c>
 8016c0c:	ec51 0b18 	vmov	r0, r1, d8
 8016c10:	2200      	movs	r2, #0
 8016c12:	2300      	movs	r3, #0
 8016c14:	f7e9 ff62 	bl	8000adc <__aeabi_dcmplt>
 8016c18:	3800      	subs	r0, #0
 8016c1a:	bf18      	it	ne
 8016c1c:	2001      	movne	r0, #1
 8016c1e:	e72b      	b.n	8016a78 <__ieee754_pow+0x220>
 8016c20:	60000000 	.word	0x60000000
 8016c24:	3ff71547 	.word	0x3ff71547
 8016c28:	f85ddf44 	.word	0xf85ddf44
 8016c2c:	3e54ae0b 	.word	0x3e54ae0b
 8016c30:	55555555 	.word	0x55555555
 8016c34:	3fd55555 	.word	0x3fd55555
 8016c38:	652b82fe 	.word	0x652b82fe
 8016c3c:	3ff71547 	.word	0x3ff71547
 8016c40:	00000000 	.word	0x00000000
 8016c44:	bff00000 	.word	0xbff00000
 8016c48:	3ff00000 	.word	0x3ff00000
 8016c4c:	3fd00000 	.word	0x3fd00000
 8016c50:	3fe00000 	.word	0x3fe00000
 8016c54:	408fffff 	.word	0x408fffff
 8016c58:	4bd5      	ldr	r3, [pc, #852]	; (8016fb0 <__ieee754_pow+0x758>)
 8016c5a:	402b      	ands	r3, r5
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	b92b      	cbnz	r3, 8016c6c <__ieee754_pow+0x414>
 8016c60:	4bd4      	ldr	r3, [pc, #848]	; (8016fb4 <__ieee754_pow+0x75c>)
 8016c62:	f7e9 fcc9 	bl	80005f8 <__aeabi_dmul>
 8016c66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016c6a:	460c      	mov	r4, r1
 8016c6c:	1523      	asrs	r3, r4, #20
 8016c6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016c72:	4413      	add	r3, r2
 8016c74:	9305      	str	r3, [sp, #20]
 8016c76:	4bd0      	ldr	r3, [pc, #832]	; (8016fb8 <__ieee754_pow+0x760>)
 8016c78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016c7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016c80:	429c      	cmp	r4, r3
 8016c82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016c86:	dd08      	ble.n	8016c9a <__ieee754_pow+0x442>
 8016c88:	4bcc      	ldr	r3, [pc, #816]	; (8016fbc <__ieee754_pow+0x764>)
 8016c8a:	429c      	cmp	r4, r3
 8016c8c:	f340 8162 	ble.w	8016f54 <__ieee754_pow+0x6fc>
 8016c90:	9b05      	ldr	r3, [sp, #20]
 8016c92:	3301      	adds	r3, #1
 8016c94:	9305      	str	r3, [sp, #20]
 8016c96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016c9a:	2400      	movs	r4, #0
 8016c9c:	00e3      	lsls	r3, r4, #3
 8016c9e:	9307      	str	r3, [sp, #28]
 8016ca0:	4bc7      	ldr	r3, [pc, #796]	; (8016fc0 <__ieee754_pow+0x768>)
 8016ca2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016ca6:	ed93 7b00 	vldr	d7, [r3]
 8016caa:	4629      	mov	r1, r5
 8016cac:	ec53 2b17 	vmov	r2, r3, d7
 8016cb0:	eeb0 9a47 	vmov.f32	s18, s14
 8016cb4:	eef0 9a67 	vmov.f32	s19, s15
 8016cb8:	4682      	mov	sl, r0
 8016cba:	f7e9 fae5 	bl	8000288 <__aeabi_dsub>
 8016cbe:	4652      	mov	r2, sl
 8016cc0:	4606      	mov	r6, r0
 8016cc2:	460f      	mov	r7, r1
 8016cc4:	462b      	mov	r3, r5
 8016cc6:	ec51 0b19 	vmov	r0, r1, d9
 8016cca:	f7e9 fadf 	bl	800028c <__adddf3>
 8016cce:	4602      	mov	r2, r0
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	2000      	movs	r0, #0
 8016cd4:	49bb      	ldr	r1, [pc, #748]	; (8016fc4 <__ieee754_pow+0x76c>)
 8016cd6:	f7e9 fdb9 	bl	800084c <__aeabi_ddiv>
 8016cda:	ec41 0b1a 	vmov	d10, r0, r1
 8016cde:	4602      	mov	r2, r0
 8016ce0:	460b      	mov	r3, r1
 8016ce2:	4630      	mov	r0, r6
 8016ce4:	4639      	mov	r1, r7
 8016ce6:	f7e9 fc87 	bl	80005f8 <__aeabi_dmul>
 8016cea:	2300      	movs	r3, #0
 8016cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016cf0:	9302      	str	r3, [sp, #8]
 8016cf2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016cf6:	46ab      	mov	fp, r5
 8016cf8:	106d      	asrs	r5, r5, #1
 8016cfa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016cfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016d02:	ec41 0b18 	vmov	d8, r0, r1
 8016d06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	4640      	mov	r0, r8
 8016d0e:	4649      	mov	r1, r9
 8016d10:	4614      	mov	r4, r2
 8016d12:	461d      	mov	r5, r3
 8016d14:	f7e9 fc70 	bl	80005f8 <__aeabi_dmul>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	460b      	mov	r3, r1
 8016d1c:	4630      	mov	r0, r6
 8016d1e:	4639      	mov	r1, r7
 8016d20:	f7e9 fab2 	bl	8000288 <__aeabi_dsub>
 8016d24:	ec53 2b19 	vmov	r2, r3, d9
 8016d28:	4606      	mov	r6, r0
 8016d2a:	460f      	mov	r7, r1
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	4629      	mov	r1, r5
 8016d30:	f7e9 faaa 	bl	8000288 <__aeabi_dsub>
 8016d34:	4602      	mov	r2, r0
 8016d36:	460b      	mov	r3, r1
 8016d38:	4650      	mov	r0, sl
 8016d3a:	4659      	mov	r1, fp
 8016d3c:	f7e9 faa4 	bl	8000288 <__aeabi_dsub>
 8016d40:	4642      	mov	r2, r8
 8016d42:	464b      	mov	r3, r9
 8016d44:	f7e9 fc58 	bl	80005f8 <__aeabi_dmul>
 8016d48:	4602      	mov	r2, r0
 8016d4a:	460b      	mov	r3, r1
 8016d4c:	4630      	mov	r0, r6
 8016d4e:	4639      	mov	r1, r7
 8016d50:	f7e9 fa9a 	bl	8000288 <__aeabi_dsub>
 8016d54:	ec53 2b1a 	vmov	r2, r3, d10
 8016d58:	f7e9 fc4e 	bl	80005f8 <__aeabi_dmul>
 8016d5c:	ec53 2b18 	vmov	r2, r3, d8
 8016d60:	ec41 0b19 	vmov	d9, r0, r1
 8016d64:	ec51 0b18 	vmov	r0, r1, d8
 8016d68:	f7e9 fc46 	bl	80005f8 <__aeabi_dmul>
 8016d6c:	a37c      	add	r3, pc, #496	; (adr r3, 8016f60 <__ieee754_pow+0x708>)
 8016d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d72:	4604      	mov	r4, r0
 8016d74:	460d      	mov	r5, r1
 8016d76:	f7e9 fc3f 	bl	80005f8 <__aeabi_dmul>
 8016d7a:	a37b      	add	r3, pc, #492	; (adr r3, 8016f68 <__ieee754_pow+0x710>)
 8016d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d80:	f7e9 fa84 	bl	800028c <__adddf3>
 8016d84:	4622      	mov	r2, r4
 8016d86:	462b      	mov	r3, r5
 8016d88:	f7e9 fc36 	bl	80005f8 <__aeabi_dmul>
 8016d8c:	a378      	add	r3, pc, #480	; (adr r3, 8016f70 <__ieee754_pow+0x718>)
 8016d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d92:	f7e9 fa7b 	bl	800028c <__adddf3>
 8016d96:	4622      	mov	r2, r4
 8016d98:	462b      	mov	r3, r5
 8016d9a:	f7e9 fc2d 	bl	80005f8 <__aeabi_dmul>
 8016d9e:	a376      	add	r3, pc, #472	; (adr r3, 8016f78 <__ieee754_pow+0x720>)
 8016da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016da4:	f7e9 fa72 	bl	800028c <__adddf3>
 8016da8:	4622      	mov	r2, r4
 8016daa:	462b      	mov	r3, r5
 8016dac:	f7e9 fc24 	bl	80005f8 <__aeabi_dmul>
 8016db0:	a373      	add	r3, pc, #460	; (adr r3, 8016f80 <__ieee754_pow+0x728>)
 8016db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db6:	f7e9 fa69 	bl	800028c <__adddf3>
 8016dba:	4622      	mov	r2, r4
 8016dbc:	462b      	mov	r3, r5
 8016dbe:	f7e9 fc1b 	bl	80005f8 <__aeabi_dmul>
 8016dc2:	a371      	add	r3, pc, #452	; (adr r3, 8016f88 <__ieee754_pow+0x730>)
 8016dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc8:	f7e9 fa60 	bl	800028c <__adddf3>
 8016dcc:	4622      	mov	r2, r4
 8016dce:	4606      	mov	r6, r0
 8016dd0:	460f      	mov	r7, r1
 8016dd2:	462b      	mov	r3, r5
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	4629      	mov	r1, r5
 8016dd8:	f7e9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8016ddc:	4602      	mov	r2, r0
 8016dde:	460b      	mov	r3, r1
 8016de0:	4630      	mov	r0, r6
 8016de2:	4639      	mov	r1, r7
 8016de4:	f7e9 fc08 	bl	80005f8 <__aeabi_dmul>
 8016de8:	4642      	mov	r2, r8
 8016dea:	4604      	mov	r4, r0
 8016dec:	460d      	mov	r5, r1
 8016dee:	464b      	mov	r3, r9
 8016df0:	ec51 0b18 	vmov	r0, r1, d8
 8016df4:	f7e9 fa4a 	bl	800028c <__adddf3>
 8016df8:	ec53 2b19 	vmov	r2, r3, d9
 8016dfc:	f7e9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8016e00:	4622      	mov	r2, r4
 8016e02:	462b      	mov	r3, r5
 8016e04:	f7e9 fa42 	bl	800028c <__adddf3>
 8016e08:	4642      	mov	r2, r8
 8016e0a:	4682      	mov	sl, r0
 8016e0c:	468b      	mov	fp, r1
 8016e0e:	464b      	mov	r3, r9
 8016e10:	4640      	mov	r0, r8
 8016e12:	4649      	mov	r1, r9
 8016e14:	f7e9 fbf0 	bl	80005f8 <__aeabi_dmul>
 8016e18:	4b6b      	ldr	r3, [pc, #428]	; (8016fc8 <__ieee754_pow+0x770>)
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	4606      	mov	r6, r0
 8016e1e:	460f      	mov	r7, r1
 8016e20:	f7e9 fa34 	bl	800028c <__adddf3>
 8016e24:	4652      	mov	r2, sl
 8016e26:	465b      	mov	r3, fp
 8016e28:	f7e9 fa30 	bl	800028c <__adddf3>
 8016e2c:	2000      	movs	r0, #0
 8016e2e:	4604      	mov	r4, r0
 8016e30:	460d      	mov	r5, r1
 8016e32:	4602      	mov	r2, r0
 8016e34:	460b      	mov	r3, r1
 8016e36:	4640      	mov	r0, r8
 8016e38:	4649      	mov	r1, r9
 8016e3a:	f7e9 fbdd 	bl	80005f8 <__aeabi_dmul>
 8016e3e:	4b62      	ldr	r3, [pc, #392]	; (8016fc8 <__ieee754_pow+0x770>)
 8016e40:	4680      	mov	r8, r0
 8016e42:	4689      	mov	r9, r1
 8016e44:	2200      	movs	r2, #0
 8016e46:	4620      	mov	r0, r4
 8016e48:	4629      	mov	r1, r5
 8016e4a:	f7e9 fa1d 	bl	8000288 <__aeabi_dsub>
 8016e4e:	4632      	mov	r2, r6
 8016e50:	463b      	mov	r3, r7
 8016e52:	f7e9 fa19 	bl	8000288 <__aeabi_dsub>
 8016e56:	4602      	mov	r2, r0
 8016e58:	460b      	mov	r3, r1
 8016e5a:	4650      	mov	r0, sl
 8016e5c:	4659      	mov	r1, fp
 8016e5e:	f7e9 fa13 	bl	8000288 <__aeabi_dsub>
 8016e62:	ec53 2b18 	vmov	r2, r3, d8
 8016e66:	f7e9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8016e6a:	4622      	mov	r2, r4
 8016e6c:	4606      	mov	r6, r0
 8016e6e:	460f      	mov	r7, r1
 8016e70:	462b      	mov	r3, r5
 8016e72:	ec51 0b19 	vmov	r0, r1, d9
 8016e76:	f7e9 fbbf 	bl	80005f8 <__aeabi_dmul>
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	4630      	mov	r0, r6
 8016e80:	4639      	mov	r1, r7
 8016e82:	f7e9 fa03 	bl	800028c <__adddf3>
 8016e86:	4606      	mov	r6, r0
 8016e88:	460f      	mov	r7, r1
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	4640      	mov	r0, r8
 8016e90:	4649      	mov	r1, r9
 8016e92:	f7e9 f9fb 	bl	800028c <__adddf3>
 8016e96:	a33e      	add	r3, pc, #248	; (adr r3, 8016f90 <__ieee754_pow+0x738>)
 8016e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e9c:	2000      	movs	r0, #0
 8016e9e:	4604      	mov	r4, r0
 8016ea0:	460d      	mov	r5, r1
 8016ea2:	f7e9 fba9 	bl	80005f8 <__aeabi_dmul>
 8016ea6:	4642      	mov	r2, r8
 8016ea8:	ec41 0b18 	vmov	d8, r0, r1
 8016eac:	464b      	mov	r3, r9
 8016eae:	4620      	mov	r0, r4
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	f7e9 f9e9 	bl	8000288 <__aeabi_dsub>
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	460b      	mov	r3, r1
 8016eba:	4630      	mov	r0, r6
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	f7e9 f9e3 	bl	8000288 <__aeabi_dsub>
 8016ec2:	a335      	add	r3, pc, #212	; (adr r3, 8016f98 <__ieee754_pow+0x740>)
 8016ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec8:	f7e9 fb96 	bl	80005f8 <__aeabi_dmul>
 8016ecc:	a334      	add	r3, pc, #208	; (adr r3, 8016fa0 <__ieee754_pow+0x748>)
 8016ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed2:	4606      	mov	r6, r0
 8016ed4:	460f      	mov	r7, r1
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	4629      	mov	r1, r5
 8016eda:	f7e9 fb8d 	bl	80005f8 <__aeabi_dmul>
 8016ede:	4602      	mov	r2, r0
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	4630      	mov	r0, r6
 8016ee4:	4639      	mov	r1, r7
 8016ee6:	f7e9 f9d1 	bl	800028c <__adddf3>
 8016eea:	9a07      	ldr	r2, [sp, #28]
 8016eec:	4b37      	ldr	r3, [pc, #220]	; (8016fcc <__ieee754_pow+0x774>)
 8016eee:	4413      	add	r3, r2
 8016ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef4:	f7e9 f9ca 	bl	800028c <__adddf3>
 8016ef8:	4682      	mov	sl, r0
 8016efa:	9805      	ldr	r0, [sp, #20]
 8016efc:	468b      	mov	fp, r1
 8016efe:	f7e9 fb11 	bl	8000524 <__aeabi_i2d>
 8016f02:	9a07      	ldr	r2, [sp, #28]
 8016f04:	4b32      	ldr	r3, [pc, #200]	; (8016fd0 <__ieee754_pow+0x778>)
 8016f06:	4413      	add	r3, r2
 8016f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016f0c:	4606      	mov	r6, r0
 8016f0e:	460f      	mov	r7, r1
 8016f10:	4652      	mov	r2, sl
 8016f12:	465b      	mov	r3, fp
 8016f14:	ec51 0b18 	vmov	r0, r1, d8
 8016f18:	f7e9 f9b8 	bl	800028c <__adddf3>
 8016f1c:	4642      	mov	r2, r8
 8016f1e:	464b      	mov	r3, r9
 8016f20:	f7e9 f9b4 	bl	800028c <__adddf3>
 8016f24:	4632      	mov	r2, r6
 8016f26:	463b      	mov	r3, r7
 8016f28:	f7e9 f9b0 	bl	800028c <__adddf3>
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	4632      	mov	r2, r6
 8016f30:	463b      	mov	r3, r7
 8016f32:	4604      	mov	r4, r0
 8016f34:	460d      	mov	r5, r1
 8016f36:	f7e9 f9a7 	bl	8000288 <__aeabi_dsub>
 8016f3a:	4642      	mov	r2, r8
 8016f3c:	464b      	mov	r3, r9
 8016f3e:	f7e9 f9a3 	bl	8000288 <__aeabi_dsub>
 8016f42:	ec53 2b18 	vmov	r2, r3, d8
 8016f46:	f7e9 f99f 	bl	8000288 <__aeabi_dsub>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	4650      	mov	r0, sl
 8016f50:	4659      	mov	r1, fp
 8016f52:	e610      	b.n	8016b76 <__ieee754_pow+0x31e>
 8016f54:	2401      	movs	r4, #1
 8016f56:	e6a1      	b.n	8016c9c <__ieee754_pow+0x444>
 8016f58:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8016fa8 <__ieee754_pow+0x750>
 8016f5c:	e617      	b.n	8016b8e <__ieee754_pow+0x336>
 8016f5e:	bf00      	nop
 8016f60:	4a454eef 	.word	0x4a454eef
 8016f64:	3fca7e28 	.word	0x3fca7e28
 8016f68:	93c9db65 	.word	0x93c9db65
 8016f6c:	3fcd864a 	.word	0x3fcd864a
 8016f70:	a91d4101 	.word	0xa91d4101
 8016f74:	3fd17460 	.word	0x3fd17460
 8016f78:	518f264d 	.word	0x518f264d
 8016f7c:	3fd55555 	.word	0x3fd55555
 8016f80:	db6fabff 	.word	0xdb6fabff
 8016f84:	3fdb6db6 	.word	0x3fdb6db6
 8016f88:	33333303 	.word	0x33333303
 8016f8c:	3fe33333 	.word	0x3fe33333
 8016f90:	e0000000 	.word	0xe0000000
 8016f94:	3feec709 	.word	0x3feec709
 8016f98:	dc3a03fd 	.word	0xdc3a03fd
 8016f9c:	3feec709 	.word	0x3feec709
 8016fa0:	145b01f5 	.word	0x145b01f5
 8016fa4:	be3e2fe0 	.word	0xbe3e2fe0
 8016fa8:	00000000 	.word	0x00000000
 8016fac:	3ff00000 	.word	0x3ff00000
 8016fb0:	7ff00000 	.word	0x7ff00000
 8016fb4:	43400000 	.word	0x43400000
 8016fb8:	0003988e 	.word	0x0003988e
 8016fbc:	000bb679 	.word	0x000bb679
 8016fc0:	0803b088 	.word	0x0803b088
 8016fc4:	3ff00000 	.word	0x3ff00000
 8016fc8:	40080000 	.word	0x40080000
 8016fcc:	0803b0a8 	.word	0x0803b0a8
 8016fd0:	0803b098 	.word	0x0803b098
 8016fd4:	a3b3      	add	r3, pc, #716	; (adr r3, 80172a4 <__ieee754_pow+0xa4c>)
 8016fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fda:	4640      	mov	r0, r8
 8016fdc:	4649      	mov	r1, r9
 8016fde:	f7e9 f955 	bl	800028c <__adddf3>
 8016fe2:	4622      	mov	r2, r4
 8016fe4:	ec41 0b1a 	vmov	d10, r0, r1
 8016fe8:	462b      	mov	r3, r5
 8016fea:	4630      	mov	r0, r6
 8016fec:	4639      	mov	r1, r7
 8016fee:	f7e9 f94b 	bl	8000288 <__aeabi_dsub>
 8016ff2:	4602      	mov	r2, r0
 8016ff4:	460b      	mov	r3, r1
 8016ff6:	ec51 0b1a 	vmov	r0, r1, d10
 8016ffa:	f7e9 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	f47f ae04 	bne.w	8016c0c <__ieee754_pow+0x3b4>
 8017004:	4aa2      	ldr	r2, [pc, #648]	; (8017290 <__ieee754_pow+0xa38>)
 8017006:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801700a:	4293      	cmp	r3, r2
 801700c:	f340 8107 	ble.w	801721e <__ieee754_pow+0x9c6>
 8017010:	151b      	asrs	r3, r3, #20
 8017012:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017016:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801701a:	fa4a fa03 	asr.w	sl, sl, r3
 801701e:	44da      	add	sl, fp
 8017020:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017024:	489b      	ldr	r0, [pc, #620]	; (8017294 <__ieee754_pow+0xa3c>)
 8017026:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801702a:	4108      	asrs	r0, r1
 801702c:	ea00 030a 	and.w	r3, r0, sl
 8017030:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017034:	f1c1 0114 	rsb	r1, r1, #20
 8017038:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801703c:	fa4a fa01 	asr.w	sl, sl, r1
 8017040:	f1bb 0f00 	cmp.w	fp, #0
 8017044:	f04f 0200 	mov.w	r2, #0
 8017048:	4620      	mov	r0, r4
 801704a:	4629      	mov	r1, r5
 801704c:	bfb8      	it	lt
 801704e:	f1ca 0a00 	rsblt	sl, sl, #0
 8017052:	f7e9 f919 	bl	8000288 <__aeabi_dsub>
 8017056:	ec41 0b19 	vmov	d9, r0, r1
 801705a:	4642      	mov	r2, r8
 801705c:	464b      	mov	r3, r9
 801705e:	ec51 0b19 	vmov	r0, r1, d9
 8017062:	f7e9 f913 	bl	800028c <__adddf3>
 8017066:	a37a      	add	r3, pc, #488	; (adr r3, 8017250 <__ieee754_pow+0x9f8>)
 8017068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801706c:	2000      	movs	r0, #0
 801706e:	4604      	mov	r4, r0
 8017070:	460d      	mov	r5, r1
 8017072:	f7e9 fac1 	bl	80005f8 <__aeabi_dmul>
 8017076:	ec53 2b19 	vmov	r2, r3, d9
 801707a:	4606      	mov	r6, r0
 801707c:	460f      	mov	r7, r1
 801707e:	4620      	mov	r0, r4
 8017080:	4629      	mov	r1, r5
 8017082:	f7e9 f901 	bl	8000288 <__aeabi_dsub>
 8017086:	4602      	mov	r2, r0
 8017088:	460b      	mov	r3, r1
 801708a:	4640      	mov	r0, r8
 801708c:	4649      	mov	r1, r9
 801708e:	f7e9 f8fb 	bl	8000288 <__aeabi_dsub>
 8017092:	a371      	add	r3, pc, #452	; (adr r3, 8017258 <__ieee754_pow+0xa00>)
 8017094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017098:	f7e9 faae 	bl	80005f8 <__aeabi_dmul>
 801709c:	a370      	add	r3, pc, #448	; (adr r3, 8017260 <__ieee754_pow+0xa08>)
 801709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a2:	4680      	mov	r8, r0
 80170a4:	4689      	mov	r9, r1
 80170a6:	4620      	mov	r0, r4
 80170a8:	4629      	mov	r1, r5
 80170aa:	f7e9 faa5 	bl	80005f8 <__aeabi_dmul>
 80170ae:	4602      	mov	r2, r0
 80170b0:	460b      	mov	r3, r1
 80170b2:	4640      	mov	r0, r8
 80170b4:	4649      	mov	r1, r9
 80170b6:	f7e9 f8e9 	bl	800028c <__adddf3>
 80170ba:	4604      	mov	r4, r0
 80170bc:	460d      	mov	r5, r1
 80170be:	4602      	mov	r2, r0
 80170c0:	460b      	mov	r3, r1
 80170c2:	4630      	mov	r0, r6
 80170c4:	4639      	mov	r1, r7
 80170c6:	f7e9 f8e1 	bl	800028c <__adddf3>
 80170ca:	4632      	mov	r2, r6
 80170cc:	463b      	mov	r3, r7
 80170ce:	4680      	mov	r8, r0
 80170d0:	4689      	mov	r9, r1
 80170d2:	f7e9 f8d9 	bl	8000288 <__aeabi_dsub>
 80170d6:	4602      	mov	r2, r0
 80170d8:	460b      	mov	r3, r1
 80170da:	4620      	mov	r0, r4
 80170dc:	4629      	mov	r1, r5
 80170de:	f7e9 f8d3 	bl	8000288 <__aeabi_dsub>
 80170e2:	4642      	mov	r2, r8
 80170e4:	4606      	mov	r6, r0
 80170e6:	460f      	mov	r7, r1
 80170e8:	464b      	mov	r3, r9
 80170ea:	4640      	mov	r0, r8
 80170ec:	4649      	mov	r1, r9
 80170ee:	f7e9 fa83 	bl	80005f8 <__aeabi_dmul>
 80170f2:	a35d      	add	r3, pc, #372	; (adr r3, 8017268 <__ieee754_pow+0xa10>)
 80170f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f8:	4604      	mov	r4, r0
 80170fa:	460d      	mov	r5, r1
 80170fc:	f7e9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8017100:	a35b      	add	r3, pc, #364	; (adr r3, 8017270 <__ieee754_pow+0xa18>)
 8017102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017106:	f7e9 f8bf 	bl	8000288 <__aeabi_dsub>
 801710a:	4622      	mov	r2, r4
 801710c:	462b      	mov	r3, r5
 801710e:	f7e9 fa73 	bl	80005f8 <__aeabi_dmul>
 8017112:	a359      	add	r3, pc, #356	; (adr r3, 8017278 <__ieee754_pow+0xa20>)
 8017114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017118:	f7e9 f8b8 	bl	800028c <__adddf3>
 801711c:	4622      	mov	r2, r4
 801711e:	462b      	mov	r3, r5
 8017120:	f7e9 fa6a 	bl	80005f8 <__aeabi_dmul>
 8017124:	a356      	add	r3, pc, #344	; (adr r3, 8017280 <__ieee754_pow+0xa28>)
 8017126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801712a:	f7e9 f8ad 	bl	8000288 <__aeabi_dsub>
 801712e:	4622      	mov	r2, r4
 8017130:	462b      	mov	r3, r5
 8017132:	f7e9 fa61 	bl	80005f8 <__aeabi_dmul>
 8017136:	a354      	add	r3, pc, #336	; (adr r3, 8017288 <__ieee754_pow+0xa30>)
 8017138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713c:	f7e9 f8a6 	bl	800028c <__adddf3>
 8017140:	4622      	mov	r2, r4
 8017142:	462b      	mov	r3, r5
 8017144:	f7e9 fa58 	bl	80005f8 <__aeabi_dmul>
 8017148:	4602      	mov	r2, r0
 801714a:	460b      	mov	r3, r1
 801714c:	4640      	mov	r0, r8
 801714e:	4649      	mov	r1, r9
 8017150:	f7e9 f89a 	bl	8000288 <__aeabi_dsub>
 8017154:	4604      	mov	r4, r0
 8017156:	460d      	mov	r5, r1
 8017158:	4602      	mov	r2, r0
 801715a:	460b      	mov	r3, r1
 801715c:	4640      	mov	r0, r8
 801715e:	4649      	mov	r1, r9
 8017160:	f7e9 fa4a 	bl	80005f8 <__aeabi_dmul>
 8017164:	2200      	movs	r2, #0
 8017166:	ec41 0b19 	vmov	d9, r0, r1
 801716a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801716e:	4620      	mov	r0, r4
 8017170:	4629      	mov	r1, r5
 8017172:	f7e9 f889 	bl	8000288 <__aeabi_dsub>
 8017176:	4602      	mov	r2, r0
 8017178:	460b      	mov	r3, r1
 801717a:	ec51 0b19 	vmov	r0, r1, d9
 801717e:	f7e9 fb65 	bl	800084c <__aeabi_ddiv>
 8017182:	4632      	mov	r2, r6
 8017184:	4604      	mov	r4, r0
 8017186:	460d      	mov	r5, r1
 8017188:	463b      	mov	r3, r7
 801718a:	4640      	mov	r0, r8
 801718c:	4649      	mov	r1, r9
 801718e:	f7e9 fa33 	bl	80005f8 <__aeabi_dmul>
 8017192:	4632      	mov	r2, r6
 8017194:	463b      	mov	r3, r7
 8017196:	f7e9 f879 	bl	800028c <__adddf3>
 801719a:	4602      	mov	r2, r0
 801719c:	460b      	mov	r3, r1
 801719e:	4620      	mov	r0, r4
 80171a0:	4629      	mov	r1, r5
 80171a2:	f7e9 f871 	bl	8000288 <__aeabi_dsub>
 80171a6:	4642      	mov	r2, r8
 80171a8:	464b      	mov	r3, r9
 80171aa:	f7e9 f86d 	bl	8000288 <__aeabi_dsub>
 80171ae:	460b      	mov	r3, r1
 80171b0:	4602      	mov	r2, r0
 80171b2:	4939      	ldr	r1, [pc, #228]	; (8017298 <__ieee754_pow+0xa40>)
 80171b4:	2000      	movs	r0, #0
 80171b6:	f7e9 f867 	bl	8000288 <__aeabi_dsub>
 80171ba:	ec41 0b10 	vmov	d0, r0, r1
 80171be:	ee10 3a90 	vmov	r3, s1
 80171c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80171c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80171ca:	da2b      	bge.n	8017224 <__ieee754_pow+0x9cc>
 80171cc:	4650      	mov	r0, sl
 80171ce:	f000 f877 	bl	80172c0 <scalbn>
 80171d2:	ec51 0b10 	vmov	r0, r1, d0
 80171d6:	ec53 2b18 	vmov	r2, r3, d8
 80171da:	f7ff bbee 	b.w	80169ba <__ieee754_pow+0x162>
 80171de:	4b2f      	ldr	r3, [pc, #188]	; (801729c <__ieee754_pow+0xa44>)
 80171e0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80171e4:	429e      	cmp	r6, r3
 80171e6:	f77f af0d 	ble.w	8017004 <__ieee754_pow+0x7ac>
 80171ea:	4b2d      	ldr	r3, [pc, #180]	; (80172a0 <__ieee754_pow+0xa48>)
 80171ec:	440b      	add	r3, r1
 80171ee:	4303      	orrs	r3, r0
 80171f0:	d009      	beq.n	8017206 <__ieee754_pow+0x9ae>
 80171f2:	ec51 0b18 	vmov	r0, r1, d8
 80171f6:	2200      	movs	r2, #0
 80171f8:	2300      	movs	r3, #0
 80171fa:	f7e9 fc6f 	bl	8000adc <__aeabi_dcmplt>
 80171fe:	3800      	subs	r0, #0
 8017200:	bf18      	it	ne
 8017202:	2001      	movne	r0, #1
 8017204:	e448      	b.n	8016a98 <__ieee754_pow+0x240>
 8017206:	4622      	mov	r2, r4
 8017208:	462b      	mov	r3, r5
 801720a:	f7e9 f83d 	bl	8000288 <__aeabi_dsub>
 801720e:	4642      	mov	r2, r8
 8017210:	464b      	mov	r3, r9
 8017212:	f7e9 fc77 	bl	8000b04 <__aeabi_dcmpge>
 8017216:	2800      	cmp	r0, #0
 8017218:	f43f aef4 	beq.w	8017004 <__ieee754_pow+0x7ac>
 801721c:	e7e9      	b.n	80171f2 <__ieee754_pow+0x99a>
 801721e:	f04f 0a00 	mov.w	sl, #0
 8017222:	e71a      	b.n	801705a <__ieee754_pow+0x802>
 8017224:	ec51 0b10 	vmov	r0, r1, d0
 8017228:	4619      	mov	r1, r3
 801722a:	e7d4      	b.n	80171d6 <__ieee754_pow+0x97e>
 801722c:	491a      	ldr	r1, [pc, #104]	; (8017298 <__ieee754_pow+0xa40>)
 801722e:	2000      	movs	r0, #0
 8017230:	f7ff bb31 	b.w	8016896 <__ieee754_pow+0x3e>
 8017234:	2000      	movs	r0, #0
 8017236:	2100      	movs	r1, #0
 8017238:	f7ff bb2d 	b.w	8016896 <__ieee754_pow+0x3e>
 801723c:	4630      	mov	r0, r6
 801723e:	4639      	mov	r1, r7
 8017240:	f7ff bb29 	b.w	8016896 <__ieee754_pow+0x3e>
 8017244:	9204      	str	r2, [sp, #16]
 8017246:	f7ff bb7b 	b.w	8016940 <__ieee754_pow+0xe8>
 801724a:	2300      	movs	r3, #0
 801724c:	f7ff bb65 	b.w	801691a <__ieee754_pow+0xc2>
 8017250:	00000000 	.word	0x00000000
 8017254:	3fe62e43 	.word	0x3fe62e43
 8017258:	fefa39ef 	.word	0xfefa39ef
 801725c:	3fe62e42 	.word	0x3fe62e42
 8017260:	0ca86c39 	.word	0x0ca86c39
 8017264:	be205c61 	.word	0xbe205c61
 8017268:	72bea4d0 	.word	0x72bea4d0
 801726c:	3e663769 	.word	0x3e663769
 8017270:	c5d26bf1 	.word	0xc5d26bf1
 8017274:	3ebbbd41 	.word	0x3ebbbd41
 8017278:	af25de2c 	.word	0xaf25de2c
 801727c:	3f11566a 	.word	0x3f11566a
 8017280:	16bebd93 	.word	0x16bebd93
 8017284:	3f66c16c 	.word	0x3f66c16c
 8017288:	5555553e 	.word	0x5555553e
 801728c:	3fc55555 	.word	0x3fc55555
 8017290:	3fe00000 	.word	0x3fe00000
 8017294:	fff00000 	.word	0xfff00000
 8017298:	3ff00000 	.word	0x3ff00000
 801729c:	4090cbff 	.word	0x4090cbff
 80172a0:	3f6f3400 	.word	0x3f6f3400
 80172a4:	652b82fe 	.word	0x652b82fe
 80172a8:	3c971547 	.word	0x3c971547

080172ac <fabs>:
 80172ac:	ec51 0b10 	vmov	r0, r1, d0
 80172b0:	ee10 2a10 	vmov	r2, s0
 80172b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80172b8:	ec43 2b10 	vmov	d0, r2, r3
 80172bc:	4770      	bx	lr
	...

080172c0 <scalbn>:
 80172c0:	b570      	push	{r4, r5, r6, lr}
 80172c2:	ec55 4b10 	vmov	r4, r5, d0
 80172c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80172ca:	4606      	mov	r6, r0
 80172cc:	462b      	mov	r3, r5
 80172ce:	b999      	cbnz	r1, 80172f8 <scalbn+0x38>
 80172d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80172d4:	4323      	orrs	r3, r4
 80172d6:	d03f      	beq.n	8017358 <scalbn+0x98>
 80172d8:	4b35      	ldr	r3, [pc, #212]	; (80173b0 <scalbn+0xf0>)
 80172da:	4629      	mov	r1, r5
 80172dc:	ee10 0a10 	vmov	r0, s0
 80172e0:	2200      	movs	r2, #0
 80172e2:	f7e9 f989 	bl	80005f8 <__aeabi_dmul>
 80172e6:	4b33      	ldr	r3, [pc, #204]	; (80173b4 <scalbn+0xf4>)
 80172e8:	429e      	cmp	r6, r3
 80172ea:	4604      	mov	r4, r0
 80172ec:	460d      	mov	r5, r1
 80172ee:	da10      	bge.n	8017312 <scalbn+0x52>
 80172f0:	a327      	add	r3, pc, #156	; (adr r3, 8017390 <scalbn+0xd0>)
 80172f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f6:	e01f      	b.n	8017338 <scalbn+0x78>
 80172f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80172fc:	4291      	cmp	r1, r2
 80172fe:	d10c      	bne.n	801731a <scalbn+0x5a>
 8017300:	ee10 2a10 	vmov	r2, s0
 8017304:	4620      	mov	r0, r4
 8017306:	4629      	mov	r1, r5
 8017308:	f7e8 ffc0 	bl	800028c <__adddf3>
 801730c:	4604      	mov	r4, r0
 801730e:	460d      	mov	r5, r1
 8017310:	e022      	b.n	8017358 <scalbn+0x98>
 8017312:	460b      	mov	r3, r1
 8017314:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017318:	3936      	subs	r1, #54	; 0x36
 801731a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801731e:	4296      	cmp	r6, r2
 8017320:	dd0d      	ble.n	801733e <scalbn+0x7e>
 8017322:	2d00      	cmp	r5, #0
 8017324:	a11c      	add	r1, pc, #112	; (adr r1, 8017398 <scalbn+0xd8>)
 8017326:	e9d1 0100 	ldrd	r0, r1, [r1]
 801732a:	da02      	bge.n	8017332 <scalbn+0x72>
 801732c:	a11c      	add	r1, pc, #112	; (adr r1, 80173a0 <scalbn+0xe0>)
 801732e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017332:	a319      	add	r3, pc, #100	; (adr r3, 8017398 <scalbn+0xd8>)
 8017334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017338:	f7e9 f95e 	bl	80005f8 <__aeabi_dmul>
 801733c:	e7e6      	b.n	801730c <scalbn+0x4c>
 801733e:	1872      	adds	r2, r6, r1
 8017340:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017344:	428a      	cmp	r2, r1
 8017346:	dcec      	bgt.n	8017322 <scalbn+0x62>
 8017348:	2a00      	cmp	r2, #0
 801734a:	dd08      	ble.n	801735e <scalbn+0x9e>
 801734c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017358:	ec45 4b10 	vmov	d0, r4, r5
 801735c:	bd70      	pop	{r4, r5, r6, pc}
 801735e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017362:	da08      	bge.n	8017376 <scalbn+0xb6>
 8017364:	2d00      	cmp	r5, #0
 8017366:	a10a      	add	r1, pc, #40	; (adr r1, 8017390 <scalbn+0xd0>)
 8017368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801736c:	dac0      	bge.n	80172f0 <scalbn+0x30>
 801736e:	a10e      	add	r1, pc, #56	; (adr r1, 80173a8 <scalbn+0xe8>)
 8017370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017374:	e7bc      	b.n	80172f0 <scalbn+0x30>
 8017376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801737a:	3236      	adds	r2, #54	; 0x36
 801737c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017380:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017384:	4620      	mov	r0, r4
 8017386:	4b0c      	ldr	r3, [pc, #48]	; (80173b8 <scalbn+0xf8>)
 8017388:	2200      	movs	r2, #0
 801738a:	e7d5      	b.n	8017338 <scalbn+0x78>
 801738c:	f3af 8000 	nop.w
 8017390:	c2f8f359 	.word	0xc2f8f359
 8017394:	01a56e1f 	.word	0x01a56e1f
 8017398:	8800759c 	.word	0x8800759c
 801739c:	7e37e43c 	.word	0x7e37e43c
 80173a0:	8800759c 	.word	0x8800759c
 80173a4:	fe37e43c 	.word	0xfe37e43c
 80173a8:	c2f8f359 	.word	0xc2f8f359
 80173ac:	81a56e1f 	.word	0x81a56e1f
 80173b0:	43500000 	.word	0x43500000
 80173b4:	ffff3cb0 	.word	0xffff3cb0
 80173b8:	3c900000 	.word	0x3c900000

080173bc <with_errno>:
 80173bc:	b570      	push	{r4, r5, r6, lr}
 80173be:	4604      	mov	r4, r0
 80173c0:	460d      	mov	r5, r1
 80173c2:	4616      	mov	r6, r2
 80173c4:	f7fc ffa2 	bl	801430c <__errno>
 80173c8:	4629      	mov	r1, r5
 80173ca:	6006      	str	r6, [r0, #0]
 80173cc:	4620      	mov	r0, r4
 80173ce:	bd70      	pop	{r4, r5, r6, pc}

080173d0 <xflow>:
 80173d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173d2:	4614      	mov	r4, r2
 80173d4:	461d      	mov	r5, r3
 80173d6:	b108      	cbz	r0, 80173dc <xflow+0xc>
 80173d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80173dc:	e9cd 2300 	strd	r2, r3, [sp]
 80173e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173e4:	4620      	mov	r0, r4
 80173e6:	4629      	mov	r1, r5
 80173e8:	f7e9 f906 	bl	80005f8 <__aeabi_dmul>
 80173ec:	2222      	movs	r2, #34	; 0x22
 80173ee:	b003      	add	sp, #12
 80173f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173f4:	f7ff bfe2 	b.w	80173bc <with_errno>

080173f8 <__math_uflow>:
 80173f8:	b508      	push	{r3, lr}
 80173fa:	2200      	movs	r2, #0
 80173fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017400:	f7ff ffe6 	bl	80173d0 <xflow>
 8017404:	ec41 0b10 	vmov	d0, r0, r1
 8017408:	bd08      	pop	{r3, pc}

0801740a <__math_oflow>:
 801740a:	b508      	push	{r3, lr}
 801740c:	2200      	movs	r2, #0
 801740e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017412:	f7ff ffdd 	bl	80173d0 <xflow>
 8017416:	ec41 0b10 	vmov	d0, r0, r1
 801741a:	bd08      	pop	{r3, pc}

0801741c <__ieee754_sqrt>:
 801741c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017420:	ec55 4b10 	vmov	r4, r5, d0
 8017424:	4e67      	ldr	r6, [pc, #412]	; (80175c4 <__ieee754_sqrt+0x1a8>)
 8017426:	43ae      	bics	r6, r5
 8017428:	ee10 0a10 	vmov	r0, s0
 801742c:	ee10 2a10 	vmov	r2, s0
 8017430:	4629      	mov	r1, r5
 8017432:	462b      	mov	r3, r5
 8017434:	d10d      	bne.n	8017452 <__ieee754_sqrt+0x36>
 8017436:	f7e9 f8df 	bl	80005f8 <__aeabi_dmul>
 801743a:	4602      	mov	r2, r0
 801743c:	460b      	mov	r3, r1
 801743e:	4620      	mov	r0, r4
 8017440:	4629      	mov	r1, r5
 8017442:	f7e8 ff23 	bl	800028c <__adddf3>
 8017446:	4604      	mov	r4, r0
 8017448:	460d      	mov	r5, r1
 801744a:	ec45 4b10 	vmov	d0, r4, r5
 801744e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017452:	2d00      	cmp	r5, #0
 8017454:	dc0b      	bgt.n	801746e <__ieee754_sqrt+0x52>
 8017456:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801745a:	4326      	orrs	r6, r4
 801745c:	d0f5      	beq.n	801744a <__ieee754_sqrt+0x2e>
 801745e:	b135      	cbz	r5, 801746e <__ieee754_sqrt+0x52>
 8017460:	f7e8 ff12 	bl	8000288 <__aeabi_dsub>
 8017464:	4602      	mov	r2, r0
 8017466:	460b      	mov	r3, r1
 8017468:	f7e9 f9f0 	bl	800084c <__aeabi_ddiv>
 801746c:	e7eb      	b.n	8017446 <__ieee754_sqrt+0x2a>
 801746e:	1509      	asrs	r1, r1, #20
 8017470:	f000 808d 	beq.w	801758e <__ieee754_sqrt+0x172>
 8017474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017478:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801747c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017480:	07c9      	lsls	r1, r1, #31
 8017482:	bf5c      	itt	pl
 8017484:	005b      	lslpl	r3, r3, #1
 8017486:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801748a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801748e:	bf58      	it	pl
 8017490:	0052      	lslpl	r2, r2, #1
 8017492:	2500      	movs	r5, #0
 8017494:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017498:	1076      	asrs	r6, r6, #1
 801749a:	0052      	lsls	r2, r2, #1
 801749c:	f04f 0e16 	mov.w	lr, #22
 80174a0:	46ac      	mov	ip, r5
 80174a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80174a6:	eb0c 0001 	add.w	r0, ip, r1
 80174aa:	4298      	cmp	r0, r3
 80174ac:	bfde      	ittt	le
 80174ae:	1a1b      	suble	r3, r3, r0
 80174b0:	eb00 0c01 	addle.w	ip, r0, r1
 80174b4:	186d      	addle	r5, r5, r1
 80174b6:	005b      	lsls	r3, r3, #1
 80174b8:	f1be 0e01 	subs.w	lr, lr, #1
 80174bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80174c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80174c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80174c8:	d1ed      	bne.n	80174a6 <__ieee754_sqrt+0x8a>
 80174ca:	4674      	mov	r4, lr
 80174cc:	2720      	movs	r7, #32
 80174ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80174d2:	4563      	cmp	r3, ip
 80174d4:	eb01 000e 	add.w	r0, r1, lr
 80174d8:	dc02      	bgt.n	80174e0 <__ieee754_sqrt+0xc4>
 80174da:	d113      	bne.n	8017504 <__ieee754_sqrt+0xe8>
 80174dc:	4290      	cmp	r0, r2
 80174de:	d811      	bhi.n	8017504 <__ieee754_sqrt+0xe8>
 80174e0:	2800      	cmp	r0, #0
 80174e2:	eb00 0e01 	add.w	lr, r0, r1
 80174e6:	da57      	bge.n	8017598 <__ieee754_sqrt+0x17c>
 80174e8:	f1be 0f00 	cmp.w	lr, #0
 80174ec:	db54      	blt.n	8017598 <__ieee754_sqrt+0x17c>
 80174ee:	f10c 0801 	add.w	r8, ip, #1
 80174f2:	eba3 030c 	sub.w	r3, r3, ip
 80174f6:	4290      	cmp	r0, r2
 80174f8:	bf88      	it	hi
 80174fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80174fe:	1a12      	subs	r2, r2, r0
 8017500:	440c      	add	r4, r1
 8017502:	46c4      	mov	ip, r8
 8017504:	005b      	lsls	r3, r3, #1
 8017506:	3f01      	subs	r7, #1
 8017508:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801750c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017510:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8017514:	d1dd      	bne.n	80174d2 <__ieee754_sqrt+0xb6>
 8017516:	4313      	orrs	r3, r2
 8017518:	d01b      	beq.n	8017552 <__ieee754_sqrt+0x136>
 801751a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80175c8 <__ieee754_sqrt+0x1ac>
 801751e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80175cc <__ieee754_sqrt+0x1b0>
 8017522:	e9da 0100 	ldrd	r0, r1, [sl]
 8017526:	e9db 2300 	ldrd	r2, r3, [fp]
 801752a:	f7e8 fead 	bl	8000288 <__aeabi_dsub>
 801752e:	e9da 8900 	ldrd	r8, r9, [sl]
 8017532:	4602      	mov	r2, r0
 8017534:	460b      	mov	r3, r1
 8017536:	4640      	mov	r0, r8
 8017538:	4649      	mov	r1, r9
 801753a:	f7e9 fad9 	bl	8000af0 <__aeabi_dcmple>
 801753e:	b140      	cbz	r0, 8017552 <__ieee754_sqrt+0x136>
 8017540:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017544:	e9da 0100 	ldrd	r0, r1, [sl]
 8017548:	e9db 2300 	ldrd	r2, r3, [fp]
 801754c:	d126      	bne.n	801759c <__ieee754_sqrt+0x180>
 801754e:	3501      	adds	r5, #1
 8017550:	463c      	mov	r4, r7
 8017552:	106a      	asrs	r2, r5, #1
 8017554:	0863      	lsrs	r3, r4, #1
 8017556:	07e9      	lsls	r1, r5, #31
 8017558:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801755c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017560:	bf48      	it	mi
 8017562:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017566:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801756a:	461c      	mov	r4, r3
 801756c:	e76d      	b.n	801744a <__ieee754_sqrt+0x2e>
 801756e:	0ad3      	lsrs	r3, r2, #11
 8017570:	3815      	subs	r0, #21
 8017572:	0552      	lsls	r2, r2, #21
 8017574:	2b00      	cmp	r3, #0
 8017576:	d0fa      	beq.n	801756e <__ieee754_sqrt+0x152>
 8017578:	02dc      	lsls	r4, r3, #11
 801757a:	d50a      	bpl.n	8017592 <__ieee754_sqrt+0x176>
 801757c:	f1c1 0420 	rsb	r4, r1, #32
 8017580:	fa22 f404 	lsr.w	r4, r2, r4
 8017584:	1e4d      	subs	r5, r1, #1
 8017586:	408a      	lsls	r2, r1
 8017588:	4323      	orrs	r3, r4
 801758a:	1b41      	subs	r1, r0, r5
 801758c:	e772      	b.n	8017474 <__ieee754_sqrt+0x58>
 801758e:	4608      	mov	r0, r1
 8017590:	e7f0      	b.n	8017574 <__ieee754_sqrt+0x158>
 8017592:	005b      	lsls	r3, r3, #1
 8017594:	3101      	adds	r1, #1
 8017596:	e7ef      	b.n	8017578 <__ieee754_sqrt+0x15c>
 8017598:	46e0      	mov	r8, ip
 801759a:	e7aa      	b.n	80174f2 <__ieee754_sqrt+0xd6>
 801759c:	f7e8 fe76 	bl	800028c <__adddf3>
 80175a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80175a4:	4602      	mov	r2, r0
 80175a6:	460b      	mov	r3, r1
 80175a8:	4640      	mov	r0, r8
 80175aa:	4649      	mov	r1, r9
 80175ac:	f7e9 fa96 	bl	8000adc <__aeabi_dcmplt>
 80175b0:	b120      	cbz	r0, 80175bc <__ieee754_sqrt+0x1a0>
 80175b2:	1ca0      	adds	r0, r4, #2
 80175b4:	bf08      	it	eq
 80175b6:	3501      	addeq	r5, #1
 80175b8:	3402      	adds	r4, #2
 80175ba:	e7ca      	b.n	8017552 <__ieee754_sqrt+0x136>
 80175bc:	3401      	adds	r4, #1
 80175be:	f024 0401 	bic.w	r4, r4, #1
 80175c2:	e7c6      	b.n	8017552 <__ieee754_sqrt+0x136>
 80175c4:	7ff00000 	.word	0x7ff00000
 80175c8:	200004b8 	.word	0x200004b8
 80175cc:	200004c0 	.word	0x200004c0

080175d0 <_init>:
 80175d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175d2:	bf00      	nop
 80175d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175d6:	bc08      	pop	{r3}
 80175d8:	469e      	mov	lr, r3
 80175da:	4770      	bx	lr

080175dc <_fini>:
 80175dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175de:	bf00      	nop
 80175e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175e2:	bc08      	pop	{r3}
 80175e4:	469e      	mov	lr, r3
 80175e6:	4770      	bx	lr
